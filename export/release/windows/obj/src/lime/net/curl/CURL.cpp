// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_net_curl_CURL
#include <lime/net/curl/CURL.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_eb990c46aed3e3e1_28_new,"lime.net.curl.CURL","new",0x4e46b036,"lime.net.curl.CURL.new","lime/net/curl/CURL.hx",28,0x82d3899b)
HX_LOCAL_STACK_FRAME(_hx_pos_eb990c46aed3e3e1_43_cleanup,"lime.net.curl.CURL","cleanup",0x6d508efa,"lime.net.curl.CURL.cleanup","lime/net/curl/CURL.hx",43,0x82d3899b)
HX_LOCAL_STACK_FRAME(_hx_pos_eb990c46aed3e3e1_81_getInfo,"lime.net.curl.CURL","getInfo",0xda4c6afa,"lime.net.curl.CURL.getInfo","lime/net/curl/CURL.hx",81,0x82d3899b)
HX_LOCAL_STACK_FRAME(_hx_pos_eb990c46aed3e3e1_133_reset,"lime.net.curl.CURL","reset",0xbf134b25,"lime.net.curl.CURL.reset","lime/net/curl/CURL.hx",133,0x82d3899b)
HX_LOCAL_STACK_FRAME(_hx_pos_eb990c46aed3e3e1_147_setOption,"lime.net.curl.CURL","setOption",0xcff7ad0d,"lime.net.curl.CURL.setOption","lime/net/curl/CURL.hx",147,0x82d3899b)
HX_LOCAL_STACK_FRAME(_hx_pos_eb990c46aed3e3e1_170_setOption,"lime.net.curl.CURL","setOption",0xcff7ad0d,"lime.net.curl.CURL.setOption","lime/net/curl/CURL.hx",170,0x82d3899b)
HX_LOCAL_STACK_FRAME(_hx_pos_eb990c46aed3e3e1_157_setOption,"lime.net.curl.CURL","setOption",0xcff7ad0d,"lime.net.curl.CURL.setOption","lime/net/curl/CURL.hx",157,0x82d3899b)
HX_LOCAL_STACK_FRAME(_hx_pos_eb990c46aed3e3e1_198_setOption,"lime.net.curl.CURL","setOption",0xcff7ad0d,"lime.net.curl.CURL.setOption","lime/net/curl/CURL.hx",198,0x82d3899b)
HX_LOCAL_STACK_FRAME(_hx_pos_eb990c46aed3e3e1_164_setOption,"lime.net.curl.CURL","setOption",0xcff7ad0d,"lime.net.curl.CURL.setOption","lime/net/curl/CURL.hx",164,0x82d3899b)
HX_LOCAL_STACK_FRAME(_hx_pos_eb990c46aed3e3e1_97_globalInit,"lime.net.curl.CURL","globalInit",0x3240ecfd,"lime.net.curl.CURL.globalInit","lime/net/curl/CURL.hx",97,0x82d3899b)
HX_LOCAL_STACK_FRAME(_hx_pos_eb990c46aed3e3e1_221_strerror,"lime.net.curl.CURL","strerror",0x9bdff9e1,"lime.net.curl.CURL.strerror","lime/net/curl/CURL.hx",221,0x82d3899b)
namespace lime{
namespace net{
namespace curl{

void CURL_obj::__construct( ::Dynamic handle){
            	HX_STACKFRAME(&_hx_pos_eb990c46aed3e3e1_28_new)
HXDLIN(  28)		if (::hx::IsNotNull( handle )) {
HXLINE(  30)			this->handle = handle;
            		}
            		else {
HXLINE(  35)			this->handle = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_curl_easy_init()) );
            		}
            	}

Dynamic CURL_obj::__CreateEmpty() { return new CURL_obj; }

void *CURL_obj::_hx_vtable = 0;

Dynamic CURL_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CURL_obj > _hx_result = new CURL_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CURL_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x055fdc1c;
}

void CURL_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_eb990c46aed3e3e1_43_cleanup)
HXDLIN(  43)		::lime::_internal::backend::native::NativeCFFI_obj::lime_curl_easy_cleanup(::hx::DynamicPtr(this->handle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CURL_obj,cleanup,(void))

 ::Dynamic CURL_obj::getInfo(int info){
            	HX_STACKFRAME(&_hx_pos_eb990c46aed3e3e1_81_getInfo)
HXDLIN(  81)		return ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_curl_easy_getinfo(::hx::DynamicPtr(this->handle),info)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(CURL_obj,getInfo,return )

void CURL_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_eb990c46aed3e3e1_133_reset)
HXDLIN( 133)		::lime::_internal::backend::native::NativeCFFI_obj::lime_curl_easy_reset(::hx::DynamicPtr(this->handle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CURL_obj,reset,(void))

int CURL_obj::setOption(int option, ::Dynamic parameter){
            	HX_STACKFRAME(&_hx_pos_eb990c46aed3e3e1_147_setOption)
HXLINE( 146)		 ::lime::net::curl::CURL _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 149)		 ::haxe::io::Bytes bytes = null();
HXLINE( 151)		switch((int)(option)){
            			case (int)10009: {
HXLINE( 186)				bytes = ( ( ::haxe::io::Bytes)(parameter) );
            			}
            			break;
            			case (int)10023: {
            			}
            			break;
            			case (int)20011: {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::lime::net::curl::CURL,_gthis, ::Dynamic,callback) HXARGC(2)
            				int _hx_run( ::haxe::io::Bytes bytes,int length){
            					HX_STACKFRAME(&_hx_pos_eb990c46aed3e3e1_170_setOption)
HXLINE( 171)					int cacheLength = bytes->length;
HXLINE( 172)					bytes->length = length;
HXLINE( 173)					int read = ( (int)(callback(_gthis,bytes)) );
HXLINE( 174)					bytes->length = cacheLength;
HXLINE( 175)					return read;
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE( 168)				 ::Dynamic callback = parameter;
HXLINE( 169)				parameter =  ::Dynamic(new _hx_Closure_0(_gthis,callback));
HXLINE( 177)				bytes = ::haxe::io::Bytes_obj::alloc(0);
            			}
            			break;
            			case (int)20056: {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::lime::net::curl::CURL,_gthis, ::Dynamic,callback) HXARGC(4)
            				void _hx_run(Float dltotal,Float dlnow,Float ultotal,Float ulnow){
            					HX_STACKFRAME(&_hx_pos_eb990c46aed3e3e1_157_setOption)
HXLINE( 157)					callback(_gthis,dltotal,dlnow,ultotal,ulnow);
            				}
            				HX_END_LOCAL_FUNC4((void))

HXLINE( 154)				 ::Dynamic callback = parameter;
HXLINE( 155)				parameter =  ::Dynamic(new _hx_Closure_1(_gthis,callback));
            			}
            			break;
            			case (int)20079: {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::lime::net::curl::CURL,_gthis, ::Dynamic,callback) HXARGC(1)
            				void _hx_run(::String header){
            					HX_STACKFRAME(&_hx_pos_eb990c46aed3e3e1_198_setOption)
HXLINE( 198)					callback(_gthis,header);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 189)				 ::Dynamic callback = parameter;
HXLINE( 196)				parameter =  ::Dynamic(new _hx_Closure_2(_gthis,callback));
            			}
            			break;
            			case (int)20219: {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::lime::net::curl::CURL,_gthis, ::Dynamic,callback) HXARGC(4)
            				int _hx_run(int dltotal,int dlnow,int ultotal,int ulnow){
            					HX_STACKFRAME(&_hx_pos_eb990c46aed3e3e1_164_setOption)
HXLINE( 164)					return ( (int)(callback(_gthis,dltotal,dlnow,ultotal,ulnow)) );
            				}
            				HX_END_LOCAL_FUNC4(return)

HXLINE( 161)				 ::Dynamic callback = parameter;
HXLINE( 162)				parameter =  ::Dynamic(new _hx_Closure_3(_gthis,callback));
            			}
            			break;
            			default:{
            			}
            		}
HXLINE( 214)		return ::lime::_internal::backend::native::NativeCFFI_obj::lime_curl_easy_setopt(::hx::DynamicPtr(this->handle),option,::hx::DynamicPtr(parameter),::hx::DynamicPtr(bytes));
            	}


HX_DEFINE_DYNAMIC_FUNC2(CURL_obj,setOption,return )

int CURL_obj::globalInit(int flags){
            	HX_STACKFRAME(&_hx_pos_eb990c46aed3e3e1_97_globalInit)
HXDLIN(  97)		return ::lime::_internal::backend::native::NativeCFFI_obj::lime_curl_global_init(flags);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CURL_obj,globalInit,return )

::String CURL_obj::strerror(int code){
            	HX_STACKFRAME(&_hx_pos_eb990c46aed3e3e1_221_strerror)
HXLINE( 223)		 ::hx::Object * result = ::lime::_internal::backend::native::NativeCFFI_obj::lime_curl_easy_strerror(code);
HXLINE( 227)		return ( ( ::Dynamic)(result) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CURL_obj,strerror,return )


::hx::ObjectPtr< CURL_obj > CURL_obj::__new( ::Dynamic handle) {
	::hx::ObjectPtr< CURL_obj > __this = new CURL_obj();
	__this->__construct(handle);
	return __this;
}

::hx::ObjectPtr< CURL_obj > CURL_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic handle) {
	CURL_obj *__this = (CURL_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CURL_obj), true, "lime.net.curl.CURL"));
	*(void **)__this = CURL_obj::_hx_vtable;
	__this->__construct(handle);
	return __this;
}

CURL_obj::CURL_obj()
{
}

void CURL_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CURL);
	HX_MARK_MEMBER_NAME(handle,"handle");
	HX_MARK_END_CLASS();
}

void CURL_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(handle,"handle");
}

::hx::Val CURL_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { return ::hx::Val( handle ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cleanup") ) { return ::hx::Val( cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInfo") ) { return ::hx::Val( getInfo_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setOption") ) { return ::hx::Val( setOption_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CURL_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"strerror") ) { outValue = strerror_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"globalInit") ) { outValue = globalInit_dyn(); return true; }
	}
	return false;
}

::hx::Val CURL_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { handle=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CURL_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("handle",a8,83,fd,b7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CURL_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(CURL_obj,handle),HX_("handle",a8,83,fd,b7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CURL_obj_sStaticStorageInfo = 0;
#endif

static ::String CURL_obj_sMemberFields[] = {
	HX_("handle",a8,83,fd,b7),
	HX_("cleanup",24,0c,42,ab),
	HX_("getInfo",24,e8,3d,18),
	HX_("reset",cf,49,c8,e6),
	HX_("setOption",b7,48,22,8b),
	::String(null()) };

::hx::Class CURL_obj::__mClass;

static ::String CURL_obj_sStaticFields[] = {
	HX_("globalInit",13,86,5e,3c),
	HX_("strerror",77,01,3c,91),
	::String(null())
};

void CURL_obj::__register()
{
	CURL_obj _hx_dummy;
	CURL_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("lime.net.curl.CURL",44,1d,f9,f8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CURL_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CURL_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CURL_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CURL_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CURL_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CURL_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace net
} // end namespace curl
