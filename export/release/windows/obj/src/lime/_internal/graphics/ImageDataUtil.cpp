// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime__internal_graphics_ImageDataUtil
#include <lime/_internal/graphics/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime__internal_graphics__ImageDataUtil_ImageDataView
#include <lime/_internal/graphics/_ImageDataUtil/ImageDataView.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_math__ColorMatrix_ColorMatrix_Impl_
#include <lime/math/_ColorMatrix/ColorMatrix_Impl_.h>
#endif
#ifndef INCLUDED_lime_math__RGBA_RGBA_Impl_
#include <lime/math/_RGBA/RGBA_Impl_.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_164_colorTransform,"lime._internal.graphics.ImageDataUtil","colorTransform",0x125b6f48,"lime._internal.graphics.ImageDataUtil.colorTransform","lime/_internal/graphics/ImageDataUtil.hx",164,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_206_copyChannel,"lime._internal.graphics.ImageDataUtil","copyChannel",0xecaa286f,"lime._internal.graphics.ImageDataUtil.copyChannel","lime/_internal/graphics/ImageDataUtil.hx",206,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_295_copyPixels,"lime._internal.graphics.ImageDataUtil","copyPixels",0xd2d56101,"lime._internal.graphics.ImageDataUtil.copyPixels","lime/_internal/graphics/ImageDataUtil.hx",295,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_508_fillRect,"lime._internal.graphics.ImageDataUtil","fillRect",0x041873c6,"lime._internal.graphics.ImageDataUtil.fillRect","lime/_internal/graphics/ImageDataUtil.hx",508,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_831_getPixel32,"lime._internal.graphics.ImageDataUtil","getPixel32",0x67cfb2ee,"lime._internal.graphics.ImageDataUtil.getPixel32","lime/_internal/graphics/ImageDataUtil.hx",831,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_956_multiplyAlpha,"lime._internal.graphics.ImageDataUtil","multiplyAlpha",0xed49d7bb,"lime._internal.graphics.ImageDataUtil.multiplyAlpha","lime/_internal/graphics/ImageDataUtil.hx",956,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1107_setFormat,"lime._internal.graphics.ImageDataUtil","setFormat",0x391f851a,"lime._internal.graphics.ImageDataUtil.setFormat","lime/_internal/graphics/ImageDataUtil.hx",1107,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1185_setPixel,"lime._internal.graphics.ImageDataUtil","setPixel",0x68375e03,"lime._internal.graphics.ImageDataUtil.setPixel","lime/_internal/graphics/ImageDataUtil.hx",1185,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1213_setPixel32,"lime._internal.graphics.ImageDataUtil","setPixel32",0x6b4d5162,"lime._internal.graphics.ImageDataUtil.setPixel32","lime/_internal/graphics/ImageDataUtil.hx",1213,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1235_setPixels,"lime._internal.graphics.ImageDataUtil","setPixels",0xc83ae510,"lime._internal.graphics.ImageDataUtil.setPixels","lime/_internal/graphics/ImageDataUtil.hx",1235,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1406_unmultiplyAlpha,"lime._internal.graphics.ImageDataUtil","unmultiplyAlpha",0x3b9ff802,"lime._internal.graphics.ImageDataUtil.unmultiplyAlpha","lime/_internal/graphics/ImageDataUtil.hx",1406,0x59dddace)
namespace lime{
namespace _internal{
namespace graphics{

void ImageDataUtil_obj::__construct() { }

Dynamic ImageDataUtil_obj::__CreateEmpty() { return new ImageDataUtil_obj; }

void *ImageDataUtil_obj::_hx_vtable = 0;

Dynamic ImageDataUtil_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ImageDataUtil_obj > _hx_result = new ImageDataUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImageDataUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x173c18b5;
}

void ImageDataUtil_obj::colorTransform( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_164_colorTransform)
HXLINE( 165)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 166)		if (::hx::IsNull( data )) {
HXLINE( 166)			return;
            		}
HXLINE( 169)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 169)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_color_transform(::hx::DynamicPtr(image),::hx::DynamicPtr(rect),::hx::DynamicPtr(colorMatrix));
            		}
            		else {
HXLINE( 173)			int format = image->buffer->format;
HXLINE( 174)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 176)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 178)			 ::lime::utils::ArrayBufferView alphaTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getAlphaTable(colorMatrix);
HXLINE( 179)			 ::lime::utils::ArrayBufferView redTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getRedTable(colorMatrix);
HXLINE( 180)			 ::lime::utils::ArrayBufferView greenTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getGreenTable(colorMatrix);
HXLINE( 181)			 ::lime::utils::ArrayBufferView blueTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getBlueTable(colorMatrix);
HXLINE( 183)			int row;
HXDLIN( 183)			int offset;
HXDLIN( 183)			int pixel = 0;
HXLINE( 185)			{
HXLINE( 185)				int _g = 0;
HXDLIN( 185)				int _g1 = dataView->height;
HXDLIN( 185)				while((_g < _g1)){
HXLINE( 185)					_g = (_g + 1);
HXDLIN( 185)					int y = (_g - 1);
HXLINE( 187)					row = (dataView->byteOffset + (dataView->stride * y));
HXLINE( 189)					{
HXLINE( 189)						int _g1 = 0;
HXDLIN( 189)						int _g2 = dataView->width;
HXDLIN( 189)						while((_g1 < _g2)){
HXLINE( 189)							_g1 = (_g1 + 1);
HXDLIN( 189)							int x = (_g1 - 1);
HXLINE( 191)							offset = (row + (x * 4));
HXLINE( 193)							{
HXLINE( 193)								switch((int)(format)){
            									case (int)0: {
HXLINE( 193)										int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 193)										int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 193)										int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 193)										pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 193)										int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 193)										int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 193)										int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN( 193)										pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 193)										int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 193)										int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 193)										int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 193)										pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 193)								if (premultiplied) {
HXLINE( 193)									bool _hx_tmp;
HXDLIN( 193)									if (((pixel & 255) != 0)) {
HXLINE( 193)										_hx_tmp = ((pixel & 255) != 255);
            									}
            									else {
HXLINE( 193)										_hx_tmp = false;
            									}
HXDLIN( 193)									if (_hx_tmp) {
HXLINE( 193)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((pixel & 255)) ));
HXDLIN( 193)										{
HXLINE( 193)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 193)											int r = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(pixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 193)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 193)											int g = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(pixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 193)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 193)											pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(pixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((pixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 194)							{
HXLINE( 194)								int r = ( (int)(( ::__hxcpp_memory_get_byte(redTable->buffer->b,(redTable->byteOffset + (::hx::UShr(pixel,24) & 255))) & 255)) );
HXDLIN( 194)								int g = ( (int)(( ::__hxcpp_memory_get_byte(greenTable->buffer->b,(greenTable->byteOffset + (::hx::UShr(pixel,16) & 255))) & 255)) );
HXDLIN( 194)								int b = ( (int)(( ::__hxcpp_memory_get_byte(blueTable->buffer->b,(blueTable->byteOffset + (::hx::UShr(pixel,8) & 255))) & 255)) );
HXDLIN( 194)								pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaTable->buffer->b,(alphaTable->byteOffset + (pixel & 255))) & 255)) ) & 255));
            							}
HXLINE( 195)							{
HXLINE( 195)								if (premultiplied) {
HXLINE( 195)									if (((pixel & 255) == 0)) {
HXLINE( 195)										if ((pixel != 0)) {
HXLINE( 195)											pixel = 0;
            										}
            									}
            									else {
HXLINE( 195)										if (((pixel & 255) != 255)) {
HXLINE( 195)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 195)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + ((pixel & 255) * 4)))) );
HXDLIN( 195)											pixel = ((((((((::hx::UShr(pixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((::hx::UShr(pixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((::hx::UShr(pixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((pixel & 255) & 255));
            										}
            									}
            								}
HXDLIN( 195)								switch((int)(format)){
            									case (int)0: {
HXLINE( 195)										{
HXLINE( 195)											int val = (::hx::UShr(pixel,24) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val1 = (::hx::UShr(pixel,16) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val2 = (::hx::UShr(pixel,8) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val3 = (pixel & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 195)										{
HXLINE( 195)											int val = (pixel & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val1 = (::hx::UShr(pixel,24) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val2 = (::hx::UShr(pixel,16) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val3 = (::hx::UShr(pixel,8) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 195)										{
HXLINE( 195)											int val = (::hx::UShr(pixel,8) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val1 = (::hx::UShr(pixel,16) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val2 = (::hx::UShr(pixel,24) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val3 = (pixel & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 200)		image->dirty = true;
HXLINE( 201)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,colorTransform,(void))

void ImageDataUtil_obj::copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::ImageChannel sourceChannel, ::lime::graphics::ImageChannel destChannel){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_206_copyChannel)
HXLINE( 207)		int destIdx;
HXDLIN( 207)		switch((int)(destChannel->_hx_getIndex())){
            			case (int)0: {
HXLINE( 207)				destIdx = 0;
            			}
            			break;
            			case (int)1: {
HXLINE( 207)				destIdx = 1;
            			}
            			break;
            			case (int)2: {
HXLINE( 207)				destIdx = 2;
            			}
            			break;
            			case (int)3: {
HXLINE( 207)				destIdx = 3;
            			}
            			break;
            		}
HXLINE( 215)		int srcIdx;
HXDLIN( 215)		switch((int)(sourceChannel->_hx_getIndex())){
            			case (int)0: {
HXLINE( 215)				srcIdx = 0;
            			}
            			break;
            			case (int)1: {
HXLINE( 215)				srcIdx = 1;
            			}
            			break;
            			case (int)2: {
HXLINE( 215)				srcIdx = 2;
            			}
            			break;
            			case (int)3: {
HXLINE( 215)				srcIdx = 3;
            			}
            			break;
            		}
HXLINE( 223)		 ::lime::utils::ArrayBufferView srcData = sourceImage->buffer->data;
HXLINE( 224)		 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 226)		bool _hx_tmp;
HXDLIN( 226)		if (::hx::IsNotNull( srcData )) {
HXLINE( 226)			_hx_tmp = ::hx::IsNull( destData );
            		}
            		else {
HXLINE( 226)			_hx_tmp = true;
            		}
HXDLIN( 226)		if (_hx_tmp) {
HXLINE( 226)			return;
            		}
HXLINE( 229)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 229)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_copy_channel(::hx::DynamicPtr(image),::hx::DynamicPtr(sourceImage),::hx::DynamicPtr(sourceRect),::hx::DynamicPtr(destPoint),srcIdx,destIdx);
            		}
            		else {
HXLINE( 233)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView srcView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 234)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE( 236)			int srcFormat = sourceImage->buffer->format;
HXLINE( 237)			int destFormat = image->buffer->format;
HXLINE( 238)			bool srcPremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 239)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 241)			int srcPosition;
HXDLIN( 241)			int destPosition;
HXDLIN( 241)			int srcPixel = 0;
HXDLIN( 241)			int destPixel = 0;
HXDLIN( 241)			int value = 0;
HXLINE( 247)			{
HXLINE( 247)				int _g = 0;
HXDLIN( 247)				int _g1 = destView->height;
HXDLIN( 247)				while((_g < _g1)){
HXLINE( 247)					_g = (_g + 1);
HXDLIN( 247)					int y = (_g - 1);
HXLINE( 249)					srcPosition = (srcView->byteOffset + (srcView->stride * y));
HXLINE( 250)					destPosition = (destView->byteOffset + (destView->stride * y));
HXLINE( 252)					{
HXLINE( 252)						int _g1 = 0;
HXDLIN( 252)						int _g2 = destView->width;
HXDLIN( 252)						while((_g1 < _g2)){
HXLINE( 252)							_g1 = (_g1 + 1);
HXDLIN( 252)							int x = (_g1 - 1);
HXLINE( 254)							{
HXLINE( 254)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE( 254)										int r = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & 255)) );
HXDLIN( 254)										int g = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 1))) & 255)) );
HXDLIN( 254)										int b = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 2))) & 255)) );
HXDLIN( 254)										srcPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 254)										int r = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 1))) & 255)) );
HXDLIN( 254)										int g = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 2))) & 255)) );
HXDLIN( 254)										int b = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 3))) & 255)) );
HXDLIN( 254)										srcPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 254)										int r = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 2))) & 255)) );
HXDLIN( 254)										int g = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 1))) & 255)) );
HXDLIN( 254)										int b = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & 255)) );
HXDLIN( 254)										srcPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 254)								if (srcPremultiplied) {
HXLINE( 254)									bool _hx_tmp;
HXDLIN( 254)									if (((srcPixel & 255) != 0)) {
HXLINE( 254)										_hx_tmp = ((srcPixel & 255) != 255);
            									}
            									else {
HXLINE( 254)										_hx_tmp = false;
            									}
HXDLIN( 254)									if (_hx_tmp) {
HXLINE( 254)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((srcPixel & 255)) ));
HXDLIN( 254)										{
HXLINE( 254)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 254)											int r = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(srcPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 254)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 254)											int g = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(srcPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 254)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 254)											srcPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(srcPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((srcPixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 255)							{
HXLINE( 255)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 255)										int r = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 255)										int g = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 255)										int b = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 255)										destPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 255)										int r = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 255)										int g = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 255)										int b = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) );
HXDLIN( 255)										destPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 255)										int r = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 255)										int g = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 255)										int b = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 255)										destPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 255)								if (destPremultiplied) {
HXLINE( 255)									bool _hx_tmp;
HXDLIN( 255)									if (((destPixel & 255) != 0)) {
HXLINE( 255)										_hx_tmp = ((destPixel & 255) != 255);
            									}
            									else {
HXLINE( 255)										_hx_tmp = false;
            									}
HXDLIN( 255)									if (_hx_tmp) {
HXLINE( 255)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((destPixel & 255)) ));
HXDLIN( 255)										{
HXLINE( 255)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 255)											int r = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(destPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 255)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 255)											int g = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(destPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 255)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 255)											destPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(destPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 257)							switch((int)(srcIdx)){
            								case (int)0: {
HXLINE( 260)									value = (::hx::UShr(srcPixel,24) & 255);
            								}
            								break;
            								case (int)1: {
HXLINE( 262)									value = (::hx::UShr(srcPixel,16) & 255);
            								}
            								break;
            								case (int)2: {
HXLINE( 264)									value = (::hx::UShr(srcPixel,8) & 255);
            								}
            								break;
            								case (int)3: {
HXLINE( 266)									value = (srcPixel & 255);
            								}
            								break;
            							}
HXLINE( 269)							switch((int)(destIdx)){
            								case (int)0: {
HXLINE( 272)									destPixel = (((((value & 255) << 24) | (((::hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((::hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            								}
            								break;
            								case (int)1: {
HXLINE( 274)									destPixel = ((((((::hx::UShr(destPixel,24) & 255) & 255) << 24) | ((value & 255) << 16)) | (((::hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            								}
            								break;
            								case (int)2: {
HXLINE( 276)									destPixel = ((((((::hx::UShr(destPixel,24) & 255) & 255) << 24) | (((::hx::UShr(destPixel,16) & 255) & 255) << 16)) | ((value & 255) << 8)) | ((destPixel & 255) & 255));
            								}
            								break;
            								case (int)3: {
HXLINE( 278)									destPixel = ((((((::hx::UShr(destPixel,24) & 255) & 255) << 24) | (((::hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((::hx::UShr(destPixel,8) & 255) & 255) << 8)) | (value & 255));
            								}
            								break;
            							}
HXLINE( 281)							{
HXLINE( 281)								if (destPremultiplied) {
HXLINE( 281)									if (((destPixel & 255) == 0)) {
HXLINE( 281)										if ((destPixel != 0)) {
HXLINE( 281)											destPixel = 0;
            										}
            									}
            									else {
HXLINE( 281)										if (((destPixel & 255) != 255)) {
HXLINE( 281)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 281)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + ((destPixel & 255) * 4)))) );
HXDLIN( 281)											destPixel = ((((((((::hx::UShr(destPixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((::hx::UShr(destPixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((::hx::UShr(destPixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
            									}
            								}
HXDLIN( 281)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 281)										{
HXLINE( 281)											int val = (::hx::UShr(destPixel,24) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val1 = (::hx::UShr(destPixel,16) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val2 = (::hx::UShr(destPixel,8) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val3 = (destPixel & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 281)										{
HXLINE( 281)											int val = (destPixel & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val1 = (::hx::UShr(destPixel,24) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val2 = (::hx::UShr(destPixel,16) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val3 = (::hx::UShr(destPixel,8) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 281)										{
HXLINE( 281)											int val = (::hx::UShr(destPixel,8) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val1 = (::hx::UShr(destPixel,16) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val2 = (::hx::UShr(destPixel,24) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val3 = (destPixel & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            										}
            									}
            									break;
            								}
            							}
HXLINE( 283)							srcPosition = (srcPosition + 4);
HXLINE( 284)							destPosition = (destPosition + 4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 289)		image->dirty = true;
HXLINE( 290)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,copyChannel,(void))

void ImageDataUtil_obj::copyPixels( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,::hx::Null< bool >  __o_mergeAlpha){
            		bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_295_copyPixels)
HXLINE( 296)		bool _hx_tmp;
HXDLIN( 296)		bool _hx_tmp1;
HXDLIN( 296)		bool _hx_tmp2;
HXDLIN( 296)		bool _hx_tmp3;
HXDLIN( 296)		bool _hx_tmp4;
HXDLIN( 296)		bool _hx_tmp5;
HXDLIN( 296)		bool _hx_tmp6;
HXDLIN( 296)		bool _hx_tmp7;
HXDLIN( 296)		bool _hx_tmp8;
HXDLIN( 296)		bool _hx_tmp9;
HXDLIN( 296)		bool _hx_tmp10;
HXDLIN( 296)		if ((image->width == sourceImage->width)) {
HXLINE( 296)			_hx_tmp10 = (image->height == sourceImage->height);
            		}
            		else {
HXLINE( 296)			_hx_tmp10 = false;
            		}
HXDLIN( 296)		if (_hx_tmp10) {
HXLINE( 296)			_hx_tmp9 = (sourceRect->width == sourceImage->width);
            		}
            		else {
HXLINE( 296)			_hx_tmp9 = false;
            		}
HXDLIN( 296)		if (_hx_tmp9) {
HXLINE( 296)			_hx_tmp8 = (sourceRect->height == sourceImage->height);
            		}
            		else {
HXLINE( 296)			_hx_tmp8 = false;
            		}
HXDLIN( 296)		if (_hx_tmp8) {
HXLINE( 296)			_hx_tmp7 = (sourceRect->x == 0);
            		}
            		else {
HXLINE( 296)			_hx_tmp7 = false;
            		}
HXDLIN( 296)		if (_hx_tmp7) {
HXLINE( 296)			_hx_tmp6 = (sourceRect->y == 0);
            		}
            		else {
HXLINE( 296)			_hx_tmp6 = false;
            		}
HXDLIN( 296)		if (_hx_tmp6) {
HXLINE( 296)			_hx_tmp5 = (destPoint->x == 0);
            		}
            		else {
HXLINE( 296)			_hx_tmp5 = false;
            		}
HXDLIN( 296)		if (_hx_tmp5) {
HXLINE( 296)			_hx_tmp4 = (destPoint->y == 0);
            		}
            		else {
HXLINE( 296)			_hx_tmp4 = false;
            		}
HXDLIN( 296)		if (_hx_tmp4) {
HXLINE( 296)			_hx_tmp3 = ::hx::IsNull( alphaImage );
            		}
            		else {
HXLINE( 296)			_hx_tmp3 = false;
            		}
HXDLIN( 296)		if (_hx_tmp3) {
HXLINE( 296)			_hx_tmp2 = ::hx::IsNull( alphaPoint );
            		}
            		else {
HXLINE( 296)			_hx_tmp2 = false;
            		}
HXDLIN( 296)		if (_hx_tmp2) {
HXLINE( 296)			_hx_tmp1 = (mergeAlpha == false);
            		}
            		else {
HXLINE( 296)			_hx_tmp1 = false;
            		}
HXDLIN( 296)		if (_hx_tmp1) {
HXLINE( 307)			int _hx_tmp1 = image->get_format();
HXLINE( 296)			_hx_tmp = (_hx_tmp1 == sourceImage->get_format());
            		}
            		else {
HXLINE( 296)			_hx_tmp = false;
            		}
HXDLIN( 296)		if (_hx_tmp) {
HXLINE( 309)			 ::lime::utils::ArrayBufferView _this = image->buffer->data;
HXDLIN( 309)			 ::lime::utils::ArrayBufferView view = sourceImage->buffer->data;
HXDLIN( 309)			::cpp::VirtualArray array = null();
HXDLIN( 309)			int offset = 0;
HXDLIN( 309)			bool _hx_tmp;
HXDLIN( 309)			if (::hx::IsNotNull( view )) {
HXLINE( 309)				_hx_tmp = ::hx::IsNull( array );
            			}
            			else {
HXLINE( 309)				_hx_tmp = false;
            			}
HXDLIN( 309)			if (_hx_tmp) {
HXLINE( 309)				_this->buffer->blit((offset * _this->bytesPerElement),view->buffer,view->byteOffset,view->byteLength);
            			}
            			else {
HXLINE( 309)				bool _hx_tmp;
HXDLIN( 309)				if (::hx::IsNotNull( array )) {
HXLINE( 309)					_hx_tmp = ::hx::IsNull( view );
            				}
            				else {
HXLINE( 309)					_hx_tmp = false;
            				}
HXDLIN( 309)				if (_hx_tmp) {
HXLINE( 309)					_this->copyFromArray(array,offset);
            				}
            				else {
HXLINE( 309)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c)));
            				}
            			}
            		}
            		else {
HXLINE( 314)			if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 314)				::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_copy_pixels(::hx::DynamicPtr(image),::hx::DynamicPtr(sourceImage),::hx::DynamicPtr(sourceRect),::hx::DynamicPtr(destPoint),::hx::DynamicPtr(alphaImage),::hx::DynamicPtr(alphaPoint),mergeAlpha);
            			}
            			else {
HXLINE( 318)				 ::lime::utils::ArrayBufferView sourceData = sourceImage->buffer->data;
HXLINE( 319)				 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 321)				bool _hx_tmp;
HXDLIN( 321)				if (::hx::IsNotNull( sourceData )) {
HXLINE( 321)					_hx_tmp = ::hx::IsNull( destData );
            				}
            				else {
HXLINE( 321)					_hx_tmp = true;
            				}
HXDLIN( 321)				if (_hx_tmp) {
HXLINE( 321)					return;
            				}
HXLINE( 323)				 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView sourceView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 324)				 ::lime::math::Rectangle destRect =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sourceView->width,sourceView->height);
HXLINE( 325)				 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,destRect);
HXLINE( 327)				int sourceFormat = sourceImage->buffer->format;
HXLINE( 328)				int destFormat = image->buffer->format;
HXLINE( 330)				int sourcePosition;
HXDLIN( 330)				int destPosition;
HXLINE( 331)				Float sourceAlpha;
HXDLIN( 331)				Float destAlpha;
HXDLIN( 331)				Float oneMinusSourceAlpha;
HXDLIN( 331)				Float blendAlpha;
HXLINE( 332)				int sourcePixel = 0;
HXLINE( 333)				int destPixel = 0;
HXLINE( 335)				bool sourcePremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 336)				bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 337)				int sourceBytesPerPixel = ::Std_obj::_hx_int((( (Float)(sourceImage->buffer->bitsPerPixel) ) / ( (Float)(8) )));
HXLINE( 338)				int destBytesPerPixel = ::Std_obj::_hx_int((( (Float)(image->buffer->bitsPerPixel) ) / ( (Float)(8) )));
HXLINE( 340)				bool useAlphaImage;
HXDLIN( 340)				if (::hx::IsNotNull( alphaImage )) {
HXLINE( 340)					useAlphaImage = alphaImage->get_transparent();
            				}
            				else {
HXLINE( 340)					useAlphaImage = false;
            				}
HXLINE( 341)				bool blend;
HXDLIN( 341)				bool blend1;
HXDLIN( 341)				if (!(mergeAlpha)) {
HXLINE( 341)					if (useAlphaImage) {
HXLINE( 341)						blend1 = !(image->get_transparent());
            					}
            					else {
HXLINE( 341)						blend1 = false;
            					}
            				}
            				else {
HXLINE( 341)					blend1 = true;
            				}
HXDLIN( 341)				if (!(blend1)) {
HXLINE( 342)					bool blend1;
HXDLIN( 342)					if (!(mergeAlpha)) {
HXLINE( 342)						blend1 = !(image->get_transparent());
            					}
            					else {
HXLINE( 342)						blend1 = false;
            					}
HXDLIN( 342)					if (blend1) {
HXLINE( 341)						blend = sourceImage->get_transparent();
            					}
            					else {
HXLINE( 341)						blend = false;
            					}
            				}
            				else {
HXLINE( 341)					blend = true;
            				}
HXLINE( 344)				if (!(useAlphaImage)) {
HXLINE( 346)					if (blend) {
HXLINE( 348)						int _g = 0;
HXDLIN( 348)						int _g1 = destView->height;
HXDLIN( 348)						while((_g < _g1)){
HXLINE( 348)							_g = (_g + 1);
HXDLIN( 348)							int y = (_g - 1);
HXLINE( 350)							sourcePosition = (sourceView->byteOffset + (sourceView->stride * y));
HXLINE( 351)							destPosition = (destView->byteOffset + (destView->stride * y));
HXLINE( 353)							{
HXLINE( 353)								int _g1 = 0;
HXDLIN( 353)								int _g2 = destView->width;
HXDLIN( 353)								while((_g1 < _g2)){
HXLINE( 353)									_g1 = (_g1 + 1);
HXDLIN( 353)									int x = (_g1 - 1);
HXLINE( 355)									{
HXLINE( 355)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 355)												int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 355)												int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 355)												int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 355)												sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            											case (int)1: {
HXLINE( 355)												int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 355)												int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 355)												int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) );
HXDLIN( 355)												sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) ) & 255));
            											}
            											break;
            											case (int)2: {
HXLINE( 355)												int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 355)												int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 355)												int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 355)												sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            										}
HXDLIN( 355)										if (sourcePremultiplied) {
HXLINE( 355)											bool _hx_tmp;
HXDLIN( 355)											if (((sourcePixel & 255) != 0)) {
HXLINE( 355)												_hx_tmp = ((sourcePixel & 255) != 255);
            											}
            											else {
HXLINE( 355)												_hx_tmp = false;
            											}
HXDLIN( 355)											if (_hx_tmp) {
HXLINE( 355)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 355)												{
HXLINE( 355)													 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 355)													int r = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 355)													 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 355)													int g = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 355)													 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 355)													sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            												}
            											}
            										}
            									}
HXLINE( 356)									{
HXLINE( 356)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 356)												int r = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 356)												int g = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 356)												int b = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 356)												destPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            											}
            											break;
            											case (int)1: {
HXLINE( 356)												int r = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 356)												int g = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 356)												int b = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) );
HXDLIN( 356)												destPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) ) & 255));
            											}
            											break;
            											case (int)2: {
HXLINE( 356)												int r = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 356)												int g = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 356)												int b = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 356)												destPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            											}
            											break;
            										}
HXDLIN( 356)										if (destPremultiplied) {
HXLINE( 356)											bool _hx_tmp;
HXDLIN( 356)											if (((destPixel & 255) != 0)) {
HXLINE( 356)												_hx_tmp = ((destPixel & 255) != 255);
            											}
            											else {
HXLINE( 356)												_hx_tmp = false;
            											}
HXDLIN( 356)											if (_hx_tmp) {
HXLINE( 356)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((destPixel & 255)) ));
HXDLIN( 356)												{
HXLINE( 356)													 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 356)													int r = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(destPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 356)													 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 356)													int g = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(destPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 356)													 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 356)													destPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(destPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((destPixel & 255) & 255));
            												}
            											}
            										}
            									}
HXLINE( 358)									sourceAlpha = (( (Float)((sourcePixel & 255)) ) / ((Float)255.0));
HXLINE( 359)									destAlpha = (( (Float)((destPixel & 255)) ) / ((Float)255.0));
HXLINE( 360)									oneMinusSourceAlpha = (( (Float)(1) ) - sourceAlpha);
HXLINE( 361)									blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 363)									if ((blendAlpha == 0)) {
HXLINE( 365)										destPixel = 0;
            									}
            									else {
HXLINE( 369)										{
HXLINE( 369)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 369)											int value = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((( (Float)((::hx::UShr(sourcePixel,24) & 255)) ) * sourceAlpha) + ((( (Float)((::hx::UShr(destPixel,24) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 369)											destPixel = (((((value & 255) << 24) | (((::hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((::hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 372)										{
HXLINE( 372)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 372)											int value1 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((( (Float)((::hx::UShr(sourcePixel,16) & 255)) ) * sourceAlpha) + ((( (Float)((::hx::UShr(destPixel,16) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 372)											destPixel = ((((((::hx::UShr(destPixel,24) & 255) & 255) << 24) | ((value1 & 255) << 16)) | (((::hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 375)										{
HXLINE( 375)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 375)											int value2 = ( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((( (Float)((::hx::UShr(sourcePixel,8) & 255)) ) * sourceAlpha) + ((( (Float)((::hx::UShr(destPixel,8) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 375)											destPixel = ((((((::hx::UShr(destPixel,24) & 255) & 255) << 24) | (((::hx::UShr(destPixel,16) & 255) & 255) << 16)) | ((value2 & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 378)										{
HXLINE( 378)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 378)											int value3 = ( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & 255)) );
HXDLIN( 378)											destPixel = ((((((::hx::UShr(destPixel,24) & 255) & 255) << 24) | (((::hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((::hx::UShr(destPixel,8) & 255) & 255) << 8)) | (value3 & 255));
            										}
            									}
HXLINE( 381)									{
HXLINE( 381)										if (destPremultiplied) {
HXLINE( 381)											if (((destPixel & 255) == 0)) {
HXLINE( 381)												if ((destPixel != 0)) {
HXLINE( 381)													destPixel = 0;
            												}
            											}
            											else {
HXLINE( 381)												if (((destPixel & 255) != 255)) {
HXLINE( 381)													 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 381)													::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + ((destPixel & 255) * 4)))) );
HXDLIN( 381)													destPixel = ((((((((::hx::UShr(destPixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((::hx::UShr(destPixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((::hx::UShr(destPixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((destPixel & 255) & 255));
            												}
            											}
            										}
HXDLIN( 381)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 381)												{
HXLINE( 381)													int val = (::hx::UShr(destPixel,24) & 255);
HXDLIN( 381)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            												}
HXDLIN( 381)												{
HXLINE( 381)													int val1 = (::hx::UShr(destPixel,16) & 255);
HXDLIN( 381)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            												}
HXDLIN( 381)												{
HXLINE( 381)													int val2 = (::hx::UShr(destPixel,8) & 255);
HXDLIN( 381)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            												}
HXDLIN( 381)												{
HXLINE( 381)													int val3 = (destPixel & 255);
HXDLIN( 381)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            												}
            											}
            											break;
            											case (int)1: {
HXLINE( 381)												{
HXLINE( 381)													int val = (destPixel & 255);
HXDLIN( 381)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            												}
HXDLIN( 381)												{
HXLINE( 381)													int val1 = (::hx::UShr(destPixel,24) & 255);
HXDLIN( 381)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            												}
HXDLIN( 381)												{
HXLINE( 381)													int val2 = (::hx::UShr(destPixel,16) & 255);
HXDLIN( 381)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            												}
HXDLIN( 381)												{
HXLINE( 381)													int val3 = (::hx::UShr(destPixel,8) & 255);
HXDLIN( 381)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 381)												{
HXLINE( 381)													int val = (::hx::UShr(destPixel,8) & 255);
HXDLIN( 381)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            												}
HXDLIN( 381)												{
HXLINE( 381)													int val1 = (::hx::UShr(destPixel,16) & 255);
HXDLIN( 381)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            												}
HXDLIN( 381)												{
HXLINE( 381)													int val2 = (::hx::UShr(destPixel,24) & 255);
HXDLIN( 381)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            												}
HXDLIN( 381)												{
HXLINE( 381)													int val3 = (destPixel & 255);
HXDLIN( 381)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            												}
            											}
            											break;
            										}
            									}
HXLINE( 383)									sourcePosition = (sourcePosition + 4);
HXLINE( 384)									destPosition = (destPosition + 4);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 388)						bool _hx_tmp;
HXDLIN( 388)						bool _hx_tmp1;
HXDLIN( 388)						if ((sourceFormat == destFormat)) {
HXLINE( 388)							_hx_tmp1 = (sourcePremultiplied == destPremultiplied);
            						}
            						else {
HXLINE( 388)							_hx_tmp1 = false;
            						}
HXDLIN( 388)						if (_hx_tmp1) {
HXLINE( 388)							_hx_tmp = (sourceBytesPerPixel == destBytesPerPixel);
            						}
            						else {
HXLINE( 388)							_hx_tmp = false;
            						}
HXDLIN( 388)						if (_hx_tmp) {
HXLINE( 392)							int _g = 0;
HXDLIN( 392)							int _g1 = destView->height;
HXDLIN( 392)							while((_g < _g1)){
HXLINE( 392)								_g = (_g + 1);
HXDLIN( 392)								int y = (_g - 1);
HXLINE( 394)								sourcePosition = (sourceView->byteOffset + (sourceView->stride * y));
HXLINE( 395)								destPosition = (destView->byteOffset + (destView->stride * y));
HXLINE( 401)								destData->buffer->blit(destPosition,sourceData->buffer,sourcePosition,(destView->width * destBytesPerPixel));
            							}
            						}
            						else {
HXLINE( 407)							int _g = 0;
HXDLIN( 407)							int _g1 = destView->height;
HXDLIN( 407)							while((_g < _g1)){
HXLINE( 407)								_g = (_g + 1);
HXDLIN( 407)								int y = (_g - 1);
HXLINE( 409)								sourcePosition = (sourceView->byteOffset + (sourceView->stride * y));
HXLINE( 410)								destPosition = (destView->byteOffset + (destView->stride * y));
HXLINE( 412)								{
HXLINE( 412)									int _g1 = 0;
HXDLIN( 412)									int _g2 = destView->width;
HXDLIN( 412)									while((_g1 < _g2)){
HXLINE( 412)										_g1 = (_g1 + 1);
HXDLIN( 412)										int x = (_g1 - 1);
HXLINE( 414)										{
HXLINE( 414)											switch((int)(sourceFormat)){
            												case (int)0: {
HXLINE( 414)													int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 414)													int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 414)													int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 414)													sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            												}
            												break;
            												case (int)1: {
HXLINE( 414)													int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 414)													int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 414)													int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) );
HXDLIN( 414)													sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) ) & 255));
            												}
            												break;
            												case (int)2: {
HXLINE( 414)													int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 414)													int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 414)													int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 414)													sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            												}
            												break;
            											}
HXDLIN( 414)											if (sourcePremultiplied) {
HXLINE( 414)												bool _hx_tmp;
HXDLIN( 414)												if (((sourcePixel & 255) != 0)) {
HXLINE( 414)													_hx_tmp = ((sourcePixel & 255) != 255);
            												}
            												else {
HXLINE( 414)													_hx_tmp = false;
            												}
HXDLIN( 414)												if (_hx_tmp) {
HXLINE( 414)													::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 414)													{
HXLINE( 414)														 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 414)														int r = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 414)														 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 414)														int g = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 414)														 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 414)														sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            													}
            												}
            											}
            										}
HXLINE( 415)										{
HXLINE( 415)											if (destPremultiplied) {
HXLINE( 415)												if (((sourcePixel & 255) == 0)) {
HXLINE( 415)													if ((sourcePixel != 0)) {
HXLINE( 415)														sourcePixel = 0;
            													}
            												}
            												else {
HXLINE( 415)													if (((sourcePixel & 255) != 255)) {
HXLINE( 415)														 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 415)														::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + ((sourcePixel & 255) * 4)))) );
HXDLIN( 415)														sourcePixel = ((((((((::hx::UShr(sourcePixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((::hx::UShr(sourcePixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((::hx::UShr(sourcePixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((sourcePixel & 255) & 255));
            													}
            												}
            											}
HXDLIN( 415)											switch((int)(destFormat)){
            												case (int)0: {
HXLINE( 415)													{
HXLINE( 415)														int val = (::hx::UShr(sourcePixel,24) & 255);
HXDLIN( 415)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            													}
HXDLIN( 415)													{
HXLINE( 415)														int val1 = (::hx::UShr(sourcePixel,16) & 255);
HXDLIN( 415)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            													}
HXDLIN( 415)													{
HXLINE( 415)														int val2 = (::hx::UShr(sourcePixel,8) & 255);
HXDLIN( 415)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            													}
HXDLIN( 415)													{
HXLINE( 415)														int val3 = (sourcePixel & 255);
HXDLIN( 415)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            													}
            												}
            												break;
            												case (int)1: {
HXLINE( 415)													{
HXLINE( 415)														int val = (sourcePixel & 255);
HXDLIN( 415)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            													}
HXDLIN( 415)													{
HXLINE( 415)														int val1 = (::hx::UShr(sourcePixel,24) & 255);
HXDLIN( 415)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            													}
HXDLIN( 415)													{
HXLINE( 415)														int val2 = (::hx::UShr(sourcePixel,16) & 255);
HXDLIN( 415)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            													}
HXDLIN( 415)													{
HXLINE( 415)														int val3 = (::hx::UShr(sourcePixel,8) & 255);
HXDLIN( 415)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            													}
            												}
            												break;
            												case (int)2: {
HXLINE( 415)													{
HXLINE( 415)														int val = (::hx::UShr(sourcePixel,8) & 255);
HXDLIN( 415)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            													}
HXDLIN( 415)													{
HXLINE( 415)														int val1 = (::hx::UShr(sourcePixel,16) & 255);
HXDLIN( 415)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            													}
HXDLIN( 415)													{
HXLINE( 415)														int val2 = (::hx::UShr(sourcePixel,24) & 255);
HXDLIN( 415)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            													}
HXDLIN( 415)													{
HXLINE( 415)														int val3 = (sourcePixel & 255);
HXDLIN( 415)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            													}
            												}
            												break;
            											}
            										}
HXLINE( 417)										sourcePosition = (sourcePosition + 4);
HXLINE( 418)										destPosition = (destPosition + 4);
            									}
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE( 425)					 ::lime::utils::ArrayBufferView alphaData = alphaImage->buffer->data;
HXLINE( 426)					int alphaFormat = alphaImage->buffer->format;
HXLINE( 427)					int alphaPosition;
HXDLIN( 427)					int alphaPixel = 0;
HXLINE( 430)					Float alphaView;
HXDLIN( 430)					if (::hx::IsNull( alphaPoint )) {
HXLINE( 430)						alphaView = ( (Float)(0) );
            					}
            					else {
HXLINE( 430)						alphaView = alphaPoint->x;
            					}
HXDLIN( 430)					Float alphaView1;
HXDLIN( 430)					if (::hx::IsNull( alphaPoint )) {
HXLINE( 430)						alphaView1 = ( (Float)(0) );
            					}
            					else {
HXLINE( 430)						alphaView1 = alphaPoint->y;
            					}
HXLINE( 429)					 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView alphaView2 =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,alphaImage, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,(sourceView->x + alphaView),(sourceView->y + alphaView1),sourceView->width,sourceView->height));
HXLINE( 433)					int _hx_tmp = ::Std_obj::_hx_int(destPoint->x);
HXDLIN( 433)					int _hx_tmp1 = ::Std_obj::_hx_int(destPoint->y);
HXDLIN( 433)					destView->clip(_hx_tmp,_hx_tmp1,alphaView2->width,alphaView2->height);
HXLINE( 435)					if (blend) {
HXLINE( 437)						int _g = 0;
HXDLIN( 437)						int _g1 = destView->height;
HXDLIN( 437)						while((_g < _g1)){
HXLINE( 437)							_g = (_g + 1);
HXDLIN( 437)							int y = (_g - 1);
HXLINE( 439)							sourcePosition = (sourceView->byteOffset + (sourceView->stride * y));
HXLINE( 440)							destPosition = (destView->byteOffset + (destView->stride * y));
HXLINE( 441)							alphaPosition = (alphaView2->byteOffset + (alphaView2->stride * y));
HXLINE( 443)							{
HXLINE( 443)								int _g1 = 0;
HXDLIN( 443)								int _g2 = destView->width;
HXDLIN( 443)								while((_g1 < _g2)){
HXLINE( 443)									_g1 = (_g1 + 1);
HXDLIN( 443)									int x = (_g1 - 1);
HXLINE( 445)									{
HXLINE( 445)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 445)												int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 445)												int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 445)												int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 445)												sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            											case (int)1: {
HXLINE( 445)												int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 445)												int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 445)												int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) );
HXDLIN( 445)												sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) ) & 255));
            											}
            											break;
            											case (int)2: {
HXLINE( 445)												int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 445)												int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 445)												int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 445)												sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            										}
HXDLIN( 445)										if (sourcePremultiplied) {
HXLINE( 445)											bool _hx_tmp;
HXDLIN( 445)											if (((sourcePixel & 255) != 0)) {
HXLINE( 445)												_hx_tmp = ((sourcePixel & 255) != 255);
            											}
            											else {
HXLINE( 445)												_hx_tmp = false;
            											}
HXDLIN( 445)											if (_hx_tmp) {
HXLINE( 445)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 445)												{
HXLINE( 445)													 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 445)													int r = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 445)													 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 445)													int g = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 445)													 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 445)													sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            												}
            											}
            										}
            									}
HXLINE( 446)									{
HXLINE( 446)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 446)												int r = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 446)												int g = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 446)												int b = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 446)												destPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            											}
            											break;
            											case (int)1: {
HXLINE( 446)												int r = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 446)												int g = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 446)												int b = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) );
HXDLIN( 446)												destPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) ) & 255));
            											}
            											break;
            											case (int)2: {
HXLINE( 446)												int r = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 446)												int g = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 446)												int b = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 446)												destPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            											}
            											break;
            										}
HXDLIN( 446)										if (destPremultiplied) {
HXLINE( 446)											bool _hx_tmp;
HXDLIN( 446)											if (((destPixel & 255) != 0)) {
HXLINE( 446)												_hx_tmp = ((destPixel & 255) != 255);
            											}
            											else {
HXLINE( 446)												_hx_tmp = false;
            											}
HXDLIN( 446)											if (_hx_tmp) {
HXLINE( 446)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((destPixel & 255)) ));
HXDLIN( 446)												{
HXLINE( 446)													 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 446)													int r = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(destPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 446)													 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 446)													int g = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(destPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 446)													 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 446)													destPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(destPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((destPixel & 255) & 255));
            												}
            											}
            										}
            									}
HXLINE( 447)									switch((int)(alphaFormat)){
            										case (int)0: {
HXLINE( 447)											int r = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) );
HXDLIN( 447)											int g = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 447)											int b = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 447)											alphaPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) ) & 255));
            										}
            										break;
            										case (int)1: {
HXLINE( 447)											int r = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 447)											int g = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 447)											int b = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) );
HXDLIN( 447)											alphaPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) ) & 255));
            										}
            										break;
            										case (int)2: {
HXLINE( 447)											int r = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 447)											int g = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 447)											int b = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) );
HXDLIN( 447)											alphaPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) ) & 255));
            										}
            										break;
            									}
HXLINE( 449)									sourceAlpha = ((( (Float)((alphaPixel & 255)) ) / ((Float)255.0)) * (( (Float)((sourcePixel & 255)) ) / ((Float)255.0)));
HXLINE( 451)									if ((sourceAlpha > 0)) {
HXLINE( 453)										destAlpha = (( (Float)((destPixel & 255)) ) / ((Float)255.0));
HXLINE( 454)										oneMinusSourceAlpha = (( (Float)(1) ) - sourceAlpha);
HXLINE( 455)										blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 457)										{
HXLINE( 457)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 457)											int value = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((( (Float)((::hx::UShr(sourcePixel,24) & 255)) ) * sourceAlpha) + ((( (Float)((::hx::UShr(destPixel,24) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 457)											destPixel = (((((value & 255) << 24) | (((::hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((::hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 460)										{
HXLINE( 460)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 460)											int value1 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((( (Float)((::hx::UShr(sourcePixel,16) & 255)) ) * sourceAlpha) + ((( (Float)((::hx::UShr(destPixel,16) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 460)											destPixel = ((((((::hx::UShr(destPixel,24) & 255) & 255) << 24) | ((value1 & 255) << 16)) | (((::hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 463)										{
HXLINE( 463)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 463)											int value2 = ( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((( (Float)((::hx::UShr(sourcePixel,8) & 255)) ) * sourceAlpha) + ((( (Float)((::hx::UShr(destPixel,8) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 463)											destPixel = ((((((::hx::UShr(destPixel,24) & 255) & 255) << 24) | (((::hx::UShr(destPixel,16) & 255) & 255) << 16)) | ((value2 & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 466)										{
HXLINE( 466)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 466)											int value3 = ( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & 255)) );
HXDLIN( 466)											destPixel = ((((((::hx::UShr(destPixel,24) & 255) & 255) << 24) | (((::hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((::hx::UShr(destPixel,8) & 255) & 255) << 8)) | (value3 & 255));
            										}
HXLINE( 468)										{
HXLINE( 468)											if (destPremultiplied) {
HXLINE( 468)												if (((destPixel & 255) == 0)) {
HXLINE( 468)													if ((destPixel != 0)) {
HXLINE( 468)														destPixel = 0;
            													}
            												}
            												else {
HXLINE( 468)													if (((destPixel & 255) != 255)) {
HXLINE( 468)														 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 468)														::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + ((destPixel & 255) * 4)))) );
HXDLIN( 468)														destPixel = ((((((((::hx::UShr(destPixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((::hx::UShr(destPixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((::hx::UShr(destPixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((destPixel & 255) & 255));
            													}
            												}
            											}
HXDLIN( 468)											switch((int)(destFormat)){
            												case (int)0: {
HXLINE( 468)													{
HXLINE( 468)														int val = (::hx::UShr(destPixel,24) & 255);
HXDLIN( 468)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            													}
HXDLIN( 468)													{
HXLINE( 468)														int val1 = (::hx::UShr(destPixel,16) & 255);
HXDLIN( 468)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            													}
HXDLIN( 468)													{
HXLINE( 468)														int val2 = (::hx::UShr(destPixel,8) & 255);
HXDLIN( 468)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            													}
HXDLIN( 468)													{
HXLINE( 468)														int val3 = (destPixel & 255);
HXDLIN( 468)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            													}
            												}
            												break;
            												case (int)1: {
HXLINE( 468)													{
HXLINE( 468)														int val = (destPixel & 255);
HXDLIN( 468)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            													}
HXDLIN( 468)													{
HXLINE( 468)														int val1 = (::hx::UShr(destPixel,24) & 255);
HXDLIN( 468)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            													}
HXDLIN( 468)													{
HXLINE( 468)														int val2 = (::hx::UShr(destPixel,16) & 255);
HXDLIN( 468)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            													}
HXDLIN( 468)													{
HXLINE( 468)														int val3 = (::hx::UShr(destPixel,8) & 255);
HXDLIN( 468)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            													}
            												}
            												break;
            												case (int)2: {
HXLINE( 468)													{
HXLINE( 468)														int val = (::hx::UShr(destPixel,8) & 255);
HXDLIN( 468)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            													}
HXDLIN( 468)													{
HXLINE( 468)														int val1 = (::hx::UShr(destPixel,16) & 255);
HXDLIN( 468)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            													}
HXDLIN( 468)													{
HXLINE( 468)														int val2 = (::hx::UShr(destPixel,24) & 255);
HXDLIN( 468)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            													}
HXDLIN( 468)													{
HXLINE( 468)														int val3 = (destPixel & 255);
HXDLIN( 468)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            													}
            												}
            												break;
            											}
            										}
            									}
HXLINE( 471)									sourcePosition = (sourcePosition + 4);
HXLINE( 472)									destPosition = (destPosition + 4);
HXLINE( 473)									alphaPosition = (alphaPosition + 4);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 479)						int _g = 0;
HXDLIN( 479)						int _g1 = destView->height;
HXDLIN( 479)						while((_g < _g1)){
HXLINE( 479)							_g = (_g + 1);
HXDLIN( 479)							int y = (_g - 1);
HXLINE( 481)							sourcePosition = (sourceView->byteOffset + (sourceView->stride * y));
HXLINE( 482)							destPosition = (destView->byteOffset + (destView->stride * y));
HXLINE( 483)							alphaPosition = (alphaView2->byteOffset + (alphaView2->stride * y));
HXLINE( 485)							{
HXLINE( 485)								int _g1 = 0;
HXDLIN( 485)								int _g2 = destView->width;
HXDLIN( 485)								while((_g1 < _g2)){
HXLINE( 485)									_g1 = (_g1 + 1);
HXDLIN( 485)									int x = (_g1 - 1);
HXLINE( 487)									{
HXLINE( 487)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 487)												int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 487)												int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 487)												int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 487)												sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            											case (int)1: {
HXLINE( 487)												int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 487)												int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 487)												int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) );
HXDLIN( 487)												sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) ) & 255));
            											}
            											break;
            											case (int)2: {
HXLINE( 487)												int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 487)												int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 487)												int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 487)												sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            										}
HXDLIN( 487)										if (sourcePremultiplied) {
HXLINE( 487)											bool _hx_tmp;
HXDLIN( 487)											if (((sourcePixel & 255) != 0)) {
HXLINE( 487)												_hx_tmp = ((sourcePixel & 255) != 255);
            											}
            											else {
HXLINE( 487)												_hx_tmp = false;
            											}
HXDLIN( 487)											if (_hx_tmp) {
HXLINE( 487)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 487)												{
HXLINE( 487)													 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 487)													int r = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 487)													 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 487)													int g = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 487)													 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 487)													sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            												}
            											}
            										}
            									}
HXLINE( 488)									switch((int)(alphaFormat)){
            										case (int)0: {
HXLINE( 488)											int r = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) );
HXDLIN( 488)											int g = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 488)											int b = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 488)											alphaPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) ) & 255));
            										}
            										break;
            										case (int)1: {
HXLINE( 488)											int r = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 488)											int g = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 488)											int b = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) );
HXDLIN( 488)											alphaPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) ) & 255));
            										}
            										break;
            										case (int)2: {
HXLINE( 488)											int r = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 488)											int g = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 488)											int b = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) );
HXDLIN( 488)											alphaPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) ) & 255));
            										}
            										break;
            									}
HXLINE( 490)									{
HXLINE( 490)										int value = ::Math_obj::round((( (Float)((sourcePixel & 255)) ) * (( (Float)((alphaPixel & 255)) ) / ( (Float)(255) ))));
HXDLIN( 490)										sourcePixel = ((((((::hx::UShr(sourcePixel,24) & 255) & 255) << 24) | (((::hx::UShr(sourcePixel,16) & 255) & 255) << 16)) | (((::hx::UShr(sourcePixel,8) & 255) & 255) << 8)) | (value & 255));
            									}
HXLINE( 491)									{
HXLINE( 491)										if (destPremultiplied) {
HXLINE( 491)											if (((sourcePixel & 255) == 0)) {
HXLINE( 491)												if ((sourcePixel != 0)) {
HXLINE( 491)													sourcePixel = 0;
            												}
            											}
            											else {
HXLINE( 491)												if (((sourcePixel & 255) != 255)) {
HXLINE( 491)													 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 491)													::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + ((sourcePixel & 255) * 4)))) );
HXDLIN( 491)													sourcePixel = ((((((((::hx::UShr(sourcePixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((::hx::UShr(sourcePixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((::hx::UShr(sourcePixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((sourcePixel & 255) & 255));
            												}
            											}
            										}
HXDLIN( 491)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 491)												{
HXLINE( 491)													int val = (::hx::UShr(sourcePixel,24) & 255);
HXDLIN( 491)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            												}
HXDLIN( 491)												{
HXLINE( 491)													int val1 = (::hx::UShr(sourcePixel,16) & 255);
HXDLIN( 491)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            												}
HXDLIN( 491)												{
HXLINE( 491)													int val2 = (::hx::UShr(sourcePixel,8) & 255);
HXDLIN( 491)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            												}
HXDLIN( 491)												{
HXLINE( 491)													int val3 = (sourcePixel & 255);
HXDLIN( 491)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            												}
            											}
            											break;
            											case (int)1: {
HXLINE( 491)												{
HXLINE( 491)													int val = (sourcePixel & 255);
HXDLIN( 491)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            												}
HXDLIN( 491)												{
HXLINE( 491)													int val1 = (::hx::UShr(sourcePixel,24) & 255);
HXDLIN( 491)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            												}
HXDLIN( 491)												{
HXLINE( 491)													int val2 = (::hx::UShr(sourcePixel,16) & 255);
HXDLIN( 491)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            												}
HXDLIN( 491)												{
HXLINE( 491)													int val3 = (::hx::UShr(sourcePixel,8) & 255);
HXDLIN( 491)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 491)												{
HXLINE( 491)													int val = (::hx::UShr(sourcePixel,8) & 255);
HXDLIN( 491)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            												}
HXDLIN( 491)												{
HXLINE( 491)													int val1 = (::hx::UShr(sourcePixel,16) & 255);
HXDLIN( 491)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            												}
HXDLIN( 491)												{
HXLINE( 491)													int val2 = (::hx::UShr(sourcePixel,24) & 255);
HXDLIN( 491)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            												}
HXDLIN( 491)												{
HXLINE( 491)													int val3 = (sourcePixel & 255);
HXDLIN( 491)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            												}
            											}
            											break;
            										}
            									}
HXLINE( 493)									sourcePosition = (sourcePosition + 4);
HXLINE( 494)									destPosition = (destPosition + 4);
HXLINE( 495)									alphaPosition = (alphaPosition + 4);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 503)		image->dirty = true;
HXLINE( 504)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,copyPixels,(void))

void ImageDataUtil_obj::fillRect( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int color,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_508_fillRect)
HXLINE( 509)		int fillColor;
HXLINE( 511)		switch((int)(format)){
            			case (int)1: {
HXLINE( 514)				int argb = color;
HXDLIN( 514)				int this1 = 0;
HXDLIN( 514)				int rgba = this1;
HXDLIN( 514)				rgba = ((((((::hx::UShr(argb,16) & 255) & 255) << 24) | (((::hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((::hx::UShr(argb,24) & 255) & 255));
HXDLIN( 514)				fillColor = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE( 516)				int bgra = color;
HXDLIN( 516)				int this1 = 0;
HXDLIN( 516)				int rgba = this1;
HXDLIN( 516)				rgba = ((((((::hx::UShr(bgra,8) & 255) & 255) << 24) | (((::hx::UShr(bgra,16) & 255) & 255) << 16)) | (((::hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN( 516)				fillColor = rgba;
            			}
            			break;
            			default:{
HXLINE( 518)				fillColor = color;
            			}
            		}
HXLINE( 521)		if (!(image->get_transparent())) {
HXLINE( 523)			fillColor = ((((((::hx::UShr(fillColor,24) & 255) & 255) << 24) | (((::hx::UShr(fillColor,16) & 255) & 255) << 16)) | (((::hx::UShr(fillColor,8) & 255) & 255) << 8)) | 255);
            		}
HXLINE( 526)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 527)		if (::hx::IsNull( data )) {
HXLINE( 527)			return;
            		}
HXLINE( 530)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 530)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_fill_rect(::hx::DynamicPtr(image),::hx::DynamicPtr(rect),((fillColor >> 16) & 65535),(fillColor & 65535));
            		}
            		else {
HXLINE( 535)			int format = image->buffer->format;
HXLINE( 536)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 537)			if (premultiplied) {
HXLINE( 537)				if (((fillColor & 255) == 0)) {
HXLINE( 537)					if ((fillColor != 0)) {
HXLINE( 537)						fillColor = 0;
            					}
            				}
            				else {
HXLINE( 537)					if (((fillColor & 255) != 255)) {
HXLINE( 537)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 537)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + ((fillColor & 255) * 4)))) );
HXDLIN( 537)						fillColor = ((((((((::hx::UShr(fillColor,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((::hx::UShr(fillColor,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((::hx::UShr(fillColor,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((fillColor & 255) & 255));
            					}
            				}
            			}
HXLINE( 539)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 540)			int row;
HXLINE( 542)			{
HXLINE( 542)				int _g = 0;
HXDLIN( 542)				int _g1 = dataView->height;
HXDLIN( 542)				while((_g < _g1)){
HXLINE( 542)					_g = (_g + 1);
HXDLIN( 542)					int y = (_g - 1);
HXLINE( 544)					row = (dataView->byteOffset + (dataView->stride * y));
HXLINE( 546)					{
HXLINE( 546)						int _g1 = 0;
HXDLIN( 546)						int _g2 = dataView->width;
HXDLIN( 546)						while((_g1 < _g2)){
HXLINE( 546)							_g1 = (_g1 + 1);
HXDLIN( 546)							int x = (_g1 - 1);
HXLINE( 548)							{
HXLINE( 548)								int offset = (row + (x * 4));
HXDLIN( 548)								switch((int)(format)){
            									case (int)0: {
HXLINE( 548)										{
HXLINE( 548)											int val = (::hx::UShr(fillColor,24) & 255);
HXDLIN( 548)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 548)										{
HXLINE( 548)											int val1 = (::hx::UShr(fillColor,16) & 255);
HXDLIN( 548)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            										}
HXDLIN( 548)										{
HXLINE( 548)											int val2 = (::hx::UShr(fillColor,8) & 255);
HXDLIN( 548)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            										}
HXDLIN( 548)										{
HXLINE( 548)											int val3 = (fillColor & 255);
HXDLIN( 548)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 548)										{
HXLINE( 548)											int val = (fillColor & 255);
HXDLIN( 548)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 548)										{
HXLINE( 548)											int val1 = (::hx::UShr(fillColor,24) & 255);
HXDLIN( 548)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            										}
HXDLIN( 548)										{
HXLINE( 548)											int val2 = (::hx::UShr(fillColor,16) & 255);
HXDLIN( 548)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            										}
HXDLIN( 548)										{
HXLINE( 548)											int val3 = (::hx::UShr(fillColor,8) & 255);
HXDLIN( 548)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 548)										{
HXLINE( 548)											int val = (::hx::UShr(fillColor,8) & 255);
HXDLIN( 548)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 548)										{
HXLINE( 548)											int val1 = (::hx::UShr(fillColor,16) & 255);
HXDLIN( 548)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            										}
HXDLIN( 548)										{
HXLINE( 548)											int val2 = (::hx::UShr(fillColor,24) & 255);
HXDLIN( 548)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            										}
HXDLIN( 548)										{
HXLINE( 548)											int val3 = (fillColor & 255);
HXDLIN( 548)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 553)		image->dirty = true;
HXLINE( 554)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,fillRect,(void))

int ImageDataUtil_obj::getPixel32( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_831_getPixel32)
HXLINE( 832)		int pixel = 0;
HXLINE( 834)		{
HXLINE( 834)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN( 834)			int offset = (((4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * 4));
HXDLIN( 834)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 834)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 834)					int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 834)					int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 834)					int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 834)					pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            				case (int)1: {
HXLINE( 834)					int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 834)					int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 834)					int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN( 834)					pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            				}
            				break;
            				case (int)2: {
HXLINE( 834)					int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 834)					int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 834)					int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 834)					pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            			}
HXDLIN( 834)			if (premultiplied) {
HXLINE( 834)				bool _hx_tmp;
HXDLIN( 834)				if (((pixel & 255) != 0)) {
HXLINE( 834)					_hx_tmp = ((pixel & 255) != 255);
            				}
            				else {
HXLINE( 834)					_hx_tmp = false;
            				}
HXDLIN( 834)				if (_hx_tmp) {
HXLINE( 834)					::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((pixel & 255)) ));
HXDLIN( 834)					{
HXLINE( 834)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 834)						int r = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(pixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 834)						 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 834)						int g = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(pixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 834)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 834)						pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(pixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((pixel & 255) & 255));
            					}
            				}
            			}
            		}
HXLINE( 837)		switch((int)(format)){
            			case (int)1: {
HXLINE( 840)				int this1 = 0;
HXDLIN( 840)				int argb = this1;
HXDLIN( 840)				argb = ((((((pixel & 255) & 255) << 24) | (((::hx::UShr(pixel,24) & 255) & 255) << 16)) | (((::hx::UShr(pixel,16) & 255) & 255) << 8)) | ((::hx::UShr(pixel,8) & 255) & 255));
HXDLIN( 840)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 842)				int this1 = 0;
HXDLIN( 842)				int bgra = this1;
HXDLIN( 842)				bgra = ((((((::hx::UShr(pixel,8) & 255) & 255) << 24) | (((::hx::UShr(pixel,16) & 255) & 255) << 16)) | (((::hx::UShr(pixel,24) & 255) & 255) << 8)) | ((pixel & 255) & 255));
HXDLIN( 842)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 844)				return pixel;
            			}
            		}
HXLINE( 837)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel32,return )

void ImageDataUtil_obj::multiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_956_multiplyAlpha)
HXLINE( 957)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 958)		bool _hx_tmp;
HXDLIN( 958)		if (::hx::IsNotNull( data )) {
HXLINE( 958)			_hx_tmp = !(image->buffer->transparent);
            		}
            		else {
HXLINE( 958)			_hx_tmp = true;
            		}
HXDLIN( 958)		if (_hx_tmp) {
HXLINE( 958)			return;
            		}
HXLINE( 961)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 961)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_multiply_alpha(::hx::DynamicPtr(image));
            		}
            		else {
HXLINE( 965)			int format = image->buffer->format;
HXLINE( 966)			int length = ::Std_obj::_hx_int((( (Float)(data->length) ) / ( (Float)(4) )));
HXLINE( 967)			int pixel = 0;
HXLINE( 969)			{
HXLINE( 969)				int _g = 0;
HXDLIN( 969)				int _g1 = length;
HXDLIN( 969)				while((_g < _g1)){
HXLINE( 969)					_g = (_g + 1);
HXDLIN( 969)					int i = (_g - 1);
HXLINE( 971)					{
HXLINE( 971)						int offset = (i * 4);
HXDLIN( 971)						switch((int)(format)){
            							case (int)0: {
HXLINE( 971)								int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 971)								int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 971)								int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 971)								pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            							}
            							break;
            							case (int)1: {
HXLINE( 971)								int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 971)								int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 971)								int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN( 971)								pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            							}
            							break;
            							case (int)2: {
HXLINE( 971)								int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 971)								int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 971)								int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 971)								pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            							}
            							break;
            						}
            					}
HXLINE( 972)					{
HXLINE( 972)						int offset1 = (i * 4);
HXDLIN( 972)						if (((pixel & 255) == 0)) {
HXLINE( 972)							if ((pixel != 0)) {
HXLINE( 972)								pixel = 0;
            							}
            						}
            						else {
HXLINE( 972)							if (((pixel & 255) != 255)) {
HXLINE( 972)								 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 972)								::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + ((pixel & 255) * 4)))) );
HXDLIN( 972)								pixel = ((((((((::hx::UShr(pixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((::hx::UShr(pixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((::hx::UShr(pixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((pixel & 255) & 255));
            							}
            						}
HXDLIN( 972)						switch((int)(format)){
            							case (int)0: {
HXLINE( 972)								{
HXLINE( 972)									int val = (::hx::UShr(pixel,24) & 255);
HXDLIN( 972)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN( 972)								{
HXLINE( 972)									int val1 = (::hx::UShr(pixel,16) & 255);
HXDLIN( 972)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val1);
            								}
HXDLIN( 972)								{
HXLINE( 972)									int val2 = (::hx::UShr(pixel,8) & 255);
HXDLIN( 972)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val2);
            								}
HXDLIN( 972)								{
HXLINE( 972)									int val3 = (pixel & 255);
HXDLIN( 972)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val3);
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 972)								{
HXLINE( 972)									int val = (pixel & 255);
HXDLIN( 972)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN( 972)								{
HXLINE( 972)									int val1 = (::hx::UShr(pixel,24) & 255);
HXDLIN( 972)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val1);
            								}
HXDLIN( 972)								{
HXLINE( 972)									int val2 = (::hx::UShr(pixel,16) & 255);
HXDLIN( 972)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val2);
            								}
HXDLIN( 972)								{
HXLINE( 972)									int val3 = (::hx::UShr(pixel,8) & 255);
HXDLIN( 972)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val3);
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 972)								{
HXLINE( 972)									int val = (::hx::UShr(pixel,8) & 255);
HXDLIN( 972)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN( 972)								{
HXLINE( 972)									int val1 = (::hx::UShr(pixel,16) & 255);
HXDLIN( 972)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val1);
            								}
HXDLIN( 972)								{
HXLINE( 972)									int val2 = (::hx::UShr(pixel,24) & 255);
HXDLIN( 972)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val2);
            								}
HXDLIN( 972)								{
HXLINE( 972)									int val3 = (pixel & 255);
HXDLIN( 972)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val3);
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE( 976)		image->buffer->premultiplied = true;
HXLINE( 977)		image->dirty = true;
HXLINE( 978)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,multiplyAlpha,(void))

void ImageDataUtil_obj::setFormat( ::lime::graphics::Image image,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1107_setFormat)
HXLINE(1108)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1109)		if (::hx::IsNull( data )) {
HXLINE(1109)			return;
            		}
HXLINE(1112)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1112)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_set_format(::hx::DynamicPtr(image),format);
            		}
            		else {
HXLINE(1116)			int index;
HXDLIN(1116)			 ::Dynamic a16;
HXLINE(1117)			int length = ::Std_obj::_hx_int((( (Float)(data->length) ) / ( (Float)(4) )));
HXLINE(1118)			int r1;
HXDLIN(1118)			int g1;
HXDLIN(1118)			int b1;
HXDLIN(1118)			int a1;
HXDLIN(1118)			int r2;
HXDLIN(1118)			int g2;
HXDLIN(1118)			int b2;
HXDLIN(1118)			int a2;
HXLINE(1119)			 ::Dynamic r;
HXDLIN(1119)			 ::Dynamic g;
HXDLIN(1119)			 ::Dynamic b;
HXDLIN(1119)			 ::Dynamic a;
HXLINE(1121)			switch((int)(image->get_format())){
            				case (int)0: {
HXLINE(1124)					r1 = 0;
HXLINE(1125)					g1 = 1;
HXLINE(1126)					b1 = 2;
HXLINE(1127)					a1 = 3;
            				}
            				break;
            				case (int)1: {
HXLINE(1130)					r1 = 1;
HXLINE(1131)					g1 = 2;
HXLINE(1132)					b1 = 3;
HXLINE(1133)					a1 = 0;
            				}
            				break;
            				case (int)2: {
HXLINE(1136)					r1 = 2;
HXLINE(1137)					g1 = 1;
HXLINE(1138)					b1 = 0;
HXLINE(1139)					a1 = 3;
            				}
            				break;
            			}
HXLINE(1142)			switch((int)(format)){
            				case (int)0: {
HXLINE(1145)					r2 = 0;
HXLINE(1146)					g2 = 1;
HXLINE(1147)					b2 = 2;
HXLINE(1148)					a2 = 3;
            				}
            				break;
            				case (int)1: {
HXLINE(1151)					r2 = 1;
HXLINE(1152)					g2 = 2;
HXLINE(1153)					b2 = 3;
HXLINE(1154)					a2 = 0;
            				}
            				break;
            				case (int)2: {
HXLINE(1157)					r2 = 2;
HXLINE(1158)					g2 = 1;
HXLINE(1159)					b2 = 0;
HXLINE(1160)					a2 = 3;
            				}
            				break;
            			}
HXLINE(1163)			{
HXLINE(1163)				int _g = 0;
HXDLIN(1163)				int _g1 = length;
HXDLIN(1163)				while((_g < _g1)){
HXLINE(1163)					_g = (_g + 1);
HXDLIN(1163)					int i = (_g - 1);
HXLINE(1165)					index = (i * 4);
HXLINE(1167)					r = ( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + r1))) & 255);
HXLINE(1168)					g = ( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + g1))) & 255);
HXLINE(1169)					b = ( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + b1))) & 255);
HXLINE(1170)					a = ( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + a1))) & 255);
HXLINE(1172)					{
HXLINE(1172)						int val = ( (int)(r) );
HXDLIN(1172)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + r2)),val);
            					}
HXLINE(1173)					{
HXLINE(1173)						int val1 = ( (int)(g) );
HXDLIN(1173)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + g2)),val1);
            					}
HXLINE(1174)					{
HXLINE(1174)						int val2 = ( (int)(b) );
HXDLIN(1174)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + b2)),val2);
            					}
HXLINE(1175)					{
HXLINE(1175)						int val3 = ( (int)(a) );
HXDLIN(1175)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + a2)),val3);
            					}
            				}
            			}
            		}
HXLINE(1179)		image->buffer->format = format;
HXLINE(1180)		image->dirty = true;
HXLINE(1181)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,setFormat,(void))

void ImageDataUtil_obj::setPixel( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1185_setPixel)
HXLINE(1186)		int pixel;
HXLINE(1188)		switch((int)(format)){
            			case (int)1: {
HXLINE(1191)				int argb = color;
HXDLIN(1191)				int this1 = 0;
HXDLIN(1191)				int rgba = this1;
HXDLIN(1191)				rgba = ((((((::hx::UShr(argb,16) & 255) & 255) << 24) | (((::hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((::hx::UShr(argb,24) & 255) & 255));
HXDLIN(1191)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE(1193)				int bgra = color;
HXDLIN(1193)				int this1 = 0;
HXDLIN(1193)				int rgba = this1;
HXDLIN(1193)				rgba = ((((((::hx::UShr(bgra,8) & 255) & 255) << 24) | (((::hx::UShr(bgra,16) & 255) & 255) << 16)) | (((::hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN(1193)				pixel = rgba;
            			}
            			break;
            			default:{
HXLINE(1195)				pixel = color;
            			}
            		}
HXLINE(1200)		int this1 = 0;
HXDLIN(1200)		int source = this1;
HXLINE(1201)		{
HXLINE(1201)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN(1201)			int offset = (((4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * 4));
HXDLIN(1201)			bool premultiplied = image->buffer->premultiplied;
HXDLIN(1201)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE(1201)					int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN(1201)					int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1201)					int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1201)					source = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            				case (int)1: {
HXLINE(1201)					int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1201)					int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1201)					int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN(1201)					source = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            				}
            				break;
            				case (int)2: {
HXLINE(1201)					int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1201)					int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1201)					int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN(1201)					source = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            			}
HXDLIN(1201)			if (premultiplied) {
HXLINE(1201)				bool _hx_tmp;
HXDLIN(1201)				if (((source & 255) != 0)) {
HXLINE(1201)					_hx_tmp = ((source & 255) != 255);
            				}
            				else {
HXLINE(1201)					_hx_tmp = false;
            				}
HXDLIN(1201)				if (_hx_tmp) {
HXLINE(1201)					::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((source & 255)) ));
HXDLIN(1201)					{
HXLINE(1201)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1201)						int r = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(source,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1201)						 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1201)						int g = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(source,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1201)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1201)						source = (((((r & 255) << 24) | ((g & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(source,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((source & 255) & 255));
            					}
            				}
            			}
            		}
HXLINE(1204)		{
HXLINE(1204)			int value = (source & 255);
HXDLIN(1204)			pixel = ((((((::hx::UShr(pixel,24) & 255) & 255) << 24) | (((::hx::UShr(pixel,16) & 255) & 255) << 16)) | (((::hx::UShr(pixel,8) & 255) & 255) << 8)) | (value & 255));
            		}
HXLINE(1205)		{
HXLINE(1205)			 ::lime::utils::ArrayBufferView data1 = image->buffer->data;
HXDLIN(1205)			int offset1 = (((4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * 4));
HXDLIN(1205)			int format1 = image->buffer->format;
HXDLIN(1205)			if (image->buffer->premultiplied) {
HXLINE(1205)				if (((pixel & 255) == 0)) {
HXLINE(1205)					if ((pixel != 0)) {
HXLINE(1205)						pixel = 0;
            					}
            				}
            				else {
HXLINE(1205)					if (((pixel & 255) != 255)) {
HXLINE(1205)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1205)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + ((pixel & 255) * 4)))) );
HXDLIN(1205)						pixel = ((((((((::hx::UShr(pixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((::hx::UShr(pixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((::hx::UShr(pixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((pixel & 255) & 255));
            					}
            				}
            			}
HXDLIN(1205)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1205)					{
HXLINE(1205)						int val = (::hx::UShr(pixel,24) & 255);
HXDLIN(1205)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + offset1),val);
            					}
HXDLIN(1205)					{
HXLINE(1205)						int val1 = (::hx::UShr(pixel,16) & 255);
HXDLIN(1205)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 1)),val1);
            					}
HXDLIN(1205)					{
HXLINE(1205)						int val2 = (::hx::UShr(pixel,8) & 255);
HXDLIN(1205)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 2)),val2);
            					}
HXDLIN(1205)					{
HXLINE(1205)						int val3 = (pixel & 255);
HXDLIN(1205)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 3)),val3);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1205)					{
HXLINE(1205)						int val = (pixel & 255);
HXDLIN(1205)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + offset1),val);
            					}
HXDLIN(1205)					{
HXLINE(1205)						int val1 = (::hx::UShr(pixel,24) & 255);
HXDLIN(1205)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 1)),val1);
            					}
HXDLIN(1205)					{
HXLINE(1205)						int val2 = (::hx::UShr(pixel,16) & 255);
HXDLIN(1205)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 2)),val2);
            					}
HXDLIN(1205)					{
HXLINE(1205)						int val3 = (::hx::UShr(pixel,8) & 255);
HXDLIN(1205)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 3)),val3);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1205)					{
HXLINE(1205)						int val = (::hx::UShr(pixel,8) & 255);
HXDLIN(1205)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + offset1),val);
            					}
HXDLIN(1205)					{
HXLINE(1205)						int val1 = (::hx::UShr(pixel,16) & 255);
HXDLIN(1205)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 1)),val1);
            					}
HXDLIN(1205)					{
HXLINE(1205)						int val2 = (::hx::UShr(pixel,24) & 255);
HXDLIN(1205)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 2)),val2);
            					}
HXDLIN(1205)					{
HXLINE(1205)						int val3 = (pixel & 255);
HXDLIN(1205)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 3)),val3);
            					}
            				}
            				break;
            			}
            		}
HXLINE(1208)		image->dirty = true;
HXLINE(1209)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel,(void))

void ImageDataUtil_obj::setPixel32( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1213_setPixel32)
HXLINE(1214)		int pixel;
HXLINE(1216)		switch((int)(format)){
            			case (int)1: {
HXLINE(1219)				int argb = color;
HXDLIN(1219)				int this1 = 0;
HXDLIN(1219)				int rgba = this1;
HXDLIN(1219)				rgba = ((((((::hx::UShr(argb,16) & 255) & 255) << 24) | (((::hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((::hx::UShr(argb,24) & 255) & 255));
HXDLIN(1219)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE(1221)				int bgra = color;
HXDLIN(1221)				int this1 = 0;
HXDLIN(1221)				int rgba = this1;
HXDLIN(1221)				rgba = ((((((::hx::UShr(bgra,8) & 255) & 255) << 24) | (((::hx::UShr(bgra,16) & 255) & 255) << 16)) | (((::hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN(1221)				pixel = rgba;
            			}
            			break;
            			default:{
HXLINE(1223)				pixel = color;
            			}
            		}
HXLINE(1226)		if (!(image->get_transparent())) {
HXLINE(1226)			pixel = ((((((::hx::UShr(pixel,24) & 255) & 255) << 24) | (((::hx::UShr(pixel,16) & 255) & 255) << 16)) | (((::hx::UShr(pixel,8) & 255) & 255) << 8)) | 255);
            		}
HXLINE(1227)		{
HXLINE(1227)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN(1227)			int offset = (((4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * 4));
HXDLIN(1227)			int format1 = image->buffer->format;
HXDLIN(1227)			if (image->buffer->premultiplied) {
HXLINE(1227)				if (((pixel & 255) == 0)) {
HXLINE(1227)					if ((pixel != 0)) {
HXLINE(1227)						pixel = 0;
            					}
            				}
            				else {
HXLINE(1227)					if (((pixel & 255) != 255)) {
HXLINE(1227)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1227)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + ((pixel & 255) * 4)))) );
HXDLIN(1227)						pixel = ((((((((::hx::UShr(pixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((::hx::UShr(pixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((::hx::UShr(pixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((pixel & 255) & 255));
            					}
            				}
            			}
HXDLIN(1227)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1227)					{
HXLINE(1227)						int val = (::hx::UShr(pixel,24) & 255);
HXDLIN(1227)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            					}
HXDLIN(1227)					{
HXLINE(1227)						int val1 = (::hx::UShr(pixel,16) & 255);
HXDLIN(1227)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            					}
HXDLIN(1227)					{
HXLINE(1227)						int val2 = (::hx::UShr(pixel,8) & 255);
HXDLIN(1227)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            					}
HXDLIN(1227)					{
HXLINE(1227)						int val3 = (pixel & 255);
HXDLIN(1227)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1227)					{
HXLINE(1227)						int val = (pixel & 255);
HXDLIN(1227)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            					}
HXDLIN(1227)					{
HXLINE(1227)						int val1 = (::hx::UShr(pixel,24) & 255);
HXDLIN(1227)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            					}
HXDLIN(1227)					{
HXLINE(1227)						int val2 = (::hx::UShr(pixel,16) & 255);
HXDLIN(1227)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            					}
HXDLIN(1227)					{
HXLINE(1227)						int val3 = (::hx::UShr(pixel,8) & 255);
HXDLIN(1227)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1227)					{
HXLINE(1227)						int val = (::hx::UShr(pixel,8) & 255);
HXDLIN(1227)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            					}
HXDLIN(1227)					{
HXLINE(1227)						int val1 = (::hx::UShr(pixel,16) & 255);
HXDLIN(1227)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            					}
HXDLIN(1227)					{
HXLINE(1227)						int val2 = (::hx::UShr(pixel,24) & 255);
HXDLIN(1227)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            					}
HXDLIN(1227)					{
HXLINE(1227)						int val3 = (pixel & 255);
HXDLIN(1227)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            					}
            				}
            				break;
            			}
            		}
HXLINE(1230)		image->dirty = true;
HXLINE(1231)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel32,(void))

void ImageDataUtil_obj::setPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::BytePointerData bytePointer,int format, ::lime::_hx_system::Endian endian){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1235_setPixels)
HXLINE(1236)		if (::hx::IsNull( image->buffer->data )) {
HXLINE(1236)			return;
            		}
HXLINE(1239)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1239)			int _hx_tmp;
HXDLIN(1239)			if (::hx::IsEq( endian,::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn() )) {
HXLINE(1239)				_hx_tmp = 1;
            			}
            			else {
HXLINE(1239)				_hx_tmp = 0;
            			}
HXDLIN(1239)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_set_pixels(::hx::DynamicPtr(image),::hx::DynamicPtr(rect),::hx::DynamicPtr(bytePointer->bytes),bytePointer->offset,format,_hx_tmp);
            		}
            		else {
HXLINE(1243)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1244)			int sourceFormat = image->buffer->format;
HXLINE(1245)			bool premultiplied = image->buffer->premultiplied;
HXLINE(1246)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE(1247)			int row;
HXDLIN(1247)			int color;
HXDLIN(1247)			int pixel;
HXLINE(1248)			bool transparent = image->get_transparent();
HXLINE(1249)			 ::haxe::io::Bytes bytes = bytePointer->bytes;
HXLINE(1250)			int dataPosition = bytePointer->offset;
HXLINE(1251)			bool littleEndian = ::hx::IsNotEq( endian,::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn() );
HXLINE(1253)			{
HXLINE(1253)				int _g = 0;
HXDLIN(1253)				int _g1 = dataView->height;
HXDLIN(1253)				while((_g < _g1)){
HXLINE(1253)					_g = (_g + 1);
HXDLIN(1253)					int y = (_g - 1);
HXLINE(1255)					row = (dataView->byteOffset + (dataView->stride * y));
HXLINE(1257)					{
HXLINE(1257)						int _g1 = 0;
HXDLIN(1257)						int _g2 = dataView->width;
HXDLIN(1257)						while((_g1 < _g2)){
HXLINE(1257)							_g1 = (_g1 + 1);
HXDLIN(1257)							int x = (_g1 - 1);
HXLINE(1259)							if (littleEndian) {
HXLINE(1261)								color = (((( (int)(bytes->b->__get(dataPosition)) ) | (( (int)(bytes->b->__get((dataPosition + 1))) ) << 8)) | (( (int)(bytes->b->__get((dataPosition + 2))) ) << 16)) | (( (int)(bytes->b->__get((dataPosition + 3))) ) << 24));
            							}
            							else {
HXLINE(1265)								color = (((( (int)(bytes->b->__get((dataPosition + 3))) ) | (( (int)(bytes->b->__get((dataPosition + 2))) ) << 8)) | (( (int)(bytes->b->__get((dataPosition + 1))) ) << 16)) | (( (int)(bytes->b->__get(dataPosition)) ) << 24));
            							}
HXLINE(1269)							dataPosition = (dataPosition + 4);
HXLINE(1271)							switch((int)(format)){
            								case (int)1: {
HXLINE(1274)									int argb = color;
HXDLIN(1274)									int this1 = 0;
HXDLIN(1274)									int rgba = this1;
HXDLIN(1274)									rgba = ((((((::hx::UShr(argb,16) & 255) & 255) << 24) | (((::hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((::hx::UShr(argb,24) & 255) & 255));
HXDLIN(1274)									pixel = rgba;
            								}
            								break;
            								case (int)2: {
HXLINE(1276)									int bgra = color;
HXDLIN(1276)									int this1 = 0;
HXDLIN(1276)									int rgba = this1;
HXDLIN(1276)									rgba = ((((((::hx::UShr(bgra,8) & 255) & 255) << 24) | (((::hx::UShr(bgra,16) & 255) & 255) << 16)) | (((::hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN(1276)									pixel = rgba;
            								}
            								break;
            								default:{
HXLINE(1278)									pixel = color;
            								}
            							}
HXLINE(1281)							if (!(transparent)) {
HXLINE(1281)								pixel = ((((((::hx::UShr(pixel,24) & 255) & 255) << 24) | (((::hx::UShr(pixel,16) & 255) & 255) << 16)) | (((::hx::UShr(pixel,8) & 255) & 255) << 8)) | 255);
            							}
HXLINE(1282)							{
HXLINE(1282)								int offset = (row + (x * 4));
HXDLIN(1282)								if (premultiplied) {
HXLINE(1282)									if (((pixel & 255) == 0)) {
HXLINE(1282)										if ((pixel != 0)) {
HXLINE(1282)											pixel = 0;
            										}
            									}
            									else {
HXLINE(1282)										if (((pixel & 255) != 255)) {
HXLINE(1282)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1282)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + ((pixel & 255) * 4)))) );
HXDLIN(1282)											pixel = ((((((((::hx::UShr(pixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((::hx::UShr(pixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((::hx::UShr(pixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((pixel & 255) & 255));
            										}
            									}
            								}
HXDLIN(1282)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE(1282)										{
HXLINE(1282)											int val = (::hx::UShr(pixel,24) & 255);
HXDLIN(1282)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN(1282)										{
HXLINE(1282)											int val1 = (::hx::UShr(pixel,16) & 255);
HXDLIN(1282)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            										}
HXDLIN(1282)										{
HXLINE(1282)											int val2 = (::hx::UShr(pixel,8) & 255);
HXDLIN(1282)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            										}
HXDLIN(1282)										{
HXLINE(1282)											int val3 = (pixel & 255);
HXDLIN(1282)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            										}
            									}
            									break;
            									case (int)1: {
HXLINE(1282)										{
HXLINE(1282)											int val = (pixel & 255);
HXDLIN(1282)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN(1282)										{
HXLINE(1282)											int val1 = (::hx::UShr(pixel,24) & 255);
HXDLIN(1282)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            										}
HXDLIN(1282)										{
HXLINE(1282)											int val2 = (::hx::UShr(pixel,16) & 255);
HXDLIN(1282)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            										}
HXDLIN(1282)										{
HXLINE(1282)											int val3 = (::hx::UShr(pixel,8) & 255);
HXDLIN(1282)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE(1282)										{
HXLINE(1282)											int val = (::hx::UShr(pixel,8) & 255);
HXDLIN(1282)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN(1282)										{
HXLINE(1282)											int val1 = (::hx::UShr(pixel,16) & 255);
HXDLIN(1282)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            										}
HXDLIN(1282)										{
HXLINE(1282)											int val2 = (::hx::UShr(pixel,24) & 255);
HXDLIN(1282)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            										}
HXDLIN(1282)										{
HXLINE(1282)											int val3 = (pixel & 255);
HXDLIN(1282)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1287)		image->dirty = true;
HXLINE(1288)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixels,(void))

void ImageDataUtil_obj::unmultiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1406_unmultiplyAlpha)
HXLINE(1407)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1408)		if (::hx::IsNull( data )) {
HXLINE(1408)			return;
            		}
HXLINE(1411)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1411)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_unmultiply_alpha(::hx::DynamicPtr(image));
            		}
            		else {
HXLINE(1415)			int format = image->buffer->format;
HXLINE(1416)			int length = ::Std_obj::_hx_int((( (Float)(data->length) ) / ( (Float)(4) )));
HXLINE(1417)			int pixel = 0;
HXLINE(1419)			{
HXLINE(1419)				int _g = 0;
HXDLIN(1419)				int _g1 = length;
HXDLIN(1419)				while((_g < _g1)){
HXLINE(1419)					_g = (_g + 1);
HXDLIN(1419)					int i = (_g - 1);
HXLINE(1421)					{
HXLINE(1421)						int offset = (i * 4);
HXDLIN(1421)						switch((int)(format)){
            							case (int)0: {
HXLINE(1421)								int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN(1421)								int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1421)								int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1421)								pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            							}
            							break;
            							case (int)1: {
HXLINE(1421)								int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1421)								int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1421)								int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN(1421)								pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            							}
            							break;
            							case (int)2: {
HXLINE(1421)								int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1421)								int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1421)								int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN(1421)								pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            							}
            							break;
            						}
HXDLIN(1421)						bool _hx_tmp;
HXDLIN(1421)						if (((pixel & 255) != 0)) {
HXLINE(1421)							_hx_tmp = ((pixel & 255) != 255);
            						}
            						else {
HXLINE(1421)							_hx_tmp = false;
            						}
HXDLIN(1421)						if (_hx_tmp) {
HXLINE(1421)							::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((pixel & 255)) ));
HXDLIN(1421)							{
HXLINE(1421)								 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1421)								int r = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(pixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1421)								 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1421)								int g = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(pixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1421)								 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1421)								pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((::hx::UShr(pixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((pixel & 255) & 255));
            							}
            						}
            					}
HXLINE(1422)					{
HXLINE(1422)						int offset1 = (i * 4);
HXDLIN(1422)						switch((int)(format)){
            							case (int)0: {
HXLINE(1422)								{
HXLINE(1422)									int val = (::hx::UShr(pixel,24) & 255);
HXDLIN(1422)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN(1422)								{
HXLINE(1422)									int val1 = (::hx::UShr(pixel,16) & 255);
HXDLIN(1422)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val1);
            								}
HXDLIN(1422)								{
HXLINE(1422)									int val2 = (::hx::UShr(pixel,8) & 255);
HXDLIN(1422)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val2);
            								}
HXDLIN(1422)								{
HXLINE(1422)									int val3 = (pixel & 255);
HXDLIN(1422)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val3);
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1422)								{
HXLINE(1422)									int val = (pixel & 255);
HXDLIN(1422)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN(1422)								{
HXLINE(1422)									int val1 = (::hx::UShr(pixel,24) & 255);
HXDLIN(1422)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val1);
            								}
HXDLIN(1422)								{
HXLINE(1422)									int val2 = (::hx::UShr(pixel,16) & 255);
HXDLIN(1422)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val2);
            								}
HXDLIN(1422)								{
HXLINE(1422)									int val3 = (::hx::UShr(pixel,8) & 255);
HXDLIN(1422)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val3);
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1422)								{
HXLINE(1422)									int val = (::hx::UShr(pixel,8) & 255);
HXDLIN(1422)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN(1422)								{
HXLINE(1422)									int val1 = (::hx::UShr(pixel,16) & 255);
HXDLIN(1422)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val1);
            								}
HXDLIN(1422)								{
HXLINE(1422)									int val2 = (::hx::UShr(pixel,24) & 255);
HXDLIN(1422)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val2);
            								}
HXDLIN(1422)								{
HXLINE(1422)									int val3 = (pixel & 255);
HXDLIN(1422)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val3);
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE(1426)		image->buffer->premultiplied = false;
HXLINE(1427)		image->dirty = true;
HXLINE(1428)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,unmultiplyAlpha,(void))


ImageDataUtil_obj::ImageDataUtil_obj()
{
}

bool ImageDataUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fillRect") ) { outValue = fillRect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel") ) { outValue = setPixel_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setFormat") ) { outValue = setFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixels") ) { outValue = setPixels_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { outValue = copyPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { outValue = getPixel32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { outValue = setPixel32_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyChannel") ) { outValue = copyChannel_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"multiplyAlpha") ) { outValue = multiplyAlpha_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { outValue = colorTransform_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { outValue = unmultiplyAlpha_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ImageDataUtil_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ImageDataUtil_obj_sStaticStorageInfo = 0;
#endif

::hx::Class ImageDataUtil_obj::__mClass;

static ::String ImageDataUtil_obj_sStaticFields[] = {
	HX_("colorTransform",89,d7,3f,ad),
	HX_("copyChannel",8e,7d,e6,22),
	HX_("copyPixels",c2,54,6e,42),
	HX_("fillRect",47,45,b9,6c),
	HX_("getPixel32",af,a6,68,d7),
	HX_("multiplyAlpha",9a,f2,1c,6b),
	HX_("setFormat",79,04,36,5d),
	HX_("setPixel",84,2f,d8,d0),
	HX_("setPixel32",23,45,e6,da),
	HX_("setPixels",6f,64,51,ec),
	HX_("unmultiplyAlpha",a1,c8,96,28),
	::String(null())
};

void ImageDataUtil_obj::__register()
{
	ImageDataUtil_obj _hx_dummy;
	ImageDataUtil_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("lime._internal.graphics.ImageDataUtil",cf,fd,b0,0e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageDataUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ImageDataUtil_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ImageDataUtil_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageDataUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageDataUtil_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _internal
} // end namespace graphics
