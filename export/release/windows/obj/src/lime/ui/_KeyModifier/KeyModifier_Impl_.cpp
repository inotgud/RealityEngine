// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_31_get_altKey,"lime.ui._KeyModifier.KeyModifier_Impl_","get_altKey",0x98ede94d,"lime.ui._KeyModifier.KeyModifier_Impl_.get_altKey","lime/ui/KeyModifier.hx",31,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_69_get_ctrlKey,"lime.ui._KeyModifier.KeyModifier_Impl_","get_ctrlKey",0xac33207d,"lime.ui._KeyModifier.KeyModifier_Impl_.get_ctrlKey","lime/ui/KeyModifier.hx",69,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_88_get_metaKey,"lime.ui._KeyModifier.KeyModifier_Impl_","get_metaKey",0x6c372aa3,"lime.ui._KeyModifier.KeyModifier_Impl_.get_metaKey","lime/ui/KeyModifier.hx",88,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_126_get_shiftKey,"lime.ui._KeyModifier.KeyModifier_Impl_","get_shiftKey",0xae171754,"lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey","lime/ui/KeyModifier.hx",126,0xae70b869)
namespace lime{
namespace ui{
namespace _KeyModifier{

void KeyModifier_Impl__obj::__construct() { }

Dynamic KeyModifier_Impl__obj::__CreateEmpty() { return new KeyModifier_Impl__obj; }

void *KeyModifier_Impl__obj::_hx_vtable = 0;

Dynamic KeyModifier_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KeyModifier_Impl__obj > _hx_result = new KeyModifier_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool KeyModifier_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x220cb492;
}

bool KeyModifier_Impl__obj::get_altKey(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_31_get_altKey)
HXDLIN(  31)		if (((this1 & 256) <= 0)) {
HXDLIN(  31)			return ((this1 & 512) > 0);
            		}
            		else {
HXDLIN(  31)			return true;
            		}
HXDLIN(  31)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_altKey,return )

bool KeyModifier_Impl__obj::get_ctrlKey(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_69_get_ctrlKey)
HXDLIN(  69)		if (((this1 & 64) <= 0)) {
HXDLIN(  69)			return ((this1 & 128) > 0);
            		}
            		else {
HXDLIN(  69)			return true;
            		}
HXDLIN(  69)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_ctrlKey,return )

bool KeyModifier_Impl__obj::get_metaKey(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_88_get_metaKey)
HXDLIN(  88)		if (((this1 & 1024) <= 0)) {
HXDLIN(  88)			return ((this1 & 2048) > 0);
            		}
            		else {
HXDLIN(  88)			return true;
            		}
HXDLIN(  88)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_metaKey,return )

bool KeyModifier_Impl__obj::get_shiftKey(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_126_get_shiftKey)
HXDLIN( 126)		if (((this1 & 1) <= 0)) {
HXDLIN( 126)			return ((this1 & 2) > 0);
            		}
            		else {
HXDLIN( 126)			return true;
            		}
HXDLIN( 126)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_shiftKey,return )


KeyModifier_Impl__obj::KeyModifier_Impl__obj()
{
}

bool KeyModifier_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"get_altKey") ) { outValue = get_altKey_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_ctrlKey") ) { outValue = get_ctrlKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_metaKey") ) { outValue = get_metaKey_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_shiftKey") ) { outValue = get_shiftKey_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *KeyModifier_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *KeyModifier_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class KeyModifier_Impl__obj::__mClass;

static ::String KeyModifier_Impl__obj_sStaticFields[] = {
	HX_("get_altKey",bf,17,52,35),
	HX_("get_ctrlKey",cb,95,77,e7),
	HX_("get_metaKey",f1,9f,7b,a7),
	HX_("get_shiftKey",46,46,b9,4e),
	::String(null())
};

void KeyModifier_Impl__obj::__register()
{
	KeyModifier_Impl__obj _hx_dummy;
	KeyModifier_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("lime.ui._KeyModifier.KeyModifier_Impl_",20,28,aa,51);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &KeyModifier_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(KeyModifier_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< KeyModifier_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyModifier_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyModifier_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace ui
} // end namespace _KeyModifier
