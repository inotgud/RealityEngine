// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_143_exit,"lime.system.System","exit",0x19210697,"lime.system.System.exit","lime/system/System.hx",143,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_271_getTimer,"lime.system.System","getTimer",0xb1bf8f48,"lime.system.System.getTimer","lime/system/System.hx",271,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_294_openFile,"lime.system.System","openFile",0x26aa6b5f,"lime.system.System.openFile","lime/system/System.hx",294,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_317_openURL,"lime.system.System","openURL",0x0840dfec,"lime.system.System.openURL","lime/system/System.hx",317,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_350___getDirectory,"lime.system.System","__getDirectory",0xc98892d0,"lime.system.System.__getDirectory","lime/system/System.hx",350,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_426___parseArguments,"lime.system.System","__parseArguments",0xf4d0dcbc,"lime.system.System.__parseArguments","lime/system/System.hx",426,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_530___registerEntryPoint,"lime.system.System","__registerEntryPoint",0x78d55f5a,"lime.system.System.__registerEntryPoint","lime/system/System.hx",530,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_586_get_applicationStorageDirectory,"lime.system.System","get_applicationStorageDirectory",0x34818fe0,"lime.system.System.get_applicationStorageDirectory","lime/system/System.hx",586,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_677_get_endianness,"lime.system.System","get_endianness",0x4df50bb4,"lime.system.System.get_endianness","lime/system/System.hx",677,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_698_get_fontsDirectory,"lime.system.System","get_fontsDirectory",0x8242b40b,"lime.system.System.get_fontsDirectory","lime/system/System.hx",698,0x6434b429)
HX_LOCAL_STACK_FRAME(_hx_pos_f2b41f959dca9627_68_boot,"lime.system.System","boot",0x171e93ab,"lime.system.System.boot","lime/system/System.hx",68,0x6434b429)

#if defined(HX_WINDOWS)
extern "C" {
	_declspec(dllexport) unsigned long NvOptimusEnablement = 0x00000001;
	_declspec(dllexport) int AmdPowerXpressRequestHighPerformance = 1;
}
#endif

namespace lime{
namespace _hx_system{

void System_obj::__construct() { }

Dynamic System_obj::__CreateEmpty() { return new System_obj; }

void *System_obj::_hx_vtable = 0;

Dynamic System_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< System_obj > _hx_result = new System_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool System_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0470bdb7;
}

 ::haxe::ds::StringMap System_obj::_hx___applicationEntryPoint;

::String System_obj::_hx___applicationStorageDirectory;

 ::haxe::ds::IntMap System_obj::_hx___directories;

 ::lime::_hx_system::Endian System_obj::_hx___endianness;

::String System_obj::_hx___fontsDirectory;

void System_obj::exit(int code){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_143_exit)
HXLINE( 145)		if (::hx::IsNotNull( ::lime::app::Application_obj::current )) {
HXLINE( 147)			::lime::app::Application_obj::current->onExit->dispatch(code);
HXLINE( 149)			if (::lime::app::Application_obj::current->onExit->canceled) {
HXLINE( 151)				return;
            			}
            		}
HXLINE( 157)		::Sys_obj::exit(code);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(System_obj,exit,(void))

int System_obj::getTimer(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_271_getTimer)
HXDLIN( 271)		return ( (int)(::lime::_internal::backend::native::NativeCFFI_obj::lime_system_get_timer()) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,getTimer,return )

void System_obj::openFile(::String path){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_294_openFile)
HXDLIN( 294)		if (::hx::IsNotNull( path )) {
HXLINE( 297)			::Sys_obj::command(HX_("start",62,74,0b,84),::Array_obj< ::String >::__new(2)->init(0,HX_("",00,00,00,00))->init(1,path));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(System_obj,openFile,(void))

void System_obj::openURL(::String url,::String __o_target){
            		::String target = __o_target;
            		if (::hx::IsNull(__o_target)) target = HX_("_blank",95,26,d9,b0);
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_317_openURL)
HXDLIN( 317)		if (::hx::IsNotNull( url )) {
HXLINE( 320)			::lime::_hx_system::System_obj::openFile(url);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(System_obj,openURL,(void))

::String System_obj::_hx___getDirectory(int type){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_350___getDirectory)
HXDLIN( 350)		if (::lime::_hx_system::System_obj::_hx___directories->exists(type)) {
HXLINE( 352)			return ::lime::_hx_system::System_obj::_hx___directories->get_string(type);
            		}
            		else {
HXLINE( 356)			::String path;
HXLINE( 358)			if ((type == 1)) {
HXLINE( 360)				::String company = HX_("MyCompany",11,c3,2e,cc);
HXLINE( 361)				::String file = HX_("MyApplication",24,d3,d1,1c);
HXLINE( 363)				if (::hx::IsNotNull( ::lime::app::Application_obj::current )) {
HXLINE( 365)					if (::lime::app::Application_obj::current->meta->exists(HX_("company",3d,15,69,83))) {
HXLINE( 367)						company = ::lime::app::Application_obj::current->meta->get_string(HX_("company",3d,15,69,83));
            					}
HXLINE( 370)					if (::lime::app::Application_obj::current->meta->exists(HX_("file",7c,ce,bb,43))) {
HXLINE( 372)						file = ::lime::app::Application_obj::current->meta->get_string(HX_("file",7c,ce,bb,43));
            					}
            				}
HXLINE( 379)				path = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_system_get_directory(type,company,file)) );
            			}
            			else {
HXLINE( 387)				path = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_system_get_directory(type,null(),null())) );
            			}
HXLINE( 392)			::String seperator = HX_("\\",5c,00,00,00);
HXLINE( 397)			bool _hx_tmp;
HXDLIN( 397)			bool _hx_tmp1;
HXDLIN( 397)			if (::hx::IsNotNull( path )) {
HXLINE( 397)				_hx_tmp1 = (path.length > 0);
            			}
            			else {
HXLINE( 397)				_hx_tmp1 = false;
            			}
HXDLIN( 397)			if (_hx_tmp1) {
HXLINE( 397)				_hx_tmp = !(::StringTools_obj::endsWith(path,seperator));
            			}
            			else {
HXLINE( 397)				_hx_tmp = false;
            			}
HXDLIN( 397)			if (_hx_tmp) {
HXLINE( 399)				path = (path + seperator);
            			}
HXLINE( 402)			::lime::_hx_system::System_obj::_hx___directories->set(type,path);
HXLINE( 403)			return path;
            		}
HXLINE( 350)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(System_obj,_hx___getDirectory,return )

void System_obj::_hx___parseArguments( ::Dynamic attributes){
            	HX_GC_STACKFRAME(&_hx_pos_f2b41f959dca9627_426___parseArguments)
HXLINE( 429)		::Array< ::String > arguments = ::Sys_obj::args();
HXLINE( 430)		 ::EReg stripQuotes =  ::EReg_obj::__alloc( HX_CTX ,HX_("^['\"](.*)['\"]$",13,22,1b,37),HX_("",00,00,00,00));
HXLINE( 431)		int equals;
HXDLIN( 431)		::String argValue;
HXDLIN( 431)		 ::haxe::ds::StringMap parameters = null();
HXLINE( 432)		::String windowParamPrefix = HX_("--window-",dd,62,c2,0a);
HXLINE( 434)		if (::hx::IsNotNull( arguments )) {
HXLINE( 436)			int _g = 0;
HXDLIN( 436)			while((_g < arguments->length)){
HXLINE( 436)				::String argument = arguments->__get(_g);
HXDLIN( 436)				_g = (_g + 1);
HXLINE( 438)				equals = argument.indexOf(HX_("=",3d,00,00,00),null());
HXLINE( 440)				if ((equals > 0)) {
HXLINE( 442)					argValue = argument.substr((equals + 1),null());
HXLINE( 444)					if (stripQuotes->match(argValue)) {
HXLINE( 446)						argValue = stripQuotes->matched(1);
            					}
HXLINE( 449)					if (::hx::IsNull( parameters )) {
HXLINE( 449)						parameters =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            					}
HXLINE( 450)					parameters->set(argument.substr(0,equals),argValue);
            				}
            			}
            		}
HXLINE( 455)		if (::hx::IsNotNull( parameters )) {
HXLINE( 457)			if (::hx::IsNull( attributes->__Field(HX_("parameters",aa,be,7e,51),::hx::paccDynamic) )) {
HXLINE( 457)				attributes->__SetField(HX_("parameters",aa,be,7e,51), ::Dynamic(::hx::Anon_obj::Create(0)),::hx::paccDynamic);
            			}
HXLINE( 458)			if (::hx::IsNull( attributes->__Field(HX_("context",ef,95,77,19),::hx::paccDynamic) )) {
HXLINE( 458)				attributes->__SetField(HX_("context",ef,95,77,19), ::Dynamic(::hx::Anon_obj::Create(0)),::hx::paccDynamic);
            			}
HXLINE( 460)			{
HXLINE( 460)				 ::Dynamic parameter = parameters->keys();
HXDLIN( 460)				while(( (bool)(parameter->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 460)					::String parameter1 = ( (::String)(parameter->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 462)					argValue = parameters->get_string(parameter1);
HXLINE( 464)					if (::StringTools_obj::startsWith(parameter1,windowParamPrefix)) {
HXLINE( 466)						::String _hx_switch_0 = parameter1.substr(windowParamPrefix.length,null());
            						if (  (_hx_switch_0==HX_("allow-high-dpi",36,e5,66,be)) ){
HXLINE( 469)							attributes->__SetField(HX_("allowHighDPI",92,07,a2,b4),(argValue == HX_("true",4e,a7,03,4d)),::hx::paccDynamic);
HXDLIN( 469)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("always-on-top",25,b6,1e,79)) ){
HXLINE( 471)							attributes->__SetField(HX_("alwaysOnTop",67,4d,53,16),(argValue == HX_("true",4e,a7,03,4d)),::hx::paccDynamic);
HXDLIN( 471)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("antialiasing",f4,16,b3,48)) ){
HXLINE( 473)							 ::Dynamic(attributes->__Field(HX_("context",ef,95,77,19),::hx::paccDynamic))->__SetField(HX_("antialiasing",f4,16,b3,48),::Std_obj::parseInt(argValue),::hx::paccDynamic);
HXDLIN( 473)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("background",ee,93,1d,26)) ){
HXLINE( 475)							 ::Dynamic _hx_tmp;
HXDLIN( 475)							bool _hx_tmp1;
HXDLIN( 475)							if ((argValue != HX_("",00,00,00,00))) {
HXLINE( 475)								_hx_tmp1 = (argValue == HX_("null",87,9e,0e,49));
            							}
            							else {
HXLINE( 475)								_hx_tmp1 = true;
            							}
HXDLIN( 475)							if (_hx_tmp1) {
HXLINE( 475)								_hx_tmp = null();
            							}
            							else {
HXLINE( 475)								_hx_tmp = ::Std_obj::parseInt(argValue);
            							}
HXDLIN( 475)							 ::Dynamic(attributes->__Field(HX_("context",ef,95,77,19),::hx::paccDynamic))->__SetField(HX_("background",ee,93,1d,26),_hx_tmp,::hx::paccDynamic);
HXDLIN( 475)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("borderless",45,46,71,17)) ){
HXLINE( 477)							attributes->__SetField(HX_("borderless",45,46,71,17),(argValue == HX_("true",4e,a7,03,4d)),::hx::paccDynamic);
HXDLIN( 477)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("colorDepth",a0,08,96,fb)) ){
HXLINE( 479)							 ::Dynamic(attributes->__Field(HX_("context",ef,95,77,19),::hx::paccDynamic))->__SetField(HX_("colorDepth",a0,08,96,fb),::Std_obj::parseInt(argValue),::hx::paccDynamic);
HXDLIN( 479)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("depth",03,f1,29,d7)) ||  (_hx_switch_0==HX_("depth-buffer",4a,22,d8,98)) ){
HXLINE( 481)							 ::Dynamic(attributes->__Field(HX_("context",ef,95,77,19),::hx::paccDynamic))->__SetField(HX_("depth",03,f1,29,d7),(argValue == HX_("true",4e,a7,03,4d)),::hx::paccDynamic);
HXDLIN( 481)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("fullscreen",3b,3a,b4,f9)) ){
HXLINE( 484)							attributes->__SetField(HX_("fullscreen",3b,3a,b4,f9),(argValue == HX_("true",4e,a7,03,4d)),::hx::paccDynamic);
HXDLIN( 484)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("hardware",a8,e2,d3,75)) ){
HXLINE( 486)							 ::Dynamic(attributes->__Field(HX_("context",ef,95,77,19),::hx::paccDynamic))->__SetField(HX_("hardware",a8,e2,d3,75),(argValue == HX_("true",4e,a7,03,4d)),::hx::paccDynamic);
HXDLIN( 486)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE( 488)							attributes->__SetField(HX_("height",e7,07,4c,02),::Std_obj::parseInt(argValue),::hx::paccDynamic);
HXDLIN( 488)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("hidden",6a,ff,95,4c)) ){
HXLINE( 490)							attributes->__SetField(HX_("hidden",6a,ff,95,4c),(argValue == HX_("true",4e,a7,03,4d)),::hx::paccDynamic);
HXDLIN( 490)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("maximized",18,0e,e1,fe)) ){
HXLINE( 492)							attributes->__SetField(HX_("maximized",18,0e,e1,fe),(argValue == HX_("true",4e,a7,03,4d)),::hx::paccDynamic);
HXDLIN( 492)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("minimized",86,fb,9d,28)) ){
HXLINE( 494)							attributes->__SetField(HX_("minimized",86,fb,9d,28),(argValue == HX_("true",4e,a7,03,4d)),::hx::paccDynamic);
HXDLIN( 494)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("render-type",51,ca,94,6e)) ||  (_hx_switch_0==HX_("renderer",43,c5,db,b2)) ){
HXLINE( 496)							 ::Dynamic(attributes->__Field(HX_("context",ef,95,77,19),::hx::paccDynamic))->__SetField(HX_("type",ba,f2,08,4d),argValue,::hx::paccDynamic);
HXDLIN( 496)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("render-version",e1,a7,f5,24)) ||  (_hx_switch_0==HX_("renderer-version",ce,36,a7,0b)) ){
HXLINE( 498)							 ::Dynamic(attributes->__Field(HX_("context",ef,95,77,19),::hx::paccDynamic))->__SetField(HX_("version",18,e7,f1,7c),argValue,::hx::paccDynamic);
HXDLIN( 498)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("resizable",6b,37,50,a9)) ){
HXLINE( 500)							attributes->__SetField(HX_("resizable",6b,37,50,a9),(argValue == HX_("true",4e,a7,03,4d)),::hx::paccDynamic);
HXDLIN( 500)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("stencil",fc,bd,03,80)) ||  (_hx_switch_0==HX_("stencil-buffer",71,d6,20,82)) ){
HXLINE( 502)							 ::Dynamic(attributes->__Field(HX_("context",ef,95,77,19),::hx::paccDynamic))->__SetField(HX_("stencil",fc,bd,03,80),(argValue == HX_("true",4e,a7,03,4d)),::hx::paccDynamic);
HXDLIN( 502)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("vsync",d1,2d,a8,3d)) ){
HXLINE( 505)							 ::Dynamic(attributes->__Field(HX_("context",ef,95,77,19),::hx::paccDynamic))->__SetField(HX_("vsync",d1,2d,a8,3d),(argValue == HX_("true",4e,a7,03,4d)),::hx::paccDynamic);
HXDLIN( 505)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE( 507)							attributes->__SetField(HX_("width",06,b6,62,ca),::Std_obj::parseInt(argValue),::hx::paccDynamic);
HXDLIN( 507)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("x",78,00,00,00)) ){
HXLINE( 509)							attributes->__SetField(HX_("x",78,00,00,00),::Std_obj::parseInt(argValue),::hx::paccDynamic);
HXDLIN( 509)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==HX_("y",79,00,00,00)) ){
HXLINE( 511)							attributes->__SetField(HX_("y",79,00,00,00),::Std_obj::parseInt(argValue),::hx::paccDynamic);
HXDLIN( 511)							goto _hx_goto_7;
            						}
            						/* default */{
            						}
            						_hx_goto_7:;
            					}
            					else {
HXLINE( 515)						if (!(::Reflect_obj::hasField( ::Dynamic(attributes->__Field(HX_("parameters",aa,be,7e,51),::hx::paccDynamic)),parameter1))) {
HXLINE( 517)							::Reflect_obj::setField( ::Dynamic(attributes->__Field(HX_("parameters",aa,be,7e,51),::hx::paccDynamic)),parameter1,argValue);
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(System_obj,_hx___parseArguments,(void))

void System_obj::_hx___registerEntryPoint(::String projectName, ::Dynamic entryPoint){
            	HX_GC_STACKFRAME(&_hx_pos_f2b41f959dca9627_530___registerEntryPoint)
HXLINE( 531)		if (::hx::IsNull( ::lime::_hx_system::System_obj::_hx___applicationEntryPoint )) {
HXLINE( 533)			::lime::_hx_system::System_obj::_hx___applicationEntryPoint =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 536)		::lime::_hx_system::System_obj::_hx___applicationEntryPoint->set(projectName,entryPoint);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(System_obj,_hx___registerEntryPoint,(void))

::String System_obj::get_applicationStorageDirectory(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_586_get_applicationStorageDirectory)
HXLINE( 587)		if (::hx::IsNull( ::lime::_hx_system::System_obj::_hx___applicationStorageDirectory )) {
HXLINE( 589)			::lime::_hx_system::System_obj::_hx___applicationStorageDirectory = ::lime::_hx_system::System_obj::_hx___getDirectory(1);
            		}
HXLINE( 592)		return ::lime::_hx_system::System_obj::_hx___applicationStorageDirectory;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_applicationStorageDirectory,return )

 ::lime::_hx_system::Endian System_obj::get_endianness(){
            	HX_GC_STACKFRAME(&_hx_pos_f2b41f959dca9627_677_get_endianness)
HXLINE( 678)		if (::hx::IsNull( ::lime::_hx_system::System_obj::_hx___endianness )) {
HXLINE( 683)			 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(2);
HXDLIN( 683)			 ::haxe::io::Bytes arrayBuffer = this1;
HXLINE( 684)			 ::Dynamic elements = null();
HXDLIN( 684)			::cpp::VirtualArray array = null();
HXDLIN( 684)			 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 684)			 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 684)			 ::Dynamic len = null();
HXDLIN( 684)			 ::lime::utils::ArrayBufferView this2;
HXDLIN( 684)			if (::hx::IsNotNull( elements )) {
HXLINE( 684)				this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,4);
            			}
            			else {
HXLINE( 684)				if (::hx::IsNotNull( array )) {
HXLINE( 684)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 684)					_this->byteOffset = 0;
HXDLIN( 684)					_this->length = array->get_length();
HXDLIN( 684)					_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 684)					 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 684)					_this->buffer = this1;
HXDLIN( 684)					_this->copyFromArray(array,null());
HXDLIN( 684)					this2 = _this;
            				}
            				else {
HXLINE( 684)					if (::hx::IsNotNull( vector )) {
HXLINE( 684)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 684)						::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 684)						_this->byteOffset = 0;
HXDLIN( 684)						_this->length = array->get_length();
HXDLIN( 684)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 684)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 684)						_this->buffer = this1;
HXDLIN( 684)						_this->copyFromArray(array,null());
HXDLIN( 684)						this2 = _this;
            					}
            					else {
HXLINE( 684)						if (::hx::IsNotNull( view )) {
HXLINE( 684)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 684)							 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 684)							int srcLength = view->length;
HXDLIN( 684)							int srcByteOffset = view->byteOffset;
HXDLIN( 684)							int srcElementSize = view->bytesPerElement;
HXDLIN( 684)							int elementSize = _this->bytesPerElement;
HXDLIN( 684)							if ((view->type == _this->type)) {
HXLINE( 684)								int srcLength = srcData->length;
HXDLIN( 684)								int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 684)								 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 684)								_this->buffer = this1;
HXDLIN( 684)								_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            							}
            							else {
HXLINE( 684)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            							}
HXDLIN( 684)							_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 684)							_this->byteOffset = 0;
HXDLIN( 684)							_this->length = srcLength;
HXDLIN( 684)							this2 = _this;
            						}
            						else {
HXLINE( 684)							if (::hx::IsNotNull( arrayBuffer )) {
HXLINE( 684)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 684)								int in_byteOffset = 0;
HXDLIN( 684)								if ((in_byteOffset < 0)) {
HXLINE( 684)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
HXDLIN( 684)								if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 684)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
HXDLIN( 684)								int bufferByteLength = arrayBuffer->length;
HXDLIN( 684)								int elementSize = _this->bytesPerElement;
HXDLIN( 684)								int newByteLength = bufferByteLength;
HXDLIN( 684)								if (::hx::IsNull( len )) {
HXLINE( 684)									newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 684)									if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 684)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN( 684)									if ((newByteLength < 0)) {
HXLINE( 684)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
            								}
            								else {
HXLINE( 684)									newByteLength = (( (int)(len) ) * _this->bytesPerElement);
HXDLIN( 684)									int newRange = (in_byteOffset + newByteLength);
HXDLIN( 684)									if ((newRange > bufferByteLength)) {
HXLINE( 684)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
            								}
HXDLIN( 684)								_this->buffer = arrayBuffer;
HXDLIN( 684)								_this->byteOffset = in_byteOffset;
HXDLIN( 684)								_this->byteLength = newByteLength;
HXDLIN( 684)								_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 684)								this2 = _this;
            							}
            							else {
HXLINE( 684)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85)));
            							}
            						}
            					}
            				}
            			}
HXDLIN( 684)			 ::lime::utils::ArrayBufferView uint8Array = this2;
HXLINE( 685)			 ::Dynamic elements1 = null();
HXDLIN( 685)			::cpp::VirtualArray array1 = null();
HXDLIN( 685)			 ::openfl::_Vector::IntVector vector1 = null();
HXDLIN( 685)			 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN( 685)			 ::Dynamic len1 = null();
HXDLIN( 685)			 ::lime::utils::ArrayBufferView this3;
HXDLIN( 685)			if (::hx::IsNotNull( elements1 )) {
HXLINE( 685)				this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements1,6);
            			}
            			else {
HXLINE( 685)				if (::hx::IsNotNull( array1 )) {
HXLINE( 685)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 685)					_this->byteOffset = 0;
HXDLIN( 685)					_this->length = array1->get_length();
HXDLIN( 685)					_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 685)					 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 685)					_this->buffer = this1;
HXDLIN( 685)					_this->copyFromArray(array1,null());
HXDLIN( 685)					this3 = _this;
            				}
            				else {
HXLINE( 685)					if (::hx::IsNotNull( vector1 )) {
HXLINE( 685)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 685)						::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector1->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 685)						_this->byteOffset = 0;
HXDLIN( 685)						_this->length = array->get_length();
HXDLIN( 685)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 685)						 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 685)						_this->buffer = this1;
HXDLIN( 685)						_this->copyFromArray(array,null());
HXDLIN( 685)						this3 = _this;
            					}
            					else {
HXLINE( 685)						if (::hx::IsNotNull( view1 )) {
HXLINE( 685)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 685)							 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN( 685)							int srcLength = view1->length;
HXDLIN( 685)							int srcByteOffset = view1->byteOffset;
HXDLIN( 685)							int srcElementSize = view1->bytesPerElement;
HXDLIN( 685)							int elementSize = _this->bytesPerElement;
HXDLIN( 685)							if ((view1->type == _this->type)) {
HXLINE( 685)								int srcLength = srcData->length;
HXDLIN( 685)								int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 685)								 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 685)								_this->buffer = this1;
HXDLIN( 685)								_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            							}
            							else {
HXLINE( 685)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            							}
HXDLIN( 685)							_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 685)							_this->byteOffset = 0;
HXDLIN( 685)							_this->length = srcLength;
HXDLIN( 685)							this3 = _this;
            						}
            						else {
HXLINE( 685)							if (::hx::IsNotNull( arrayBuffer )) {
HXLINE( 685)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 685)								int in_byteOffset = 0;
HXDLIN( 685)								if ((in_byteOffset < 0)) {
HXLINE( 685)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
HXDLIN( 685)								if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 685)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
HXDLIN( 685)								int bufferByteLength = arrayBuffer->length;
HXDLIN( 685)								int elementSize = _this->bytesPerElement;
HXDLIN( 685)								int newByteLength = bufferByteLength;
HXDLIN( 685)								if (::hx::IsNull( len1 )) {
HXLINE( 685)									newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 685)									if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 685)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN( 685)									if ((newByteLength < 0)) {
HXLINE( 685)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
            								}
            								else {
HXLINE( 685)									newByteLength = (( (int)(len1) ) * _this->bytesPerElement);
HXDLIN( 685)									int newRange = (in_byteOffset + newByteLength);
HXDLIN( 685)									if ((newRange > bufferByteLength)) {
HXLINE( 685)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
            								}
HXDLIN( 685)								_this->buffer = arrayBuffer;
HXDLIN( 685)								_this->byteOffset = in_byteOffset;
HXDLIN( 685)								_this->byteLength = newByteLength;
HXDLIN( 685)								_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 685)								this3 = _this;
            							}
            							else {
HXLINE( 685)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5)));
            							}
            						}
            					}
            				}
            			}
HXDLIN( 685)			 ::lime::utils::ArrayBufferView uint16array = this3;
HXLINE( 686)			 ::__hxcpp_memory_set_byte(uint8Array->buffer->b,uint8Array->byteOffset,170);
HXLINE( 687)			 ::__hxcpp_memory_set_byte(uint8Array->buffer->b,(uint8Array->byteOffset + 1),187);
HXLINE( 688)			if ((( ::__hxcpp_memory_get_ui16(uint16array->buffer->b,uint16array->byteOffset) & 65535) == 43707)) {
HXLINE( 688)				::lime::_hx_system::System_obj::_hx___endianness = ::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn();
            			}
            			else {
HXLINE( 690)				::lime::_hx_system::System_obj::_hx___endianness = ::lime::_hx_system::Endian_obj::_hx_LITTLE_ENDIAN_dyn();
            			}
            		}
HXLINE( 694)		return ::lime::_hx_system::System_obj::_hx___endianness;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_endianness,return )

::String System_obj::get_fontsDirectory(){
            	HX_STACKFRAME(&_hx_pos_f2b41f959dca9627_698_get_fontsDirectory)
HXLINE( 699)		if (::hx::IsNull( ::lime::_hx_system::System_obj::_hx___fontsDirectory )) {
HXLINE( 701)			::lime::_hx_system::System_obj::_hx___fontsDirectory = ::lime::_hx_system::System_obj::_hx___getDirectory(4);
            		}
HXLINE( 704)		return ::lime::_hx_system::System_obj::_hx___fontsDirectory;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(System_obj,get_fontsDirectory,return )


System_obj::System_obj()
{
}

bool System_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"exit") ) { outValue = exit_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"openURL") ) { outValue = openURL_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getTimer") ) { outValue = getTimer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"openFile") ) { outValue = openFile_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"endianness") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_endianness() ); return true; } }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__endianness") ) { outValue = ( _hx___endianness ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__directories") ) { outValue = ( _hx___directories ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fontsDirectory") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_fontsDirectory() ); return true; } }
		if (HX_FIELD_EQ(inName,"__getDirectory") ) { outValue = _hx___getDirectory_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_endianness") ) { outValue = get_endianness_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__fontsDirectory") ) { outValue = ( _hx___fontsDirectory ); return true; }
		if (HX_FIELD_EQ(inName,"__parseArguments") ) { outValue = _hx___parseArguments_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_fontsDirectory") ) { outValue = get_fontsDirectory_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__registerEntryPoint") ) { outValue = _hx___registerEntryPoint_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__applicationEntryPoint") ) { outValue = ( _hx___applicationEntryPoint ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"applicationStorageDirectory") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_applicationStorageDirectory() ); return true; } }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__applicationStorageDirectory") ) { outValue = ( _hx___applicationStorageDirectory ); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"get_applicationStorageDirectory") ) { outValue = get_applicationStorageDirectory_dyn(); return true; }
	}
	return false;
}

bool System_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__endianness") ) { _hx___endianness=ioValue.Cast<  ::lime::_hx_system::Endian >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__directories") ) { _hx___directories=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__fontsDirectory") ) { _hx___fontsDirectory=ioValue.Cast< ::String >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__applicationEntryPoint") ) { _hx___applicationEntryPoint=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__applicationStorageDirectory") ) { _hx___applicationStorageDirectory=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *System_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo System_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &System_obj::_hx___applicationEntryPoint,HX_("__applicationEntryPoint",ce,da,ed,08)},
	{::hx::fsString,(void *) &System_obj::_hx___applicationStorageDirectory,HX_("__applicationStorageDirectory",02,dc,05,f4)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &System_obj::_hx___directories,HX_("__directories",eb,9c,a4,a9)},
	{::hx::fsObject /*  ::lime::_hx_system::Endian */ ,(void *) &System_obj::_hx___endianness,HX_("__endianness",d2,7d,66,87)},
	{::hx::fsString,(void *) &System_obj::_hx___fontsDirectory,HX_("__fontsDirectory",29,8d,5a,bc)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void System_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(System_obj::_hx___applicationEntryPoint,"__applicationEntryPoint");
	HX_MARK_MEMBER_NAME(System_obj::_hx___applicationStorageDirectory,"__applicationStorageDirectory");
	HX_MARK_MEMBER_NAME(System_obj::_hx___directories,"__directories");
	HX_MARK_MEMBER_NAME(System_obj::_hx___endianness,"__endianness");
	HX_MARK_MEMBER_NAME(System_obj::_hx___fontsDirectory,"__fontsDirectory");
};

#ifdef HXCPP_VISIT_ALLOCS
static void System_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(System_obj::_hx___applicationEntryPoint,"__applicationEntryPoint");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___applicationStorageDirectory,"__applicationStorageDirectory");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___directories,"__directories");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___endianness,"__endianness");
	HX_VISIT_MEMBER_NAME(System_obj::_hx___fontsDirectory,"__fontsDirectory");
};

#endif

::hx::Class System_obj::__mClass;

static ::String System_obj_sStaticFields[] = {
	HX_("__applicationEntryPoint",ce,da,ed,08),
	HX_("__applicationStorageDirectory",02,dc,05,f4),
	HX_("__directories",eb,9c,a4,a9),
	HX_("__endianness",d2,7d,66,87),
	HX_("__fontsDirectory",29,8d,5a,bc),
	HX_("exit",1e,f7,1d,43),
	HX_("getTimer",4f,cf,0c,70),
	HX_("openFile",66,ab,f7,e4),
	HX_("openURL",c5,bd,35,40),
	HX_("__getDirectory",17,12,5c,40),
	HX_("__parseArguments",c3,fb,f7,66),
	HX_("__registerEntryPoint",e1,0d,46,fe),
	HX_("get_applicationStorageDirectory",b9,70,86,8d),
	HX_("get_endianness",fb,8a,c8,c4),
	HX_("get_fontsDirectory",d2,e2,b4,23),
	::String(null())
};

void System_obj::__register()
{
	System_obj _hx_dummy;
	System_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("lime.system.System",95,83,bd,ac);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &System_obj::__GetStatic;
	__mClass->mSetStaticField = &System_obj::__SetStatic;
	__mClass->mMarkFunc = System_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(System_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< System_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = System_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = System_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = System_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void System_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_f2b41f959dca9627_68_boot)
HXDLIN(  68)		_hx___directories =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace lime
} // end namespace system
