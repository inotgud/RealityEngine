// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_net__HTTPRequest_AbstractHTTPRequest
#include <lime/net/_HTTPRequest/AbstractHTTPRequest.h>
#endif
#ifndef INCLUDED_lime_net__HTTPRequest_Bytes
#include <lime/net/_HTTPRequest_Bytes.h>
#endif
#ifndef INCLUDED_lime_net__HTTPRequest_lime_text_Font
#include <lime/net/_HTTPRequest_lime_text_Font.h>
#endif
#ifndef INCLUDED_lime_net__IHTTPRequest
#include <lime/net/_IHTTPRequest.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_54_new,"lime.text.Font","new",0x97494f29,"lime.text.Font.new","lime/text/Font.hx",54,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_419___copyFrom,"lime.text.Font","__copyFrom",0x8a0b5b36,"lime.text.Font.__copyFrom","lime/text/Font.hx",419,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_443___fromBytes,"lime.text.Font","__fromBytes",0x257c2b4a,"lime.text.Font.__fromBytes","lime/text/Font.hx",443,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_456___fromFile,"lime.text.Font","__fromFile",0x6331ec7d,"lime.text.Font.__fromFile","lime/text/Font.hx",456,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_469___initializeSource,"lime.text.Font","__initializeSource",0xb57a50c2,"lime.text.Font.__initializeSource","lime/text/Font.hx",469,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_593___setSize,"lime.text.Font","__setSize",0x86a86dec,"lime.text.Font.__setSize","lime/text/Font.hx",593,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_121_fromBytes,"lime.text.Font","fromBytes",0x65a32e2a,"lime.text.Font.fromBytes","lime/text/Font.hx",121,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_135_fromFile,"lime.text.Font","fromFile",0x07a4e59d,"lime.text.Font.fromFile","lime/text/Font.hx",135,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_158_loadFromFile,"lime.text.Font","loadFromFile",0x5ed36963,"lime.text.Font.loadFromFile","lime/text/Font.hx",158,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_154_loadFromFile,"lime.text.Font","loadFromFile",0x5ed36963,"lime.text.Font.loadFromFile","lime/text/Font.hx",154,0x3be57807)
namespace lime{
namespace text{

void Font_obj::__construct(::String name){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_54_new)
HXLINE(  55)		if (::hx::IsNotNull( name )) {
HXLINE(  57)			this->name = name;
            		}
HXLINE(  60)		if (!(this->_hx___init)) {
HXLINE(  62)			this->ascender = 0;
HXLINE(  66)			this->descender = 0;
HXLINE(  70)			this->height = 0;
HXLINE(  74)			this->numGlyphs = 0;
HXLINE(  78)			this->underlinePosition = 0;
HXLINE(  82)			this->underlineThickness = 0;
HXLINE(  86)			this->unitsPerEM = 0;
HXLINE(  88)			if (::hx::IsNotNull( this->_hx___fontID )) {
HXLINE(  90)				if (::lime::utils::Assets_obj::isLocal(this->_hx___fontID,null(),null())) {
HXLINE(  92)					this->_hx___fromBytes(::lime::utils::Assets_obj::getBytes(this->_hx___fontID));
            				}
            			}
            			else {
HXLINE(  95)				if (::hx::IsNotNull( this->_hx___fontPath )) {
HXLINE(  97)					this->_hx___fromFile(this->_hx___fontPath);
            				}
            			}
            		}
            	}

Dynamic Font_obj::__CreateEmpty() { return new Font_obj; }

void *Font_obj::_hx_vtable = 0;

Dynamic Font_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Font_obj > _hx_result = new Font_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Font_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x40cee131;
}

void Font_obj::_hx___copyFrom( ::lime::text::Font other){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_419___copyFrom)
HXDLIN( 419)		if (::hx::IsNotNull( other )) {
HXLINE( 421)			this->ascender = other->ascender;
HXLINE( 422)			this->descender = other->descender;
HXLINE( 423)			this->height = other->height;
HXLINE( 424)			this->name = other->name;
HXLINE( 425)			this->numGlyphs = other->numGlyphs;
HXLINE( 426)			this->src = other->src;
HXLINE( 427)			this->underlinePosition = other->underlinePosition;
HXLINE( 428)			this->underlineThickness = other->underlineThickness;
HXLINE( 429)			this->unitsPerEM = other->unitsPerEM;
HXLINE( 431)			this->_hx___fontID = other->_hx___fontID;
HXLINE( 432)			this->_hx___fontPath = other->_hx___fontPath;
HXLINE( 435)			this->_hx___fontPathWithoutDirectory = other->_hx___fontPathWithoutDirectory;
HXLINE( 438)			this->_hx___init = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___copyFrom,(void))

void Font_obj::_hx___fromBytes( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_443___fromBytes)
HXLINE( 444)		this->_hx___fontPath = null();
HXLINE( 447)		this->_hx___fontPathWithoutDirectory = null();
HXLINE( 449)		this->src = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_font_load_bytes(::hx::DynamicPtr(bytes))) );
HXLINE( 451)		this->_hx___initializeSource();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___fromBytes,(void))

void Font_obj::_hx___fromFile(::String path){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_456___fromFile)
HXLINE( 457)		this->_hx___fontPath = path;
HXLINE( 460)		this->_hx___fontPathWithoutDirectory = ::haxe::io::Path_obj::withoutDirectory(this->_hx___fontPath);
HXLINE( 462)		this->src = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_font_load_file(::hx::DynamicPtr(this->_hx___fontPath))) );
HXLINE( 464)		this->_hx___initializeSource();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___fromFile,(void))

void Font_obj::_hx___initializeSource(){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_469___initializeSource)
HXLINE( 471)		if (::hx::IsNotNull( this->src )) {
HXLINE( 473)			if (::hx::IsNull( this->name )) {
HXLINE( 478)				this->name = ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_family_name(::hx::DynamicPtr(this->src))) )) );
            			}
HXLINE( 482)			this->ascender = ::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_ascender(::hx::DynamicPtr(this->src));
HXLINE( 483)			this->descender = ::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_descender(::hx::DynamicPtr(this->src));
HXLINE( 484)			this->height = ::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_height(::hx::DynamicPtr(this->src));
HXLINE( 485)			this->numGlyphs = ::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_num_glyphs(::hx::DynamicPtr(this->src));
HXLINE( 486)			this->underlinePosition = ::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_underline_position(::hx::DynamicPtr(this->src));
HXLINE( 487)			this->underlineThickness = ::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_underline_thickness(::hx::DynamicPtr(this->src));
HXLINE( 488)			this->unitsPerEM = ::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_units_per_em(::hx::DynamicPtr(this->src));
            		}
HXLINE( 492)		this->_hx___init = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,_hx___initializeSource,(void))

void Font_obj::_hx___setSize(int size){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_593___setSize)
HXDLIN( 593)		::lime::_internal::backend::native::NativeCFFI_obj::lime_font_set_size(::hx::DynamicPtr(this->src),size);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___setSize,(void))

 ::lime::text::Font Font_obj::fromBytes( ::haxe::io::Bytes bytes){
            	HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_121_fromBytes)
HXLINE( 122)		if (::hx::IsNull( bytes )) {
HXLINE( 122)			return null();
            		}
HXLINE( 124)		 ::lime::text::Font font =  ::lime::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE( 125)		font->_hx___fromBytes(bytes);
HXLINE( 128)		if (::hx::IsNotNull( font->src )) {
HXLINE( 128)			return font;
            		}
            		else {
HXLINE( 128)			return null();
            		}
HXDLIN( 128)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,fromBytes,return )

 ::lime::text::Font Font_obj::fromFile(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_135_fromFile)
HXLINE( 136)		if (::hx::IsNull( path )) {
HXLINE( 136)			return null();
            		}
HXLINE( 138)		 ::lime::text::Font font =  ::lime::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE( 139)		font->_hx___fromFile(path);
HXLINE( 142)		if (::hx::IsNotNull( font->src )) {
HXLINE( 142)			return font;
            		}
            		else {
HXLINE( 142)			return null();
            		}
HXDLIN( 142)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,fromFile,return )

 ::lime::app::Future Font_obj::loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::text::Font font){
            			HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_158_loadFromFile)
HXLINE( 158)			if (::hx::IsNotNull( font )) {
HXLINE( 160)				return ::lime::app::Future_obj::withValue(font);
            			}
            			else {
HXLINE( 164)				return ::lime::app::Future_obj::withError(HX_("",00,00,00,00));
            			}
HXLINE( 158)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_154_loadFromFile)
HXLINE( 155)		 ::lime::net::_HTTPRequest_lime_text_Font request =  ::lime::net::_HTTPRequest_lime_text_Font_obj::__alloc( HX_CTX ,null());
HXLINE( 156)		return request->load(path)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,loadFromFile,return )


::hx::ObjectPtr< Font_obj > Font_obj::__new(::String name) {
	::hx::ObjectPtr< Font_obj > __this = new Font_obj();
	__this->__construct(name);
	return __this;
}

::hx::ObjectPtr< Font_obj > Font_obj::__alloc(::hx::Ctx *_hx_ctx,::String name) {
	Font_obj *__this = (Font_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Font_obj), true, "lime.text.Font"));
	*(void **)__this = Font_obj::_hx_vtable;
	__this->__construct(name);
	return __this;
}

Font_obj::Font_obj()
{
}

void Font_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Font);
	HX_MARK_MEMBER_NAME(ascender,"ascender");
	HX_MARK_MEMBER_NAME(descender,"descender");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(numGlyphs,"numGlyphs");
	HX_MARK_MEMBER_NAME(src,"src");
	HX_MARK_MEMBER_NAME(underlinePosition,"underlinePosition");
	HX_MARK_MEMBER_NAME(underlineThickness,"underlineThickness");
	HX_MARK_MEMBER_NAME(unitsPerEM,"unitsPerEM");
	HX_MARK_MEMBER_NAME(_hx___fontID,"__fontID");
	HX_MARK_MEMBER_NAME(_hx___fontPath,"__fontPath");
	HX_MARK_MEMBER_NAME(_hx___fontPathWithoutDirectory,"__fontPathWithoutDirectory");
	HX_MARK_MEMBER_NAME(_hx___init,"__init");
	HX_MARK_END_CLASS();
}

void Font_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ascender,"ascender");
	HX_VISIT_MEMBER_NAME(descender,"descender");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(numGlyphs,"numGlyphs");
	HX_VISIT_MEMBER_NAME(src,"src");
	HX_VISIT_MEMBER_NAME(underlinePosition,"underlinePosition");
	HX_VISIT_MEMBER_NAME(underlineThickness,"underlineThickness");
	HX_VISIT_MEMBER_NAME(unitsPerEM,"unitsPerEM");
	HX_VISIT_MEMBER_NAME(_hx___fontID,"__fontID");
	HX_VISIT_MEMBER_NAME(_hx___fontPath,"__fontPath");
	HX_VISIT_MEMBER_NAME(_hx___fontPathWithoutDirectory,"__fontPathWithoutDirectory");
	HX_VISIT_MEMBER_NAME(_hx___init,"__init");
}

::hx::Val Font_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { return ::hx::Val( src ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__init") ) { return ::hx::Val( _hx___init ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ascender") ) { return ::hx::Val( ascender ); }
		if (HX_FIELD_EQ(inName,"__fontID") ) { return ::hx::Val( _hx___fontID ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"descender") ) { return ::hx::Val( descender ); }
		if (HX_FIELD_EQ(inName,"numGlyphs") ) { return ::hx::Val( numGlyphs ); }
		if (HX_FIELD_EQ(inName,"__setSize") ) { return ::hx::Val( _hx___setSize_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"unitsPerEM") ) { return ::hx::Val( unitsPerEM ); }
		if (HX_FIELD_EQ(inName,"__fontPath") ) { return ::hx::Val( _hx___fontPath ); }
		if (HX_FIELD_EQ(inName,"__copyFrom") ) { return ::hx::Val( _hx___copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return ::hx::Val( _hx___fromFile_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return ::hx::Val( _hx___fromBytes_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"underlinePosition") ) { return ::hx::Val( underlinePosition ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"underlineThickness") ) { return ::hx::Val( underlineThickness ); }
		if (HX_FIELD_EQ(inName,"__initializeSource") ) { return ::hx::Val( _hx___initializeSource_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__fontPathWithoutDirectory") ) { return ::hx::Val( _hx___fontPathWithoutDirectory ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Font_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadFromFile") ) { outValue = loadFromFile_dyn(); return true; }
	}
	return false;
}

::hx::Val Font_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { src=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__init") ) { _hx___init=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ascender") ) { ascender=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fontID") ) { _hx___fontID=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"descender") ) { descender=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numGlyphs") ) { numGlyphs=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"unitsPerEM") ) { unitsPerEM=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fontPath") ) { _hx___fontPath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"underlinePosition") ) { underlinePosition=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"underlineThickness") ) { underlineThickness=inValue.Cast< int >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__fontPathWithoutDirectory") ) { _hx___fontPathWithoutDirectory=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Font_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("ascender",37,98,10,60));
	outFields->push(HX_("descender",17,65,27,ab));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("numGlyphs",2d,44,5a,5f));
	outFields->push(HX_("src",e4,a6,57,00));
	outFields->push(HX_("underlinePosition",d5,5d,6b,96));
	outFields->push(HX_("underlineThickness",c8,ba,9b,91));
	outFields->push(HX_("unitsPerEM",96,b6,60,21));
	outFields->push(HX_("__fontID",8a,5a,1e,a3));
	outFields->push(HX_("__fontPath",34,76,08,70));
	outFields->push(HX_("__fontPathWithoutDirectory",59,11,28,91));
	outFields->push(HX_("__init",30,9e,b3,f4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Font_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Font_obj,ascender),HX_("ascender",37,98,10,60)},
	{::hx::fsInt,(int)offsetof(Font_obj,descender),HX_("descender",17,65,27,ab)},
	{::hx::fsInt,(int)offsetof(Font_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsString,(int)offsetof(Font_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsInt,(int)offsetof(Font_obj,numGlyphs),HX_("numGlyphs",2d,44,5a,5f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Font_obj,src),HX_("src",e4,a6,57,00)},
	{::hx::fsInt,(int)offsetof(Font_obj,underlinePosition),HX_("underlinePosition",d5,5d,6b,96)},
	{::hx::fsInt,(int)offsetof(Font_obj,underlineThickness),HX_("underlineThickness",c8,ba,9b,91)},
	{::hx::fsInt,(int)offsetof(Font_obj,unitsPerEM),HX_("unitsPerEM",96,b6,60,21)},
	{::hx::fsString,(int)offsetof(Font_obj,_hx___fontID),HX_("__fontID",8a,5a,1e,a3)},
	{::hx::fsString,(int)offsetof(Font_obj,_hx___fontPath),HX_("__fontPath",34,76,08,70)},
	{::hx::fsString,(int)offsetof(Font_obj,_hx___fontPathWithoutDirectory),HX_("__fontPathWithoutDirectory",59,11,28,91)},
	{::hx::fsBool,(int)offsetof(Font_obj,_hx___init),HX_("__init",30,9e,b3,f4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Font_obj_sStaticStorageInfo = 0;
#endif

static ::String Font_obj_sMemberFields[] = {
	HX_("ascender",37,98,10,60),
	HX_("descender",17,65,27,ab),
	HX_("height",e7,07,4c,02),
	HX_("name",4b,72,ff,48),
	HX_("numGlyphs",2d,44,5a,5f),
	HX_("src",e4,a6,57,00),
	HX_("underlinePosition",d5,5d,6b,96),
	HX_("underlineThickness",c8,ba,9b,91),
	HX_("unitsPerEM",96,b6,60,21),
	HX_("__fontID",8a,5a,1e,a3),
	HX_("__fontPath",34,76,08,70),
	HX_("__fontPathWithoutDirectory",59,11,28,91),
	HX_("__init",30,9e,b3,f4),
	HX_("__copyFrom",df,7e,99,6b),
	HX_("__fromBytes",81,3b,4d,a0),
	HX_("__fromFile",26,10,c0,44),
	HX_("__initializeSource",6b,c5,c1,17),
	HX_("__setSize",63,32,26,93),
	::String(null()) };

::hx::Class Font_obj::__mClass;

static ::String Font_obj_sStaticFields[] = {
	HX_("fromBytes",a1,f2,20,72),
	HX_("fromFile",06,9d,87,a1),
	HX_("loadFromFile",4c,89,f0,5a),
	::String(null())
};

void Font_obj::__register()
{
	Font_obj _hx_dummy;
	Font_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("lime.text.Font",b7,86,7e,d1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Font_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Font_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Font_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Font_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Font_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Font_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace text
