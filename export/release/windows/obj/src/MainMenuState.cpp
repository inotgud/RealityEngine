// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_CreditsState
#include <CreditsState.h>
#endif
#ifndef INCLUDED_CustomState
#include <CustomState.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_EditorsMain
#include <EditorsMain.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_KeyboardScheme
#include <KeyboardScheme.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MenuItem
#include <MenuItem.h>
#endif
#ifndef INCLUDED_ModsMenuState
#include <ModsMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_QuestsState
#include <QuestsState.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrail
#include <flixel/addons/effects/FlxTrail.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrailArea
#include <flixel/addons/effects/FlxTrailArea.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxEffectSprite
#include <flixel/addons/effects/chainable/FlxEffectSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveEffect
#include <flixel/addons/effects/chainable/FlxWaveEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_IFlxEffect
#include <flixel/addons/effects/chainable/IFlxEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_atlas_FlxAtlas
#include <flixel/graphics/atlas/FlxAtlas.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_Interp
#include <hscript/Interp.h>
#endif
#ifndef INCLUDED_hscript_Parser
#include <hscript/Parser.h>
#endif
#ifndef INCLUDED_miniGames_MiniGamesState
#include <miniGames/MiniGamesState.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_options_MenuOptions
#include <options/MenuOptions.h>
#endif
#ifndef INCLUDED_realityEngine_EngineMain
#include <realityEngine/EngineMain.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_50_new,"MainMenuState","new",0x83a7c9cb,"MainMenuState.new","MainMenuState.hx",50,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_246_create,"MainMenuState","create",0x6b76e271,"MainMenuState.create","MainMenuState.hx",246,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_249_create,"MainMenuState","create",0x6b76e271,"MainMenuState.create","MainMenuState.hx",249,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_105_create,"MainMenuState","create",0x6b76e271,"MainMenuState.create","MainMenuState.hx",105,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_366_OnClickButton,"MainMenuState","OnClickButton",0xf0183286,"MainMenuState.OnClickButton","MainMenuState.hx",366,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_619_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",619,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_380_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",380,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_577_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",577,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_583_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",583,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_593_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",593,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_600_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",600,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_635_openKeybinds,"MainMenuState","openKeybinds",0x6a5ee136,"MainMenuState.openKeybinds","MainMenuState.hx",635,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_679_openConsole,"MainMenuState","openConsole",0x3c735918,"MainMenuState.openConsole","MainMenuState.hx",679,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_652_openConsole,"MainMenuState","openConsole",0x3c735918,"MainMenuState.openConsole","MainMenuState.hx",652,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_725_useCommand,"MainMenuState","useCommand",0x5a436db9,"MainMenuState.useCommand","MainMenuState.hx",725,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_728_useCommand,"MainMenuState","useCommand",0x5a436db9,"MainMenuState.useCommand","MainMenuState.hx",728,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_684_useCommand,"MainMenuState","useCommand",0x5a436db9,"MainMenuState.useCommand","MainMenuState.hx",684,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_733_addNewMenu,"MainMenuState","addNewMenu",0x35d2f7f3,"MainMenuState.addNewMenu","MainMenuState.hx",733,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_737_goToState,"MainMenuState","goToState",0xcf6f00f9,"MainMenuState.goToState","MainMenuState.hx",737,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_789_changeItem,"MainMenuState","changeItem",0xf62bd498,"MainMenuState.changeItem","MainMenuState.hx",789,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_777_changeItem,"MainMenuState","changeItem",0xf62bd498,"MainMenuState.changeItem","MainMenuState.hx",777,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_814_callOnHscript,"MainMenuState","callOnHscript",0x422b15c1,"MainMenuState.callOnHscript","MainMenuState.hx",814,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_838_callOnHscript2,"MainMenuState","callOnHscript2",0xa387f351,"MainMenuState.callOnHscript2","MainMenuState.hx",838,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_54_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",54,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_55_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",55,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_68_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",68,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_88_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",88,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_92_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",92,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_94_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",94,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_95_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",95,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_102_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",102,0x0e5db805)

void MainMenuState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_50_new)
HXLINE( 632)		this->eventNa =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,350,665,450,HX_("Console",37,13,27,e6),50,null(),null(),null());
HXLINE( 378)		this->selec =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1180,(::flixel::FlxG_obj::height - 20),0,HX_("",00,00,00,00),12,null());
HXLINE( 377)		this->selectedSomethin = false;
HXLINE( 101)		this->isConsole = false;
HXLINE(  74)		::String library = null();
HXDLIN(  74)		this->optionShit = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/MainMenuItems",63,18,c8,9e) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  71)		this->interp2 =  ::hscript::Interp_obj::__alloc( HX_CTX );
HXLINE(  60)		this->its = true;
HXLINE(  58)		this->updateAvailable = false;
HXLINE(  57)		this->curSelected = 0;
HXLINE(  50)		super::__construct(TransIn,TransOut);
            	}

Dynamic MainMenuState_obj::__CreateEmpty() { return new MainMenuState_obj; }

void *MainMenuState_obj::_hx_vtable = 0;

Dynamic MainMenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MainMenuState_obj > _hx_result = new MainMenuState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MainMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x6915cded || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void MainMenuState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(Float elapsed){
            			HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_246_create)
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_249_create)
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_105_create)
HXLINE( 107)		::MainMenuState_obj::hmmmmmmmmmmmmmmmm = ::sys::io::File_obj::getContent(HX_("assets/data/language.txt",d3,ed,d9,4b));
HXLINE( 108)		::MainMenuState_obj::language = ::MainMenuState_obj::hmmmmmmmmmmmmmmmm;
HXLINE( 114)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("redesignedmenustyle",62,d6,f1,d5),::hx::paccDynamic),HX_("On",3f,45,00,00) )) {
HXLINE( 116)			::MainMenuState_obj::redesignedmenustyle = true;
            		}
            		else {
HXLINE( 119)			::MainMenuState_obj::redesignedmenustyle = false;
            		}
HXLINE( 122)		this->clean();
HXLINE( 123)		::PlayState_obj::inDaPlay = false;
HXLINE( 124)		::realityEngine::EngineMain_obj::discordClient(HX_("In the Menus",0a,c1,ad,c6));
HXLINE( 126)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("menuMusic",86,3a,33,ab),::hx::paccDynamic) )) {
HXLINE( 128)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 128)			::String library = null();
HXDLIN( 128)			_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),0,null(),null());
            		}
            		else {
HXLINE( 131)			if (::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE( 133)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 133)				::String library = null();
HXDLIN( 133)				_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("menuMusic",86,3a,33,ab),::hx::paccDynamic)) )) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
            			}
            		}
HXLINE( 138)		this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE( 139)		this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE( 141)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE( 146)		Float yScroll = ::Math_obj::max((((Float)0.25) - (((Float)0.05) * ( (Float)((this->optionShit->length - 4)) ))),((Float)0.1));
HXLINE( 147)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 147)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("menuDesat",26,91,04,72),null()),null(),null(),null(),null(),null());
HXLINE( 148)		bg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 149)		bg1->scrollFactor->set_y(((Float)0.10));
HXLINE( 150)		bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)1.1))),null());
HXLINE( 151)		bg1->updateHitbox();
HXLINE( 152)		{
HXLINE( 152)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 152)			bool _hx_tmp;
HXDLIN( 152)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 152)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 152)					_hx_tmp = false;
            				}
            			}
HXDLIN( 152)			if (_hx_tmp) {
HXLINE( 152)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 152)				bg1->set_x(((( (Float)(_hx_tmp) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 152)			bool _hx_tmp1;
HXDLIN( 152)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 152)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 152)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 152)			if (_hx_tmp1) {
HXLINE( 152)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 152)				bg1->set_y(((( (Float)(_hx_tmp) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 153)		bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 154)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("coloredmenubg",26,f7,c7,fd),::hx::paccDynamic),HX_("On",3f,45,00,00) )) {
HXLINE( 156)			bg1->set_color(::flixel::FlxG_obj::random->color(null(),null(),null(),null()));
            		}
            		else {
HXLINE( 159)			bg1->loadGraphic(::Paths_obj::loadImage(HX_("menuBG",24,65,6d,05),null()),null(),null(),null(),null(),null());
HXLINE( 160)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("mode",63,d3,60,48),::hx::paccDynamic),HX_("dark",76,54,63,42) )) {
HXLINE( 162)				bg1->loadGraphic(::Paths_obj::loadImage(HX_("menuDesat",26,91,04,72),null()),null(),null(),null(),null(),null());
HXLINE( 163)				bg1->set_color(2368548);
            			}
            		}
HXLINE( 166)		this->add(bg1);
HXLINE( 168)		if ((::MainMenuState_obj::redesignedmenustyle == true)) {
HXLINE( 170)			 ::flixel::FlxSprite redesignedbg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 170)			 ::flixel::FlxSprite redesignedbg1 = redesignedbg->loadGraphic(::Paths_obj::loadImage(HX_("no/ohno",68,51,59,99),null()),null(),null(),null(),null(),null());
HXLINE( 171)			redesignedbg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 172)			redesignedbg1->scrollFactor->set_y(((Float)0.10));
HXLINE( 173)			redesignedbg1->setGraphicSize(::Std_obj::_hx_int((redesignedbg1->get_width() * ((Float)1.1))),null());
HXLINE( 174)			redesignedbg1->updateHitbox();
HXLINE( 175)			{
HXLINE( 175)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 175)				bool _hx_tmp;
HXDLIN( 175)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE( 175)						_hx_tmp = true;
            					}
            					break;
            					default:{
HXLINE( 175)						_hx_tmp = false;
            					}
            				}
HXDLIN( 175)				if (_hx_tmp) {
HXLINE( 175)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 175)					redesignedbg1->set_x(((( (Float)(_hx_tmp) ) - redesignedbg1->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 175)				bool _hx_tmp1;
HXDLIN( 175)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE( 175)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE( 175)						_hx_tmp1 = false;
            					}
            				}
HXDLIN( 175)				if (_hx_tmp1) {
HXLINE( 175)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 175)					redesignedbg1->set_y(((( (Float)(_hx_tmp) ) - redesignedbg1->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 176)			redesignedbg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 177)			this->add(redesignedbg1);
            		}
HXLINE( 180)		this->camFollowPos =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 181)		this->add(this->camFollowPos);
HXLINE( 184)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 185)		this->add(this->camFollow);
HXLINE( 189)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-80,null(),null());
HXDLIN( 189)		this->magenta = _hx_tmp2->loadGraphic(::Paths_obj::loadImage(HX_("menuDesat",26,91,04,72),null()),null(),null(),null(),null(),null());
HXLINE( 190)		this->magenta->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 191)		this->magenta->scrollFactor->set_y(((Float)0.10));
HXLINE( 192)		 ::flixel::FlxSprite _hx_tmp3 = this->magenta;
HXDLIN( 192)		_hx_tmp3->setGraphicSize(::Std_obj::_hx_int((this->magenta->get_width() * ((Float)1.1))),null());
HXLINE( 193)		this->magenta->updateHitbox();
HXLINE( 194)		{
HXLINE( 194)			 ::flixel::FlxSprite _this = this->magenta;
HXDLIN( 194)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 194)			bool _hx_tmp4;
HXDLIN( 194)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 194)					_hx_tmp4 = true;
            				}
            				break;
            				default:{
HXLINE( 194)					_hx_tmp4 = false;
            				}
            			}
HXDLIN( 194)			if (_hx_tmp4) {
HXLINE( 194)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 194)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 194)			bool _hx_tmp5;
HXDLIN( 194)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 194)					_hx_tmp5 = true;
            				}
            				break;
            				default:{
HXLINE( 194)					_hx_tmp5 = false;
            				}
            			}
HXDLIN( 194)			if (_hx_tmp5) {
HXLINE( 194)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 194)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 195)		this->magenta->set_visible(false);
HXLINE( 196)		this->magenta->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 197)		this->magenta->set_color(-167525);
HXLINE( 198)		this->add(this->magenta);
HXLINE( 201)		this->menuItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 202)		this->add(this->menuItems);
HXLINE( 204)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("readmehm",b3,ee,77,85),::hx::paccDynamic),HX_("Off",4f,4b,3c,00) )) {
HXLINE( 206)			::MainMenuState_obj::Editorsnull = true;
            		}
HXLINE( 208)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 210)		::String expr = ::sys::io::File_obj::getContent(HX_("assets/custom/custom_states/MainMenuState.hx",f6,ea,cd,15));
HXLINE( 212)		 ::hscript::Parser parser =  ::hscript::Parser_obj::__alloc( HX_CTX );
HXLINE( 213)		::MainMenuState_obj::interp =  ::hscript::Interp_obj::__alloc( HX_CTX );
HXLINE( 214)		 ::hscript::Expr ast = parser->parseString(expr,null());
HXLINE( 215)		::MainMenuState_obj::interp->variables->set(HX_("add",21,f2,49,00),this->add_dyn());
HXLINE( 216)		::MainMenuState_obj::interp->variables->set(HX_("remove",44,9c,88,04),this->remove_dyn());
HXLINE( 218)		::MainMenuState_obj::interp->variables->set(HX_("DiscordClient",f7,d0,c5,2b),::hx::ClassOf< ::DiscordClient >());
HXLINE( 220)		::MainMenuState_obj::interp->variables->set(HX_("FlxG",b5,4b,97,2e),::hx::ClassOf< ::flixel::FlxG >());
HXLINE( 221)		::MainMenuState_obj::interp->variables->set(HX_("CustomState",80,74,7a,fd),::hx::ClassOf< ::CustomState >());
HXLINE( 222)		::MainMenuState_obj::interp->variables->set(HX_("MenuItem",72,ae,e0,25),::hx::ClassOf< ::MenuItem >());
HXLINE( 223)		::MainMenuState_obj::interp->variables->set(HX_("Character",89,bb,a4,e3),::hx::ClassOf< ::Character >());
HXLINE( 224)		::MainMenuState_obj::interp->variables->set(HX_("FlxGame",64,2d,b7,d4),::hx::ClassOf< ::flixel::FlxGame >());
HXLINE( 225)		::MainMenuState_obj::interp->variables->set(HX_("FlxObject",b1,78,2e,97),::hx::ClassOf< ::flixel::FlxObject >());
HXLINE( 226)		::MainMenuState_obj::interp->variables->set(HX_("FlxSprite",f7,d5,84,45),::hx::ClassOf< ::flixel::FlxSprite >());
HXLINE( 227)		::MainMenuState_obj::interp->variables->set(HX_("FlxState",5f,80,e5,40),::hx::ClassOf< ::flixel::FlxState >());
HXLINE( 228)		::MainMenuState_obj::interp->variables->set(HX_("FlxSubState",e3,a6,41,10),::hx::ClassOf< ::flixel::FlxSubState >());
HXLINE( 229)		::MainMenuState_obj::interp->variables->set(HX_("FlxGridOverlay",38,52,48,2c),::hx::ClassOf< ::flixel::addons::display::FlxGridOverlay >());
HXLINE( 230)		::MainMenuState_obj::interp->variables->set(HX_("FlxTrail",14,9e,f9,d2),::hx::ClassOf< ::flixel::addons::effects::FlxTrail >());
HXLINE( 231)		::MainMenuState_obj::interp->variables->set(HX_("FlxTrailArea",c1,ef,71,42),::hx::ClassOf< ::flixel::addons::effects::FlxTrailArea >());
HXLINE( 232)		::MainMenuState_obj::interp->variables->set(HX_("FlxEffectSprite",e8,68,af,66),::hx::ClassOf< ::flixel::addons::effects::chainable::FlxEffectSprite >());
HXLINE( 233)		::MainMenuState_obj::interp->variables->set(HX_("FlxWaveEffect",1c,a0,de,d8),::hx::ClassOf< ::flixel::addons::effects::chainable::FlxWaveEffect >());
HXLINE( 234)		::MainMenuState_obj::interp->variables->set(HX_("FlxTransitionableState",b0,b8,2b,5f),::hx::ClassOf< ::flixel::addons::transition::FlxTransitionableState >());
HXLINE( 235)		::MainMenuState_obj::interp->variables->set(HX_("FlxAtlas",99,57,b7,e3),::hx::ClassOf< ::flixel::graphics::atlas::FlxAtlas >());
HXLINE( 236)		::MainMenuState_obj::interp->variables->set(HX_("FlxAtlasFrames",1f,b4,c0,8d),::hx::ClassOf< ::flixel::graphics::frames::FlxAtlasFrames >());
HXLINE( 237)		::MainMenuState_obj::interp->variables->set(HX_("FlxMath",3a,7b,ae,d8),::hx::ClassOf< ::flixel::math::FlxMath >());
HXLINE( 238)		::MainMenuState_obj::interp->variables->set(HX_("FlxPoint",9e,be,69,83),::hx::ClassOf< ::flixel::math::FlxPoint >());
HXLINE( 239)		::MainMenuState_obj::interp->variables->set(HX_("FlxRect",96,86,ff,db),::hx::ClassOf< ::flixel::math::FlxRect >());
HXLINE( 240)		::MainMenuState_obj::interp->variables->set(HX_("MusicBeatState",76,df,84,5d),::hx::ClassOf< ::MusicBeatState >());
HXLINE( 241)		::MainMenuState_obj::interp->variables->set(HX_("FlxSound",1d,97,a6,3d),::hx::ClassOf< ::flixel::_hx_system::FlxSound >());
HXLINE( 242)		::MainMenuState_obj::interp->variables->set(HX_("FlxText",1f,06,52,dd),::hx::ClassOf< ::flixel::text::FlxText >());
HXLINE( 243)		::MainMenuState_obj::interp->variables->set(HX_("FlxEase",60,c5,64,d3),::hx::ClassOf< ::flixel::tweens::FlxEase >());
HXLINE( 244)		::MainMenuState_obj::interp->variables->set(HX_("FlxTween",b9,b4,4a,d6),::hx::ClassOf< ::flixel::tweens::FlxTween >());
HXLINE( 245)		::MainMenuState_obj::interp->variables->set(HX_("update",09,86,05,87), ::Dynamic(new _hx_Closure_0()));
HXLINE( 248)		::MainMenuState_obj::interp->variables->set(HX_("create",fc,66,0f,7c), ::Dynamic(new _hx_Closure_1()));
HXLINE( 254)		Float scale = ( (Float)(1) );
HXLINE( 256)		{
HXLINE( 256)			int _g = 0;
HXDLIN( 256)			int _g1 = this->optionShit->length;
HXDLIN( 256)			while((_g < _g1)){
HXLINE( 256)				_g = (_g + 1);
HXDLIN( 256)				int i = (_g - 1);
HXLINE( 258)				Float offset = (( (Float)(108) ) - ((::Math_obj::max(( (Float)(this->optionShit->length) ),( (Float)(4) )) - ( (Float)(4) )) * ( (Float)(80) )));
HXLINE( 259)				 ::flixel::FlxSprite menuItem =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,((i * 140) + offset),null());
HXLINE( 260)				menuItem->scale->set_x(scale);
HXLINE( 261)				menuItem->scale->set_y(scale);
HXLINE( 262)				{
HXLINE( 262)					 ::flixel::FlxSprite _g1 = menuItem;
HXDLIN( 262)					_g1->set_x((_g1->x + 250));
            				}
HXLINE( 263)				menuItem->set_frames(::Paths_obj::getSparrowAtlas((HX_("mainmenu/menu_",a9,7b,4b,27) + this->optionShit->__get(i)),null(),null()));
HXLINE( 264)				menuItem->animation->addByPrefix(HX_("idle",14,a7,b3,45),(this->optionShit->__get(i) + HX_(" basic",8e,b6,25,79)),24,null(),null(),null());
HXLINE( 265)				menuItem->animation->addByPrefix(HX_("selected",5b,2a,6d,b1),(this->optionShit->__get(i) + HX_(" white",89,d6,28,95)),24,null(),null(),null());
HXLINE( 266)				menuItem->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 267)				menuItem->ID = i;
HXLINE( 268)				{
HXLINE( 268)					 ::flixel::FlxSprite _g2 = menuItem;
HXDLIN( 268)					_g2->set_x((_g2->x + -100));
            				}
HXLINE( 270)				this->menuItems->add(menuItem).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 271)				Float scr = (( (Float)((this->optionShit->length - 4)) ) * ((Float)0.135));
HXLINE( 272)				if ((this->optionShit->length < 6)) {
HXLINE( 272)					scr = ( (Float)(0) );
            				}
HXLINE( 273)				menuItem->scrollFactor->set(0,scr);
HXLINE( 274)				menuItem->set_antialiasing(true);
HXLINE( 275)				::MainMenuState_obj::interp->variables->set(HX_("items",00,ac,0c,c2),menuItem);
HXLINE( 277)				menuItem->updateHitbox();
            			}
            		}
HXLINE( 280)		::flixel::FlxG_obj::camera->follow(this->camFollowPos,null(),1);
HXLINE( 282)		::MainMenuState_obj::firstStart = false;
HXLINE( 284)		::flixel::FlxG_obj::camera->follow(this->camFollowPos,null(),(((Float)0.60) * (( (Float)(60) ) / ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic)) ))));
HXLINE( 286)		int hmain = 0;
HXLINE( 287)		 ::Dynamic jsonData = ::Paths_obj::loadCustomGameJson(HX_("custom_game",80,06,7f,f9),null());
HXLINE( 288)		 ::Dynamic data = jsonData;
HXLINE( 289)		::String h11 = ( (::String)(data->__Field(HX_("mainMenuFont",67,e0,ef,78),::hx::paccDynamic)) );
HXLINE( 290)		::String h10 = ( (::String)(data->__Field(HX_("modversionandtext",2e,d1,cf,44),::hx::paccDynamic)) );
HXLINE( 291)		 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 49),0,h10,12,null());
HXLINE( 292)		versionShit->scrollFactor->set(null(),null());
HXLINE( 293)		versionShit->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 294)		this->add(versionShit);
HXLINE( 297)		if ((::MainMenuState_obj::language == HX_("en",69,58,00,00))) {
HXLINE( 301)			 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 33),0,(HX_("Reality Engine v",68,29,ea,98) + ::MainMenuState_obj::RealityEngineVer),12,null());
HXLINE( 302)			versionShit->scrollFactor->set(null(),null());
HXLINE( 303)			versionShit->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 304)			this->add(versionShit);
HXLINE( 307)			 ::flixel::text::FlxText versionShit1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,((HX_("Press K to Keybinds - FNF v",2b,48,c2,26) + ::MainMenuState_obj::gameVer) + HX_("",00,00,00,00)),12,null());
HXLINE( 308)			versionShit1->scrollFactor->set(null(),null());
HXLINE( 309)			versionShit1->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 310)			this->add(versionShit1);
            		}
HXLINE( 312)		if ((::MainMenuState_obj::language == HX_("tr",7e,65,00,00))) {
HXLINE( 314)			 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,12,(::flixel::FlxG_obj::height - 44),0,(HX_("Reality Engine Surumu",7b,75,d6,b8) + ::MainMenuState_obj::RealityEngineVer),12,null());
HXLINE( 315)			versionShit->scrollFactor->set(null(),null());
HXLINE( 316)			versionShit->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 317)			this->add(versionShit);
HXLINE( 319)			 ::flixel::text::FlxText versionShit1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,((HX_("E ye basarak editorlere ve ya modlara gir - FNF Surumu : ",56,de,5e,e2) + ::MainMenuState_obj::gameVer) + HX_(" F e basarak Funkin Mediaya gir",d3,f0,0d,55)),12,null());
HXLINE( 320)			versionShit1->scrollFactor->set(null(),null());
HXLINE( 321)			versionShit1->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 322)			this->add(versionShit1);
            		}
HXLINE( 325)		if ((::MainMenuState_obj::language == HX_("ru",c3,63,00,00))) {
HXLINE( 327)			 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,(HX_("Reality Engine v",68,29,ea,98) + ::MainMenuState_obj::RealityEngineVer),12,null());
HXLINE( 328)			versionShit->scrollFactor->set(null(),null());
HXLINE( 329)			versionShit->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 330)			this->add(versionShit);
HXLINE( 332)			 ::flixel::text::FlxText versionShit1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,(HX_("Press E to Editor/Mods - FNF v",87,76,39,d4) + ::MainMenuState_obj::gameVer),12,null());
HXLINE( 333)			versionShit1->scrollFactor->set(null(),null());
HXLINE( 334)			versionShit1->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 335)			this->add(versionShit1);
            		}
HXLINE( 341)		this->selec->scrollFactor->set(null(),null());
HXLINE( 342)		this->selec->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 343)		this->add(this->selec);
HXLINE( 345)		this->selec->set_text((this->optionShit->__get(this->curSelected) + HX_("",00,00,00,00)));
HXLINE( 351)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("dfjk",c3,18,67,42),::hx::paccDynamic)) )) {
HXLINE( 352)			::PlayerSettings_obj::player1->controls->setKeyboardScheme(::KeyboardScheme_obj::Solo_dyn(),true);
            		}
            		else {
HXLINE( 354)			::PlayerSettings_obj::player1->controls->setKeyboardScheme(::KeyboardScheme_obj::Duo(true),true);
            		}
HXLINE( 356)		this->changeItem(null());
HXLINE( 358)		::MainMenuState_obj::interp->execute(ast);
HXLINE( 360)		this->callOnHscript(HX_("create",fc,66,0f,7c),null());
HXLINE( 362)		this->super::create();
            	}


void MainMenuState_obj::OnClickButton(){
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_366_OnClickButton)
HXLINE( 367)		this->textt->set_visible(false);
HXLINE( 368)		this->textt2->set_visible(false);
HXLINE( 369)		this->textt3->set_visible(false);
HXLINE( 370)		this->textt4->set_visible(false);
HXLINE( 371)		this->bg2->set_visible(false);
HXLINE( 372)		this->button->set_visible(false);
HXLINE( 373)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 374)		::MainMenuState_obj::Editorsnull = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuState_obj,OnClickButton,(void))

void MainMenuState_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_619_update)
HXLINE( 619)			if ((::MainMenuState_obj::redesignedmenustyle == false)) {
HXLINE( 621)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 621)				if (::hx::IsNull( axes )) {
HXLINE( 621)					axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            				}
HXDLIN( 621)				bool _hx_tmp;
HXDLIN( 621)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE( 621)						_hx_tmp = true;
            					}
            					break;
            					default:{
HXLINE( 621)						_hx_tmp = false;
            					}
            				}
HXDLIN( 621)				if (_hx_tmp) {
HXLINE( 621)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 621)					spr->set_x(((( (Float)(_hx_tmp) ) - spr->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 621)				bool _hx_tmp1;
HXDLIN( 621)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE( 621)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE( 621)						_hx_tmp1 = false;
            					}
            				}
HXDLIN( 621)				if (_hx_tmp1) {
HXLINE( 621)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 621)					spr->set_y(((( (Float)(_hx_tmp) ) - spr->get_height()) / ( (Float)(2) )));
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_380_update)
HXLINE( 379)		 ::MainMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 381)		if ((::flixel::FlxG_obj::sound->music->_volume < ((Float)0.8))) {
HXLINE( 383)			 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 383)			_g->set_volume((_g->_volume + (((Float)0.5) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 386)		Float lerpVal = ::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(1) ),(elapsed * ((Float)5.6))));
HXLINE( 387)		Float a = this->camFollowPos->x;
HXDLIN( 387)		Float a1 = this->camFollowPos->y;
HXDLIN( 387)		this->camFollowPos->setPosition((a + (lerpVal * (this->camFollow->x - a))),(a1 + (lerpVal * (this->camFollow->y - a1))));
HXLINE( 389)		Float lerpVal1 = ::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(1) ),(elapsed * ((Float)7.5))));
HXLINE( 390)		Float a2 = this->camFollowPos->x;
HXDLIN( 390)		Float a3 = this->camFollowPos->y;
HXDLIN( 390)		this->camFollowPos->setPosition((a2 + (lerpVal1 * (this->camFollow->x - a2))),(a3 + (lerpVal1 * (this->camFollow->y - a3))));
HXLINE( 391)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 391)		if (_this->keyManager->checkStatusUnsafe(55,_this->status)) {
HXLINE( 393)			 ::Alphabet modText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(40) ),( (Float)(40) ),HX_("MAIN MENU EDITOR",a7,df,b5,b4),true,false,null(),null(),null());
HXLINE( 394)			modText->isMenuItem = false;
HXLINE( 395)			modText->scrollFactor->set(null(),null());
HXLINE( 396)			this->add(modText);
HXLINE( 397)			this->remove(this->selec,null());
HXLINE( 398)			 ::flixel::ui::FlxButton adds =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,1190,640,HX_("Add",01,aa,31,00),this->addNewMenu_dyn());
HXLINE( 399)			adds->set_color(-16744448);
HXLINE( 400)			this->add(adds);
            		}
HXLINE( 403)		if ((::MainMenuState_obj::redesignedmenustyle == true)) {
HXLINE( 405)			if ((this->optionShit->__get(this->curSelected) == HX_("story_mode",2d,63,e6,a4))) {
HXLINE( 407)				this->remove(this->char1,null());
HXLINE( 408)				this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(870) ),( (Float)(180) ),HX_("bf",c4,55,00,00),true);
HXLINE( 409)				this->char1->scrollFactor->set(null(),null());
HXLINE( 410)				 ::Character _hx_tmp = this->char1;
HXDLIN( 410)				_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 411)				this->add(this->char1);
HXLINE( 412)				this->char1->dance(null(),null());
            			}
HXLINE( 414)			if ((this->optionShit->__get(this->curSelected) == HX_("freeplay",a0,90,86,22))) {
HXLINE( 416)				this->remove(this->char1,null());
HXLINE( 417)				this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(870) ),( (Float)(70) ),HX_("monster",1a,54,b0,b8),true);
HXLINE( 418)				this->char1->scrollFactor->set(null(),null());
HXLINE( 419)				 ::Character _hx_tmp = this->char1;
HXDLIN( 419)				_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 420)				this->add(this->char1);
HXLINE( 421)				this->char1->dance(null(),null());
            			}
HXLINE( 423)			if ((this->optionShit->__get(this->curSelected) == HX_("credits",1a,0e,5e,13))) {
HXLINE( 425)				this->remove(this->char1,null());
HXLINE( 426)				this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(870) ),( (Float)(180) ),HX_("pico",e5,e8,57,4a),true);
HXLINE( 427)				this->char1->scrollFactor->set(null(),null());
HXLINE( 428)				 ::Character _hx_tmp = this->char1;
HXDLIN( 428)				_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 429)				this->add(this->char1);
HXLINE( 430)				this->char1->dance(null(),null());
            			}
HXLINE( 432)			if ((this->optionShit->__get(this->curSelected) == HX_("minigames",4a,ee,e2,ae))) {
HXLINE( 434)				this->remove(this->char1,null());
HXLINE( 435)				this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(870) ),( (Float)(180) ),HX_("gf",1f,5a,00,00),false);
HXLINE( 436)				this->char1->scrollFactor->set(null(),null());
HXLINE( 437)				 ::Character _hx_tmp = this->char1;
HXDLIN( 437)				_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 438)				this->add(this->char1);
HXLINE( 439)				this->char1->dance(null(),null());
            			}
HXLINE( 441)			if ((this->optionShit->__get(this->curSelected) == HX_("donate",6f,f1,29,2e))) {
HXLINE( 443)				this->remove(this->char1,null());
HXLINE( 444)				this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(870) ),( (Float)(180) ),HX_("spirit",31,bb,a9,bd),true);
HXLINE( 445)				this->char1->scrollFactor->set(null(),null());
HXLINE( 446)				 ::Character _hx_tmp = this->char1;
HXDLIN( 446)				_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 447)				this->add(this->char1);
HXLINE( 448)				this->char1->dance(null(),null());
            			}
HXLINE( 450)			if ((this->optionShit->__get(this->curSelected) == HX_("options",5e,33,fe,df))) {
HXLINE( 452)				this->remove(this->char1,null());
HXLINE( 453)				this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(870) ),( (Float)(180) ),HX_("bf-pixel",fd,03,90,37),true);
HXLINE( 454)				this->char1->scrollFactor->set(null(),null());
HXLINE( 455)				 ::Character _hx_tmp = this->char1;
HXDLIN( 455)				_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 456)				this->add(this->char1);
HXLINE( 457)				this->char1->dance(null(),null());
            			}
HXLINE( 459)			if ((this->optionShit->__get(this->curSelected) == HX_("mods",71,d3,60,48))) {
HXLINE( 461)				this->remove(this->char1,null());
HXLINE( 462)				this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(870) ),( (Float)(70) ),HX_("monster-christmas",4f,88,85,27),true);
HXLINE( 463)				this->char1->scrollFactor->set(null(),null());
HXLINE( 464)				 ::Character _hx_tmp = this->char1;
HXDLIN( 464)				_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 465)				this->add(this->char1);
HXLINE( 466)				this->char1->dance(null(),null());
            			}
            		}
HXLINE( 472)		if (!(this->selectedSomethin)) {
HXLINE( 474)			 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
HXLINE( 475)			if ((this->isConsole == true)) {
HXLINE( 477)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 477)				if (_this->keyManager->checkStatusUnsafe(27,_this->status)) {
HXLINE( 479)					::MainMenuState_obj::Editorsmainyes = false;
HXLINE( 480)					this->isConsole = false;
HXLINE( 481)					{
HXLINE( 481)						 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 481)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 481)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            				}
            			}
HXLINE( 484)			if ((::MainMenuState_obj::Editorsmainyes == false)) {
HXLINE( 486)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 486)				if (_this->keyManager->checkStatusUnsafe(75,_this->status)) {
HXLINE( 488)					this->openKeybinds();
            				}
HXLINE( 490)				if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 492)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 492)					_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 493)					this->changeItem(-(::flixel::FlxG_obj::mouse->wheel));
HXLINE( 494)					this->selec->set_text((this->optionShit->__get(this->curSelected) + HX_("",00,00,00,00)));
            				}
HXLINE( 497)				 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 497)				if (_this1->keyManager->checkStatusUnsafe(222,_this1->status)) {
HXLINE( 499)					this->openConsole();
            				}
HXLINE( 501)				if (::hx::IsNotNull( gamepad )) {
HXLINE( 503)					 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this = gamepad->justPressed;
HXDLIN( 503)					int id = 11;
HXDLIN( 503)					 ::flixel::input::gamepad::FlxGamepad _this1 = _this->gamepad;
HXDLIN( 503)					int Status = _this->status;
HXDLIN( 503)					bool _hx_tmp;
HXDLIN( 503)					switch((int)(id)){
            						case (int)-2: {
HXLINE( 503)							_hx_tmp = _this1->anyButton(Status);
            						}
            						break;
            						case (int)-1: {
HXLINE( 503)							_hx_tmp = !(_this1->anyButton(Status));
            						}
            						break;
            						default:{
HXLINE( 503)							int RawID = _this1->mapping->getRawID(id);
HXDLIN( 503)							 ::flixel::input::gamepad::FlxGamepadButton button = _this1->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 503)							if (::hx::IsNotNull( button )) {
HXLINE( 503)								_hx_tmp = button->hasState(Status);
            							}
            							else {
HXLINE( 503)								_hx_tmp = false;
            							}
            						}
            					}
HXDLIN( 503)					if (_hx_tmp) {
HXLINE( 505)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 505)						_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 506)						this->changeItem(-1);
HXLINE( 507)						this->selec->set_text((this->optionShit->__get(this->curSelected) + HX_("",00,00,00,00)));
            					}
HXLINE( 509)					 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this2 = gamepad->justPressed;
HXDLIN( 509)					int id1 = 12;
HXDLIN( 509)					 ::flixel::input::gamepad::FlxGamepad _this3 = _this2->gamepad;
HXDLIN( 509)					int Status1 = _this2->status;
HXDLIN( 509)					bool _hx_tmp1;
HXDLIN( 509)					switch((int)(id1)){
            						case (int)-2: {
HXLINE( 509)							_hx_tmp1 = _this3->anyButton(Status1);
            						}
            						break;
            						case (int)-1: {
HXLINE( 509)							_hx_tmp1 = !(_this3->anyButton(Status1));
            						}
            						break;
            						default:{
HXLINE( 509)							int RawID = _this3->mapping->getRawID(id1);
HXDLIN( 509)							 ::flixel::input::gamepad::FlxGamepadButton button = _this3->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 509)							if (::hx::IsNotNull( button )) {
HXLINE( 509)								_hx_tmp1 = button->hasState(Status1);
            							}
            							else {
HXLINE( 509)								_hx_tmp1 = false;
            							}
            						}
            					}
HXDLIN( 509)					if (_hx_tmp1) {
HXLINE( 511)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 511)						_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 512)						this->changeItem(1);
HXLINE( 513)						this->selec->set_text((this->optionShit->__get(this->curSelected) + HX_("",00,00,00,00)));
            					}
            				}
HXLINE( 517)				 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 517)				if (_this2->keyManager->checkStatusUnsafe(38,_this2->status)) {
HXLINE( 519)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 519)					_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 520)					this->changeItem(-1);
HXLINE( 521)					this->selec->set_text((this->optionShit->__get(this->curSelected) + HX_("",00,00,00,00)));
            				}
HXLINE( 524)				 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 524)				if (_this3->keyManager->checkStatusUnsafe(87,_this3->status)) {
HXLINE( 526)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 526)					_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 527)					this->changeItem(-1);
HXLINE( 528)					this->selec->set_text((this->optionShit->__get(this->curSelected) + HX_("",00,00,00,00)));
            				}
HXLINE( 530)				 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 530)				if (_this4->keyManager->checkStatusUnsafe(69,_this4->status)) {
HXLINE( 532)					this->openSubState( ::EditorsMain_obj::__alloc( HX_CTX ));
HXLINE( 533)					::MainMenuState_obj::Editorsmainyes = true;
            				}
HXLINE( 536)				 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 536)				if (_this5->keyManager->checkStatusUnsafe(40,_this5->status)) {
HXLINE( 538)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 538)					_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 539)					this->changeItem(1);
HXLINE( 540)					this->selec->set_text((this->optionShit->__get(this->curSelected) + HX_("",00,00,00,00)));
            				}
HXLINE( 543)				 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 543)				if (_this6->keyManager->checkStatusUnsafe(83,_this6->status)) {
HXLINE( 545)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 545)					_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 546)					this->changeItem(1);
HXLINE( 547)					this->selec->set_text((this->optionShit->__get(this->curSelected) + HX_("",00,00,00,00)));
            				}
HXLINE( 550)				if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 552)					 ::flixel::FlxState nextState =  ::TitleState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 552)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 552)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE( 555)				if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 557)					if ((this->optionShit->__get(this->curSelected) == HX_("donate",6f,f1,29,2e))) {
HXLINE( 559)						 ::Dynamic menuJsonData2 = ::Paths_obj::loadCustomGameJson(HX_("main_menu",a5,ba,e0,81),null());
HXLINE( 560)						 ::Dynamic dataMenuDonate = menuJsonData2;
HXLINE( 561)						::CoolUtil_obj::browserLoad(( (::String)(dataMenuDonate->__Field(HX_("donateLink",09,19,7d,a4),::hx::paccDynamic)) ));
            					}
            					else {
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::MainMenuState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::FlxSprite spr){
            							HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_577_update)
HXLINE( 577)							if ((_gthis->curSelected != spr->ID)) {
            								HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,spr) HXARGC(1)
            								void _hx_run( ::flixel::tweens::FlxTween twn){
            									HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_583_update)
HXLINE( 583)									spr->kill();
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 579)								::flixel::tweens::FlxTween_obj::tween(spr, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)1.3), ::Dynamic(::hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            									->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(spr)))));
            							}
            							else {
HXLINE( 589)								if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("flashing",32,85,e8,99),::hx::paccDynamic)) )) {
            									HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::MainMenuState,_gthis) HXARGC(1)
            									void _hx_run( ::flixel::effects::FlxFlicker flick){
            										HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_593_update)
HXLINE( 593)										_gthis->goToState();
            									}
            									HX_END_LOCAL_FUNC1((void))

HXLINE( 591)									::flixel::effects::FlxFlicker_obj::flicker(spr,1,((Float)0.06),false,false, ::Dynamic(new _hx_Closure_1(_gthis)),null());
            								}
            								else {
            									HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::MainMenuState,_gthis) HXARGC(1)
            									void _hx_run( ::flixel::util::FlxTimer tmr){
            										HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_600_update)
HXLINE( 600)										_gthis->goToState();
            									}
            									HX_END_LOCAL_FUNC1((void))

HXLINE( 598)									 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_2(_gthis)),null());
            								}
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 565)						this->selectedSomethin = true;
HXLINE( 566)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 566)						_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE( 568)						if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("flashing",32,85,e8,99),::hx::paccDynamic)) )) {
HXLINE( 569)							::flixel::effects::FlxFlicker_obj::flicker(this->magenta,((Float)1.1),((Float)0.15),false,null(),null(),null());
            						}
HXLINE( 573)						this->menuItems->forEach( ::Dynamic(new _hx_Closure_3(_gthis)),null());
            					}
            				}
            			}
            		}
            		else {
HXLINE( 613)			::flixel::FlxG_obj::mouse->set_visible(true);
            		}
HXLINE( 615)		this->super::update(elapsed);
HXLINE( 617)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_4()),null());
HXLINE( 629)		this->callOnHscript2(HX_("update",09,86,05,87),null());
            	}


void MainMenuState_obj::openKeybinds(){
            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_635_openKeybinds)
HXLINE( 636)		::MainMenuState_obj::Editorsmainyes = true;
HXLINE( 637)		this->isConsole = true;
HXLINE( 638)		 ::flixel::FlxSprite bgalpha =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE( 639)		bgalpha->set_alpha(((Float)0.6));
HXLINE( 640)		bgalpha->scrollFactor->set(null(),null());
HXLINE( 641)		this->add(bgalpha);
HXLINE( 643)		 ::flixel::FlxSprite keybinds =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 643)		 ::flixel::FlxSprite keybinds1 = keybinds->loadGraphic(::Paths_obj::loadImage(HX_("keybinds",17,46,3c,64),null()),null(),null(),null(),null(),null());
HXLINE( 644)		keybinds1->scrollFactor->set(null(),null());
HXLINE( 645)		keybinds1->setGraphicSize(::Std_obj::_hx_int((keybinds1->get_width() * ((Float)1.1))),null());
HXLINE( 646)		keybinds1->updateHitbox();
HXLINE( 647)		{
HXLINE( 647)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 647)			bool _hx_tmp;
HXDLIN( 647)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 647)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 647)					_hx_tmp = false;
            				}
            			}
HXDLIN( 647)			if (_hx_tmp) {
HXLINE( 647)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 647)				keybinds1->set_x(((( (Float)(_hx_tmp) ) - keybinds1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 647)			bool _hx_tmp1;
HXDLIN( 647)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 647)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 647)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 647)			if (_hx_tmp1) {
HXLINE( 647)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 647)				keybinds1->set_y(((( (Float)(_hx_tmp) ) - keybinds1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 648)		keybinds1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 649)		this->add(keybinds1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuState_obj,openKeybinds,(void))

void MainMenuState_obj::openConsole(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MainMenuState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_679_openConsole)
HXLINE( 679)			 ::flixel::addons::ui::FlxUIInputText _gthis1 = _gthis->eventNa;
HXDLIN( 679)			 ::flixel::addons::ui::FlxUIInputText _g = _gthis->eventNa;
HXDLIN( 679)			_gthis1->set_text(_g->set_text((_g->text + HX_("\"",22,00,00,00))));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_652_openConsole)
HXLINE( 651)		 ::MainMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 654)		::MainMenuState_obj::Editorsmainyes = true;
HXLINE( 655)		this->isConsole = true;
HXLINE( 656)		 ::flixel::FlxSprite bgalpha =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE( 657)		bgalpha->set_alpha(((Float)0.6));
HXLINE( 658)		bgalpha->scrollFactor->set(null(),null());
HXLINE( 659)		this->add(bgalpha);
HXLINE( 661)		 ::flixel::FlxSprite console =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 661)		 ::flixel::FlxSprite console1 = console->loadGraphic(::Paths_obj::loadImage(HX_("console",57,eb,d5,18),null()),null(),null(),null(),null(),null());
HXLINE( 662)		console1->scrollFactor->set(null(),null());
HXLINE( 663)		console1->setGraphicSize(::Std_obj::_hx_int((console1->get_width() * ((Float)1.1))),null());
HXLINE( 664)		console1->updateHitbox();
HXLINE( 665)		{
HXLINE( 665)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 665)			bool _hx_tmp;
HXDLIN( 665)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 665)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 665)					_hx_tmp = false;
            				}
            			}
HXDLIN( 665)			if (_hx_tmp) {
HXLINE( 665)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 665)				console1->set_x(((( (Float)(_hx_tmp) ) - console1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 665)			bool _hx_tmp1;
HXDLIN( 665)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 665)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 665)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 665)			if (_hx_tmp1) {
HXLINE( 665)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 665)				console1->set_y(((( (Float)(_hx_tmp) ) - console1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 666)		console1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 667)		this->add(console1);
HXLINE( 670)		this->eventNa =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,350,665,450,HX_("Console",37,13,27,e6),50,null(),null(),null());
HXLINE( 671)		this->eventNa->scrollFactor->set(null(),null());
HXLINE( 672)		this->eventNa->setFormat(HX_("PhantomMuff1.5RealityEngine",8f,cd,de,3f),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 673)		this->add(this->eventNa);
HXLINE( 675)		 ::flixel::ui::FlxButton button4 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,810,665,HX_("Apply",4e,f5,68,b7),this->useCommand_dyn());
HXLINE( 676)		this->add(button4);
HXLINE( 678)		 ::flixel::ui::FlxButton button54 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,10,HX_("\"",22,00,00,00), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 681)		this->add(button54);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuState_obj,openConsole,(void))

void MainMenuState_obj::useCommand(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(Float elapsed){
            			HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_725_useCommand)
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_728_useCommand)
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_684_useCommand)
HXLINE( 685)		::String expr = ((HX_("function useCommand(){\n",3c,5e,dd,ff) + this->eventNa->text) + HX_(";\n}",2e,ce,2c,00));
HXLINE( 687)		 ::hscript::Parser parser =  ::hscript::Parser_obj::__alloc( HX_CTX );
HXLINE( 688)		parser->allowTypes = true;
HXLINE( 689)		parser->allowJSON = true;
HXLINE( 690)		parser->allowMetadata = true;
HXLINE( 691)		 ::hscript::Expr ast = parser->parseString(expr,null());
HXLINE( 692)		this->interp2->execute(ast);
HXLINE( 693)		this->interp2->variables->set(HX_("add",21,f2,49,00),this->add_dyn());
HXLINE( 694)		this->interp2->variables->set(HX_("remove",44,9c,88,04),this->remove_dyn());
HXLINE( 696)		this->interp2->variables->set(HX_("DiscordClient",f7,d0,c5,2b),::hx::ClassOf< ::DiscordClient >());
HXLINE( 698)		this->interp2->variables->set(HX_("FlxG",b5,4b,97,2e),::hx::ClassOf< ::flixel::FlxG >());
HXLINE( 699)		this->interp2->variables->set(HX_("CustomState",80,74,7a,fd),::hx::ClassOf< ::CustomState >());
HXLINE( 700)		this->interp2->variables->set(HX_("MenuItem",72,ae,e0,25),::hx::ClassOf< ::MenuItem >());
HXLINE( 701)		this->interp2->variables->set(HX_("Character",89,bb,a4,e3),::hx::ClassOf< ::Character >());
HXLINE( 702)		this->interp2->variables->set(HX_("FlxGame",64,2d,b7,d4),::hx::ClassOf< ::flixel::FlxGame >());
HXLINE( 703)		this->interp2->variables->set(HX_("FlxObject",b1,78,2e,97),::hx::ClassOf< ::flixel::FlxObject >());
HXLINE( 704)		this->interp2->variables->set(HX_("MusicBeatState",76,df,84,5d),::hx::ClassOf< ::MusicBeatState >());
HXLINE( 705)		this->interp2->variables->set(HX_("FlxSprite",f7,d5,84,45),::hx::ClassOf< ::flixel::FlxSprite >());
HXLINE( 706)		this->interp2->variables->set(HX_("FlxState",5f,80,e5,40),::hx::ClassOf< ::flixel::FlxState >());
HXLINE( 707)		this->interp2->variables->set(HX_("FlxSubState",e3,a6,41,10),::hx::ClassOf< ::flixel::FlxSubState >());
HXLINE( 708)		this->interp2->variables->set(HX_("FlxGridOverlay",38,52,48,2c),::hx::ClassOf< ::flixel::addons::display::FlxGridOverlay >());
HXLINE( 709)		this->interp2->variables->set(HX_("FlxTrail",14,9e,f9,d2),::hx::ClassOf< ::flixel::addons::effects::FlxTrail >());
HXLINE( 710)		this->interp2->variables->set(HX_("FlxTrailArea",c1,ef,71,42),::hx::ClassOf< ::flixel::addons::effects::FlxTrailArea >());
HXLINE( 711)		this->interp2->variables->set(HX_("FlxEffectSprite",e8,68,af,66),::hx::ClassOf< ::flixel::addons::effects::chainable::FlxEffectSprite >());
HXLINE( 712)		this->interp2->variables->set(HX_("FlxWaveEffect",1c,a0,de,d8),::hx::ClassOf< ::flixel::addons::effects::chainable::FlxWaveEffect >());
HXLINE( 713)		this->interp2->variables->set(HX_("FlxTransitionableState",b0,b8,2b,5f),::hx::ClassOf< ::flixel::addons::transition::FlxTransitionableState >());
HXLINE( 714)		this->interp2->variables->set(HX_("FlxAtlas",99,57,b7,e3),::hx::ClassOf< ::flixel::graphics::atlas::FlxAtlas >());
HXLINE( 715)		this->interp2->variables->set(HX_("FlxAtlasFrames",1f,b4,c0,8d),::hx::ClassOf< ::flixel::graphics::frames::FlxAtlasFrames >());
HXLINE( 716)		this->interp2->variables->set(HX_("FlxMath",3a,7b,ae,d8),::hx::ClassOf< ::flixel::math::FlxMath >());
HXLINE( 717)		this->interp2->variables->set(HX_("FlxPoint",9e,be,69,83),::hx::ClassOf< ::flixel::math::FlxPoint >());
HXLINE( 718)		this->interp2->variables->set(HX_("FlxRect",96,86,ff,db),::hx::ClassOf< ::flixel::math::FlxRect >());
HXLINE( 719)		this->interp2->variables->set(HX_("MusicBeatState",76,df,84,5d),::hx::ClassOf< ::MusicBeatState >());
HXLINE( 720)		this->interp2->variables->set(HX_("FlxSound",1d,97,a6,3d),::hx::ClassOf< ::flixel::_hx_system::FlxSound >());
HXLINE( 721)		this->interp2->variables->set(HX_("FlxText",1f,06,52,dd),::hx::ClassOf< ::flixel::text::FlxText >());
HXLINE( 722)		this->interp2->variables->set(HX_("FlxEase",60,c5,64,d3),::hx::ClassOf< ::flixel::tweens::FlxEase >());
HXLINE( 723)		this->interp2->variables->set(HX_("FlxTween",b9,b4,4a,d6),::hx::ClassOf< ::flixel::tweens::FlxTween >());
HXLINE( 724)		this->interp2->variables->set(HX_("update",09,86,05,87), ::Dynamic(new _hx_Closure_0()));
HXLINE( 727)		this->interp2->variables->set(HX_("create",fc,66,0f,7c), ::Dynamic(new _hx_Closure_1()));
HXLINE( 730)		this->callOnHscript2(HX_("useCommand",c4,93,20,84),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuState_obj,useCommand,(void))

void MainMenuState_obj::addNewMenu(){
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_733_addNewMenu)
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuState_obj,addNewMenu,(void))

void MainMenuState_obj::goToState(){
            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_737_goToState)
HXLINE( 738)		::String daChoice = this->optionShit->__get(this->curSelected);
HXLINE( 740)		::String _hx_switch_0 = daChoice;
            		if (  (_hx_switch_0==HX_("credits",1a,0e,5e,13)) ){
HXLINE( 750)			 ::flixel::FlxState nextState =  ::CreditsState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 750)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 750)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
HXDLIN( 750)			goto _hx_goto_19;
            		}
            		if (  (_hx_switch_0==HX_("freeplay",a0,90,86,22)) ){
HXLINE( 747)			 ::flixel::FlxState nextState =  ::FreeplayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 747)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 747)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
HXDLIN( 747)			goto _hx_goto_19;
            		}
            		if (  (_hx_switch_0==HX_("minigames",4a,ee,e2,ae)) ){
HXLINE( 760)			{
HXLINE( 760)				 ::flixel::FlxState nextState =  ::miniGames::MiniGamesState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 760)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 760)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE( 761)			::miniGames::MiniGamesState_obj::h = HX_("mainmenu",58,8e,02,b6);
HXLINE( 759)			goto _hx_goto_19;
            		}
            		if (  (_hx_switch_0==HX_("mods",71,d3,60,48)) ){
HXLINE( 757)			 ::flixel::FlxState nextState =  ::ModsMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 757)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 757)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
HXDLIN( 757)			goto _hx_goto_19;
            		}
            		if (  (_hx_switch_0==HX_("options",5e,33,fe,df)) ){
HXLINE( 753)			 ::flixel::FlxState nextState =  ::options::MenuOptions_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 753)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 753)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
HXDLIN( 753)			goto _hx_goto_19;
            		}
            		if (  (_hx_switch_0==HX_("quests",51,da,4f,cf)) ){
HXLINE( 763)			 ::flixel::FlxState nextState =  ::QuestsState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 763)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 763)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
HXDLIN( 763)			goto _hx_goto_19;
            		}
            		if (  (_hx_switch_0==HX_("story_mode",2d,63,e6,a4)) ){
HXLINE( 744)			 ::flixel::FlxState nextState =  ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 744)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 744)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
HXDLIN( 744)			goto _hx_goto_19;
            		}
            		/* default */{
HXLINE( 766)			bool _hx_tmp = (daChoice == HX_("youtube",e3,ea,29,b4));
HXLINE( 770)			{
HXLINE( 770)				 ::flixel::FlxState nextState =  ::CustomState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 770)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 770)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE( 771)			::CustomState_obj::statename = this->optionShit->__get(this->curSelected);
            		}
            		_hx_goto_19:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuState_obj,goToState,(void))

void MainMenuState_obj::changeItem(::hx::Null< int >  __o_huh){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::MainMenuState,_gthis, ::Dynamic,dataMenu) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_789_changeItem)
HXLINE( 790)			spr->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 791)			spr->scale->set_x(( (Float)(dataMenu->__Field(HX_("defaultScaleX",2f,be,9e,36),::hx::paccDynamic)) ));
HXLINE( 792)			spr->scale->set_y(( (Float)(dataMenu->__Field(HX_("defaultScaleY",30,be,9e,36),::hx::paccDynamic)) ));
HXLINE( 793)			spr->updateHitbox();
HXLINE( 795)			if ((spr->ID == _gthis->curSelected)) {
HXLINE( 797)				spr->animation->play(HX_("selected",5b,2a,6d,b1),null(),null(),null());
HXLINE( 800)				spr->scale->set_x(( (Float)(dataMenu->__Field(HX_("curSelectedScaleX",e9,f8,33,6f),::hx::paccDynamic)) ));
HXLINE( 801)				spr->scale->set_y(( (Float)(dataMenu->__Field(HX_("curSelectedScaleY",ea,f8,33,6f),::hx::paccDynamic)) ));
HXLINE( 802)				Float add = ( (Float)(0) );
HXLINE( 803)				if ((_gthis->menuItems->length > 4)) {
HXLINE( 804)					add = ( (Float)((_gthis->menuItems->length * 8)) );
            				}
HXLINE( 807)				 ::flixel::FlxObject _gthis1 = _gthis->camFollow;
HXDLIN( 807)				Float _hx_tmp = spr->getGraphicMidpoint(null())->x;
HXDLIN( 807)				_gthis1->setPosition(_hx_tmp,(spr->getGraphicMidpoint(null())->y - add));
HXLINE( 808)				spr->centerOffsets(null());
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		int huh = __o_huh.Default(0);
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_777_changeItem)
HXLINE( 776)		 ::MainMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 778)		 ::Dynamic menuJsonData = ::Paths_obj::loadCustomGameJson(HX_("main_menu",a5,ba,e0,81),null());
HXLINE( 779)		 ::Dynamic dataMenu = menuJsonData;
HXLINE( 781)		 ::MainMenuState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 781)		_hx_tmp->curSelected = (_hx_tmp->curSelected + huh);
HXLINE( 783)		if ((this->curSelected >= this->menuItems->length)) {
HXLINE( 784)			this->curSelected = 0;
            		}
HXLINE( 785)		if ((this->curSelected < 0)) {
HXLINE( 786)			this->curSelected = (this->menuItems->length - 1);
            		}
HXLINE( 788)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_0(_gthis,dataMenu)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MainMenuState_obj,changeItem,(void))

 ::Dynamic MainMenuState_obj::callOnHscript(::String functionToCall,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_814_callOnHscript)
HXLINE( 815)		if (::hx::IsNull( ::MainMenuState_obj::interp )) {
HXLINE( 817)			return null();
            		}
HXLINE( 819)		if (::MainMenuState_obj::interp->variables->exists(functionToCall)) {
HXLINE( 821)			 ::Dynamic functionH = ::MainMenuState_obj::interp->variables->get(functionToCall);
HXLINE( 822)			if (::hx::IsNull( params )) {
HXLINE( 824)				 ::Dynamic result = null();
HXLINE( 825)				result = functionH();
HXLINE( 826)				return result;
            			}
            			else {
HXLINE( 830)				 ::Dynamic result = null();
HXLINE( 831)				result = ::Reflect_obj::callMethod(null(),functionH,params);
HXLINE( 832)				return result;
            			}
            		}
HXLINE( 835)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(MainMenuState_obj,callOnHscript,return )

 ::Dynamic MainMenuState_obj::callOnHscript2(::String functionToCall,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_838_callOnHscript2)
HXLINE( 839)		if (::hx::IsNull( this->interp2 )) {
HXLINE( 841)			return null();
            		}
HXLINE( 843)		if (this->interp2->variables->exists(functionToCall)) {
HXLINE( 845)			 ::Dynamic functionH = this->interp2->variables->get(functionToCall);
HXLINE( 846)			if (::hx::IsNull( params )) {
HXLINE( 848)				 ::Dynamic result = null();
HXLINE( 849)				result = functionH();
HXLINE( 850)				return result;
            			}
            			else {
HXLINE( 854)				 ::Dynamic result = null();
HXLINE( 855)				result = ::Reflect_obj::callMethod(null(),functionH,params);
HXLINE( 856)				return result;
            			}
            		}
HXLINE( 859)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(MainMenuState_obj,callOnHscript2,return )

::String MainMenuState_obj::language;

::String MainMenuState_obj::hmmmmmmmmmmmmmmmm;

bool MainMenuState_obj::Editorsnull;

bool MainMenuState_obj::redesignedmenustyle;

bool MainMenuState_obj::Editorsmainyes;

bool MainMenuState_obj::firstStart;

 ::hscript::Interp MainMenuState_obj::interp;

::String MainMenuState_obj::nightly;

::String MainMenuState_obj::RealityEngineVer;

::String MainMenuState_obj::gameVer;

bool MainMenuState_obj::finishedFunnyMove;


::hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< MainMenuState_obj > __this = new MainMenuState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	MainMenuState_obj *__this = (MainMenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MainMenuState_obj), true, "MainMenuState"));
	*(void **)__this = MainMenuState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

MainMenuState_obj::MainMenuState_obj()
{
}

void MainMenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MainMenuState);
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(updateAvailable,"updateAvailable");
	HX_MARK_MEMBER_NAME(bg2,"bg2");
	HX_MARK_MEMBER_NAME(its,"its");
	HX_MARK_MEMBER_NAME(char1,"char1");
	HX_MARK_MEMBER_NAME(textt,"textt");
	HX_MARK_MEMBER_NAME(textt2,"textt2");
	HX_MARK_MEMBER_NAME(textt3,"textt3");
	HX_MARK_MEMBER_NAME(textt4,"textt4");
	HX_MARK_MEMBER_NAME(button,"button");
	HX_MARK_MEMBER_NAME(button2,"button2");
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(interp2,"interp2");
	HX_MARK_MEMBER_NAME(optionShit,"optionShit");
	HX_MARK_MEMBER_NAME(newGaming,"newGaming");
	HX_MARK_MEMBER_NAME(newGaming2,"newGaming2");
	HX_MARK_MEMBER_NAME(magenta,"magenta");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(camFollowPos,"camFollowPos");
	HX_MARK_MEMBER_NAME(isConsole,"isConsole");
	HX_MARK_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_MARK_MEMBER_NAME(selec,"selec");
	HX_MARK_MEMBER_NAME(eventNa,"eventNa");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MainMenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(updateAvailable,"updateAvailable");
	HX_VISIT_MEMBER_NAME(bg2,"bg2");
	HX_VISIT_MEMBER_NAME(its,"its");
	HX_VISIT_MEMBER_NAME(char1,"char1");
	HX_VISIT_MEMBER_NAME(textt,"textt");
	HX_VISIT_MEMBER_NAME(textt2,"textt2");
	HX_VISIT_MEMBER_NAME(textt3,"textt3");
	HX_VISIT_MEMBER_NAME(textt4,"textt4");
	HX_VISIT_MEMBER_NAME(button,"button");
	HX_VISIT_MEMBER_NAME(button2,"button2");
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(interp2,"interp2");
	HX_VISIT_MEMBER_NAME(optionShit,"optionShit");
	HX_VISIT_MEMBER_NAME(newGaming,"newGaming");
	HX_VISIT_MEMBER_NAME(newGaming2,"newGaming2");
	HX_VISIT_MEMBER_NAME(magenta,"magenta");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(camFollowPos,"camFollowPos");
	HX_VISIT_MEMBER_NAME(isConsole,"isConsole");
	HX_VISIT_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_VISIT_MEMBER_NAME(selec,"selec");
	HX_VISIT_MEMBER_NAME(eventNa,"eventNa");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MainMenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bg2") ) { return ::hx::Val( bg2 ); }
		if (HX_FIELD_EQ(inName,"its") ) { return ::hx::Val( its ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { return ::hx::Val( char1 ); }
		if (HX_FIELD_EQ(inName,"textt") ) { return ::hx::Val( textt ); }
		if (HX_FIELD_EQ(inName,"selec") ) { return ::hx::Val( selec ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"textt2") ) { return ::hx::Val( textt2 ); }
		if (HX_FIELD_EQ(inName,"textt3") ) { return ::hx::Val( textt3 ); }
		if (HX_FIELD_EQ(inName,"textt4") ) { return ::hx::Val( textt4 ); }
		if (HX_FIELD_EQ(inName,"button") ) { return ::hx::Val( button ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"button2") ) { return ::hx::Val( button2 ); }
		if (HX_FIELD_EQ(inName,"interp2") ) { return ::hx::Val( interp2 ); }
		if (HX_FIELD_EQ(inName,"magenta") ) { return ::hx::Val( magenta ); }
		if (HX_FIELD_EQ(inName,"eventNa") ) { return ::hx::Val( eventNa ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"newGaming") ) { return ::hx::Val( newGaming ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"isConsole") ) { return ::hx::Val( isConsole ); }
		if (HX_FIELD_EQ(inName,"goToState") ) { return ::hx::Val( goToState_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { return ::hx::Val( optionShit ); }
		if (HX_FIELD_EQ(inName,"newGaming2") ) { return ::hx::Val( newGaming2 ); }
		if (HX_FIELD_EQ(inName,"useCommand") ) { return ::hx::Val( useCommand_dyn() ); }
		if (HX_FIELD_EQ(inName,"addNewMenu") ) { return ::hx::Val( addNewMenu_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		if (HX_FIELD_EQ(inName,"openConsole") ) { return ::hx::Val( openConsole_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"camFollowPos") ) { return ::hx::Val( camFollowPos ); }
		if (HX_FIELD_EQ(inName,"openKeybinds") ) { return ::hx::Val( openKeybinds_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"OnClickButton") ) { return ::hx::Val( OnClickButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"callOnHscript") ) { return ::hx::Val( callOnHscript_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"callOnHscript2") ) { return ::hx::Val( callOnHscript2_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateAvailable") ) { return ::hx::Val( updateAvailable ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { return ::hx::Val( selectedSomethin ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MainMenuState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"interp") ) { outValue = ( interp ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nightly") ) { outValue = ( nightly ); return true; }
		if (HX_FIELD_EQ(inName,"gameVer") ) { outValue = ( gameVer ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"language") ) { outValue = ( language ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"firstStart") ) { outValue = ( firstStart ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"Editorsnull") ) { outValue = ( Editorsnull ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"Editorsmainyes") ) { outValue = ( Editorsmainyes ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"RealityEngineVer") ) { outValue = ( RealityEngineVer ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"hmmmmmmmmmmmmmmmm") ) { outValue = ( hmmmmmmmmmmmmmmmm ); return true; }
		if (HX_FIELD_EQ(inName,"finishedFunnyMove") ) { outValue = ( finishedFunnyMove ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"redesignedmenustyle") ) { outValue = ( redesignedmenustyle ); return true; }
	}
	return false;
}

::hx::Val MainMenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bg2") ) { bg2=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"its") ) { its=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { char1=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textt") ) { textt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selec") ) { selec=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"textt2") ) { textt2=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textt3") ) { textt3=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textt4") ) { textt4=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"button") ) { button=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"button2") ) { button2=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"interp2") ) { interp2=inValue.Cast<  ::hscript::Interp >(); return inValue; }
		if (HX_FIELD_EQ(inName,"magenta") ) { magenta=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventNa") ) { eventNa=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newGaming") ) { newGaming=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isConsole") ) { isConsole=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { optionShit=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newGaming2") ) { newGaming2=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"camFollowPos") ) { camFollowPos=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateAvailable") ) { updateAvailable=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { selectedSomethin=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MainMenuState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"interp") ) { interp=ioValue.Cast<  ::hscript::Interp >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nightly") ) { nightly=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"gameVer") ) { gameVer=ioValue.Cast< ::String >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"language") ) { language=ioValue.Cast< ::String >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"firstStart") ) { firstStart=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"Editorsnull") ) { Editorsnull=ioValue.Cast< bool >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"Editorsmainyes") ) { Editorsmainyes=ioValue.Cast< bool >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"RealityEngineVer") ) { RealityEngineVer=ioValue.Cast< ::String >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"hmmmmmmmmmmmmmmmm") ) { hmmmmmmmmmmmmmmmm=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"finishedFunnyMove") ) { finishedFunnyMove=ioValue.Cast< bool >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"redesignedmenustyle") ) { redesignedmenustyle=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void MainMenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("updateAvailable",80,2a,0e,c7));
	outFields->push(HX_("bg2",cd,b6,4a,00));
	outFields->push(HX_("its",28,12,50,00));
	outFields->push(HX_("char1",9b,9c,b3,45));
	outFields->push(HX_("textt",27,4b,99,0d));
	outFields->push(HX_("textt2",2b,77,88,d8));
	outFields->push(HX_("textt3",2c,77,88,d8));
	outFields->push(HX_("textt4",2d,77,88,d8));
	outFields->push(HX_("button",f2,61,e0,d9));
	outFields->push(HX_("button2",00,52,75,ca));
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("interp2",de,1f,24,17));
	outFields->push(HX_("optionShit",d5,2d,ee,91));
	outFields->push(HX_("newGaming",2f,8a,ad,0e));
	outFields->push(HX_("newGaming2",23,5f,2b,c9));
	outFields->push(HX_("magenta",29,ba,9d,0e));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("camFollowPos",94,32,de,8d));
	outFields->push(HX_("isConsole",8d,68,d4,1c));
	outFields->push(HX_("selectedSomethin",c8,ec,fb,99));
	outFields->push(HX_("selec",78,8e,29,7a));
	outFields->push(HX_("eventNa",ed,c6,9a,06));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MainMenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(MainMenuState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsBool,(int)offsetof(MainMenuState_obj,updateAvailable),HX_("updateAvailable",80,2a,0e,c7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,bg2),HX_("bg2",cd,b6,4a,00)},
	{::hx::fsBool,(int)offsetof(MainMenuState_obj,its),HX_("its",28,12,50,00)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(MainMenuState_obj,char1),HX_("char1",9b,9c,b3,45)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuState_obj,textt),HX_("textt",27,4b,99,0d)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuState_obj,textt2),HX_("textt2",2b,77,88,d8)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuState_obj,textt3),HX_("textt3",2c,77,88,d8)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuState_obj,textt4),HX_("textt4",2d,77,88,d8)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(MainMenuState_obj,button),HX_("button",f2,61,e0,d9)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(MainMenuState_obj,button2),HX_("button2",00,52,75,ca)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MainMenuState_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /*  ::hscript::Interp */ ,(int)offsetof(MainMenuState_obj,interp2),HX_("interp2",de,1f,24,17)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MainMenuState_obj,optionShit),HX_("optionShit",d5,2d,ee,91)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuState_obj,newGaming),HX_("newGaming",2f,8a,ad,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuState_obj,newGaming2),HX_("newGaming2",23,5f,2b,c9)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,magenta),HX_("magenta",29,ba,9d,0e)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(MainMenuState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(MainMenuState_obj,camFollowPos),HX_("camFollowPos",94,32,de,8d)},
	{::hx::fsBool,(int)offsetof(MainMenuState_obj,isConsole),HX_("isConsole",8d,68,d4,1c)},
	{::hx::fsBool,(int)offsetof(MainMenuState_obj,selectedSomethin),HX_("selectedSomethin",c8,ec,fb,99)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuState_obj,selec),HX_("selec",78,8e,29,7a)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(MainMenuState_obj,eventNa),HX_("eventNa",ed,c6,9a,06)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MainMenuState_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &MainMenuState_obj::language,HX_("language",58,80,11,7a)},
	{::hx::fsString,(void *) &MainMenuState_obj::hmmmmmmmmmmmmmmmm,HX_("hmmmmmmmmmmmmmmmm",68,eb,38,45)},
	{::hx::fsBool,(void *) &MainMenuState_obj::Editorsnull,HX_("Editorsnull",8d,77,8a,65)},
	{::hx::fsBool,(void *) &MainMenuState_obj::redesignedmenustyle,HX_("redesignedmenustyle",62,d6,f1,d5)},
	{::hx::fsBool,(void *) &MainMenuState_obj::Editorsmainyes,HX_("Editorsmainyes",48,29,0f,51)},
	{::hx::fsBool,(void *) &MainMenuState_obj::firstStart,HX_("firstStart",12,be,e9,c1)},
	{::hx::fsObject /*  ::hscript::Interp */ ,(void *) &MainMenuState_obj::interp,HX_("interp",d4,79,86,9e)},
	{::hx::fsString,(void *) &MainMenuState_obj::nightly,HX_("nightly",65,3e,0e,6d)},
	{::hx::fsString,(void *) &MainMenuState_obj::RealityEngineVer,HX_("RealityEngineVer",31,ec,85,c3)},
	{::hx::fsString,(void *) &MainMenuState_obj::gameVer,HX_("gameVer",91,29,72,89)},
	{::hx::fsBool,(void *) &MainMenuState_obj::finishedFunnyMove,HX_("finishedFunnyMove",a9,44,72,47)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MainMenuState_obj_sMemberFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("updateAvailable",80,2a,0e,c7),
	HX_("bg2",cd,b6,4a,00),
	HX_("its",28,12,50,00),
	HX_("char1",9b,9c,b3,45),
	HX_("textt",27,4b,99,0d),
	HX_("textt2",2b,77,88,d8),
	HX_("textt3",2c,77,88,d8),
	HX_("textt4",2d,77,88,d8),
	HX_("button",f2,61,e0,d9),
	HX_("button2",00,52,75,ca),
	HX_("menuItems",e1,15,e5,5c),
	HX_("interp2",de,1f,24,17),
	HX_("optionShit",d5,2d,ee,91),
	HX_("newGaming",2f,8a,ad,0e),
	HX_("newGaming2",23,5f,2b,c9),
	HX_("magenta",29,ba,9d,0e),
	HX_("camFollow",e0,6e,47,22),
	HX_("camFollowPos",94,32,de,8d),
	HX_("isConsole",8d,68,d4,1c),
	HX_("create",fc,66,0f,7c),
	HX_("OnClickButton",5b,25,bc,b3),
	HX_("selectedSomethin",c8,ec,fb,99),
	HX_("selec",78,8e,29,7a),
	HX_("update",09,86,05,87),
	HX_("eventNa",ed,c6,9a,06),
	HX_("openKeybinds",01,e0,59,a2),
	HX_("openConsole",ad,7c,17,b4),
	HX_("useCommand",c4,93,20,84),
	HX_("addNewMenu",fe,1d,b0,5f),
	HX_("goToState",4e,a5,e1,c9),
	HX_("changeItem",a3,fa,08,20),
	HX_("callOnHscript",96,08,cf,05),
	HX_("callOnHscript2",dc,7a,58,0f),
	::String(null()) };

static void MainMenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MainMenuState_obj::language,"language");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::hmmmmmmmmmmmmmmmm,"hmmmmmmmmmmmmmmmm");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::Editorsnull,"Editorsnull");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::redesignedmenustyle,"redesignedmenustyle");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::Editorsmainyes,"Editorsmainyes");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::firstStart,"firstStart");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::interp,"interp");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::nightly,"nightly");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::RealityEngineVer,"RealityEngineVer");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::gameVer,"gameVer");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::finishedFunnyMove,"finishedFunnyMove");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MainMenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::language,"language");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::hmmmmmmmmmmmmmmmm,"hmmmmmmmmmmmmmmmm");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::Editorsnull,"Editorsnull");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::redesignedmenustyle,"redesignedmenustyle");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::Editorsmainyes,"Editorsmainyes");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::firstStart,"firstStart");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::interp,"interp");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::nightly,"nightly");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::RealityEngineVer,"RealityEngineVer");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::gameVer,"gameVer");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::finishedFunnyMove,"finishedFunnyMove");
};

#endif

::hx::Class MainMenuState_obj::__mClass;

static ::String MainMenuState_obj_sStaticFields[] = {
	HX_("language",58,80,11,7a),
	HX_("hmmmmmmmmmmmmmmmm",68,eb,38,45),
	HX_("Editorsnull",8d,77,8a,65),
	HX_("redesignedmenustyle",62,d6,f1,d5),
	HX_("Editorsmainyes",48,29,0f,51),
	HX_("firstStart",12,be,e9,c1),
	HX_("interp",d4,79,86,9e),
	HX_("nightly",65,3e,0e,6d),
	HX_("RealityEngineVer",31,ec,85,c3),
	HX_("gameVer",91,29,72,89),
	HX_("finishedFunnyMove",a9,44,72,47),
	::String(null())
};

void MainMenuState_obj::__register()
{
	MainMenuState_obj _hx_dummy;
	MainMenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MainMenuState",59,88,5e,20);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MainMenuState_obj::__GetStatic;
	__mClass->mSetStaticField = &MainMenuState_obj::__SetStatic;
	__mClass->mMarkFunc = MainMenuState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MainMenuState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MainMenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MainMenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MainMenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MainMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MainMenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MainMenuState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_54_boot)
HXDLIN(  54)		Editorsnull = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_55_boot)
HXDLIN(  55)		redesignedmenustyle = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_68_boot)
HXDLIN(  68)		Editorsmainyes = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_88_boot)
HXDLIN(  88)		firstStart = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_92_boot)
HXDLIN(  92)		nightly = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_94_boot)
HXDLIN(  94)		RealityEngineVer = HX_("1.1.0",f6,93,2f,55);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_95_boot)
HXDLIN(  95)		gameVer = HX_("0.2.8",be,c1,c9,c1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_102_boot)
HXDLIN( 102)		finishedFunnyMove = false;
            	}
}

