// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Judgement
#include <Judgement.h>
#endif
#ifndef INCLUDED_Option
#include <Option.h>
#endif
#ifndef INCLUDED_OptionCata
#include <OptionCata.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4303cb2e29fdc109_1342_new,"Judgement","new",0xcb22fc07,"Judgement.new","Options.hx",1342,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_4303cb2e29fdc109_1352_press,"Judgement","press",0x4636f6ea,"Judgement.press","Options.hx",1352,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_4303cb2e29fdc109_1362_updateDisplay,"Judgement","updateDisplay",0xf76371a0,"Judgement.updateDisplay","Options.hx",1362,0x9d9a0240)

void Judgement_obj::__construct(::String desc){
            	HX_STACKFRAME(&_hx_pos_4303cb2e29fdc109_1342_new)
HXLINE(1343)		super::__construct();
HXLINE(1344)		if (::OptionsMenu_obj::isInPause) {
HXLINE(1345)			this->description = HX_("This option cannot be toggled in the pause menu.",b4,21,dd,c9);
            		}
            		else {
HXLINE(1347)			this->description = desc;
            		}
HXLINE(1348)		this->acceptValues = true;
            	}

Dynamic Judgement_obj::__CreateEmpty() { return new Judgement_obj; }

void *Judgement_obj::_hx_vtable = 0;

Dynamic Judgement_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Judgement_obj > _hx_result = new Judgement_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Judgement_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x27a70eb9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x27a70eb9;
	} else {
		return inClassId==(int)0x6cd733f1;
	}
}

bool Judgement_obj::press(){
            	HX_STACKFRAME(&_hx_pos_4303cb2e29fdc109_1352_press)
HXLINE(1353)		if (::OptionsMenu_obj::isInPause) {
HXLINE(1354)			return false;
            		}
HXLINE(1355)		::OptionsMenu_obj::instance->selectedCatIndex = 5;
HXLINE(1356)		::OptionsMenu_obj::instance->switchCat(::OptionsMenu_obj::instance->options->__get(5).StaticCast<  ::OptionCata >(),false);
HXLINE(1357)		return true;
            	}


::String Judgement_obj::updateDisplay(){
            	HX_STACKFRAME(&_hx_pos_4303cb2e29fdc109_1362_updateDisplay)
HXDLIN(1362)		return HX_("Edit Judgements",74,44,87,2e);
            	}



::hx::ObjectPtr< Judgement_obj > Judgement_obj::__new(::String desc) {
	::hx::ObjectPtr< Judgement_obj > __this = new Judgement_obj();
	__this->__construct(desc);
	return __this;
}

::hx::ObjectPtr< Judgement_obj > Judgement_obj::__alloc(::hx::Ctx *_hx_ctx,::String desc) {
	Judgement_obj *__this = (Judgement_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Judgement_obj), true, "Judgement"));
	*(void **)__this = Judgement_obj::_hx_vtable;
	__this->__construct(desc);
	return __this;
}

Judgement_obj::Judgement_obj()
{
}

::hx::Val Judgement_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"press") ) { return ::hx::Val( press_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateDisplay") ) { return ::hx::Val( updateDisplay_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Judgement_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Judgement_obj_sStaticStorageInfo = 0;
#endif

static ::String Judgement_obj_sMemberFields[] = {
	HX_("press",83,53,88,c8),
	HX_("updateDisplay",39,8f,b8,86),
	::String(null()) };

::hx::Class Judgement_obj::__mClass;

void Judgement_obj::__register()
{
	Judgement_obj _hx_dummy;
	Judgement_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Judgement",95,ec,cc,fa);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Judgement_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Judgement_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Judgement_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Judgement_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

