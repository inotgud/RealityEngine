// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_BackgroundDancer
#include <BackgroundDancer.h>
#endif
#ifndef INCLUDED_BackgroundGirls
#include <BackgroundGirls.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_Debug
#include <Debug.h>
#endif
#ifndef INCLUDED_GameplayCustomizeState
#include <GameplayCustomizeState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayStateChangeables
#include <PlayStateChangeables.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Stage
#include <Stage.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TankmenBG
#include <TankmenBG.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveDirection
#include <flixel/addons/effects/chainable/FlxWaveDirection.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveEffect
#include <flixel/addons/effects/chainable/FlxWaveEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveMode
#include <flixel/addons/effects/chainable/FlxWaveMode.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_IFlxEffect
#include <flixel/addons/effects/chainable/IFlxEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscript_Interp
#include <hscript/Interp.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7b29f2b73a08853e_19_new,"Stage","new",0x85b92290,"Stage.new","Stage.hx",19,0xbcde5ee0)
static const int _hx_array_data_1738da9e_4[] = {
	(int)100,(int)300,
};
static const int _hx_array_data_1738da9e_5[] = {
	(int)100,(int)200,
};
static const int _hx_array_data_1738da9e_6[] = {
	(int)100,(int)400,
};
static const int _hx_array_data_1738da9e_7[] = {
	(int)1030,(int)230,
};
static const int _hx_array_data_1738da9e_8[] = {
	(int)970,(int)450,
};
static const int _hx_array_data_1738da9e_9[] = {
	(int)-400,(int)100,
};
static const int _hx_array_data_1738da9e_10[] = {
	(int)1090,(int)450,
};
static const int _hx_array_data_1738da9e_11[] = {
	(int)100,(int)150,
};
static const int _hx_array_data_1738da9e_12[] = {
	(int)580,(int)430,
};
static const int _hx_array_data_1738da9e_13[] = {
	(int)970,(int)670,
};
static const int _hx_array_data_1738da9e_14[] = {
	(int)250,(int)460,
};
static const int _hx_array_data_1738da9e_15[] = {
	(int)250,(int)460,
};
static const int _hx_array_data_1738da9e_16[] = {
	(int)580,(int)430,
};
static const int _hx_array_data_1738da9e_17[] = {
	(int)970,(int)670,
};
static const int _hx_array_data_1738da9e_18[] = {
	(int)-50,(int)200,
};
static const int _hx_array_data_1738da9e_19[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,(int)15,(int)16,(int)17,(int)18,
};
HX_LOCAL_STACK_FRAME(_hx_pos_7b29f2b73a08853e_817_update,"Stage","update",0x01f9b1d9,"Stage.update","Stage.hx",817,0xbcde5ee0)
HX_LOCAL_STACK_FRAME(_hx_pos_7b29f2b73a08853e_841_stepHit,"Stage","stepHit",0x9bf3d897,"Stage.stepHit","Stage.hx",841,0xbcde5ee0)
HX_LOCAL_STACK_FRAME(_hx_pos_7b29f2b73a08853e_858_stepHit,"Stage","stepHit",0x9bf3d897,"Stage.stepHit","Stage.hx",858,0xbcde5ee0)
HX_LOCAL_STACK_FRAME(_hx_pos_7b29f2b73a08853e_879_beatHit,"Stage","beatHit",0x8eb714ad,"Stage.beatHit","Stage.hx",879,0xbcde5ee0)
HX_LOCAL_STACK_FRAME(_hx_pos_7b29f2b73a08853e_911_beatHit,"Stage","beatHit",0x8eb714ad,"Stage.beatHit","Stage.hx",911,0xbcde5ee0)
HX_LOCAL_STACK_FRAME(_hx_pos_7b29f2b73a08853e_928_beatHit,"Stage","beatHit",0x8eb714ad,"Stage.beatHit","Stage.hx",928,0xbcde5ee0)
HX_LOCAL_STACK_FRAME(_hx_pos_7b29f2b73a08853e_957_lightningStrikeShit,"Stage","lightningStrikeShit",0xc7dd82ec,"Stage.lightningStrikeShit","Stage.hx",957,0xbcde5ee0)
HX_LOCAL_STACK_FRAME(_hx_pos_7b29f2b73a08853e_986_trainStart,"Stage","trainStart",0xe162ef4a,"Stage.trainStart","Stage.hx",986,0xbcde5ee0)
HX_LOCAL_STACK_FRAME(_hx_pos_7b29f2b73a08853e_997_updateTrainPos,"Stage","updateTrainPos",0xaaf47da5,"Stage.updateTrainPos","Stage.hx",997,0xbcde5ee0)
HX_LOCAL_STACK_FRAME(_hx_pos_7b29f2b73a08853e_1031_trainReset,"Stage","trainReset",0x441fc4b7,"Stage.trainReset","Stage.hx",1031,0xbcde5ee0)
HX_LOCAL_STACK_FRAME(_hx_pos_7b29f2b73a08853e_1052_resetFastCar,"Stage","resetFastCar",0x5e552099,"Stage.resetFastCar","Stage.hx",1052,0xbcde5ee0)
HX_LOCAL_STACK_FRAME(_hx_pos_7b29f2b73a08853e_1064_callOnHscript,"Stage","callOnHscript",0x8382f6c6,"Stage.callOnHscript","Stage.hx",1064,0xbcde5ee0)
HX_LOCAL_STACK_FRAME(_hx_pos_7b29f2b73a08853e_1090_fastCarDrive,"Stage","fastCarDrive",0xcd297ee2,"Stage.fastCarDrive","Stage.hx",1090,0xbcde5ee0)
HX_LOCAL_STACK_FRAME(_hx_pos_7b29f2b73a08853e_1100_fastCarDrive,"Stage","fastCarDrive",0xcd297ee2,"Stage.fastCarDrive","Stage.hx",1100,0xbcde5ee0)

void Stage_obj::__construct(::String daStage){
            	HX_GC_STACKFRAME(&_hx_pos_7b29f2b73a08853e_19_new)
HXLINE(1048)		this->fastCarCanDrive = true;
HXLINE( 993)		this->startedMoving = false;
HXLINE( 981)		this->trainCooldown = 0;
HXLINE( 980)		this->trainFinishing = false;
HXLINE( 979)		this->trainCars = 8;
HXLINE( 977)		this->trainFrameTiming = ((Float)0);
HXLINE( 976)		this->trainMoving = false;
HXLINE( 954)		this->curLight = 0;
HXLINE( 953)		this->lightningOffset = 8;
HXLINE( 952)		this->lightningStrikeBeat = 0;
HXLINE(  40)		 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  40)		{
HXLINE(  42)			 ::haxe::ds::StringMap _g1 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  42)			_g1->set(HX_("spooky",eb,bd,9e,c1),::Array_obj< int >::fromData( _hx_array_data_1738da9e_4,2));
HXDLIN(  42)			_g1->set(HX_("monster",1a,54,b0,b8),::Array_obj< int >::fromData( _hx_array_data_1738da9e_5,2));
HXLINE(  40)			_g->set(HX_("halloween",8d,bb,38,50),_g1);
            		}
HXDLIN(  40)		{
HXLINE(  43)			 ::haxe::ds::StringMap _g2 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  43)			_g2->set(HX_("pico",e5,e8,57,4a),::Array_obj< int >::fromData( _hx_array_data_1738da9e_6,2));
HXLINE(  40)			_g->set(HX_("philly",28,77,5e,ef),_g2);
            		}
HXDLIN(  40)		{
HXLINE(  44)			 ::haxe::ds::StringMap _g3 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  44)			_g3->set(HX_("bf-car",cb,95,e2,07),::Array_obj< int >::fromData( _hx_array_data_1738da9e_7,2));
HXLINE(  40)			_g->set(HX_("limo",1f,17,b3,47),_g3);
            		}
HXDLIN(  40)		{
HXLINE(  45)			 ::haxe::ds::StringMap _g4 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  45)			_g4->set(HX_("bf-christmas",79,02,f4,24),::Array_obj< int >::fromData( _hx_array_data_1738da9e_8,2));
HXDLIN(  45)			_g4->set(HX_("parents-christmas",fe,94,c5,32),::Array_obj< int >::fromData( _hx_array_data_1738da9e_9,2));
HXLINE(  40)			_g->set(HX_("mall",d4,3a,56,48),_g4);
            		}
HXDLIN(  40)		{
HXLINE(  46)			 ::haxe::ds::StringMap _g5 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  46)			_g5->set(HX_("bf-christmas",79,02,f4,24),::Array_obj< int >::fromData( _hx_array_data_1738da9e_10,2));
HXDLIN(  46)			_g5->set(HX_("monster-christmas",4f,88,85,27),::Array_obj< int >::fromData( _hx_array_data_1738da9e_11,2));
HXLINE(  40)			_g->set(HX_("mallEvil",88,d3,e3,a7),_g5);
            		}
HXDLIN(  40)		{
HXLINE(  47)			 ::haxe::ds::StringMap _g6 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  47)			_g6->set(HX_("gf-pixel",98,3e,8c,55),::Array_obj< int >::fromData( _hx_array_data_1738da9e_12,2));
HXDLIN(  47)			_g6->set(HX_("bf-pixel",fd,03,90,37),::Array_obj< int >::fromData( _hx_array_data_1738da9e_13,2));
HXDLIN(  47)			_g6->set(HX_("senpai",3c,df,8d,6b),::Array_obj< int >::fromData( _hx_array_data_1738da9e_14,2));
HXDLIN(  47)			_g6->set(HX_("senpai-angry",10,7a,b8,25),::Array_obj< int >::fromData( _hx_array_data_1738da9e_15,2));
HXLINE(  40)			_g->set(HX_("school",74,b8,c8,40),_g6);
            		}
HXDLIN(  40)		{
HXLINE(  53)			 ::haxe::ds::StringMap _g7 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  53)			_g7->set(HX_("gf-pixel",98,3e,8c,55),::Array_obj< int >::fromData( _hx_array_data_1738da9e_16,2));
HXDLIN(  53)			_g7->set(HX_("bf-pixel",fd,03,90,37),::Array_obj< int >::fromData( _hx_array_data_1738da9e_17,2));
HXDLIN(  53)			_g7->set(HX_("spirit",31,bb,a9,bd),::Array_obj< int >::fromData( _hx_array_data_1738da9e_18,2));
HXLINE(  40)			_g->set(HX_("schoolEvil",28,a1,f5,f7),_g7);
            		}
HXDLIN(  40)		this->positions = _g;
HXLINE(  34)		this->slowBacks =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  32)		this->layInFront = ::Array_obj< ::Dynamic>::__new(3)->init(0,::Array_obj< ::Dynamic>::__new(0))->init(1,::Array_obj< ::Dynamic>::__new(0))->init(2,::Array_obj< ::Dynamic>::__new(0));
HXLINE(  31)		this->animatedBacks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  30)		this->swagGroup =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  29)		this->swagBacks =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  26)		this->toAdd = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  25)		this->tweenDuration = ((Float)2);
HXLINE(  23)		this->hideLastBG = false;
HXLINE(  21)		this->curStage = HX_("",00,00,00,00);
HXLINE(  58)		super::__construct(null(),null());
HXLINE(  59)		this->curStage = daStage;
HXLINE(  60)		this->camZoom = ((Float)1.05);
HXLINE(  61)		if (::PlayStateChangeables_obj::Optimize) {
HXLINE(  62)			return;
            		}
HXLINE(  64)		::String _hx_switch_0 = daStage;
            		if (  (_hx_switch_0==HX_("halloween",8d,bb,38,50)) ){
HXLINE(  68)			 ::flixel::graphics::frames::FlxAtlasFrames hallowTex = ::Paths_obj::getSparrowAtlas(HX_("halloween_bg",77,a6,29,9b),null(),null());
HXLINE(  70)			 ::flixel::FlxSprite halloweenBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,-80,null());
HXLINE(  71)			halloweenBG->set_frames(hallowTex);
HXLINE(  72)			halloweenBG->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("halloweem bg0",37,fc,3c,6c),null(),null(),null(),null());
HXLINE(  73)			halloweenBG->animation->addByPrefix(HX_("lightning",0a,39,4a,d7),HX_("halloweem bg lightning strike",af,54,50,5b),24,false,null(),null());
HXLINE(  74)			halloweenBG->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  75)			halloweenBG->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  76)			this->swagBacks->set(HX_("halloweenBG",92,b2,88,5c),halloweenBG);
HXLINE(  77)			this->toAdd->push(halloweenBG);
HXLINE(  67)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("limo",1f,17,b3,47)) ){
HXLINE( 133)			this->camZoom = ((Float)0.90);
HXLINE( 135)			 ::flixel::FlxSprite skyBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-120,-50,null());
HXDLIN( 135)			 ::flixel::FlxSprite skyBG1 = skyBG->loadGraphic(::Paths_obj::loadImage(HX_("limo/limoSunset",45,de,4f,6e),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 136)			skyBG1->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 137)			skyBG1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 138)			this->swagBacks->set(HX_("skyBG",e6,94,2a,7e),skyBG1);
HXLINE( 139)			this->toAdd->push(skyBG1);
HXLINE( 141)			 ::flixel::FlxSprite bgLimo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,480,null());
HXLINE( 142)			bgLimo->set_frames(::Paths_obj::getSparrowAtlas(HX_("limo/bgLimo",b4,c7,45,2c),HX_("shared",a5,5e,2b,1d),null()));
HXLINE( 143)			bgLimo->animation->addByPrefix(HX_("drive",0a,69,bc,df),HX_("background limo pink",65,40,fe,9c),24,null(),null(),null());
HXLINE( 144)			bgLimo->animation->play(HX_("drive",0a,69,bc,df),null(),null(),null());
HXLINE( 145)			bgLimo->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 146)			bgLimo->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 147)			this->swagBacks->set(HX_("bgLimo",84,5f,cb,af),bgLimo);
HXLINE( 148)			this->toAdd->push(bgLimo);
HXLINE( 151)			 ::flixel::FlxSprite fastCar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,160,null());
HXLINE( 150)			 ::flixel::FlxSprite fastCar1 = fastCar->loadGraphic(::Paths_obj::loadImage(HX_("limo/fastCarLol",c1,b0,ed,94),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 152)			fastCar1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 153)			fastCar1->set_visible(false);
HXLINE( 155)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 157)				 ::flixel::group::FlxTypedGroup grpLimoDancers =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 158)				this->swagGroup->set(HX_("grpLimoDancers",70,18,93,51),grpLimoDancers);
HXLINE( 159)				this->toAdd->push(grpLimoDancers);
HXLINE( 161)				{
HXLINE( 162)					{
HXLINE( 163)						 ::BackgroundDancer dancer =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(130) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 164)						dancer->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 165)						grpLimoDancers->add(dancer).StaticCast<  ::BackgroundDancer >();
HXLINE( 166)						this->swagBacks->set((HX_("dancer",df,49,8f,1e) + 0),dancer);
            					}
HXLINE( 162)					{
HXLINE( 163)						 ::BackgroundDancer dancer1 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(500) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 164)						dancer1->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 165)						grpLimoDancers->add(dancer1).StaticCast<  ::BackgroundDancer >();
HXLINE( 166)						this->swagBacks->set((HX_("dancer",df,49,8f,1e) + 1),dancer1);
            					}
HXLINE( 162)					{
HXLINE( 163)						 ::BackgroundDancer dancer2 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(870) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 164)						dancer2->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 165)						grpLimoDancers->add(dancer2).StaticCast<  ::BackgroundDancer >();
HXLINE( 166)						this->swagBacks->set((HX_("dancer",df,49,8f,1e) + 2),dancer2);
            					}
HXLINE( 162)					{
HXLINE( 163)						 ::BackgroundDancer dancer3 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(1240) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 164)						dancer3->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 165)						grpLimoDancers->add(dancer3).StaticCast<  ::BackgroundDancer >();
HXLINE( 166)						this->swagBacks->set((HX_("dancer",df,49,8f,1e) + 3),dancer3);
            					}
HXLINE( 162)					{
HXLINE( 163)						 ::BackgroundDancer dancer4 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(1610) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 164)						dancer4->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 165)						grpLimoDancers->add(dancer4).StaticCast<  ::BackgroundDancer >();
HXLINE( 166)						this->swagBacks->set((HX_("dancer",df,49,8f,1e) + 4),dancer4);
            					}
            				}
HXLINE( 169)				this->swagBacks->set(HX_("fastCar",d8,f2,1f,de),fastCar1);
HXLINE( 170)				this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(fastCar1);
HXLINE( 171)				this->resetFastCar();
            			}
HXLINE( 174)			 ::flixel::FlxSprite overlayShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-600,null());
HXDLIN( 174)			 ::flixel::FlxSprite overlayShit1 = overlayShit->loadGraphic(::Paths_obj::loadImage(HX_("limo/limoOverlay",01,f0,58,a8),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 175)			overlayShit1->set_alpha(((Float)0.5));
HXLINE( 184)			 ::flixel::graphics::frames::FlxAtlasFrames limoTex = ::Paths_obj::getSparrowAtlas(HX_("limo/limoDrive",3b,67,64,e6),HX_("shared",a5,5e,2b,1d),null());
HXLINE( 186)			 ::flixel::FlxSprite limo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-120,550,null());
HXLINE( 187)			limo->set_frames(limoTex);
HXLINE( 188)			limo->animation->addByPrefix(HX_("drive",0a,69,bc,df),HX_("Limo stage",1d,b3,df,4c),24,null(),null(),null());
HXLINE( 189)			limo->animation->play(HX_("drive",0a,69,bc,df),null(),null(),null());
HXLINE( 190)			limo->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 191)			this->layInFront->__get(0).StaticCast< ::Array< ::Dynamic> >()->push(limo);
HXLINE( 192)			this->swagBacks->set(HX_("limo",1f,17,b3,47),limo);
HXLINE( 132)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("mall",d4,3a,56,48)) ){
HXLINE( 196)			this->camZoom = ((Float)0.80);
HXLINE( 198)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-1000,-500,null());
HXDLIN( 198)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("christmas/bgWalls",57,9f,1b,51),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 199)			bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 200)			bg1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 201)			bg1->set_active(false);
HXLINE( 202)			bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)0.8))),null());
HXLINE( 203)			bg1->updateHitbox();
HXLINE( 204)			this->swagBacks->set(HX_("bg",c5,55,00,00),bg1);
HXLINE( 205)			this->toAdd->push(bg1);
HXLINE( 207)			 ::flixel::FlxSprite upperBoppers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-240,-90,null());
HXLINE( 208)			upperBoppers->set_frames(::Paths_obj::getSparrowAtlas(HX_("christmas/upperBop",2e,2f,6d,ac),HX_("shared",a5,5e,2b,1d),null()));
HXLINE( 209)			upperBoppers->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Upper Crowd Bob",a4,72,cf,77),24,false,null(),null());
HXLINE( 210)			upperBoppers->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 211)			upperBoppers->scrollFactor->set(((Float)0.33),((Float)0.33));
HXLINE( 212)			upperBoppers->setGraphicSize(::Std_obj::_hx_int((upperBoppers->get_width() * ((Float)0.85))),null());
HXLINE( 213)			upperBoppers->updateHitbox();
HXLINE( 214)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 216)				this->swagBacks->set(HX_("upperBoppers",37,47,71,21),upperBoppers);
HXLINE( 217)				this->toAdd->push(upperBoppers);
HXLINE( 218)				this->animatedBacks->push(upperBoppers);
            			}
HXLINE( 221)			 ::flixel::FlxSprite bgEscalator =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-1100,-600,null());
HXDLIN( 221)			 ::flixel::FlxSprite bgEscalator1 = bgEscalator->loadGraphic(::Paths_obj::loadImage(HX_("christmas/bgEscalator",64,1f,c0,d5),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 222)			bgEscalator1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 223)			bgEscalator1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 224)			bgEscalator1->set_active(false);
HXLINE( 225)			bgEscalator1->setGraphicSize(::Std_obj::_hx_int((bgEscalator1->get_width() * ((Float)0.9))),null());
HXLINE( 226)			bgEscalator1->updateHitbox();
HXLINE( 227)			this->swagBacks->set(HX_("bgEscalator",b1,86,fd,8c),bgEscalator1);
HXLINE( 228)			this->toAdd->push(bgEscalator1);
HXLINE( 230)			 ::flixel::FlxSprite tree =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,370,-250,null());
HXDLIN( 230)			 ::flixel::FlxSprite tree1 = tree->loadGraphic(::Paths_obj::loadImage(HX_("christmas/christmasTree",73,57,6d,7b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 231)			tree1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 232)			tree1->scrollFactor->set(((Float)0.40),((Float)0.40));
HXLINE( 233)			this->swagBacks->set(HX_("tree",5e,99,03,4d),tree1);
HXLINE( 234)			this->toAdd->push(tree1);
HXLINE( 236)			 ::flixel::FlxSprite bottomBoppers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,140,null());
HXLINE( 237)			bottomBoppers->set_frames(::Paths_obj::getSparrowAtlas(HX_("christmas/bottomBop",cb,69,c5,59),HX_("shared",a5,5e,2b,1d),null()));
HXLINE( 238)			bottomBoppers->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Bottom Level Boppers",c8,41,25,54),24,false,null(),null());
HXLINE( 239)			bottomBoppers->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 240)			bottomBoppers->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 241)			bottomBoppers->setGraphicSize(::Std_obj::_hx_int(bottomBoppers->get_width()),null());
HXLINE( 242)			bottomBoppers->updateHitbox();
HXLINE( 243)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 245)				this->swagBacks->set(HX_("bottomBoppers",ce,2c,ba,6e),bottomBoppers);
HXLINE( 246)				this->toAdd->push(bottomBoppers);
HXLINE( 247)				this->animatedBacks->push(bottomBoppers);
            			}
HXLINE( 250)			 ::flixel::FlxSprite fgSnow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,700,null());
HXDLIN( 250)			 ::flixel::FlxSprite fgSnow1 = fgSnow->loadGraphic(::Paths_obj::loadImage(HX_("christmas/fgSnow",91,40,e7,37),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 251)			fgSnow1->set_active(false);
HXLINE( 252)			fgSnow1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 253)			this->swagBacks->set(HX_("fgSnow",64,1c,dd,4d),fgSnow1);
HXLINE( 254)			this->toAdd->push(fgSnow1);
HXLINE( 256)			 ::flixel::FlxSprite santa =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-840,150,null());
HXLINE( 257)			santa->set_frames(::Paths_obj::getSparrowAtlas(HX_("christmas/santa",00,86,f4,2d),HX_("shared",a5,5e,2b,1d),null()));
HXLINE( 258)			santa->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("santa idle in fear",72,07,31,fd),24,false,null(),null());
HXLINE( 259)			santa->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 260)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 262)				this->swagBacks->set(HX_("santa",8d,45,86,77),santa);
HXLINE( 263)				this->toAdd->push(santa);
HXLINE( 264)				this->animatedBacks->push(santa);
            			}
HXLINE( 195)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("mallEvil",88,d3,e3,a7)) ){
HXLINE( 269)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-400,-500,null());
HXDLIN( 269)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("christmas/evilBG",86,9d,17,83),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 270)			bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 271)			bg1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 272)			bg1->set_active(false);
HXLINE( 273)			bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)0.8))),null());
HXLINE( 274)			bg1->updateHitbox();
HXLINE( 275)			this->swagBacks->set(HX_("bg",c5,55,00,00),bg1);
HXLINE( 276)			this->toAdd->push(bg1);
HXLINE( 278)			 ::flixel::FlxSprite evilTree =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,300,-300,null());
HXDLIN( 278)			 ::flixel::FlxSprite evilTree1 = evilTree->loadGraphic(::Paths_obj::loadImage(HX_("christmas/evilTree",7f,5b,65,3a),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 279)			evilTree1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 280)			evilTree1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 281)			this->swagBacks->set(HX_("evilTree",12,12,68,1e),evilTree1);
HXLINE( 282)			this->toAdd->push(evilTree1);
HXLINE( 284)			 ::flixel::FlxSprite evilSnow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,700,null());
HXDLIN( 284)			 ::flixel::FlxSprite evilSnow1 = evilSnow->loadGraphic(::Paths_obj::loadImage(HX_("christmas/evilSnow",a4,24,b9,39),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 285)			evilSnow1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 286)			this->swagBacks->set(HX_("evilSnow",37,db,bb,1d),evilSnow1);
HXLINE( 287)			this->toAdd->push(evilSnow1);
HXLINE( 268)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("philly",28,77,5e,ef)) ){
HXLINE(  81)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(  81)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("philly/sky",3a,d3,d5,cc),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE(  82)			bg1->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE(  83)			this->swagBacks->set(HX_("bg",c5,55,00,00),bg1);
HXLINE(  84)			this->toAdd->push(bg1);
HXLINE(  86)			 ::flixel::FlxSprite city =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-10,null(),null());
HXDLIN(  86)			 ::flixel::FlxSprite city1 = city->loadGraphic(::Paths_obj::loadImage(HX_("philly/city",32,0d,ae,63),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE(  87)			city1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE(  88)			city1->setGraphicSize(::Std_obj::_hx_int((city1->get_width() * ((Float)0.85))),null());
HXLINE(  89)			city1->updateHitbox();
HXLINE(  90)			this->swagBacks->set(HX_("city",ab,31,c0,41),city1);
HXLINE(  91)			this->toAdd->push(city1);
HXLINE(  93)			 ::flixel::group::FlxTypedGroup phillyCityLights =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  94)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(  96)				this->swagGroup->set(HX_("phillyCityLights",30,e0,12,1f),phillyCityLights);
HXLINE(  97)				this->toAdd->push(phillyCityLights);
            			}
HXLINE( 100)			{
HXLINE( 101)				{
HXLINE( 102)					 ::flixel::FlxSprite light =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 102)					 ::flixel::FlxSprite light1 = light->loadGraphic(::Paths_obj::loadImage((HX_("philly/win",75,da,d8,cc) + 0),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 103)					light1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 104)					light1->set_visible(false);
HXLINE( 105)					light1->setGraphicSize(::Std_obj::_hx_int((light1->get_width() * ((Float)0.85))),null());
HXLINE( 106)					light1->updateHitbox();
HXLINE( 107)					light1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 108)					phillyCityLights->add(light1).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 101)				{
HXLINE( 102)					 ::flixel::FlxSprite light2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 102)					 ::flixel::FlxSprite light3 = light2->loadGraphic(::Paths_obj::loadImage((HX_("philly/win",75,da,d8,cc) + 1),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 103)					light3->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 104)					light3->set_visible(false);
HXLINE( 105)					light3->setGraphicSize(::Std_obj::_hx_int((light3->get_width() * ((Float)0.85))),null());
HXLINE( 106)					light3->updateHitbox();
HXLINE( 107)					light3->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 108)					phillyCityLights->add(light3).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 101)				{
HXLINE( 102)					 ::flixel::FlxSprite light4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 102)					 ::flixel::FlxSprite light5 = light4->loadGraphic(::Paths_obj::loadImage((HX_("philly/win",75,da,d8,cc) + 2),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 103)					light5->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 104)					light5->set_visible(false);
HXLINE( 105)					light5->setGraphicSize(::Std_obj::_hx_int((light5->get_width() * ((Float)0.85))),null());
HXLINE( 106)					light5->updateHitbox();
HXLINE( 107)					light5->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 108)					phillyCityLights->add(light5).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 101)				{
HXLINE( 102)					 ::flixel::FlxSprite light6 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 102)					 ::flixel::FlxSprite light7 = light6->loadGraphic(::Paths_obj::loadImage((HX_("philly/win",75,da,d8,cc) + 3),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 103)					light7->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 104)					light7->set_visible(false);
HXLINE( 105)					light7->setGraphicSize(::Std_obj::_hx_int((light7->get_width() * ((Float)0.85))),null());
HXLINE( 106)					light7->updateHitbox();
HXLINE( 107)					light7->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 108)					phillyCityLights->add(light7).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 101)				{
HXLINE( 102)					 ::flixel::FlxSprite light8 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 102)					 ::flixel::FlxSprite light9 = light8->loadGraphic(::Paths_obj::loadImage((HX_("philly/win",75,da,d8,cc) + 4),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 103)					light9->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 104)					light9->set_visible(false);
HXLINE( 105)					light9->setGraphicSize(::Std_obj::_hx_int((light9->get_width() * ((Float)0.85))),null());
HXLINE( 106)					light9->updateHitbox();
HXLINE( 107)					light9->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 108)					phillyCityLights->add(light9).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
HXLINE( 111)			 ::flixel::FlxSprite streetBehind =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-40,50,null());
HXDLIN( 111)			 ::flixel::FlxSprite streetBehind1 = streetBehind->loadGraphic(::Paths_obj::loadImage(HX_("philly/behindTrain",07,a4,6d,d4),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 112)			this->swagBacks->set(HX_("streetBehind",1d,21,e4,00),streetBehind1);
HXLINE( 113)			this->toAdd->push(streetBehind1);
HXLINE( 115)			 ::flixel::FlxSprite phillyTrain =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,2000,360,null());
HXDLIN( 115)			 ::flixel::FlxSprite phillyTrain1 = phillyTrain->loadGraphic(::Paths_obj::loadImage(HX_("philly/train",61,ce,51,a4),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 116)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 118)				this->swagBacks->set(HX_("phillyTrain",80,9b,65,bb),phillyTrain1);
HXLINE( 119)				this->toAdd->push(phillyTrain1);
            			}
HXLINE( 122)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 122)			this->trainSound = _hx_tmp->loadEmbedded(::Paths_obj::sound(HX_("train_passes",56,da,5a,7f),HX_("shared",a5,5e,2b,1d)),null(),null(),null());
HXLINE( 123)			::flixel::FlxG_obj::sound->list->add(this->trainSound).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE( 127)			 ::flixel::FlxSprite street =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-40,streetBehind1->y,null());
HXDLIN( 127)			 ::flixel::FlxSprite street1 = street->loadGraphic(::Paths_obj::loadImage(HX_("philly/street",4a,23,ee,ee),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 128)			this->swagBacks->set(HX_("street",03,18,2d,11),street1);
HXLINE( 129)			this->toAdd->push(street1);
HXLINE(  80)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("school",74,b8,c8,40)) ){
HXLINE( 293)			 ::flixel::FlxSprite bgSky =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 293)			 ::flixel::FlxSprite bgSky1 = bgSky->loadGraphic(::Paths_obj::loadImage(HX_("weeb/weebSky",52,34,cf,a4),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 294)			bgSky1->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 295)			this->swagBacks->set(HX_("bgSky",1c,2c,99,b1),bgSky1);
HXLINE( 296)			this->toAdd->push(bgSky1);
HXLINE( 298)			int repositionShit = -200;
HXLINE( 300)			 ::flixel::FlxSprite bgSchool =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,0,null());
HXDLIN( 300)			 ::flixel::FlxSprite bgSchool1 = bgSchool->loadGraphic(::Paths_obj::loadImage(HX_("weeb/weebSchool",a3,21,c0,f5),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 301)			bgSchool1->scrollFactor->set(((Float)0.6),((Float)0.90));
HXLINE( 302)			this->swagBacks->set(HX_("bgSchool",19,a4,cf,15),bgSchool1);
HXLINE( 303)			this->toAdd->push(bgSchool1);
HXLINE( 305)			 ::flixel::FlxSprite bgStreet =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,null(),null());
HXDLIN( 305)			 ::flixel::FlxSprite bgStreet1 = bgStreet->loadGraphic(::Paths_obj::loadImage(HX_("weeb/weebStreet",32,81,24,c6),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 306)			bgStreet1->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 307)			this->swagBacks->set(HX_("bgStreet",a8,03,34,e6),bgStreet1);
HXLINE( 308)			this->toAdd->push(bgStreet1);
HXLINE( 310)			 ::flixel::FlxSprite fgTrees =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(repositionShit + 170),130,null());
HXDLIN( 310)			 ::flixel::FlxSprite fgTrees1 = fgTrees->loadGraphic(::Paths_obj::loadImage(HX_("weeb/weebTreesBack",4d,ac,bd,40),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 311)			fgTrees1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 312)			this->swagBacks->set(HX_("fgTrees",54,84,9f,69),fgTrees1);
HXLINE( 313)			this->toAdd->push(fgTrees1);
HXLINE( 315)			 ::flixel::FlxSprite bgTrees =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(repositionShit - 380),-800,null());
HXLINE( 316)			 ::flixel::graphics::FlxGraphic treetex = ::Paths_obj::loadImage(HX_("weeb/weebTrees",06,ab,3a,76),HX_("shared",a5,5e,2b,1d));
HXDLIN( 316)			 ::flixel::graphics::frames::FlxAtlasFrames treetex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSpriteSheetPacker(treetex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebTrees",06,ab,3a,76)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),HX_("shared",a5,5e,2b,1d)));
HXLINE( 317)			bgTrees->set_frames(treetex1);
HXLINE( 318)			bgTrees->animation->add(HX_("treeLoop",e2,72,7f,2b),::Array_obj< int >::fromData( _hx_array_data_1738da9e_19,19),12,null(),null(),null());
HXLINE( 319)			bgTrees->animation->play(HX_("treeLoop",e2,72,7f,2b),null(),null(),null());
HXLINE( 320)			bgTrees->scrollFactor->set(((Float)0.85),((Float)0.85));
HXLINE( 321)			this->swagBacks->set(HX_("bgTrees",50,a9,49,c3),bgTrees);
HXLINE( 322)			this->toAdd->push(bgTrees);
HXLINE( 324)			 ::flixel::FlxSprite treeLeaves =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,-40,null());
HXLINE( 325)			treeLeaves->set_frames(::Paths_obj::getSparrowAtlas(HX_("weeb/petals",8d,ca,2b,c2),HX_("shared",a5,5e,2b,1d),null()));
HXLINE( 326)			treeLeaves->animation->addByPrefix(HX_("leaves",9c,23,7b,96),HX_("PETALS ALL",0a,57,91,88),24,true,null(),null());
HXLINE( 327)			treeLeaves->animation->play(HX_("leaves",9c,23,7b,96),null(),null(),null());
HXLINE( 328)			treeLeaves->scrollFactor->set(((Float)0.85),((Float)0.85));
HXLINE( 329)			this->swagBacks->set(HX_("treeLeaves",9a,8b,2d,d5),treeLeaves);
HXLINE( 330)			this->toAdd->push(treeLeaves);
HXLINE( 332)			int widShit = ::Std_obj::_hx_int((bgSky1->get_width() * ( (Float)(6) )));
HXLINE( 334)			bgSky1->setGraphicSize(widShit,null());
HXLINE( 335)			bgSchool1->setGraphicSize(widShit,null());
HXLINE( 336)			bgStreet1->setGraphicSize(widShit,null());
HXLINE( 337)			bgTrees->setGraphicSize(::Std_obj::_hx_int((( (Float)(widShit) ) * ((Float)1.4))),null());
HXLINE( 338)			fgTrees1->setGraphicSize(::Std_obj::_hx_int((( (Float)(widShit) ) * ((Float)0.8))),null());
HXLINE( 339)			treeLeaves->setGraphicSize(widShit,null());
HXLINE( 341)			fgTrees1->updateHitbox();
HXLINE( 342)			bgSky1->updateHitbox();
HXLINE( 343)			bgSchool1->updateHitbox();
HXLINE( 344)			bgStreet1->updateHitbox();
HXLINE( 345)			bgTrees->updateHitbox();
HXLINE( 346)			treeLeaves->updateHitbox();
HXLINE( 348)			 ::BackgroundGirls bgGirls =  ::BackgroundGirls_obj::__alloc( HX_CTX ,( (Float)(-100) ),( (Float)(190) ));
HXLINE( 349)			bgGirls->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 352)			if ((::GameplayCustomizeState_obj::freeplaySong == HX_("roses",04,6c,64,ed))) {
HXLINE( 354)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 355)					bgGirls->getScared();
            				}
            			}
HXLINE( 358)			Float _hx_tmp = bgGirls->get_width();
HXDLIN( 358)			bgGirls->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::CoolUtil_obj::daPixelZoom)),null());
HXLINE( 359)			bgGirls->updateHitbox();
HXLINE( 360)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 362)				this->swagBacks->set(HX_("bgGirls",92,16,2b,41),bgGirls);
HXLINE( 363)				this->toAdd->push(bgGirls);
            			}
HXLINE( 290)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 368)			 ::flixel::addons::effects::chainable::FlxWaveEffect waveEffectBG =  ::flixel::addons::effects::chainable::FlxWaveEffect_obj::__alloc( HX_CTX ,::flixel::addons::effects::chainable::FlxWaveMode_obj::ALL_dyn(),2,-1,3,2,null(),null());
HXLINE( 369)			 ::flixel::addons::effects::chainable::FlxWaveEffect waveEffectFG =  ::flixel::addons::effects::chainable::FlxWaveEffect_obj::__alloc( HX_CTX ,::flixel::addons::effects::chainable::FlxWaveMode_obj::ALL_dyn(),2,-1,5,2,null(),null());
HXLINE( 371)			int posX = 400;
HXLINE( 372)			int posY = 200;
HXLINE( 374)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,posX,posY,null());
HXLINE( 375)			bg->set_frames(::Paths_obj::getSparrowAtlas(HX_("weeb/animatedEvilSchool",8f,dd,53,cd),HX_("shared",a5,5e,2b,1d),null()));
HXLINE( 376)			bg->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("background 2",80,07,9d,17),24,null(),null(),null());
HXLINE( 377)			bg->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 378)			bg->scrollFactor->set(((Float)0.8),((Float)0.9));
HXLINE( 379)			bg->scale->set(6,6);
HXLINE( 380)			this->swagBacks->set(HX_("bg",c5,55,00,00),bg);
HXLINE( 381)			this->toAdd->push(bg);
HXLINE( 367)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("warzone",54,f7,be,11)) ){
HXLINE( 423)			this->camZoom = ((Float)0.9);
HXLINE( 425)			::PlayState_obj::zoomText = true;
HXLINE( 427)			 ::flixel::FlxSprite sky =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-400,-400,null());
HXDLIN( 427)			::String library = null();
HXDLIN( 427)			 ::flixel::FlxSprite sky1 = sky->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("warzone/tankSky",1c,2b,ec,e0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 428)			sky1->scrollFactor->set(0,0);
HXLINE( 429)			sky1->set_antialiasing(true);
HXLINE( 430)			sky1->setGraphicSize(::Std_obj::_hx_int((sky1->get_width() * ((Float)1.5))),null());
HXLINE( 431)			this->swagBacks->set(HX_("sky",e1,a0,57,00),sky1);
HXLINE( 432)			this->toAdd->push(sky1);
HXLINE( 435)			int clouds = ::flixel::FlxG_obj::random->_hx_int(-700,-100,null());
HXDLIN( 435)			 ::flixel::FlxSprite clouds1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,clouds,::flixel::FlxG_obj::random->_hx_int(-20,20,null()),null());
HXDLIN( 435)			::String library1 = null();
HXDLIN( 435)			 ::flixel::FlxSprite clouds2 = clouds1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("warzone/tankClouds",03,7a,b0,20)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE( 436)			clouds2->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 437)			 ::flixel::math::FlxPoint clouds3 = clouds2->velocity;
HXDLIN( 437)			clouds3->set_x(::flixel::FlxG_obj::random->_hx_float(5,15,null()));
HXLINE( 438)			clouds2->set_antialiasing(true);
HXLINE( 439)			clouds2->updateHitbox();
HXLINE( 440)			this->swagBacks->set(HX_("clouds",5e,2d,53,0e),clouds2);
HXLINE( 441)			this->toAdd->push(clouds2);
HXLINE( 443)			 ::flixel::FlxSprite mountains =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,-20,null());
HXDLIN( 443)			::String library2 = null();
HXDLIN( 443)			 ::flixel::FlxSprite mountains1 = mountains->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("warzone/tankMountains",01,9a,2d,54)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE( 444)			mountains1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 445)			mountains1->setGraphicSize(::Std_obj::_hx_int((((Float)1.2) * mountains1->get_width())),null());
HXLINE( 446)			mountains1->updateHitbox();
HXLINE( 447)			mountains1->set_antialiasing(true);
HXLINE( 448)			this->swagBacks->set(HX_("mountains",86,31,23,a5),mountains1);
HXLINE( 449)			this->toAdd->push(mountains1);
HXLINE( 451)			 ::flixel::FlxSprite buildings =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,0,null());
HXDLIN( 451)			::String library3 = null();
HXDLIN( 451)			 ::flixel::FlxSprite buildings1 = buildings->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("warzone/tankBuildings",fa,ab,28,aa)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library3),null(),null(),null(),null(),null());
HXLINE( 452)			buildings1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 453)			buildings1->setGraphicSize(::Std_obj::_hx_int((buildings1->get_width() * ((Float)1.1))),null());
HXLINE( 454)			buildings1->updateHitbox();
HXLINE( 455)			buildings1->set_antialiasing(true);
HXLINE( 456)			this->swagBacks->set(HX_("buildings",7f,43,1e,fb),buildings1);
HXLINE( 457)			this->toAdd->push(buildings1);
HXLINE( 459)			 ::flixel::FlxSprite ruins =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,0,null());
HXDLIN( 459)			::String library4 = null();
HXDLIN( 459)			 ::flixel::FlxSprite ruins1 = ruins->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("warzone/tankRuins",06,f4,cb,87)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library4),null(),null(),null(),null(),null());
HXLINE( 460)			ruins1->scrollFactor->set(((Float)0.35),((Float)0.35));
HXLINE( 461)			ruins1->setGraphicSize(::Std_obj::_hx_int((ruins1->get_width() * ((Float)1.1))),null());
HXLINE( 462)			ruins1->updateHitbox();
HXLINE( 463)			ruins1->set_antialiasing(true);
HXLINE( 464)			this->swagBacks->set(HX_("ruins",0b,25,54,f1),ruins1);
HXLINE( 465)			this->toAdd->push(ruins1);
HXLINE( 467)			 ::flixel::FlxSprite smokeLeft =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,-100,null());
HXLINE( 468)			smokeLeft->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/smokeLeft",5b,91,4d,62),null(),null()));
HXLINE( 469)			smokeLeft->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("SmokeBlurLeft ",c3,2c,88,2c),24,true,null(),null());
HXLINE( 470)			smokeLeft->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 471)			smokeLeft->set_antialiasing(true);
HXLINE( 472)			smokeLeft->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 473)			this->swagBacks->set(HX_("smokeLeft",16,a7,ec,46),smokeLeft);
HXLINE( 474)			this->toAdd->push(smokeLeft);
HXLINE( 476)			 ::flixel::FlxSprite smokeRight =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,1100,-100,null());
HXLINE( 477)			smokeRight->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/smokeRight",08,ac,9e,18),null(),null()));
HXLINE( 478)			smokeRight->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("SmokeRight ",73,ad,46,f1),24,true,null(),null());
HXLINE( 479)			smokeRight->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 480)			smokeRight->set_antialiasing(true);
HXLINE( 481)			smokeRight->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 483)			this->swagBacks->set(HX_("smokeRight",ed,99,32,3f),smokeRight);
HXLINE( 484)			this->toAdd->push(smokeRight);
HXLINE( 486)			 ::flixel::FlxSprite tower =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,100,120,null());
HXLINE( 487)			tower->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/tankWatchtower",7f,4c,22,73),null(),null()));
HXLINE( 488)			tower->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("watchtower gradient color",39,8f,02,81),24,false,null(),null());
HXLINE( 489)			tower->set_antialiasing(true);
HXLINE( 491)			this->swagBacks->set(HX_("tower",09,9e,34,14),tower);
HXLINE( 492)			this->toAdd->push(tower);
HXLINE( 494)			 ::flixel::FlxSprite tankRolling =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,300,300,null());
HXLINE( 495)			tankRolling->set_frames(::Paths_obj::getSparrowAtlas(HX_("tankRolling",bb,ab,47,f7),null(),null()));
HXLINE( 496)			tankRolling->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("BG tank w lighting ",70,a2,49,45),24,true,null(),null());
HXLINE( 497)			tankRolling->scrollFactor->set(((Float)0.5),((Float)0.5));
HXLINE( 498)			tankRolling->set_antialiasing(true);
HXLINE( 499)			tankRolling->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 501)			this->swagBacks->set(HX_("tankRolling",bb,ab,47,f7),tankRolling);
HXLINE( 502)			this->toAdd->push(tankRolling);
HXLINE( 503)			 ::flixel::FlxSprite ground =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-420,-150,null());
HXDLIN( 503)			::String library5 = null();
HXDLIN( 503)			 ::flixel::FlxSprite ground1 = ground->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("warzone/tankGround",2c,6f,85,2e)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library5),null(),null(),null(),null(),null());
HXLINE( 504)			ground1->scrollFactor->set(null(),null());
HXLINE( 505)			ground1->set_antialiasing(true);
HXLINE( 506)			ground1->setGraphicSize(::Std_obj::_hx_int((ground1->get_width() * ((Float)1.15))),null());
HXLINE( 507)			ground1->scrollFactor->set(1,1);
HXLINE( 509)			ground1->updateHitbox();
HXLINE( 510)			this->swagBacks->set(HX_("ground",87,22,28,1c),ground1);
HXLINE( 511)			Float tankX = ( (Float)(400) );
HXLINE( 512)			Float tankSpeed = ::flixel::FlxG_obj::random->_hx_float(5,7,null());
HXLINE( 513)			Float tankAngle = ( (Float)(::flixel::FlxG_obj::random->_hx_int(-90,45,null())) );
HXLINE( 514)			this->toAdd->push(ground1);
HXLINE( 515)			tankAngle = (tankAngle + (( (Float)(0) ) * tankSpeed));
HXLINE( 516)			tankRolling->set_angle(((tankAngle - ( (Float)(90) )) + 15));
HXLINE( 517)			tankRolling->set_x((tankX + (( (Float)(1500) ) * ::Math_obj::cos(((::Math_obj::PI / ( (Float)(180) )) * (tankAngle + 180))))));
HXLINE( 518)			tankRolling->set_y((1300 + (( (Float)(1100) ) * ::Math_obj::sin(((::Math_obj::PI / ( (Float)(180) )) * (tankAngle + 180))))));
HXLINE( 519)			 ::flixel::FlxSprite foreGround0 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,600,null());
HXLINE( 520)			foreGround0->scrollFactor->set(((Float)1.7),((Float)1.5));
HXLINE( 521)			foreGround0->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 522)			foreGround0->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/tank0",cb,f5,8f,a4),null(),null()));
HXLINE( 523)			 ::flixel::animation::FlxAnimationController foreGround01 = foreGround0->animation;
HXDLIN( 523)			foreGround01->addByPrefix(HX_("idle",14,a7,b3,45),HX_("fg tankhead far right instance ",87,f8,13,90),::Std_obj::_hx_int((( (Float)(24) ) * ::PlayState_obj::songMultiplier)),null(),null(),null());
HXLINE( 524)			foreGround0->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 525)			this->swagBacks->set(HX_("foreGround0",ed,b9,97,8d),foreGround0);
HXLINE( 526)			this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(foreGround0);
HXLINE( 528)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 530)				 ::flixel::FlxSprite foreGround1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,750,null());
HXLINE( 531)				foreGround1->scrollFactor->set(2,((Float)0.2));
HXLINE( 532)				foreGround1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 533)				foreGround1->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/tank1",cc,f5,8f,a4),null(),null()));
HXLINE( 534)				 ::flixel::animation::FlxAnimationController foreGround11 = foreGround1->animation;
HXDLIN( 534)				foreGround11->addByPrefix(HX_("idle",14,a7,b3,45),HX_("fg tankhead 5 instance ",69,28,a9,a7),::Std_obj::_hx_int((( (Float)(24) ) * ::PlayState_obj::songMultiplier)),null(),null(),null());
HXLINE( 535)				foreGround1->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 536)				this->swagBacks->set(HX_("foreGround1",ee,b9,97,8d),foreGround1);
HXLINE( 537)				this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(foreGround1);
            			}
HXLINE( 540)			 ::flixel::FlxSprite foreGround2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,450,940,null());
HXLINE( 541)			foreGround2->scrollFactor->set(((Float)1.5),((Float)1.5));
HXLINE( 542)			foreGround2->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 543)			foreGround2->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/tank2",cd,f5,8f,a4),null(),null()));
HXLINE( 544)			 ::flixel::animation::FlxAnimationController foreGround21 = foreGround2->animation;
HXDLIN( 544)			foreGround21->addByPrefix(HX_("idle",14,a7,b3,45),HX_("foreground man 3 instance ",db,4c,89,04),::Std_obj::_hx_int((( (Float)(24) ) * ::PlayState_obj::songMultiplier)),null(),null(),null());
HXLINE( 545)			foreGround2->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 546)			this->swagBacks->set(HX_("foreGround2",ef,b9,97,8d),foreGround2);
HXLINE( 547)			this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(foreGround2);
HXLINE( 549)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 551)				 ::flixel::FlxSprite foreGround3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,1300,900,null());
HXLINE( 552)				foreGround3->scrollFactor->set(((Float)1.5),((Float)1.5));
HXLINE( 553)				foreGround3->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 554)				foreGround3->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/tank3",ce,f5,8f,a4),null(),null()));
HXLINE( 555)				 ::flixel::animation::FlxAnimationController foreGround31 = foreGround3->animation;
HXDLIN( 555)				foreGround31->addByPrefix(HX_("idle",14,a7,b3,45),HX_("fg tankman bobbin 3 instance ",3f,48,d8,48),::Std_obj::_hx_int((( (Float)(24) ) * ::PlayState_obj::songMultiplier)),null(),null(),null());
HXLINE( 556)				foreGround3->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 557)				this->swagBacks->set(HX_("foreGround3",f0,b9,97,8d),foreGround3);
HXLINE( 558)				this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(foreGround3);
            			}
HXLINE( 561)			 ::flixel::FlxSprite foreGround4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,1620,710,null());
HXLINE( 562)			foreGround4->scrollFactor->set(((Float)1.5),((Float)1.5));
HXLINE( 563)			foreGround4->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 564)			foreGround4->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/tank4",cf,f5,8f,a4),null(),null()));
HXLINE( 565)			 ::flixel::animation::FlxAnimationController foreGround41 = foreGround4->animation;
HXDLIN( 565)			foreGround41->addByPrefix(HX_("idle",14,a7,b3,45),HX_("fg tankhead far right instance ",87,f8,13,90),::Std_obj::_hx_int((( (Float)(24) ) * ::PlayState_obj::songMultiplier)),null(),null(),null());
HXLINE( 566)			foreGround4->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 567)			this->swagBacks->set(HX_("foreGround4",f1,b9,97,8d),foreGround4);
HXLINE( 568)			this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(foreGround4);
HXLINE( 570)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 572)				 ::flixel::FlxSprite foreGround5 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,1400,1290,null());
HXLINE( 573)				foreGround5->scrollFactor->set(((Float)3.5),((Float)2.5));
HXLINE( 574)				foreGround5->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 575)				foreGround5->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/tank5",d0,f5,8f,a4),null(),null()));
HXLINE( 576)				 ::flixel::animation::FlxAnimationController foreGround51 = foreGround5->animation;
HXDLIN( 576)				foreGround51->addByPrefix(HX_("idle",14,a7,b3,45),HX_("fg tankhead 4 instance ",28,bd,ca,26),::Std_obj::_hx_int((( (Float)(24) ) * ::PlayState_obj::songMultiplier)),null(),null(),null());
HXLINE( 577)				foreGround5->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 578)				this->swagBacks->set(HX_("foreGround5",f2,b9,97,8d),foreGround5);
HXLINE( 579)				this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(foreGround5);
            			}
HXLINE( 422)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("warzone-stress",4d,5f,1e,93)) ){
HXLINE( 585)			this->camZoom = ((Float)0.9);
HXLINE( 587)			::PlayState_obj::zoomText = true;
HXLINE( 589)			 ::flixel::FlxSprite sky =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-400,-400,null());
HXDLIN( 589)			::String library = null();
HXDLIN( 589)			 ::flixel::FlxSprite sky1 = sky->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("warzone/tankSky",1c,2b,ec,e0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 590)			sky1->scrollFactor->set(0,0);
HXLINE( 591)			sky1->set_antialiasing(true);
HXLINE( 592)			sky1->setGraphicSize(::Std_obj::_hx_int((sky1->get_width() * ((Float)1.5))),null());
HXLINE( 593)			this->swagBacks->set(HX_("sky",e1,a0,57,00),sky1);
HXLINE( 594)			this->toAdd->push(sky1);
HXLINE( 597)			int clouds = ::flixel::FlxG_obj::random->_hx_int(-700,-100,null());
HXDLIN( 597)			 ::flixel::FlxSprite clouds1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,clouds,::flixel::FlxG_obj::random->_hx_int(-20,20,null()),null());
HXDLIN( 597)			::String library1 = null();
HXDLIN( 597)			 ::flixel::FlxSprite clouds2 = clouds1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("warzone/tankClouds",03,7a,b0,20)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE( 598)			clouds2->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 599)			 ::flixel::math::FlxPoint clouds3 = clouds2->velocity;
HXDLIN( 599)			clouds3->set_x(::flixel::FlxG_obj::random->_hx_float(5,15,null()));
HXLINE( 600)			clouds2->set_antialiasing(true);
HXLINE( 601)			clouds2->updateHitbox();
HXLINE( 602)			this->swagBacks->set(HX_("clouds",5e,2d,53,0e),clouds2);
HXLINE( 603)			this->toAdd->push(clouds2);
HXLINE( 605)			 ::flixel::FlxSprite mountains =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,-20,null());
HXDLIN( 605)			::String library2 = null();
HXDLIN( 605)			 ::flixel::FlxSprite mountains1 = mountains->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("warzone/tankMountains",01,9a,2d,54)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE( 606)			mountains1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 607)			mountains1->setGraphicSize(::Std_obj::_hx_int((((Float)1.2) * mountains1->get_width())),null());
HXLINE( 608)			mountains1->updateHitbox();
HXLINE( 609)			mountains1->set_antialiasing(true);
HXLINE( 610)			this->swagBacks->set(HX_("mountains",86,31,23,a5),mountains1);
HXLINE( 611)			this->toAdd->push(mountains1);
HXLINE( 613)			 ::flixel::FlxSprite buildings =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,0,null());
HXDLIN( 613)			::String library3 = null();
HXDLIN( 613)			 ::flixel::FlxSprite buildings1 = buildings->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("warzone/tankBuildings",fa,ab,28,aa)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library3),null(),null(),null(),null(),null());
HXLINE( 614)			buildings1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 615)			buildings1->setGraphicSize(::Std_obj::_hx_int((buildings1->get_width() * ((Float)1.1))),null());
HXLINE( 616)			buildings1->updateHitbox();
HXLINE( 617)			buildings1->set_antialiasing(true);
HXLINE( 618)			this->swagBacks->set(HX_("buildings",7f,43,1e,fb),buildings1);
HXLINE( 619)			this->toAdd->push(buildings1);
HXLINE( 621)			 ::flixel::FlxSprite ruins =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,0,null());
HXDLIN( 621)			::String library4 = null();
HXDLIN( 621)			 ::flixel::FlxSprite ruins1 = ruins->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("warzone/tankRuins",06,f4,cb,87)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library4),null(),null(),null(),null(),null());
HXLINE( 622)			ruins1->scrollFactor->set(((Float)0.35),((Float)0.35));
HXLINE( 623)			ruins1->setGraphicSize(::Std_obj::_hx_int((ruins1->get_width() * ((Float)1.1))),null());
HXLINE( 624)			ruins1->updateHitbox();
HXLINE( 625)			ruins1->set_antialiasing(true);
HXLINE( 626)			this->swagBacks->set(HX_("ruins",0b,25,54,f1),ruins1);
HXLINE( 627)			this->toAdd->push(ruins1);
HXLINE( 630)			 ::flixel::FlxSprite smokeLeft =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,-100,null());
HXLINE( 631)			smokeLeft->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/smokeLeft",5b,91,4d,62),null(),null()));
HXLINE( 632)			smokeLeft->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("SmokeBlurLeft ",c3,2c,88,2c),24,true,null(),null());
HXLINE( 633)			smokeLeft->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 634)			smokeLeft->set_antialiasing(true);
HXLINE( 635)			smokeLeft->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 636)			this->swagBacks->set(HX_("smokeLeft",16,a7,ec,46),smokeLeft);
HXLINE( 637)			this->toAdd->push(smokeLeft);
HXLINE( 639)			 ::flixel::FlxSprite smokeRight =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,1100,-100,null());
HXLINE( 640)			smokeRight->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/smokeRight",08,ac,9e,18),null(),null()));
HXLINE( 641)			smokeRight->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("SmokeRight ",73,ad,46,f1),24,true,null(),null());
HXLINE( 642)			smokeRight->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 643)			smokeRight->set_antialiasing(true);
HXLINE( 644)			smokeRight->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 646)			this->swagBacks->set(HX_("smokeRight",ed,99,32,3f),smokeRight);
HXLINE( 647)			this->toAdd->push(smokeRight);
HXLINE( 649)			 ::flixel::FlxSprite tower =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,100,120,null());
HXLINE( 650)			tower->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/tankWatchtower",7f,4c,22,73),null(),null()));
HXLINE( 651)			tower->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("watchtower gradient color",39,8f,02,81),24,false,null(),null());
HXLINE( 652)			tower->set_antialiasing(true);
HXLINE( 654)			this->swagBacks->set(HX_("tower",09,9e,34,14),tower);
HXLINE( 655)			this->toAdd->push(tower);
HXLINE( 657)			 ::flixel::FlxSprite tankRolling =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,300,300,null());
HXLINE( 658)			tankRolling->set_frames(::Paths_obj::getSparrowAtlas(HX_("tankRolling",bb,ab,47,f7),null(),null()));
HXLINE( 659)			tankRolling->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("BG tank w lighting ",70,a2,49,45),24,true,null(),null());
HXLINE( 660)			tankRolling->scrollFactor->set(((Float)0.5),((Float)0.5));
HXLINE( 661)			tankRolling->set_antialiasing(true);
HXLINE( 662)			tankRolling->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 664)			this->swagBacks->set(HX_("tankRolling",bb,ab,47,f7),tankRolling);
HXLINE( 665)			this->toAdd->push(tankRolling);
HXLINE( 667)			 ::flixel::FlxSprite ground =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-420,-150,null());
HXDLIN( 667)			::String library5 = null();
HXDLIN( 667)			 ::flixel::FlxSprite ground1 = ground->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("warzone/tankGround",2c,6f,85,2e)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library5),null(),null(),null(),null(),null());
HXLINE( 668)			ground1->scrollFactor->set(null(),null());
HXLINE( 669)			ground1->set_antialiasing(true);
HXLINE( 670)			ground1->setGraphicSize(::Std_obj::_hx_int((ground1->get_width() * ((Float)1.15))),null());
HXLINE( 671)			ground1->scrollFactor->set(1,1);
HXLINE( 673)			ground1->updateHitbox();
HXLINE( 674)			this->swagBacks->set(HX_("ground",87,22,28,1c),ground1);
HXLINE( 675)			Float tankX = ( (Float)(400) );
HXLINE( 676)			Float tankSpeed = ::flixel::FlxG_obj::random->_hx_float(5,7,null());
HXLINE( 677)			Float tankAngle = ( (Float)(::flixel::FlxG_obj::random->_hx_int(-90,45,null())) );
HXLINE( 678)			this->toAdd->push(ground1);
HXLINE( 679)			tankAngle = (tankAngle + (( (Float)(0) ) * tankSpeed));
HXLINE( 680)			tankRolling->set_angle(((tankAngle - ( (Float)(90) )) + 15));
HXLINE( 681)			tankRolling->set_x((tankX + (( (Float)(1500) ) * ::Math_obj::cos(((::Math_obj::PI / ( (Float)(180) )) * (tankAngle + 180))))));
HXLINE( 682)			tankRolling->set_y((1300 + (( (Float)(1100) ) * ::Math_obj::sin(((::Math_obj::PI / ( (Float)(180) )) * (tankAngle + 180))))));
HXLINE( 683)			 ::flixel::FlxSprite foreGround0 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,600,null());
HXLINE( 684)			foreGround0->scrollFactor->set(((Float)1.7),((Float)1.5));
HXLINE( 685)			foreGround0->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 686)			foreGround0->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/tank0",cb,f5,8f,a4),null(),null()));
HXLINE( 687)			 ::flixel::animation::FlxAnimationController foreGround01 = foreGround0->animation;
HXDLIN( 687)			foreGround01->addByPrefix(HX_("idle",14,a7,b3,45),HX_("fg tankhead far right instance ",87,f8,13,90),::Std_obj::_hx_int((( (Float)(24) ) * ::PlayState_obj::songMultiplier)),null(),null(),null());
HXLINE( 688)			foreGround0->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 689)			this->swagBacks->set(HX_("foreGround0",ed,b9,97,8d),foreGround0);
HXLINE( 690)			this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(foreGround0);
HXLINE( 692)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 694)				 ::flixel::FlxSprite foreGround1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,750,null());
HXLINE( 695)				foreGround1->scrollFactor->set(2,((Float)0.2));
HXLINE( 696)				foreGround1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 697)				foreGround1->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/tank1",cc,f5,8f,a4),null(),null()));
HXLINE( 698)				 ::flixel::animation::FlxAnimationController foreGround11 = foreGround1->animation;
HXDLIN( 698)				foreGround11->addByPrefix(HX_("idle",14,a7,b3,45),HX_("fg tankhead 5 instance ",69,28,a9,a7),::Std_obj::_hx_int((( (Float)(24) ) * ::PlayState_obj::songMultiplier)),null(),null(),null());
HXLINE( 699)				foreGround1->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 700)				this->swagBacks->set(HX_("foreGround1",ee,b9,97,8d),foreGround1);
HXLINE( 701)				this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(foreGround1);
            			}
HXLINE( 704)			 ::flixel::FlxSprite foreGround2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,450,940,null());
HXLINE( 705)			foreGround2->scrollFactor->set(((Float)1.5),((Float)1.5));
HXLINE( 706)			foreGround2->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 707)			foreGround2->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/tank2",cd,f5,8f,a4),null(),null()));
HXLINE( 708)			 ::flixel::animation::FlxAnimationController foreGround21 = foreGround2->animation;
HXDLIN( 708)			foreGround21->addByPrefix(HX_("idle",14,a7,b3,45),HX_("foreground man 3 instance ",db,4c,89,04),::Std_obj::_hx_int((( (Float)(24) ) * ::PlayState_obj::songMultiplier)),null(),null(),null());
HXLINE( 709)			foreGround2->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 710)			this->swagBacks->set(HX_("foreGround2",ef,b9,97,8d),foreGround2);
HXLINE( 711)			this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(foreGround2);
HXLINE( 713)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 715)				 ::flixel::FlxSprite foreGround3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,1300,900,null());
HXLINE( 716)				foreGround3->scrollFactor->set(((Float)1.5),((Float)1.5));
HXLINE( 717)				foreGround3->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 718)				foreGround3->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/tank3",ce,f5,8f,a4),null(),null()));
HXLINE( 719)				 ::flixel::animation::FlxAnimationController foreGround31 = foreGround3->animation;
HXDLIN( 719)				foreGround31->addByPrefix(HX_("idle",14,a7,b3,45),HX_("fg tankman bobbin 3 instance ",3f,48,d8,48),::Std_obj::_hx_int((( (Float)(24) ) * ::PlayState_obj::songMultiplier)),null(),null(),null());
HXLINE( 720)				foreGround3->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 721)				this->swagBacks->set(HX_("foreGround3",f0,b9,97,8d),foreGround3);
HXLINE( 722)				this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(foreGround3);
            			}
HXLINE( 725)			 ::flixel::FlxSprite foreGround4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,1620,710,null());
HXLINE( 726)			foreGround4->scrollFactor->set(((Float)1.5),((Float)1.5));
HXLINE( 727)			foreGround4->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 728)			foreGround4->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/tank4",cf,f5,8f,a4),null(),null()));
HXLINE( 729)			 ::flixel::animation::FlxAnimationController foreGround41 = foreGround4->animation;
HXDLIN( 729)			foreGround41->addByPrefix(HX_("idle",14,a7,b3,45),HX_("fg tankhead far right instance ",87,f8,13,90),::Std_obj::_hx_int((( (Float)(24) ) * ::PlayState_obj::songMultiplier)),null(),null(),null());
HXLINE( 730)			foreGround4->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 731)			this->swagBacks->set(HX_("foreGround4",f1,b9,97,8d),foreGround4);
HXLINE( 732)			this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(foreGround4);
HXLINE( 734)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 736)				 ::flixel::FlxSprite foreGround5 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,1400,1290,null());
HXLINE( 737)				foreGround5->scrollFactor->set(((Float)3.5),((Float)2.5));
HXLINE( 738)				foreGround5->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 739)				foreGround5->set_frames(::Paths_obj::getSparrowAtlas(HX_("warzone/tank5",d0,f5,8f,a4),null(),null()));
HXLINE( 740)				 ::flixel::animation::FlxAnimationController foreGround51 = foreGround5->animation;
HXDLIN( 740)				foreGround51->addByPrefix(HX_("idle",14,a7,b3,45),HX_("fg tankhead 4 instance ",28,bd,ca,26),::Std_obj::_hx_int((( (Float)(24) ) * ::PlayState_obj::songMultiplier)),null(),null(),null());
HXLINE( 741)				foreGround5->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 742)				this->swagBacks->set(HX_("foreGround5",f2,b9,97,8d),foreGround5);
HXLINE( 743)				this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(foreGround5);
            			}
HXLINE( 746)			 ::flixel::group::FlxTypedGroup tankmanRun =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 747)			this->add(tankmanRun);
HXLINE( 749)			 ::TankmenBG firstTank =  ::TankmenBG_obj::__alloc( HX_CTX ,( (Float)(20) ),( (Float)(500) ),true);
HXLINE( 750)			firstTank->resetShit(( (Float)(20) ),( (Float)(600) ),true);
HXLINE( 751)			firstTank->strumTime = ( (Float)(10) );
HXLINE( 752)			tankmanRun->add(firstTank).StaticCast<  ::TankmenBG >();
HXLINE( 754)			{
HXLINE( 754)				int _g = 0;
HXDLIN( 754)				int _g1 = ::TankmenBG_obj::animationNotes->get_length();
HXDLIN( 754)				while((_g < _g1)){
HXLINE( 754)					_g = (_g + 1);
HXDLIN( 754)					int i = (_g - 1);
HXLINE( 756)					if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 16)) {
HXLINE( 757)						 ::TankmenBG tankBih = tankmanRun->recycle(::hx::ClassOf< ::TankmenBG >(),null(),null(),null()).StaticCast<  ::TankmenBG >();
HXLINE( 758)						tankBih->strumTime = ( (Float)(::TankmenBG_obj::animationNotes->__get(i)->__GetItem(0)) );
HXLINE( 759)						int _hx_tmp = (200 + ::flixel::FlxG_obj::random->_hx_int(50,100,null()));
HXDLIN( 759)						tankBih->resetShit(( (Float)(500) ),( (Float)(_hx_tmp) ),::hx::IsLess( ::TankmenBG_obj::animationNotes->__get(i)->__GetItem(1),2 ));
HXLINE( 760)						tankmanRun->add(tankBih).StaticCast<  ::TankmenBG >();
            					}
            				}
            			}
HXLINE( 764)			this->add(tankmanRun);
HXLINE( 584)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE( 770)			this->curStage = ( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
HXLINE( 771)			 ::Dynamic jsonData = ::Paths_obj::loadStageJson(this->curStage,null());
HXLINE( 772)			if (::hx::IsNull( jsonData )) {
HXLINE( 774)				{
HXLINE( 774)					 ::Dynamic input = HX_("Stage Error!",bb,a4,c4,ba);
HXDLIN( 774)					if (::hx::IsNotNull( input )) {
HXLINE( 774)						::cpp::VirtualArray output = ::Debug_obj::formatOutput(input,::hx::SourceInfo(HX_("source/Stage.hx",d4,81,fd,a8),774,HX_("Stage",9e,da,38,17),HX_("new",60,d0,53,00)));
HXDLIN( 774)						::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_ERROR);
HXDLIN( 774)						::Debug_obj::writeToLogFile(output,HX_("ERROR",a8,03,18,f1));
            					}
            				}
HXLINE( 775)				return;
            			}
HXLINE( 777)			 ::Dynamic data = jsonData;
HXLINE( 779)			this->camZoom = ( (Float)(data->__Field(HX_("camzoom",a2,ca,10,f1),::hx::paccDynamic)) );
HXLINE( 780)			{
HXLINE( 780)				int _g = 0;
HXDLIN( 780)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(data->__Field(HX_("stagesprites",d0,31,91,99),::hx::paccDynamic)) );
HXDLIN( 780)				while((_g < _g1->length)){
HXLINE( 780)					 ::Dynamic stagespritelayer = _g1->__get(_g);
HXDLIN( 780)					_g = (_g + 1);
HXLINE( 782)					 ::flixel::FlxSprite stagenewlayer =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,stagespritelayer->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),stagespritelayer->__Field(HX_("y",79,00,00,00),::hx::paccDynamic),null());
HXDLIN( 782)					::String library = null();
HXDLIN( 782)					 ::flixel::FlxSprite stagenewlayer1 = stagenewlayer->loadGraphic(::Paths_obj::getPath(( (::String)(((HX_("images/",77,50,74,c1) + stagespritelayer->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic)) + HX_(".png",3b,2d,bd,1e))) ),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 783)					stagenewlayer1->scrollFactor->set(0,0);
HXLINE( 784)					stagenewlayer1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 785)					if (::hx::IsEq( stagespritelayer->__Field(HX_("animated",a3,72,f2,88),::hx::paccDynamic),true )) {
HXLINE( 787)						stagenewlayer1->set_frames(::Paths_obj::getSparrowAtlas(( (::String)(stagespritelayer->__Field(HX_("sparrowatlas",bf,e5,9f,f1),::hx::paccDynamic)) ),null(),null()));
            					}
HXLINE( 789)					if (::hx::IsEq( stagespritelayer->__Field(HX_("scrollFactor",bc,ec,cf,3b),::hx::paccDynamic),true )) {
HXLINE( 791)						stagenewlayer1->scrollFactor->set(null(),null());
            					}
HXLINE( 793)					this->swagBacks->set(HX_("stagenewlayer",2f,ae,8e,8b),stagenewlayer1);
HXLINE( 794)					stagenewlayer1->updateHitbox();
HXLINE( 795)					if (::hx::IsEq( stagespritelayer->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),HX_("stageFront",0b,6d,de,59) )) {
HXLINE( 797)						stagenewlayer1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 798)						stagenewlayer1->setGraphicSize(::Std_obj::_hx_int((stagenewlayer1->get_width() * ((Float)1.1))),null());
            					}
HXLINE( 800)					if (::hx::IsEq( stagespritelayer->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),HX_("stageCurtains",ff,a8,cc,24) )) {
HXLINE( 802)						stagenewlayer1->scrollFactor->set(((Float)1.3),((Float)1.3));
HXLINE( 803)						stagenewlayer1->setGraphicSize(::Std_obj::_hx_int((stagenewlayer1->get_width() * ((Float)0.9))),null());
            					}
HXLINE( 805)					if (::hx::IsEq( stagespritelayer->__Field(HX_("animated",a3,72,f2,88),::hx::paccDynamic),true )) {
HXLINE( 807)						stagenewlayer1->animation->play(( (::String)(stagespritelayer->__Field(HX_("startanim",73,d3,8b,0e),::hx::paccDynamic)) ),null(),null(),null());
            					}
HXLINE( 809)					this->toAdd->push(stagenewlayer1);
            				}
            			}
            		}
            		_hx_goto_1:;
            	}

Dynamic Stage_obj::__CreateEmpty() { return new Stage_obj; }

void *Stage_obj::_hx_vtable = 0;

Dynamic Stage_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Stage_obj > _hx_result = new Stage_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Stage_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0b7d43fa) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b7d43fa;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void Stage_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_7b29f2b73a08853e_817_update)
HXLINE( 818)		this->super::update(elapsed);
HXLINE( 820)		if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 822)			if ((this->curStage == HX_("philly",28,77,5e,ef))) {
HXLINE( 825)				if (this->trainMoving) {
HXLINE( 827)					 ::Stage _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 827)					_hx_tmp->trainFrameTiming = (_hx_tmp->trainFrameTiming + elapsed);
HXLINE( 829)					if ((this->trainFrameTiming >= ((Float)0.041666666666666664))) {
HXLINE( 831)						this->updateTrainPos();
HXLINE( 832)						this->trainFrameTiming = ( (Float)(0) );
            					}
            				}
            			}
            		}
            	}


void Stage_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_7b29f2b73a08853e_841_stepHit)
HXLINE( 842)		this->super::stepHit();
HXLINE( 844)		if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 846)			::Array< ::Dynamic> array = ( (::Array< ::Dynamic>)(this->slowBacks->get(this->curStep)) );
HXLINE( 847)			bool _hx_tmp;
HXDLIN( 847)			if (::hx::IsNotNull( array )) {
HXLINE( 847)				_hx_tmp = (array->length > 0);
            			}
            			else {
HXLINE( 847)				_hx_tmp = false;
            			}
HXDLIN( 847)			if (_hx_tmp) {
HXLINE( 849)				if (this->hideLastBG) {
HXLINE( 851)					{
HXLINE( 851)						 ::Dynamic bg = this->swagBacks->iterator();
HXDLIN( 851)						while(( (bool)(bg->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 851)							 ::flixel::FlxSprite bg1 = ( ( ::flixel::FlxSprite)(bg->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 853)							if (!(array->contains(bg1))) {
            								HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,bg1) HXARGC(1)
            								void _hx_run( ::flixel::tweens::FlxTween tween){
            									HX_STACKFRAME(&_hx_pos_7b29f2b73a08853e_858_stepHit)
HXLINE( 858)									bg1->set_visible(false);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 855)								 ::flixel::tweens::misc::VarTween tween = ::flixel::tweens::FlxTween_obj::tween(bg1, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("alpha",5e,a7,96,21),0)),this->tweenDuration, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(bg1)))));
            							}
            						}
            					}
HXLINE( 863)					{
HXLINE( 863)						int _g = 0;
HXDLIN( 863)						while((_g < array->length)){
HXLINE( 863)							 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 863)							_g = (_g + 1);
HXLINE( 865)							bg->set_visible(true);
HXLINE( 866)							::flixel::tweens::FlxTween_obj::tween(bg, ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("alpha",5e,a7,96,21),1)),this->tweenDuration,null());
            						}
            					}
            				}
            				else {
HXLINE( 871)					int _g = 0;
HXDLIN( 871)					while((_g < array->length)){
HXLINE( 871)						 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 871)						_g = (_g + 1);
HXLINE( 872)						bg->set_visible(!(bg->visible));
            					}
            				}
            			}
            		}
            	}


void Stage_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_7b29f2b73a08853e_879_beatHit)
HXLINE( 880)		this->super::beatHit();
HXLINE( 882)		bool _hx_tmp;
HXDLIN( 882)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 882)			_hx_tmp = (this->animatedBacks->length > 0);
            		}
            		else {
HXLINE( 882)			_hx_tmp = false;
            		}
HXDLIN( 882)		if (_hx_tmp) {
HXLINE( 884)			int _g = 0;
HXDLIN( 884)			::Array< ::Dynamic> _g1 = this->animatedBacks;
HXDLIN( 884)			while((_g < _g1->length)){
HXLINE( 884)				 ::flixel::FlxSprite bg = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 884)				_g = (_g + 1);
HXLINE( 885)				bg->animation->play(HX_("idle",14,a7,b3,45),true,null(),null());
            			}
            		}
HXLINE( 888)		if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 890)			::String _hx_switch_0 = this->curStage;
            			if (  (_hx_switch_0==HX_("halloween",8d,bb,38,50)) ){
HXLINE( 893)				bool _hx_tmp;
HXDLIN( 893)				Float Chance;
HXDLIN( 893)				if ((::Conductor_obj::bpm > 320)) {
HXLINE( 893)					Chance = ( (Float)(100) );
            				}
            				else {
HXLINE( 893)					Chance = ( (Float)(10) );
            				}
HXDLIN( 893)				if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < Chance)) {
HXLINE( 893)					_hx_tmp = (this->curBeat > (this->lightningStrikeBeat + this->lightningOffset));
            				}
            				else {
HXLINE( 893)					_hx_tmp = false;
            				}
HXDLIN( 893)				if (_hx_tmp) {
HXLINE( 895)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 897)						this->lightningStrikeShit();
            					}
            				}
HXLINE( 893)				goto _hx_goto_27;
            			}
            			if (  (_hx_switch_0==HX_("limo",1f,17,b3,47)) ){
HXLINE( 907)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            					void _hx_run( ::BackgroundDancer dancer){
            						HX_STACKFRAME(&_hx_pos_7b29f2b73a08853e_911_beatHit)
HXLINE( 911)						dancer->dance();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 909)					( ( ::flixel::group::FlxTypedGroup)(this->swagGroup->get(HX_("grpLimoDancers",70,18,93,51))) )->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE( 914)					bool _hx_tmp;
HXDLIN( 914)					if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 10)) {
HXLINE( 914)						_hx_tmp = this->fastCarCanDrive;
            					}
            					else {
HXLINE( 914)						_hx_tmp = false;
            					}
HXDLIN( 914)					if (_hx_tmp) {
HXLINE( 915)						this->fastCarDrive();
            					}
            				}
HXLINE( 907)				goto _hx_goto_27;
            			}
            			if (  (_hx_switch_0==HX_("philly",28,77,5e,ef)) ){
HXLINE( 918)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 920)					if (!(this->trainMoving)) {
HXLINE( 921)						 ::Stage _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 921)						_hx_tmp->trainCooldown = (_hx_tmp->trainCooldown + 1);
            					}
HXLINE( 923)					if ((::hx::Mod(this->curBeat,4) == 0)) {
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            						void _hx_run( ::flixel::FlxSprite light){
            							HX_STACKFRAME(&_hx_pos_7b29f2b73a08853e_928_beatHit)
HXLINE( 928)							light->set_visible(false);
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 925)						 ::flixel::group::FlxTypedGroup phillyCityLights = ( ( ::flixel::group::FlxTypedGroup)(this->swagGroup->get(HX_("phillyCityLights",30,e0,12,1f))) );
HXLINE( 926)						phillyCityLights->forEach( ::Dynamic(new _hx_Closure_1()),null());
HXLINE( 931)						this->curLight = ::flixel::FlxG_obj::random->_hx_int(0,(phillyCityLights->length - 1),null());
HXLINE( 933)						phillyCityLights->members->__get(this->curLight)->__SetField(HX_("visible",72,78,24,a3),true,::hx::paccDynamic);
            					}
            				}
HXLINE( 938)				bool _hx_tmp;
HXDLIN( 938)				bool _hx_tmp1;
HXDLIN( 938)				bool _hx_tmp2;
HXDLIN( 938)				if ((::hx::Mod(this->curBeat,8) == 4)) {
HXLINE( 938)					Float Chance;
HXDLIN( 938)					if ((::Conductor_obj::bpm > 320)) {
HXLINE( 938)						Chance = ( (Float)(150) );
            					}
            					else {
HXLINE( 938)						Chance = ( (Float)(30) );
            					}
HXDLIN( 938)					_hx_tmp2 = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < Chance);
            				}
            				else {
HXLINE( 938)					_hx_tmp2 = false;
            				}
HXDLIN( 938)				if (_hx_tmp2) {
HXLINE( 938)					_hx_tmp1 = !(this->trainMoving);
            				}
            				else {
HXLINE( 938)					_hx_tmp1 = false;
            				}
HXDLIN( 938)				if (_hx_tmp1) {
HXLINE( 938)					_hx_tmp = (this->trainCooldown > 8);
            				}
            				else {
HXLINE( 938)					_hx_tmp = false;
            				}
HXDLIN( 938)				if (_hx_tmp) {
HXLINE( 940)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 942)						this->trainCooldown = ::flixel::FlxG_obj::random->_hx_int(-4,0,null());
HXLINE( 943)						this->trainStart();
            					}
            				}
HXLINE( 917)				goto _hx_goto_27;
            			}
            			if (  (_hx_switch_0==HX_("school",74,b8,c8,40)) ){
HXLINE( 902)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 904)					this->swagBacks->get(HX_("bgGirls",92,16,2b,41))->__Field(HX_("dance",33,83,83,d4),::hx::paccDynamic)();
            				}
HXLINE( 902)				goto _hx_goto_27;
            			}
            			_hx_goto_27:;
            		}
            	}


void Stage_obj::lightningStrikeShit(){
            	HX_STACKFRAME(&_hx_pos_7b29f2b73a08853e_957_lightningStrikeShit)
HXLINE( 958)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 958)		_hx_tmp->play(::Paths_obj::sound((HX_("thunder_",bb,58,cf,2f) + ::flixel::FlxG_obj::random->_hx_int(1,2,null())),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE( 959)		 ::Dynamic(this->swagBacks->get(HX_("halloweenBG",92,b2,88,5c))->__Field(HX_("animation",04,ef,34,4b),::hx::paccDynamic))->__Field(HX_("play",f4,2d,5a,4a),::hx::paccDynamic)(HX_("lightning",0a,39,4a,d7));
HXLINE( 961)		this->lightningStrikeBeat = this->curBeat;
HXLINE( 962)		this->lightningOffset = ::flixel::FlxG_obj::random->_hx_int(8,24,null());
HXLINE( 964)		if (::hx::IsNotNull( ::PlayState_obj::boyfriend )) {
HXLINE( 966)			::PlayState_obj::boyfriend->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
HXLINE( 967)			::PlayState_obj::gf->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
            		}
            		else {
HXLINE( 971)			::GameplayCustomizeState_obj::boyfriend->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
HXLINE( 972)			::GameplayCustomizeState_obj::gf->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,lightningStrikeShit,(void))

void Stage_obj::trainStart(){
            	HX_STACKFRAME(&_hx_pos_7b29f2b73a08853e_986_trainStart)
HXDLIN( 986)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 988)			this->trainMoving = true;
HXLINE( 989)			this->trainSound->play(true,null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,trainStart,(void))

void Stage_obj::updateTrainPos(){
            	HX_STACKFRAME(&_hx_pos_7b29f2b73a08853e_997_updateTrainPos)
HXDLIN( 997)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 999)			if ((this->trainSound->_time >= 4700)) {
HXLINE(1001)				this->startedMoving = true;
HXLINE(1003)				if (::hx::IsNotNull( ::PlayState_obj::gf )) {
HXLINE(1004)					::PlayState_obj::gf->playAnim(HX_("hairBlow",b4,c9,39,c9),null(),null(),null());
            				}
            				else {
HXLINE(1006)					::GameplayCustomizeState_obj::gf->playAnim(HX_("hairBlow",b4,c9,39,c9),null(),null(),null());
            				}
            			}
HXLINE(1009)			if (this->startedMoving) {
HXLINE(1011)				 ::Dynamic phillyTrain = this->swagBacks->get(HX_("phillyTrain",80,9b,65,bb));
HXLINE(1012)				 ::Dynamic phillyTrain1 = phillyTrain;
HXDLIN(1012)				phillyTrain1->__SetField(HX_("x",78,00,00,00),( ::Dynamic(phillyTrain1->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) - 400),::hx::paccDynamic);
HXLINE(1014)				bool _hx_tmp;
HXDLIN(1014)				if (::hx::IsLess( phillyTrain->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),-2000 )) {
HXLINE(1014)					_hx_tmp = !(this->trainFinishing);
            				}
            				else {
HXLINE(1014)					_hx_tmp = false;
            				}
HXDLIN(1014)				if (_hx_tmp) {
HXLINE(1016)					phillyTrain->__SetField(HX_("x",78,00,00,00),-1150,::hx::paccDynamic);
HXLINE(1017)					 ::Stage _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1017)					_hx_tmp->trainCars = (_hx_tmp->trainCars - 1);
HXLINE(1019)					if ((this->trainCars <= 0)) {
HXLINE(1020)						this->trainFinishing = true;
            					}
            				}
HXLINE(1023)				bool _hx_tmp1;
HXDLIN(1023)				if (::hx::IsLess( phillyTrain->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),-4000 )) {
HXLINE(1023)					_hx_tmp1 = this->trainFinishing;
            				}
            				else {
HXLINE(1023)					_hx_tmp1 = false;
            				}
HXDLIN(1023)				if (_hx_tmp1) {
HXLINE(1024)					this->trainReset();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,updateTrainPos,(void))

void Stage_obj::trainReset(){
            	HX_STACKFRAME(&_hx_pos_7b29f2b73a08853e_1031_trainReset)
HXDLIN(1031)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(1033)			if (::hx::IsNotNull( ::PlayState_obj::gf )) {
HXLINE(1034)				::PlayState_obj::gf->playAnim(HX_("hairFall",bd,48,d6,cb),null(),null(),null());
            			}
            			else {
HXLINE(1036)				::GameplayCustomizeState_obj::gf->playAnim(HX_("hairFall",bd,48,d6,cb),null(),null(),null());
            			}
HXLINE(1038)			this->swagBacks->get(HX_("phillyTrain",80,9b,65,bb))->__SetField(HX_("x",78,00,00,00),(::flixel::FlxG_obj::width + 200),::hx::paccDynamic);
HXLINE(1039)			this->trainMoving = false;
HXLINE(1042)			this->trainCars = 8;
HXLINE(1043)			this->trainFinishing = false;
HXLINE(1044)			this->startedMoving = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,trainReset,(void))

void Stage_obj::resetFastCar(){
            	HX_STACKFRAME(&_hx_pos_7b29f2b73a08853e_1052_resetFastCar)
HXDLIN(1052)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(1054)			 ::Dynamic fastCar = this->swagBacks->get(HX_("fastCar",d8,f2,1f,de));
HXLINE(1055)			fastCar->__SetField(HX_("x",78,00,00,00),-12600,::hx::paccDynamic);
HXLINE(1056)			fastCar->__SetField(HX_("y",79,00,00,00),::flixel::FlxG_obj::random->_hx_int(140,250,null()),::hx::paccDynamic);
HXLINE(1057)			 ::Dynamic(fastCar->__Field(HX_("velocity",1d,02,fe,1e),::hx::paccDynamic))->__SetField(HX_("x",78,00,00,00),0,::hx::paccDynamic);
HXLINE(1058)			fastCar->__SetField(HX_("visible",72,78,24,a3),false,::hx::paccDynamic);
HXLINE(1059)			this->fastCarCanDrive = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,resetFastCar,(void))

 ::Dynamic Stage_obj::callOnHscript(::String functionToCall,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_7b29f2b73a08853e_1064_callOnHscript)
HXLINE(1065)		if (::hx::IsNull( ::Stage_obj::interp )) {
HXLINE(1067)			return null();
            		}
HXLINE(1069)		if (::Stage_obj::interp->variables->exists(functionToCall)) {
HXLINE(1071)			 ::Dynamic functionH = ::Stage_obj::interp->variables->get(functionToCall);
HXLINE(1072)			if (::hx::IsNull( params )) {
HXLINE(1074)				 ::Dynamic result = null();
HXLINE(1075)				result = functionH();
HXLINE(1076)				return result;
            			}
            			else {
HXLINE(1080)				 ::Dynamic result = null();
HXLINE(1081)				result = ::Reflect_obj::callMethod(null(),functionH,params);
HXLINE(1082)				return result;
            			}
            		}
HXLINE(1085)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,callOnHscript,return )

void Stage_obj::fastCarDrive(){
            	HX_GC_STACKFRAME(&_hx_pos_7b29f2b73a08853e_1090_fastCarDrive)
HXLINE(1089)		 ::Stage _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1091)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Stage,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_7b29f2b73a08853e_1100_fastCarDrive)
HXLINE(1100)				_gthis->resetFastCar();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1093)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1093)			_hx_tmp->play(::Paths_obj::sound((HX_("carPass",05,1f,44,b6) + ::flixel::FlxG_obj::random->_hx_int(0,1,null())),HX_("shared",a5,5e,2b,1d)),((Float)0.7),null(),null(),null(),null());
HXLINE(1095)			this->swagBacks->get(HX_("fastCar",d8,f2,1f,de))->__SetField(HX_("visible",72,78,24,a3),true,::hx::paccDynamic);
HXLINE(1096)			 ::Dynamic _hx_tmp1 = this->swagBacks->get(HX_("fastCar",d8,f2,1f,de));
HXDLIN(1096)			int _hx_tmp2 = ::flixel::FlxG_obj::random->_hx_int(170,220,null());
HXDLIN(1096)			 ::Dynamic(_hx_tmp1->__Field(HX_("velocity",1d,02,fe,1e),::hx::paccDynamic))->__SetField(HX_("x",78,00,00,00),((( (Float)(_hx_tmp2) ) / ::flixel::FlxG_obj::elapsed) * ( (Float)(3) )),::hx::paccDynamic);
HXLINE(1097)			this->fastCarCanDrive = false;
HXLINE(1098)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,fastCarDrive,(void))

 ::hscript::Interp Stage_obj::interp;


::hx::ObjectPtr< Stage_obj > Stage_obj::__new(::String daStage) {
	::hx::ObjectPtr< Stage_obj > __this = new Stage_obj();
	__this->__construct(daStage);
	return __this;
}

::hx::ObjectPtr< Stage_obj > Stage_obj::__alloc(::hx::Ctx *_hx_ctx,::String daStage) {
	Stage_obj *__this = (Stage_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Stage_obj), true, "Stage"));
	*(void **)__this = Stage_obj::_hx_vtable;
	__this->__construct(daStage);
	return __this;
}

Stage_obj::Stage_obj()
{
}

void Stage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Stage);
	HX_MARK_MEMBER_NAME(curStage,"curStage");
	HX_MARK_MEMBER_NAME(camZoom,"camZoom");
	HX_MARK_MEMBER_NAME(hideLastBG,"hideLastBG");
	HX_MARK_MEMBER_NAME(tweenDuration,"tweenDuration");
	HX_MARK_MEMBER_NAME(toAdd,"toAdd");
	HX_MARK_MEMBER_NAME(swagBacks,"swagBacks");
	HX_MARK_MEMBER_NAME(swagGroup,"swagGroup");
	HX_MARK_MEMBER_NAME(animatedBacks,"animatedBacks");
	HX_MARK_MEMBER_NAME(layInFront,"layInFront");
	HX_MARK_MEMBER_NAME(slowBacks,"slowBacks");
	HX_MARK_MEMBER_NAME(positions,"positions");
	HX_MARK_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_MARK_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_MARK_MEMBER_NAME(curLight,"curLight");
	HX_MARK_MEMBER_NAME(trainMoving,"trainMoving");
	HX_MARK_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_MARK_MEMBER_NAME(trainCars,"trainCars");
	HX_MARK_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_MARK_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_MARK_MEMBER_NAME(trainSound,"trainSound");
	HX_MARK_MEMBER_NAME(startedMoving,"startedMoving");
	HX_MARK_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Stage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(curStage,"curStage");
	HX_VISIT_MEMBER_NAME(camZoom,"camZoom");
	HX_VISIT_MEMBER_NAME(hideLastBG,"hideLastBG");
	HX_VISIT_MEMBER_NAME(tweenDuration,"tweenDuration");
	HX_VISIT_MEMBER_NAME(toAdd,"toAdd");
	HX_VISIT_MEMBER_NAME(swagBacks,"swagBacks");
	HX_VISIT_MEMBER_NAME(swagGroup,"swagGroup");
	HX_VISIT_MEMBER_NAME(animatedBacks,"animatedBacks");
	HX_VISIT_MEMBER_NAME(layInFront,"layInFront");
	HX_VISIT_MEMBER_NAME(slowBacks,"slowBacks");
	HX_VISIT_MEMBER_NAME(positions,"positions");
	HX_VISIT_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_VISIT_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_VISIT_MEMBER_NAME(curLight,"curLight");
	HX_VISIT_MEMBER_NAME(trainMoving,"trainMoving");
	HX_VISIT_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_VISIT_MEMBER_NAME(trainCars,"trainCars");
	HX_VISIT_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_VISIT_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_VISIT_MEMBER_NAME(trainSound,"trainSound");
	HX_VISIT_MEMBER_NAME(startedMoving,"startedMoving");
	HX_VISIT_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Stage_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"toAdd") ) { return ::hx::Val( toAdd ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camZoom") ) { return ::hx::Val( camZoom ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { return ::hx::Val( curStage ); }
		if (HX_FIELD_EQ(inName,"curLight") ) { return ::hx::Val( curLight ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"swagBacks") ) { return ::hx::Val( swagBacks ); }
		if (HX_FIELD_EQ(inName,"swagGroup") ) { return ::hx::Val( swagGroup ); }
		if (HX_FIELD_EQ(inName,"slowBacks") ) { return ::hx::Val( slowBacks ); }
		if (HX_FIELD_EQ(inName,"positions") ) { return ::hx::Val( positions ); }
		if (HX_FIELD_EQ(inName,"trainCars") ) { return ::hx::Val( trainCars ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hideLastBG") ) { return ::hx::Val( hideLastBG ); }
		if (HX_FIELD_EQ(inName,"layInFront") ) { return ::hx::Val( layInFront ); }
		if (HX_FIELD_EQ(inName,"trainSound") ) { return ::hx::Val( trainSound ); }
		if (HX_FIELD_EQ(inName,"trainStart") ) { return ::hx::Val( trainStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainReset") ) { return ::hx::Val( trainReset_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"trainMoving") ) { return ::hx::Val( trainMoving ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resetFastCar") ) { return ::hx::Val( resetFastCar_dyn() ); }
		if (HX_FIELD_EQ(inName,"fastCarDrive") ) { return ::hx::Val( fastCarDrive_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"tweenDuration") ) { return ::hx::Val( tweenDuration ); }
		if (HX_FIELD_EQ(inName,"animatedBacks") ) { return ::hx::Val( animatedBacks ); }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { return ::hx::Val( trainCooldown ); }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { return ::hx::Val( startedMoving ); }
		if (HX_FIELD_EQ(inName,"callOnHscript") ) { return ::hx::Val( callOnHscript_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { return ::hx::Val( trainFinishing ); }
		if (HX_FIELD_EQ(inName,"updateTrainPos") ) { return ::hx::Val( updateTrainPos_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { return ::hx::Val( lightningOffset ); }
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { return ::hx::Val( fastCarCanDrive ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { return ::hx::Val( trainFrameTiming ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { return ::hx::Val( lightningStrikeBeat ); }
		if (HX_FIELD_EQ(inName,"lightningStrikeShit") ) { return ::hx::Val( lightningStrikeShit_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Stage_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"interp") ) { outValue = ( interp ); return true; }
	}
	return false;
}

::hx::Val Stage_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"toAdd") ) { toAdd=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camZoom") ) { camZoom=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { curStage=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curLight") ) { curLight=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"swagBacks") ) { swagBacks=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"swagGroup") ) { swagGroup=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"slowBacks") ) { slowBacks=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"positions") ) { positions=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCars") ) { trainCars=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hideLastBG") ) { hideLastBG=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layInFront") ) { layInFront=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainSound") ) { trainSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"trainMoving") ) { trainMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"tweenDuration") ) { tweenDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animatedBacks") ) { animatedBacks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { trainCooldown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { startedMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { trainFinishing=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { lightningOffset=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { fastCarCanDrive=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { trainFrameTiming=inValue.Cast< Float >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { lightningStrikeBeat=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Stage_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"interp") ) { interp=ioValue.Cast<  ::hscript::Interp >(); return true; }
	}
	return false;
}

void Stage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("curStage",1e,65,b9,cb));
	outFields->push(HX_("camZoom",c2,f6,e9,db));
	outFields->push(HX_("hideLastBG",fd,ab,4a,ec));
	outFields->push(HX_("tweenDuration",df,58,51,72));
	outFields->push(HX_("toAdd",66,a3,0b,14));
	outFields->push(HX_("swagBacks",82,d9,24,8a));
	outFields->push(HX_("swagGroup",55,84,6b,76));
	outFields->push(HX_("animatedBacks",c9,96,f7,e5));
	outFields->push(HX_("layInFront",80,62,57,86));
	outFields->push(HX_("slowBacks",ab,36,dc,c0));
	outFields->push(HX_("positions",aa,f3,51,d0));
	outFields->push(HX_("lightningStrikeBeat",72,e2,3d,b6));
	outFields->push(HX_("lightningOffset",3d,a8,e5,e6));
	outFields->push(HX_("curLight",36,8b,aa,bc));
	outFields->push(HX_("trainMoving",76,00,99,48));
	outFields->push(HX_("trainFrameTiming",af,67,10,1b));
	outFields->push(HX_("trainCars",c7,61,9c,4d));
	outFields->push(HX_("trainFinishing",87,15,8c,24));
	outFields->push(HX_("trainCooldown",93,a3,58,0c));
	outFields->push(HX_("trainSound",e7,b3,e5,da));
	outFields->push(HX_("startedMoving",af,76,97,fb));
	outFields->push(HX_("fastCarCanDrive",d2,f1,13,ee));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Stage_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Stage_obj,curStage),HX_("curStage",1e,65,b9,cb)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,camZoom),HX_("camZoom",c2,f6,e9,db)},
	{::hx::fsBool,(int)offsetof(Stage_obj,hideLastBG),HX_("hideLastBG",fd,ab,4a,ec)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,tweenDuration),HX_("tweenDuration",df,58,51,72)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(Stage_obj,toAdd),HX_("toAdd",66,a3,0b,14)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Stage_obj,swagBacks),HX_("swagBacks",82,d9,24,8a)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Stage_obj,swagGroup),HX_("swagGroup",55,84,6b,76)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stage_obj,animatedBacks),HX_("animatedBacks",c9,96,f7,e5)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stage_obj,layInFront),HX_("layInFront",80,62,57,86)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(Stage_obj,slowBacks),HX_("slowBacks",ab,36,dc,c0)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Stage_obj,positions),HX_("positions",aa,f3,51,d0)},
	{::hx::fsInt,(int)offsetof(Stage_obj,lightningStrikeBeat),HX_("lightningStrikeBeat",72,e2,3d,b6)},
	{::hx::fsInt,(int)offsetof(Stage_obj,lightningOffset),HX_("lightningOffset",3d,a8,e5,e6)},
	{::hx::fsInt,(int)offsetof(Stage_obj,curLight),HX_("curLight",36,8b,aa,bc)},
	{::hx::fsBool,(int)offsetof(Stage_obj,trainMoving),HX_("trainMoving",76,00,99,48)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,trainFrameTiming),HX_("trainFrameTiming",af,67,10,1b)},
	{::hx::fsInt,(int)offsetof(Stage_obj,trainCars),HX_("trainCars",c7,61,9c,4d)},
	{::hx::fsBool,(int)offsetof(Stage_obj,trainFinishing),HX_("trainFinishing",87,15,8c,24)},
	{::hx::fsInt,(int)offsetof(Stage_obj,trainCooldown),HX_("trainCooldown",93,a3,58,0c)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(Stage_obj,trainSound),HX_("trainSound",e7,b3,e5,da)},
	{::hx::fsBool,(int)offsetof(Stage_obj,startedMoving),HX_("startedMoving",af,76,97,fb)},
	{::hx::fsBool,(int)offsetof(Stage_obj,fastCarCanDrive),HX_("fastCarCanDrive",d2,f1,13,ee)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Stage_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::hscript::Interp */ ,(void *) &Stage_obj::interp,HX_("interp",d4,79,86,9e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Stage_obj_sMemberFields[] = {
	HX_("curStage",1e,65,b9,cb),
	HX_("camZoom",c2,f6,e9,db),
	HX_("hideLastBG",fd,ab,4a,ec),
	HX_("tweenDuration",df,58,51,72),
	HX_("toAdd",66,a3,0b,14),
	HX_("swagBacks",82,d9,24,8a),
	HX_("swagGroup",55,84,6b,76),
	HX_("animatedBacks",c9,96,f7,e5),
	HX_("layInFront",80,62,57,86),
	HX_("slowBacks",ab,36,dc,c0),
	HX_("positions",aa,f3,51,d0),
	HX_("update",09,86,05,87),
	HX_("stepHit",67,ae,41,81),
	HX_("beatHit",7d,ea,04,74),
	HX_("lightningStrikeBeat",72,e2,3d,b6),
	HX_("lightningOffset",3d,a8,e5,e6),
	HX_("curLight",36,8b,aa,bc),
	HX_("lightningStrikeShit",bc,d0,7c,c1),
	HX_("trainMoving",76,00,99,48),
	HX_("trainFrameTiming",af,67,10,1b),
	HX_("trainCars",c7,61,9c,4d),
	HX_("trainFinishing",87,15,8c,24),
	HX_("trainCooldown",93,a3,58,0c),
	HX_("trainSound",e7,b3,e5,da),
	HX_("trainStart",7a,9b,24,de),
	HX_("startedMoving",af,76,97,fb),
	HX_("updateTrainPos",d5,01,38,2b),
	HX_("trainReset",e7,70,e1,40),
	HX_("fastCarCanDrive",d2,f1,13,ee),
	HX_("resetFastCar",c9,38,fe,4f),
	HX_("callOnHscript",96,08,cf,05),
	HX_("fastCarDrive",12,97,d2,be),
	::String(null()) };

static void Stage_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Stage_obj::interp,"interp");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Stage_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Stage_obj::interp,"interp");
};

#endif

::hx::Class Stage_obj::__mClass;

static ::String Stage_obj_sStaticFields[] = {
	HX_("interp",d4,79,86,9e),
	::String(null())
};

void Stage_obj::__register()
{
	Stage_obj _hx_dummy;
	Stage_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Stage",9e,da,38,17);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Stage_obj::__GetStatic;
	__mClass->mSetStaticField = &Stage_obj::__SetStatic;
	__mClass->mMarkFunc = Stage_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Stage_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Stage_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Stage_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Stage_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stage_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

