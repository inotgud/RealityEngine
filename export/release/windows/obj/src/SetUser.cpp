// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_OptionsDirect
#include <OptionsDirect.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_SetUser
#include <SetUser.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cbabab60f0002116_31_new,"SetUser","new",0x0b3b165f,"SetUser.new","SetUser.hx",31,0xb8e019f1)
HX_LOCAL_STACK_FRAME(_hx_pos_cbabab60f0002116_48_create,"SetUser","create",0x3fceaa5d,"SetUser.create","SetUser.hx",48,0xb8e019f1)
HX_LOCAL_STACK_FRAME(_hx_pos_cbabab60f0002116_54_create,"SetUser","create",0x3fceaa5d,"SetUser.create","SetUser.hx",54,0xb8e019f1)
HX_LOCAL_STACK_FRAME(_hx_pos_cbabab60f0002116_34_create,"SetUser","create",0x3fceaa5d,"SetUser.create","SetUser.hx",34,0xb8e019f1)

void SetUser_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_cbabab60f0002116_31_new)
HXDLIN(  31)		super::__construct(TransIn,TransOut);
            	}

Dynamic SetUser_obj::__CreateEmpty() { return new SetUser_obj; }

void *SetUser_obj::_hx_vtable = 0;

Dynamic SetUser_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SetUser_obj > _hx_result = new SetUser_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool SetUser_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x14fdec9d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x14fdec9d;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void SetUser_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_cbabab60f0002116_48_create)
HXLINE(  48)			 ::flixel::FlxState nextState =  ::OptionsDirect_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  48)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  48)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::addons::ui::FlxUIInputText,eventNameEE) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_cbabab60f0002116_54_create)
HXLINE(  54)			::flixel::FlxG_obj::save->data->__SetField(HX_("pcplayername",df,91,ab,5a),eventNameEE->text,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_cbabab60f0002116_34_create)
HXLINE(  35)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(  35)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("menuDesat",26,91,04,72),null()),null(),null(),null(),null(),null());
HXLINE(  36)		bg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  37)		bg1->scrollFactor->set_y(((Float)0.10));
HXLINE(  38)		bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)1.1))),null());
HXLINE(  39)		bg1->updateHitbox();
HXLINE(  40)		{
HXLINE(  40)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  40)			bool _hx_tmp;
HXDLIN(  40)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  40)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(  40)					_hx_tmp = false;
            				}
            			}
HXDLIN(  40)			if (_hx_tmp) {
HXLINE(  40)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  40)				bg1->set_x(((( (Float)(_hx_tmp) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  40)			bool _hx_tmp1;
HXDLIN(  40)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  40)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(  40)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(  40)			if (_hx_tmp1) {
HXLINE(  40)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  40)				bg1->set_y(((( (Float)(_hx_tmp) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  41)		bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  42)		this->add(bg1);
HXLINE(  44)		 ::flixel::addons::ui::FlxUIInputText eventNameEE =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,350,220,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE(  45)		this->add(eventNameEE);
HXLINE(  47)		 ::flixel::ui::FlxButton close =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,1150,20,HX_("X",58,00,00,00), ::Dynamic(new _hx_Closure_0()));
HXLINE(  50)		close->set_color(-65536);
HXLINE(  51)		this->add(close);
HXLINE(  53)		 ::flixel::ui::FlxButton button5 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,500,220,HX_("Change U",c5,a5,ff,3f), ::Dynamic(new _hx_Closure_1(eventNameEE)));
HXLINE(  56)		this->add(button5);
            	}



::hx::ObjectPtr< SetUser_obj > SetUser_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< SetUser_obj > __this = new SetUser_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< SetUser_obj > SetUser_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	SetUser_obj *__this = (SetUser_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SetUser_obj), true, "SetUser"));
	*(void **)__this = SetUser_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

SetUser_obj::SetUser_obj()
{
}

::hx::Val SetUser_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *SetUser_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *SetUser_obj_sStaticStorageInfo = 0;
#endif

static ::String SetUser_obj_sMemberFields[] = {
	HX_("create",fc,66,0f,7c),
	::String(null()) };

::hx::Class SetUser_obj::__mClass;

void SetUser_obj::__register()
{
	SetUser_obj _hx_dummy;
	SetUser_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("SetUser",ed,fa,82,e0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SetUser_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SetUser_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SetUser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SetUser_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

