// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_DiffCalc
#include <DiffCalc.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_HelperFunctions
#include <HelperFunctions.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_SmallNote
#include <SmallNote.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ac88a8d52f7b54c5_54_CalculateDiff,"DiffCalc","CalculateDiff",0x49a2c057,"DiffCalc.CalculateDiff","DiffCalc.hx",54,0x0b7f13a4)
HX_LOCAL_STACK_FRAME(_hx_pos_ac88a8d52f7b54c5_25_CalculateDiff,"DiffCalc","CalculateDiff",0x49a2c057,"DiffCalc.CalculateDiff","DiffCalc.hx",25,0x0b7f13a4)
HX_LOCAL_STACK_FRAME(_hx_pos_ac88a8d52f7b54c5_277_chisel,"DiffCalc","chisel",0x5148a28a,"DiffCalc.chisel","DiffCalc.hx",277,0x0b7f13a4)
HX_LOCAL_STACK_FRAME(_hx_pos_ac88a8d52f7b54c5_294_calcuate,"DiffCalc","calcuate",0x92bbdd66,"DiffCalc.calcuate","DiffCalc.hx",294,0x0b7f13a4)
HX_LOCAL_STACK_FRAME(_hx_pos_ac88a8d52f7b54c5_309_findStupid,"DiffCalc","findStupid",0x6d0c39c4,"DiffCalc.findStupid","DiffCalc.hx",309,0x0b7f13a4)
HX_LOCAL_STACK_FRAME(_hx_pos_ac88a8d52f7b54c5_317_fingieCalc,"DiffCalc","fingieCalc",0xf18bd061,"DiffCalc.fingieCalc","DiffCalc.hx",317,0x0b7f13a4)
HX_LOCAL_STACK_FRAME(_hx_pos_ac88a8d52f7b54c5_339_smoothBrain,"DiffCalc","smoothBrain",0x0610b894,"DiffCalc.smoothBrain","DiffCalc.hx",339,0x0b7f13a4)
HX_LOCAL_STACK_FRAME(_hx_pos_ac88a8d52f7b54c5_357_smoothBrainTwo,"DiffCalc","smoothBrainTwo",0x25460158,"DiffCalc.smoothBrainTwo","DiffCalc.hx",357,0x0b7f13a4)
HX_LOCAL_STACK_FRAME(_hx_pos_ac88a8d52f7b54c5_19_boot,"DiffCalc","boot",0x342889c6,"DiffCalc.boot","DiffCalc.hx",19,0x0b7f13a4)
HX_LOCAL_STACK_FRAME(_hx_pos_ac88a8d52f7b54c5_21_boot,"DiffCalc","boot",0x342889c6,"DiffCalc.boot","DiffCalc.hx",21,0x0b7f13a4)
HX_LOCAL_STACK_FRAME(_hx_pos_ac88a8d52f7b54c5_22_boot,"DiffCalc","boot",0x342889c6,"DiffCalc.boot","DiffCalc.hx",22,0x0b7f13a4)

void DiffCalc_obj::__construct() { }

Dynamic DiffCalc_obj::__CreateEmpty() { return new DiffCalc_obj; }

void *DiffCalc_obj::_hx_vtable = 0;

Dynamic DiffCalc_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DiffCalc_obj > _hx_result = new DiffCalc_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DiffCalc_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4b1e361a;
}

Float DiffCalc_obj::scale;

::Array< Float > DiffCalc_obj::lastDiffHandOne;

::Array< Float > DiffCalc_obj::lastDiffHandTwo;

Float DiffCalc_obj::CalculateDiff( ::Dynamic song, ::Dynamic __o_accuracy){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::SmallNote a, ::SmallNote b){
            			HX_GC_STACKFRAME(&_hx_pos_ac88a8d52f7b54c5_54_CalculateDiff)
HXLINE(  54)			return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		 ::Dynamic accuracy = __o_accuracy;
            		if (::hx::IsNull(__o_accuracy)) accuracy = ((Float).93);
            	HX_GC_STACKFRAME(&_hx_pos_ac88a8d52f7b54c5_25_CalculateDiff)
HXLINE(  27)		::Array< ::Dynamic> cleanedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  29)		if (::hx::IsNull( song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic) )) {
HXLINE(  30)			return ((Float)0.0);
            		}
HXLINE(  32)		if ((( (::Array< ::Dynamic>)(song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length == 0)) {
HXLINE(  33)			return ((Float)0.0);
            		}
HXLINE(  36)		{
HXLINE(  36)			int _g = 0;
HXDLIN(  36)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(  36)			while((_g < _g1->length)){
HXLINE(  36)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(  36)				_g = (_g + 1);
HXLINE(  38)				{
HXLINE(  38)					int _g2 = 0;
HXDLIN(  38)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(  38)					while((_g2 < _g3->length)){
HXLINE(  38)						::cpp::VirtualArray ii = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(  38)						_g2 = (_g2 + 1);
HXLINE(  40)						bool gottaHitNote = ( (bool)(i->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(  42)						bool _hx_tmp;
HXDLIN(  42)						if (::hx::IsGreaterEq( ii->__get(1),3 )) {
HXLINE(  42)							_hx_tmp = gottaHitNote;
            						}
            						else {
HXLINE(  42)							_hx_tmp = false;
            						}
HXDLIN(  42)						if (_hx_tmp) {
HXLINE(  43)							cleanedNotes->push( ::SmallNote_obj::__alloc( HX_CTX ,(( (Float)(ii->__get(0)) ) / ::FreeplayState_obj::rate),::Math_obj::floor(::Math_obj::abs(( (Float)(ii->__get(1)) )))));
            						}
HXLINE(  44)						bool _hx_tmp1;
HXDLIN(  44)						if (::hx::IsLessEq( ii->__get(1),4 )) {
HXLINE(  44)							_hx_tmp1 = !(gottaHitNote);
            						}
            						else {
HXLINE(  44)							_hx_tmp1 = false;
            						}
HXDLIN(  44)						if (_hx_tmp1) {
HXLINE(  45)							cleanedNotes->push( ::SmallNote_obj::__alloc( HX_CTX ,(( (Float)(ii->__get(0)) ) / ::FreeplayState_obj::rate),::Math_obj::floor(::Math_obj::abs(( (Float)(ii->__get(1)) )))));
            						}
            					}
            				}
            			}
            		}
HXLINE(  51)		::Array< ::Dynamic> handOne = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  52)		::Array< ::Dynamic> handTwo = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  54)		cleanedNotes->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE(  56)		if ((cleanedNotes->length == 0)) {
HXLINE(  57)			return ((Float)90000000000000000);
            		}
HXLINE(  59)		Float firstNoteTime = cleanedNotes->__get(0).StaticCast<  ::SmallNote >()->strumTime;
HXLINE(  63)		{
HXLINE(  63)			int _g2 = 0;
HXDLIN(  63)			while((_g2 < cleanedNotes->length)){
HXLINE(  63)				 ::SmallNote i = cleanedNotes->__get(_g2).StaticCast<  ::SmallNote >();
HXDLIN(  63)				_g2 = (_g2 + 1);
HXLINE(  65)				i->strumTime = ((i->strumTime - firstNoteTime) * ( (Float)(2) ));
            			}
            		}
HXLINE(  68)		{
HXLINE(  68)			int _g3 = 0;
HXDLIN(  68)			while((_g3 < cleanedNotes->length)){
HXLINE(  68)				 ::SmallNote i = cleanedNotes->__get(_g3).StaticCast<  ::SmallNote >();
HXDLIN(  68)				_g3 = (_g3 + 1);
HXLINE(  70)				switch((int)(i->noteData)){
            					case (int)0: {
HXLINE(  73)						handOne->push(i);
            					}
            					break;
            					case (int)1: {
HXLINE(  75)						handOne->push(i);
            					}
            					break;
            					case (int)2: {
HXLINE(  77)						handTwo->push(i);
            					}
            					break;
            					case (int)3: {
HXLINE(  79)						handTwo->push(i);
            					}
            					break;
            				}
            			}
            		}
HXLINE(  85)		::Array< Float > leftHandCol = ::Array_obj< Float >::__new(0);
HXLINE(  86)		::Array< Float > leftMHandCol = ::Array_obj< Float >::__new(0);
HXLINE(  87)		::Array< Float > rightMHandCol = ::Array_obj< Float >::__new(0);
HXLINE(  88)		::Array< Float > rightHandCol = ::Array_obj< Float >::__new(0);
HXLINE(  90)		{
HXLINE(  90)			int _g4 = 0;
HXDLIN(  90)			int _g5 = (handOne->length - 1);
HXDLIN(  90)			while((_g4 < _g5)){
HXLINE(  90)				_g4 = (_g4 + 1);
HXDLIN(  90)				int i = (_g4 - 1);
HXLINE(  92)				if ((handOne->__get(i).StaticCast<  ::SmallNote >()->noteData == 0)) {
HXLINE(  93)					leftHandCol->push(handOne->__get(i).StaticCast<  ::SmallNote >()->strumTime);
            				}
            				else {
HXLINE(  95)					leftMHandCol->push(handOne->__get(i).StaticCast<  ::SmallNote >()->strumTime);
            				}
            			}
            		}
HXLINE(  97)		{
HXLINE(  97)			int _g6 = 0;
HXDLIN(  97)			int _g7 = (handTwo->length - 1);
HXDLIN(  97)			while((_g6 < _g7)){
HXLINE(  97)				_g6 = (_g6 + 1);
HXDLIN(  97)				int i = (_g6 - 1);
HXLINE(  99)				if ((handTwo->__get(i).StaticCast<  ::SmallNote >()->noteData == 3)) {
HXLINE( 100)					rightHandCol->push(handTwo->__get(i).StaticCast<  ::SmallNote >()->strumTime);
            				}
            				else {
HXLINE( 102)					rightMHandCol->push(handTwo->__get(i).StaticCast<  ::SmallNote >()->strumTime);
            				}
            			}
            		}
HXLINE( 106)		Float length = ((cleanedNotes->__get((cleanedNotes->length - 1)).StaticCast<  ::SmallNote >()->strumTime / ( (Float)(1000) )) / ((Float)0.5));
HXLINE( 109)		::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new(::Math_obj::floor(length));
HXDLIN( 109)		::Array< ::Dynamic> segmentsOne = this1;
HXLINE( 111)		::Array< ::Dynamic> this2 = ::Array_obj< ::Dynamic>::__new(::Math_obj::floor(length));
HXDLIN( 111)		::Array< ::Dynamic> segmentsTwo = this2;
HXLINE( 115)		{
HXLINE( 115)			int _g8 = 0;
HXDLIN( 115)			int _g9 = segmentsOne->length;
HXDLIN( 115)			while((_g8 < _g9)){
HXLINE( 115)				_g8 = (_g8 + 1);
HXDLIN( 115)				int i = (_g8 - 1);
HXLINE( 116)				{
HXLINE( 116)					::Array< ::Dynamic> val = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 116)					segmentsOne->__unsafe_set(i,val);
            				}
            			}
            		}
HXLINE( 117)		{
HXLINE( 117)			int _g10 = 0;
HXDLIN( 117)			int _g11 = segmentsTwo->length;
HXDLIN( 117)			while((_g10 < _g11)){
HXLINE( 117)				_g10 = (_g10 + 1);
HXDLIN( 117)				int i = (_g10 - 1);
HXLINE( 118)				{
HXLINE( 118)					::Array< ::Dynamic> val = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 118)					segmentsTwo->__unsafe_set(i,val);
            				}
            			}
            		}
HXLINE( 121)		{
HXLINE( 121)			int _g12 = 0;
HXDLIN( 121)			while((_g12 < handOne->length)){
HXLINE( 121)				 ::SmallNote i = handOne->__get(_g12).StaticCast<  ::SmallNote >();
HXDLIN( 121)				_g12 = (_g12 + 1);
HXLINE( 123)				int index = ::Std_obj::_hx_int(((i->strumTime * ( (Float)(2) )) / ( (Float)(1000) )));
HXLINE( 124)				if (((index + 1) > length)) {
HXLINE( 125)					continue;
            				}
HXLINE( 126)				( (::Array< ::Dynamic>)(_hx_array_unsafe_get(segmentsOne,index)) )->push(i);
            			}
            		}
HXLINE( 129)		{
HXLINE( 129)			int _g13 = 0;
HXDLIN( 129)			while((_g13 < handTwo->length)){
HXLINE( 129)				 ::SmallNote i = handTwo->__get(_g13).StaticCast<  ::SmallNote >();
HXDLIN( 129)				_g13 = (_g13 + 1);
HXLINE( 131)				int index = ::Std_obj::_hx_int(((i->strumTime * ( (Float)(2) )) / ( (Float)(1000) )));
HXLINE( 132)				if (((index + 1) > length)) {
HXLINE( 133)					continue;
            				}
HXLINE( 134)				( (::Array< ::Dynamic>)(_hx_array_unsafe_get(segmentsTwo,index)) )->push(i);
            			}
            		}
HXLINE( 152)		::Array< Float > hand_npsOne = ::Array_obj< Float >::__new();
HXLINE( 153)		::Array< Float > hand_npsTwo = ::Array_obj< Float >::__new();
HXLINE( 155)		{
HXLINE( 155)			int _g14 = 0;
HXDLIN( 155)			while((_g14 < segmentsOne->length)){
HXLINE( 155)				::Array< ::Dynamic> i = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(segmentsOne,_g14)) );
HXDLIN( 155)				_g14 = (_g14 + 1);
HXLINE( 157)				if (::hx::IsNull( i )) {
HXLINE( 158)					continue;
            				}
HXLINE( 159)				hand_npsOne->push(((( (Float)(i->length) ) * ::DiffCalc_obj::scale) * ((Float)1.6)));
            			}
            		}
HXLINE( 161)		{
HXLINE( 161)			int _g15 = 0;
HXDLIN( 161)			while((_g15 < segmentsTwo->length)){
HXLINE( 161)				::Array< ::Dynamic> i = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(segmentsTwo,_g15)) );
HXDLIN( 161)				_g15 = (_g15 + 1);
HXLINE( 163)				if (::hx::IsNull( i )) {
HXLINE( 164)					continue;
            				}
HXLINE( 165)				hand_npsTwo->push(((( (Float)(i->length) ) * ::DiffCalc_obj::scale) * ((Float)1.6)));
            			}
            		}
HXLINE( 170)		::Array< Float > hand_diffOne = ::Array_obj< Float >::__new();
HXLINE( 171)		::Array< Float > hand_diffTwo = ::Array_obj< Float >::__new();
HXLINE( 173)		{
HXLINE( 173)			int _g16 = 0;
HXDLIN( 173)			int _g17 = segmentsOne->length;
HXDLIN( 173)			while((_g16 < _g17)){
HXLINE( 173)				_g16 = (_g16 + 1);
HXDLIN( 173)				int i = (_g16 - 1);
HXLINE( 175)				::Array< ::Dynamic> ve = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(segmentsOne,i)) );
HXLINE( 176)				if (::hx::IsNull( ve )) {
HXLINE( 177)					continue;
            				}
HXLINE( 178)				::Array< ::Dynamic> fuckYouOne = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 179)				::Array< ::Dynamic> fuckYouTwo = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 180)				{
HXLINE( 180)					int _g = 0;
HXDLIN( 180)					while((_g < ve->length)){
HXLINE( 180)						 ::SmallNote note = ve->__get(_g).StaticCast<  ::SmallNote >();
HXDLIN( 180)						_g = (_g + 1);
HXLINE( 182)						switch((int)(note->noteData)){
            							case (int)0: {
HXLINE( 185)								fuckYouOne->push(note);
            							}
            							break;
            							case (int)1: {
HXLINE( 187)								fuckYouTwo->push(note);
            							}
            							break;
            						}
            					}
            				}
HXLINE( 191)				Float one = ::DiffCalc_obj::fingieCalc(fuckYouOne,leftHandCol);
HXLINE( 192)				Float two = ::DiffCalc_obj::fingieCalc(fuckYouTwo,leftMHandCol);
HXLINE( 194)				Float bigFuck;
HXDLIN( 194)				if ((one > two)) {
HXLINE( 194)					bigFuck = one;
            				}
            				else {
HXLINE( 194)					bigFuck = two;
            				}
HXDLIN( 194)				Float bigFuck1 = ((((bigFuck * ( (Float)(8) )) + ((hand_npsOne->__get(i) / ::DiffCalc_obj::scale) * ( (Float)(5) ))) / ( (Float)(13) )) * ::DiffCalc_obj::scale);
HXLINE( 198)				hand_diffOne->push(bigFuck1);
            			}
            		}
HXLINE( 201)		{
HXLINE( 201)			int _g18 = 0;
HXDLIN( 201)			int _g19 = segmentsTwo->length;
HXDLIN( 201)			while((_g18 < _g19)){
HXLINE( 201)				_g18 = (_g18 + 1);
HXDLIN( 201)				int i = (_g18 - 1);
HXLINE( 203)				::Array< ::Dynamic> ve = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(segmentsTwo,i)) );
HXLINE( 204)				if (::hx::IsNull( ve )) {
HXLINE( 205)					continue;
            				}
HXLINE( 206)				::Array< ::Dynamic> fuckYouOne = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 207)				::Array< ::Dynamic> fuckYouTwo = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 208)				{
HXLINE( 208)					int _g = 0;
HXDLIN( 208)					while((_g < ve->length)){
HXLINE( 208)						 ::SmallNote note = ve->__get(_g).StaticCast<  ::SmallNote >();
HXDLIN( 208)						_g = (_g + 1);
HXLINE( 210)						switch((int)(note->noteData)){
            							case (int)2: {
HXLINE( 213)								fuckYouOne->push(note);
            							}
            							break;
            							case (int)3: {
HXLINE( 215)								fuckYouTwo->push(note);
            							}
            							break;
            						}
            					}
            				}
HXLINE( 219)				Float one = ::DiffCalc_obj::fingieCalc(fuckYouOne,rightMHandCol);
HXLINE( 220)				Float two = ::DiffCalc_obj::fingieCalc(fuckYouTwo,rightHandCol);
HXLINE( 222)				Float bigFuck;
HXDLIN( 222)				if ((one > two)) {
HXLINE( 222)					bigFuck = one;
            				}
            				else {
HXLINE( 222)					bigFuck = two;
            				}
HXDLIN( 222)				Float bigFuck1 = ((((bigFuck * ( (Float)(8) )) + ((hand_npsTwo->__get(i) / ::DiffCalc_obj::scale) * ( (Float)(5) ))) / ( (Float)(13) )) * ::DiffCalc_obj::scale);
HXLINE( 224)				hand_diffTwo->push(bigFuck1);
            			}
            		}
HXLINE( 229)		{
HXLINE( 230)			{
HXLINE( 231)				::DiffCalc_obj::smoothBrain(hand_npsOne,( (Float)(0) ));
HXLINE( 232)				::DiffCalc_obj::smoothBrain(hand_npsTwo,( (Float)(0) ));
HXLINE( 234)				::DiffCalc_obj::smoothBrainTwo(hand_diffOne);
HXLINE( 235)				::DiffCalc_obj::smoothBrainTwo(hand_diffTwo);
            			}
HXLINE( 230)			{
HXLINE( 231)				::DiffCalc_obj::smoothBrain(hand_npsOne,( (Float)(0) ));
HXLINE( 232)				::DiffCalc_obj::smoothBrain(hand_npsTwo,( (Float)(0) ));
HXLINE( 234)				::DiffCalc_obj::smoothBrainTwo(hand_diffOne);
HXLINE( 235)				::DiffCalc_obj::smoothBrainTwo(hand_diffTwo);
            			}
HXLINE( 230)			{
HXLINE( 231)				::DiffCalc_obj::smoothBrain(hand_npsOne,( (Float)(0) ));
HXLINE( 232)				::DiffCalc_obj::smoothBrain(hand_npsTwo,( (Float)(0) ));
HXLINE( 234)				::DiffCalc_obj::smoothBrainTwo(hand_diffOne);
HXLINE( 235)				::DiffCalc_obj::smoothBrainTwo(hand_diffTwo);
            			}
HXLINE( 230)			{
HXLINE( 231)				::DiffCalc_obj::smoothBrain(hand_npsOne,( (Float)(0) ));
HXLINE( 232)				::DiffCalc_obj::smoothBrain(hand_npsTwo,( (Float)(0) ));
HXLINE( 234)				::DiffCalc_obj::smoothBrainTwo(hand_diffOne);
HXLINE( 235)				::DiffCalc_obj::smoothBrainTwo(hand_diffTwo);
            			}
            		}
HXLINE( 244)		::Array< Float > point_npsOne = ::Array_obj< Float >::__new();
HXLINE( 245)		::Array< Float > point_npsTwo = ::Array_obj< Float >::__new();
HXLINE( 247)		{
HXLINE( 247)			int _g20 = 0;
HXDLIN( 247)			while((_g20 < segmentsOne->length)){
HXLINE( 247)				::Array< ::Dynamic> i = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(segmentsOne,_g20)) );
HXDLIN( 247)				_g20 = (_g20 + 1);
HXLINE( 249)				if (::hx::IsNull( i )) {
HXLINE( 250)					continue;
            				}
HXLINE( 251)				point_npsOne->push(i->length);
            			}
            		}
HXLINE( 253)		{
HXLINE( 253)			int _g21 = 0;
HXDLIN( 253)			while((_g21 < segmentsTwo->length)){
HXLINE( 253)				::Array< ::Dynamic> i = ( (::Array< ::Dynamic>)(_hx_array_unsafe_get(segmentsTwo,_g21)) );
HXDLIN( 253)				_g21 = (_g21 + 1);
HXLINE( 255)				if (::hx::IsNull( i )) {
HXLINE( 256)					continue;
            				}
HXLINE( 257)				point_npsTwo->push(i->length);
            			}
            		}
HXLINE( 260)		Float maxPoints = ( (Float)(0) );
HXLINE( 262)		{
HXLINE( 262)			int _g22 = 0;
HXDLIN( 262)			while((_g22 < point_npsOne->length)){
HXLINE( 262)				Float i = point_npsOne->__get(_g22);
HXDLIN( 262)				_g22 = (_g22 + 1);
HXLINE( 263)				maxPoints = (maxPoints + i);
            			}
            		}
HXLINE( 264)		{
HXLINE( 264)			int _g23 = 0;
HXDLIN( 264)			while((_g23 < point_npsTwo->length)){
HXLINE( 264)				Float i = point_npsTwo->__get(_g23);
HXDLIN( 264)				_g23 = (_g23 + 1);
HXLINE( 265)				maxPoints = (maxPoints + i);
            			}
            		}
HXLINE( 267)		if (::hx::IsGreater( accuracy,((Float).965) )) {
HXLINE( 268)			accuracy = ((Float).965);
            		}
HXLINE( 270)		::DiffCalc_obj::lastDiffHandOne = hand_diffOne;
HXLINE( 271)		::DiffCalc_obj::lastDiffHandTwo = hand_diffTwo;
HXLINE( 273)		return ::HelperFunctions_obj::truncateFloat(::DiffCalc_obj::chisel(( (Float)(accuracy) ),hand_diffOne,hand_diffTwo,point_npsOne,point_npsTwo,maxPoints),2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DiffCalc_obj,CalculateDiff,return )

Float DiffCalc_obj::chisel(Float scoreGoal,::Array< Float > diffOne,::Array< Float > diffTwo,::Array< Float > pointsOne,::Array< Float > pointsTwo,Float maxPoints){
            	HX_STACKFRAME(&_hx_pos_ac88a8d52f7b54c5_277_chisel)
HXLINE( 278)		Float lowerBound = ( (Float)(0) );
HXLINE( 279)		Float upperBound = ( (Float)(100) );
HXLINE( 281)		while(((upperBound - lowerBound) > ((Float)0.01))){
HXLINE( 283)			Float average = ((upperBound + lowerBound) / ( (Float)(2) ));
HXLINE( 284)			Float amtOfPoints = ::DiffCalc_obj::calcuate(average,diffOne,pointsOne);
HXDLIN( 284)			Float amtOfPoints1 = (amtOfPoints + ::DiffCalc_obj::calcuate(average,diffTwo,pointsTwo));
HXLINE( 285)			if (((amtOfPoints1 / maxPoints) < scoreGoal)) {
HXLINE( 286)				lowerBound = average;
            			}
            			else {
HXLINE( 288)				upperBound = average;
            			}
            		}
HXLINE( 290)		return upperBound;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(DiffCalc_obj,chisel,return )

Float DiffCalc_obj::calcuate(Float midPoint,::Array< Float > diff,::Array< Float > points){
            	HX_STACKFRAME(&_hx_pos_ac88a8d52f7b54c5_294_calcuate)
HXLINE( 295)		Float output = ( (Float)(0) );
HXLINE( 297)		{
HXLINE( 297)			int _g = 0;
HXDLIN( 297)			int _g1 = diff->length;
HXDLIN( 297)			while((_g < _g1)){
HXLINE( 297)				_g = (_g + 1);
HXDLIN( 297)				int i = (_g - 1);
HXLINE( 299)				Float res = diff->__get(i);
HXLINE( 300)				if ((midPoint > res)) {
HXLINE( 301)					output = (output + points->__get(i));
            				}
            				else {
HXLINE( 303)					output = (output + (points->__get(i) * ::Math_obj::pow((midPoint / res),((Float)1.2))));
            				}
            			}
            		}
HXLINE( 305)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DiffCalc_obj,calcuate,return )

int DiffCalc_obj::findStupid(Float strumTime,::Array< Float > array){
            	HX_STACKFRAME(&_hx_pos_ac88a8d52f7b54c5_309_findStupid)
HXLINE( 310)		{
HXLINE( 310)			int _g = 0;
HXDLIN( 310)			int _g1 = array->length;
HXDLIN( 310)			while((_g < _g1)){
HXLINE( 310)				_g = (_g + 1);
HXDLIN( 310)				int i = (_g - 1);
HXLINE( 311)				if ((array->__get(i) == strumTime)) {
HXLINE( 312)					return i;
            				}
            			}
            		}
HXLINE( 313)		return -1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DiffCalc_obj,findStupid,return )

Float DiffCalc_obj::fingieCalc(::Array< ::Dynamic> floats,::Array< Float > columArray){
            	HX_STACKFRAME(&_hx_pos_ac88a8d52f7b54c5_317_fingieCalc)
HXLINE( 318)		Float sum = ( (Float)(0) );
HXLINE( 319)		if ((floats->length == 0)) {
HXLINE( 320)			return ( (Float)(0) );
            		}
HXLINE( 321)		int startIndex = ::DiffCalc_obj::findStupid(floats->__get(0).StaticCast<  ::SmallNote >()->strumTime,columArray);
HXLINE( 322)		if ((startIndex == -1)) {
HXLINE( 323)			return ( (Float)(0) );
            		}
HXLINE( 324)		{
HXLINE( 324)			int _g = 0;
HXDLIN( 324)			while((_g < floats->length)){
HXLINE( 324)				 ::SmallNote i = floats->__get(_g).StaticCast<  ::SmallNote >();
HXDLIN( 324)				_g = (_g + 1);
HXLINE( 326)				sum = (sum + (columArray->__get((startIndex + 1)) - columArray->__get(startIndex)));
HXLINE( 327)				startIndex = (startIndex + 1);
            			}
            		}
HXLINE( 330)		if ((sum == 0)) {
HXLINE( 331)			return ( (Float)(0) );
            		}
HXLINE( 333)		return (( (Float)((1375 * floats->length)) ) / sum);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DiffCalc_obj,fingieCalc,return )

void DiffCalc_obj::smoothBrain(::Array< Float > npsVector,Float weirdchamp){
            	HX_STACKFRAME(&_hx_pos_ac88a8d52f7b54c5_339_smoothBrain)
HXLINE( 340)		Float floatOne = weirdchamp;
HXLINE( 341)		Float floatTwo = weirdchamp;
HXLINE( 343)		{
HXLINE( 343)			int _g = 0;
HXDLIN( 343)			int _g1 = npsVector->length;
HXDLIN( 343)			while((_g < _g1)){
HXLINE( 343)				_g = (_g + 1);
HXDLIN( 343)				int i = (_g - 1);
HXLINE( 345)				Float result = npsVector->__get(i);
HXLINE( 347)				Float chunker = floatOne;
HXLINE( 348)				floatOne = floatTwo;
HXLINE( 349)				floatTwo = result;
HXLINE( 351)				npsVector[i] = (((chunker + floatOne) + floatTwo) / ( (Float)(3) ));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(DiffCalc_obj,smoothBrain,(void))

void DiffCalc_obj::smoothBrainTwo(::Array< Float > diffVector){
            	HX_STACKFRAME(&_hx_pos_ac88a8d52f7b54c5_357_smoothBrainTwo)
HXLINE( 358)		Float floatZero = ( (Float)(0) );
HXLINE( 360)		{
HXLINE( 360)			int _g = 0;
HXDLIN( 360)			int _g1 = diffVector->length;
HXDLIN( 360)			while((_g < _g1)){
HXLINE( 360)				_g = (_g + 1);
HXDLIN( 360)				int i = (_g - 1);
HXLINE( 362)				Float result = diffVector->__get(i);
HXLINE( 364)				Float fuck = floatZero;
HXLINE( 365)				floatZero = result;
HXLINE( 366)				diffVector[i] = ((fuck + floatZero) / ( (Float)(2) ));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DiffCalc_obj,smoothBrainTwo,(void))


DiffCalc_obj::DiffCalc_obj()
{
}

bool DiffCalc_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { outValue = ( scale ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"chisel") ) { outValue = chisel_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"calcuate") ) { outValue = calcuate_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"findStupid") ) { outValue = findStupid_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fingieCalc") ) { outValue = fingieCalc_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"smoothBrain") ) { outValue = smoothBrain_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"CalculateDiff") ) { outValue = CalculateDiff_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"smoothBrainTwo") ) { outValue = smoothBrainTwo_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lastDiffHandOne") ) { outValue = ( lastDiffHandOne ); return true; }
		if (HX_FIELD_EQ(inName,"lastDiffHandTwo") ) { outValue = ( lastDiffHandTwo ); return true; }
	}
	return false;
}

bool DiffCalc_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { scale=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lastDiffHandOne") ) { lastDiffHandOne=ioValue.Cast< ::Array< Float > >(); return true; }
		if (HX_FIELD_EQ(inName,"lastDiffHandTwo") ) { lastDiffHandTwo=ioValue.Cast< ::Array< Float > >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *DiffCalc_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo DiffCalc_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &DiffCalc_obj::scale,HX_("scale",8a,ce,ce,78)},
	{::hx::fsObject /* ::Array< Float > */ ,(void *) &DiffCalc_obj::lastDiffHandOne,HX_("lastDiffHandOne",fc,dd,03,c1)},
	{::hx::fsObject /* ::Array< Float > */ ,(void *) &DiffCalc_obj::lastDiffHandTwo,HX_("lastDiffHandTwo",22,b1,07,c1)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void DiffCalc_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DiffCalc_obj::scale,"scale");
	HX_MARK_MEMBER_NAME(DiffCalc_obj::lastDiffHandOne,"lastDiffHandOne");
	HX_MARK_MEMBER_NAME(DiffCalc_obj::lastDiffHandTwo,"lastDiffHandTwo");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DiffCalc_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DiffCalc_obj::scale,"scale");
	HX_VISIT_MEMBER_NAME(DiffCalc_obj::lastDiffHandOne,"lastDiffHandOne");
	HX_VISIT_MEMBER_NAME(DiffCalc_obj::lastDiffHandTwo,"lastDiffHandTwo");
};

#endif

::hx::Class DiffCalc_obj::__mClass;

static ::String DiffCalc_obj_sStaticFields[] = {
	HX_("scale",8a,ce,ce,78),
	HX_("lastDiffHandOne",fc,dd,03,c1),
	HX_("lastDiffHandTwo",22,b1,07,c1),
	HX_("CalculateDiff",6b,18,eb,e6),
	HX_("chisel",f6,0f,c0,bc),
	HX_("calcuate",d2,7d,fa,5c),
	HX_("findStupid",30,cd,84,3c),
	HX_("fingieCalc",cd,63,04,c1),
	HX_("smoothBrain",a8,23,19,c0),
	HX_("smoothBrainTwo",c4,ba,4a,27),
	::String(null())
};

void DiffCalc_obj::__register()
{
	DiffCalc_obj _hx_dummy;
	DiffCalc_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("DiffCalc",5a,43,8d,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DiffCalc_obj::__GetStatic;
	__mClass->mSetStaticField = &DiffCalc_obj::__SetStatic;
	__mClass->mMarkFunc = DiffCalc_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(DiffCalc_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< DiffCalc_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DiffCalc_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DiffCalc_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DiffCalc_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DiffCalc_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ac88a8d52f7b54c5_19_boot)
HXDLIN(  19)		scale = ((Float)5.4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ac88a8d52f7b54c5_21_boot)
HXDLIN(  21)		lastDiffHandOne = ::Array_obj< Float >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ac88a8d52f7b54c5_22_boot)
HXDLIN(  22)		lastDiffHandTwo = ::Array_obj< Float >::__new(0);
            	}
}

