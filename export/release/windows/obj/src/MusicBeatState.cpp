// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CustomFadeTransition
#include <CustomFadeTransition.h>
#endif
#ifndef INCLUDED_Debug
#include <Debug.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_TimingStruct
#include <TimingStruct.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_495f89d9d0902be3_19_new,"MusicBeatState","new",0xdae47368,"MusicBeatState.new","MusicBeatState.hx",19,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_30_get_controls,"MusicBeatState","get_controls",0xacecf677,"MusicBeatState.get_controls","MusicBeatState.hx",30,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_37_destroy,"MusicBeatState","destroy",0x72d8f402,"MusicBeatState.destroy","MusicBeatState.hx",37,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_44_add,"MusicBeatState","add",0xdada9529,"MusicBeatState.add","MusicBeatState.hx",44,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_53_clean,"MusicBeatState","clean",0x62a0e691,"MusicBeatState.clean","MusicBeatState.hx",53,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_63_create,"MusicBeatState","create",0x5e9058f4,"MusicBeatState.create","MusicBeatState.hx",63,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_84_update,"MusicBeatState","update",0x69867801,"MusicBeatState.update","MusicBeatState.hx",84,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_180_updateBeat,"MusicBeatState","updateBeat",0x79761a17,"MusicBeatState.updateBeat","MusicBeatState.hx",180,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_187_updateCurStep,"MusicBeatState","updateCurStep",0xd6ad7aeb,"MusicBeatState.updateCurStep","MusicBeatState.hx",187,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_204_stepHit,"MusicBeatState","stepHit",0xcf94756f,"MusicBeatState.stepHit","MusicBeatState.hx",204,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_209_beatHit,"MusicBeatState","beatHit",0xc257b185,"MusicBeatState.beatHit","MusicBeatState.hx",209,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_218_fancyOpenURL,"MusicBeatState","fancyOpenURL",0x105d0074,"MusicBeatState.fancyOpenURL","MusicBeatState.hx",218,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_244_onWindowFocusOut,"MusicBeatState","onWindowFocusOut",0x5480551d,"MusicBeatState.onWindowFocusOut","MusicBeatState.hx",244,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_263_onWindowFocusIn,"MusicBeatState","onWindowFocusIn",0xb49cae36,"MusicBeatState.onWindowFocusIn","MusicBeatState.hx",263,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_222_switchState,"MusicBeatState","switchState",0xaf81f285,"MusicBeatState.switchState","MusicBeatState.hx",222,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_229_switchState,"MusicBeatState","switchState",0xaf81f285,"MusicBeatState.switchState","MusicBeatState.hx",229,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_233_switchState,"MusicBeatState","switchState",0xaf81f285,"MusicBeatState.switchState","MusicBeatState.hx",233,0xa1b2f108)
HX_LOCAL_STACK_FRAME(_hx_pos_495f89d9d0902be3_32_boot,"MusicBeatState","boot",0xa519882a,"MusicBeatState.boot","MusicBeatState.hx",32,0xa1b2f108)

void MusicBeatState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_495f89d9d0902be3_19_new)
HXLINE(  34)		this->assets = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  26)		this->curDecimalBeat = ((Float)0);
HXLINE(  25)		this->curBeat = 0;
HXLINE(  24)		this->curStep = 0;
HXLINE(  22)		this->lastStep = ((Float)0);
HXLINE(  21)		this->lastBeat = ((Float)0);
HXLINE(  19)		super::__construct(TransIn,TransOut);
            	}

Dynamic MusicBeatState_obj::__CreateEmpty() { return new MusicBeatState_obj; }

void *MusicBeatState_obj::_hx_vtable = 0;

Dynamic MusicBeatState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MusicBeatState_obj > _hx_result = new MusicBeatState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MusicBeatState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

 ::Controls MusicBeatState_obj::get_controls(){
            	HX_STACKFRAME(&_hx_pos_495f89d9d0902be3_30_get_controls)
HXDLIN(  30)		return ::PlayerSettings_obj::player1->controls;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatState_obj,get_controls,return )

void MusicBeatState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_495f89d9d0902be3_37_destroy)
HXLINE(  38)		::lime::app::Application_obj::current->_hx___window->onFocusIn->remove(this->onWindowFocusOut_dyn());
HXLINE(  39)		::lime::app::Application_obj::current->_hx___window->onFocusIn->remove(this->onWindowFocusIn_dyn());
HXLINE(  40)		this->super::destroy();
            	}


 ::Dynamic MusicBeatState_obj::add( ::Dynamic _tmp_Object){
            	HX_STACKFRAME(&_hx_pos_495f89d9d0902be3_44_add)
HXLINE(  45)		 ::flixel::FlxBasic Object = ( ( ::flixel::FlxBasic)(_tmp_Object) );
HXDLIN(  45)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("optimize",dd,8c,18,1d),::hx::paccDynamic)) )) {
HXLINE(  46)			this->assets->push(Object);
            		}
HXLINE(  47)		 ::flixel::FlxBasic result = ( ( ::flixel::FlxBasic)(this->super::add(Object)) );
HXLINE(  48)		return result;
            	}


void MusicBeatState_obj::clean(){
            	HX_STACKFRAME(&_hx_pos_495f89d9d0902be3_53_clean)
HXDLIN(  53)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("optimize",dd,8c,18,1d),::hx::paccDynamic)) )) {
HXLINE(  55)			int _g = 0;
HXDLIN(  55)			::Array< ::Dynamic> _g1 = this->assets;
HXDLIN(  55)			while((_g < _g1->length)){
HXLINE(  55)				 ::flixel::FlxBasic i = _g1->__get(_g).StaticCast<  ::flixel::FlxBasic >();
HXDLIN(  55)				_g = (_g + 1);
HXLINE(  57)				this->remove(i,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatState_obj,clean,(void))

void MusicBeatState_obj::create(){
            	HX_STACKFRAME(&_hx_pos_495f89d9d0902be3_63_create)
HXLINE(  64)		if (::MusicBeatState_obj::initSave) {
HXLINE(  66)			if (::hx::IsLess( ::flixel::FlxG_obj::save->data->__Field(HX_("laneTransparency",24,32,52,af),::hx::paccDynamic),0 )) {
HXLINE(  67)				::flixel::FlxG_obj::save->data->__SetField(HX_("laneTransparency",24,32,52,af),0,::hx::paccDynamic);
            			}
HXLINE(  69)			if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("laneTransparency",24,32,52,af),::hx::paccDynamic),1 )) {
HXLINE(  70)				::flixel::FlxG_obj::save->data->__SetField(HX_("laneTransparency",24,32,52,af),1,::hx::paccDynamic);
            			}
            		}
HXLINE(  73)		::lime::app::Application_obj::current->_hx___window->onFocusIn->add(this->onWindowFocusIn_dyn(),null(),null());
HXLINE(  74)		::lime::app::Application_obj::current->_hx___window->onFocusOut->add(this->onWindowFocusOut_dyn(),null(),null());
HXLINE(  75)		::TimingStruct_obj::clearTimings();
HXLINE(  77)		bool _hx_tmp = ::hx::IsNotNull( this->transIn );
HXLINE(  80)		this->super::create();
            	}


void MusicBeatState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_495f89d9d0902be3_84_update)
HXLINE( 108)		if ((::Conductor_obj::songPosition < 0)) {
HXLINE( 109)			this->curDecimalBeat = ( (Float)(0) );
            		}
            		else {
HXLINE( 112)			if ((::TimingStruct_obj::AllTimings->length > 1)) {
HXLINE( 114)				 ::TimingStruct data = ::TimingStruct_obj::getTimingAtTimestamp(::Conductor_obj::songPosition);
HXLINE( 118)				::Conductor_obj::crochet = ((( (Float)(60) ) / data->bpm) * ( (Float)(1000) ));
HXLINE( 120)				Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 121)				Float startInMS = (data->startTime * ( (Float)(1000) ));
HXLINE( 123)				this->curDecimalBeat = (data->startBeat + (((::Conductor_obj::songPosition / ( (Float)(1000) )) - data->startTime) * (data->bpm / ( (Float)(60) ))));
HXLINE( 124)				int ste = ::Math_obj::floor((data->startStep + ((::Conductor_obj::songPosition - startInMS) / step)));
HXLINE( 125)				if ((ste >= 0)) {
HXLINE( 127)					if ((ste > this->curStep)) {
HXLINE( 129)						int _g = this->curStep;
HXDLIN( 129)						int _g1 = ste;
HXDLIN( 129)						while((_g < _g1)){
HXLINE( 129)							_g = (_g + 1);
HXDLIN( 129)							int i = (_g - 1);
HXLINE( 131)							this->curStep++;
HXLINE( 132)							this->updateBeat();
HXLINE( 133)							this->stepHit();
            						}
            					}
            					else {
HXLINE( 136)						if ((ste < this->curStep)) {
HXLINE( 140)							this->curStep = ste;
HXLINE( 141)							this->updateBeat();
HXLINE( 142)							this->stepHit();
            						}
            					}
            				}
            			}
            			else {
HXLINE( 148)				this->curDecimalBeat = ((::Conductor_obj::songPosition / ( (Float)(1000) )) * (::Conductor_obj::bpm / ( (Float)(60) )));
HXLINE( 149)				int nextStep = ::Math_obj::floor((::Conductor_obj::songPosition / ::Conductor_obj::stepCrochet));
HXLINE( 150)				if ((nextStep >= 0)) {
HXLINE( 152)					if ((nextStep > this->curStep)) {
HXLINE( 154)						int _g = this->curStep;
HXDLIN( 154)						int _g1 = nextStep;
HXDLIN( 154)						while((_g < _g1)){
HXLINE( 154)							_g = (_g + 1);
HXDLIN( 154)							int i = (_g - 1);
HXLINE( 156)							this->curStep++;
HXLINE( 157)							this->updateBeat();
HXLINE( 158)							this->stepHit();
            						}
            					}
            					else {
HXLINE( 161)						if ((nextStep < this->curStep)) {
HXLINE( 165)							this->curStep = nextStep;
HXLINE( 166)							this->updateBeat();
HXLINE( 167)							this->stepHit();
            						}
            					}
            				}
HXLINE( 170)				::Conductor_obj::crochet = ((( (Float)(60) ) / ::Conductor_obj::bpm) * ( (Float)(1000) ));
            			}
            		}
HXLINE( 174)		::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->setFPSCap(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic)) ));
HXLINE( 176)		this->super::update(elapsed);
            	}


void MusicBeatState_obj::updateBeat(){
            	HX_STACKFRAME(&_hx_pos_495f89d9d0902be3_180_updateBeat)
HXLINE( 181)		this->lastBeat = ( (Float)(this->curBeat) );
HXLINE( 182)		this->curBeat = ::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(4) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatState_obj,updateBeat,(void))

int MusicBeatState_obj::updateCurStep(){
            	HX_STACKFRAME(&_hx_pos_495f89d9d0902be3_187_updateCurStep)
HXLINE( 188)		 ::Dynamic lastChange =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("stepTime",79,75,25,a0),0)
            			->setFixed(1,HX_("bpm",df,be,4a,00),( (Float)(0) ))
            			->setFixed(2,HX_("songTime",82,2a,d5,3a),( (Float)(0) )));
HXLINE( 193)		{
HXLINE( 193)			int _g = 0;
HXDLIN( 193)			int _g1 = ::Conductor_obj::bpmChangeMap->length;
HXDLIN( 193)			while((_g < _g1)){
HXLINE( 193)				_g = (_g + 1);
HXDLIN( 193)				int i = (_g - 1);
HXLINE( 195)				if (::hx::IsGreaterEq( ::Conductor_obj::songPosition,::Conductor_obj::bpmChangeMap->__get(i)->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic) )) {
HXLINE( 196)					lastChange = ::Conductor_obj::bpmChangeMap->__get(i);
            				}
            			}
            		}
HXLINE( 199)		return ( (int)((lastChange->__Field(HX_("stepTime",79,75,25,a0),::hx::paccDynamic) + ::Math_obj::floor(((::Conductor_obj::songPosition - ( (Float)(lastChange->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic)) )) / ::Conductor_obj::stepCrochet)))) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatState_obj,updateCurStep,return )

void MusicBeatState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_495f89d9d0902be3_204_stepHit)
HXDLIN( 204)		if ((::hx::Mod(this->curStep,4) == 0)) {
HXLINE( 205)			this->beatHit();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatState_obj,stepHit,(void))

void MusicBeatState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_495f89d9d0902be3_209_beatHit)
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatState_obj,beatHit,(void))

void MusicBeatState_obj::fancyOpenURL(::String schmancy){
            	HX_GC_STACKFRAME(&_hx_pos_495f89d9d0902be3_218_fancyOpenURL)
HXDLIN( 218)		::String prefix = HX_("",00,00,00,00);
HXDLIN( 218)		if (!( ::EReg_obj::__alloc( HX_CTX ,HX_("^https?://",48,ee,dd,38),HX_("",00,00,00,00))->match(schmancy))) {
HXDLIN( 218)			prefix = HX_("http://",52,75,cd,5a);
            		}
HXDLIN( 218)		::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,(prefix + schmancy)),HX_("_blank",95,26,d9,b0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(MusicBeatState_obj,fancyOpenURL,(void))

void MusicBeatState_obj::onWindowFocusOut(){
            	HX_GC_STACKFRAME(&_hx_pos_495f89d9d0902be3_244_onWindowFocusOut)
HXDLIN( 244)		if (::PlayState_obj::inDaPlay) {
HXLINE( 246)			bool _hx_tmp;
HXDLIN( 246)			bool _hx_tmp1;
HXDLIN( 246)			if (!(::PlayState_obj::instance->paused)) {
HXLINE( 246)				_hx_tmp1 = !(::PlayState_obj::instance->endingSong);
            			}
            			else {
HXLINE( 246)				_hx_tmp1 = false;
            			}
HXDLIN( 246)			if (_hx_tmp1) {
HXLINE( 246)				_hx_tmp = ::PlayState_obj::instance->songStarted;
            			}
            			else {
HXLINE( 246)				_hx_tmp = false;
            			}
HXDLIN( 246)			if (_hx_tmp) {
HXLINE( 248)				::Debug_obj::logTrace(HX_("Lost Focus",9c,8c,4d,79),::hx::SourceInfo(HX_("source/MusicBeatState.hx",94,cf,99,e4),248,HX_("MusicBeatState",76,df,84,5d),HX_("onWindowFocusOut",25,3d,90,17)));
HXLINE( 249)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN( 249)				_hx_tmp->openSubState( ::PauseSubState_obj::__alloc( HX_CTX ));
HXLINE( 250)				::PlayState_obj::boyfriend->stunned = true;
HXLINE( 252)				::PlayState_obj::instance->persistentUpdate = false;
HXLINE( 253)				::PlayState_obj::instance->persistentDraw = true;
HXLINE( 254)				::PlayState_obj::instance->paused = true;
HXLINE( 256)				{
HXLINE( 256)					 ::flixel::_hx_system::FlxSound _this = ::PlayState_obj::instance->vocals;
HXDLIN( 256)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE( 257)				{
HXLINE( 257)					 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN( 257)					_this1->cleanup(_this1->autoDestroy,true);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatState_obj,onWindowFocusOut,(void))

void MusicBeatState_obj::onWindowFocusIn(){
            	HX_STACKFRAME(&_hx_pos_495f89d9d0902be3_263_onWindowFocusIn)
HXLINE( 264)		::Debug_obj::logTrace(HX_("IM BACK!!!",3e,1f,67,e9),::hx::SourceInfo(HX_("source/MusicBeatState.hx",94,cf,99,e4),264,HX_("MusicBeatState",76,df,84,5d),HX_("onWindowFocusIn",2e,9f,1f,84)));
HXLINE( 265)		::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->setFPSCap(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatState_obj,onWindowFocusIn,(void))

bool MusicBeatState_obj::initSave;

void MusicBeatState_obj::switchState( ::flixel::FlxState nextState){
            	HX_GC_STACKFRAME(&_hx_pos_495f89d9d0902be3_222_switchState)
HXLINE( 223)		 ::Dynamic curState = ::flixel::FlxG_obj::game->_state;
HXLINE( 224)		 ::MusicBeatState leState = ( ( ::MusicBeatState)(curState) );
HXLINE( 225)		if (!(::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn)) {
HXLINE( 226)			leState->openSubState( ::CustomFadeTransition_obj::__alloc( HX_CTX ,((Float)0.6),false));
HXLINE( 227)			if (::hx::IsEq( nextState,::flixel::FlxG_obj::game->_state )) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_495f89d9d0902be3_229_switchState)
HXLINE( 229)					 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 229)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 229)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 228)				::CustomFadeTransition_obj::finishCallback =  ::Dynamic(new _hx_Closure_0());
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxState,nextState) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_495f89d9d0902be3_233_switchState)
HXLINE( 233)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 233)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 232)				::CustomFadeTransition_obj::finishCallback =  ::Dynamic(new _hx_Closure_1(nextState));
            			}
HXLINE( 236)			return;
            		}
HXLINE( 238)		::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = false;
HXLINE( 239)		if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 239)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MusicBeatState_obj,switchState,(void))


::hx::ObjectPtr< MusicBeatState_obj > MusicBeatState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< MusicBeatState_obj > __this = new MusicBeatState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< MusicBeatState_obj > MusicBeatState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	MusicBeatState_obj *__this = (MusicBeatState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MusicBeatState_obj), true, "MusicBeatState"));
	*(void **)__this = MusicBeatState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

MusicBeatState_obj::MusicBeatState_obj()
{
}

void MusicBeatState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MusicBeatState);
	HX_MARK_MEMBER_NAME(lastBeat,"lastBeat");
	HX_MARK_MEMBER_NAME(lastStep,"lastStep");
	HX_MARK_MEMBER_NAME(curStep,"curStep");
	HX_MARK_MEMBER_NAME(curBeat,"curBeat");
	HX_MARK_MEMBER_NAME(curDecimalBeat,"curDecimalBeat");
	HX_MARK_MEMBER_NAME(assets,"assets");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MusicBeatState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lastBeat,"lastBeat");
	HX_VISIT_MEMBER_NAME(lastStep,"lastStep");
	HX_VISIT_MEMBER_NAME(curStep,"curStep");
	HX_VISIT_MEMBER_NAME(curBeat,"curBeat");
	HX_VISIT_MEMBER_NAME(curDecimalBeat,"curDecimalBeat");
	HX_VISIT_MEMBER_NAME(assets,"assets");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MusicBeatState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clean") ) { return ::hx::Val( clean_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"assets") ) { return ::hx::Val( assets ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curStep") ) { return ::hx::Val( curStep ); }
		if (HX_FIELD_EQ(inName,"curBeat") ) { return ::hx::Val( curBeat ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastBeat") ) { return ::hx::Val( lastBeat ); }
		if (HX_FIELD_EQ(inName,"lastStep") ) { return ::hx::Val( lastStep ); }
		if (HX_FIELD_EQ(inName,"controls") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_controls() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"updateBeat") ) { return ::hx::Val( updateBeat_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_controls") ) { return ::hx::Val( get_controls_dyn() ); }
		if (HX_FIELD_EQ(inName,"fancyOpenURL") ) { return ::hx::Val( fancyOpenURL_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateCurStep") ) { return ::hx::Val( updateCurStep_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"curDecimalBeat") ) { return ::hx::Val( curDecimalBeat ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onWindowFocusIn") ) { return ::hx::Val( onWindowFocusIn_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"onWindowFocusOut") ) { return ::hx::Val( onWindowFocusOut_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MusicBeatState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"initSave") ) { outValue = ( initSave ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"switchState") ) { outValue = switchState_dyn(); return true; }
	}
	return false;
}

::hx::Val MusicBeatState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"assets") ) { assets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curStep") ) { curStep=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curBeat") ) { curBeat=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastBeat") ) { lastBeat=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastStep") ) { lastStep=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"curDecimalBeat") ) { curDecimalBeat=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MusicBeatState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"initSave") ) { initSave=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void MusicBeatState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("lastBeat",ec,fa,5c,d4));
	outFields->push(HX_("lastStep",c2,00,a5,df));
	outFields->push(HX_("curStep",ec,58,71,b7));
	outFields->push(HX_("curBeat",16,53,29,ac));
	outFields->push(HX_("curDecimalBeat",07,e1,36,6b));
	outFields->push(HX_("controls",76,86,bc,37));
	outFields->push(HX_("assets",83,48,03,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MusicBeatState_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(MusicBeatState_obj,lastBeat),HX_("lastBeat",ec,fa,5c,d4)},
	{::hx::fsFloat,(int)offsetof(MusicBeatState_obj,lastStep),HX_("lastStep",c2,00,a5,df)},
	{::hx::fsInt,(int)offsetof(MusicBeatState_obj,curStep),HX_("curStep",ec,58,71,b7)},
	{::hx::fsInt,(int)offsetof(MusicBeatState_obj,curBeat),HX_("curBeat",16,53,29,ac)},
	{::hx::fsFloat,(int)offsetof(MusicBeatState_obj,curDecimalBeat),HX_("curDecimalBeat",07,e1,36,6b)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MusicBeatState_obj,assets),HX_("assets",83,48,03,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MusicBeatState_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &MusicBeatState_obj::initSave,HX_("initSave",6d,ba,04,51)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MusicBeatState_obj_sMemberFields[] = {
	HX_("lastBeat",ec,fa,5c,d4),
	HX_("lastStep",c2,00,a5,df),
	HX_("curStep",ec,58,71,b7),
	HX_("curBeat",16,53,29,ac),
	HX_("curDecimalBeat",07,e1,36,6b),
	HX_("get_controls",7f,3a,d6,ec),
	HX_("assets",83,48,03,4c),
	HX_("destroy",fa,2c,86,24),
	HX_("add",21,f2,49,00),
	HX_("clean",89,71,5b,48),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("updateBeat",1f,cc,c8,f9),
	HX_("updateCurStep",e3,bd,df,82),
	HX_("stepHit",67,ae,41,81),
	HX_("beatHit",7d,ea,04,74),
	HX_("fancyOpenURL",7c,44,46,50),
	HX_("onWindowFocusOut",25,3d,90,17),
	HX_("onWindowFocusIn",2e,9f,1f,84),
	::String(null()) };

static void MusicBeatState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MusicBeatState_obj::initSave,"initSave");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MusicBeatState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MusicBeatState_obj::initSave,"initSave");
};

#endif

::hx::Class MusicBeatState_obj::__mClass;

static ::String MusicBeatState_obj_sStaticFields[] = {
	HX_("initSave",6d,ba,04,51),
	HX_("switchState",7d,07,8b,77),
	::String(null())
};

void MusicBeatState_obj::__register()
{
	MusicBeatState_obj _hx_dummy;
	MusicBeatState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MusicBeatState",76,df,84,5d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MusicBeatState_obj::__GetStatic;
	__mClass->mSetStaticField = &MusicBeatState_obj::__SetStatic;
	__mClass->mMarkFunc = MusicBeatState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MusicBeatState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MusicBeatState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MusicBeatState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MusicBeatState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MusicBeatState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MusicBeatState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MusicBeatState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_495f89d9d0902be3_32_boot)
HXDLIN(  32)		initSave = false;
            	}
}

