// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Event
#include <Event.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cee7d4ca3e3c4fc7_18_new,"Event","new",0x84c25dec,"Event.new","Song.hx",18,0x775e99e9)

void Event_obj::__construct(::String name,Float pos,Float value,::String type){
            	HX_STACKFRAME(&_hx_pos_cee7d4ca3e3c4fc7_18_new)
HXLINE(  19)		this->name = name;
HXLINE(  20)		this->position = pos;
HXLINE(  21)		this->value = value;
HXLINE(  22)		this->type = type;
            	}

Dynamic Event_obj::__CreateEmpty() { return new Event_obj; }

void *Event_obj::_hx_vtable = 0;

Dynamic Event_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Event_obj > _hx_result = new Event_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Event_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x54eb3572;
}


Event_obj::Event_obj()
{
}

void Event_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Event);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_END_CLASS();
}

void Event_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(type,"type");
}

::hx::Val Event_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return ::hx::Val( value ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return ::hx::Val( position ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Event_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Event_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("position",a9,a0,fa,ca));
	outFields->push(HX_("value",71,7f,b8,31));
	outFields->push(HX_("type",ba,f2,08,4d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Event_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Event_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsFloat,(int)offsetof(Event_obj,position),HX_("position",a9,a0,fa,ca)},
	{::hx::fsFloat,(int)offsetof(Event_obj,value),HX_("value",71,7f,b8,31)},
	{::hx::fsString,(int)offsetof(Event_obj,type),HX_("type",ba,f2,08,4d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Event_obj_sStaticStorageInfo = 0;
#endif

static ::String Event_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("position",a9,a0,fa,ca),
	HX_("value",71,7f,b8,31),
	HX_("type",ba,f2,08,4d),
	::String(null()) };

::hx::Class Event_obj::__mClass;

void Event_obj::__register()
{
	Event_obj _hx_dummy;
	Event_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Event",fa,37,f2,08);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Event_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Event_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Event_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Event_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

