// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_GameplayCustomizeState
#include <GameplayCustomizeState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_NoteskinHelpers
#include <NoteskinHelpers.h>
#endif
#ifndef INCLUDED_OptionsDirect
#include <OptionsDirect.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayStateChangeables
#include <PlayStateChangeables.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Stage
#include <Stage.h>
#endif
#ifndef INCLUDED_StaticArrow
#include <StaticArrow.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrail
#include <flixel/addons/effects/FlxTrail.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_iterators_MapKeyValueIterator
#include <haxe/iterators/MapKeyValueIterator.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_269668c8d87413fa_20_new,"GameplayCustomizeState","new",0x755e1b66,"GameplayCustomizeState.new","GameplayCustomizeState.hx",20,0x759ed2ca)
static const ::String _hx_array_data_3ccf3074_1[] = {
	HX_("purple",3c,f6,89,71),HX_("blue",9a,42,19,41),HX_("green",c3,0e,ed,99),HX_("red",51,d9,56,00),
};
static const ::String _hx_array_data_3ccf3074_2[] = {
	HX_("LEFT",07,d0,70,32),HX_("DOWN",62,c0,2e,2d),HX_("UP",5b,4a,00,00),HX_("RIGHT",bc,43,52,67),
};
HX_LOCAL_STACK_FRAME(_hx_pos_269668c8d87413fa_64_create,"GameplayCustomizeState","create",0xe03d43b6,"GameplayCustomizeState.create","GameplayCustomizeState.hx",64,0x759ed2ca)
HX_LOCAL_STACK_FRAME(_hx_pos_269668c8d87413fa_339_update,"GameplayCustomizeState","update",0xeb3362c3,"GameplayCustomizeState.update","GameplayCustomizeState.hx",339,0x759ed2ca)
HX_LOCAL_STACK_FRAME(_hx_pos_269668c8d87413fa_438_update,"GameplayCustomizeState","update",0xeb3362c3,"GameplayCustomizeState.update","GameplayCustomizeState.hx",438,0x759ed2ca)
HX_LOCAL_STACK_FRAME(_hx_pos_269668c8d87413fa_444_update,"GameplayCustomizeState","update",0xeb3362c3,"GameplayCustomizeState.update","GameplayCustomizeState.hx",444,0x759ed2ca)
HX_LOCAL_STACK_FRAME(_hx_pos_269668c8d87413fa_485_beatHit,"GameplayCustomizeState","beatHit",0xb7f83083,"GameplayCustomizeState.beatHit","GameplayCustomizeState.hx",485,0x759ed2ca)
HX_LOCAL_STACK_FRAME(_hx_pos_269668c8d87413fa_510_generateStaticArrows,"GameplayCustomizeState","generateStaticArrows",0x379932e7,"GameplayCustomizeState.generateStaticArrows","GameplayCustomizeState.hx",510,0x759ed2ca)
HX_LOCAL_STACK_FRAME(_hx_pos_269668c8d87413fa_595_generateStaticArrows,"GameplayCustomizeState","generateStaticArrows",0x379932e7,"GameplayCustomizeState.generateStaticArrows","GameplayCustomizeState.hx",595,0x759ed2ca)
static const int _hx_array_data_3ccf3074_24[] = {
	(int)6,
};
static const int _hx_array_data_3ccf3074_25[] = {
	(int)7,
};
static const int _hx_array_data_3ccf3074_26[] = {
	(int)5,
};
static const int _hx_array_data_3ccf3074_27[] = {
	(int)4,
};
static const int _hx_array_data_3ccf3074_28[] = {
	(int)12,(int)16,
};
static const int _hx_array_data_3ccf3074_29[] = {
	(int)13,(int)17,
};
static const int _hx_array_data_3ccf3074_30[] = {
	(int)14,(int)18,
};
static const int _hx_array_data_3ccf3074_31[] = {
	(int)15,(int)19,
};
HX_LOCAL_STACK_FRAME(_hx_pos_269668c8d87413fa_55_boot,"GameplayCustomizeState","boot",0x3512de6c,"GameplayCustomizeState.boot","GameplayCustomizeState.hx",55,0x759ed2ca)
HX_LOCAL_STACK_FRAME(_hx_pos_269668c8d87413fa_56_boot,"GameplayCustomizeState","boot",0x3512de6c,"GameplayCustomizeState.boot","GameplayCustomizeState.hx",56,0x759ed2ca)
HX_LOCAL_STACK_FRAME(_hx_pos_269668c8d87413fa_57_boot,"GameplayCustomizeState","boot",0x3512de6c,"GameplayCustomizeState.boot","GameplayCustomizeState.hx",57,0x759ed2ca)
HX_LOCAL_STACK_FRAME(_hx_pos_269668c8d87413fa_58_boot,"GameplayCustomizeState","boot",0x3512de6c,"GameplayCustomizeState.boot","GameplayCustomizeState.hx",58,0x759ed2ca)
HX_LOCAL_STACK_FRAME(_hx_pos_269668c8d87413fa_59_boot,"GameplayCustomizeState","boot",0x3512de6c,"GameplayCustomizeState.boot","GameplayCustomizeState.hx",59,0x759ed2ca)
HX_LOCAL_STACK_FRAME(_hx_pos_269668c8d87413fa_60_boot,"GameplayCustomizeState","boot",0x3512de6c,"GameplayCustomizeState.boot","GameplayCustomizeState.hx",60,0x759ed2ca)
HX_LOCAL_STACK_FRAME(_hx_pos_269668c8d87413fa_61_boot,"GameplayCustomizeState","boot",0x3512de6c,"GameplayCustomizeState.boot","GameplayCustomizeState.hx",61,0x759ed2ca)

void GameplayCustomizeState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_269668c8d87413fa_20_new)
HXLINE(  49)		this->dataColor = ::Array_obj< ::String >::fromData( _hx_array_data_3ccf3074_1,4);
HXLINE(  48)		this->dataSuffix = ::Array_obj< ::String >::fromData( _hx_array_data_3ccf3074_2,4);
HXLINE(  43)		this->pixelShitPart4 = null();
HXLINE(  42)		this->pixelShitPart3 = HX_("shared",a5,5e,2b,1d);
HXLINE(  41)		this->pixelShitPart2 = HX_("",00,00,00,00);
HXLINE(  40)		this->pixelShitPart1 = HX_("",00,00,00,00);
HXLINE(  23)		this->defaultY = ((( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )) - ( (Float)(50) ));
HXLINE(  22)		this->defaultX = ((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.55)) - ( (Float)(135) ));
HXLINE(  20)		super::__construct(TransIn,TransOut);
            	}

Dynamic GameplayCustomizeState_obj::__CreateEmpty() { return new GameplayCustomizeState_obj; }

void *GameplayCustomizeState_obj::_hx_vtable = 0;

Dynamic GameplayCustomizeState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GameplayCustomizeState_obj > _hx_result = new GameplayCustomizeState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool GameplayCustomizeState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4e1b7334) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x4e1b7334;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void GameplayCustomizeState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_269668c8d87413fa_64_create)
HXLINE(  65)		this->super::create();
HXLINE(  67)		::PlayStateChangeables_obj::Optimize = false;
HXLINE(  71)		::DiscordClient_obj::changePresence(HX_("Customizing Gameplay Modules",0d,93,44,0c),null(),null(),null(),null());
HXLINE(  74)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  75)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  76)		{
HXLINE(  76)			 ::flixel::FlxCamera _hx_tmp = this->camHUD;
HXDLIN(  76)			_hx_tmp->bgColor = (_hx_tmp->bgColor & 16777215);
HXDLIN(  76)			 ::flixel::FlxCamera _hx_tmp1 = this->camHUD;
HXDLIN(  76)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor | 0);
            		}
HXLINE(  78)		::flixel::FlxG_obj::cameras->reset(this->camGame);
HXLINE(  79)		::flixel::FlxG_obj::cameras->add(this->camHUD,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE(  81)		::flixel::FlxCamera_obj::_defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame);
HXLINE(  83)		this->camHUD->set_zoom(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic)) ));
HXLINE(  85)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  88)		::String stageCheck = HX_("stage",be,6a,0b,84);
HXLINE(  91)		if (::hx::IsNull( ::GameplayCustomizeState_obj::freeplayStage )) {
HXLINE(  93)			switch((int)(::GameplayCustomizeState_obj::freeplayWeek)){
            				case (int)2: {
HXLINE(  96)					stageCheck = HX_("halloween",8d,bb,38,50);
            				}
            				break;
            				case (int)3: {
HXLINE(  98)					stageCheck = HX_("philly",28,77,5e,ef);
            				}
            				break;
            				case (int)4: {
HXLINE( 100)					stageCheck = HX_("limo",1f,17,b3,47);
            				}
            				break;
            				case (int)5: {
HXLINE( 102)					if ((::GameplayCustomizeState_obj::freeplaySong == HX_("winter-horrorland",9d,39,f4,1e))) {
HXLINE( 103)						stageCheck = HX_("mallEvil",88,d3,e3,a7);
            					}
            					else {
HXLINE( 105)						stageCheck = HX_("mall",d4,3a,56,48);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 107)					if ((::GameplayCustomizeState_obj::freeplaySong == HX_("thorns",9c,bf,c7,8c))) {
HXLINE( 108)						stageCheck = HX_("schoolEvil",28,a1,f5,f7);
            					}
            					else {
HXLINE( 110)						stageCheck = HX_("school",74,b8,c8,40);
            					}
            				}
            				break;
            			}
            		}
            		else {
HXLINE( 114)			stageCheck = ::GameplayCustomizeState_obj::freeplayStage;
            		}
HXLINE( 117)		::String gfCheck = HX_("gf",1f,5a,00,00);
HXLINE( 119)		if (::hx::IsNull( ::GameplayCustomizeState_obj::freeplayGf )) {
HXLINE( 121)			switch((int)(::GameplayCustomizeState_obj::freeplayWeek)){
            				case (int)4: {
HXLINE( 124)					gfCheck = HX_("gf-car",a6,63,ab,07);
            				}
            				break;
            				case (int)5: {
HXLINE( 126)					gfCheck = HX_("gf-christmas",94,26,b1,6d);
            				}
            				break;
            				case (int)6: {
HXLINE( 128)					gfCheck = HX_("gf-pixel",98,3e,8c,55);
            				}
            				break;
            			}
            		}
            		else {
HXLINE( 132)			gfCheck = ::GameplayCustomizeState_obj::freeplayGf;
            		}
HXLINE( 134)		::GameplayCustomizeState_obj::gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),gfCheck,null());
HXLINE( 136)		if (::hx::IsNull( ::GameplayCustomizeState_obj::gf->frames )) {
HXLINE( 141)			::GameplayCustomizeState_obj::gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),HX_("gf",1f,5a,00,00),null());
            		}
HXLINE( 144)		::GameplayCustomizeState_obj::boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),::GameplayCustomizeState_obj::freeplayBf);
HXLINE( 146)		if (::hx::IsNull( ::GameplayCustomizeState_obj::boyfriend->frames )) {
HXLINE( 151)			::GameplayCustomizeState_obj::boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),HX_("bf",c4,55,00,00));
            		}
HXLINE( 154)		::GameplayCustomizeState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),::GameplayCustomizeState_obj::freeplayDad,null());
HXLINE( 156)		if (::hx::IsNull( ::GameplayCustomizeState_obj::dad->frames )) {
HXLINE( 161)			::GameplayCustomizeState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),HX_("dad",47,36,4c,00),null());
            		}
HXLINE( 164)		::GameplayCustomizeState_obj::Stage =  ::Stage_obj::__alloc( HX_CTX ,stageCheck);
HXLINE( 166)		 ::haxe::ds::StringMap positions = ( ( ::haxe::ds::StringMap)(::GameplayCustomizeState_obj::Stage->positions->get(::GameplayCustomizeState_obj::Stage->curStage)) );
HXLINE( 167)		if (::hx::IsNotNull( positions )) {
HXLINE( 169)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,positions);
HXDLIN( 169)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 169)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 169)				::String _hx_char = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN( 169)				::Array< int > pos = ( (::Array< int >)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE( 170)				{
HXLINE( 170)					{
HXLINE( 170)						 ::Character person = ::GameplayCustomizeState_obj::boyfriend;
HXLINE( 171)						if ((person->curCharacter == _hx_char)) {
HXLINE( 172)							person->setPosition(pos->__get(0),pos->__get(1));
            						}
            					}
HXLINE( 170)					{
HXLINE( 170)						 ::Character person1 = ::GameplayCustomizeState_obj::gf;
HXLINE( 171)						if ((person1->curCharacter == _hx_char)) {
HXLINE( 172)							person1->setPosition(pos->__get(0),pos->__get(1));
            						}
            					}
HXLINE( 170)					{
HXLINE( 170)						 ::Character person2 = ::GameplayCustomizeState_obj::dad;
HXLINE( 171)						if ((person2->curCharacter == _hx_char)) {
HXLINE( 172)							person2->setPosition(pos->__get(0),pos->__get(1));
            						}
            					}
            				}
            			}
            		}
HXLINE( 174)		{
HXLINE( 174)			int _g = 0;
HXDLIN( 174)			::cpp::VirtualArray _g1 = ::GameplayCustomizeState_obj::Stage->toAdd;
HXDLIN( 174)			while((_g < _g1->get_length())){
HXLINE( 174)				 ::Dynamic i = _g1->__get(_g);
HXDLIN( 174)				_g = (_g + 1);
HXLINE( 176)				this->add(i);
            			}
            		}
HXLINE( 178)		{
HXLINE( 178)			int _g2_current = 0;
HXDLIN( 178)			::Array< ::Dynamic> _g2_array = ::GameplayCustomizeState_obj::Stage->layInFront;
HXDLIN( 178)			while((_g2_current < _g2_array->length)){
HXLINE( 178)				::Array< ::Dynamic> _g3_value = _g2_array->__get(_g2_current).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 178)				_g2_current = (_g2_current + 1);
HXDLIN( 178)				int _g3_key = (_g2_current - 1);
HXDLIN( 178)				int index = _g3_key;
HXDLIN( 178)				::Array< ::Dynamic> array = _g3_value;
HXLINE( 180)				switch((int)(index)){
            					case (int)0: {
HXLINE( 183)						this->add(::GameplayCustomizeState_obj::gf);
HXLINE( 184)						::GameplayCustomizeState_obj::gf->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 185)						{
HXLINE( 185)							int _g = 0;
HXDLIN( 185)							while((_g < array->length)){
HXLINE( 185)								 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 185)								_g = (_g + 1);
HXLINE( 186)								this->add(bg);
            							}
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 188)						this->add(::GameplayCustomizeState_obj::dad);
HXLINE( 189)						{
HXLINE( 189)							int _g = 0;
HXDLIN( 189)							while((_g < array->length)){
HXLINE( 189)								 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 189)								_g = (_g + 1);
HXLINE( 190)								this->add(bg);
            							}
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 192)						this->add(::GameplayCustomizeState_obj::boyfriend);
HXLINE( 193)						{
HXLINE( 193)							int _g = 0;
HXDLIN( 193)							while((_g < array->length)){
HXLINE( 193)								 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 193)								_g = (_g + 1);
HXLINE( 194)								this->add(bg);
            							}
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE( 198)		Float _hx_tmp2 = (::GameplayCustomizeState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN( 198)		this->camPos =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,_hx_tmp2,(::GameplayCustomizeState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(100) )));
HXLINE( 200)		::String _hx_switch_0 = ::GameplayCustomizeState_obj::dad->curCharacter;
            		if (  (_hx_switch_0==HX_("gf",1f,5a,00,00)) ){
HXLINE( 203)			::GameplayCustomizeState_obj::dad->setPosition(::GameplayCustomizeState_obj::gf->x,::GameplayCustomizeState_obj::gf->y);
HXLINE( 204)			::GameplayCustomizeState_obj::gf->set_visible(false);
HXLINE( 202)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_0==HX_("spirit",31,bb,a9,bd)) ){
HXLINE( 206)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 208)				 ::flixel::addons::effects::FlxTrail evilTrail =  ::flixel::addons::effects::FlxTrail_obj::__alloc( HX_CTX ,::GameplayCustomizeState_obj::dad,null(),4,24,((Float)0.3),((Float)0.069));
HXLINE( 209)				this->add(evilTrail);
            			}
HXLINE( 206)			goto _hx_goto_9;
            		}
            		_hx_goto_9:;
HXLINE( 213)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 215)		this->camFollow->setPosition(this->camPos->x,this->camPos->y);
HXLINE( 217)		::String _hx_switch_1 = stageCheck;
            		if (  (_hx_switch_1==HX_("limo",1f,17,b3,47)) ){
HXLINE( 220)			 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN( 220)			_hx_tmp->set_x((::GameplayCustomizeState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(300) )));
HXDLIN( 220)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_1==HX_("mall",d4,3a,56,48)) ){
HXLINE( 222)			 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN( 222)			_hx_tmp->set_y((::GameplayCustomizeState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXDLIN( 222)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_1==HX_("school",74,b8,c8,40)) ||  (_hx_switch_1==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 224)			 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN( 224)			_hx_tmp->set_x((::GameplayCustomizeState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(200) )));
HXLINE( 225)			 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN( 225)			_hx_tmp1->set_y((::GameplayCustomizeState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXLINE( 223)			goto _hx_goto_10;
            		}
            		_hx_goto_10:;
HXLINE( 228)		this->add(this->camFollow);
HXLINE( 230)		::flixel::FlxG_obj::camera->follow(this->camFollow,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),((Float)0.01));
HXLINE( 231)		::flixel::FlxG_obj::camera->set_zoom(::GameplayCustomizeState_obj::Stage->camZoom);
HXLINE( 232)		{
HXLINE( 232)			 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN( 232)			 ::flixel::math::FlxPoint point = this->camFollow->getPosition(null());
HXDLIN( 232)			_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN( 232)			if (point->_weak) {
HXLINE( 232)				point->put();
            			}
            		}
HXLINE( 234)		{
HXLINE( 234)			 ::flixel::math::FlxRect _this1 = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 234)			_this1->x = ( (Float)(0) );
HXDLIN( 234)			_this1->y = ( (Float)(0) );
HXDLIN( 234)			_this1->width = ( (Float)(::flixel::FlxG_obj::width) );
HXDLIN( 234)			_this1->height = ( (Float)(::flixel::FlxG_obj::height) );
            		}
HXLINE( 236)		this->strumLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,::flixel::FlxG_obj::save->data->__Field(HX_("strumline",bd,4d,fe,03),::hx::paccDynamic),null())->makeGraphic(::flixel::FlxG_obj::width,14,null(),null(),null());
HXLINE( 237)		this->strumLine->scrollFactor->set(null(),null());
HXLINE( 238)		this->strumLine->set_alpha(((Float)0.4));
HXLINE( 240)		this->add(this->strumLine);
HXLINE( 242)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE( 243)			this->strumLine->set_y(( (Float)((::flixel::FlxG_obj::height - 165)) ));
            		}
HXLINE( 245)		 ::flixel::FlxSprite _hx_tmp3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 245)		this->laneunderlayOpponent = _hx_tmp3->makeGraphic(490,(::flixel::FlxG_obj::height * 2),null(),null(),null());
HXLINE( 246)		this->laneunderlayOpponent->set_alpha((( (Float)(1) ) - ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("laneTransparency",24,32,52,af),::hx::paccDynamic)) )));
HXLINE( 247)		this->laneunderlayOpponent->set_color(-16777216);
HXLINE( 248)		this->laneunderlayOpponent->scrollFactor->set(null(),null());
HXLINE( 249)		this->laneunderlayOpponent->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 251)		 ::flixel::FlxSprite _hx_tmp4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 251)		this->laneunderlay = _hx_tmp4->makeGraphic(490,(::flixel::FlxG_obj::height * 2),null(),null(),null());
HXLINE( 252)		this->laneunderlay->set_alpha((( (Float)(1) ) - ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("laneTransparency",24,32,52,af),::hx::paccDynamic)) )));
HXLINE( 253)		this->laneunderlay->set_color(-16777216);
HXLINE( 254)		this->laneunderlay->scrollFactor->set(null(),null());
HXLINE( 255)		this->laneunderlay->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 257)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("laneUnderlay",58,04,15,b5),::hx::paccDynamic)) )) {
HXLINE( 259)			if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) ))) {
HXLINE( 261)				this->add(this->laneunderlayOpponent);
            			}
HXLINE( 263)			this->add(this->laneunderlay);
            		}
HXLINE( 266)		this->strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 267)		this->add(this->strumLineNotes);
HXLINE( 269)		this->playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 270)		this->cpuStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 272)		if ((::GameplayCustomizeState_obj::freeplayNoteStyle == HX_("pixel",86,c6,a3,c2))) {
HXLINE( 274)			this->pixelShitPart1 = HX_("weeb/pixelUI/",79,62,e4,09);
HXLINE( 275)			this->pixelShitPart2 = HX_("-pixel",39,03,b3,c0);
HXLINE( 276)			this->pixelShitPart3 = HX_("week6",c2,95,be,c7);
HXLINE( 277)			this->pixelShitPart4 = HX_("week6",c2,95,be,c7);
            		}
HXLINE( 280)		 ::flixel::FlxSprite _hx_tmp5 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 280)		this->sick = _hx_tmp5->loadGraphic(::Paths_obj::loadImage(((this->pixelShitPart1 + HX_("sick",be,8c,53,4c)) + this->pixelShitPart2),this->pixelShitPart3),null(),null(),null(),null(),null());
HXLINE( 281)		 ::flixel::FlxSprite _hx_tmp6 = this->sick;
HXDLIN( 281)		_hx_tmp6->setGraphicSize(::Std_obj::_hx_int((this->sick->get_width() * ((Float)0.7))),null());
HXLINE( 282)		this->sick->scrollFactor->set(null(),null());
HXLINE( 284)		if ((::GameplayCustomizeState_obj::freeplayNoteStyle != HX_("pixel",86,c6,a3,c2))) {
HXLINE( 286)			 ::flixel::FlxSprite _hx_tmp = this->sick;
HXDLIN( 286)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->sick->get_width() * ((Float)0.7))),null());
HXLINE( 287)			this->sick->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 290)			 ::flixel::FlxSprite _hx_tmp = this->sick;
HXDLIN( 290)			Float _hx_tmp1 = this->sick->get_width();
HXDLIN( 290)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp1 * ::CoolUtil_obj::daPixelZoom) * ((Float)0.7))),null());
            		}
HXLINE( 292)		this->sick->updateHitbox();
HXLINE( 293)		this->add(this->sick);
HXLINE( 295)		this->strumLine->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 296)		this->strumLineNotes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 297)		this->sick->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 299)		this->generateStaticArrows(0);
HXLINE( 300)		this->generateStaticArrows(1);
HXLINE( 302)		this->laneunderlay->set_x((Dynamic( this->playerStrums->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->x - ( (Float)(25) )));
HXLINE( 303)		this->laneunderlayOpponent->set_x((Dynamic( this->cpuStrums->members->__get(0)).StaticCast<  ::StaticArrow >()->x - ( (Float)(25) )));
HXLINE( 305)		{
HXLINE( 305)			 ::flixel::FlxSprite _this2 = this->laneunderlay;
HXDLIN( 305)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::Y_dyn();
HXDLIN( 305)			if (::hx::IsNull( axes )) {
HXLINE( 305)				axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 305)			bool _hx_tmp7;
HXDLIN( 305)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 305)					_hx_tmp7 = true;
            				}
            				break;
            				default:{
HXLINE( 305)					_hx_tmp7 = false;
            				}
            			}
HXDLIN( 305)			if (_hx_tmp7) {
HXLINE( 305)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 305)				_this2->set_x(((( (Float)(_hx_tmp) ) - _this2->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 305)			bool _hx_tmp8;
HXDLIN( 305)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 305)					_hx_tmp8 = true;
            				}
            				break;
            				default:{
HXLINE( 305)					_hx_tmp8 = false;
            				}
            			}
HXDLIN( 305)			if (_hx_tmp8) {
HXLINE( 305)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 305)				_this2->set_y(((( (Float)(_hx_tmp) ) - _this2->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 306)		{
HXLINE( 306)			 ::flixel::FlxSprite _this3 = this->laneunderlayOpponent;
HXDLIN( 306)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::Y_dyn();
HXDLIN( 306)			if (::hx::IsNull( axes1 )) {
HXLINE( 306)				axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 306)			bool _hx_tmp9;
HXDLIN( 306)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 306)					_hx_tmp9 = true;
            				}
            				break;
            				default:{
HXLINE( 306)					_hx_tmp9 = false;
            				}
            			}
HXDLIN( 306)			if (_hx_tmp9) {
HXLINE( 306)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 306)				_this3->set_x(((( (Float)(_hx_tmp) ) - _this3->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 306)			bool _hx_tmp10;
HXDLIN( 306)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 306)					_hx_tmp10 = true;
            				}
            				break;
            				default:{
HXLINE( 306)					_hx_tmp10 = false;
            				}
            			}
HXDLIN( 306)			if (_hx_tmp10) {
HXLINE( 306)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 306)				_this3->set_y(((( (Float)(_hx_tmp) ) - _this3->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 308)		this->text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height + 40),0,HX_("Click and drag around gameplay elements to customize their positions. Press R to reset. Q/E to change zoom. C to show combo. Escape to exit.",c0,00,f2,cd),12,null());
HXLINE( 311)		this->text->scrollFactor->set(null(),null());
HXLINE( 312)		this->text->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 314)		 ::flixel::FlxSprite _hx_tmp11 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-30,(::flixel::FlxG_obj::height + 40),null());
HXDLIN( 314)		int _hx_tmp12 = ::Std_obj::_hx_int((this->text->get_width() + 900));
HXDLIN( 314)		this->blackBorder = _hx_tmp11->makeGraphic(_hx_tmp12,::Std_obj::_hx_int((this->text->get_height() + 600)),-16777216,null(),null());
HXLINE( 315)		this->blackBorder->set_alpha(((Float)0.5));
HXLINE( 317)		this->blackBorder->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 318)		this->text->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 320)		this->add(this->blackBorder);
HXLINE( 321)		this->add(this->text);
HXLINE( 323)		::flixel::tweens::FlxTween_obj::tween(this->text, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),(::flixel::FlxG_obj::height - 18))),2, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())));
HXLINE( 324)		::flixel::tweens::FlxTween_obj::tween(this->blackBorder, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),(::flixel::FlxG_obj::height - 18))),2, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())));
HXLINE( 326)		if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHit",bf,5d,c0,31),::hx::paccDynamic)) ))) {
HXLINE( 328)			::flixel::FlxG_obj::save->data->__SetField(HX_("changedHitX",b9,a9,91,56),this->defaultX,::hx::paccDynamic);
HXLINE( 329)			::flixel::FlxG_obj::save->data->__SetField(HX_("changedHitY",ba,a9,91,56),this->defaultY,::hx::paccDynamic);
            		}
HXLINE( 332)		this->sick->set_x(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHitX",b9,a9,91,56),::hx::paccDynamic)) ));
HXLINE( 333)		this->sick->set_y(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHitY",ba,a9,91,56),::hx::paccDynamic)) ));
HXLINE( 335)		::flixel::FlxG_obj::mouse->set_visible(true);
            	}


void GameplayCustomizeState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_269668c8d87413fa_339_update)
HXLINE( 340)		this->super::update(elapsed);
HXLINE( 342)		::GameplayCustomizeState_obj::Stage->update(elapsed);
HXLINE( 344)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 345)			::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
            		}
HXLINE( 347)		if (::hx::IsLess( ::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic),((Float)0.8) )) {
HXLINE( 348)			::flixel::FlxG_obj::save->data->__SetField(HX_("zoom",13,a3,f8,50),((Float)0.8),::hx::paccDynamic);
            		}
HXLINE( 350)		if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic),((Float)1.2) )) {
HXLINE( 351)			::flixel::FlxG_obj::save->data->__SetField(HX_("zoom",13,a3,f8,50),((Float)1.2),::hx::paccDynamic);
            		}
HXLINE( 353)		Float a = ::GameplayCustomizeState_obj::Stage->camZoom;
HXDLIN( 353)		::flixel::FlxG_obj::camera->set_zoom((a + (((Float)0.95) * (::flixel::FlxG_obj::camera->zoom - a))));
HXLINE( 354)		Float a1 = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic)) );
HXDLIN( 354)		this->camHUD->set_zoom((a1 + (((Float)0.95) * (this->camHUD->zoom - a1))));
HXLINE( 356)		bool _hx_tmp;
HXDLIN( 356)		if (::flixel::FlxG_obj::mouse->overlaps(this->sick,null())) {
HXLINE( 356)			 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 356)			if ((_this->current != 1)) {
HXLINE( 356)				_hx_tmp = (_this->current == 2);
            			}
            			else {
HXLINE( 356)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 356)			_hx_tmp = false;
            		}
HXDLIN( 356)		if (_hx_tmp) {
HXLINE( 358)			 ::flixel::FlxSprite _hx_tmp = this->sick;
HXDLIN( 358)			int _hx_tmp1 = ::flixel::FlxG_obj::mouse->x;
HXDLIN( 358)			_hx_tmp->set_x((( (Float)(_hx_tmp1) ) - (this->sick->get_width() + 145)));
HXLINE( 359)			 ::flixel::FlxSprite _hx_tmp2 = this->sick;
HXDLIN( 359)			int _hx_tmp3 = ::flixel::FlxG_obj::mouse->y;
HXDLIN( 359)			_hx_tmp2->set_y((( (Float)(_hx_tmp3) ) - (this->sick->get_height() + 145)));
            		}
HXLINE( 362)		{
HXLINE( 362)			 ::Dynamic filter = null();
HXDLIN( 362)			 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->playerStrums->members,filter);
HXDLIN( 362)			while(i->hasNext()){
HXLINE( 362)				 ::flixel::FlxSprite i1 = i->next().StaticCast<  ::flixel::FlxSprite >();
HXLINE( 363)				i1->set_y(this->strumLine->y);
            			}
            		}
HXLINE( 364)		{
HXLINE( 364)			 ::Dynamic filter1 = null();
HXDLIN( 364)			 ::flixel::group::FlxTypedGroupIterator i1 =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->strumLineNotes->members,filter1);
HXDLIN( 364)			while(i1->hasNext()){
HXLINE( 364)				 ::flixel::FlxSprite i = i1->next().StaticCast<  ::flixel::FlxSprite >();
HXLINE( 365)				i->set_y(this->strumLine->y);
            			}
            		}
HXLINE( 367)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 367)		if (_this->keyManager->checkStatusUnsafe(81,_this->status)) {
HXLINE( 369)			 ::Dynamic _hx_tmp = ::flixel::FlxG_obj::save->data;
HXDLIN( 369)			_hx_tmp->__SetField(HX_("zoom",13,a3,f8,50),(_hx_tmp->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic) + ((Float)0.02)),::hx::paccDynamic);
HXLINE( 370)			this->camHUD->set_zoom(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic)) ));
            		}
HXLINE( 373)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 373)		if (_this1->keyManager->checkStatusUnsafe(69,_this1->status)) {
HXLINE( 375)			 ::Dynamic _hx_tmp = ::flixel::FlxG_obj::save->data;
HXDLIN( 375)			_hx_tmp->__SetField(HX_("zoom",13,a3,f8,50),( ::Dynamic(_hx_tmp->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic)) - ((Float)0.02)),::hx::paccDynamic);
HXLINE( 376)			this->camHUD->set_zoom(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic)) ));
            		}
HXLINE( 379)		bool _hx_tmp1;
HXDLIN( 379)		if (::flixel::FlxG_obj::mouse->overlaps(this->sick,null())) {
HXLINE( 379)			_hx_tmp1 = (::flixel::FlxG_obj::mouse->_leftButton->current == -1);
            		}
            		else {
HXLINE( 379)			_hx_tmp1 = false;
            		}
HXDLIN( 379)		if (_hx_tmp1) {
HXLINE( 381)			::flixel::FlxG_obj::save->data->__SetField(HX_("changedHitX",b9,a9,91,56),this->sick->x,::hx::paccDynamic);
HXLINE( 382)			::flixel::FlxG_obj::save->data->__SetField(HX_("changedHitY",ba,a9,91,56),this->sick->y,::hx::paccDynamic);
HXLINE( 383)			::flixel::FlxG_obj::save->data->__SetField(HX_("changedHit",bf,5d,c0,31),true,::hx::paccDynamic);
            		}
HXLINE( 386)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 386)		if (_this2->keyManager->checkStatusUnsafe(67,_this2->status)) {
HXLINE( 388)			::Array< ::Dynamic> visibleCombos = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 390)			::Array< int > seperatedScore = ::Array_obj< int >::__new(0);
HXLINE( 392)			::Array< ::String > comboSplit = (::flixel::FlxG_obj::random->_hx_int(10,420,null()) + HX_("",00,00,00,00)).split(HX_("",00,00,00,00));
HXLINE( 395)			if ((comboSplit->length == 1)) {
HXLINE( 397)				seperatedScore->push(0);
HXLINE( 398)				seperatedScore->push(0);
            			}
            			else {
HXLINE( 400)				if ((comboSplit->length == 2)) {
HXLINE( 401)					seperatedScore->push(0);
            				}
            			}
HXLINE( 403)			{
HXLINE( 403)				int _g = 0;
HXDLIN( 403)				int _g1 = comboSplit->length;
HXDLIN( 403)				while((_g < _g1)){
HXLINE( 403)					_g = (_g + 1);
HXDLIN( 403)					int i = (_g - 1);
HXLINE( 405)					::String str = comboSplit->__get(i);
HXLINE( 406)					seperatedScore->push(::Std_obj::parseInt(str));
            				}
            			}
HXLINE( 409)			int daLoop = 0;
HXLINE( 410)			{
HXLINE( 410)				int _g2 = 0;
HXDLIN( 410)				while((_g2 < seperatedScore->length)){
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,numScore3,::Array< ::Dynamic>,visibleCombos) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_GC_STACKFRAME(&_hx_pos_269668c8d87413fa_438_update)
HXLINE( 439)						visibleCombos->remove(numScore3);
HXLINE( 440)						numScore3->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,numScore3,::Array< ::Dynamic>,visibleCombos) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_GC_STACKFRAME(&_hx_pos_269668c8d87413fa_444_update)
HXLINE( 444)						if (!(visibleCombos->contains(numScore3))) {
HXLINE( 446)							tween->cancel();
HXLINE( 447)							numScore3->destroy();
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 410)					int i = seperatedScore->__get(_g2);
HXDLIN( 410)					_g2 = (_g2 + 1);
HXLINE( 412)					 ::flixel::FlxSprite numScore =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 412)					::String numScore1 = (this->pixelShitPart1 + HX_("num",46,de,53,00));
HXDLIN( 412)					::String numScore2 = (numScore1 + ::Std_obj::_hx_int(( (Float)(i) )));
HXDLIN( 412)					 ::flixel::FlxSprite numScore3 = numScore->loadGraphic(::Paths_obj::loadImage((numScore2 + this->pixelShitPart2),this->pixelShitPart4),null(),null(),null(),null(),null());
HXLINE( 413)					{
HXLINE( 413)						 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 413)						bool _hx_tmp;
HXDLIN( 413)						switch((int)(axes->_hx_getIndex())){
            							case (int)0: case (int)2: {
HXLINE( 413)								_hx_tmp = true;
            							}
            							break;
            							default:{
HXLINE( 413)								_hx_tmp = false;
            							}
            						}
HXDLIN( 413)						if (_hx_tmp) {
HXLINE( 413)							 ::flixel::FlxSprite numScore = numScore3;
HXDLIN( 413)							int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 413)							numScore->set_x(((( (Float)(_hx_tmp) ) - numScore3->get_width()) / ( (Float)(2) )));
            						}
HXDLIN( 413)						bool _hx_tmp1;
HXDLIN( 413)						switch((int)(axes->_hx_getIndex())){
            							case (int)1: case (int)2: {
HXLINE( 413)								_hx_tmp1 = true;
            							}
            							break;
            							default:{
HXLINE( 413)								_hx_tmp1 = false;
            							}
            						}
HXDLIN( 413)						if (_hx_tmp1) {
HXLINE( 413)							 ::flixel::FlxSprite numScore = numScore3;
HXDLIN( 413)							int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 413)							numScore->set_y(((( (Float)(_hx_tmp) ) - numScore3->get_height()) / ( (Float)(2) )));
            						}
            					}
HXLINE( 414)					numScore3->set_x(((this->sick->x + (43 * daLoop)) - ( (Float)(50) )));
HXLINE( 415)					numScore3->set_y((this->sick->y + 100));
HXLINE( 416)					numScore3->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 418)					if ((::GameplayCustomizeState_obj::freeplayNoteStyle != HX_("pixel",86,c6,a3,c2))) {
HXLINE( 420)						numScore3->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 421)						 ::flixel::FlxSprite numScore = numScore3;
HXDLIN( 421)						numScore->setGraphicSize(::Std_obj::_hx_int((numScore3->get_width() * ((Float)0.5))),null());
            					}
            					else {
HXLINE( 424)						 ::flixel::FlxSprite numScore = numScore3;
HXDLIN( 424)						Float _hx_tmp = numScore3->get_width();
HXDLIN( 424)						numScore->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::CoolUtil_obj::daPixelZoom)),null());
            					}
HXLINE( 426)					numScore3->updateHitbox();
HXLINE( 428)					 ::flixel::math::FlxPoint numScore4 = numScore3->acceleration;
HXDLIN( 428)					numScore4->set_y(( (Float)(::flixel::FlxG_obj::random->_hx_int(200,300,null())) ));
HXLINE( 429)					{
HXLINE( 429)						 ::flixel::math::FlxPoint _g = numScore3->velocity;
HXDLIN( 429)						Float _g1 = _g->y;
HXDLIN( 429)						_g->set_y((_g1 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,160,null())) )));
            					}
HXLINE( 430)					 ::flixel::math::FlxPoint numScore5 = numScore3->velocity;
HXDLIN( 430)					numScore5->set_x(::flixel::FlxG_obj::random->_hx_float(-5,5,null()));
HXLINE( 432)					this->add(numScore3);
HXLINE( 434)					visibleCombos->push(numScore3);
HXLINE( 436)					::flixel::tweens::FlxTween_obj::tween(numScore3, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.002)))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(numScore3,visibleCombos)))
            						->setFixed(2,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_1(numScore3,visibleCombos)))));
HXLINE( 453)					if ((visibleCombos->length > (seperatedScore->length + 20))) {
HXLINE( 455)						int _g = 0;
HXDLIN( 455)						int _g1 = (seperatedScore->length - 1);
HXDLIN( 455)						while((_g < _g1)){
HXLINE( 455)							_g = (_g + 1);
HXDLIN( 455)							int i = (_g - 1);
HXLINE( 457)							visibleCombos->remove(visibleCombos->__get((visibleCombos->length - 1)).StaticCast<  ::flixel::FlxSprite >());
            						}
            					}
HXLINE( 461)					daLoop = (daLoop + 1);
            				}
            			}
            		}
HXLINE( 465)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 465)		if (_this3->keyManager->checkStatusUnsafe(82,_this3->status)) {
HXLINE( 467)			this->sick->set_x(this->defaultX);
HXLINE( 468)			this->sick->set_y(this->defaultY);
HXLINE( 469)			::flixel::FlxG_obj::save->data->__SetField(HX_("zoom",13,a3,f8,50),1,::hx::paccDynamic);
HXLINE( 470)			this->camHUD->set_zoom(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic)) ));
HXLINE( 471)			::flixel::FlxG_obj::save->data->__SetField(HX_("changedHitX",b9,a9,91,56),this->sick->x,::hx::paccDynamic);
HXLINE( 472)			::flixel::FlxG_obj::save->data->__SetField(HX_("changedHitY",ba,a9,91,56),this->sick->y,::hx::paccDynamic);
HXLINE( 473)			::flixel::FlxG_obj::save->data->__SetField(HX_("changedHit",bf,5d,c0,31),false,::hx::paccDynamic);
            		}
HXLINE( 476)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 478)			::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 479)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 479)			_hx_tmp->play(::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE( 480)			{
HXLINE( 480)				 ::flixel::FlxState nextState =  ::OptionsDirect_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 480)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 480)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            	}


void GameplayCustomizeState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_269668c8d87413fa_485_beatHit)
HXLINE( 486)		this->super::beatHit();
HXLINE( 488)		if ((::hx::Mod(this->curBeat,2) == 0)) {
HXLINE( 490)			::GameplayCustomizeState_obj::boyfriend->dance(null(),null());
HXLINE( 491)			::GameplayCustomizeState_obj::dad->dance(null(),null());
            		}
            		else {
HXLINE( 493)			bool _hx_tmp;
HXDLIN( 493)			if ((::GameplayCustomizeState_obj::dad->curCharacter != HX_("spooky",eb,bd,9e,c1))) {
HXLINE( 493)				_hx_tmp = (::GameplayCustomizeState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            			}
            			else {
HXLINE( 493)				_hx_tmp = true;
            			}
HXDLIN( 493)			if (_hx_tmp) {
HXLINE( 494)				::GameplayCustomizeState_obj::dad->dance(null(),null());
            			}
            		}
HXLINE( 496)		::GameplayCustomizeState_obj::gf->dance(null(),null());
HXLINE( 498)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 498)		if (!(_this->keyManager->checkStatusUnsafe(32,_this->status))) {
HXLINE( 500)			{
HXLINE( 500)				 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 500)				_g->set_zoom((_g->zoom + ((Float)0.015)));
            			}
HXLINE( 501)			{
HXLINE( 501)				 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN( 501)				_g1->set_zoom((_g1->zoom + ((Float)0.010)));
            			}
            		}
            	}


void GameplayCustomizeState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_269668c8d87413fa_510_generateStaticArrows)
HXDLIN( 510)		int _g = 0;
HXDLIN( 510)		while((_g < 4)){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite spr){
            				HX_GC_STACKFRAME(&_hx_pos_269668c8d87413fa_595_generateStaticArrows)
HXLINE( 595)				spr->centerOffsets(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXDLIN( 510)			_g = (_g + 1);
HXDLIN( 510)			int i = (_g - 1);
HXLINE( 512)			 ::StaticArrow babyArrow =  ::StaticArrow_obj::__alloc( HX_CTX ,( (Float)(-10) ),this->strumLine->y);
HXLINE( 515)			::String noteTypeCheck = HX_("normal",27,72,69,30);
HXLINE( 517)			bool _hx_tmp;
HXDLIN( 517)			if (::hx::IsNull( ::GameplayCustomizeState_obj::freeplayNoteStyle )) {
HXLINE( 517)				_hx_tmp = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("overrideNoteskins",38,86,30,16),::hx::paccDynamic)) );
            			}
            			else {
HXLINE( 517)				_hx_tmp = false;
            			}
HXDLIN( 517)			if (_hx_tmp) {
HXLINE( 519)				if ((::GameplayCustomizeState_obj::freeplayWeek == 6)) {
HXLINE( 522)					noteTypeCheck = HX_("pixel",86,c6,a3,c2);
            				}
            			}
            			else {
HXLINE( 526)				noteTypeCheck = ::GameplayCustomizeState_obj::freeplayNoteStyle;
            			}
HXLINE( 528)			if ((noteTypeCheck == HX_("pixel",86,c6,a3,c2))) {
HXLINE( 531)				babyArrow->loadGraphic(::Paths_obj::loadImage(HX_("weeb/pixelUI/arrows-pixels",b7,c3,c7,09),HX_("week6",c2,95,be,c7)),true,17,17,null(),null());
HXLINE( 532)				babyArrow->animation->add(HX_("green",c3,0e,ed,99),::Array_obj< int >::fromData( _hx_array_data_3ccf3074_24,1),null(),null(),null(),null());
HXLINE( 533)				babyArrow->animation->add(HX_("red",51,d9,56,00),::Array_obj< int >::fromData( _hx_array_data_3ccf3074_25,1),null(),null(),null(),null());
HXLINE( 534)				babyArrow->animation->add(HX_("blue",9a,42,19,41),::Array_obj< int >::fromData( _hx_array_data_3ccf3074_26,1),null(),null(),null(),null());
HXLINE( 535)				babyArrow->animation->add(HX_("purplel",b0,7e,2d,e7),::Array_obj< int >::fromData( _hx_array_data_3ccf3074_27,1),null(),null(),null(),null());
HXLINE( 537)				Float _hx_tmp = babyArrow->get_width();
HXDLIN( 537)				babyArrow->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::CoolUtil_obj::daPixelZoom)),null());
HXLINE( 538)				babyArrow->updateHitbox();
HXLINE( 539)				babyArrow->set_antialiasing(false);
HXLINE( 541)				{
HXLINE( 541)					 ::StaticArrow _g = babyArrow;
HXDLIN( 541)					_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(i) ))));
            				}
HXLINE( 542)				babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::__new(1)->init(0,i),null(),null(),null(),null());
HXLINE( 543)				babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::__new(2)->init(0,(4 + i))->init(1,(8 + i)),12,false,null(),null());
HXLINE( 544)				babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::__new(2)->init(0,(12 + i))->init(1,(16 + i)),24,false,null(),null());
HXLINE( 546)				{
HXLINE( 548)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 0),::Array_obj< int >::fromData( _hx_array_data_3ccf3074_28,2),24,false,null(),null());
HXDLIN( 548)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 1),::Array_obj< int >::fromData( _hx_array_data_3ccf3074_29,2),24,false,null(),null());
HXDLIN( 548)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 2),::Array_obj< int >::fromData( _hx_array_data_3ccf3074_30,2),24,false,null(),null());
HXDLIN( 548)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 3),::Array_obj< int >::fromData( _hx_array_data_3ccf3074_31,2),24,false,null(),null());
            				}
            			}
            			else {
HXLINE( 552)				babyArrow->set_frames(::NoteskinHelpers_obj::generateNoteskinSprite(( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("noteskin",6f,0f,af,70),::hx::paccDynamic)) )));
HXLINE( 553)				{
HXLINE( 554)					{
HXLINE( 555)						babyArrow->animation->addByPrefix(this->dataColor->__get(0),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(0)),null(),null(),null(),null());
HXLINE( 556)						 ::flixel::animation::FlxAnimationController babyArrow1 = babyArrow->animation;
HXDLIN( 556)						babyArrow1->addByPrefix((HX_("dirCon",f5,88,50,bc) + 0),(this->dataSuffix->__get(0).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
HXLINE( 554)					{
HXLINE( 555)						babyArrow->animation->addByPrefix(this->dataColor->__get(1),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(1)),null(),null(),null(),null());
HXLINE( 556)						 ::flixel::animation::FlxAnimationController babyArrow2 = babyArrow->animation;
HXDLIN( 556)						babyArrow2->addByPrefix((HX_("dirCon",f5,88,50,bc) + 1),(this->dataSuffix->__get(1).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
HXLINE( 554)					{
HXLINE( 555)						babyArrow->animation->addByPrefix(this->dataColor->__get(2),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(2)),null(),null(),null(),null());
HXLINE( 556)						 ::flixel::animation::FlxAnimationController babyArrow3 = babyArrow->animation;
HXDLIN( 556)						babyArrow3->addByPrefix((HX_("dirCon",f5,88,50,bc) + 2),(this->dataSuffix->__get(2).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
HXLINE( 554)					{
HXLINE( 555)						babyArrow->animation->addByPrefix(this->dataColor->__get(3),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(3)),null(),null(),null(),null());
HXLINE( 556)						 ::flixel::animation::FlxAnimationController babyArrow4 = babyArrow->animation;
HXDLIN( 556)						babyArrow4->addByPrefix((HX_("dirCon",f5,88,50,bc) + 3),(this->dataSuffix->__get(3).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
            				}
HXLINE( 559)				::String lowerDir = this->dataSuffix->__get(i).toLowerCase();
HXLINE( 561)				babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(i)),null(),null(),null(),null());
HXLINE( 562)				babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),(lowerDir + HX_(" press",63,df,f3,93)),24,false,null(),null());
HXLINE( 563)				babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),(lowerDir + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
HXLINE( 565)				{
HXLINE( 565)					 ::StaticArrow _g = babyArrow;
HXDLIN( 565)					_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(i) ))));
            				}
HXLINE( 567)				babyArrow->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 568)				babyArrow->setGraphicSize(::Std_obj::_hx_int((babyArrow->get_width() * ((Float)0.7))),null());
            			}
HXLINE( 571)			babyArrow->updateHitbox();
HXLINE( 572)			babyArrow->scrollFactor->set(null(),null());
HXLINE( 574)			babyArrow->ID = i;
HXLINE( 576)			switch((int)(player)){
            				case (int)0: {
HXLINE( 579)					babyArrow->set_visible(!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) )));
HXLINE( 580)					{
HXLINE( 580)						 ::StaticArrow _g = babyArrow;
HXDLIN( 580)						_g->set_x((_g->x + 20));
            					}
HXLINE( 581)					this->cpuStrums->add(babyArrow).StaticCast<  ::StaticArrow >();
            				}
            				break;
            				case (int)1: {
HXLINE( 583)					this->playerStrums->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            				}
            				break;
            			}
HXLINE( 586)			babyArrow->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE( 587)			{
HXLINE( 587)				 ::StaticArrow _g1 = babyArrow;
HXDLIN( 587)				_g1->set_x((_g1->x + 110));
            			}
HXLINE( 588)			{
HXLINE( 588)				 ::StaticArrow _g2 = babyArrow;
HXDLIN( 588)				_g2->set_x((_g2->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) * ( (Float)(player) ))));
            			}
HXLINE( 590)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) )) {
HXLINE( 591)				 ::StaticArrow _g = babyArrow;
HXDLIN( 591)				_g->set_x((_g->x - ( (Float)(320) )));
            			}
HXLINE( 593)			this->cpuStrums->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE( 598)			this->strumLineNotes->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(GameplayCustomizeState_obj,generateStaticArrows,(void))

 ::Character GameplayCustomizeState_obj::dad;

 ::Character GameplayCustomizeState_obj::gf;

 ::Boyfriend GameplayCustomizeState_obj::boyfriend;

 ::Stage GameplayCustomizeState_obj::Stage;

::String GameplayCustomizeState_obj::freeplayBf;

::String GameplayCustomizeState_obj::freeplayDad;

::String GameplayCustomizeState_obj::freeplayGf;

::String GameplayCustomizeState_obj::freeplayNoteStyle;

::String GameplayCustomizeState_obj::freeplayStage;

::String GameplayCustomizeState_obj::freeplaySong;

int GameplayCustomizeState_obj::freeplayWeek;


::hx::ObjectPtr< GameplayCustomizeState_obj > GameplayCustomizeState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< GameplayCustomizeState_obj > __this = new GameplayCustomizeState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< GameplayCustomizeState_obj > GameplayCustomizeState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	GameplayCustomizeState_obj *__this = (GameplayCustomizeState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GameplayCustomizeState_obj), true, "GameplayCustomizeState"));
	*(void **)__this = GameplayCustomizeState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

GameplayCustomizeState_obj::GameplayCustomizeState_obj()
{
}

void GameplayCustomizeState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GameplayCustomizeState);
	HX_MARK_MEMBER_NAME(defaultX,"defaultX");
	HX_MARK_MEMBER_NAME(defaultY,"defaultY");
	HX_MARK_MEMBER_NAME(sick,"sick");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(blackBorder,"blackBorder");
	HX_MARK_MEMBER_NAME(laneunderlay,"laneunderlay");
	HX_MARK_MEMBER_NAME(laneunderlayOpponent,"laneunderlayOpponent");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(playerStrums,"playerStrums");
	HX_MARK_MEMBER_NAME(cpuStrums,"cpuStrums");
	HX_MARK_MEMBER_NAME(camPos,"camPos");
	HX_MARK_MEMBER_NAME(pixelShitPart1,"pixelShitPart1");
	HX_MARK_MEMBER_NAME(pixelShitPart2,"pixelShitPart2");
	HX_MARK_MEMBER_NAME(pixelShitPart3,"pixelShitPart3");
	HX_MARK_MEMBER_NAME(pixelShitPart4,"pixelShitPart4");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(dataSuffix,"dataSuffix");
	HX_MARK_MEMBER_NAME(dataColor,"dataColor");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GameplayCustomizeState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(defaultX,"defaultX");
	HX_VISIT_MEMBER_NAME(defaultY,"defaultY");
	HX_VISIT_MEMBER_NAME(sick,"sick");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(blackBorder,"blackBorder");
	HX_VISIT_MEMBER_NAME(laneunderlay,"laneunderlay");
	HX_VISIT_MEMBER_NAME(laneunderlayOpponent,"laneunderlayOpponent");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(playerStrums,"playerStrums");
	HX_VISIT_MEMBER_NAME(cpuStrums,"cpuStrums");
	HX_VISIT_MEMBER_NAME(camPos,"camPos");
	HX_VISIT_MEMBER_NAME(pixelShitPart1,"pixelShitPart1");
	HX_VISIT_MEMBER_NAME(pixelShitPart2,"pixelShitPart2");
	HX_VISIT_MEMBER_NAME(pixelShitPart3,"pixelShitPart3");
	HX_VISIT_MEMBER_NAME(pixelShitPart4,"pixelShitPart4");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(dataSuffix,"dataSuffix");
	HX_VISIT_MEMBER_NAME(dataColor,"dataColor");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val GameplayCustomizeState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sick") ) { return ::hx::Val( sick ); }
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camPos") ) { return ::hx::Val( camPos ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"defaultX") ) { return ::hx::Val( defaultX ); }
		if (HX_FIELD_EQ(inName,"defaultY") ) { return ::hx::Val( defaultY ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"cpuStrums") ) { return ::hx::Val( cpuStrums ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"dataColor") ) { return ::hx::Val( dataColor ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dataSuffix") ) { return ::hx::Val( dataSuffix ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blackBorder") ) { return ::hx::Val( blackBorder ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"laneunderlay") ) { return ::hx::Val( laneunderlay ); }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { return ::hx::Val( playerStrums ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { return ::hx::Val( strumLineNotes ); }
		if (HX_FIELD_EQ(inName,"pixelShitPart1") ) { return ::hx::Val( pixelShitPart1 ); }
		if (HX_FIELD_EQ(inName,"pixelShitPart2") ) { return ::hx::Val( pixelShitPart2 ); }
		if (HX_FIELD_EQ(inName,"pixelShitPart3") ) { return ::hx::Val( pixelShitPart3 ); }
		if (HX_FIELD_EQ(inName,"pixelShitPart4") ) { return ::hx::Val( pixelShitPart4 ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"laneunderlayOpponent") ) { return ::hx::Val( laneunderlayOpponent ); }
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool GameplayCustomizeState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { outValue = ( gf ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { outValue = ( dad ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"Stage") ) { outValue = ( Stage ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"boyfriend") ) { outValue = ( boyfriend ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"freeplayBf") ) { outValue = ( freeplayBf ); return true; }
		if (HX_FIELD_EQ(inName,"freeplayGf") ) { outValue = ( freeplayGf ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"freeplayDad") ) { outValue = ( freeplayDad ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"freeplaySong") ) { outValue = ( freeplaySong ); return true; }
		if (HX_FIELD_EQ(inName,"freeplayWeek") ) { outValue = ( freeplayWeek ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"freeplayStage") ) { outValue = ( freeplayStage ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"freeplayNoteStyle") ) { outValue = ( freeplayNoteStyle ); return true; }
	}
	return false;
}

::hx::Val GameplayCustomizeState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sick") ) { sick=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camPos") ) { camPos=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"defaultX") ) { defaultX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultY") ) { defaultY=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cpuStrums") ) { cpuStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dataColor") ) { dataColor=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dataSuffix") ) { dataSuffix=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blackBorder") ) { blackBorder=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"laneunderlay") ) { laneunderlay=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pixelShitPart1") ) { pixelShitPart1=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pixelShitPart2") ) { pixelShitPart2=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pixelShitPart3") ) { pixelShitPart3=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pixelShitPart4") ) { pixelShitPart4=inValue.Cast< ::String >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"laneunderlayOpponent") ) { laneunderlayOpponent=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool GameplayCustomizeState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { gf=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { dad=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"Stage") ) { Stage=ioValue.Cast<  ::Stage >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=ioValue.Cast<  ::Boyfriend >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"freeplayBf") ) { freeplayBf=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"freeplayGf") ) { freeplayGf=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"freeplayDad") ) { freeplayDad=ioValue.Cast< ::String >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"freeplaySong") ) { freeplaySong=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"freeplayWeek") ) { freeplayWeek=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"freeplayStage") ) { freeplayStage=ioValue.Cast< ::String >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"freeplayNoteStyle") ) { freeplayNoteStyle=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void GameplayCustomizeState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("defaultX",77,d0,99,af));
	outFields->push(HX_("defaultY",78,d0,99,af));
	outFields->push(HX_("sick",be,8c,53,4c));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("blackBorder",0b,f0,b1,7a));
	outFields->push(HX_("laneunderlay",38,48,63,db));
	outFields->push(HX_("laneunderlayOpponent",f5,b5,24,53));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("strumLineNotes",24,f1,48,a4));
	outFields->push(HX_("playerStrums",4b,e1,2a,0d));
	outFields->push(HX_("cpuStrums",52,86,8a,e0));
	outFields->push(HX_("camPos",c5,54,7c,b7));
	outFields->push(HX_("pixelShitPart1",98,31,a8,f1));
	outFields->push(HX_("pixelShitPart2",99,31,a8,f1));
	outFields->push(HX_("pixelShitPart3",9a,31,a8,f1));
	outFields->push(HX_("pixelShitPart4",9b,31,a8,f1));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("dataSuffix",9b,a8,47,88));
	outFields->push(HX_("dataColor",d9,f2,4b,90));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GameplayCustomizeState_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(GameplayCustomizeState_obj,defaultX),HX_("defaultX",77,d0,99,af)},
	{::hx::fsFloat,(int)offsetof(GameplayCustomizeState_obj,defaultY),HX_("defaultY",78,d0,99,af)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(GameplayCustomizeState_obj,sick),HX_("sick",be,8c,53,4c)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(GameplayCustomizeState_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(GameplayCustomizeState_obj,blackBorder),HX_("blackBorder",0b,f0,b1,7a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(GameplayCustomizeState_obj,laneunderlay),HX_("laneunderlay",38,48,63,db)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(GameplayCustomizeState_obj,laneunderlayOpponent),HX_("laneunderlayOpponent",f5,b5,24,53)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(GameplayCustomizeState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(GameplayCustomizeState_obj,strumLineNotes),HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(GameplayCustomizeState_obj,playerStrums),HX_("playerStrums",4b,e1,2a,0d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(GameplayCustomizeState_obj,cpuStrums),HX_("cpuStrums",52,86,8a,e0)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(GameplayCustomizeState_obj,camPos),HX_("camPos",c5,54,7c,b7)},
	{::hx::fsString,(int)offsetof(GameplayCustomizeState_obj,pixelShitPart1),HX_("pixelShitPart1",98,31,a8,f1)},
	{::hx::fsString,(int)offsetof(GameplayCustomizeState_obj,pixelShitPart2),HX_("pixelShitPart2",99,31,a8,f1)},
	{::hx::fsString,(int)offsetof(GameplayCustomizeState_obj,pixelShitPart3),HX_("pixelShitPart3",9a,31,a8,f1)},
	{::hx::fsString,(int)offsetof(GameplayCustomizeState_obj,pixelShitPart4),HX_("pixelShitPart4",9b,31,a8,f1)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(GameplayCustomizeState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(GameplayCustomizeState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(GameplayCustomizeState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(GameplayCustomizeState_obj,dataSuffix),HX_("dataSuffix",9b,a8,47,88)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(GameplayCustomizeState_obj,dataColor),HX_("dataColor",d9,f2,4b,90)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo GameplayCustomizeState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Character */ ,(void *) &GameplayCustomizeState_obj::dad,HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::Character */ ,(void *) &GameplayCustomizeState_obj::gf,HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::Boyfriend */ ,(void *) &GameplayCustomizeState_obj::boyfriend,HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsObject /*  ::Stage */ ,(void *) &GameplayCustomizeState_obj::Stage,HX_("Stage",9e,da,38,17)},
	{::hx::fsString,(void *) &GameplayCustomizeState_obj::freeplayBf,HX_("freeplayBf",84,32,c4,bd)},
	{::hx::fsString,(void *) &GameplayCustomizeState_obj::freeplayDad,HX_("freeplayDad",87,81,e9,4d)},
	{::hx::fsString,(void *) &GameplayCustomizeState_obj::freeplayGf,HX_("freeplayGf",df,36,c4,bd)},
	{::hx::fsString,(void *) &GameplayCustomizeState_obj::freeplayNoteStyle,HX_("freeplayNoteStyle",1f,2b,30,d2)},
	{::hx::fsString,(void *) &GameplayCustomizeState_obj::freeplayStage,HX_("freeplayStage",fe,05,02,6c)},
	{::hx::fsString,(void *) &GameplayCustomizeState_obj::freeplaySong,HX_("freeplaySong",95,b0,5c,e8)},
	{::hx::fsInt,(void *) &GameplayCustomizeState_obj::freeplayWeek,HX_("freeplayWeek",b4,ec,f9,ea)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String GameplayCustomizeState_obj_sMemberFields[] = {
	HX_("defaultX",77,d0,99,af),
	HX_("defaultY",78,d0,99,af),
	HX_("sick",be,8c,53,4c),
	HX_("text",ad,cc,f9,4c),
	HX_("blackBorder",0b,f0,b1,7a),
	HX_("laneunderlay",38,48,63,db),
	HX_("laneunderlayOpponent",f5,b5,24,53),
	HX_("strumLine",dd,79,d7,ee),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("playerStrums",4b,e1,2a,0d),
	HX_("cpuStrums",52,86,8a,e0),
	HX_("camPos",c5,54,7c,b7),
	HX_("pixelShitPart1",98,31,a8,f1),
	HX_("pixelShitPart2",99,31,a8,f1),
	HX_("pixelShitPart3",9a,31,a8,f1),
	HX_("pixelShitPart4",9b,31,a8,f1),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camGame",a1,47,50,cf),
	HX_("camFollow",e0,6e,47,22),
	HX_("dataSuffix",9b,a8,47,88),
	HX_("dataColor",d9,f2,4b,90),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("beatHit",7d,ea,04,74),
	HX_("generateStaticArrows",ad,44,90,42),
	::String(null()) };

static void GameplayCustomizeState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GameplayCustomizeState_obj::dad,"dad");
	HX_MARK_MEMBER_NAME(GameplayCustomizeState_obj::gf,"gf");
	HX_MARK_MEMBER_NAME(GameplayCustomizeState_obj::boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(GameplayCustomizeState_obj::Stage,"Stage");
	HX_MARK_MEMBER_NAME(GameplayCustomizeState_obj::freeplayBf,"freeplayBf");
	HX_MARK_MEMBER_NAME(GameplayCustomizeState_obj::freeplayDad,"freeplayDad");
	HX_MARK_MEMBER_NAME(GameplayCustomizeState_obj::freeplayGf,"freeplayGf");
	HX_MARK_MEMBER_NAME(GameplayCustomizeState_obj::freeplayNoteStyle,"freeplayNoteStyle");
	HX_MARK_MEMBER_NAME(GameplayCustomizeState_obj::freeplayStage,"freeplayStage");
	HX_MARK_MEMBER_NAME(GameplayCustomizeState_obj::freeplaySong,"freeplaySong");
	HX_MARK_MEMBER_NAME(GameplayCustomizeState_obj::freeplayWeek,"freeplayWeek");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GameplayCustomizeState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GameplayCustomizeState_obj::dad,"dad");
	HX_VISIT_MEMBER_NAME(GameplayCustomizeState_obj::gf,"gf");
	HX_VISIT_MEMBER_NAME(GameplayCustomizeState_obj::boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(GameplayCustomizeState_obj::Stage,"Stage");
	HX_VISIT_MEMBER_NAME(GameplayCustomizeState_obj::freeplayBf,"freeplayBf");
	HX_VISIT_MEMBER_NAME(GameplayCustomizeState_obj::freeplayDad,"freeplayDad");
	HX_VISIT_MEMBER_NAME(GameplayCustomizeState_obj::freeplayGf,"freeplayGf");
	HX_VISIT_MEMBER_NAME(GameplayCustomizeState_obj::freeplayNoteStyle,"freeplayNoteStyle");
	HX_VISIT_MEMBER_NAME(GameplayCustomizeState_obj::freeplayStage,"freeplayStage");
	HX_VISIT_MEMBER_NAME(GameplayCustomizeState_obj::freeplaySong,"freeplaySong");
	HX_VISIT_MEMBER_NAME(GameplayCustomizeState_obj::freeplayWeek,"freeplayWeek");
};

#endif

::hx::Class GameplayCustomizeState_obj::__mClass;

static ::String GameplayCustomizeState_obj_sStaticFields[] = {
	HX_("dad",47,36,4c,00),
	HX_("gf",1f,5a,00,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("Stage",9e,da,38,17),
	HX_("freeplayBf",84,32,c4,bd),
	HX_("freeplayDad",87,81,e9,4d),
	HX_("freeplayGf",df,36,c4,bd),
	HX_("freeplayNoteStyle",1f,2b,30,d2),
	HX_("freeplayStage",fe,05,02,6c),
	HX_("freeplaySong",95,b0,5c,e8),
	HX_("freeplayWeek",b4,ec,f9,ea),
	::String(null())
};

void GameplayCustomizeState_obj::__register()
{
	GameplayCustomizeState_obj _hx_dummy;
	GameplayCustomizeState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("GameplayCustomizeState",74,30,cf,3c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GameplayCustomizeState_obj::__GetStatic;
	__mClass->mSetStaticField = &GameplayCustomizeState_obj::__SetStatic;
	__mClass->mMarkFunc = GameplayCustomizeState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GameplayCustomizeState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GameplayCustomizeState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GameplayCustomizeState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GameplayCustomizeState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameplayCustomizeState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameplayCustomizeState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GameplayCustomizeState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_269668c8d87413fa_55_boot)
HXDLIN(  55)		freeplayBf = HX_("bf",c4,55,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_269668c8d87413fa_56_boot)
HXDLIN(  56)		freeplayDad = HX_("dad",47,36,4c,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_269668c8d87413fa_57_boot)
HXDLIN(  57)		freeplayGf = HX_("gf",1f,5a,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_269668c8d87413fa_58_boot)
HXDLIN(  58)		freeplayNoteStyle = HX_("normal",27,72,69,30);
            	}
{
            	HX_STACKFRAME(&_hx_pos_269668c8d87413fa_59_boot)
HXDLIN(  59)		freeplayStage = HX_("stage",be,6a,0b,84);
            	}
{
            	HX_STACKFRAME(&_hx_pos_269668c8d87413fa_60_boot)
HXDLIN(  60)		freeplaySong = HX_("bopeebo",b0,01,c5,0c);
            	}
{
            	HX_STACKFRAME(&_hx_pos_269668c8d87413fa_61_boot)
HXDLIN(  61)		freeplayWeek = 1;
            	}
}

