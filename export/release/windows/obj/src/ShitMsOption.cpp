// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Option
#include <Option.h>
#endif
#ifndef INCLUDED_ShitMsOption
#include <ShitMsOption.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c1d03e934c19d28c_527_new,"ShitMsOption","new",0xa9d349ed,"ShitMsOption.new","Options.hx",527,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_c1d03e934c19d28c_534_left,"ShitMsOption","left",0xedbae9da,"ShitMsOption.left","Options.hx",534,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_c1d03e934c19d28c_544_onType,"ShitMsOption","onType",0x5778380c,"ShitMsOption.onType","Options.hx",544,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_c1d03e934c19d28c_549_right,"ShitMsOption","right",0x8cdec2a9,"ShitMsOption.right","Options.hx",549,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_c1d03e934c19d28c_557_updateDisplay,"ShitMsOption","updateDisplay",0xc02a5b06,"ShitMsOption.updateDisplay","Options.hx",557,0x9d9a0240)

void ShitMsOption_obj::__construct(::String desc){
            	HX_STACKFRAME(&_hx_pos_c1d03e934c19d28c_527_new)
HXLINE( 528)		super::__construct();
HXLINE( 529)		this->description = (desc + HX_(" (Press R to reset)",ec,e4,63,d7));
HXLINE( 530)		this->acceptType = true;
            	}

Dynamic ShitMsOption_obj::__CreateEmpty() { return new ShitMsOption_obj; }

void *ShitMsOption_obj::_hx_vtable = 0;

Dynamic ShitMsOption_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ShitMsOption_obj > _hx_result = new ShitMsOption_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ShitMsOption_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x27a70eb9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x27a70eb9;
	} else {
		return inClassId==(int)0x4a9c223b;
	}
}

bool ShitMsOption_obj::left(){
            	HX_STACKFRAME(&_hx_pos_c1d03e934c19d28c_534_left)
HXLINE( 535)		::hx::FieldRef((::flixel::FlxG_obj::save->data).mPtr,HX_("shitMs",46,83,76,22))--;
HXLINE( 536)		if (::hx::IsLess( ::flixel::FlxG_obj::save->data->__Field(HX_("shitMs",46,83,76,22),::hx::paccDynamic),0 )) {
HXLINE( 537)			::flixel::FlxG_obj::save->data->__SetField(HX_("shitMs",46,83,76,22),0,::hx::paccDynamic);
            		}
HXLINE( 538)		this->display = this->updateDisplay();
HXLINE( 539)		return true;
            	}


void ShitMsOption_obj::onType(::String _hx_char){
            	HX_STACKFRAME(&_hx_pos_c1d03e934c19d28c_544_onType)
HXDLIN( 544)		if ((_hx_char.toLowerCase() == HX_("r",72,00,00,00))) {
HXLINE( 545)			::flixel::FlxG_obj::save->data->__SetField(HX_("shitMs",46,83,76,22),160,::hx::paccDynamic);
            		}
            	}


bool ShitMsOption_obj::right(){
            	HX_STACKFRAME(&_hx_pos_c1d03e934c19d28c_549_right)
HXLINE( 550)		::hx::FieldRef((::flixel::FlxG_obj::save->data).mPtr,HX_("shitMs",46,83,76,22))++;
HXLINE( 551)		this->display = this->updateDisplay();
HXLINE( 552)		return true;
            	}


::String ShitMsOption_obj::updateDisplay(){
            	HX_STACKFRAME(&_hx_pos_c1d03e934c19d28c_557_updateDisplay)
HXDLIN( 557)		return ((HX_("SHIT: < ",4a,54,89,f1) + ::Std_obj::string( ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("shitMs",46,83,76,22),::hx::paccDynamic)))) + HX_(" ms >",24,31,36,b5));
            	}



::hx::ObjectPtr< ShitMsOption_obj > ShitMsOption_obj::__new(::String desc) {
	::hx::ObjectPtr< ShitMsOption_obj > __this = new ShitMsOption_obj();
	__this->__construct(desc);
	return __this;
}

::hx::ObjectPtr< ShitMsOption_obj > ShitMsOption_obj::__alloc(::hx::Ctx *_hx_ctx,::String desc) {
	ShitMsOption_obj *__this = (ShitMsOption_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ShitMsOption_obj), true, "ShitMsOption"));
	*(void **)__this = ShitMsOption_obj::_hx_vtable;
	__this->__construct(desc);
	return __this;
}

ShitMsOption_obj::ShitMsOption_obj()
{
}

::hx::Val ShitMsOption_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onType") ) { return ::hx::Val( onType_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateDisplay") ) { return ::hx::Val( updateDisplay_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ShitMsOption_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ShitMsOption_obj_sStaticStorageInfo = 0;
#endif

static ::String ShitMsOption_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("onType",79,fb,92,ef),
	HX_("right",dc,0b,64,e9),
	HX_("updateDisplay",39,8f,b8,86),
	::String(null()) };

::hx::Class ShitMsOption_obj::__mClass;

void ShitMsOption_obj::__register()
{
	ShitMsOption_obj _hx_dummy;
	ShitMsOption_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ShitMsOption",7b,cf,ba,61);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ShitMsOption_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ShitMsOption_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ShitMsOption_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ShitMsOption_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

