// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Control
#include <Control.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_KeyBinds
#include <KeyBinds.h>
#endif
#ifndef INCLUDED_KeyboardScheme
#include <KeyboardScheme.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionAnalog
#include <flixel/input/actions/FlxActionAnalog.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputDevice
#include <flixel/input/actions/FlxInputDevice.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad__FlxGamepadInputID_FlxGamepadInputID_Impl_
#include <flixel/input/gamepad/_FlxGamepadInputID/FlxGamepadInputID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_iterators_MapKeyValueIterator
#include <haxe/iterators/MapKeyValueIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_948b5caa279cd923_96_new,"Controls","new",0x4f8de688,"Controls.new","Controls.hx",96,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_493_setKeyboardScheme,"Controls","setKeyboardScheme",0x039bdb96,"Controls.setKeyboardScheme","Controls.hx",493,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_569_loadKeyBinds,"Controls","loadKeyBinds",0x1c488715,"Controls.loadKeyBinds","Controls.hx",569,0x0ab041e8)
static const int _hx_array_data_116e4296_140[] = {
	(int)0,
};
static const int _hx_array_data_116e4296_141[] = {
	(int)1,
};
static const int _hx_array_data_116e4296_142[] = {
	(int)90,(int)32,(int)13,
};
static const int _hx_array_data_116e4296_143[] = {
	(int)8,(int)27,
};
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_609_removeKeyboard,"Controls","removeKeyboard",0xd2dac3e3,"Controls.removeKeyboard","Controls.hx",609,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_622_addGamepad,"Controls","addGamepad",0xa2c68b58,"Controls.addGamepad","Controls.hx",622,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_651_removeGamepad,"Controls","removeGamepad",0xfdf294e5,"Controls.removeGamepad","Controls.hx",651,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_669_addDefaultGamepad,"Controls","addDefaultGamepad",0xaa5e6409,"Controls.addDefaultGamepad","Controls.hx",669,0x0ab041e8)
static const int _hx_array_data_116e4296_188[] = {
	(int)0,
};
static const int _hx_array_data_116e4296_189[] = {
	(int)1,
};
static const int _hx_array_data_116e4296_190[] = {
	(int)11,(int)34,
};
static const int _hx_array_data_116e4296_191[] = {
	(int)12,(int)36,
};
static const int _hx_array_data_116e4296_192[] = {
	(int)13,(int)37,
};
static const int _hx_array_data_116e4296_193[] = {
	(int)14,(int)35,
};
static const int _hx_array_data_116e4296_194[] = {
	(int)7,
};
static const int _hx_array_data_116e4296_195[] = {
	(int)3,
};

void Controls_obj::__construct(::String name, ::KeyboardScheme __o_scheme){
            		 ::KeyboardScheme scheme = __o_scheme;
            		if (::hx::IsNull(__o_scheme)) scheme = ::KeyboardScheme_obj::None_dyn();
            	HX_GC_STACKFRAME(&_hx_pos_948b5caa279cd923_96_new)
HXLINE( 122)		this->gamepadsAdded = ::Array_obj< int >::__new(0);
HXLINE( 117)		this->byName =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 114)		this->_cheat =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("cheat",13,97,b6,45),null());
HXLINE( 113)		this->_reset =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("reset",cf,49,c8,e6),null());
HXLINE( 112)		this->_pause =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("pause",f6,d6,57,bd),null());
HXLINE( 111)		this->_back =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("back",27,da,10,41),null());
HXLINE( 110)		this->_accept =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("accept",08,93,06,0b),null());
HXLINE( 109)		this->_downR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("down-release",9c,bf,5b,fc),null());
HXLINE( 108)		this->_rightR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("right-release",16,dd,28,fb),null());
HXLINE( 107)		this->_leftR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("left-release",41,7c,5d,2e),null());
HXLINE( 106)		this->_upR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("up-release",95,4e,72,92),null());
HXLINE( 105)		this->_downP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("down-press",18,fe,06,cf),null());
HXLINE( 104)		this->_rightP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("right-press",12,e9,87,fb),null());
HXLINE( 103)		this->_leftP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("left-press",7d,d7,13,c1),null());
HXLINE( 102)		this->_upP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("up-press",d1,ac,09,1c),null());
HXLINE( 101)		this->_down =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("down",62,f8,6d,42),null());
HXLINE( 100)		this->_right =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("right",dc,0b,64,e9),null());
HXLINE(  99)		this->_left =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("left",07,08,b0,47),null());
HXLINE(  98)		this->_up =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("up",5b,66,00,00),null());
HXLINE( 213)		super::__construct(name,null(),null());
HXLINE( 215)		this->add(this->_up);
HXLINE( 216)		this->add(this->_left);
HXLINE( 217)		this->add(this->_right);
HXLINE( 218)		this->add(this->_down);
HXLINE( 219)		this->add(this->_upP);
HXLINE( 220)		this->add(this->_leftP);
HXLINE( 221)		this->add(this->_rightP);
HXLINE( 222)		this->add(this->_downP);
HXLINE( 223)		this->add(this->_upR);
HXLINE( 224)		this->add(this->_leftR);
HXLINE( 225)		this->add(this->_rightR);
HXLINE( 226)		this->add(this->_downR);
HXLINE( 227)		this->add(this->_accept);
HXLINE( 228)		this->add(this->_back);
HXLINE( 229)		this->add(this->_pause);
HXLINE( 230)		this->add(this->_reset);
HXLINE( 231)		this->add(this->_cheat);
HXLINE( 233)		{
HXLINE( 233)			int _g = 0;
HXDLIN( 233)			::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN( 233)			while((_g < _g1->length)){
HXLINE( 233)				 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN( 233)				_g = (_g + 1);
HXLINE( 234)				this->byName->set(action->name,action);
            			}
            		}
HXLINE( 236)		this->setKeyboardScheme(scheme,false);
            	}

Dynamic Controls_obj::__CreateEmpty() { return new Controls_obj; }

void *Controls_obj::_hx_vtable = 0;

Dynamic Controls_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Controls_obj > _hx_result = new Controls_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Controls_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x315ddd0d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x315ddd0d;
	} else {
		return inClassId==(int)0x6cff3556;
	}
}

void Controls_obj::setKeyboardScheme( ::KeyboardScheme scheme,::hx::Null< bool >  __o_reset){
            		bool reset = __o_reset.Default(true);
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_493_setKeyboardScheme)
HXDLIN( 493)		this->loadKeyBinds();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,setKeyboardScheme,(void))

void Controls_obj::loadKeyBinds(){
            	HX_GC_STACKFRAME(&_hx_pos_948b5caa279cd923_569_loadKeyBinds)
HXLINE( 572)		this->removeKeyboard();
HXLINE( 573)		if ((this->gamepadsAdded->length != 0)) {
HXLINE( 574)			this->removeGamepad(null());
            		}
HXLINE( 575)		::KeyBinds_obj::keyCheck();
HXLINE( 577)		 ::haxe::ds::EnumValueMap buttons =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 579)		if (::KeyBinds_obj::gamepad) {
HXLINE( 581)			{
HXLINE( 581)				::String s = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic)) );
HXDLIN( 581)				s = s.toUpperCase();
HXDLIN( 581)				int value;
HXDLIN( 581)				if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s)) {
HXLINE( 581)					value = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s);
            				}
            				else {
HXLINE( 581)					value = -1;
            				}
HXDLIN( 581)				buttons->set(::Control_obj::UP_dyn(),::Array_obj< int >::__new(1)->init(0,value));
            			}
HXLINE( 582)			{
HXLINE( 582)				::String s1 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic)) );
HXDLIN( 582)				s1 = s1.toUpperCase();
HXDLIN( 582)				int value1;
HXDLIN( 582)				if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s1)) {
HXLINE( 582)					value1 = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s1);
            				}
            				else {
HXLINE( 582)					value1 = -1;
            				}
HXDLIN( 582)				buttons->set(::Control_obj::LEFT_dyn(),::Array_obj< int >::__new(1)->init(0,value1));
            			}
HXLINE( 583)			{
HXLINE( 583)				::String s2 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic)) );
HXDLIN( 583)				s2 = s2.toUpperCase();
HXDLIN( 583)				int value2;
HXDLIN( 583)				if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s2)) {
HXLINE( 583)					value2 = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s2);
            				}
            				else {
HXLINE( 583)					value2 = -1;
            				}
HXDLIN( 583)				buttons->set(::Control_obj::DOWN_dyn(),::Array_obj< int >::__new(1)->init(0,value2));
            			}
HXLINE( 584)			{
HXLINE( 584)				::String s3 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic)) );
HXDLIN( 584)				s3 = s3.toUpperCase();
HXDLIN( 584)				int value3;
HXDLIN( 584)				if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s3)) {
HXLINE( 584)					value3 = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s3);
            				}
            				else {
HXLINE( 584)					value3 = -1;
            				}
HXDLIN( 584)				buttons->set(::Control_obj::RIGHT_dyn(),::Array_obj< int >::__new(1)->init(0,value3));
            			}
HXLINE( 585)			buttons->set(::Control_obj::ACCEPT_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_140,1));
HXLINE( 586)			buttons->set(::Control_obj::BACK_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_141,1));
HXLINE( 587)			{
HXLINE( 587)				::String s4 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("pauseBind",d3,ab,7d,45),::hx::paccDynamic)) );
HXDLIN( 587)				s4 = s4.toUpperCase();
HXDLIN( 587)				int value4;
HXDLIN( 587)				if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s4)) {
HXLINE( 587)					value4 = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s4);
            				}
            				else {
HXLINE( 587)					value4 = -1;
            				}
HXDLIN( 587)				buttons->set(::Control_obj::PAUSE_dyn(),::Array_obj< int >::__new(1)->init(0,value4));
            			}
HXLINE( 589)			this->addGamepad(0,buttons);
            		}
HXLINE( 592)		{
HXLINE( 592)			::String s = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic)) );
HXDLIN( 592)			s = s.toUpperCase();
HXDLIN( 592)			int keys;
HXDLIN( 592)			if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s)) {
HXLINE( 592)				keys = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s);
            			}
            			else {
HXLINE( 592)				keys = -1;
            			}
HXDLIN( 592)			::Array< int > keys1 = ::Array_obj< int >::__new(2)->init(0,keys)->init(1,38);
HXDLIN( 592)			switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 592)					{
HXLINE( 592)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 592)						int state = 1;
HXDLIN( 592)						int _g = 0;
HXDLIN( 592)						while((_g < keys1->length)){
HXLINE( 592)							int key = keys1->__get(_g);
HXDLIN( 592)							_g = (_g + 1);
HXDLIN( 592)							action->addKey(key,state);
            						}
            					}
HXDLIN( 592)					{
HXLINE( 592)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 592)						int state1 = 2;
HXDLIN( 592)						int _g1 = 0;
HXDLIN( 592)						while((_g1 < keys1->length)){
HXLINE( 592)							int key = keys1->__get(_g1);
HXDLIN( 592)							_g1 = (_g1 + 1);
HXDLIN( 592)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 592)					{
HXLINE( 592)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 592)						int state2 = -1;
HXDLIN( 592)						int _g2 = 0;
HXDLIN( 592)						while((_g2 < keys1->length)){
HXLINE( 592)							int key = keys1->__get(_g2);
HXDLIN( 592)							_g2 = (_g2 + 1);
HXDLIN( 592)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 592)					{
HXLINE( 592)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 592)						int state = 1;
HXDLIN( 592)						int _g = 0;
HXDLIN( 592)						while((_g < keys1->length)){
HXLINE( 592)							int key = keys1->__get(_g);
HXDLIN( 592)							_g = (_g + 1);
HXDLIN( 592)							action->addKey(key,state);
            						}
            					}
HXDLIN( 592)					{
HXLINE( 592)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 592)						int state1 = 2;
HXDLIN( 592)						int _g1 = 0;
HXDLIN( 592)						while((_g1 < keys1->length)){
HXLINE( 592)							int key = keys1->__get(_g1);
HXDLIN( 592)							_g1 = (_g1 + 1);
HXDLIN( 592)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 592)					{
HXLINE( 592)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 592)						int state2 = -1;
HXDLIN( 592)						int _g2 = 0;
HXDLIN( 592)						while((_g2 < keys1->length)){
HXLINE( 592)							int key = keys1->__get(_g2);
HXDLIN( 592)							_g2 = (_g2 + 1);
HXDLIN( 592)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 592)					{
HXLINE( 592)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 592)						int state = 1;
HXDLIN( 592)						int _g = 0;
HXDLIN( 592)						while((_g < keys1->length)){
HXLINE( 592)							int key = keys1->__get(_g);
HXDLIN( 592)							_g = (_g + 1);
HXDLIN( 592)							action->addKey(key,state);
            						}
            					}
HXDLIN( 592)					{
HXLINE( 592)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 592)						int state1 = 2;
HXDLIN( 592)						int _g1 = 0;
HXDLIN( 592)						while((_g1 < keys1->length)){
HXLINE( 592)							int key = keys1->__get(_g1);
HXDLIN( 592)							_g1 = (_g1 + 1);
HXDLIN( 592)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 592)					{
HXLINE( 592)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 592)						int state2 = -1;
HXDLIN( 592)						int _g2 = 0;
HXDLIN( 592)						while((_g2 < keys1->length)){
HXLINE( 592)							int key = keys1->__get(_g2);
HXDLIN( 592)							_g2 = (_g2 + 1);
HXDLIN( 592)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 592)					{
HXLINE( 592)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 592)						int state = 1;
HXDLIN( 592)						int _g = 0;
HXDLIN( 592)						while((_g < keys1->length)){
HXLINE( 592)							int key = keys1->__get(_g);
HXDLIN( 592)							_g = (_g + 1);
HXDLIN( 592)							action->addKey(key,state);
            						}
            					}
HXDLIN( 592)					{
HXLINE( 592)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 592)						int state1 = 2;
HXDLIN( 592)						int _g1 = 0;
HXDLIN( 592)						while((_g1 < keys1->length)){
HXLINE( 592)							int key = keys1->__get(_g1);
HXDLIN( 592)							_g1 = (_g1 + 1);
HXDLIN( 592)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 592)					{
HXLINE( 592)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 592)						int state2 = -1;
HXDLIN( 592)						int _g2 = 0;
HXDLIN( 592)						while((_g2 < keys1->length)){
HXLINE( 592)							int key = keys1->__get(_g2);
HXDLIN( 592)							_g2 = (_g2 + 1);
HXDLIN( 592)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 592)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 592)					int state = 2;
HXDLIN( 592)					int _g = 0;
HXDLIN( 592)					while((_g < keys1->length)){
HXLINE( 592)						int key = keys1->__get(_g);
HXDLIN( 592)						_g = (_g + 1);
HXDLIN( 592)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 592)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 592)					int state = 2;
HXDLIN( 592)					int _g = 0;
HXDLIN( 592)					while((_g < keys1->length)){
HXLINE( 592)						int key = keys1->__get(_g);
HXDLIN( 592)						_g = (_g + 1);
HXDLIN( 592)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 592)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 592)					int state = 2;
HXDLIN( 592)					int _g = 0;
HXDLIN( 592)					while((_g < keys1->length)){
HXLINE( 592)						int key = keys1->__get(_g);
HXDLIN( 592)						_g = (_g + 1);
HXDLIN( 592)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 592)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 592)					int state = 2;
HXDLIN( 592)					int _g = 0;
HXDLIN( 592)					while((_g < keys1->length)){
HXLINE( 592)						int key = keys1->__get(_g);
HXDLIN( 592)						_g = (_g + 1);
HXDLIN( 592)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 592)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 592)					int state = 2;
HXDLIN( 592)					int _g = 0;
HXDLIN( 592)					while((_g < keys1->length)){
HXLINE( 592)						int key = keys1->__get(_g);
HXDLIN( 592)						_g = (_g + 1);
HXDLIN( 592)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 593)		{
HXLINE( 593)			::String s1 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic)) );
HXDLIN( 593)			s1 = s1.toUpperCase();
HXDLIN( 593)			int keys2;
HXDLIN( 593)			if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s1)) {
HXLINE( 593)				keys2 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s1);
            			}
            			else {
HXLINE( 593)				keys2 = -1;
            			}
HXDLIN( 593)			::Array< int > keys3 = ::Array_obj< int >::__new(2)->init(0,keys2)->init(1,40);
HXDLIN( 593)			switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 593)					{
HXLINE( 593)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 593)						int state = 1;
HXDLIN( 593)						int _g = 0;
HXDLIN( 593)						while((_g < keys3->length)){
HXLINE( 593)							int key = keys3->__get(_g);
HXDLIN( 593)							_g = (_g + 1);
HXDLIN( 593)							action->addKey(key,state);
            						}
            					}
HXDLIN( 593)					{
HXLINE( 593)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 593)						int state1 = 2;
HXDLIN( 593)						int _g1 = 0;
HXDLIN( 593)						while((_g1 < keys3->length)){
HXLINE( 593)							int key = keys3->__get(_g1);
HXDLIN( 593)							_g1 = (_g1 + 1);
HXDLIN( 593)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 593)					{
HXLINE( 593)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 593)						int state2 = -1;
HXDLIN( 593)						int _g2 = 0;
HXDLIN( 593)						while((_g2 < keys3->length)){
HXLINE( 593)							int key = keys3->__get(_g2);
HXDLIN( 593)							_g2 = (_g2 + 1);
HXDLIN( 593)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 593)					{
HXLINE( 593)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 593)						int state = 1;
HXDLIN( 593)						int _g = 0;
HXDLIN( 593)						while((_g < keys3->length)){
HXLINE( 593)							int key = keys3->__get(_g);
HXDLIN( 593)							_g = (_g + 1);
HXDLIN( 593)							action->addKey(key,state);
            						}
            					}
HXDLIN( 593)					{
HXLINE( 593)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 593)						int state1 = 2;
HXDLIN( 593)						int _g1 = 0;
HXDLIN( 593)						while((_g1 < keys3->length)){
HXLINE( 593)							int key = keys3->__get(_g1);
HXDLIN( 593)							_g1 = (_g1 + 1);
HXDLIN( 593)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 593)					{
HXLINE( 593)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 593)						int state2 = -1;
HXDLIN( 593)						int _g2 = 0;
HXDLIN( 593)						while((_g2 < keys3->length)){
HXLINE( 593)							int key = keys3->__get(_g2);
HXDLIN( 593)							_g2 = (_g2 + 1);
HXDLIN( 593)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 593)					{
HXLINE( 593)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 593)						int state = 1;
HXDLIN( 593)						int _g = 0;
HXDLIN( 593)						while((_g < keys3->length)){
HXLINE( 593)							int key = keys3->__get(_g);
HXDLIN( 593)							_g = (_g + 1);
HXDLIN( 593)							action->addKey(key,state);
            						}
            					}
HXDLIN( 593)					{
HXLINE( 593)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 593)						int state1 = 2;
HXDLIN( 593)						int _g1 = 0;
HXDLIN( 593)						while((_g1 < keys3->length)){
HXLINE( 593)							int key = keys3->__get(_g1);
HXDLIN( 593)							_g1 = (_g1 + 1);
HXDLIN( 593)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 593)					{
HXLINE( 593)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 593)						int state2 = -1;
HXDLIN( 593)						int _g2 = 0;
HXDLIN( 593)						while((_g2 < keys3->length)){
HXLINE( 593)							int key = keys3->__get(_g2);
HXDLIN( 593)							_g2 = (_g2 + 1);
HXDLIN( 593)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 593)					{
HXLINE( 593)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 593)						int state = 1;
HXDLIN( 593)						int _g = 0;
HXDLIN( 593)						while((_g < keys3->length)){
HXLINE( 593)							int key = keys3->__get(_g);
HXDLIN( 593)							_g = (_g + 1);
HXDLIN( 593)							action->addKey(key,state);
            						}
            					}
HXDLIN( 593)					{
HXLINE( 593)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 593)						int state1 = 2;
HXDLIN( 593)						int _g1 = 0;
HXDLIN( 593)						while((_g1 < keys3->length)){
HXLINE( 593)							int key = keys3->__get(_g1);
HXDLIN( 593)							_g1 = (_g1 + 1);
HXDLIN( 593)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 593)					{
HXLINE( 593)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 593)						int state2 = -1;
HXDLIN( 593)						int _g2 = 0;
HXDLIN( 593)						while((_g2 < keys3->length)){
HXLINE( 593)							int key = keys3->__get(_g2);
HXDLIN( 593)							_g2 = (_g2 + 1);
HXDLIN( 593)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 593)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 593)					int state = 2;
HXDLIN( 593)					int _g = 0;
HXDLIN( 593)					while((_g < keys3->length)){
HXLINE( 593)						int key = keys3->__get(_g);
HXDLIN( 593)						_g = (_g + 1);
HXDLIN( 593)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 593)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 593)					int state = 2;
HXDLIN( 593)					int _g = 0;
HXDLIN( 593)					while((_g < keys3->length)){
HXLINE( 593)						int key = keys3->__get(_g);
HXDLIN( 593)						_g = (_g + 1);
HXDLIN( 593)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 593)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 593)					int state = 2;
HXDLIN( 593)					int _g = 0;
HXDLIN( 593)					while((_g < keys3->length)){
HXLINE( 593)						int key = keys3->__get(_g);
HXDLIN( 593)						_g = (_g + 1);
HXDLIN( 593)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 593)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 593)					int state = 2;
HXDLIN( 593)					int _g = 0;
HXDLIN( 593)					while((_g < keys3->length)){
HXLINE( 593)						int key = keys3->__get(_g);
HXDLIN( 593)						_g = (_g + 1);
HXDLIN( 593)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 593)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 593)					int state = 2;
HXDLIN( 593)					int _g = 0;
HXDLIN( 593)					while((_g < keys3->length)){
HXLINE( 593)						int key = keys3->__get(_g);
HXDLIN( 593)						_g = (_g + 1);
HXDLIN( 593)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 594)		{
HXLINE( 594)			::String s2 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic)) );
HXDLIN( 594)			s2 = s2.toUpperCase();
HXDLIN( 594)			int keys4;
HXDLIN( 594)			if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s2)) {
HXLINE( 594)				keys4 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s2);
            			}
            			else {
HXLINE( 594)				keys4 = -1;
            			}
HXDLIN( 594)			::Array< int > keys5 = ::Array_obj< int >::__new(2)->init(0,keys4)->init(1,37);
HXDLIN( 594)			switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 594)					{
HXLINE( 594)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 594)						int state = 1;
HXDLIN( 594)						int _g = 0;
HXDLIN( 594)						while((_g < keys5->length)){
HXLINE( 594)							int key = keys5->__get(_g);
HXDLIN( 594)							_g = (_g + 1);
HXDLIN( 594)							action->addKey(key,state);
            						}
            					}
HXDLIN( 594)					{
HXLINE( 594)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 594)						int state1 = 2;
HXDLIN( 594)						int _g1 = 0;
HXDLIN( 594)						while((_g1 < keys5->length)){
HXLINE( 594)							int key = keys5->__get(_g1);
HXDLIN( 594)							_g1 = (_g1 + 1);
HXDLIN( 594)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 594)					{
HXLINE( 594)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 594)						int state2 = -1;
HXDLIN( 594)						int _g2 = 0;
HXDLIN( 594)						while((_g2 < keys5->length)){
HXLINE( 594)							int key = keys5->__get(_g2);
HXDLIN( 594)							_g2 = (_g2 + 1);
HXDLIN( 594)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 594)					{
HXLINE( 594)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 594)						int state = 1;
HXDLIN( 594)						int _g = 0;
HXDLIN( 594)						while((_g < keys5->length)){
HXLINE( 594)							int key = keys5->__get(_g);
HXDLIN( 594)							_g = (_g + 1);
HXDLIN( 594)							action->addKey(key,state);
            						}
            					}
HXDLIN( 594)					{
HXLINE( 594)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 594)						int state1 = 2;
HXDLIN( 594)						int _g1 = 0;
HXDLIN( 594)						while((_g1 < keys5->length)){
HXLINE( 594)							int key = keys5->__get(_g1);
HXDLIN( 594)							_g1 = (_g1 + 1);
HXDLIN( 594)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 594)					{
HXLINE( 594)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 594)						int state2 = -1;
HXDLIN( 594)						int _g2 = 0;
HXDLIN( 594)						while((_g2 < keys5->length)){
HXLINE( 594)							int key = keys5->__get(_g2);
HXDLIN( 594)							_g2 = (_g2 + 1);
HXDLIN( 594)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 594)					{
HXLINE( 594)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 594)						int state = 1;
HXDLIN( 594)						int _g = 0;
HXDLIN( 594)						while((_g < keys5->length)){
HXLINE( 594)							int key = keys5->__get(_g);
HXDLIN( 594)							_g = (_g + 1);
HXDLIN( 594)							action->addKey(key,state);
            						}
            					}
HXDLIN( 594)					{
HXLINE( 594)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 594)						int state1 = 2;
HXDLIN( 594)						int _g1 = 0;
HXDLIN( 594)						while((_g1 < keys5->length)){
HXLINE( 594)							int key = keys5->__get(_g1);
HXDLIN( 594)							_g1 = (_g1 + 1);
HXDLIN( 594)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 594)					{
HXLINE( 594)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 594)						int state2 = -1;
HXDLIN( 594)						int _g2 = 0;
HXDLIN( 594)						while((_g2 < keys5->length)){
HXLINE( 594)							int key = keys5->__get(_g2);
HXDLIN( 594)							_g2 = (_g2 + 1);
HXDLIN( 594)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 594)					{
HXLINE( 594)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 594)						int state = 1;
HXDLIN( 594)						int _g = 0;
HXDLIN( 594)						while((_g < keys5->length)){
HXLINE( 594)							int key = keys5->__get(_g);
HXDLIN( 594)							_g = (_g + 1);
HXDLIN( 594)							action->addKey(key,state);
            						}
            					}
HXDLIN( 594)					{
HXLINE( 594)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 594)						int state1 = 2;
HXDLIN( 594)						int _g1 = 0;
HXDLIN( 594)						while((_g1 < keys5->length)){
HXLINE( 594)							int key = keys5->__get(_g1);
HXDLIN( 594)							_g1 = (_g1 + 1);
HXDLIN( 594)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 594)					{
HXLINE( 594)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 594)						int state2 = -1;
HXDLIN( 594)						int _g2 = 0;
HXDLIN( 594)						while((_g2 < keys5->length)){
HXLINE( 594)							int key = keys5->__get(_g2);
HXDLIN( 594)							_g2 = (_g2 + 1);
HXDLIN( 594)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 594)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 594)					int state = 2;
HXDLIN( 594)					int _g = 0;
HXDLIN( 594)					while((_g < keys5->length)){
HXLINE( 594)						int key = keys5->__get(_g);
HXDLIN( 594)						_g = (_g + 1);
HXDLIN( 594)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 594)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 594)					int state = 2;
HXDLIN( 594)					int _g = 0;
HXDLIN( 594)					while((_g < keys5->length)){
HXLINE( 594)						int key = keys5->__get(_g);
HXDLIN( 594)						_g = (_g + 1);
HXDLIN( 594)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 594)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 594)					int state = 2;
HXDLIN( 594)					int _g = 0;
HXDLIN( 594)					while((_g < keys5->length)){
HXLINE( 594)						int key = keys5->__get(_g);
HXDLIN( 594)						_g = (_g + 1);
HXDLIN( 594)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 594)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 594)					int state = 2;
HXDLIN( 594)					int _g = 0;
HXDLIN( 594)					while((_g < keys5->length)){
HXLINE( 594)						int key = keys5->__get(_g);
HXDLIN( 594)						_g = (_g + 1);
HXDLIN( 594)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 594)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 594)					int state = 2;
HXDLIN( 594)					int _g = 0;
HXDLIN( 594)					while((_g < keys5->length)){
HXLINE( 594)						int key = keys5->__get(_g);
HXDLIN( 594)						_g = (_g + 1);
HXDLIN( 594)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 595)		{
HXLINE( 595)			::String s3 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic)) );
HXDLIN( 595)			s3 = s3.toUpperCase();
HXDLIN( 595)			int keys6;
HXDLIN( 595)			if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s3)) {
HXLINE( 595)				keys6 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s3);
            			}
            			else {
HXLINE( 595)				keys6 = -1;
            			}
HXDLIN( 595)			::Array< int > keys7 = ::Array_obj< int >::__new(2)->init(0,keys6)->init(1,39);
HXDLIN( 595)			switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 595)					{
HXLINE( 595)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 595)						int state = 1;
HXDLIN( 595)						int _g = 0;
HXDLIN( 595)						while((_g < keys7->length)){
HXLINE( 595)							int key = keys7->__get(_g);
HXDLIN( 595)							_g = (_g + 1);
HXDLIN( 595)							action->addKey(key,state);
            						}
            					}
HXDLIN( 595)					{
HXLINE( 595)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 595)						int state1 = 2;
HXDLIN( 595)						int _g1 = 0;
HXDLIN( 595)						while((_g1 < keys7->length)){
HXLINE( 595)							int key = keys7->__get(_g1);
HXDLIN( 595)							_g1 = (_g1 + 1);
HXDLIN( 595)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 595)					{
HXLINE( 595)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 595)						int state2 = -1;
HXDLIN( 595)						int _g2 = 0;
HXDLIN( 595)						while((_g2 < keys7->length)){
HXLINE( 595)							int key = keys7->__get(_g2);
HXDLIN( 595)							_g2 = (_g2 + 1);
HXDLIN( 595)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 595)					{
HXLINE( 595)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 595)						int state = 1;
HXDLIN( 595)						int _g = 0;
HXDLIN( 595)						while((_g < keys7->length)){
HXLINE( 595)							int key = keys7->__get(_g);
HXDLIN( 595)							_g = (_g + 1);
HXDLIN( 595)							action->addKey(key,state);
            						}
            					}
HXDLIN( 595)					{
HXLINE( 595)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 595)						int state1 = 2;
HXDLIN( 595)						int _g1 = 0;
HXDLIN( 595)						while((_g1 < keys7->length)){
HXLINE( 595)							int key = keys7->__get(_g1);
HXDLIN( 595)							_g1 = (_g1 + 1);
HXDLIN( 595)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 595)					{
HXLINE( 595)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 595)						int state2 = -1;
HXDLIN( 595)						int _g2 = 0;
HXDLIN( 595)						while((_g2 < keys7->length)){
HXLINE( 595)							int key = keys7->__get(_g2);
HXDLIN( 595)							_g2 = (_g2 + 1);
HXDLIN( 595)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 595)					{
HXLINE( 595)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 595)						int state = 1;
HXDLIN( 595)						int _g = 0;
HXDLIN( 595)						while((_g < keys7->length)){
HXLINE( 595)							int key = keys7->__get(_g);
HXDLIN( 595)							_g = (_g + 1);
HXDLIN( 595)							action->addKey(key,state);
            						}
            					}
HXDLIN( 595)					{
HXLINE( 595)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 595)						int state1 = 2;
HXDLIN( 595)						int _g1 = 0;
HXDLIN( 595)						while((_g1 < keys7->length)){
HXLINE( 595)							int key = keys7->__get(_g1);
HXDLIN( 595)							_g1 = (_g1 + 1);
HXDLIN( 595)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 595)					{
HXLINE( 595)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 595)						int state2 = -1;
HXDLIN( 595)						int _g2 = 0;
HXDLIN( 595)						while((_g2 < keys7->length)){
HXLINE( 595)							int key = keys7->__get(_g2);
HXDLIN( 595)							_g2 = (_g2 + 1);
HXDLIN( 595)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 595)					{
HXLINE( 595)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 595)						int state = 1;
HXDLIN( 595)						int _g = 0;
HXDLIN( 595)						while((_g < keys7->length)){
HXLINE( 595)							int key = keys7->__get(_g);
HXDLIN( 595)							_g = (_g + 1);
HXDLIN( 595)							action->addKey(key,state);
            						}
            					}
HXDLIN( 595)					{
HXLINE( 595)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 595)						int state1 = 2;
HXDLIN( 595)						int _g1 = 0;
HXDLIN( 595)						while((_g1 < keys7->length)){
HXLINE( 595)							int key = keys7->__get(_g1);
HXDLIN( 595)							_g1 = (_g1 + 1);
HXDLIN( 595)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 595)					{
HXLINE( 595)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 595)						int state2 = -1;
HXDLIN( 595)						int _g2 = 0;
HXDLIN( 595)						while((_g2 < keys7->length)){
HXLINE( 595)							int key = keys7->__get(_g2);
HXDLIN( 595)							_g2 = (_g2 + 1);
HXDLIN( 595)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 595)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 595)					int state = 2;
HXDLIN( 595)					int _g = 0;
HXDLIN( 595)					while((_g < keys7->length)){
HXLINE( 595)						int key = keys7->__get(_g);
HXDLIN( 595)						_g = (_g + 1);
HXDLIN( 595)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 595)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 595)					int state = 2;
HXDLIN( 595)					int _g = 0;
HXDLIN( 595)					while((_g < keys7->length)){
HXLINE( 595)						int key = keys7->__get(_g);
HXDLIN( 595)						_g = (_g + 1);
HXDLIN( 595)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 595)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 595)					int state = 2;
HXDLIN( 595)					int _g = 0;
HXDLIN( 595)					while((_g < keys7->length)){
HXLINE( 595)						int key = keys7->__get(_g);
HXDLIN( 595)						_g = (_g + 1);
HXDLIN( 595)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 595)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 595)					int state = 2;
HXDLIN( 595)					int _g = 0;
HXDLIN( 595)					while((_g < keys7->length)){
HXLINE( 595)						int key = keys7->__get(_g);
HXDLIN( 595)						_g = (_g + 1);
HXDLIN( 595)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 595)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 595)					int state = 2;
HXDLIN( 595)					int _g = 0;
HXDLIN( 595)					while((_g < keys7->length)){
HXLINE( 595)						int key = keys7->__get(_g);
HXDLIN( 595)						_g = (_g + 1);
HXDLIN( 595)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 596)		{
HXLINE( 596)			::Array< int > keys8 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_142,3);
HXDLIN( 596)			switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 596)					{
HXLINE( 596)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 596)						int state = 1;
HXDLIN( 596)						int _g = 0;
HXDLIN( 596)						while((_g < keys8->length)){
HXLINE( 596)							int key = keys8->__get(_g);
HXDLIN( 596)							_g = (_g + 1);
HXDLIN( 596)							action->addKey(key,state);
            						}
            					}
HXDLIN( 596)					{
HXLINE( 596)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 596)						int state1 = 2;
HXDLIN( 596)						int _g1 = 0;
HXDLIN( 596)						while((_g1 < keys8->length)){
HXLINE( 596)							int key = keys8->__get(_g1);
HXDLIN( 596)							_g1 = (_g1 + 1);
HXDLIN( 596)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 596)					{
HXLINE( 596)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 596)						int state2 = -1;
HXDLIN( 596)						int _g2 = 0;
HXDLIN( 596)						while((_g2 < keys8->length)){
HXLINE( 596)							int key = keys8->__get(_g2);
HXDLIN( 596)							_g2 = (_g2 + 1);
HXDLIN( 596)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 596)					{
HXLINE( 596)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 596)						int state = 1;
HXDLIN( 596)						int _g = 0;
HXDLIN( 596)						while((_g < keys8->length)){
HXLINE( 596)							int key = keys8->__get(_g);
HXDLIN( 596)							_g = (_g + 1);
HXDLIN( 596)							action->addKey(key,state);
            						}
            					}
HXDLIN( 596)					{
HXLINE( 596)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 596)						int state1 = 2;
HXDLIN( 596)						int _g1 = 0;
HXDLIN( 596)						while((_g1 < keys8->length)){
HXLINE( 596)							int key = keys8->__get(_g1);
HXDLIN( 596)							_g1 = (_g1 + 1);
HXDLIN( 596)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 596)					{
HXLINE( 596)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 596)						int state2 = -1;
HXDLIN( 596)						int _g2 = 0;
HXDLIN( 596)						while((_g2 < keys8->length)){
HXLINE( 596)							int key = keys8->__get(_g2);
HXDLIN( 596)							_g2 = (_g2 + 1);
HXDLIN( 596)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 596)					{
HXLINE( 596)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 596)						int state = 1;
HXDLIN( 596)						int _g = 0;
HXDLIN( 596)						while((_g < keys8->length)){
HXLINE( 596)							int key = keys8->__get(_g);
HXDLIN( 596)							_g = (_g + 1);
HXDLIN( 596)							action->addKey(key,state);
            						}
            					}
HXDLIN( 596)					{
HXLINE( 596)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 596)						int state1 = 2;
HXDLIN( 596)						int _g1 = 0;
HXDLIN( 596)						while((_g1 < keys8->length)){
HXLINE( 596)							int key = keys8->__get(_g1);
HXDLIN( 596)							_g1 = (_g1 + 1);
HXDLIN( 596)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 596)					{
HXLINE( 596)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 596)						int state2 = -1;
HXDLIN( 596)						int _g2 = 0;
HXDLIN( 596)						while((_g2 < keys8->length)){
HXLINE( 596)							int key = keys8->__get(_g2);
HXDLIN( 596)							_g2 = (_g2 + 1);
HXDLIN( 596)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 596)					{
HXLINE( 596)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 596)						int state = 1;
HXDLIN( 596)						int _g = 0;
HXDLIN( 596)						while((_g < keys8->length)){
HXLINE( 596)							int key = keys8->__get(_g);
HXDLIN( 596)							_g = (_g + 1);
HXDLIN( 596)							action->addKey(key,state);
            						}
            					}
HXDLIN( 596)					{
HXLINE( 596)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 596)						int state1 = 2;
HXDLIN( 596)						int _g1 = 0;
HXDLIN( 596)						while((_g1 < keys8->length)){
HXLINE( 596)							int key = keys8->__get(_g1);
HXDLIN( 596)							_g1 = (_g1 + 1);
HXDLIN( 596)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 596)					{
HXLINE( 596)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 596)						int state2 = -1;
HXDLIN( 596)						int _g2 = 0;
HXDLIN( 596)						while((_g2 < keys8->length)){
HXLINE( 596)							int key = keys8->__get(_g2);
HXDLIN( 596)							_g2 = (_g2 + 1);
HXDLIN( 596)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 596)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 596)					int state = 2;
HXDLIN( 596)					int _g = 0;
HXDLIN( 596)					while((_g < keys8->length)){
HXLINE( 596)						int key = keys8->__get(_g);
HXDLIN( 596)						_g = (_g + 1);
HXDLIN( 596)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 596)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 596)					int state = 2;
HXDLIN( 596)					int _g = 0;
HXDLIN( 596)					while((_g < keys8->length)){
HXLINE( 596)						int key = keys8->__get(_g);
HXDLIN( 596)						_g = (_g + 1);
HXDLIN( 596)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 596)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 596)					int state = 2;
HXDLIN( 596)					int _g = 0;
HXDLIN( 596)					while((_g < keys8->length)){
HXLINE( 596)						int key = keys8->__get(_g);
HXDLIN( 596)						_g = (_g + 1);
HXDLIN( 596)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 596)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 596)					int state = 2;
HXDLIN( 596)					int _g = 0;
HXDLIN( 596)					while((_g < keys8->length)){
HXLINE( 596)						int key = keys8->__get(_g);
HXDLIN( 596)						_g = (_g + 1);
HXDLIN( 596)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 596)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 596)					int state = 2;
HXDLIN( 596)					int _g = 0;
HXDLIN( 596)					while((_g < keys8->length)){
HXLINE( 596)						int key = keys8->__get(_g);
HXDLIN( 596)						_g = (_g + 1);
HXDLIN( 596)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 597)		{
HXLINE( 597)			::Array< int > keys9 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_143,2);
HXDLIN( 597)			switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 597)					{
HXLINE( 597)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 597)						int state = 1;
HXDLIN( 597)						int _g = 0;
HXDLIN( 597)						while((_g < keys9->length)){
HXLINE( 597)							int key = keys9->__get(_g);
HXDLIN( 597)							_g = (_g + 1);
HXDLIN( 597)							action->addKey(key,state);
            						}
            					}
HXDLIN( 597)					{
HXLINE( 597)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 597)						int state1 = 2;
HXDLIN( 597)						int _g1 = 0;
HXDLIN( 597)						while((_g1 < keys9->length)){
HXLINE( 597)							int key = keys9->__get(_g1);
HXDLIN( 597)							_g1 = (_g1 + 1);
HXDLIN( 597)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 597)					{
HXLINE( 597)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 597)						int state2 = -1;
HXDLIN( 597)						int _g2 = 0;
HXDLIN( 597)						while((_g2 < keys9->length)){
HXLINE( 597)							int key = keys9->__get(_g2);
HXDLIN( 597)							_g2 = (_g2 + 1);
HXDLIN( 597)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 597)					{
HXLINE( 597)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 597)						int state = 1;
HXDLIN( 597)						int _g = 0;
HXDLIN( 597)						while((_g < keys9->length)){
HXLINE( 597)							int key = keys9->__get(_g);
HXDLIN( 597)							_g = (_g + 1);
HXDLIN( 597)							action->addKey(key,state);
            						}
            					}
HXDLIN( 597)					{
HXLINE( 597)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 597)						int state1 = 2;
HXDLIN( 597)						int _g1 = 0;
HXDLIN( 597)						while((_g1 < keys9->length)){
HXLINE( 597)							int key = keys9->__get(_g1);
HXDLIN( 597)							_g1 = (_g1 + 1);
HXDLIN( 597)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 597)					{
HXLINE( 597)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 597)						int state2 = -1;
HXDLIN( 597)						int _g2 = 0;
HXDLIN( 597)						while((_g2 < keys9->length)){
HXLINE( 597)							int key = keys9->__get(_g2);
HXDLIN( 597)							_g2 = (_g2 + 1);
HXDLIN( 597)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 597)					{
HXLINE( 597)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 597)						int state = 1;
HXDLIN( 597)						int _g = 0;
HXDLIN( 597)						while((_g < keys9->length)){
HXLINE( 597)							int key = keys9->__get(_g);
HXDLIN( 597)							_g = (_g + 1);
HXDLIN( 597)							action->addKey(key,state);
            						}
            					}
HXDLIN( 597)					{
HXLINE( 597)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 597)						int state1 = 2;
HXDLIN( 597)						int _g1 = 0;
HXDLIN( 597)						while((_g1 < keys9->length)){
HXLINE( 597)							int key = keys9->__get(_g1);
HXDLIN( 597)							_g1 = (_g1 + 1);
HXDLIN( 597)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 597)					{
HXLINE( 597)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 597)						int state2 = -1;
HXDLIN( 597)						int _g2 = 0;
HXDLIN( 597)						while((_g2 < keys9->length)){
HXLINE( 597)							int key = keys9->__get(_g2);
HXDLIN( 597)							_g2 = (_g2 + 1);
HXDLIN( 597)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 597)					{
HXLINE( 597)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 597)						int state = 1;
HXDLIN( 597)						int _g = 0;
HXDLIN( 597)						while((_g < keys9->length)){
HXLINE( 597)							int key = keys9->__get(_g);
HXDLIN( 597)							_g = (_g + 1);
HXDLIN( 597)							action->addKey(key,state);
            						}
            					}
HXDLIN( 597)					{
HXLINE( 597)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 597)						int state1 = 2;
HXDLIN( 597)						int _g1 = 0;
HXDLIN( 597)						while((_g1 < keys9->length)){
HXLINE( 597)							int key = keys9->__get(_g1);
HXDLIN( 597)							_g1 = (_g1 + 1);
HXDLIN( 597)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 597)					{
HXLINE( 597)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 597)						int state2 = -1;
HXDLIN( 597)						int _g2 = 0;
HXDLIN( 597)						while((_g2 < keys9->length)){
HXLINE( 597)							int key = keys9->__get(_g2);
HXDLIN( 597)							_g2 = (_g2 + 1);
HXDLIN( 597)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 597)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 597)					int state = 2;
HXDLIN( 597)					int _g = 0;
HXDLIN( 597)					while((_g < keys9->length)){
HXLINE( 597)						int key = keys9->__get(_g);
HXDLIN( 597)						_g = (_g + 1);
HXDLIN( 597)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 597)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 597)					int state = 2;
HXDLIN( 597)					int _g = 0;
HXDLIN( 597)					while((_g < keys9->length)){
HXLINE( 597)						int key = keys9->__get(_g);
HXDLIN( 597)						_g = (_g + 1);
HXDLIN( 597)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 597)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 597)					int state = 2;
HXDLIN( 597)					int _g = 0;
HXDLIN( 597)					while((_g < keys9->length)){
HXLINE( 597)						int key = keys9->__get(_g);
HXDLIN( 597)						_g = (_g + 1);
HXDLIN( 597)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 597)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 597)					int state = 2;
HXDLIN( 597)					int _g = 0;
HXDLIN( 597)					while((_g < keys9->length)){
HXLINE( 597)						int key = keys9->__get(_g);
HXDLIN( 597)						_g = (_g + 1);
HXDLIN( 597)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 597)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 597)					int state = 2;
HXDLIN( 597)					int _g = 0;
HXDLIN( 597)					while((_g < keys9->length)){
HXLINE( 597)						int key = keys9->__get(_g);
HXDLIN( 597)						_g = (_g + 1);
HXDLIN( 597)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 598)		{
HXLINE( 598)			::String s4 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("pauseBind",d3,ab,7d,45),::hx::paccDynamic)) );
HXDLIN( 598)			s4 = s4.toUpperCase();
HXDLIN( 598)			int keys10;
HXDLIN( 598)			if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s4)) {
HXLINE( 598)				keys10 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s4);
            			}
            			else {
HXLINE( 598)				keys10 = -1;
            			}
HXDLIN( 598)			::Array< int > keys11 = ::Array_obj< int >::__new(1)->init(0,keys10);
HXDLIN( 598)			switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 598)					{
HXLINE( 598)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 598)						int state = 1;
HXDLIN( 598)						int _g = 0;
HXDLIN( 598)						while((_g < keys11->length)){
HXLINE( 598)							int key = keys11->__get(_g);
HXDLIN( 598)							_g = (_g + 1);
HXDLIN( 598)							action->addKey(key,state);
            						}
            					}
HXDLIN( 598)					{
HXLINE( 598)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 598)						int state1 = 2;
HXDLIN( 598)						int _g1 = 0;
HXDLIN( 598)						while((_g1 < keys11->length)){
HXLINE( 598)							int key = keys11->__get(_g1);
HXDLIN( 598)							_g1 = (_g1 + 1);
HXDLIN( 598)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 598)					{
HXLINE( 598)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 598)						int state2 = -1;
HXDLIN( 598)						int _g2 = 0;
HXDLIN( 598)						while((_g2 < keys11->length)){
HXLINE( 598)							int key = keys11->__get(_g2);
HXDLIN( 598)							_g2 = (_g2 + 1);
HXDLIN( 598)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 598)					{
HXLINE( 598)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 598)						int state = 1;
HXDLIN( 598)						int _g = 0;
HXDLIN( 598)						while((_g < keys11->length)){
HXLINE( 598)							int key = keys11->__get(_g);
HXDLIN( 598)							_g = (_g + 1);
HXDLIN( 598)							action->addKey(key,state);
            						}
            					}
HXDLIN( 598)					{
HXLINE( 598)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 598)						int state1 = 2;
HXDLIN( 598)						int _g1 = 0;
HXDLIN( 598)						while((_g1 < keys11->length)){
HXLINE( 598)							int key = keys11->__get(_g1);
HXDLIN( 598)							_g1 = (_g1 + 1);
HXDLIN( 598)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 598)					{
HXLINE( 598)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 598)						int state2 = -1;
HXDLIN( 598)						int _g2 = 0;
HXDLIN( 598)						while((_g2 < keys11->length)){
HXLINE( 598)							int key = keys11->__get(_g2);
HXDLIN( 598)							_g2 = (_g2 + 1);
HXDLIN( 598)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 598)					{
HXLINE( 598)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 598)						int state = 1;
HXDLIN( 598)						int _g = 0;
HXDLIN( 598)						while((_g < keys11->length)){
HXLINE( 598)							int key = keys11->__get(_g);
HXDLIN( 598)							_g = (_g + 1);
HXDLIN( 598)							action->addKey(key,state);
            						}
            					}
HXDLIN( 598)					{
HXLINE( 598)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 598)						int state1 = 2;
HXDLIN( 598)						int _g1 = 0;
HXDLIN( 598)						while((_g1 < keys11->length)){
HXLINE( 598)							int key = keys11->__get(_g1);
HXDLIN( 598)							_g1 = (_g1 + 1);
HXDLIN( 598)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 598)					{
HXLINE( 598)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 598)						int state2 = -1;
HXDLIN( 598)						int _g2 = 0;
HXDLIN( 598)						while((_g2 < keys11->length)){
HXLINE( 598)							int key = keys11->__get(_g2);
HXDLIN( 598)							_g2 = (_g2 + 1);
HXDLIN( 598)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 598)					{
HXLINE( 598)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 598)						int state = 1;
HXDLIN( 598)						int _g = 0;
HXDLIN( 598)						while((_g < keys11->length)){
HXLINE( 598)							int key = keys11->__get(_g);
HXDLIN( 598)							_g = (_g + 1);
HXDLIN( 598)							action->addKey(key,state);
            						}
            					}
HXDLIN( 598)					{
HXLINE( 598)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 598)						int state1 = 2;
HXDLIN( 598)						int _g1 = 0;
HXDLIN( 598)						while((_g1 < keys11->length)){
HXLINE( 598)							int key = keys11->__get(_g1);
HXDLIN( 598)							_g1 = (_g1 + 1);
HXDLIN( 598)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 598)					{
HXLINE( 598)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 598)						int state2 = -1;
HXDLIN( 598)						int _g2 = 0;
HXDLIN( 598)						while((_g2 < keys11->length)){
HXLINE( 598)							int key = keys11->__get(_g2);
HXDLIN( 598)							_g2 = (_g2 + 1);
HXDLIN( 598)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 598)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 598)					int state = 2;
HXDLIN( 598)					int _g = 0;
HXDLIN( 598)					while((_g < keys11->length)){
HXLINE( 598)						int key = keys11->__get(_g);
HXDLIN( 598)						_g = (_g + 1);
HXDLIN( 598)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 598)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 598)					int state = 2;
HXDLIN( 598)					int _g = 0;
HXDLIN( 598)					while((_g < keys11->length)){
HXLINE( 598)						int key = keys11->__get(_g);
HXDLIN( 598)						_g = (_g + 1);
HXDLIN( 598)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 598)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 598)					int state = 2;
HXDLIN( 598)					int _g = 0;
HXDLIN( 598)					while((_g < keys11->length)){
HXLINE( 598)						int key = keys11->__get(_g);
HXDLIN( 598)						_g = (_g + 1);
HXDLIN( 598)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 598)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 598)					int state = 2;
HXDLIN( 598)					int _g = 0;
HXDLIN( 598)					while((_g < keys11->length)){
HXLINE( 598)						int key = keys11->__get(_g);
HXDLIN( 598)						_g = (_g + 1);
HXDLIN( 598)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 598)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 598)					int state = 2;
HXDLIN( 598)					int _g = 0;
HXDLIN( 598)					while((_g < keys11->length)){
HXLINE( 598)						int key = keys11->__get(_g);
HXDLIN( 598)						_g = (_g + 1);
HXDLIN( 598)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 599)		{
HXLINE( 599)			::String s5 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("resetBind",2c,ff,02,87),::hx::paccDynamic)) );
HXDLIN( 599)			s5 = s5.toUpperCase();
HXDLIN( 599)			int keys12;
HXDLIN( 599)			if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s5)) {
HXLINE( 599)				keys12 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s5);
            			}
            			else {
HXLINE( 599)				keys12 = -1;
            			}
HXDLIN( 599)			::Array< int > keys13 = ::Array_obj< int >::__new(1)->init(0,keys12);
HXDLIN( 599)			switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 599)					{
HXLINE( 599)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 599)						int state = 1;
HXDLIN( 599)						int _g = 0;
HXDLIN( 599)						while((_g < keys13->length)){
HXLINE( 599)							int key = keys13->__get(_g);
HXDLIN( 599)							_g = (_g + 1);
HXDLIN( 599)							action->addKey(key,state);
            						}
            					}
HXDLIN( 599)					{
HXLINE( 599)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 599)						int state1 = 2;
HXDLIN( 599)						int _g1 = 0;
HXDLIN( 599)						while((_g1 < keys13->length)){
HXLINE( 599)							int key = keys13->__get(_g1);
HXDLIN( 599)							_g1 = (_g1 + 1);
HXDLIN( 599)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 599)					{
HXLINE( 599)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 599)						int state2 = -1;
HXDLIN( 599)						int _g2 = 0;
HXDLIN( 599)						while((_g2 < keys13->length)){
HXLINE( 599)							int key = keys13->__get(_g2);
HXDLIN( 599)							_g2 = (_g2 + 1);
HXDLIN( 599)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 599)					{
HXLINE( 599)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 599)						int state = 1;
HXDLIN( 599)						int _g = 0;
HXDLIN( 599)						while((_g < keys13->length)){
HXLINE( 599)							int key = keys13->__get(_g);
HXDLIN( 599)							_g = (_g + 1);
HXDLIN( 599)							action->addKey(key,state);
            						}
            					}
HXDLIN( 599)					{
HXLINE( 599)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 599)						int state1 = 2;
HXDLIN( 599)						int _g1 = 0;
HXDLIN( 599)						while((_g1 < keys13->length)){
HXLINE( 599)							int key = keys13->__get(_g1);
HXDLIN( 599)							_g1 = (_g1 + 1);
HXDLIN( 599)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 599)					{
HXLINE( 599)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 599)						int state2 = -1;
HXDLIN( 599)						int _g2 = 0;
HXDLIN( 599)						while((_g2 < keys13->length)){
HXLINE( 599)							int key = keys13->__get(_g2);
HXDLIN( 599)							_g2 = (_g2 + 1);
HXDLIN( 599)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 599)					{
HXLINE( 599)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 599)						int state = 1;
HXDLIN( 599)						int _g = 0;
HXDLIN( 599)						while((_g < keys13->length)){
HXLINE( 599)							int key = keys13->__get(_g);
HXDLIN( 599)							_g = (_g + 1);
HXDLIN( 599)							action->addKey(key,state);
            						}
            					}
HXDLIN( 599)					{
HXLINE( 599)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 599)						int state1 = 2;
HXDLIN( 599)						int _g1 = 0;
HXDLIN( 599)						while((_g1 < keys13->length)){
HXLINE( 599)							int key = keys13->__get(_g1);
HXDLIN( 599)							_g1 = (_g1 + 1);
HXDLIN( 599)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 599)					{
HXLINE( 599)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 599)						int state2 = -1;
HXDLIN( 599)						int _g2 = 0;
HXDLIN( 599)						while((_g2 < keys13->length)){
HXLINE( 599)							int key = keys13->__get(_g2);
HXDLIN( 599)							_g2 = (_g2 + 1);
HXDLIN( 599)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 599)					{
HXLINE( 599)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 599)						int state = 1;
HXDLIN( 599)						int _g = 0;
HXDLIN( 599)						while((_g < keys13->length)){
HXLINE( 599)							int key = keys13->__get(_g);
HXDLIN( 599)							_g = (_g + 1);
HXDLIN( 599)							action->addKey(key,state);
            						}
            					}
HXDLIN( 599)					{
HXLINE( 599)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 599)						int state1 = 2;
HXDLIN( 599)						int _g1 = 0;
HXDLIN( 599)						while((_g1 < keys13->length)){
HXLINE( 599)							int key = keys13->__get(_g1);
HXDLIN( 599)							_g1 = (_g1 + 1);
HXDLIN( 599)							action1->addKey(key,state1);
            						}
            					}
HXDLIN( 599)					{
HXLINE( 599)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 599)						int state2 = -1;
HXDLIN( 599)						int _g2 = 0;
HXDLIN( 599)						while((_g2 < keys13->length)){
HXLINE( 599)							int key = keys13->__get(_g2);
HXDLIN( 599)							_g2 = (_g2 + 1);
HXDLIN( 599)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 599)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 599)					int state = 2;
HXDLIN( 599)					int _g = 0;
HXDLIN( 599)					while((_g < keys13->length)){
HXLINE( 599)						int key = keys13->__get(_g);
HXDLIN( 599)						_g = (_g + 1);
HXDLIN( 599)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 599)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 599)					int state = 2;
HXDLIN( 599)					int _g = 0;
HXDLIN( 599)					while((_g < keys13->length)){
HXLINE( 599)						int key = keys13->__get(_g);
HXDLIN( 599)						_g = (_g + 1);
HXDLIN( 599)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 599)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 599)					int state = 2;
HXDLIN( 599)					int _g = 0;
HXDLIN( 599)					while((_g < keys13->length)){
HXLINE( 599)						int key = keys13->__get(_g);
HXDLIN( 599)						_g = (_g + 1);
HXDLIN( 599)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 599)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 599)					int state = 2;
HXDLIN( 599)					int _g = 0;
HXDLIN( 599)					while((_g < keys13->length)){
HXLINE( 599)						int key = keys13->__get(_g);
HXDLIN( 599)						_g = (_g + 1);
HXDLIN( 599)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 599)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 599)					int state = 2;
HXDLIN( 599)					int _g = 0;
HXDLIN( 599)					while((_g < keys13->length)){
HXLINE( 599)						int key = keys13->__get(_g);
HXDLIN( 599)						_g = (_g + 1);
HXDLIN( 599)						action->addKey(key,state);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 602)		::flixel::FlxG_obj::sound->muteKeys = ::TitleState_obj::muteKeys;
HXLINE( 603)		::flixel::FlxG_obj::sound->volumeDownKeys = ::TitleState_obj::volumeDownKeys;
HXLINE( 604)		::flixel::FlxG_obj::sound->volumeUpKeys = ::TitleState_obj::volumeUpKeys;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,loadKeyBinds,(void))

void Controls_obj::removeKeyboard(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_609_removeKeyboard)
HXDLIN( 609)		int _g = 0;
HXDLIN( 609)		::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN( 609)		while((_g < _g1->length)){
HXDLIN( 609)			 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN( 609)			_g = (_g + 1);
HXLINE( 611)			int i = action->inputs->length;
HXLINE( 612)			while(true){
HXLINE( 612)				i = (i - 1);
HXDLIN( 612)				if (!(((i + 1) > 0))) {
HXLINE( 612)					goto _hx_goto_145;
            				}
HXLINE( 614)				 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 615)				if (::hx::IsEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() )) {
HXLINE( 616)					action->remove(input,null());
            				}
            			}
            			_hx_goto_145:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,removeKeyboard,(void))

void Controls_obj::addGamepad(int id, ::haxe::ds::EnumValueMap buttonMap){
            	HX_GC_STACKFRAME(&_hx_pos_948b5caa279cd923_622_addGamepad)
HXLINE( 623)		if (this->gamepadsAdded->contains(id)) {
HXLINE( 624)			this->gamepadsAdded->remove(id);
            		}
HXLINE( 626)		this->gamepadsAdded->push(id);
HXLINE( 629)		{
HXLINE( 629)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,buttonMap);
HXDLIN( 629)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 629)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 629)				 ::Control control = _g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic);
HXDLIN( 629)				::Array< int > buttons = ( (::Array< int >)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE( 630)				{
HXLINE( 630)					int id1 = id;
HXDLIN( 630)					::Array< int > buttons1 = buttons;
HXDLIN( 630)					switch((int)(control->_hx_getIndex())){
            						case (int)0: {
HXLINE( 630)							{
HXLINE( 630)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 630)								int state = 1;
HXDLIN( 630)								int _g = 0;
HXDLIN( 630)								while((_g < buttons1->length)){
HXLINE( 630)									int button = buttons1->__get(_g);
HXDLIN( 630)									_g = (_g + 1);
HXDLIN( 630)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 630)							{
HXLINE( 630)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 630)								int state1 = 2;
HXDLIN( 630)								int _g1 = 0;
HXDLIN( 630)								while((_g1 < buttons1->length)){
HXLINE( 630)									int button = buttons1->__get(_g1);
HXDLIN( 630)									_g1 = (_g1 + 1);
HXDLIN( 630)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 630)							{
HXLINE( 630)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 630)								int state2 = -1;
HXDLIN( 630)								int _g2 = 0;
HXDLIN( 630)								while((_g2 < buttons1->length)){
HXLINE( 630)									int button = buttons1->__get(_g2);
HXDLIN( 630)									_g2 = (_g2 + 1);
HXDLIN( 630)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 630)							{
HXLINE( 630)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 630)								int state = 1;
HXDLIN( 630)								int _g = 0;
HXDLIN( 630)								while((_g < buttons1->length)){
HXLINE( 630)									int button = buttons1->__get(_g);
HXDLIN( 630)									_g = (_g + 1);
HXDLIN( 630)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 630)							{
HXLINE( 630)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 630)								int state1 = 2;
HXDLIN( 630)								int _g1 = 0;
HXDLIN( 630)								while((_g1 < buttons1->length)){
HXLINE( 630)									int button = buttons1->__get(_g1);
HXDLIN( 630)									_g1 = (_g1 + 1);
HXDLIN( 630)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 630)							{
HXLINE( 630)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 630)								int state2 = -1;
HXDLIN( 630)								int _g2 = 0;
HXDLIN( 630)								while((_g2 < buttons1->length)){
HXLINE( 630)									int button = buttons1->__get(_g2);
HXDLIN( 630)									_g2 = (_g2 + 1);
HXDLIN( 630)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 630)							{
HXLINE( 630)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 630)								int state = 1;
HXDLIN( 630)								int _g = 0;
HXDLIN( 630)								while((_g < buttons1->length)){
HXLINE( 630)									int button = buttons1->__get(_g);
HXDLIN( 630)									_g = (_g + 1);
HXDLIN( 630)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 630)							{
HXLINE( 630)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 630)								int state1 = 2;
HXDLIN( 630)								int _g1 = 0;
HXDLIN( 630)								while((_g1 < buttons1->length)){
HXLINE( 630)									int button = buttons1->__get(_g1);
HXDLIN( 630)									_g1 = (_g1 + 1);
HXDLIN( 630)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 630)							{
HXLINE( 630)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 630)								int state2 = -1;
HXDLIN( 630)								int _g2 = 0;
HXDLIN( 630)								while((_g2 < buttons1->length)){
HXLINE( 630)									int button = buttons1->__get(_g2);
HXDLIN( 630)									_g2 = (_g2 + 1);
HXDLIN( 630)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 630)							{
HXLINE( 630)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 630)								int state = 1;
HXDLIN( 630)								int _g = 0;
HXDLIN( 630)								while((_g < buttons1->length)){
HXLINE( 630)									int button = buttons1->__get(_g);
HXDLIN( 630)									_g = (_g + 1);
HXDLIN( 630)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 630)							{
HXLINE( 630)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 630)								int state1 = 2;
HXDLIN( 630)								int _g1 = 0;
HXDLIN( 630)								while((_g1 < buttons1->length)){
HXLINE( 630)									int button = buttons1->__get(_g1);
HXDLIN( 630)									_g1 = (_g1 + 1);
HXDLIN( 630)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 630)							{
HXLINE( 630)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 630)								int state2 = -1;
HXDLIN( 630)								int _g2 = 0;
HXDLIN( 630)								while((_g2 < buttons1->length)){
HXLINE( 630)									int button = buttons1->__get(_g2);
HXDLIN( 630)									_g2 = (_g2 + 1);
HXDLIN( 630)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 630)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 630)							int state = 2;
HXDLIN( 630)							int _g = 0;
HXDLIN( 630)							while((_g < buttons1->length)){
HXLINE( 630)								int button = buttons1->__get(_g);
HXDLIN( 630)								_g = (_g + 1);
HXDLIN( 630)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 630)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 630)							int state = 2;
HXDLIN( 630)							int _g = 0;
HXDLIN( 630)							while((_g < buttons1->length)){
HXLINE( 630)								int button = buttons1->__get(_g);
HXDLIN( 630)								_g = (_g + 1);
HXDLIN( 630)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 630)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 630)							int state = 2;
HXDLIN( 630)							int _g = 0;
HXDLIN( 630)							while((_g < buttons1->length)){
HXLINE( 630)								int button = buttons1->__get(_g);
HXDLIN( 630)								_g = (_g + 1);
HXDLIN( 630)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 630)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 630)							int state = 2;
HXDLIN( 630)							int _g = 0;
HXDLIN( 630)							while((_g < buttons1->length)){
HXLINE( 630)								int button = buttons1->__get(_g);
HXDLIN( 630)								_g = (_g + 1);
HXDLIN( 630)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 630)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 630)							int state = 2;
HXDLIN( 630)							int _g = 0;
HXDLIN( 630)							while((_g < buttons1->length)){
HXLINE( 630)								int button = buttons1->__get(_g);
HXDLIN( 630)								_g = (_g + 1);
HXDLIN( 630)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,addGamepad,(void))

void Controls_obj::removeGamepad(::hx::Null< int >  __o_deviceID){
            		int deviceID = __o_deviceID.Default(-1);
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_651_removeGamepad)
HXLINE( 652)		{
HXLINE( 652)			int _g = 0;
HXDLIN( 652)			::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN( 652)			while((_g < _g1->length)){
HXLINE( 652)				 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN( 652)				_g = (_g + 1);
HXLINE( 654)				int i = action->inputs->length;
HXLINE( 655)				while(true){
HXLINE( 655)					i = (i - 1);
HXDLIN( 655)					if (!(((i + 1) > 0))) {
HXLINE( 655)						goto _hx_goto_167;
            					}
HXLINE( 657)					 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 658)					bool _hx_tmp;
HXDLIN( 658)					if (::hx::IsEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXLINE( 658)						if ((deviceID != -1)) {
HXLINE( 658)							_hx_tmp = (input->deviceID == deviceID);
            						}
            						else {
HXLINE( 658)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 658)						_hx_tmp = false;
            					}
HXDLIN( 658)					if (_hx_tmp) {
HXLINE( 659)						action->remove(input,null());
            					}
            				}
            				_hx_goto_167:;
            			}
            		}
HXLINE( 663)		this->gamepadsAdded->remove(deviceID);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,removeGamepad,(void))

void Controls_obj::addDefaultGamepad(int id){
            	HX_GC_STACKFRAME(&_hx_pos_948b5caa279cd923_669_addDefaultGamepad)
HXDLIN( 669)		 ::haxe::ds::EnumValueMap _g =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN( 669)		_g->set(::Control_obj::ACCEPT_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_188,1));
HXDLIN( 669)		_g->set(::Control_obj::BACK_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_189,1));
HXDLIN( 669)		_g->set(::Control_obj::UP_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_190,2));
HXDLIN( 669)		_g->set(::Control_obj::DOWN_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_191,2));
HXDLIN( 669)		_g->set(::Control_obj::LEFT_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_192,2));
HXDLIN( 669)		_g->set(::Control_obj::RIGHT_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_193,2));
HXDLIN( 669)		_g->set(::Control_obj::PAUSE_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_194,1));
HXDLIN( 669)		_g->set(::Control_obj::RESET_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_195,1));
HXDLIN( 669)		this->gamepadsAdded->push(id);
HXDLIN( 669)		{
HXDLIN( 669)			 ::Dynamic _g1 =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,_g);
HXDLIN( 669)			while(( (bool)(_g1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN( 669)				 ::Dynamic _g = _g1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 669)				 ::Control control = _g->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic);
HXDLIN( 669)				::Array< int > buttons = ( (::Array< int >)(_g->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXDLIN( 669)				{
HXDLIN( 669)					int id1 = id;
HXDLIN( 669)					::Array< int > buttons1 = buttons;
HXDLIN( 669)					switch((int)(control->_hx_getIndex())){
            						case (int)0: {
HXDLIN( 669)							{
HXDLIN( 669)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 669)								int state = 1;
HXDLIN( 669)								int _g = 0;
HXDLIN( 669)								while((_g < buttons1->length)){
HXDLIN( 669)									int button = buttons1->__get(_g);
HXDLIN( 669)									_g = (_g + 1);
HXDLIN( 669)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 669)							{
HXDLIN( 669)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 669)								int state1 = 2;
HXDLIN( 669)								int _g1 = 0;
HXDLIN( 669)								while((_g1 < buttons1->length)){
HXDLIN( 669)									int button = buttons1->__get(_g1);
HXDLIN( 669)									_g1 = (_g1 + 1);
HXDLIN( 669)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 669)							{
HXDLIN( 669)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 669)								int state2 = -1;
HXDLIN( 669)								int _g2 = 0;
HXDLIN( 669)								while((_g2 < buttons1->length)){
HXDLIN( 669)									int button = buttons1->__get(_g2);
HXDLIN( 669)									_g2 = (_g2 + 1);
HXDLIN( 669)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXDLIN( 669)							{
HXDLIN( 669)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 669)								int state = 1;
HXDLIN( 669)								int _g = 0;
HXDLIN( 669)								while((_g < buttons1->length)){
HXDLIN( 669)									int button = buttons1->__get(_g);
HXDLIN( 669)									_g = (_g + 1);
HXDLIN( 669)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 669)							{
HXDLIN( 669)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 669)								int state1 = 2;
HXDLIN( 669)								int _g1 = 0;
HXDLIN( 669)								while((_g1 < buttons1->length)){
HXDLIN( 669)									int button = buttons1->__get(_g1);
HXDLIN( 669)									_g1 = (_g1 + 1);
HXDLIN( 669)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 669)							{
HXDLIN( 669)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 669)								int state2 = -1;
HXDLIN( 669)								int _g2 = 0;
HXDLIN( 669)								while((_g2 < buttons1->length)){
HXDLIN( 669)									int button = buttons1->__get(_g2);
HXDLIN( 669)									_g2 = (_g2 + 1);
HXDLIN( 669)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXDLIN( 669)							{
HXDLIN( 669)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 669)								int state = 1;
HXDLIN( 669)								int _g = 0;
HXDLIN( 669)								while((_g < buttons1->length)){
HXDLIN( 669)									int button = buttons1->__get(_g);
HXDLIN( 669)									_g = (_g + 1);
HXDLIN( 669)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 669)							{
HXDLIN( 669)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 669)								int state1 = 2;
HXDLIN( 669)								int _g1 = 0;
HXDLIN( 669)								while((_g1 < buttons1->length)){
HXDLIN( 669)									int button = buttons1->__get(_g1);
HXDLIN( 669)									_g1 = (_g1 + 1);
HXDLIN( 669)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 669)							{
HXDLIN( 669)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 669)								int state2 = -1;
HXDLIN( 669)								int _g2 = 0;
HXDLIN( 669)								while((_g2 < buttons1->length)){
HXDLIN( 669)									int button = buttons1->__get(_g2);
HXDLIN( 669)									_g2 = (_g2 + 1);
HXDLIN( 669)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXDLIN( 669)							{
HXDLIN( 669)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 669)								int state = 1;
HXDLIN( 669)								int _g = 0;
HXDLIN( 669)								while((_g < buttons1->length)){
HXDLIN( 669)									int button = buttons1->__get(_g);
HXDLIN( 669)									_g = (_g + 1);
HXDLIN( 669)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 669)							{
HXDLIN( 669)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 669)								int state1 = 2;
HXDLIN( 669)								int _g1 = 0;
HXDLIN( 669)								while((_g1 < buttons1->length)){
HXDLIN( 669)									int button = buttons1->__get(_g1);
HXDLIN( 669)									_g1 = (_g1 + 1);
HXDLIN( 669)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 669)							{
HXDLIN( 669)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 669)								int state2 = -1;
HXDLIN( 669)								int _g2 = 0;
HXDLIN( 669)								while((_g2 < buttons1->length)){
HXDLIN( 669)									int button = buttons1->__get(_g2);
HXDLIN( 669)									_g2 = (_g2 + 1);
HXDLIN( 669)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXDLIN( 669)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 669)							int state = 2;
HXDLIN( 669)							int _g = 0;
HXDLIN( 669)							while((_g < buttons1->length)){
HXDLIN( 669)								int button = buttons1->__get(_g);
HXDLIN( 669)								_g = (_g + 1);
HXDLIN( 669)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)5: {
HXDLIN( 669)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 669)							int state = 2;
HXDLIN( 669)							int _g = 0;
HXDLIN( 669)							while((_g < buttons1->length)){
HXDLIN( 669)								int button = buttons1->__get(_g);
HXDLIN( 669)								_g = (_g + 1);
HXDLIN( 669)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)6: {
HXDLIN( 669)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 669)							int state = 2;
HXDLIN( 669)							int _g = 0;
HXDLIN( 669)							while((_g < buttons1->length)){
HXDLIN( 669)								int button = buttons1->__get(_g);
HXDLIN( 669)								_g = (_g + 1);
HXDLIN( 669)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)7: {
HXDLIN( 669)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 669)							int state = 2;
HXDLIN( 669)							int _g = 0;
HXDLIN( 669)							while((_g < buttons1->length)){
HXDLIN( 669)								int button = buttons1->__get(_g);
HXDLIN( 669)								_g = (_g + 1);
HXDLIN( 669)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)8: {
HXDLIN( 669)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 669)							int state = 2;
HXDLIN( 669)							int _g = 0;
HXDLIN( 669)							while((_g < buttons1->length)){
HXDLIN( 669)								int button = buttons1->__get(_g);
HXDLIN( 669)								_g = (_g + 1);
HXDLIN( 669)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,addDefaultGamepad,(void))


::hx::ObjectPtr< Controls_obj > Controls_obj::__new(::String name, ::KeyboardScheme __o_scheme) {
	::hx::ObjectPtr< Controls_obj > __this = new Controls_obj();
	__this->__construct(name,__o_scheme);
	return __this;
}

::hx::ObjectPtr< Controls_obj > Controls_obj::__alloc(::hx::Ctx *_hx_ctx,::String name, ::KeyboardScheme __o_scheme) {
	Controls_obj *__this = (Controls_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Controls_obj), true, "Controls"));
	*(void **)__this = Controls_obj::_hx_vtable;
	__this->__construct(name,__o_scheme);
	return __this;
}

Controls_obj::Controls_obj()
{
}

void Controls_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Controls);
	HX_MARK_MEMBER_NAME(_up,"_up");
	HX_MARK_MEMBER_NAME(_left,"_left");
	HX_MARK_MEMBER_NAME(_right,"_right");
	HX_MARK_MEMBER_NAME(_down,"_down");
	HX_MARK_MEMBER_NAME(_upP,"_upP");
	HX_MARK_MEMBER_NAME(_leftP,"_leftP");
	HX_MARK_MEMBER_NAME(_rightP,"_rightP");
	HX_MARK_MEMBER_NAME(_downP,"_downP");
	HX_MARK_MEMBER_NAME(_upR,"_upR");
	HX_MARK_MEMBER_NAME(_leftR,"_leftR");
	HX_MARK_MEMBER_NAME(_rightR,"_rightR");
	HX_MARK_MEMBER_NAME(_downR,"_downR");
	HX_MARK_MEMBER_NAME(_accept,"_accept");
	HX_MARK_MEMBER_NAME(_back,"_back");
	HX_MARK_MEMBER_NAME(_pause,"_pause");
	HX_MARK_MEMBER_NAME(_reset,"_reset");
	HX_MARK_MEMBER_NAME(_cheat,"_cheat");
	HX_MARK_MEMBER_NAME(byName,"byName");
	HX_MARK_MEMBER_NAME(gamepadsAdded,"gamepadsAdded");
	 ::flixel::input::actions::FlxActionSet_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Controls_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_up,"_up");
	HX_VISIT_MEMBER_NAME(_left,"_left");
	HX_VISIT_MEMBER_NAME(_right,"_right");
	HX_VISIT_MEMBER_NAME(_down,"_down");
	HX_VISIT_MEMBER_NAME(_upP,"_upP");
	HX_VISIT_MEMBER_NAME(_leftP,"_leftP");
	HX_VISIT_MEMBER_NAME(_rightP,"_rightP");
	HX_VISIT_MEMBER_NAME(_downP,"_downP");
	HX_VISIT_MEMBER_NAME(_upR,"_upR");
	HX_VISIT_MEMBER_NAME(_leftR,"_leftR");
	HX_VISIT_MEMBER_NAME(_rightR,"_rightR");
	HX_VISIT_MEMBER_NAME(_downR,"_downR");
	HX_VISIT_MEMBER_NAME(_accept,"_accept");
	HX_VISIT_MEMBER_NAME(_back,"_back");
	HX_VISIT_MEMBER_NAME(_pause,"_pause");
	HX_VISIT_MEMBER_NAME(_reset,"_reset");
	HX_VISIT_MEMBER_NAME(_cheat,"_cheat");
	HX_VISIT_MEMBER_NAME(byName,"byName");
	HX_VISIT_MEMBER_NAME(gamepadsAdded,"gamepadsAdded");
	 ::flixel::input::actions::FlxActionSet_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Controls_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_up") ) { return ::hx::Val( _up ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_upP") ) { return ::hx::Val( _upP ); }
		if (HX_FIELD_EQ(inName,"_upR") ) { return ::hx::Val( _upR ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { return ::hx::Val( _left ); }
		if (HX_FIELD_EQ(inName,"_down") ) { return ::hx::Val( _down ); }
		if (HX_FIELD_EQ(inName,"_back") ) { return ::hx::Val( _back ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { return ::hx::Val( _right ); }
		if (HX_FIELD_EQ(inName,"_leftP") ) { return ::hx::Val( _leftP ); }
		if (HX_FIELD_EQ(inName,"_downP") ) { return ::hx::Val( _downP ); }
		if (HX_FIELD_EQ(inName,"_leftR") ) { return ::hx::Val( _leftR ); }
		if (HX_FIELD_EQ(inName,"_downR") ) { return ::hx::Val( _downR ); }
		if (HX_FIELD_EQ(inName,"_pause") ) { return ::hx::Val( _pause ); }
		if (HX_FIELD_EQ(inName,"_reset") ) { return ::hx::Val( _reset ); }
		if (HX_FIELD_EQ(inName,"_cheat") ) { return ::hx::Val( _cheat ); }
		if (HX_FIELD_EQ(inName,"byName") ) { return ::hx::Val( byName ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_rightP") ) { return ::hx::Val( _rightP ); }
		if (HX_FIELD_EQ(inName,"_rightR") ) { return ::hx::Val( _rightR ); }
		if (HX_FIELD_EQ(inName,"_accept") ) { return ::hx::Val( _accept ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addGamepad") ) { return ::hx::Val( addGamepad_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadKeyBinds") ) { return ::hx::Val( loadKeyBinds_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gamepadsAdded") ) { return ::hx::Val( gamepadsAdded ); }
		if (HX_FIELD_EQ(inName,"removeGamepad") ) { return ::hx::Val( removeGamepad_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"removeKeyboard") ) { return ::hx::Val( removeKeyboard_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setKeyboardScheme") ) { return ::hx::Val( setKeyboardScheme_dyn() ); }
		if (HX_FIELD_EQ(inName,"addDefaultGamepad") ) { return ::hx::Val( addDefaultGamepad_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Controls_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_up") ) { _up=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_upP") ) { _upP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_upR") ) { _upR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { _left=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_down") ) { _down=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_back") ) { _back=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { _right=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftP") ) { _leftP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_downP") ) { _downP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftR") ) { _leftR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_downR") ) { _downR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pause") ) { _pause=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_reset") ) { _reset=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_cheat") ) { _cheat=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"byName") ) { byName=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_rightP") ) { _rightP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rightR") ) { _rightR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_accept") ) { _accept=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gamepadsAdded") ) { gamepadsAdded=inValue.Cast< ::Array< int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Controls_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_up",7a,7c,48,00));
	outFields->push(HX_("_left",e6,23,c1,fa));
	outFields->push(HX_("_right",1d,53,4b,e5));
	outFields->push(HX_("_down",41,14,7f,f5));
	outFields->push(HX_("_upP",96,6e,24,3f));
	outFields->push(HX_("_leftP",aa,45,3e,6e));
	outFields->push(HX_("_rightP",93,66,9d,bc));
	outFields->push(HX_("_downP",ef,a4,b2,d9));
	outFields->push(HX_("_upR",98,6e,24,3f));
	outFields->push(HX_("_leftR",ac,45,3e,6e));
	outFields->push(HX_("_rightR",95,66,9d,bc));
	outFields->push(HX_("_downR",f1,a4,b2,d9));
	outFields->push(HX_("_accept",a7,a4,7d,79));
	outFields->push(HX_("_back",06,f6,21,f4));
	outFields->push(HX_("_pause",37,1e,3f,b9));
	outFields->push(HX_("_reset",10,91,af,e2));
	outFields->push(HX_("_cheat",54,de,9d,41));
	outFields->push(HX_("byName",c2,2b,4e,0e));
	outFields->push(HX_("gamepadsAdded",ae,52,a9,94));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Controls_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_up),HX_("_up",7a,7c,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_left),HX_("_left",e6,23,c1,fa)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_right),HX_("_right",1d,53,4b,e5)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_down),HX_("_down",41,14,7f,f5)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_upP),HX_("_upP",96,6e,24,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_leftP),HX_("_leftP",aa,45,3e,6e)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_rightP),HX_("_rightP",93,66,9d,bc)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_downP),HX_("_downP",ef,a4,b2,d9)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_upR),HX_("_upR",98,6e,24,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_leftR),HX_("_leftR",ac,45,3e,6e)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_rightR),HX_("_rightR",95,66,9d,bc)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_downR),HX_("_downR",f1,a4,b2,d9)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_accept),HX_("_accept",a7,a4,7d,79)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_back),HX_("_back",06,f6,21,f4)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_pause),HX_("_pause",37,1e,3f,b9)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_reset),HX_("_reset",10,91,af,e2)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_cheat),HX_("_cheat",54,de,9d,41)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Controls_obj,byName),HX_("byName",c2,2b,4e,0e)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Controls_obj,gamepadsAdded),HX_("gamepadsAdded",ae,52,a9,94)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Controls_obj_sStaticStorageInfo = 0;
#endif

static ::String Controls_obj_sMemberFields[] = {
	HX_("_up",7a,7c,48,00),
	HX_("_left",e6,23,c1,fa),
	HX_("_right",1d,53,4b,e5),
	HX_("_down",41,14,7f,f5),
	HX_("_upP",96,6e,24,3f),
	HX_("_leftP",aa,45,3e,6e),
	HX_("_rightP",93,66,9d,bc),
	HX_("_downP",ef,a4,b2,d9),
	HX_("_upR",98,6e,24,3f),
	HX_("_leftR",ac,45,3e,6e),
	HX_("_rightR",95,66,9d,bc),
	HX_("_downR",f1,a4,b2,d9),
	HX_("_accept",a7,a4,7d,79),
	HX_("_back",06,f6,21,f4),
	HX_("_pause",37,1e,3f,b9),
	HX_("_reset",10,91,af,e2),
	HX_("_cheat",54,de,9d,41),
	HX_("byName",c2,2b,4e,0e),
	HX_("gamepadsAdded",ae,52,a9,94),
	HX_("setKeyboardScheme",6e,4f,d6,5b),
	HX_("loadKeyBinds",3d,a2,d2,b0),
	HX_("removeKeyboard",0b,f9,7f,32),
	HX_("addGamepad",80,0c,10,f1),
	HX_("removeGamepad",bd,3c,40,62),
	HX_("addDefaultGamepad",e1,d7,98,02),
	::String(null()) };

::hx::Class Controls_obj::__mClass;

void Controls_obj::__register()
{
	Controls_obj _hx_dummy;
	Controls_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Controls",96,42,6e,11);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Controls_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Controls_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Controls_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Controls_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

