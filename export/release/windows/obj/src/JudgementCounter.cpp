// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_JudgementCounter
#include <JudgementCounter.h>
#endif
#ifndef INCLUDED_Option
#include <Option.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_01e1add64facc2ce_1811_new,"JudgementCounter","new",0x70de7759,"JudgementCounter.new","Options.hx",1811,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_01e1add64facc2ce_1820_left,"JudgementCounter","left",0x50777aee,"JudgementCounter.left","Options.hx",1820,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_01e1add64facc2ce_1829_right,"JudgementCounter","right",0x8f212315,"JudgementCounter.right","Options.hx",1829,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_01e1add64facc2ce_1836_updateDisplay,"JudgementCounter","updateDisplay",0x59a50772,"JudgementCounter.updateDisplay","Options.hx",1836,0x9d9a0240)

void JudgementCounter_obj::__construct(::String desc){
            	HX_STACKFRAME(&_hx_pos_01e1add64facc2ce_1811_new)
HXLINE(1812)		super::__construct();
HXLINE(1813)		if (::OptionsMenu_obj::isInPause) {
HXLINE(1814)			this->description = HX_("This option cannot be toggled in the pause menu.",b4,21,dd,c9);
            		}
            		else {
HXLINE(1816)			this->description = desc;
            		}
            	}

Dynamic JudgementCounter_obj::__CreateEmpty() { return new JudgementCounter_obj; }

void *JudgementCounter_obj::_hx_vtable = 0;

Dynamic JudgementCounter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< JudgementCounter_obj > _hx_result = new JudgementCounter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool JudgementCounter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x27a70eb9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x27a70eb9;
	} else {
		return inClassId==(int)0x7de8a78f;
	}
}

bool JudgementCounter_obj::left(){
            	HX_STACKFRAME(&_hx_pos_01e1add64facc2ce_1820_left)
HXLINE(1821)		if (::OptionsMenu_obj::isInPause) {
HXLINE(1822)			return false;
            		}
HXLINE(1823)		::flixel::FlxG_obj::save->data->__SetField(HX_("judgementCounter",c7,fa,f4,d2),!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("judgementCounter",c7,fa,f4,d2),::hx::paccDynamic)) )),::hx::paccDynamic);
HXLINE(1824)		this->display = this->updateDisplay();
HXLINE(1825)		return true;
            	}


bool JudgementCounter_obj::right(){
            	HX_STACKFRAME(&_hx_pos_01e1add64facc2ce_1829_right)
HXLINE(1830)		this->left();
HXLINE(1831)		return true;
            	}


::String JudgementCounter_obj::updateDisplay(){
            	HX_STACKFRAME(&_hx_pos_01e1add64facc2ce_1836_updateDisplay)
HXDLIN(1836)		::String _hx_tmp;
HXDLIN(1836)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("judgementCounter",c7,fa,f4,d2),::hx::paccDynamic)) )) {
HXDLIN(1836)			_hx_tmp = HX_("Enabled",61,2c,82,4b);
            		}
            		else {
HXDLIN(1836)			_hx_tmp = HX_("Disabled",9c,fd,b5,55);
            		}
HXDLIN(1836)		return ((HX_("Judgement Counter: < ",5b,fd,d9,5b) + _hx_tmp) + HX_(" >",1e,1c,00,00));
            	}



::hx::ObjectPtr< JudgementCounter_obj > JudgementCounter_obj::__new(::String desc) {
	::hx::ObjectPtr< JudgementCounter_obj > __this = new JudgementCounter_obj();
	__this->__construct(desc);
	return __this;
}

::hx::ObjectPtr< JudgementCounter_obj > JudgementCounter_obj::__alloc(::hx::Ctx *_hx_ctx,::String desc) {
	JudgementCounter_obj *__this = (JudgementCounter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(JudgementCounter_obj), true, "JudgementCounter"));
	*(void **)__this = JudgementCounter_obj::_hx_vtable;
	__this->__construct(desc);
	return __this;
}

JudgementCounter_obj::JudgementCounter_obj()
{
}

::hx::Val JudgementCounter_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateDisplay") ) { return ::hx::Val( updateDisplay_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *JudgementCounter_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *JudgementCounter_obj_sStaticStorageInfo = 0;
#endif

static ::String JudgementCounter_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("right",dc,0b,64,e9),
	HX_("updateDisplay",39,8f,b8,86),
	::String(null()) };

::hx::Class JudgementCounter_obj::__mClass;

void JudgementCounter_obj::__register()
{
	JudgementCounter_obj _hx_dummy;
	JudgementCounter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("JudgementCounter",e7,d6,ef,ec);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(JudgementCounter_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< JudgementCounter_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = JudgementCounter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = JudgementCounter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

