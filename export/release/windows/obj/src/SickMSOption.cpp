// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Option
#include <Option.h>
#endif
#ifndef INCLUDED_SickMSOption
#include <SickMSOption.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9e99588574acccaa_416_new,"SickMSOption","new",0x1f2d23cb,"SickMSOption.new","Options.hx",416,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_9e99588574acccaa_423_left,"SickMSOption","left",0x26ffb23c,"SickMSOption.left","Options.hx",423,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_9e99588574acccaa_432_right,"SickMSOption","right",0x6fc95007,"SickMSOption.right","Options.hx",432,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_9e99588574acccaa_440_onType,"SickMSOption","onType",0x01c95cee,"SickMSOption.onType","Options.hx",440,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_9e99588574acccaa_446_updateDisplay,"SickMSOption","updateDisplay",0x088e7664,"SickMSOption.updateDisplay","Options.hx",446,0x9d9a0240)

void SickMSOption_obj::__construct(::String desc){
            	HX_STACKFRAME(&_hx_pos_9e99588574acccaa_416_new)
HXLINE( 417)		super::__construct();
HXLINE( 418)		this->description = (desc + HX_(" (Press R to reset)",ec,e4,63,d7));
HXLINE( 419)		this->acceptType = true;
            	}

Dynamic SickMSOption_obj::__CreateEmpty() { return new SickMSOption_obj; }

void *SickMSOption_obj::_hx_vtable = 0;

Dynamic SickMSOption_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SickMSOption_obj > _hx_result = new SickMSOption_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SickMSOption_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x112503e1) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x112503e1;
	} else {
		return inClassId==(int)0x27a70eb9;
	}
}

bool SickMSOption_obj::left(){
            	HX_STACKFRAME(&_hx_pos_9e99588574acccaa_423_left)
HXLINE( 424)		::hx::FieldRef((::flixel::FlxG_obj::save->data).mPtr,HX_("sickMs",c4,fb,de,b1))--;
HXLINE( 425)		if (::hx::IsLess( ::flixel::FlxG_obj::save->data->__Field(HX_("sickMs",c4,fb,de,b1),::hx::paccDynamic),0 )) {
HXLINE( 426)			::flixel::FlxG_obj::save->data->__SetField(HX_("sickMs",c4,fb,de,b1),0,::hx::paccDynamic);
            		}
HXLINE( 427)		this->display = this->updateDisplay();
HXLINE( 428)		return true;
            	}


bool SickMSOption_obj::right(){
            	HX_STACKFRAME(&_hx_pos_9e99588574acccaa_432_right)
HXLINE( 433)		::hx::FieldRef((::flixel::FlxG_obj::save->data).mPtr,HX_("sickMs",c4,fb,de,b1))++;
HXLINE( 434)		this->display = this->updateDisplay();
HXLINE( 435)		return true;
            	}


void SickMSOption_obj::onType(::String _hx_char){
            	HX_STACKFRAME(&_hx_pos_9e99588574acccaa_440_onType)
HXDLIN( 440)		if ((_hx_char.toLowerCase() == HX_("r",72,00,00,00))) {
HXLINE( 441)			::flixel::FlxG_obj::save->data->__SetField(HX_("sickMs",c4,fb,de,b1),45,::hx::paccDynamic);
            		}
            	}


::String SickMSOption_obj::updateDisplay(){
            	HX_STACKFRAME(&_hx_pos_9e99588574acccaa_446_updateDisplay)
HXDLIN( 446)		return ((HX_("SICK: < ",48,68,5f,86) + ::Std_obj::string( ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("sickMs",c4,fb,de,b1),::hx::paccDynamic)))) + HX_(" ms >",24,31,36,b5));
            	}



::hx::ObjectPtr< SickMSOption_obj > SickMSOption_obj::__new(::String desc) {
	::hx::ObjectPtr< SickMSOption_obj > __this = new SickMSOption_obj();
	__this->__construct(desc);
	return __this;
}

::hx::ObjectPtr< SickMSOption_obj > SickMSOption_obj::__alloc(::hx::Ctx *_hx_ctx,::String desc) {
	SickMSOption_obj *__this = (SickMSOption_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SickMSOption_obj), true, "SickMSOption"));
	*(void **)__this = SickMSOption_obj::_hx_vtable;
	__this->__construct(desc);
	return __this;
}

SickMSOption_obj::SickMSOption_obj()
{
}

::hx::Val SickMSOption_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onType") ) { return ::hx::Val( onType_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateDisplay") ) { return ::hx::Val( updateDisplay_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *SickMSOption_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *SickMSOption_obj_sStaticStorageInfo = 0;
#endif

static ::String SickMSOption_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("right",dc,0b,64,e9),
	HX_("onType",79,fb,92,ef),
	HX_("updateDisplay",39,8f,b8,86),
	::String(null()) };

::hx::Class SickMSOption_obj::__mClass;

void SickMSOption_obj::__register()
{
	SickMSOption_obj _hx_dummy;
	SickMSOption_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("SickMSOption",59,e2,ae,c3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SickMSOption_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SickMSOption_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SickMSOption_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SickMSOption_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

