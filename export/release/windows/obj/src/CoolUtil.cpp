// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_d6b1695b4ccb37a6_26_difficultyFromInt,"CoolUtil","difficultyFromInt",0xd0410307,"CoolUtil.difficultyFromInt","CoolUtil.hx",26,0x9f143813)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b1695b4ccb37a6_30_coolTextFile,"CoolUtil","coolTextFile",0xa6086875,"CoolUtil.coolTextFile","CoolUtil.hx",30,0x9f143813)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b1695b4ccb37a6_60_numberArray,"CoolUtil","numberArray",0x9e0008ad,"CoolUtil.numberArray","CoolUtil.hx",60,0x9f143813)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b1695b4ccb37a6_73_browserLoad,"CoolUtil","browserLoad",0xdac4a08b,"CoolUtil.browserLoad","CoolUtil.hx",73,0x9f143813)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b1695b4ccb37a6_88_addBG2,"CoolUtil","addBG2",0x0bf5c5cf,"CoolUtil.addBG2","CoolUtil.hx",88,0x9f143813)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b1695b4ccb37a6_101_cameraZoom,"CoolUtil","cameraZoom",0x01a3e45b,"CoolUtil.cameraZoom","CoolUtil.hx",101,0x9f143813)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b1695b4ccb37a6_18_boot,"CoolUtil","boot",0xb2a2e7f5,"CoolUtil.boot","CoolUtil.hx",18,0x9f143813)
static const ::String _hx_array_data_c96d938b_9[] = {
	HX_("Easy",22,b8,e5,2d),HX_("Normal",47,e6,fd,64),HX_("Hard",0b,5b,e1,2f),HX_("Insane",ca,aa,6e,d2),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d6b1695b4ccb37a6_20_boot,"CoolUtil","boot",0xb2a2e7f5,"CoolUtil.boot","CoolUtil.hx",20,0x9f143813)

void CoolUtil_obj::__construct() { }

Dynamic CoolUtil_obj::__CreateEmpty() { return new CoolUtil_obj; }

void *CoolUtil_obj::_hx_vtable = 0;

Dynamic CoolUtil_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CoolUtil_obj > _hx_result = new CoolUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CoolUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x24fe864b;
}

::Array< ::String > CoolUtil_obj::difficultyArray;

Float CoolUtil_obj::daPixelZoom;

::String CoolUtil_obj::difficultyFromInt(int difficulty){
            	HX_STACKFRAME(&_hx_pos_d6b1695b4ccb37a6_26_difficultyFromInt)
HXDLIN(  26)		return ::CoolUtil_obj::difficultyArray->__get(difficulty);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CoolUtil_obj,difficultyFromInt,return )

::Array< ::String > CoolUtil_obj::coolTextFile(::String path){
            	HX_STACKFRAME(&_hx_pos_d6b1695b4ccb37a6_30_coolTextFile)
HXLINE(  31)		::Array< ::String > daList = ::StringTools_obj::trim(::openfl::utils::Assets_obj::getText(path)).split(HX_("\n",0a,00,00,00));
HXLINE(  33)		{
HXLINE(  33)			int _g = 0;
HXDLIN(  33)			int _g1 = daList->length;
HXDLIN(  33)			while((_g < _g1)){
HXLINE(  33)				_g = (_g + 1);
HXDLIN(  33)				int i = (_g - 1);
HXLINE(  35)				daList[i] = ::StringTools_obj::trim(daList->__get(i));
            			}
            		}
HXLINE(  38)		return daList;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CoolUtil_obj,coolTextFile,return )

::Array< int > CoolUtil_obj::numberArray(int max, ::Dynamic __o_min){
            		 ::Dynamic min = __o_min;
            		if (::hx::IsNull(__o_min)) min = 0;
            	HX_STACKFRAME(&_hx_pos_d6b1695b4ccb37a6_60_numberArray)
HXLINE(  61)		::Array< int > dumbArray = ::Array_obj< int >::__new(0);
HXLINE(  62)		{
HXLINE(  62)			int _g = ( (int)(min) );
HXDLIN(  62)			int _g1 = max;
HXDLIN(  62)			while((_g < _g1)){
HXLINE(  62)				_g = (_g + 1);
HXDLIN(  62)				int i = (_g - 1);
HXLINE(  64)				dumbArray->push(i);
            			}
            		}
HXLINE(  66)		return dumbArray;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CoolUtil_obj,numberArray,return )

void CoolUtil_obj::browserLoad(::String site){
            	HX_GC_STACKFRAME(&_hx_pos_d6b1695b4ccb37a6_73_browserLoad)
HXDLIN(  73)		::String prefix = HX_("",00,00,00,00);
HXDLIN(  73)		if (!( ::EReg_obj::__alloc( HX_CTX ,HX_("^https?://",48,ee,dd,38),HX_("",00,00,00,00))->match(site))) {
HXDLIN(  73)			prefix = HX_("http://",52,75,cd,5a);
            		}
HXDLIN(  73)		::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,(prefix + site)),HX_("_blank",95,26,d9,b0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CoolUtil_obj,browserLoad,(void))

 ::flixel::FlxSprite CoolUtil_obj::addBG2( ::flixel::FlxState f){
            	HX_GC_STACKFRAME(&_hx_pos_d6b1695b4ccb37a6_88_addBG2)
HXLINE(  89)		::String library = null();
HXDLIN(  89)		::String p = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stageback",e5,7b,3b,06)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXLINE(  90)		if (!(::openfl::utils::Assets_obj::exists(p,null()))) {
HXLINE(  90)			::String library = null();
HXDLIN(  90)			p = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stageback",e5,7b,3b,06)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
            		}
HXLINE(  91)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null())->loadGraphic(p,null(),null(),null(),null(),null());
HXLINE(  92)		bg->setGraphicSize(::Std_obj::_hx_int((bg->get_width() * ((Float)1.1))),null());
HXLINE(  93)		{
HXLINE(  93)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  93)			bool _hx_tmp;
HXDLIN(  93)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  93)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(  93)					_hx_tmp = false;
            				}
            			}
HXDLIN(  93)			if (_hx_tmp) {
HXLINE(  93)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  93)				bg->set_x(((( (Float)(_hx_tmp) ) - bg->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  93)			bool _hx_tmp1;
HXDLIN(  93)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  93)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(  93)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(  93)			if (_hx_tmp1) {
HXLINE(  93)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  93)				bg->set_y(((( (Float)(_hx_tmp) ) - bg->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  94)		bg->set_antialiasing(true);
HXLINE(  95)		f->add(bg).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  96)		return bg;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CoolUtil_obj,addBG2,return )

void CoolUtil_obj::cameraZoom( ::flixel::FlxCamera target,Float zoomLevel,Float speed, ::Dynamic style, ::Dynamic type){
            	HX_STACKFRAME(&_hx_pos_d6b1695b4ccb37a6_101_cameraZoom)
HXDLIN( 101)		::flixel::tweens::FlxTween_obj::tween(target, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("zoom",13,a3,f8,50),zoomLevel)),speed, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),style)
            			->setFixed(1,HX_("type",ba,f2,08,4d),type)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(CoolUtil_obj,cameraZoom,(void))


CoolUtil_obj::CoolUtil_obj()
{
}

bool CoolUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"addBG2") ) { outValue = addBG2_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cameraZoom") ) { outValue = cameraZoom_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { outValue = ( daPixelZoom ); return true; }
		if (HX_FIELD_EQ(inName,"numberArray") ) { outValue = numberArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"browserLoad") ) { outValue = browserLoad_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"coolTextFile") ) { outValue = coolTextFile_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"difficultyArray") ) { outValue = ( difficultyArray ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"difficultyFromInt") ) { outValue = difficultyFromInt_dyn(); return true; }
	}
	return false;
}

bool CoolUtil_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { daPixelZoom=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"difficultyArray") ) { difficultyArray=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CoolUtil_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo CoolUtil_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &CoolUtil_obj::difficultyArray,HX_("difficultyArray",5e,19,a2,bb)},
	{::hx::fsFloat,(void *) &CoolUtil_obj::daPixelZoom,HX_("daPixelZoom",7c,81,6e,df)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void CoolUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CoolUtil_obj::difficultyArray,"difficultyArray");
	HX_MARK_MEMBER_NAME(CoolUtil_obj::daPixelZoom,"daPixelZoom");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CoolUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CoolUtil_obj::difficultyArray,"difficultyArray");
	HX_VISIT_MEMBER_NAME(CoolUtil_obj::daPixelZoom,"daPixelZoom");
};

#endif

::hx::Class CoolUtil_obj::__mClass;

static ::String CoolUtil_obj_sStaticFields[] = {
	HX_("difficultyArray",5e,19,a2,bb),
	HX_("daPixelZoom",7c,81,6e,df),
	HX_("difficultyFromInt",aa,c4,e3,98),
	HX_("coolTextFile",b2,09,03,cc),
	HX_("numberArray",10,1e,18,ad),
	HX_("browserLoad",ee,b5,dc,e9),
	HX_("addBG2",4c,ab,fb,9e),
	HX_("cameraZoom",58,cc,16,b7),
	::String(null())
};

void CoolUtil_obj::__register()
{
	CoolUtil_obj _hx_dummy;
	CoolUtil_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CoolUtil",8b,93,6d,c9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CoolUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &CoolUtil_obj::__SetStatic;
	__mClass->mMarkFunc = CoolUtil_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CoolUtil_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< CoolUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CoolUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CoolUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CoolUtil_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CoolUtil_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d6b1695b4ccb37a6_18_boot)
HXDLIN(  18)		difficultyArray = ::Array_obj< ::String >::fromData( _hx_array_data_c96d938b_9,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d6b1695b4ccb37a6_20_boot)
HXDLIN(  20)		daPixelZoom = ((Float)6);
            	}
}

