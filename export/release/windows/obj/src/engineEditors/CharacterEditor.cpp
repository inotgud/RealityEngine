// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_engineEditors_CharacterEditor
#include <engineEditors/CharacterEditor.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2c32c32d818c820f_53_new,"engineEditors.CharacterEditor","new",0x1fda831e,"engineEditors.CharacterEditor.new","engineEditors/CharacterEditor.hx",53,0x8ca7de53)
HX_LOCAL_STACK_FRAME(_hx_pos_2c32c32d818c820f_109_create,"engineEditors.CharacterEditor","create",0x79da7efe,"engineEditors.CharacterEditor.create","engineEditors/CharacterEditor.hx",109,0x8ca7de53)
HX_LOCAL_STACK_FRAME(_hx_pos_2c32c32d818c820f_70_create,"engineEditors.CharacterEditor","create",0x79da7efe,"engineEditors.CharacterEditor.create","engineEditors/CharacterEditor.hx",70,0x8ca7de53)
HX_LOCAL_STACK_FRAME(_hx_pos_2c32c32d818c820f_141_update,"engineEditors.CharacterEditor","update",0x84d09e0b,"engineEditors.CharacterEditor.update","engineEditors/CharacterEditor.hx",141,0x8ca7de53)
HX_LOCAL_STACK_FRAME(_hx_pos_2c32c32d818c820f_183_characterCreator,"engineEditors.CharacterEditor","characterCreator",0xf84eb085,"engineEditors.CharacterEditor.characterCreator","engineEditors/CharacterEditor.hx",183,0x8ca7de53)
HX_LOCAL_STACK_FRAME(_hx_pos_2c32c32d818c820f_197_ee,"engineEditors.CharacterEditor","ee",0x879ac762,"engineEditors.CharacterEditor.ee","engineEditors/CharacterEditor.hx",197,0x8ca7de53)
HX_LOCAL_STACK_FRAME(_hx_pos_2c32c32d818c820f_217_ee2,"engineEditors.CharacterEditor","ee2",0x1fd3ae90,"engineEditors.CharacterEditor.ee2","engineEditors/CharacterEditor.hx",217,0x8ca7de53)
HX_LOCAL_STACK_FRAME(_hx_pos_2c32c32d818c820f_254_addAnimation,"engineEditors.CharacterEditor","addAnimation",0x88e11625,"engineEditors.CharacterEditor.addAnimation","engineEditors/CharacterEditor.hx",254,0x8ca7de53)
HX_LOCAL_STACK_FRAME(_hx_pos_2c32c32d818c820f_275_addAnimationCode,"engineEditors.CharacterEditor","addAnimationCode",0x589569f2,"engineEditors.CharacterEditor.addAnimationCode","engineEditors/CharacterEditor.hx",275,0x8ca7de53)
HX_LOCAL_STACK_FRAME(_hx_pos_2c32c32d818c820f_282_saveCharacter,"engineEditors.CharacterEditor","saveCharacter",0xb5392cea,"engineEditors.CharacterEditor.saveCharacter","engineEditors/CharacterEditor.hx",282,0x8ca7de53)
HX_LOCAL_STACK_FRAME(_hx_pos_2c32c32d818c820f_58_boot,"engineEditors.CharacterEditor","boot",0xb77137b4,"engineEditors.CharacterEditor.boot","engineEditors/CharacterEditor.hx",58,0x8ca7de53)
namespace engineEditors{

void CharacterEditor_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_2c32c32d818c820f_53_new)
HXLINE(  60)		::String library = null();
HXDLIN(  60)		this->characters = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/characterList",c2,06,08,81) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  57)		this->characterlisttxt = ::sys::io::File_obj::getContent(HX_("assets/data/characterList.txt",10,12,df,7e));
HXLINE(  56)		this->enabledchar = false;
HXLINE(  55)		this->isblocked = false;
HXLINE(  53)		super::__construct(TransIn,TransOut);
            	}

Dynamic CharacterEditor_obj::__CreateEmpty() { return new CharacterEditor_obj; }

void *CharacterEditor_obj::_hx_vtable = 0;

Dynamic CharacterEditor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CharacterEditor_obj > _hx_result = new CharacterEditor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CharacterEditor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5339bfda) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x5339bfda;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void CharacterEditor_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::engineEditors::CharacterEditor,_gthis) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_2c32c32d818c820f_109_create)
HXLINE( 110)			::Array< ::String > _gthis1 = _gthis->characters;
HXDLIN( 110)			 ::Dynamic player1DropDown = ::Std_obj::parseInt(character);
HXDLIN( 110)			_gthis->selectedChar = _gthis1->__get(( (int)(player1DropDown) ));
HXLINE( 111)			_gthis->remove(_gthis->char1,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 112)			_gthis->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(500) ),( (Float)(300) ),_gthis->selectedChar,true);
HXLINE( 113)			::String _hx_switch_0 = _gthis->char1->curCharacter;
            			if (  (_hx_switch_0==HX_("dad",47,36,4c,00)) ){
HXLINE( 120)				 ::Character _g = _gthis->char1;
HXDLIN( 120)				_g->set_y((_g->y - ( (Float)(310) )));
HXDLIN( 120)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("gf",1f,5a,00,00)) ){
HXLINE( 122)				_gthis->char1->set_flipX(true);
HXDLIN( 122)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 116)				 ::Character _gthis1 = _gthis->char1;
HXDLIN( 116)				_gthis1->setGraphicSize(::Std_obj::_hx_int((_gthis->char1->get_width() * ( (Float)(6) ))),null());
HXLINE( 117)				_gthis->char1->updateHitbox();
HXLINE( 118)				_gthis->char1->set_antialiasing(false);
HXLINE( 115)				goto _hx_goto_1;
            			}
            			_hx_goto_1:;
HXLINE( 124)			 ::Character _gthis2 = _gthis->char1;
HXDLIN( 124)			_gthis2->setGraphicSize(::Std_obj::_hx_int((_gthis->char1->get_width() * ((Float)0.8))),null());
HXLINE( 125)			_gthis->add(_gthis->char1).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 126)			_gthis->char1->updateHitbox();
HXLINE( 127)			_gthis->char1->dance(null(),null());
HXLINE( 128)			_gthis->enabledchar = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_2c32c32d818c820f_70_create)
HXLINE(  69)		 ::engineEditors::CharacterEditor _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  72)		::DiscordClient_obj::changePresence(HX_("Character Editor",84,45,58,b1),null(),null(),null(),null());
HXLINE(  75)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,-200,null());
HXDLIN(  75)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("stageback",e5,7b,3b,06),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE(  76)		bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  77)		bg1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE(  78)		bg1->set_active(false);
HXLINE(  79)		this->add(bg1);
HXLINE(  81)		 ::flixel::FlxSprite stageFront =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,600,null());
HXDLIN(  81)		 ::flixel::FlxSprite stageFront1 = stageFront->loadGraphic(::Paths_obj::loadImage(HX_("stagefront",2b,fd,b0,c6),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE(  82)		stageFront1->setGraphicSize(::Std_obj::_hx_int((stageFront1->get_width() * ((Float)1.1))),null());
HXLINE(  83)		stageFront1->updateHitbox();
HXLINE(  84)		stageFront1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  85)		stageFront1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE(  86)		stageFront1->set_active(false);
HXLINE(  87)		this->add(stageFront1);
HXLINE(  89)		 ::flixel::FlxSprite stageCurtains =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-300,null());
HXDLIN(  89)		 ::flixel::FlxSprite stageCurtains1 = stageCurtains->loadGraphic(::Paths_obj::loadImage(HX_("stagecurtains",df,ec,1a,4b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE(  90)		stageCurtains1->setGraphicSize(::Std_obj::_hx_int((stageCurtains1->get_width() * ((Float)0.9))),null());
HXLINE(  91)		stageCurtains1->updateHitbox();
HXLINE(  92)		stageCurtains1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  93)		stageCurtains1->scrollFactor->set(((Float)1.3),((Float)1.3));
HXLINE(  94)		stageCurtains1->set_active(false);
HXLINE(  95)		this->add(stageCurtains1);
HXLINE(  97)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Character",89,bb,a4,e3))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Character",89,bb,a4,e3))));
HXLINE( 100)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE( 101)		this->UI_box->scrollFactor->set(null(),null());
HXLINE( 102)		this->UI_box->resize(( (Float)(300) ),( (Float)(400) ));
HXLINE( 103)		this->UI_box->set_x(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 40));
HXLINE( 104)		this->UI_box->set_y(( (Float)(20) ));
HXLINE( 105)		this->add(this->UI_box);
HXLINE( 106)		{
HXLINE( 106)			 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN( 106)			_g->set_x((_g->x + 250));
            		}
HXLINE( 108)		 ::flixel::addons::ui::FlxUIDropDownMenu player1DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,100,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(this->characters,true), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null(),null());
HXLINE( 130)		player1DropDown->set_selectedLabel(this->selectedChar);
HXLINE( 131)		this->UI_box->add(player1DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 133)		this->versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,HX_("Controls - Zooms E/Q | Location Down/Up | Press M to create character",0d,35,67,f1),12,null());
HXLINE( 134)		this->versionShit->scrollFactor->set(null(),null());
HXLINE( 135)		this->versionShit->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 136)		this->add(this->versionShit);
HXLINE( 138)		this->super::create();
            	}


void CharacterEditor_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_2c32c32d818c820f_141_update)
HXLINE( 142)		if (this->enabledchar) {
HXLINE( 144)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 144)			if (_this->keyManager->checkStatusUnsafe(38,_this->status)) {
HXLINE( 146)				 ::Character _g = this->char1;
HXDLIN( 146)				_g->set_y((_g->y - ( (Float)(20) )));
            			}
HXLINE( 148)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 148)			if (_this1->keyManager->checkStatusUnsafe(40,_this1->status)) {
HXLINE( 150)				 ::Character _g = this->char1;
HXDLIN( 150)				_g->set_y((_g->y + 20));
            			}
            		}
HXLINE( 154)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 154)		if (_this->keyManager->checkStatusUnsafe(69,_this->status)) {
HXLINE( 156)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 156)			_g->set_zoom((_g->zoom + (elapsed * ::flixel::FlxG_obj::camera->zoom)));
            		}
HXLINE( 158)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 158)		if (_this1->keyManager->checkStatusUnsafe(81,_this1->status)) {
HXLINE( 160)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 160)			_g->set_zoom((_g->zoom - (elapsed * ::flixel::FlxG_obj::camera->zoom)));
            		}
HXLINE( 162)		if ((this->isblocked != true)) {
HXLINE( 167)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 167)			if (_this->keyManager->checkStatusUnsafe(77,_this->status)) {
HXLINE( 169)				this->characterCreator();
            			}
            		}
HXLINE( 172)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 172)		if (_this2->keyManager->checkStatusUnsafe(27,_this2->status)) {
HXLINE( 174)			 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 174)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 174)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 176)		this->super::update(elapsed);
            	}


void CharacterEditor_obj::characterCreator(){
            	HX_GC_STACKFRAME(&_hx_pos_2c32c32d818c820f_183_characterCreator)
HXLINE( 184)		this->swagBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1000,500,-16777216,false,null());
HXLINE( 185)		{
HXLINE( 185)			 ::flixel::FlxSprite _this = this->swagBG;
HXDLIN( 185)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 185)			bool _hx_tmp;
HXDLIN( 185)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 185)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 185)					_hx_tmp = false;
            				}
            			}
HXDLIN( 185)			if (_hx_tmp) {
HXLINE( 185)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 185)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 185)			bool _hx_tmp1;
HXDLIN( 185)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 185)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 185)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 185)			if (_hx_tmp1) {
HXLINE( 185)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 185)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 186)		this->swagBG->scrollFactor->set(null(),null());
HXLINE( 187)		this->swagBG->set_alpha(((Float)0.5));
HXLINE( 188)		this->add(this->swagBG);
HXLINE( 190)		this->eventName =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,555,280,80,HX_("charactername",74,d6,12,57),null(),null(),null(),null());
HXLINE( 191)		this->save =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,555,337,HX_("Apply",4e,f5,68,b7),this->ee_dyn());
HXLINE( 192)		this->add(this->save);
HXLINE( 193)		this->add(this->eventName);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditor_obj,characterCreator,(void))

void CharacterEditor_obj::ee(){
            	HX_GC_STACKFRAME(&_hx_pos_2c32c32d818c820f_197_ee)
HXLINE( 198)		this->charactername = this->eventName->text;
HXLINE( 199)		this->code = (((((((((((HX_("{",7b,00,00,00) + HX_("\n",0a,00,00,00)) + HX_("   ",20,64,18,00)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_("name",4b,72,ff,48)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_(":",3a,00,00,00)) + ::engineEditors::CharacterEditor_obj::hmmm) + this->eventName->text) + HX_(" SE",b2,90,18,00)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_(",",2c,00,00,00));
HXLINE( 200)		this->remove(this->save,null());
HXLINE( 201)		this->remove(this->eventName,null());
HXLINE( 202)		this->eventName =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,555,280,80,HX_("character_asset",9a,31,f4,66),null(),null(),null(),null());
HXLINE( 203)		this->save =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,555,337,HX_("Apply",4e,f5,68,b7),this->ee2_dyn());
HXLINE( 204)		this->add(this->save);
HXLINE( 205)		this->add(this->eventName);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditor_obj,ee,(void))

void CharacterEditor_obj::ee2(){
            	HX_GC_STACKFRAME(&_hx_pos_2c32c32d818c820f_217_ee2)
HXLINE( 218)		this->isblocked = true;
HXLINE( 219)		this->code = ((((((((((this->code + HX_("\n",0a,00,00,00)) + HX_("   ",20,64,18,00)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_("asset",f0,69,39,26)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_(":",3a,00,00,00)) + ::engineEditors::CharacterEditor_obj::hmmm) + this->eventName->text) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_(",",2c,00,00,00));
HXLINE( 220)		this->code = ((((((((((this->code + HX_("\n",0a,00,00,00)) + HX_("   ",20,64,18,00)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_("barColor",90,b2,2a,19)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_(":",3a,00,00,00)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_("#000000",63,3a,ab,a3)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_(",",2c,00,00,00));
HXLINE( 221)		this->code = ((((((((((this->code + HX_("\n",0a,00,00,00)) + HX_("   ",20,64,18,00)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_("startingAnim",f1,93,7a,27)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_(":",3a,00,00,00)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_("idle",14,a7,b3,45)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_(",",2c,00,00,00));
HXLINE( 222)		this->code = ((((((this->code + HX_("\n",0a,00,00,00)) + HX_("   ",20,64,18,00)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_("animations",ef,34,1c,83)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_(": [",f5,1e,2c,00));
HXLINE( 223)		this->remove(this->save,null());
HXLINE( 224)		this->remove(this->eventName,null());
HXLINE( 225)		this->remove(this->swagBG,null());
HXLINE( 226)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 226)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("menuDesat",26,91,04,72),null()),null(),null(),null(),null(),null());
HXLINE( 227)		bg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 228)		bg1->scrollFactor->set_y(((Float)0.10));
HXLINE( 229)		bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)1.1))),null());
HXLINE( 230)		bg1->updateHitbox();
HXLINE( 231)		{
HXLINE( 231)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 231)			bool _hx_tmp;
HXDLIN( 231)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 231)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 231)					_hx_tmp = false;
            				}
            			}
HXDLIN( 231)			if (_hx_tmp) {
HXLINE( 231)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 231)				bg1->set_x(((( (Float)(_hx_tmp) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 231)			bool _hx_tmp1;
HXDLIN( 231)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 231)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 231)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 231)			if (_hx_tmp1) {
HXLINE( 231)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 231)				bg1->set_y(((( (Float)(_hx_tmp) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 232)		bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 233)		bg1->set_active(false);
HXLINE( 234)		this->add(bg1);
HXLINE( 236)		::Array< ::Dynamic> tabs2 = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Character",89,bb,a4,e3))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Character Maker",cd,fa,14,07))));
HXLINE( 239)		this->UI_box2 =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs2,null(),true,null(),null());
HXLINE( 240)		this->UI_box2->scrollFactor->set(null(),null());
HXLINE( 241)		this->UI_box2->resize(( (Float)(300) ),( (Float)(400) ));
HXLINE( 242)		this->UI_box2->set_x(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 40));
HXLINE( 243)		this->UI_box2->set_y(( (Float)(20) ));
HXLINE( 244)		this->add(this->UI_box2);
HXLINE( 245)		{
HXLINE( 245)			 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box2;
HXDLIN( 245)			_g->set_x((_g->x + 250));
            		}
HXLINE( 246)		this->eventNameHmm =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,9,30,HX_("Add Animation",05,60,df,b1),this->addAnimation_dyn());
HXLINE( 247)		this->UI_box2->add(this->eventNameHmm).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 248)		this->eventNameHmmSave =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,99,30,HX_("Save",5d,b7,26,37),this->saveCharacter_dyn());
HXLINE( 249)		this->UI_box2->add(this->eventNameHmmSave).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 250)		this->modName =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,189,30,80,HX_("Mod Name",a9,14,56,d8),null(),null(),null(),null());
HXLINE( 251)		this->UI_box2->add(this->modName).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditor_obj,ee2,(void))

void CharacterEditor_obj::addAnimation(){
            	HX_GC_STACKFRAME(&_hx_pos_2c32c32d818c820f_254_addAnimation)
HXLINE( 255)		this->swagBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1000,500,-16777216,false,null());
HXLINE( 256)		{
HXLINE( 256)			 ::flixel::FlxSprite _this = this->swagBG;
HXDLIN( 256)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 256)			bool _hx_tmp;
HXDLIN( 256)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 256)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 256)					_hx_tmp = false;
            				}
            			}
HXDLIN( 256)			if (_hx_tmp) {
HXLINE( 256)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 256)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 256)			bool _hx_tmp1;
HXDLIN( 256)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 256)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 256)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 256)			if (_hx_tmp1) {
HXLINE( 256)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 256)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 257)		this->swagBG->scrollFactor->set(null(),null());
HXLINE( 258)		this->swagBG->set_alpha(((Float)0.5));
HXLINE( 259)		this->add(this->swagBG);
HXLINE( 261)		this->eventName =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,190,153,80,HX_("Anim Name",ba,ea,d7,66),null(),null(),null(),null());
HXLINE( 262)		this->add(this->eventName);
HXLINE( 263)		this->eventName2 =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,190,193,80,HX_("Anim Prefix",c1,8b,f1,4d),null(),null(),null(),null());
HXLINE( 264)		this->add(this->eventName2);
HXLINE( 265)		this->eventName3 =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,190,233,80,HX_("Offset X",ab,ba,b4,7a),null(),null(),null(),null());
HXLINE( 266)		this->add(this->eventName3);
HXLINE( 267)		this->eventName4 =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,190,273,80,HX_("Offset Y",ac,ba,b4,7a),null(),null(),null(),null());
HXLINE( 268)		this->add(this->eventName4);
HXLINE( 269)		this->eventName5 =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,190,323,80,HX_("flipX(true/false)",6a,cf,32,48),null(),null(),null(),null());
HXLINE( 270)		this->add(this->eventName5);
HXLINE( 271)		this->eventNameHmm2 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,190,363,HX_("Apply",4e,f5,68,b7),this->addAnimationCode_dyn());
HXLINE( 272)		this->add(this->eventNameHmm2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditor_obj,addAnimation,(void))

void CharacterEditor_obj::addAnimationCode(){
            	HX_STACKFRAME(&_hx_pos_2c32c32d818c820f_275_addAnimationCode)
HXLINE( 276)		this->code = ((((((((((((this->code + HX_("\n",0a,00,00,00)) + HX_("{",7b,00,00,00)) + HX_("\n",0a,00,00,00)) + HX_("      ",00,54,7d,4d)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_("name",4b,72,ff,48)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_(":",3a,00,00,00)) + ::engineEditors::CharacterEditor_obj::hmmm) + this->eventName->text) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_(",",2c,00,00,00));
HXLINE( 277)		this->code = ((((((((((this->code + HX_("\n",0a,00,00,00)) + HX_("      ",00,54,7d,4d)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_("prefix",92,d9,b6,ae)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_(":",3a,00,00,00)) + ::engineEditors::CharacterEditor_obj::hmmm) + this->eventName2->text) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_(",",2c,00,00,00));
HXLINE( 278)		this->code = (((((((((((this->code + HX_("\n",0a,00,00,00)) + HX_("      ",00,54,7d,4d)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_("offsets",80,09,65,d7)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_(":",3a,00,00,00)) + HX_("[",5b,00,00,00)) + this->eventName3->text) + HX_(",",2c,00,00,00)) + this->eventName4->text) + HX_("],",2f,51,00,00));
HXLINE( 279)		this->code = (((((((this->code + HX_("\n",0a,00,00,00)) + HX_("      ",00,54,7d,4d)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_("flipX",0b,45,92,02)) + ::engineEditors::CharacterEditor_obj::hmmm) + HX_(":",3a,00,00,00)) + this->eventName5->text);
HXLINE( 280)		this->code = ((this->code + HX_("\n",0a,00,00,00)) + HX_("    },",0f,a5,7d,4d));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditor_obj,addAnimationCode,(void))

void CharacterEditor_obj::saveCharacter(){
            	HX_STACKFRAME(&_hx_pos_2c32c32d818c820f_282_saveCharacter)
HXLINE( 283)		this->code = ((((this->code + HX_("\n",0a,00,00,00)) + HX_("  ]",5d,64,18,00)) + HX_("\n",0a,00,00,00)) + HX_("}",7d,00,00,00));
HXLINE( 284)		::StringTools_obj::replace(this->code,HX_(",E",99,26,00,00),HX_("hmm",c8,49,4f,00));
HXLINE( 285)		::sys::io::File_obj::saveContent(((((HX_("mods/",9e,2f,58,0c) + this->modName->text) + HX_("/custom/custom_characters/",46,ce,21,a4)) + this->charactername) + HX_(".json",56,f1,d6,c2)),this->code);
HXLINE( 286)		::sys::io::File_obj::saveContent(HX_("assets/data/characterList.txt",10,12,df,7e),((this->characterlisttxt + HX_("\n",0a,00,00,00)) + this->charactername));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditor_obj,saveCharacter,(void))

::String CharacterEditor_obj::hmmm;


::hx::ObjectPtr< CharacterEditor_obj > CharacterEditor_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< CharacterEditor_obj > __this = new CharacterEditor_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< CharacterEditor_obj > CharacterEditor_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	CharacterEditor_obj *__this = (CharacterEditor_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharacterEditor_obj), true, "engineEditors.CharacterEditor"));
	*(void **)__this = CharacterEditor_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

CharacterEditor_obj::CharacterEditor_obj()
{
}

void CharacterEditor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CharacterEditor);
	HX_MARK_MEMBER_NAME(isblocked,"isblocked");
	HX_MARK_MEMBER_NAME(enabledchar,"enabledchar");
	HX_MARK_MEMBER_NAME(characterlisttxt,"characterlisttxt");
	HX_MARK_MEMBER_NAME(characters,"characters");
	HX_MARK_MEMBER_NAME(selectedChar,"selectedChar");
	HX_MARK_MEMBER_NAME(code,"code");
	HX_MARK_MEMBER_NAME(char1,"char1");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(versionShit,"versionShit");
	HX_MARK_MEMBER_NAME(save,"save");
	HX_MARK_MEMBER_NAME(eventName,"eventName");
	HX_MARK_MEMBER_NAME(swagBG,"swagBG");
	HX_MARK_MEMBER_NAME(charactername,"charactername");
	HX_MARK_MEMBER_NAME(UI_box2,"UI_box2");
	HX_MARK_MEMBER_NAME(eventNameHmm,"eventNameHmm");
	HX_MARK_MEMBER_NAME(eventNameHmm2,"eventNameHmm2");
	HX_MARK_MEMBER_NAME(eventName2,"eventName2");
	HX_MARK_MEMBER_NAME(eventName3,"eventName3");
	HX_MARK_MEMBER_NAME(eventName4,"eventName4");
	HX_MARK_MEMBER_NAME(eventName5,"eventName5");
	HX_MARK_MEMBER_NAME(eventNameHmmSave,"eventNameHmmSave");
	HX_MARK_MEMBER_NAME(modName,"modName");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CharacterEditor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(isblocked,"isblocked");
	HX_VISIT_MEMBER_NAME(enabledchar,"enabledchar");
	HX_VISIT_MEMBER_NAME(characterlisttxt,"characterlisttxt");
	HX_VISIT_MEMBER_NAME(characters,"characters");
	HX_VISIT_MEMBER_NAME(selectedChar,"selectedChar");
	HX_VISIT_MEMBER_NAME(code,"code");
	HX_VISIT_MEMBER_NAME(char1,"char1");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(versionShit,"versionShit");
	HX_VISIT_MEMBER_NAME(save,"save");
	HX_VISIT_MEMBER_NAME(eventName,"eventName");
	HX_VISIT_MEMBER_NAME(swagBG,"swagBG");
	HX_VISIT_MEMBER_NAME(charactername,"charactername");
	HX_VISIT_MEMBER_NAME(UI_box2,"UI_box2");
	HX_VISIT_MEMBER_NAME(eventNameHmm,"eventNameHmm");
	HX_VISIT_MEMBER_NAME(eventNameHmm2,"eventNameHmm2");
	HX_VISIT_MEMBER_NAME(eventName2,"eventName2");
	HX_VISIT_MEMBER_NAME(eventName3,"eventName3");
	HX_VISIT_MEMBER_NAME(eventName4,"eventName4");
	HX_VISIT_MEMBER_NAME(eventName5,"eventName5");
	HX_VISIT_MEMBER_NAME(eventNameHmmSave,"eventNameHmmSave");
	HX_VISIT_MEMBER_NAME(modName,"modName");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CharacterEditor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ee") ) { return ::hx::Val( ee_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ee2") ) { return ::hx::Val( ee2_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { return ::hx::Val( code ); }
		if (HX_FIELD_EQ(inName,"save") ) { return ::hx::Val( save ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { return ::hx::Val( char1 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"swagBG") ) { return ::hx::Val( swagBG ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"UI_box2") ) { return ::hx::Val( UI_box2 ); }
		if (HX_FIELD_EQ(inName,"modName") ) { return ::hx::Val( modName ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isblocked") ) { return ::hx::Val( isblocked ); }
		if (HX_FIELD_EQ(inName,"eventName") ) { return ::hx::Val( eventName ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"characters") ) { return ::hx::Val( characters ); }
		if (HX_FIELD_EQ(inName,"eventName2") ) { return ::hx::Val( eventName2 ); }
		if (HX_FIELD_EQ(inName,"eventName3") ) { return ::hx::Val( eventName3 ); }
		if (HX_FIELD_EQ(inName,"eventName4") ) { return ::hx::Val( eventName4 ); }
		if (HX_FIELD_EQ(inName,"eventName5") ) { return ::hx::Val( eventName5 ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"enabledchar") ) { return ::hx::Val( enabledchar ); }
		if (HX_FIELD_EQ(inName,"versionShit") ) { return ::hx::Val( versionShit ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selectedChar") ) { return ::hx::Val( selectedChar ); }
		if (HX_FIELD_EQ(inName,"eventNameHmm") ) { return ::hx::Val( eventNameHmm ); }
		if (HX_FIELD_EQ(inName,"addAnimation") ) { return ::hx::Val( addAnimation_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"charactername") ) { return ::hx::Val( charactername ); }
		if (HX_FIELD_EQ(inName,"eventNameHmm2") ) { return ::hx::Val( eventNameHmm2 ); }
		if (HX_FIELD_EQ(inName,"saveCharacter") ) { return ::hx::Val( saveCharacter_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"characterlisttxt") ) { return ::hx::Val( characterlisttxt ); }
		if (HX_FIELD_EQ(inName,"characterCreator") ) { return ::hx::Val( characterCreator_dyn() ); }
		if (HX_FIELD_EQ(inName,"eventNameHmmSave") ) { return ::hx::Val( eventNameHmmSave ); }
		if (HX_FIELD_EQ(inName,"addAnimationCode") ) { return ::hx::Val( addAnimationCode_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CharacterEditor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"hmmm") ) { outValue = ( hmmm ); return true; }
	}
	return false;
}

::hx::Val CharacterEditor_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { code=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"save") ) { save=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { char1=inValue.Cast<  ::Character >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"swagBG") ) { swagBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"UI_box2") ) { UI_box2=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modName") ) { modName=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isblocked") ) { isblocked=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName") ) { eventName=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"characters") ) { characters=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName2") ) { eventName2=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName3") ) { eventName3=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName4") ) { eventName4=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName5") ) { eventName5=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"enabledchar") ) { enabledchar=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"versionShit") ) { versionShit=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selectedChar") ) { selectedChar=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventNameHmm") ) { eventNameHmm=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"charactername") ) { charactername=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventNameHmm2") ) { eventNameHmm2=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"characterlisttxt") ) { characterlisttxt=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventNameHmmSave") ) { eventNameHmmSave=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CharacterEditor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"hmmm") ) { hmmm=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void CharacterEditor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("isblocked",42,d0,ab,7b));
	outFields->push(HX_("enabledchar",d7,37,73,0d));
	outFields->push(HX_("characterlisttxt",49,bc,dd,fe));
	outFields->push(HX_("characters",aa,58,ce,55));
	outFields->push(HX_("selectedChar",d1,7e,59,d2));
	outFields->push(HX_("code",2d,b1,c4,41));
	outFields->push(HX_("char1",9b,9c,b3,45));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("versionShit",f8,4e,3b,e2));
	outFields->push(HX_("save",3d,8b,4d,4c));
	outFields->push(HX_("eventName",85,7b,0c,f8));
	outFields->push(HX_("swagBG",cf,9a,25,c0));
	outFields->push(HX_("charactername",74,d6,12,57));
	outFields->push(HX_("UI_box2",d2,6c,da,f2));
	outFields->push(HX_("eventNameHmm",43,c7,d2,3c));
	outFields->push(HX_("eventNameHmm2",8f,93,9b,fb));
	outFields->push(HX_("eventName2",0d,99,df,12));
	outFields->push(HX_("eventName3",0e,99,df,12));
	outFields->push(HX_("eventName4",0f,99,df,12));
	outFields->push(HX_("eventName5",10,99,df,12));
	outFields->push(HX_("eventNameHmmSave",20,dc,41,96));
	outFields->push(HX_("modName",2d,3e,2b,de));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CharacterEditor_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(CharacterEditor_obj,isblocked),HX_("isblocked",42,d0,ab,7b)},
	{::hx::fsBool,(int)offsetof(CharacterEditor_obj,enabledchar),HX_("enabledchar",d7,37,73,0d)},
	{::hx::fsString,(int)offsetof(CharacterEditor_obj,characterlisttxt),HX_("characterlisttxt",49,bc,dd,fe)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CharacterEditor_obj,characters),HX_("characters",aa,58,ce,55)},
	{::hx::fsString,(int)offsetof(CharacterEditor_obj,selectedChar),HX_("selectedChar",d1,7e,59,d2)},
	{::hx::fsString,(int)offsetof(CharacterEditor_obj,code),HX_("code",2d,b1,c4,41)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(CharacterEditor_obj,char1),HX_("char1",9b,9c,b3,45)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(CharacterEditor_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CharacterEditor_obj,versionShit),HX_("versionShit",f8,4e,3b,e2)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CharacterEditor_obj,save),HX_("save",3d,8b,4d,4c)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CharacterEditor_obj,eventName),HX_("eventName",85,7b,0c,f8)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CharacterEditor_obj,swagBG),HX_("swagBG",cf,9a,25,c0)},
	{::hx::fsString,(int)offsetof(CharacterEditor_obj,charactername),HX_("charactername",74,d6,12,57)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(CharacterEditor_obj,UI_box2),HX_("UI_box2",d2,6c,da,f2)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CharacterEditor_obj,eventNameHmm),HX_("eventNameHmm",43,c7,d2,3c)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CharacterEditor_obj,eventNameHmm2),HX_("eventNameHmm2",8f,93,9b,fb)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CharacterEditor_obj,eventName2),HX_("eventName2",0d,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CharacterEditor_obj,eventName3),HX_("eventName3",0e,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CharacterEditor_obj,eventName4),HX_("eventName4",0f,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CharacterEditor_obj,eventName5),HX_("eventName5",10,99,df,12)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CharacterEditor_obj,eventNameHmmSave),HX_("eventNameHmmSave",20,dc,41,96)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CharacterEditor_obj,modName),HX_("modName",2d,3e,2b,de)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CharacterEditor_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &CharacterEditor_obj::hmmm,HX_("hmmm",a5,45,11,45)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CharacterEditor_obj_sMemberFields[] = {
	HX_("isblocked",42,d0,ab,7b),
	HX_("enabledchar",d7,37,73,0d),
	HX_("characterlisttxt",49,bc,dd,fe),
	HX_("characters",aa,58,ce,55),
	HX_("selectedChar",d1,7e,59,d2),
	HX_("code",2d,b1,c4,41),
	HX_("char1",9b,9c,b3,45),
	HX_("UI_box",60,07,ac,43),
	HX_("versionShit",f8,4e,3b,e2),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("save",3d,8b,4d,4c),
	HX_("eventName",85,7b,0c,f8),
	HX_("swagBG",cf,9a,25,c0),
	HX_("characterCreator",03,c2,f8,d2),
	HX_("charactername",74,d6,12,57),
	HX_("ee",60,58,00,00),
	HX_("UI_box2",d2,6c,da,f2),
	HX_("eventNameHmm",43,c7,d2,3c),
	HX_("eventNameHmm2",8f,93,9b,fb),
	HX_("eventName2",0d,99,df,12),
	HX_("eventName3",0e,99,df,12),
	HX_("eventName4",0f,99,df,12),
	HX_("eventName5",10,99,df,12),
	HX_("eventNameHmmSave",20,dc,41,96),
	HX_("modName",2d,3e,2b,de),
	HX_("ee2",d2,fb,4c,00),
	HX_("addAnimation",a3,10,89,4a),
	HX_("addAnimationCode",70,7b,3f,33),
	HX_("saveCharacter",ac,60,8c,66),
	::String(null()) };

static void CharacterEditor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CharacterEditor_obj::hmmm,"hmmm");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CharacterEditor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CharacterEditor_obj::hmmm,"hmmm");
};

#endif

::hx::Class CharacterEditor_obj::__mClass;

static ::String CharacterEditor_obj_sStaticFields[] = {
	HX_("hmmm",a5,45,11,45),
	::String(null())
};

void CharacterEditor_obj::__register()
{
	CharacterEditor_obj _hx_dummy;
	CharacterEditor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("engineEditors.CharacterEditor",2c,5c,9f,92);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CharacterEditor_obj::__GetStatic;
	__mClass->mSetStaticField = &CharacterEditor_obj::__SetStatic;
	__mClass->mMarkFunc = CharacterEditor_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CharacterEditor_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CharacterEditor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CharacterEditor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CharacterEditor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharacterEditor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharacterEditor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CharacterEditor_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2c32c32d818c820f_58_boot)
HXDLIN(  58)		hmmm = ::sys::io::File_obj::getContent(HX_("assets/images/no/novar/a.txt",f7,a9,b5,c0));
            	}
}

} // end namespace engineEditors
