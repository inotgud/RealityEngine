// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_EngineEditorsState
#include <EngineEditorsState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_engineEditors_StageEditor
#include <engineEditors/StageEditor.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_desktop_Clipboard
#include <openfl/desktop/Clipboard.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6657529c24980bbf_31_new,"engineEditors.StageEditor","new",0x66726b73,"engineEditors.StageEditor.new","engineEditors/StageEditor.hx",31,0x24f0a31e)
HX_LOCAL_STACK_FRAME(_hx_pos_6657529c24980bbf_52_create,"engineEditors.StageEditor","create",0xbd52b9c9,"engineEditors.StageEditor.create","engineEditors/StageEditor.hx",52,0x24f0a31e)
HX_LOCAL_STACK_FRAME(_hx_pos_6657529c24980bbf_137_nullFunction,"engineEditors.StageEditor","nullFunction",0x736c4f4c,"engineEditors.StageEditor.nullFunction","engineEditors/StageEditor.hx",137,0x24f0a31e)
HX_LOCAL_STACK_FRAME(_hx_pos_6657529c24980bbf_142_addStageLayer,"engineEditors.StageEditor","addStageLayer",0xe06a7087,"engineEditors.StageEditor.addStageLayer","engineEditors/StageEditor.hx",142,0x24f0a31e)
HX_LOCAL_STACK_FRAME(_hx_pos_6657529c24980bbf_169_saveStage,"engineEditors.StageEditor","saveStage",0x78551d94,"engineEditors.StageEditor.saveStage","engineEditors/StageEditor.hx",169,0x24f0a31e)
HX_LOCAL_STACK_FRAME(_hx_pos_6657529c24980bbf_178_PasteFunction,"engineEditors.StageEditor","PasteFunction",0x95ab663e,"engineEditors.StageEditor.PasteFunction","engineEditors/StageEditor.hx",178,0x24f0a31e)
HX_LOCAL_STACK_FRAME(_hx_pos_6657529c24980bbf_182_update,"engineEditors.StageEditor","update",0xc848d8d6,"engineEditors.StageEditor.update","engineEditors/StageEditor.hx",182,0x24f0a31e)
HX_LOCAL_STACK_FRAME(_hx_pos_6657529c24980bbf_49_boot,"engineEditors.StageEditor","boot",0x35c499bf,"engineEditors.StageEditor.boot","engineEditors/StageEditor.hx",49,0x24f0a31e)
HX_LOCAL_STACK_FRAME(_hx_pos_6657529c24980bbf_50_boot,"engineEditors.StageEditor","boot",0x35c499bf,"engineEditors.StageEditor.boot","engineEditors/StageEditor.hx",50,0x24f0a31e)
namespace engineEditors{

void StageEditor_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_6657529c24980bbf_31_new)
HXLINE(  38)		this->charselect2 = HX_("dad",47,36,4c,00);
HXLINE(  37)		this->charselect = HX_("bf",c4,55,00,00);
HXLINE(  31)		super::__construct(TransIn,TransOut);
            	}

Dynamic StageEditor_obj::__CreateEmpty() { return new StageEditor_obj; }

void *StageEditor_obj::_hx_vtable = 0;

Dynamic StageEditor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StageEditor_obj > _hx_result = new StageEditor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool StageEditor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4c94aaaf) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x4c94aaaf;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void StageEditor_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_6657529c24980bbf_52_create)
HXLINE(  54)		::DiscordClient_obj::changePresence(HX_("Stage Editor",0f,63,39,a5),null(),null(),null(),null());
HXLINE(  57)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  87)		this->char3 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(300) ),( (Float)(110) ),HX_("gf",1f,5a,00,00),false);
HXLINE(  88)		 ::Character _hx_tmp = this->char3;
HXDLIN(  88)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char3->get_width() * ((Float)0.8))),null());
HXLINE(  89)		this->add(this->char3);
HXLINE(  91)		this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(350) ),this->charselect,true);
HXLINE(  92)		 ::Character _hx_tmp1 = this->char1;
HXDLIN(  92)		_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE(  93)		this->add(this->char1);
HXLINE(  95)		this->char2 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(30) ),this->charselect2,false);
HXLINE(  96)		 ::Character _hx_tmp2 = this->char2;
HXDLIN(  96)		_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE(  97)		this->add(this->char2);
HXLINE(  99)		this->versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,HX_("Controls - Zooms E/Q",4a,9c,cb,c4),12,null());
HXLINE( 100)		this->versionShit->scrollFactor->set(null(),null());
HXLINE( 101)		this->versionShit->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 102)		this->add(this->versionShit);
HXLINE( 105)		this->eventName =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,9,30,80,HX_("layername",9c,b0,53,a0),null(),null(),null(),null());
HXLINE( 106)		this->eventName2 =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,109,30,80,HX_("image",5b,1f,69,bd),null(),null(),null(),null());
HXLINE( 107)		this->eventName3 =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,9,80,80,HX_("x",78,00,00,00),null(),null(),null(),null());
HXLINE( 108)		this->eventName4 =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,109,80,80,HX_("y",79,00,00,00),null(),null(),null(),null());
HXLINE( 110)		 ::flixel::ui::FlxButton hmm =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,9,160,HX_("Add Layer",52,1e,bc,f3),this->addStageLayer_dyn());
HXLINE( 111)		this->eventName5 =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,109,160,80,HX_("ModName",0d,66,7c,ab),null(),null(),null(),null());
HXLINE( 113)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Stage",9e,da,38,17))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Stage",9e,da,38,17))));
HXLINE( 117)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE( 118)		this->UI_box->scrollFactor->set(null(),null());
HXLINE( 119)		this->UI_box->resize(( (Float)(300) ),( (Float)(400) ));
HXLINE( 120)		this->UI_box->set_x(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 40));
HXLINE( 121)		this->UI_box->set_y(( (Float)(20) ));
HXLINE( 122)		this->add(this->UI_box);
HXLINE( 123)		{
HXLINE( 123)			 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN( 123)			_g->set_x((_g->x + 250));
            		}
HXLINE( 124)		this->UI_box->add(this->eventName).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 125)		this->UI_box->add(this->eventName2).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 126)		this->UI_box->add(this->eventName3).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 127)		this->UI_box->add(this->eventName4).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 128)		this->UI_box->add(this->eventName5).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 129)		this->UI_box->add(hmm).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 131)		 ::flixel::ui::FlxButton save =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,100,150,HX_("Save",5d,b7,26,37),this->saveStage_dyn());
HXLINE( 132)		this->add(save);
HXLINE( 133)		this->super::create();
            	}


void StageEditor_obj::nullFunction(){
            	HX_STACKFRAME(&_hx_pos_6657529c24980bbf_137_nullFunction)
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditor_obj,nullFunction,(void))

void StageEditor_obj::addStageLayer(){
            	HX_GC_STACKFRAME(&_hx_pos_6657529c24980bbf_142_addStageLayer)
HXLINE( 143)		this->remove(this->char1,null());
HXLINE( 144)		this->remove(this->char2,null());
HXLINE( 145)		this->remove(this->char3,null());
HXLINE( 146)		Float stagenewlayer = ::Std_obj::parseFloat(this->eventName3->text);
HXDLIN( 146)		 ::flixel::FlxSprite stagenewlayer1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,stagenewlayer,::Std_obj::parseFloat(this->eventName4->text),null());
HXDLIN( 146)		::String library = null();
HXDLIN( 146)		 ::flixel::FlxSprite stagenewlayer2 = stagenewlayer1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + this->eventName2->text) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 147)		stagenewlayer2->scrollFactor->set(0,0);
HXLINE( 148)		stagenewlayer2->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 149)		stagenewlayer2->updateHitbox();
HXLINE( 150)		this->add(stagenewlayer2);
HXLINE( 151)		this->add(this->char1);
HXLINE( 152)		this->add(this->char2);
HXLINE( 153)		this->add(this->char3);
HXLINE( 155)		::engineEditors::StageEditor_obj::code = ((((((((((::engineEditors::StageEditor_obj::code + HX_("{",7b,00,00,00)) + HX_("\n",0a,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + HX_("name",4b,72,ff,48)) + ::engineEditors::StageEditor_obj::hmmm) + HX_(":",3a,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + this->eventName->text) + ::engineEditors::StageEditor_obj::hmmm) + HX_(",",2c,00,00,00));
HXLINE( 156)		::engineEditors::StageEditor_obj::code = (((((((::engineEditors::StageEditor_obj::code + HX_("\n",0a,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + HX_("x",78,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + HX_(":",3a,00,00,00)) + this->eventName3->text) + HX_(",",2c,00,00,00));
HXLINE( 157)		::engineEditors::StageEditor_obj::code = (((((((::engineEditors::StageEditor_obj::code + HX_("\n",0a,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + HX_("y",79,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + HX_(":",3a,00,00,00)) + this->eventName4->text) + HX_(",",2c,00,00,00));
HXLINE( 158)		::engineEditors::StageEditor_obj::code = (((((((((::engineEditors::StageEditor_obj::code + HX_("\n",0a,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + HX_("image",5b,1f,69,bd)) + ::engineEditors::StageEditor_obj::hmmm) + HX_(":",3a,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + this->eventName2->text) + ::engineEditors::StageEditor_obj::hmmm) + HX_(",",2c,00,00,00));
HXLINE( 159)		::engineEditors::StageEditor_obj::code = ((((((::engineEditors::StageEditor_obj::code + HX_("\n",0a,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + HX_("active",c6,41,46,16)) + ::engineEditors::StageEditor_obj::hmmm) + HX_(": false",3d,a9,97,32)) + HX_(",",2c,00,00,00));
HXLINE( 160)		::engineEditors::StageEditor_obj::code = ((((((::engineEditors::StageEditor_obj::code + HX_("\n",0a,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + HX_("scrollFactor",bc,ec,cf,3b)) + ::engineEditors::StageEditor_obj::hmmm) + HX_(": true",f4,24,89,ea)) + HX_(",",2c,00,00,00));
HXLINE( 161)		::engineEditors::StageEditor_obj::code = ((((((::engineEditors::StageEditor_obj::code + HX_("\n",0a,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + HX_("animated",a3,72,f2,88)) + ::engineEditors::StageEditor_obj::hmmm) + HX_(": false",3d,a9,97,32)) + HX_(",",2c,00,00,00));
HXLINE( 162)		::engineEditors::StageEditor_obj::code = ((((((((::engineEditors::StageEditor_obj::code + HX_("\n",0a,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + HX_("sparrowatlas",bf,e5,9f,f1)) + ::engineEditors::StageEditor_obj::hmmm) + HX_(":",3a,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + ::engineEditors::StageEditor_obj::hmmm) + HX_(",",2c,00,00,00));
HXLINE( 163)		::engineEditors::StageEditor_obj::code = (((((((::engineEditors::StageEditor_obj::code + HX_("\n",0a,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + HX_("startanim",73,d3,8b,0e)) + ::engineEditors::StageEditor_obj::hmmm) + HX_(":",3a,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + ::engineEditors::StageEditor_obj::hmmm);
HXLINE( 164)		::engineEditors::StageEditor_obj::code = ((::engineEditors::StageEditor_obj::code + HX_("\n",0a,00,00,00)) + HX_("}",7d,00,00,00));
HXLINE( 165)		::engineEditors::StageEditor_obj::code = ((::engineEditors::StageEditor_obj::code + HX_("\n",0a,00,00,00)) + HX_(",",2c,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditor_obj,addStageLayer,(void))

void StageEditor_obj::saveStage(){
            	HX_STACKFRAME(&_hx_pos_6657529c24980bbf_169_saveStage)
HXLINE( 170)		::String content = ::sys::io::File_obj::getContent(HX_("assets/data/stageList.txt",a5,fe,b7,7c));
HXLINE( 171)		::engineEditors::StageEditor_obj::code = ((::engineEditors::StageEditor_obj::code + HX_("\n",0a,00,00,00)) + HX_("    ]",5d,c8,11,82));
HXLINE( 172)		::engineEditors::StageEditor_obj::code = ((::engineEditors::StageEditor_obj::code + HX_("\n",0a,00,00,00)) + HX_("}",7d,00,00,00));
HXLINE( 173)		::sys::io::File_obj::saveContent(((((HX_("mods/",9e,2f,58,0c) + this->eventName5->text) + HX_("/custom/custom_stages/",1b,b8,99,c7)) + this->eventName->text) + HX_(".json",56,f1,d6,c2)),::engineEditors::StageEditor_obj::code);
HXLINE( 174)		::sys::io::File_obj::saveContent(HX_("assets/data/stageList.txt",a5,fe,b7,7c),((content + HX_("\n",0a,00,00,00)) + this->eventName->text));
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditor_obj,saveStage,(void))

void StageEditor_obj::PasteFunction(){
            	HX_STACKFRAME(&_hx_pos_6657529c24980bbf_178_PasteFunction)
HXDLIN( 178)		 ::Dynamic c = ::openfl::desktop::Clipboard_obj::get_generalClipboard()->getData(2,1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditor_obj,PasteFunction,(void))

void StageEditor_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_6657529c24980bbf_182_update)
HXLINE( 183)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 183)		if (_this->keyManager->checkStatusUnsafe(27,_this->status)) {
HXLINE( 185)			 ::flixel::FlxState nextState =  ::EngineEditorsState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 185)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 185)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 188)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 188)		if (_this1->keyManager->checkStatusUnsafe(69,_this1->status)) {
HXLINE( 190)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 190)			_g->set_zoom((_g->zoom + (elapsed * ::flixel::FlxG_obj::camera->zoom)));
            		}
HXLINE( 192)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 192)		if (_this2->keyManager->checkStatusUnsafe(81,_this2->status)) {
HXLINE( 194)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 194)			_g->set_zoom((_g->zoom - (elapsed * ::flixel::FlxG_obj::camera->zoom)));
            		}
HXLINE( 196)		this->super::update(elapsed);
            	}


::String StageEditor_obj::hmmm;

::String StageEditor_obj::code;


::hx::ObjectPtr< StageEditor_obj > StageEditor_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< StageEditor_obj > __this = new StageEditor_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< StageEditor_obj > StageEditor_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	StageEditor_obj *__this = (StageEditor_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StageEditor_obj), true, "engineEditors.StageEditor"));
	*(void **)__this = StageEditor_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

StageEditor_obj::StageEditor_obj()
{
}

void StageEditor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StageEditor);
	HX_MARK_MEMBER_NAME(char1,"char1");
	HX_MARK_MEMBER_NAME(char2,"char2");
	HX_MARK_MEMBER_NAME(char3,"char3");
	HX_MARK_MEMBER_NAME(charnew,"charnew");
	HX_MARK_MEMBER_NAME(charselect,"charselect");
	HX_MARK_MEMBER_NAME(charselect2,"charselect2");
	HX_MARK_MEMBER_NAME(versionShit,"versionShit");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(bg2,"bg2");
	HX_MARK_MEMBER_NAME(front,"front");
	HX_MARK_MEMBER_NAME(eventName,"eventName");
	HX_MARK_MEMBER_NAME(eventName2,"eventName2");
	HX_MARK_MEMBER_NAME(eventName3,"eventName3");
	HX_MARK_MEMBER_NAME(eventName4,"eventName4");
	HX_MARK_MEMBER_NAME(eventName5,"eventName5");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StageEditor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(char1,"char1");
	HX_VISIT_MEMBER_NAME(char2,"char2");
	HX_VISIT_MEMBER_NAME(char3,"char3");
	HX_VISIT_MEMBER_NAME(charnew,"charnew");
	HX_VISIT_MEMBER_NAME(charselect,"charselect");
	HX_VISIT_MEMBER_NAME(charselect2,"charselect2");
	HX_VISIT_MEMBER_NAME(versionShit,"versionShit");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(bg2,"bg2");
	HX_VISIT_MEMBER_NAME(front,"front");
	HX_VISIT_MEMBER_NAME(eventName,"eventName");
	HX_VISIT_MEMBER_NAME(eventName2,"eventName2");
	HX_VISIT_MEMBER_NAME(eventName3,"eventName3");
	HX_VISIT_MEMBER_NAME(eventName4,"eventName4");
	HX_VISIT_MEMBER_NAME(eventName5,"eventName5");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val StageEditor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bg2") ) { return ::hx::Val( bg2 ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { return ::hx::Val( char1 ); }
		if (HX_FIELD_EQ(inName,"char2") ) { return ::hx::Val( char2 ); }
		if (HX_FIELD_EQ(inName,"char3") ) { return ::hx::Val( char3 ); }
		if (HX_FIELD_EQ(inName,"front") ) { return ::hx::Val( front ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"charnew") ) { return ::hx::Val( charnew ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventName") ) { return ::hx::Val( eventName ); }
		if (HX_FIELD_EQ(inName,"saveStage") ) { return ::hx::Val( saveStage_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"charselect") ) { return ::hx::Val( charselect ); }
		if (HX_FIELD_EQ(inName,"eventName2") ) { return ::hx::Val( eventName2 ); }
		if (HX_FIELD_EQ(inName,"eventName3") ) { return ::hx::Val( eventName3 ); }
		if (HX_FIELD_EQ(inName,"eventName4") ) { return ::hx::Val( eventName4 ); }
		if (HX_FIELD_EQ(inName,"eventName5") ) { return ::hx::Val( eventName5 ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"charselect2") ) { return ::hx::Val( charselect2 ); }
		if (HX_FIELD_EQ(inName,"versionShit") ) { return ::hx::Val( versionShit ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"nullFunction") ) { return ::hx::Val( nullFunction_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"addStageLayer") ) { return ::hx::Val( addStageLayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"PasteFunction") ) { return ::hx::Val( PasteFunction_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool StageEditor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"hmmm") ) { outValue = ( hmmm ); return true; }
		if (HX_FIELD_EQ(inName,"code") ) { outValue = ( code ); return true; }
	}
	return false;
}

::hx::Val StageEditor_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bg2") ) { bg2=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { char1=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"char2") ) { char2=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"char3") ) { char3=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"front") ) { front=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"charnew") ) { charnew=inValue.Cast<  ::Character >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventName") ) { eventName=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"charselect") ) { charselect=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName2") ) { eventName2=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName3") ) { eventName3=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName4") ) { eventName4=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName5") ) { eventName5=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"charselect2") ) { charselect2=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"versionShit") ) { versionShit=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool StageEditor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"hmmm") ) { hmmm=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"code") ) { code=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void StageEditor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("char1",9b,9c,b3,45));
	outFields->push(HX_("char2",9c,9c,b3,45));
	outFields->push(HX_("char3",9d,9c,b3,45));
	outFields->push(HX_("charnew",4a,db,76,cf));
	outFields->push(HX_("charselect",52,3e,be,a9));
	outFields->push(HX_("charselect2",a0,49,b8,dc));
	outFields->push(HX_("versionShit",f8,4e,3b,e2));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("bg2",cd,b6,4a,00));
	outFields->push(HX_("front",a9,18,8e,06));
	outFields->push(HX_("eventName",85,7b,0c,f8));
	outFields->push(HX_("eventName2",0d,99,df,12));
	outFields->push(HX_("eventName3",0e,99,df,12));
	outFields->push(HX_("eventName4",0f,99,df,12));
	outFields->push(HX_("eventName5",10,99,df,12));
	outFields->push(HX_("UI_box",60,07,ac,43));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StageEditor_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(StageEditor_obj,char1),HX_("char1",9b,9c,b3,45)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(StageEditor_obj,char2),HX_("char2",9c,9c,b3,45)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(StageEditor_obj,char3),HX_("char3",9d,9c,b3,45)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(StageEditor_obj,charnew),HX_("charnew",4a,db,76,cf)},
	{::hx::fsString,(int)offsetof(StageEditor_obj,charselect),HX_("charselect",52,3e,be,a9)},
	{::hx::fsString,(int)offsetof(StageEditor_obj,charselect2),HX_("charselect2",a0,49,b8,dc)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(StageEditor_obj,versionShit),HX_("versionShit",f8,4e,3b,e2)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StageEditor_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StageEditor_obj,bg2),HX_("bg2",cd,b6,4a,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StageEditor_obj,front),HX_("front",a9,18,8e,06)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(StageEditor_obj,eventName),HX_("eventName",85,7b,0c,f8)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(StageEditor_obj,eventName2),HX_("eventName2",0d,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(StageEditor_obj,eventName3),HX_("eventName3",0e,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(StageEditor_obj,eventName4),HX_("eventName4",0f,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(StageEditor_obj,eventName5),HX_("eventName5",10,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(StageEditor_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo StageEditor_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &StageEditor_obj::hmmm,HX_("hmmm",a5,45,11,45)},
	{::hx::fsString,(void *) &StageEditor_obj::code,HX_("code",2d,b1,c4,41)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String StageEditor_obj_sMemberFields[] = {
	HX_("char1",9b,9c,b3,45),
	HX_("char2",9c,9c,b3,45),
	HX_("char3",9d,9c,b3,45),
	HX_("charnew",4a,db,76,cf),
	HX_("charselect",52,3e,be,a9),
	HX_("charselect2",a0,49,b8,dc),
	HX_("versionShit",f8,4e,3b,e2),
	HX_("bg",c5,55,00,00),
	HX_("bg2",cd,b6,4a,00),
	HX_("front",a9,18,8e,06),
	HX_("eventName",85,7b,0c,f8),
	HX_("eventName2",0d,99,df,12),
	HX_("eventName3",0e,99,df,12),
	HX_("eventName4",0f,99,df,12),
	HX_("eventName5",10,99,df,12),
	HX_("UI_box",60,07,ac,43),
	HX_("create",fc,66,0f,7c),
	HX_("nullFunction",bf,64,2f,31),
	HX_("addStageLayer",b4,1f,5a,2d),
	HX_("saveStage",41,72,b8,12),
	HX_("PasteFunction",6b,15,9b,e2),
	HX_("update",09,86,05,87),
	::String(null()) };

static void StageEditor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StageEditor_obj::hmmm,"hmmm");
	HX_MARK_MEMBER_NAME(StageEditor_obj::code,"code");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StageEditor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StageEditor_obj::hmmm,"hmmm");
	HX_VISIT_MEMBER_NAME(StageEditor_obj::code,"code");
};

#endif

::hx::Class StageEditor_obj::__mClass;

static ::String StageEditor_obj_sStaticFields[] = {
	HX_("hmmm",a5,45,11,45),
	HX_("code",2d,b1,c4,41),
	::String(null())
};

void StageEditor_obj::__register()
{
	StageEditor_obj _hx_dummy;
	StageEditor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("engineEditors.StageEditor",01,36,7d,8e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StageEditor_obj::__GetStatic;
	__mClass->mSetStaticField = &StageEditor_obj::__SetStatic;
	__mClass->mMarkFunc = StageEditor_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(StageEditor_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StageEditor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StageEditor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StageEditor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StageEditor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StageEditor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void StageEditor_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_6657529c24980bbf_49_boot)
HXDLIN(  49)		hmmm = ::sys::io::File_obj::getContent(HX_("assets/images/no/novar/a.txt",f7,a9,b5,c0));
            	}
{
            	HX_STACKFRAME(&_hx_pos_6657529c24980bbf_50_boot)
HXDLIN(  50)		code = ((((((((((HX_("{",7b,00,00,00) + HX_("\n",0a,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + HX_("camZoom",c2,f6,e9,db)) + ::engineEditors::StageEditor_obj::hmmm) + HX_(": 1,",01,d3,6e,26)) + HX_("\n",0a,00,00,00)) + ::engineEditors::StageEditor_obj::hmmm) + HX_("stagesprites",d0,31,91,99)) + ::engineEditors::StageEditor_obj::hmmm) + HX_(": [",f5,1e,2c,00));
            	}
}

} // end namespace engineEditors
