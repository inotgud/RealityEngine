// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MenuCharacter
#include <MenuCharacter.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_engineEditors_WeekEditor
#include <engineEditors/WeekEditor.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_aab9e762adf212e0_49_new,"engineEditors.WeekEditor","new",0x85d864fd,"engineEditors.WeekEditor.new","engineEditors/WeekEditor.hx",49,0xfa615c72)
HX_LOCAL_STACK_FRAME(_hx_pos_aab9e762adf212e0_109_create,"engineEditors.WeekEditor","create",0x7c65d27f,"engineEditors.WeekEditor.create","engineEditors/WeekEditor.hx",109,0xfa615c72)
HX_LOCAL_STACK_FRAME(_hx_pos_aab9e762adf212e0_126_create,"engineEditors.WeekEditor","create",0x7c65d27f,"engineEditors.WeekEditor.create","engineEditors/WeekEditor.hx",126,0xfa615c72)
HX_LOCAL_STACK_FRAME(_hx_pos_aab9e762adf212e0_129_create,"engineEditors.WeekEditor","create",0x7c65d27f,"engineEditors.WeekEditor.create","engineEditors/WeekEditor.hx",129,0xfa615c72)
HX_LOCAL_STACK_FRAME(_hx_pos_aab9e762adf212e0_132_create,"engineEditors.WeekEditor","create",0x7c65d27f,"engineEditors.WeekEditor.create","engineEditors/WeekEditor.hx",132,0xfa615c72)
HX_LOCAL_STACK_FRAME(_hx_pos_aab9e762adf212e0_136_create,"engineEditors.WeekEditor","create",0x7c65d27f,"engineEditors.WeekEditor.create","engineEditors/WeekEditor.hx",136,0xfa615c72)
HX_LOCAL_STACK_FRAME(_hx_pos_aab9e762adf212e0_85_create,"engineEditors.WeekEditor","create",0x7c65d27f,"engineEditors.WeekEditor.create","engineEditors/WeekEditor.hx",85,0xfa615c72)
HX_LOCAL_STACK_FRAME(_hx_pos_aab9e762adf212e0_197_testThisWeek,"engineEditors.WeekEditor","testThisWeek",0x53ebafa7,"engineEditors.WeekEditor.testThisWeek","engineEditors/WeekEditor.hx",197,0xfa615c72)
HX_LOCAL_STACK_FRAME(_hx_pos_aab9e762adf212e0_204_eventHandlerChange,"engineEditors.WeekEditor","eventHandlerChange",0xc16dcc63,"engineEditors.WeekEditor.eventHandlerChange","engineEditors/WeekEditor.hx",204,0xfa615c72)
HX_LOCAL_STACK_FRAME(_hx_pos_aab9e762adf212e0_208_eventHandlerChange2,"engineEditors.WeekEditor","eventHandlerChange2",0x7ea50a6f,"engineEditors.WeekEditor.eventHandlerChange2","engineEditors/WeekEditor.hx",208,0xfa615c72)
HX_LOCAL_STACK_FRAME(_hx_pos_aab9e762adf212e0_212_eventHandlerChange3,"engineEditors.WeekEditor","eventHandlerChange3",0x7ea50a70,"engineEditors.WeekEditor.eventHandlerChange3","engineEditors/WeekEditor.hx",212,0xfa615c72)
HX_LOCAL_STACK_FRAME(_hx_pos_aab9e762adf212e0_215_createWeek,"engineEditors.WeekEditor","createWeek",0x92690a13,"engineEditors.WeekEditor.createWeek","engineEditors/WeekEditor.hx",215,0xfa615c72)
HX_LOCAL_STACK_FRAME(_hx_pos_aab9e762adf212e0_239_update,"engineEditors.WeekEditor","update",0x875bf18c,"engineEditors.WeekEditor.update","engineEditors/WeekEditor.hx",239,0xfa615c72)
HX_LOCAL_STACK_FRAME(_hx_pos_aab9e762adf212e0_247_beatHit,"engineEditors.WeekEditor","beatHit",0xbf4c919a,"engineEditors.WeekEditor.beatHit","engineEditors/WeekEditor.hx",247,0xfa615c72)
namespace engineEditors{

void WeekEditor_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_aab9e762adf212e0_49_new)
HXDLIN(  49)		super::__construct(TransIn,TransOut);
            	}

Dynamic WeekEditor_obj::__CreateEmpty() { return new WeekEditor_obj; }

void *WeekEditor_obj::_hx_vtable = 0;

Dynamic WeekEditor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WeekEditor_obj > _hx_result = new WeekEditor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool WeekEditor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x6d179381 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void WeekEditor_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_aab9e762adf212e0_109_create)
HXLINE( 109)			 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 109)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 109)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::engineEditors::WeekEditor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_aab9e762adf212e0_126_create)
HXLINE( 126)			_gthis->song1 = _gthis->eventName->text;
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::engineEditors::WeekEditor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_aab9e762adf212e0_129_create)
HXLINE( 129)			_gthis->song2 = _gthis->eventName2->text;
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::engineEditors::WeekEditor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_aab9e762adf212e0_132_create)
HXLINE( 132)			_gthis->song3 = _gthis->eventName3->text;
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::engineEditors::WeekEditor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_aab9e762adf212e0_136_create)
HXLINE( 136)			_gthis->name4 = _gthis->eventName5->text;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_aab9e762adf212e0_85_create)
HXLINE(  84)		 ::engineEditors::WeekEditor _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  87)		this->content = ::sys::io::File_obj::getContent(HX_("assets/custom/custom_weeks/weekList.txt",00,52,73,15));
HXLINE(  90)		::DiscordClient_obj::changePresence(HX_("Week Editor",59,6c,6c,6d),null(),null(),null(),null());
HXLINE(  93)		 ::flixel::FlxSprite yellowBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,56,null())->makeGraphic(::flixel::FlxG_obj::width,400,-405679,null(),null());
HXLINE(  94)		this->add(yellowBG);
HXLINE(  96)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Settings",03,39,ef,64))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Settings",03,39,ef,64))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Week",14,8c,ce,39))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Week",14,8c,ce,39))));
HXLINE( 101)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE( 102)		this->UI_box->scrollFactor->set(null(),null());
HXLINE( 103)		this->UI_box->resize(( (Float)(400) ),( (Float)(300) ));
HXLINE( 104)		this->UI_box->set_x(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 40));
HXLINE( 105)		this->UI_box->set_y(( (Float)(20) ));
HXLINE( 106)		this->super::create();
HXLINE( 108)		 ::flixel::ui::FlxButton close =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,1150,20,HX_("X",58,00,00,00), ::Dynamic(new _hx_Closure_0()));
HXLINE( 111)		close->set_color(-65536);
HXLINE( 112)		this->add(close);
HXLINE( 114)		this->eventName =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,9,30,80,HX_("song1",bc,36,c7,80),null(),null(),null(),null());
HXLINE( 115)		this->eventName2 =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,109,30,80,HX_("song2",bd,36,c7,80),null(),null(),null(),null());
HXLINE( 116)		this->eventName3 =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,209,30,80,HX_("song3",be,36,c7,80),null(),null(),null(),null());
HXLINE( 119)		this->eventName5 =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,9,70,80,HX_("week_name",b6,d9,56,cb),null(),null(),null(),null());
HXLINE( 122)		this->createButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,159,70,HX_("Create Week",98,7b,21,21),this->createWeek_dyn());
HXLINE( 125)		 ::flixel::ui::FlxButton hmm =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,650,20,HX_("Set Song 1",24,ec,0a,11), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 128)		 ::flixel::ui::FlxButton hmm2 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,750,20,HX_("Set Song 2",25,ec,0a,11), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 131)		 ::flixel::ui::FlxButton hmm3 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,850,20,HX_("Set Song 3",26,ec,0a,11), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE( 135)		 ::flixel::ui::FlxButton hmm4 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,950,20,HX_("Set Week Name",d9,df,ca,0d), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE( 139)		::Array< ::Dynamic> tabs1 = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Week",14,8c,ce,39))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Week",14,8c,ce,39))));
HXLINE( 143)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs1,null(),true,null(),null());
HXLINE( 144)		this->UI_box->scrollFactor->set(null(),null());
HXLINE( 145)		this->UI_box->resize(( (Float)(300) ),( (Float)(400) ));
HXLINE( 146)		this->UI_box->set_x(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 40));
HXLINE( 147)		this->UI_box->set_y(( (Float)(20) ));
HXLINE( 148)		this->add(this->UI_box);
HXLINE( 149)		{
HXLINE( 149)			 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN( 149)			_g->set_x((_g->x + 250));
            		}
HXLINE( 151)		this->UI_box->add(this->eventName).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 152)		this->UI_box->add(this->createButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 153)		this->UI_box->add(this->eventName5).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 154)		this->UI_box->add(this->eventName3).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 155)		this->UI_box->add(this->eventName2).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 157)		Float eng = (( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.05));
HXDLIN( 157)		Float yellowBG1 = yellowBG->x;
HXDLIN( 157)		 ::flixel::FlxSprite eng1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,eng,((yellowBG1 + yellowBG->get_height()) + 100),null());
HXLINE( 158)		eng1->loadGraphic(HX_("assets/images/Menu_Tracks.png",58,97,d1,a1),null(),null(),null(),null(),null());
HXLINE( 159)		this->add(eng1);
HXLINE( 161)		 ::flixel::text::FlxText rankText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,10,null(),null(),null(),null());
HXLINE( 162)		rankText->set_text(HX_("RANK: GREAT",9b,ee,9f,70));
HXLINE( 163)		rankText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,null(),null(),null(),null(),null());
HXLINE( 164)		{
HXLINE( 164)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 164)			if (::hx::IsNull( axes )) {
HXLINE( 164)				axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 164)			bool _hx_tmp;
HXDLIN( 164)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 164)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 164)					_hx_tmp = false;
            				}
            			}
HXDLIN( 164)			if (_hx_tmp) {
HXLINE( 164)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 164)				rankText->set_x(((( (Float)(_hx_tmp) ) - rankText->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 164)			bool _hx_tmp1;
HXDLIN( 164)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 164)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 164)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 164)			if (_hx_tmp1) {
HXLINE( 164)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 164)				rankText->set_y(((( (Float)(_hx_tmp) ) - rankText->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 166)		Float _hx_tmp2 = (( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.05));
HXDLIN( 166)		Float yellowBG2 = yellowBG->x;
HXDLIN( 166)		this->txtTracklist =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp2,((yellowBG2 + yellowBG->get_height()) + 100),0,HX_("",00,00,00,00),32,null());
HXLINE( 167)		this->txtTracklist->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 168)		this->txtTracklist->set_font(rankText->_font);
HXLINE( 169)		this->txtTracklist->set_color(-1747081);
HXLINE( 170)		this->add(this->txtTracklist);
HXLINE( 172)		Float _hx_tmp3 = (( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.05));
HXDLIN( 172)		Float yellowBG3 = yellowBG->x;
HXDLIN( 172)		this->txtTracklist2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp3,((yellowBG3 + yellowBG->get_height()) + 120),0,HX_("",00,00,00,00),32,null());
HXLINE( 173)		this->txtTracklist2->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 174)		this->txtTracklist2->set_font(rankText->_font);
HXLINE( 175)		this->txtTracklist2->set_color(-1747081);
HXLINE( 176)		this->add(this->txtTracklist2);
HXLINE( 178)		Float _hx_tmp4 = (( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.05));
HXDLIN( 178)		Float yellowBG4 = yellowBG->x;
HXDLIN( 178)		this->txtTracklist3 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp4,((yellowBG4 + yellowBG->get_height()) + 120),0,HX_("",00,00,00,00),32,null());
HXLINE( 179)		this->txtTracklist3->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 180)		this->txtTracklist3->set_font(rankText->_font);
HXLINE( 181)		this->txtTracklist3->set_color(-1747081);
HXLINE( 182)		this->add(this->txtTracklist3);
HXLINE( 184)		this->remove(this->grpWeekCharacters,null());
HXLINE( 185)		this->grpWeekCharacters =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 186)		 ::flixel::group::FlxTypedGroup _hx_tmp5 = this->grpWeekCharacters;
HXDLIN( 186)		_hx_tmp5->add( ::MenuCharacter_obj::__alloc( HX_CTX ,450,25,((Float)0.7),true)).StaticCast<  ::MenuCharacter >();
HXLINE( 187)		Dynamic( this->grpWeekCharacters->members->__get(0)).StaticCast<  ::MenuCharacter >()->setCharacter(HX_("tankman",f0,7d,78,3d));
HXLINE( 188)		this->add(this->grpWeekCharacters);
HXLINE( 190)		this->scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,0,HX_("WEEK SCORE: 49324858",77,e6,12,14),36,null());
HXLINE( 191)		this->scoreText->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),32,null(),null(),null(),null(),null());
HXLINE( 192)		this->add(this->scoreText);
            	}


void WeekEditor_obj::testThisWeek(){
            	HX_STACKFRAME(&_hx_pos_aab9e762adf212e0_197_testThisWeek)
HXLINE( 198)		this->txtTracklist->set_text(this->eventName->text);
HXLINE( 199)		this->txtTracklist2->set_text(this->eventName2->text);
HXLINE( 200)		this->txtTracklist3->set_text(this->eventName3->text);
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeekEditor_obj,testThisWeek,(void))

void WeekEditor_obj::eventHandlerChange(){
            	HX_STACKFRAME(&_hx_pos_aab9e762adf212e0_204_eventHandlerChange)
HXDLIN( 204)		this->txtTracklist->set_text(this->eventName->text);
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeekEditor_obj,eventHandlerChange,(void))

void WeekEditor_obj::eventHandlerChange2(){
            	HX_STACKFRAME(&_hx_pos_aab9e762adf212e0_208_eventHandlerChange2)
HXDLIN( 208)		this->txtTracklist2->set_text(this->eventName2->text);
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeekEditor_obj,eventHandlerChange2,(void))

void WeekEditor_obj::eventHandlerChange3(){
            	HX_STACKFRAME(&_hx_pos_aab9e762adf212e0_212_eventHandlerChange3)
HXDLIN( 212)		this->txtTracklist3->set_text(this->eventName3->text);
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeekEditor_obj,eventHandlerChange3,(void))

void WeekEditor_obj::createWeek(){
            	HX_GC_STACKFRAME(&_hx_pos_aab9e762adf212e0_215_createWeek)
HXLINE( 217)		::String abc = ::sys::io::File_obj::getContent(HX_("assets/images/no/examp.txt",90,b0,18,08));
HXLINE( 218)		::String abcd = ::sys::io::File_obj::getContent(HX_("assets/images/no/novar/a.txt",f7,a9,b5,c0));
HXLINE( 219)		::String ehmmm = ::sys::io::File_obj::getContent(HX_("assets/images/no/novar/b.txt",78,3e,1c,54));
HXLINE( 220)		this->txt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,::flixel::FlxG_obj::width,(((((((((((((((((((((abc + abcd) + this->eventName->text) + abcd) + HX_(",",2c,00,00,00)) + abcd) + this->eventName2->text) + abcd) + HX_(",",2c,00,00,00)) + abcd) + this->eventName3->text) + abcd) + HX_(" \r\n\t\t\t\t],",2c,18,5f,b3)) + HX_("\n",0a,00,00,00)) + abcd) + HX_("character",a9,db,d1,41)) + abcd) + HX_(": ",a6,32,00,00)) + abcd) + HX_("",00,00,00,00)) + abcd) + HX_("}",7d,00,00,00)),32,null());
HXLINE( 231)		::sys::io::File_obj::saveContent(((HX_("assets/custom/custom_weeks/",8c,1d,e5,80) + this->eventName5->text) + HX_(".json",56,f1,d6,c2)),this->txt->text);
HXLINE( 232)		::sys::FileSystem_obj::deleteFile(HX_("assets/custom/custom_weeks/weekList.txt",00,52,73,15));
HXLINE( 233)		::sys::io::File_obj::saveContent(HX_("assets/custom/custom_weeks/weekList.txt",00,52,73,15),((this->content + HX_("\n",0a,00,00,00)) + this->eventName5->text));
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeekEditor_obj,createWeek,(void))

void WeekEditor_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_aab9e762adf212e0_239_update)
HXLINE( 240)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 240)		if (_this->keyManager->checkStatusUnsafe(27,_this->status)) {
HXLINE( 242)			 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 242)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 242)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 244)		this->super::update(elapsed);
            	}


void WeekEditor_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_aab9e762adf212e0_247_beatHit)
HXLINE( 248)		this->super::beatHit();
HXLINE( 250)		if ((::hx::Mod(this->curBeat,2) == 0)) {
HXLINE( 252)			Dynamic( this->grpWeekCharacters->members->__get(0)).StaticCast<  ::MenuCharacter >()->bopHead(null());
            		}
            	}



::hx::ObjectPtr< WeekEditor_obj > WeekEditor_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< WeekEditor_obj > __this = new WeekEditor_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< WeekEditor_obj > WeekEditor_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	WeekEditor_obj *__this = (WeekEditor_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(WeekEditor_obj), true, "engineEditors.WeekEditor"));
	*(void **)__this = WeekEditor_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

WeekEditor_obj::WeekEditor_obj()
{
}

void WeekEditor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WeekEditor);
	HX_MARK_MEMBER_NAME(difficultySelectors,"difficultySelectors");
	HX_MARK_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_MARK_MEMBER_NAME(leftArrow,"leftArrow");
	HX_MARK_MEMBER_NAME(rightArrow,"rightArrow");
	HX_MARK_MEMBER_NAME(txt,"txt");
	HX_MARK_MEMBER_NAME(txtTracklist,"txtTracklist");
	HX_MARK_MEMBER_NAME(txtTracklist2,"txtTracklist2");
	HX_MARK_MEMBER_NAME(txtTracklist3,"txtTracklist3");
	HX_MARK_MEMBER_NAME(eventName,"eventName");
	HX_MARK_MEMBER_NAME(eventName2,"eventName2");
	HX_MARK_MEMBER_NAME(eventName3,"eventName3");
	HX_MARK_MEMBER_NAME(eventName4,"eventName4");
	HX_MARK_MEMBER_NAME(eventName5,"eventName5");
	HX_MARK_MEMBER_NAME(createButton,"createButton");
	HX_MARK_MEMBER_NAME(testButton,"testButton");
	HX_MARK_MEMBER_NAME(song1,"song1");
	HX_MARK_MEMBER_NAME(song2,"song2");
	HX_MARK_MEMBER_NAME(song3,"song3");
	HX_MARK_MEMBER_NAME(name4,"name4");
	HX_MARK_MEMBER_NAME(content,"content");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(UI_options,"UI_options");
	HX_MARK_MEMBER_NAME(grpWeekCharacters,"grpWeekCharacters");
	HX_MARK_MEMBER_NAME(scoreText,"scoreText");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void WeekEditor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(difficultySelectors,"difficultySelectors");
	HX_VISIT_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_VISIT_MEMBER_NAME(leftArrow,"leftArrow");
	HX_VISIT_MEMBER_NAME(rightArrow,"rightArrow");
	HX_VISIT_MEMBER_NAME(txt,"txt");
	HX_VISIT_MEMBER_NAME(txtTracklist,"txtTracklist");
	HX_VISIT_MEMBER_NAME(txtTracklist2,"txtTracklist2");
	HX_VISIT_MEMBER_NAME(txtTracklist3,"txtTracklist3");
	HX_VISIT_MEMBER_NAME(eventName,"eventName");
	HX_VISIT_MEMBER_NAME(eventName2,"eventName2");
	HX_VISIT_MEMBER_NAME(eventName3,"eventName3");
	HX_VISIT_MEMBER_NAME(eventName4,"eventName4");
	HX_VISIT_MEMBER_NAME(eventName5,"eventName5");
	HX_VISIT_MEMBER_NAME(createButton,"createButton");
	HX_VISIT_MEMBER_NAME(testButton,"testButton");
	HX_VISIT_MEMBER_NAME(song1,"song1");
	HX_VISIT_MEMBER_NAME(song2,"song2");
	HX_VISIT_MEMBER_NAME(song3,"song3");
	HX_VISIT_MEMBER_NAME(name4,"name4");
	HX_VISIT_MEMBER_NAME(content,"content");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(UI_options,"UI_options");
	HX_VISIT_MEMBER_NAME(grpWeekCharacters,"grpWeekCharacters");
	HX_VISIT_MEMBER_NAME(scoreText,"scoreText");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val WeekEditor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"txt") ) { return ::hx::Val( txt ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"song1") ) { return ::hx::Val( song1 ); }
		if (HX_FIELD_EQ(inName,"song2") ) { return ::hx::Val( song2 ); }
		if (HX_FIELD_EQ(inName,"song3") ) { return ::hx::Val( song3 ); }
		if (HX_FIELD_EQ(inName,"name4") ) { return ::hx::Val( name4 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { return ::hx::Val( content ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"leftArrow") ) { return ::hx::Val( leftArrow ); }
		if (HX_FIELD_EQ(inName,"eventName") ) { return ::hx::Val( eventName ); }
		if (HX_FIELD_EQ(inName,"scoreText") ) { return ::hx::Val( scoreText ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightArrow") ) { return ::hx::Val( rightArrow ); }
		if (HX_FIELD_EQ(inName,"eventName2") ) { return ::hx::Val( eventName2 ); }
		if (HX_FIELD_EQ(inName,"eventName3") ) { return ::hx::Val( eventName3 ); }
		if (HX_FIELD_EQ(inName,"eventName4") ) { return ::hx::Val( eventName4 ); }
		if (HX_FIELD_EQ(inName,"eventName5") ) { return ::hx::Val( eventName5 ); }
		if (HX_FIELD_EQ(inName,"testButton") ) { return ::hx::Val( testButton ); }
		if (HX_FIELD_EQ(inName,"UI_options") ) { return ::hx::Val( UI_options ); }
		if (HX_FIELD_EQ(inName,"createWeek") ) { return ::hx::Val( createWeek_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"txtTracklist") ) { return ::hx::Val( txtTracklist ); }
		if (HX_FIELD_EQ(inName,"createButton") ) { return ::hx::Val( createButton ); }
		if (HX_FIELD_EQ(inName,"testThisWeek") ) { return ::hx::Val( testThisWeek_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { return ::hx::Val( sprDifficulty ); }
		if (HX_FIELD_EQ(inName,"txtTracklist2") ) { return ::hx::Val( txtTracklist2 ); }
		if (HX_FIELD_EQ(inName,"txtTracklist3") ) { return ::hx::Val( txtTracklist3 ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"grpWeekCharacters") ) { return ::hx::Val( grpWeekCharacters ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"eventHandlerChange") ) { return ::hx::Val( eventHandlerChange_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"difficultySelectors") ) { return ::hx::Val( difficultySelectors ); }
		if (HX_FIELD_EQ(inName,"eventHandlerChange2") ) { return ::hx::Val( eventHandlerChange2_dyn() ); }
		if (HX_FIELD_EQ(inName,"eventHandlerChange3") ) { return ::hx::Val( eventHandlerChange3_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val WeekEditor_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"txt") ) { txt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"song1") ) { song1=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"song2") ) { song2=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"song3") ) { song3=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name4") ) { name4=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { content=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"leftArrow") ) { leftArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName") ) { eventName=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreText") ) { scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightArrow") ) { rightArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName2") ) { eventName2=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName3") ) { eventName3=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName4") ) { eventName4=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName5") ) { eventName5=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"testButton") ) { testButton=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UI_options") ) { UI_options=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"txtTracklist") ) { txtTracklist=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"createButton") ) { createButton=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { sprDifficulty=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"txtTracklist2") ) { txtTracklist2=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"txtTracklist3") ) { txtTracklist3=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"grpWeekCharacters") ) { grpWeekCharacters=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"difficultySelectors") ) { difficultySelectors=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WeekEditor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("difficultySelectors",b9,fa,53,88));
	outFields->push(HX_("sprDifficulty",d0,6b,83,ba));
	outFields->push(HX_("leftArrow",42,68,6f,3a));
	outFields->push(HX_("rightArrow",4d,60,54,28));
	outFields->push(HX_("txt",70,6e,58,00));
	outFields->push(HX_("txtTracklist",d9,6f,f5,3e));
	outFields->push(HX_("txtTracklist2",39,6e,cc,d7));
	outFields->push(HX_("txtTracklist3",3a,6e,cc,d7));
	outFields->push(HX_("eventName",85,7b,0c,f8));
	outFields->push(HX_("eventName2",0d,99,df,12));
	outFields->push(HX_("eventName3",0e,99,df,12));
	outFields->push(HX_("eventName4",0f,99,df,12));
	outFields->push(HX_("eventName5",10,99,df,12));
	outFields->push(HX_("createButton",0e,a2,35,fc));
	outFields->push(HX_("testButton",e4,a7,d4,f2));
	outFields->push(HX_("song1",bc,36,c7,80));
	outFields->push(HX_("song2",bd,36,c7,80));
	outFields->push(HX_("song3",be,36,c7,80));
	outFields->push(HX_("name4",89,8f,84,96));
	outFields->push(HX_("content",39,8d,77,19));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("UI_options",33,4b,47,19));
	outFields->push(HX_("grpWeekCharacters",83,fc,76,59));
	outFields->push(HX_("scoreText",1f,7d,bd,dc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo WeekEditor_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(WeekEditor_obj,difficultySelectors),HX_("difficultySelectors",b9,fa,53,88)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(WeekEditor_obj,sprDifficulty),HX_("sprDifficulty",d0,6b,83,ba)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(WeekEditor_obj,leftArrow),HX_("leftArrow",42,68,6f,3a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(WeekEditor_obj,rightArrow),HX_("rightArrow",4d,60,54,28)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(WeekEditor_obj,txt),HX_("txt",70,6e,58,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(WeekEditor_obj,txtTracklist),HX_("txtTracklist",d9,6f,f5,3e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(WeekEditor_obj,txtTracklist2),HX_("txtTracklist2",39,6e,cc,d7)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(WeekEditor_obj,txtTracklist3),HX_("txtTracklist3",3a,6e,cc,d7)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(WeekEditor_obj,eventName),HX_("eventName",85,7b,0c,f8)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(WeekEditor_obj,eventName2),HX_("eventName2",0d,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(WeekEditor_obj,eventName3),HX_("eventName3",0e,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(WeekEditor_obj,eventName4),HX_("eventName4",0f,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(WeekEditor_obj,eventName5),HX_("eventName5",10,99,df,12)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(WeekEditor_obj,createButton),HX_("createButton",0e,a2,35,fc)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(WeekEditor_obj,testButton),HX_("testButton",e4,a7,d4,f2)},
	{::hx::fsString,(int)offsetof(WeekEditor_obj,song1),HX_("song1",bc,36,c7,80)},
	{::hx::fsString,(int)offsetof(WeekEditor_obj,song2),HX_("song2",bd,36,c7,80)},
	{::hx::fsString,(int)offsetof(WeekEditor_obj,song3),HX_("song3",be,36,c7,80)},
	{::hx::fsString,(int)offsetof(WeekEditor_obj,name4),HX_("name4",89,8f,84,96)},
	{::hx::fsString,(int)offsetof(WeekEditor_obj,content),HX_("content",39,8d,77,19)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(WeekEditor_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(WeekEditor_obj,UI_options),HX_("UI_options",33,4b,47,19)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(WeekEditor_obj,grpWeekCharacters),HX_("grpWeekCharacters",83,fc,76,59)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(WeekEditor_obj,scoreText),HX_("scoreText",1f,7d,bd,dc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *WeekEditor_obj_sStaticStorageInfo = 0;
#endif

static ::String WeekEditor_obj_sMemberFields[] = {
	HX_("difficultySelectors",b9,fa,53,88),
	HX_("sprDifficulty",d0,6b,83,ba),
	HX_("leftArrow",42,68,6f,3a),
	HX_("rightArrow",4d,60,54,28),
	HX_("txt",70,6e,58,00),
	HX_("txtTracklist",d9,6f,f5,3e),
	HX_("txtTracklist2",39,6e,cc,d7),
	HX_("txtTracklist3",3a,6e,cc,d7),
	HX_("eventName",85,7b,0c,f8),
	HX_("eventName2",0d,99,df,12),
	HX_("eventName3",0e,99,df,12),
	HX_("eventName4",0f,99,df,12),
	HX_("eventName5",10,99,df,12),
	HX_("createButton",0e,a2,35,fc),
	HX_("testButton",e4,a7,d4,f2),
	HX_("song1",bc,36,c7,80),
	HX_("song2",bd,36,c7,80),
	HX_("song3",be,36,c7,80),
	HX_("name4",89,8f,84,96),
	HX_("content",39,8d,77,19),
	HX_("UI_box",60,07,ac,43),
	HX_("UI_options",33,4b,47,19),
	HX_("grpWeekCharacters",83,fc,76,59),
	HX_("scoreText",1f,7d,bd,dc),
	HX_("create",fc,66,0f,7c),
	HX_("testThisWeek",e4,3f,f7,ae),
	HX_("eventHandlerChange",60,a8,22,72),
	HX_("eventHandlerChange2",d2,ab,30,6c),
	HX_("eventHandlerChange3",d3,ab,30,6c),
	HX_("createWeek",10,21,83,61),
	HX_("update",09,86,05,87),
	HX_("beatHit",7d,ea,04,74),
	::String(null()) };

::hx::Class WeekEditor_obj::__mClass;

void WeekEditor_obj::__register()
{
	WeekEditor_obj _hx_dummy;
	WeekEditor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("engineEditors.WeekEditor",8b,22,31,52);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(WeekEditor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< WeekEditor_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WeekEditor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WeekEditor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace engineEditors
