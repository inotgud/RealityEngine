// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_CreditsState
#include <CreditsState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_engineEditors_CreditsEditor
#include <engineEditors/CreditsEditor.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_52_new,"engineEditors.CreditsEditor","new",0xa5cb434f,"engineEditors.CreditsEditor.new","engineEditors/CreditsEditor.hx",52,0x56ecad02)
static const ::String _hx_array_data_905defdd_1[] = {
	HX_("Credit Name",92,33,b1,fc),
};
HX_LOCAL_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_125_create,"engineEditors.CreditsEditor","create",0x5345336d,"engineEditors.CreditsEditor.create","engineEditors/CreditsEditor.hx",125,0x56ecad02)
HX_LOCAL_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_77_create,"engineEditors.CreditsEditor","create",0x5345336d,"engineEditors.CreditsEditor.create","engineEditors/CreditsEditor.hx",77,0x56ecad02)
HX_LOCAL_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_161_buttonoption,"engineEditors.CreditsEditor","buttonoption",0xc1346e18,"engineEditors.CreditsEditor.buttonoption","engineEditors/CreditsEditor.hx",161,0x56ecad02)
HX_LOCAL_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_175_update,"engineEditors.CreditsEditor","update",0x5e3b527a,"engineEditors.CreditsEditor.update","engineEditors/CreditsEditor.hx",175,0x56ecad02)
HX_LOCAL_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_194_colorSet,"engineEditors.CreditsEditor","colorSet",0xf3862cb0,"engineEditors.CreditsEditor.colorSet","engineEditors/CreditsEditor.hx",194,0x56ecad02)
HX_LOCAL_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_203_colorSet,"engineEditors.CreditsEditor","colorSet",0xf3862cb0,"engineEditors.CreditsEditor.colorSet","engineEditors/CreditsEditor.hx",203,0x56ecad02)
HX_LOCAL_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_211_colorSet,"engineEditors.CreditsEditor","colorSet",0xf3862cb0,"engineEditors.CreditsEditor.colorSet","engineEditors/CreditsEditor.hx",211,0x56ecad02)
HX_LOCAL_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_219_colorSet,"engineEditors.CreditsEditor","colorSet",0xf3862cb0,"engineEditors.CreditsEditor.colorSet","engineEditors/CreditsEditor.hx",219,0x56ecad02)
HX_LOCAL_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_226_colorSet,"engineEditors.CreditsEditor","colorSet",0xf3862cb0,"engineEditors.CreditsEditor.colorSet","engineEditors/CreditsEditor.hx",226,0x56ecad02)
HX_LOCAL_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_235_colorSet,"engineEditors.CreditsEditor","colorSet",0xf3862cb0,"engineEditors.CreditsEditor.colorSet","engineEditors/CreditsEditor.hx",235,0x56ecad02)
HX_LOCAL_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_244_colorSet,"engineEditors.CreditsEditor","colorSet",0xf3862cb0,"engineEditors.CreditsEditor.colorSet","engineEditors/CreditsEditor.hx",244,0x56ecad02)
HX_LOCAL_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_253_colorSet,"engineEditors.CreditsEditor","colorSet",0xf3862cb0,"engineEditors.CreditsEditor.colorSet","engineEditors/CreditsEditor.hx",253,0x56ecad02)
HX_LOCAL_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_262_colorSet,"engineEditors.CreditsEditor","colorSet",0xf3862cb0,"engineEditors.CreditsEditor.colorSet","engineEditors/CreditsEditor.hx",262,0x56ecad02)
HX_LOCAL_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_271_colorSet,"engineEditors.CreditsEditor","colorSet",0xf3862cb0,"engineEditors.CreditsEditor.colorSet","engineEditors/CreditsEditor.hx",271,0x56ecad02)
HX_LOCAL_STACK_FRAME(_hx_pos_01fe7f18951f2e2e_183_colorSet,"engineEditors.CreditsEditor","colorSet",0xf3862cb0,"engineEditors.CreditsEditor.colorSet","engineEditors/CreditsEditor.hx",183,0x56ecad02)
namespace engineEditors{

void CreditsEditor_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_52_new)
HXLINE(  74)		this->content = ::sys::io::File_obj::getContent(HX_("assets/data/creditsList.txt",c1,45,85,c8));
HXLINE(  66)		this->options = ::Array_obj< ::String >::fromData( _hx_array_data_905defdd_1,1);
HXLINE(  52)		super::__construct(TransIn,TransOut);
            	}

Dynamic CreditsEditor_obj::__CreateEmpty() { return new CreditsEditor_obj; }

void *CreditsEditor_obj::_hx_vtable = 0;

Dynamic CreditsEditor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CreditsEditor_obj > _hx_result = new CreditsEditor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CreditsEditor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4cb18d43) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x4cb18d43;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void CreditsEditor_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::engineEditors::CreditsEditor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_125_create)
HXLINE( 143)			::sys::io::File_obj::saveContent(((HX_("assets/data/creditsColors/",3e,18,e4,88) + _gthis->eventName2->text) + HX_(".txt",02,3f,c0,1e)),_gthis->versionShit->text);
HXLINE( 144)			::sys::io::File_obj::copy(HX_("assets/images/credits/ExampleCredits.png",eb,93,10,fe),((HX_("assets/images/credits/",80,b3,19,9d) + _gthis->selec->text) + HX_(".png",3b,2d,bd,1e)));
HXLINE( 145)			::sys::FileSystem_obj::deleteFile(HX_("assets/data/creditsList.txt",c1,45,85,c8));
HXLINE( 146)			::sys::io::File_obj::saveContent(HX_("assets/data/creditsList.txt",c1,45,85,c8),((_gthis->content + HX_("\n",0a,00,00,00)) + _gthis->eventName->text));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_77_create)
HXLINE(  76)		 ::engineEditors::CreditsEditor _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  78)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  78)		::String library = null();
HXDLIN(  78)		this->bg = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menuDesat",26,91,04,72)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  79)		this->bg->set_color(-16181);
HXLINE(  80)		this->add(this->bg);
HXLINE(  82)		this->grpOptions =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  83)		this->add(this->grpOptions);
HXLINE(  85)		{
HXLINE(  85)			int _g = 0;
HXDLIN(  85)			int _g1 = this->options->length;
HXDLIN(  85)			while((_g < _g1)){
HXLINE(  85)				_g = (_g + 1);
HXDLIN(  85)				int i = (_g - 1);
HXLINE(  87)				this->creditText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),HX_("Credit Name",92,33,b1,fc),true,false,null(),null(),null());
HXLINE(  88)				this->creditText->isMenuItem = true;
HXLINE(  89)				this->creditText->targetY = ( (Float)(i) );
HXLINE(  90)				{
HXLINE(  90)					 ::Alphabet _g1 = this->creditText;
HXDLIN(  90)					_g1->set_x((_g1->x + 570));
            				}
HXLINE(  91)				this->grpOptions->add(this->creditText).StaticCast<  ::Alphabet >();
            			}
            		}
HXLINE(  95)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Credits",fa,35,af,e0))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Credits",fa,35,af,e0))));
HXLINE(  99)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE( 100)		this->UI_box->scrollFactor->set(null(),null());
HXLINE( 101)		this->UI_box->resize(( (Float)(300) ),( (Float)(400) ));
HXLINE( 102)		this->UI_box->set_x(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 40));
HXLINE( 103)		this->UI_box->set_y(( (Float)(220) ));
HXLINE( 104)		this->add(this->UI_box);
HXLINE( 105)		{
HXLINE( 105)			 ::flixel::addons::ui::FlxUITabMenu _g2 = this->UI_box;
HXDLIN( 105)			_g2->set_x((_g2->x + 250));
            		}
HXLINE( 107)		this->versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 49),0,HX_("WHITE",89,82,ab,47),12,null());
HXLINE( 108)		this->versionShit->scrollFactor->set(null(),null());
HXLINE( 109)		this->versionShit->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 110)		this->add(this->versionShit);
HXLINE( 111)		this->versionShit->set_visible(false);
HXLINE( 113)		this->selec =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1180,(::flixel::FlxG_obj::height - 20),0,HX_("",00,00,00,00),12,null());
HXLINE( 114)		this->selec->scrollFactor->set(null(),null());
HXLINE( 115)		this->selec->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 116)		this->add(this->selec);
HXLINE( 119)		this->eventName =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,109,20,80,HX_("Credit Name",92,33,b1,fc),null(),null(),null(),null());
HXLINE( 120)		this->UI_box->add(this->eventName).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 122)		this->eventName2 =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,109,100,80,HX_("Number of Credits",c8,bd,3e,40),null(),null(),null(),null());
HXLINE( 123)		this->UI_box->add(this->eventName2).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 125)		this->saveButtons =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,9,100,HX_("Save",5d,b7,26,37), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 148)		this->UI_box->add(this->saveButtons).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 150)		this->createButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,9,20,HX_("Change",90,05,07,ec),this->buttonoption_dyn());
HXLINE( 151)		this->UI_box->add(this->createButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 153)		this->setColorButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,9,60,HX_("Set Color",25,4e,db,75),this->colorSet_dyn());
HXLINE( 154)		this->UI_box->add(this->setColorButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 156)		this->super::create();
            	}


void CreditsEditor_obj::buttonoption(){
            	HX_GC_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_161_buttonoption)
HXDLIN( 161)		int _g = 0;
HXDLIN( 161)		int _g1 = this->options->length;
HXDLIN( 161)		while((_g < _g1)){
HXDLIN( 161)			_g = (_g + 1);
HXDLIN( 161)			int i = (_g - 1);
HXLINE( 163)			this->grpOptions->remove(this->creditText,null()).StaticCast<  ::Alphabet >();
HXLINE( 164)			this->creditText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),this->eventName->text,true,false,null(),null(),null());
HXLINE( 165)			this->creditText->isMenuItem = true;
HXLINE( 166)			this->creditText->targetY = ( (Float)(i) );
HXLINE( 167)			{
HXLINE( 167)				 ::Alphabet _g1 = this->creditText;
HXDLIN( 167)				_g1->set_x((_g1->x + 570));
            			}
HXLINE( 168)			this->grpOptions->add(this->creditText).StaticCast<  ::Alphabet >();
HXLINE( 169)			this->remove(this->selec,null());
HXLINE( 170)			this->selec->set_text(this->eventName->text);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CreditsEditor_obj,buttonoption,(void))

void CreditsEditor_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_175_update)
HXLINE( 176)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 176)		if (_this->keyManager->checkStatusUnsafe(27,_this->status)) {
HXLINE( 178)			 ::flixel::FlxState nextState =  ::CreditsState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 178)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 178)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 180)		this->super::update(elapsed);
            	}


void CreditsEditor_obj::colorSet(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::engineEditors::CreditsEditor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_194_colorSet)
HXLINE( 195)			_gthis->versionShit->set_text(HX_("RED",31,75,3e,00));
HXLINE( 197)			_gthis->bg->set_color(-65536);
HXLINE( 198)			::flixel::FlxG_obj::camera->flash(-65536,1,null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::engineEditors::CreditsEditor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_203_colorSet)
HXLINE( 204)			_gthis->versionShit->set_text(HX_("BROWN",56,06,e2,36));
HXLINE( 206)			_gthis->bg->set_color(-7650029);
HXLINE( 207)			::flixel::FlxG_obj::camera->flash(-7650029,1,null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::engineEditors::CreditsEditor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_211_colorSet)
HXLINE( 212)			_gthis->versionShit->set_text(HX_("WHITE",89,82,ab,47));
HXLINE( 214)			_gthis->bg->set_color(-1);
HXLINE( 215)			::flixel::FlxG_obj::camera->flash(-1,1,null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::engineEditors::CreditsEditor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_219_colorSet)
HXLINE( 220)			_gthis->versionShit->set_text(HX_("YELLOW",74,4b,df,82));
HXLINE( 221)			_gthis->bg->set_color(-256);
HXLINE( 222)			::flixel::FlxG_obj::camera->flash(-256,1,null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::engineEditors::CreditsEditor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_226_colorSet)
HXLINE( 227)			_gthis->versionShit->set_text(HX_("GREEN",a3,46,db,17));
HXLINE( 229)			_gthis->bg->set_color(-16744448);
HXLINE( 230)			::flixel::FlxG_obj::camera->flash(-16744448,1,null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::engineEditors::CreditsEditor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_235_colorSet)
HXLINE( 236)			_gthis->versionShit->set_text(HX_("BLACK",9f,0d,e0,32));
HXLINE( 238)			_gthis->bg->set_color(-16777216);
HXLINE( 239)			::flixel::FlxG_obj::camera->flash(-16777216,1,null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::engineEditors::CreditsEditor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_244_colorSet)
HXLINE( 245)			_gthis->versionShit->set_text(HX_("CYAN",23,0d,8d,2c));
HXLINE( 247)			_gthis->bg->set_color(-16711681);
HXLINE( 248)			::flixel::FlxG_obj::camera->flash(-16711681,1,null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::engineEditors::CreditsEditor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_253_colorSet)
HXLINE( 254)			_gthis->versionShit->set_text(HX_("BLUE",9a,0a,da,2b));
HXLINE( 256)			_gthis->bg->set_color(-16776961);
HXLINE( 257)			::flixel::FlxG_obj::camera->flash(-16776961,1,null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::engineEditors::CreditsEditor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_262_colorSet)
HXLINE( 263)			_gthis->versionShit->set_text(HX_("PINK",76,ba,18,35));
HXLINE( 265)			_gthis->bg->set_color(-16181);
HXLINE( 266)			::flixel::FlxG_obj::camera->flash(-16181,1,null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::engineEditors::CreditsEditor,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_271_colorSet)
HXLINE( 272)			_gthis->versionShit->set_text(HX_("PURPLE",3c,a2,0c,24));
HXLINE( 274)			_gthis->bg->set_color(-8388480);
HXLINE( 275)			::flixel::FlxG_obj::camera->flash(-8388480,1,null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_01fe7f18951f2e2e_183_colorSet)
HXLINE( 182)		 ::engineEditors::CreditsEditor _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 185)		 ::flixel::text::FlxText scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width * 0),5,0,HX_("",00,00,00,00),32,null());
HXLINE( 186)		scoreText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 188)		 ::flixel::FlxSprite scoreBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(scoreText->x - ( (Float)(16) )),0,null());
HXDLIN( 188)		 ::flixel::FlxSprite scoreBG1 = scoreBG->makeGraphic(::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)3.6))),85,-16777216,null(),null());
HXLINE( 189)		scoreBG1->set_alpha(((Float)0.6));
HXLINE( 190)		this->add(scoreBG1);
HXLINE( 192)		::flixel::FlxG_obj::camera->flash(-1,1,null(),null());
HXLINE( 193)		this->setColorButton->set_visible(false);
HXLINE( 194)		 ::flixel::ui::FlxButton red =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,150,60,HX_("Red",31,91,3e,00), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 201)		red->set_color(-65536);
HXLINE( 202)		this->add(red);
HXLINE( 203)		 ::flixel::ui::FlxButton brown =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,250,60,HX_("Brown",56,3e,21,4c), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 209)		brown->set_color(-7650029);
HXLINE( 210)		this->add(brown);
HXLINE( 211)		 ::flixel::ui::FlxButton white =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,350,60,HX_("White",89,ba,ea,5c), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 217)		white->set_color(-1);
HXLINE( 218)		this->add(white);
HXLINE( 219)		 ::flixel::ui::FlxButton yellow =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,450,60,HX_("Yellow",94,13,f1,04), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE( 224)		yellow->set_color(-256);
HXLINE( 225)		this->add(yellow);
HXLINE( 226)		 ::flixel::ui::FlxButton green =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,550,60,HX_("Green",a3,7e,1a,2d), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE( 232)		green->set_color(-16744448);
HXLINE( 233)		this->add(green);
HXLINE( 235)		 ::flixel::ui::FlxButton black =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,650,60,HX_("Black",9f,45,1f,48), ::Dynamic(new _hx_Closure_5(_gthis)));
HXLINE( 241)		black->set_color(-16777216);
HXLINE( 242)		this->add(black);
HXLINE( 244)		 ::flixel::ui::FlxButton cyan =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,750,60,HX_("Cyan",43,71,a5,2c), ::Dynamic(new _hx_Closure_6(_gthis)));
HXLINE( 250)		cyan->set_color(-16711681);
HXLINE( 251)		this->add(cyan);
HXLINE( 253)		 ::flixel::ui::FlxButton blue =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,850,60,HX_("Blue",ba,6e,f2,2b), ::Dynamic(new _hx_Closure_7(_gthis)));
HXLINE( 259)		blue->set_color(-16776961);
HXLINE( 260)		this->add(blue);
HXLINE( 262)		 ::flixel::ui::FlxButton pink =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,950,60,HX_("Pink",96,1e,31,35), ::Dynamic(new _hx_Closure_8(_gthis)));
HXLINE( 268)		pink->set_color(-16181);
HXLINE( 269)		this->add(pink);
HXLINE( 271)		 ::flixel::ui::FlxButton purple =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,1050,60,HX_("Purple",5c,6a,1e,a6), ::Dynamic(new _hx_Closure_9(_gthis)));
HXLINE( 277)		purple->set_color(-8388480);
HXLINE( 278)		this->add(purple);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CreditsEditor_obj,colorSet,(void))


::hx::ObjectPtr< CreditsEditor_obj > CreditsEditor_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< CreditsEditor_obj > __this = new CreditsEditor_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< CreditsEditor_obj > CreditsEditor_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	CreditsEditor_obj *__this = (CreditsEditor_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CreditsEditor_obj), true, "engineEditors.CreditsEditor"));
	*(void **)__this = CreditsEditor_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

CreditsEditor_obj::CreditsEditor_obj()
{
}

void CreditsEditor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CreditsEditor);
	HX_MARK_MEMBER_NAME(eventName,"eventName");
	HX_MARK_MEMBER_NAME(eventName2,"eventName2");
	HX_MARK_MEMBER_NAME(createButton,"createButton");
	HX_MARK_MEMBER_NAME(saveButtons,"saveButtons");
	HX_MARK_MEMBER_NAME(versionShit,"versionShit");
	HX_MARK_MEMBER_NAME(selec,"selec");
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(creditText,"creditText");
	HX_MARK_MEMBER_NAME(grpOptions,"grpOptions");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(setColorButton,"setColorButton");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(content,"content");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CreditsEditor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(eventName,"eventName");
	HX_VISIT_MEMBER_NAME(eventName2,"eventName2");
	HX_VISIT_MEMBER_NAME(createButton,"createButton");
	HX_VISIT_MEMBER_NAME(saveButtons,"saveButtons");
	HX_VISIT_MEMBER_NAME(versionShit,"versionShit");
	HX_VISIT_MEMBER_NAME(selec,"selec");
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(creditText,"creditText");
	HX_VISIT_MEMBER_NAME(grpOptions,"grpOptions");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(setColorButton,"setColorButton");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(content,"content");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CreditsEditor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"selec") ) { return ::hx::Val( selec ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { return ::hx::Val( options ); }
		if (HX_FIELD_EQ(inName,"content") ) { return ::hx::Val( content ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"colorSet") ) { return ::hx::Val( colorSet_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventName") ) { return ::hx::Val( eventName ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventName2") ) { return ::hx::Val( eventName2 ); }
		if (HX_FIELD_EQ(inName,"creditText") ) { return ::hx::Val( creditText ); }
		if (HX_FIELD_EQ(inName,"grpOptions") ) { return ::hx::Val( grpOptions ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"saveButtons") ) { return ::hx::Val( saveButtons ); }
		if (HX_FIELD_EQ(inName,"versionShit") ) { return ::hx::Val( versionShit ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"createButton") ) { return ::hx::Val( createButton ); }
		if (HX_FIELD_EQ(inName,"buttonoption") ) { return ::hx::Val( buttonoption_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setColorButton") ) { return ::hx::Val( setColorButton ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CreditsEditor_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"selec") ) { selec=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"content") ) { content=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventName") ) { eventName=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventName2") ) { eventName2=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"creditText") ) { creditText=inValue.Cast<  ::Alphabet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpOptions") ) { grpOptions=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"saveButtons") ) { saveButtons=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"versionShit") ) { versionShit=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"createButton") ) { createButton=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setColorButton") ) { setColorButton=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CreditsEditor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("eventName",85,7b,0c,f8));
	outFields->push(HX_("eventName2",0d,99,df,12));
	outFields->push(HX_("createButton",0e,a2,35,fc));
	outFields->push(HX_("saveButtons",84,80,15,24));
	outFields->push(HX_("versionShit",f8,4e,3b,e2));
	outFields->push(HX_("selec",78,8e,29,7a));
	outFields->push(HX_("options",5e,33,fe,df));
	outFields->push(HX_("creditText",86,ad,5d,19));
	outFields->push(HX_("grpOptions",f9,45,d8,00));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("setColorButton",33,2f,c7,3b));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("content",39,8d,77,19));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CreditsEditor_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CreditsEditor_obj,eventName),HX_("eventName",85,7b,0c,f8)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CreditsEditor_obj,eventName2),HX_("eventName2",0d,99,df,12)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CreditsEditor_obj,createButton),HX_("createButton",0e,a2,35,fc)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CreditsEditor_obj,saveButtons),HX_("saveButtons",84,80,15,24)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CreditsEditor_obj,versionShit),HX_("versionShit",f8,4e,3b,e2)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CreditsEditor_obj,selec),HX_("selec",78,8e,29,7a)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CreditsEditor_obj,options),HX_("options",5e,33,fe,df)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(CreditsEditor_obj,creditText),HX_("creditText",86,ad,5d,19)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(CreditsEditor_obj,grpOptions),HX_("grpOptions",f9,45,d8,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CreditsEditor_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CreditsEditor_obj,setColorButton),HX_("setColorButton",33,2f,c7,3b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(CreditsEditor_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsString,(int)offsetof(CreditsEditor_obj,content),HX_("content",39,8d,77,19)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CreditsEditor_obj_sStaticStorageInfo = 0;
#endif

static ::String CreditsEditor_obj_sMemberFields[] = {
	HX_("eventName",85,7b,0c,f8),
	HX_("eventName2",0d,99,df,12),
	HX_("createButton",0e,a2,35,fc),
	HX_("saveButtons",84,80,15,24),
	HX_("versionShit",f8,4e,3b,e2),
	HX_("selec",78,8e,29,7a),
	HX_("options",5e,33,fe,df),
	HX_("creditText",86,ad,5d,19),
	HX_("grpOptions",f9,45,d8,00),
	HX_("bg",c5,55,00,00),
	HX_("setColorButton",33,2f,c7,3b),
	HX_("UI_box",60,07,ac,43),
	HX_("content",39,8d,77,19),
	HX_("create",fc,66,0f,7c),
	HX_("buttonoption",e7,36,a4,9e),
	HX_("update",09,86,05,87),
	HX_("colorSet",ff,a1,ef,89),
	::String(null()) };

::hx::Class CreditsEditor_obj::__mClass;

void CreditsEditor_obj::__register()
{
	CreditsEditor_obj _hx_dummy;
	CreditsEditor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("engineEditors.CreditsEditor",dd,ef,5d,90);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CreditsEditor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CreditsEditor_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CreditsEditor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CreditsEditor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace engineEditors
