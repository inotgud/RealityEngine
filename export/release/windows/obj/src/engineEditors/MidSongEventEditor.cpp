// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_engineEditors_MidSongEventEditor
#include <engineEditors/MidSongEventEditor.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxButtonPlus
#include <flixel/addons/ui/FlxButtonPlus.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_options_Question
#include <options/Question.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_48_new,"engineEditors.MidSongEventEditor","new",0x560a89a6,"engineEditors.MidSongEventEditor.new","engineEditors/MidSongEventEditor.hx",48,0x7e1736e9)
HX_DEFINE_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_34_new,"engineEditors.MidSongEventEditor","new",0x560a89a6,"engineEditors.MidSongEventEditor.new","engineEditors/MidSongEventEditor.hx",34,0x7e1736e9)
HX_LOCAL_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_56_stagebg,"engineEditors.MidSongEventEditor","stagebg",0x05de4049,"engineEditors.MidSongEventEditor.stagebg","engineEditors/MidSongEventEditor.hx",56,0x7e1736e9)
HX_LOCAL_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_60_create,"engineEditors.MidSongEventEditor","create",0x92d73d76,"engineEditors.MidSongEventEditor.create","engineEditors/MidSongEventEditor.hx",60,0x7e1736e9)
HX_LOCAL_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_91_ss,"engineEditors.MidSongEventEditor","ss",0x39c8f61a,"engineEditors.MidSongEventEditor.ss","engineEditors/MidSongEventEditor.hx",91,0x7e1736e9)
HX_LOCAL_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_95_createS2,"engineEditors.MidSongEventEditor","createS2",0x653a4f75,"engineEditors.MidSongEventEditor.createS2","engineEditors/MidSongEventEditor.hx",95,0x7e1736e9)
HX_LOCAL_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_137_selectbfordad,"engineEditors.MidSongEventEditor","selectbfordad",0xb5b4fa0a,"engineEditors.MidSongEventEditor.selectbfordad","engineEditors/MidSongEventEditor.hx",137,0x7e1736e9)
HX_LOCAL_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_158_charswitchevent,"engineEditors.MidSongEventEditor","charswitchevent",0x7b0878d6,"engineEditors.MidSongEventEditor.charswitchevent","engineEditors/MidSongEventEditor.hx",158,0x7e1736e9)
HX_LOCAL_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_168_charswitcheventstep2,"engineEditors.MidSongEventEditor","charswitcheventstep2",0x6fb23ad0,"engineEditors.MidSongEventEditor.charswitcheventstep2","engineEditors/MidSongEventEditor.hx",168,0x7e1736e9)
HX_LOCAL_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_178_testscript,"engineEditors.MidSongEventEditor","testscript",0xb10dbb57,"engineEditors.MidSongEventEditor.testscript","engineEditors/MidSongEventEditor.hx",178,0x7e1736e9)
HX_LOCAL_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_188_savescript,"engineEditors.MidSongEventEditor","savescript",0xe0d30082,"engineEditors.MidSongEventEditor.savescript","engineEditors/MidSongEventEditor.hx",188,0x7e1736e9)
HX_LOCAL_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_197_addanimevent,"engineEditors.MidSongEventEditor","addanimevent",0xa026d422,"engineEditors.MidSongEventEditor.addanimevent","engineEditors/MidSongEventEditor.hx",197,0x7e1736e9)
HX_LOCAL_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_201_update,"engineEditors.MidSongEventEditor","update",0x9dcd5c83,"engineEditors.MidSongEventEditor.update","engineEditors/MidSongEventEditor.hx",201,0x7e1736e9)
HX_LOCAL_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_44_boot,"engineEditors.MidSongEventEditor","boot",0xeb46e82c,"engineEditors.MidSongEventEditor.boot","engineEditors/MidSongEventEditor.hx",44,0x7e1736e9)
HX_LOCAL_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_51_boot,"engineEditors.MidSongEventEditor","boot",0xeb46e82c,"engineEditors.MidSongEventEditor.boot","engineEditors/MidSongEventEditor.hx",51,0x7e1736e9)
HX_LOCAL_STACK_FRAME(_hx_pos_d2c8e34d8ef7a106_52_boot,"engineEditors.MidSongEventEditor","boot",0xeb46e82c,"engineEditors.MidSongEventEditor.boot","engineEditors/MidSongEventEditor.hx",52,0x7e1736e9)
namespace engineEditors{

void MidSongEventEditor_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_48_new)
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_34_new)
HXLINE(  48)		this->button4 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,35,250,HX_("Apply",4e,f5,68,b7), ::Dynamic(new _hx_Closure_0()));
HXLINE(  47)		this->eventNa =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,350,210,477,HX_("Song Name",76,e6,ca,de),50,null(),null(),null());
HXLINE(  46)		this->eventNamesss2 =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,35,360,80,HX_("Character Name",62,02,e5,8d),null(),null(),null(),null());
HXLINE(  45)		this->eventNamesss =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,35,320,80,HX_("curStep",ec,58,71,b7),null(),null(),null(),null());
HXLINE(  34)		super::__construct(TransIn,TransOut);
            	}

Dynamic MidSongEventEditor_obj::__CreateEmpty() { return new MidSongEventEditor_obj; }

void *MidSongEventEditor_obj::_hx_vtable = 0;

Dynamic MidSongEventEditor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MidSongEventEditor_obj > _hx_result = new MidSongEventEditor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MidSongEventEditor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x05718f8e) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x05718f8e;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void MidSongEventEditor_obj::stagebg(){
            	HX_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_56_stagebg)
            	}


HX_DEFINE_DYNAMIC_FUNC0(MidSongEventEditor_obj,stagebg,(void))

void MidSongEventEditor_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_60_create)
HXLINE(  61)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  62)		::flixel::FlxG_obj::save->data->__SetField(HX_("abfd",5f,68,68,40),HX_("",00,00,00,00),::hx::paccDynamic);
HXLINE(  63)		this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(10) ),( (Float)(240) ),HX_("bf",c4,55,00,00),true);
HXLINE(  64)		 ::Character _hx_tmp = this->char1;
HXDLIN(  64)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE(  66)		this->char1->dance(null(),null());
HXLINE(  67)		if ((::engineEditors::MidSongEventEditor_obj::song == HX_("",00,00,00,00))) {
HXLINE(  69)			 ::flixel::FlxSprite bgNormal =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(  69)			 ::flixel::FlxSprite bgNormal1 = bgNormal->loadGraphic(::Paths_obj::loadImage(HX_("menuDesat",26,91,04,72),null()),null(),null(),null(),null(),null());
HXLINE(  70)			bgNormal1->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  71)			bgNormal1->scrollFactor->set_y(((Float)0.10));
HXLINE(  72)			bgNormal1->setGraphicSize(::Std_obj::_hx_int((bgNormal1->get_width() * ((Float)1.1))),null());
HXLINE(  73)			bgNormal1->updateHitbox();
HXLINE(  74)			{
HXLINE(  74)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  74)				bool _hx_tmp;
HXDLIN(  74)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE(  74)						_hx_tmp = true;
            					}
            					break;
            					default:{
HXLINE(  74)						_hx_tmp = false;
            					}
            				}
HXDLIN(  74)				if (_hx_tmp) {
HXLINE(  74)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  74)					bgNormal1->set_x(((( (Float)(_hx_tmp) ) - bgNormal1->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(  74)				bool _hx_tmp1;
HXDLIN(  74)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE(  74)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE(  74)						_hx_tmp1 = false;
            					}
            				}
HXDLIN(  74)				if (_hx_tmp1) {
HXLINE(  74)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  74)					bgNormal1->set_y(((( (Float)(_hx_tmp) ) - bgNormal1->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE(  75)			bgNormal1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  76)			bgNormal1->set_color(-8355712);
HXLINE(  77)			this->add(bgNormal1);
HXLINE(  78)			this->eventNa =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,350,210,477,HX_("Song Name",76,e6,ca,de),50,null(),null(),null());
HXLINE(  79)			this->eventNa->setFormat(HX_("PhantomMuff1.5RealityEngine",8f,cd,de,3f),26,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  80)			this->add(this->eventNa);
HXLINE(  81)			 ::flixel::addons::ui::FlxButtonPlus button =  ::flixel::addons::ui::FlxButtonPlus_obj::__alloc( HX_CTX ,350,260,this->ss_dyn(),HX_("Apply",4e,f5,68,b7),477,25);
HXLINE(  82)			this->add(button);
            		}
            		else {
HXLINE(  87)			this->createS2();
            		}
            	}


void MidSongEventEditor_obj::ss(){
            	HX_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_91_ss)
HXLINE(  92)		::engineEditors::MidSongEventEditor_obj::song = this->eventNa->text;
HXLINE(  93)		this->createS2();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MidSongEventEditor_obj,ss,(void))

void MidSongEventEditor_obj::createS2(){
            	HX_GC_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_95_createS2)
HXLINE(  97)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  98)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(  98)		this->bg = _hx_tmp->loadGraphic(::Paths_obj::loadImage(HX_("stageback",e5,7b,3b,06),null()),null(),null(),null(),null(),null());
HXLINE(  99)		this->bg->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 100)		this->bg->scrollFactor->set_y(((Float)0.10));
HXLINE( 101)		 ::flixel::FlxSprite _hx_tmp1 = this->bg;
HXDLIN( 101)		_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->bg->get_width() * ((Float)1.1))),null());
HXLINE( 102)		this->bg->updateHitbox();
HXLINE( 103)		{
HXLINE( 103)			 ::flixel::FlxSprite _this = this->bg;
HXDLIN( 103)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 103)			bool _hx_tmp2;
HXDLIN( 103)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 103)					_hx_tmp2 = true;
            				}
            				break;
            				default:{
HXLINE( 103)					_hx_tmp2 = false;
            				}
            			}
HXDLIN( 103)			if (_hx_tmp2) {
HXLINE( 103)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 103)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 103)			bool _hx_tmp3;
HXDLIN( 103)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 103)					_hx_tmp3 = true;
            				}
            				break;
            				default:{
HXLINE( 103)					_hx_tmp3 = false;
            				}
            			}
HXDLIN( 103)			if (_hx_tmp3) {
HXLINE( 103)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 103)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 104)		this->bg->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 105)		this->add(this->bg);
HXLINE( 107)		 ::flixel::FlxSprite bg2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 107)		 ::flixel::FlxSprite bg21 = bg2->loadGraphic(::Paths_obj::loadImage(HX_("book",29,84,1b,41),null()),null(),null(),null(),null(),null());
HXLINE( 108)		bg21->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 109)		bg21->scrollFactor->set_y(((Float)0.10));
HXLINE( 110)		bg21->setGraphicSize(::Std_obj::_hx_int((bg21->get_width() * ((Float)1.1))),null());
HXLINE( 111)		bg21->updateHitbox();
HXLINE( 112)		{
HXLINE( 112)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 112)			bool _hx_tmp4;
HXDLIN( 112)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 112)					_hx_tmp4 = true;
            				}
            				break;
            				default:{
HXLINE( 112)					_hx_tmp4 = false;
            				}
            			}
HXDLIN( 112)			if (_hx_tmp4) {
HXLINE( 112)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 112)				bg21->set_x(((( (Float)(_hx_tmp) ) - bg21->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 112)			bool _hx_tmp5;
HXDLIN( 112)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 112)					_hx_tmp5 = true;
            				}
            				break;
            				default:{
HXLINE( 112)					_hx_tmp5 = false;
            				}
            			}
HXDLIN( 112)			if (_hx_tmp5) {
HXLINE( 112)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 112)				bg21->set_y(((( (Float)(_hx_tmp) ) - bg21->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 113)		bg21->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 114)		this->add(bg21);
HXLINE( 116)		this->versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,900,40,0,HX_("Logs",8f,cb,90,32),30,false);
HXLINE( 117)		this->versionShit->scrollFactor->set(null(),null());
HXLINE( 118)		this->versionShit->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),24,-16777216,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 119)		this->add(this->versionShit);
HXLINE( 121)		 ::flixel::ui::FlxButton button3 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,35,90,HX_("Add Character Switch Event",24,8a,e8,b1),this->selectbfordad_dyn());
HXLINE( 122)		this->add(button3);
HXLINE( 124)		 ::flixel::ui::FlxButton button4 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,35,130,HX_("Add Play Anim Event",38,2f,ed,46),this->addanimevent_dyn());
HXLINE( 125)		this->add(button4);
HXLINE( 127)		 ::flixel::ui::FlxButton button5 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,35,170,HX_("Test",72,f4,d2,37),this->testscript_dyn());
HXLINE( 128)		this->add(button5);
HXLINE( 130)		 ::flixel::ui::FlxButton button51 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,35,220,HX_("Save",5d,b7,26,37),this->savescript_dyn());
HXLINE( 131)		this->add(button51);
HXLINE( 133)		this->add(this->char1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MidSongEventEditor_obj,createS2,(void))

void MidSongEventEditor_obj::selectbfordad(){
            	HX_GC_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_137_selectbfordad)
HXDLIN( 137)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("abfd",5f,68,68,40),::hx::paccDynamic),HX_("",00,00,00,00) )) {
HXLINE( 139)			::options::Question_obj::isMenuSong = false;
HXLINE( 140)			::options::Question_obj::isAntialiasing = false;
HXLINE( 141)			::options::Question_obj::isWatermark = false;
HXLINE( 142)			::options::Question_obj::isFlashing = false;
HXLINE( 143)			::options::Question_obj::isFPS = false;
HXLINE( 144)			::options::Question_obj::isScrollSpeed = false;
HXLINE( 145)			::options::Question_obj::isRedesigned = false;
HXLINE( 146)			::options::Question_obj::isColored = false;
HXLINE( 147)			::options::Question_obj::isBotPlay = false;
HXLINE( 148)			::options::Question_obj::isScroll = false;
HXLINE( 149)			::options::Question_obj::isTap = false;
HXLINE( 150)			::options::Question_obj::isMidSongEvent = true;
HXLINE( 151)			this->openSubState( ::options::Question_obj::__alloc( HX_CTX ));
            		}
            		else {
HXLINE( 155)			this->charswitchevent();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MidSongEventEditor_obj,selectbfordad,(void))

void MidSongEventEditor_obj::charswitchevent(){
            	HX_GC_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_158_charswitchevent)
HXLINE( 160)		this->button4 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,35,280,HX_("Apply",4e,f5,68,b7),this->charswitcheventstep2_dyn());
HXLINE( 161)		this->add(this->eventNamesss);
HXLINE( 163)		this->add(this->eventNamesss2);
HXLINE( 165)		this->add(this->button4);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MidSongEventEditor_obj,charswitchevent,(void))

void MidSongEventEditor_obj::charswitcheventstep2(){
            	HX_GC_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_168_charswitcheventstep2)
HXLINE( 169)		::String _hx_tmp = ((((::engineEditors::MidSongEventEditor_obj::code + HX_("\n",0a,00,00,00)) + HX_("applyEvent(",dc,0e,65,d2)) + this->eventNamesss->text) + HX_(",\"characterSwitch",c7,cc,2e,35));
HXDLIN( 169)		::String _hx_tmp1 = (((_hx_tmp + ::Std_obj::string( ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("abfd",5f,68,68,40),::hx::paccDynamic)))) + HX_("\",",ca,1d,00,00)) + HX_("\"",22,00,00,00));
HXDLIN( 169)		::engineEditors::MidSongEventEditor_obj::code = (((_hx_tmp1 + this->eventNamesss2->text) + HX_("\"",22,00,00,00)) + HX_(");",f2,23,00,00));
HXLINE( 170)		::flixel::FlxG_obj::save->data->__SetField(HX_("abfd",5f,68,68,40),HX_("",00,00,00,00),::hx::paccDynamic);
HXLINE( 172)		this->remove(this->char1,null());
HXLINE( 173)		this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(10) ),( (Float)(100) ),this->eventNamesss2->text,true);
HXLINE( 174)		 ::Character _hx_tmp2 = this->char1;
HXDLIN( 174)		_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 175)		this->add(this->char1);
HXLINE( 176)		this->char1->dance(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MidSongEventEditor_obj,charswitcheventstep2,(void))

void MidSongEventEditor_obj::testscript(){
            	HX_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_178_testscript)
HXLINE( 179)		::engineEditors::MidSongEventEditor_obj::codetested = ::engineEditors::MidSongEventEditor_obj::code;
HXLINE( 180)		::PlayState_obj::oldcode = ::engineEditors::MidSongEventEditor_obj::codetested;
HXLINE( 181)		::engineEditors::MidSongEventEditor_obj::code = ((::engineEditors::MidSongEventEditor_obj::code + HX_("\n",0a,00,00,00)) + HX_("}",7d,00,00,00));
HXLINE( 182)		::PlayState_obj::eventeditortestscript = ::engineEditors::MidSongEventEditor_obj::code;
HXLINE( 183)		::PlayState_obj::eventeditortesting = true;
HXLINE( 184)		::PlayState_obj::olds = ::engineEditors::MidSongEventEditor_obj::song;
HXLINE( 185)		::FreeplayState_obj::loadSongInFreePlay(::engineEditors::MidSongEventEditor_obj::song,1,false,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MidSongEventEditor_obj,testscript,(void))

void MidSongEventEditor_obj::savescript(){
            	HX_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_188_savescript)
HXLINE( 189)		::engineEditors::MidSongEventEditor_obj::code = ((::engineEditors::MidSongEventEditor_obj::code + HX_("\n",0a,00,00,00)) + HX_("}",7d,00,00,00));
HXLINE( 190)		::String library = null();
HXDLIN( 190)		if (::sys::FileSystem_obj::exists(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (((HX_("songs/",71,e7,88,2d) + ::engineEditors::MidSongEventEditor_obj::song) + HX_("/",2f,00,00,00)) + ::engineEditors::MidSongEventEditor_obj::song)) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library))) {
HXLINE( 192)			::String library = null();
HXDLIN( 192)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("",00,00,00,00) + ((HX_("data/songs/",f6,d7,93,44) + ::engineEditors::MidSongEventEditor_obj::song) + HX_("/hscript",24,80,5b,ac))) + HX_(".hx",be,42,23,00)),HX_("TEXT",ad,94,ba,37),library);
HXDLIN( 192)			::sys::io::File_obj::saveContent(_hx_tmp,::engineEditors::MidSongEventEditor_obj::code);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MidSongEventEditor_obj,savescript,(void))

void MidSongEventEditor_obj::addanimevent(){
            	HX_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_197_addanimevent)
            	}


HX_DEFINE_DYNAMIC_FUNC0(MidSongEventEditor_obj,addanimevent,(void))

void MidSongEventEditor_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_201_update)
HXLINE( 202)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 202)		if (_this->keyManager->checkStatusUnsafe(27,_this->status)) {
HXLINE( 204)			 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 204)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 204)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 206)		this->super::update(elapsed);
            	}


::String MidSongEventEditor_obj::song;

::String MidSongEventEditor_obj::code;

::String MidSongEventEditor_obj::codetested;


::hx::ObjectPtr< MidSongEventEditor_obj > MidSongEventEditor_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< MidSongEventEditor_obj > __this = new MidSongEventEditor_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< MidSongEventEditor_obj > MidSongEventEditor_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	MidSongEventEditor_obj *__this = (MidSongEventEditor_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MidSongEventEditor_obj), true, "engineEditors.MidSongEventEditor"));
	*(void **)__this = MidSongEventEditor_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

MidSongEventEditor_obj::MidSongEventEditor_obj()
{
}

void MidSongEventEditor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MidSongEventEditor);
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(eventName,"eventName");
	HX_MARK_MEMBER_NAME(eventName2,"eventName2");
	HX_MARK_MEMBER_NAME(eventName3,"eventName3");
	HX_MARK_MEMBER_NAME(eventName4,"eventName4");
	HX_MARK_MEMBER_NAME(eventName5,"eventName5");
	HX_MARK_MEMBER_NAME(eventName6,"eventName6");
	HX_MARK_MEMBER_NAME(char1,"char1");
	HX_MARK_MEMBER_NAME(eventNamesss,"eventNamesss");
	HX_MARK_MEMBER_NAME(eventNamesss2,"eventNamesss2");
	HX_MARK_MEMBER_NAME(eventNa,"eventNa");
	HX_MARK_MEMBER_NAME(button4,"button4");
	HX_MARK_MEMBER_NAME(versionShit,"versionShit");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MidSongEventEditor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(eventName,"eventName");
	HX_VISIT_MEMBER_NAME(eventName2,"eventName2");
	HX_VISIT_MEMBER_NAME(eventName3,"eventName3");
	HX_VISIT_MEMBER_NAME(eventName4,"eventName4");
	HX_VISIT_MEMBER_NAME(eventName5,"eventName5");
	HX_VISIT_MEMBER_NAME(eventName6,"eventName6");
	HX_VISIT_MEMBER_NAME(char1,"char1");
	HX_VISIT_MEMBER_NAME(eventNamesss,"eventNamesss");
	HX_VISIT_MEMBER_NAME(eventNamesss2,"eventNamesss2");
	HX_VISIT_MEMBER_NAME(eventNa,"eventNa");
	HX_VISIT_MEMBER_NAME(button4,"button4");
	HX_VISIT_MEMBER_NAME(versionShit,"versionShit");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MidSongEventEditor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		if (HX_FIELD_EQ(inName,"ss") ) { return ::hx::Val( ss_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { return ::hx::Val( char1 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"eventNa") ) { return ::hx::Val( eventNa ); }
		if (HX_FIELD_EQ(inName,"button4") ) { return ::hx::Val( button4 ); }
		if (HX_FIELD_EQ(inName,"stagebg") ) { return ::hx::Val( stagebg_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"createS2") ) { return ::hx::Val( createS2_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventName") ) { return ::hx::Val( eventName ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventName2") ) { return ::hx::Val( eventName2 ); }
		if (HX_FIELD_EQ(inName,"eventName3") ) { return ::hx::Val( eventName3 ); }
		if (HX_FIELD_EQ(inName,"eventName4") ) { return ::hx::Val( eventName4 ); }
		if (HX_FIELD_EQ(inName,"eventName5") ) { return ::hx::Val( eventName5 ); }
		if (HX_FIELD_EQ(inName,"eventName6") ) { return ::hx::Val( eventName6 ); }
		if (HX_FIELD_EQ(inName,"testscript") ) { return ::hx::Val( testscript_dyn() ); }
		if (HX_FIELD_EQ(inName,"savescript") ) { return ::hx::Val( savescript_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"versionShit") ) { return ::hx::Val( versionShit ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"eventNamesss") ) { return ::hx::Val( eventNamesss ); }
		if (HX_FIELD_EQ(inName,"addanimevent") ) { return ::hx::Val( addanimevent_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"eventNamesss2") ) { return ::hx::Val( eventNamesss2 ); }
		if (HX_FIELD_EQ(inName,"selectbfordad") ) { return ::hx::Val( selectbfordad_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"charswitchevent") ) { return ::hx::Val( charswitchevent_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"charswitcheventstep2") ) { return ::hx::Val( charswitcheventstep2_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MidSongEventEditor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"song") ) { outValue = ( song ); return true; }
		if (HX_FIELD_EQ(inName,"code") ) { outValue = ( code ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"codetested") ) { outValue = ( codetested ); return true; }
	}
	return false;
}

::hx::Val MidSongEventEditor_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { char1=inValue.Cast<  ::Character >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"eventNa") ) { eventNa=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"button4") ) { button4=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventName") ) { eventName=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventName2") ) { eventName2=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName3") ) { eventName3=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName4") ) { eventName4=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName5") ) { eventName5=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName6") ) { eventName6=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"versionShit") ) { versionShit=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"eventNamesss") ) { eventNamesss=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"eventNamesss2") ) { eventNamesss2=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MidSongEventEditor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"song") ) { song=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"code") ) { code=ioValue.Cast< ::String >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"codetested") ) { codetested=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void MidSongEventEditor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("eventName",85,7b,0c,f8));
	outFields->push(HX_("eventName2",0d,99,df,12));
	outFields->push(HX_("eventName3",0e,99,df,12));
	outFields->push(HX_("eventName4",0f,99,df,12));
	outFields->push(HX_("eventName5",10,99,df,12));
	outFields->push(HX_("eventName6",11,99,df,12));
	outFields->push(HX_("char1",9b,9c,b3,45));
	outFields->push(HX_("eventNamesss",6e,6d,f3,3c));
	outFields->push(HX_("eventNamesss2",04,53,0c,18));
	outFields->push(HX_("eventNa",ed,c6,9a,06));
	outFields->push(HX_("button4",02,52,75,ca));
	outFields->push(HX_("versionShit",f8,4e,3b,e2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MidSongEventEditor_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MidSongEventEditor_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(MidSongEventEditor_obj,eventName),HX_("eventName",85,7b,0c,f8)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(MidSongEventEditor_obj,eventName2),HX_("eventName2",0d,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(MidSongEventEditor_obj,eventName3),HX_("eventName3",0e,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(MidSongEventEditor_obj,eventName4),HX_("eventName4",0f,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(MidSongEventEditor_obj,eventName5),HX_("eventName5",10,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(MidSongEventEditor_obj,eventName6),HX_("eventName6",11,99,df,12)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(MidSongEventEditor_obj,char1),HX_("char1",9b,9c,b3,45)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(MidSongEventEditor_obj,eventNamesss),HX_("eventNamesss",6e,6d,f3,3c)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(MidSongEventEditor_obj,eventNamesss2),HX_("eventNamesss2",04,53,0c,18)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(MidSongEventEditor_obj,eventNa),HX_("eventNa",ed,c6,9a,06)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(MidSongEventEditor_obj,button4),HX_("button4",02,52,75,ca)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MidSongEventEditor_obj,versionShit),HX_("versionShit",f8,4e,3b,e2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MidSongEventEditor_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &MidSongEventEditor_obj::song,HX_("song",d5,23,58,4c)},
	{::hx::fsString,(void *) &MidSongEventEditor_obj::code,HX_("code",2d,b1,c4,41)},
	{::hx::fsString,(void *) &MidSongEventEditor_obj::codetested,HX_("codetested",1e,aa,5f,68)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MidSongEventEditor_obj_sMemberFields[] = {
	HX_("bg",c5,55,00,00),
	HX_("eventName",85,7b,0c,f8),
	HX_("eventName2",0d,99,df,12),
	HX_("eventName3",0e,99,df,12),
	HX_("eventName4",0f,99,df,12),
	HX_("eventName5",10,99,df,12),
	HX_("eventName6",11,99,df,12),
	HX_("char1",9b,9c,b3,45),
	HX_("eventNamesss",6e,6d,f3,3c),
	HX_("eventNamesss2",04,53,0c,18),
	HX_("eventNa",ed,c6,9a,06),
	HX_("button4",02,52,75,ca),
	HX_("versionShit",f8,4e,3b,e2),
	HX_("stagebg",03,6c,ca,2d),
	HX_("create",fc,66,0f,7c),
	HX_("ss",a0,64,00,00),
	HX_("createS2",7b,66,f4,2b),
	HX_("selectbfordad",44,ad,2b,e8),
	HX_("charswitchevent",90,ee,fd,3e),
	HX_("charswitcheventstep2",d6,c2,35,53),
	HX_("testscript",dd,1f,c0,2b),
	HX_("savescript",08,65,85,5b),
	HX_("addanimevent",28,e6,9f,f7),
	HX_("update",09,86,05,87),
	::String(null()) };

static void MidSongEventEditor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MidSongEventEditor_obj::song,"song");
	HX_MARK_MEMBER_NAME(MidSongEventEditor_obj::code,"code");
	HX_MARK_MEMBER_NAME(MidSongEventEditor_obj::codetested,"codetested");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MidSongEventEditor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MidSongEventEditor_obj::song,"song");
	HX_VISIT_MEMBER_NAME(MidSongEventEditor_obj::code,"code");
	HX_VISIT_MEMBER_NAME(MidSongEventEditor_obj::codetested,"codetested");
};

#endif

::hx::Class MidSongEventEditor_obj::__mClass;

static ::String MidSongEventEditor_obj_sStaticFields[] = {
	HX_("song",d5,23,58,4c),
	HX_("code",2d,b1,c4,41),
	HX_("codetested",1e,aa,5f,68),
	::String(null())
};

void MidSongEventEditor_obj::__register()
{
	MidSongEventEditor_obj _hx_dummy;
	MidSongEventEditor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("engineEditors.MidSongEventEditor",b4,7e,97,7e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MidSongEventEditor_obj::__GetStatic;
	__mClass->mSetStaticField = &MidSongEventEditor_obj::__SetStatic;
	__mClass->mMarkFunc = MidSongEventEditor_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MidSongEventEditor_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MidSongEventEditor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MidSongEventEditor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MidSongEventEditor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MidSongEventEditor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MidSongEventEditor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MidSongEventEditor_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_44_boot)
HXDLIN(  44)		song = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_51_boot)
HXDLIN(  51)		code = HX_("function beatHit(){",05,64,0e,92);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d2c8e34d8ef7a106_52_boot)
HXDLIN(  52)		codetested = HX_("",00,00,00,00);
            	}
}

} // end namespace engineEditors
