// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_KeyBindMenu
#include <KeyBindMenu.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_SetUser
#include <SetUser.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_options_GamePlaySub
#include <options/GamePlaySub.h>
#endif
#ifndef INCLUDED_options_MenuOptions
#include <options/MenuOptions.h>
#endif
#ifndef INCLUDED_options_MenuSongSelector
#include <options/MenuSongSelector.h>
#endif
#ifndef INCLUDED_options_Question
#include <options/Question.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e493678d6ca5c20e_29_new,"options.GamePlaySub","new",0x92684adc,"options.GamePlaySub.new","options/GamePlaySub.hx",29,0x5d6363d5)
static const ::String _hx_array_data_fe02ecea_1[] = {
	HX_("System Cursor",e7,df,70,f0),HX_("Toggle Dark Mode",e1,87,f0,97),HX_("Toggle Light Mode",19,64,fb,98),HX_("Toggle Practatice Mode",6f,54,e4,fd),HX_("Set Menu Music",42,37,43,9d),HX_("Edit Keybindings",17,eb,d4,a9),HX_("Update Announcaments On",06,73,f1,96),HX_("Colored Menu",3d,0e,c5,27),HX_("Redesigned Menu",ef,e8,a2,ef),HX_("Set Username",94,8e,59,a3),HX_("Scroll Speed",34,bf,42,cb),HX_("Offset Thing",a1,d7,92,d9),HX_("Ghost Tap",d2,a8,2d,a0),HX_("Bot Play",ed,ae,3b,ca),HX_("Down Scroll",0b,74,eb,eb),HX_("Reset Button On",dc,94,c4,2c),HX_("Reset Button Off",12,a5,3d,ff),HX_("Customize Gameplay",a3,2e,c4,04),
};
HX_LOCAL_STACK_FRAME(_hx_pos_e493678d6ca5c20e_38_optionEnter,"options.GamePlaySub","optionEnter",0x11eab7df,"options.GamePlaySub.optionEnter","options/GamePlaySub.hx",38,0x5d6363d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e493678d6ca5c20e_178_create,"options.GamePlaySub","create",0x6479a200,"options.GamePlaySub.create","options/GamePlaySub.hx",178,0x5d6363d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e493678d6ca5c20e_157_create,"options.GamePlaySub","create",0x6479a200,"options.GamePlaySub.create","options/GamePlaySub.hx",157,0x5d6363d5)
static const ::String _hx_array_data_fe02ecea_7[] = {
	HX_("#314d7f",00,3a,f0,6c),HX_("#4e7093",c7,f0,f5,c5),HX_("#70526e",08,5c,7a,73),HX_("#594465",86,29,b7,d4),
};
static const int _hx_array_data_fe02ecea_8[] = {
	(int)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e493678d6ca5c20e_210_update,"options.GamePlaySub","update",0x6f6fc10d,"options.GamePlaySub.update","options/GamePlaySub.hx",210,0x5d6363d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e493678d6ca5c20e_232_changeSelection,"options.GamePlaySub","changeSelection",0x2dd5dd38,"options.GamePlaySub.changeSelection","options/GamePlaySub.hx",232,0x5d6363d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e493678d6ca5c20e_33_boot,"options.GamePlaySub","boot",0x80f23636,"options.GamePlaySub.boot","options/GamePlaySub.hx",33,0x5d6363d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e493678d6ca5c20e_35_boot,"options.GamePlaySub","boot",0x80f23636,"options.GamePlaySub.boot","options/GamePlaySub.hx",35,0x5d6363d5)
namespace options{

void GamePlaySub_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_e493678d6ca5c20e_29_new)
HXLINE(  32)		this->options = ::Array_obj< ::String >::fromData( _hx_array_data_fe02ecea_1,18);
HXLINE(  29)		super::__construct(TransIn,TransOut);
            	}

Dynamic GamePlaySub_obj::__CreateEmpty() { return new GamePlaySub_obj; }

void *GamePlaySub_obj::_hx_vtable = 0;

Dynamic GamePlaySub_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GamePlaySub_obj > _hx_result = new GamePlaySub_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool GamePlaySub_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3d0053dc || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void GamePlaySub_obj::optionEnter(::String label){
            	HX_GC_STACKFRAME(&_hx_pos_e493678d6ca5c20e_38_optionEnter)
HXDLIN(  38)		::String _hx_switch_0 = label;
            		if (  (_hx_switch_0==HX_("Bot Play",ed,ae,3b,ca)) ){
HXLINE(  98)			::flixel::FlxG_obj::save->data->__SetField(HX_("botplay",7b,fb,a9,61),!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) )),::hx::paccDynamic);
HXLINE( 100)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 100)			_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE(  97)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Colored Menu",3d,0e,c5,27)) ){
HXLINE(  60)			::options::Question_obj::isMenuSong = false;
HXLINE(  61)			::options::Question_obj::isAntialiasing = false;
HXLINE(  62)			::options::Question_obj::isWatermark = false;
HXLINE(  63)			::options::Question_obj::isFlashing = false;
HXLINE(  64)			::options::Question_obj::isFPS = false;
HXLINE(  65)			::options::Question_obj::isScrollSpeed = false;
HXLINE(  66)			::options::Question_obj::isMidSongEvent = false;
HXLINE(  67)			::options::Question_obj::isRedesigned = false;
HXLINE(  68)			::options::Question_obj::isSystemCursor = false;
HXLINE(  69)			::options::Question_obj::isColored = true;
HXLINE(  70)			::options::Question_obj::isBotPlay = false;
HXLINE(  71)			::options::Question_obj::isScroll = false;
HXLINE(  72)			::options::Question_obj::isTap = false;
HXLINE(  73)			this->openSubState( ::options::Question_obj::__alloc( HX_CTX ));
HXLINE(  59)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Down Scroll",0b,74,eb,eb)) ){
HXLINE( 102)			::options::Question_obj::isMenuSong = false;
HXLINE( 103)			::options::Question_obj::isAntialiasing = false;
HXLINE( 104)			::options::Question_obj::isMidSongEvent = false;
HXLINE( 105)			::options::Question_obj::isWatermark = false;
HXLINE( 106)			::options::Question_obj::isFlashing = false;
HXLINE( 107)			::options::Question_obj::isFPS = false;
HXLINE( 108)			::options::Question_obj::isScrollSpeed = false;
HXLINE( 109)			::options::Question_obj::isRedesigned = false;
HXLINE( 110)			::options::Question_obj::isColored = false;
HXLINE( 111)			::options::Question_obj::isBotPlay = false;
HXLINE( 112)			::options::Question_obj::isSystemCursor = false;
HXLINE( 113)			::options::Question_obj::isScroll = true;
HXLINE( 114)			::options::Question_obj::isTap = false;
HXLINE( 115)			this->openSubState( ::options::Question_obj::__alloc( HX_CTX ));
HXLINE( 101)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Edit Keybindings",17,eb,d4,a9)) ){
HXLINE(  96)			this->openSubState( ::KeyBindMenu_obj::__alloc( HX_CTX ,null()));
HXDLIN(  96)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Ghost Tap",d2,a8,2d,a0)) ){
HXLINE(  92)			::flixel::FlxG_obj::save->data->__SetField(HX_("ghost",4f,8f,58,93),!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) )),::hx::paccDynamic);
HXLINE(  94)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  94)			_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE(  91)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Off Cutscenes",78,dc,5c,8a)) ){
HXLINE(  46)			::flixel::FlxG_obj::save->data->__SetField(HX_("oncutscenes",aa,df,5f,4e),HX_("false",a3,35,4f,fb),::hx::paccDynamic);
HXDLIN(  46)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("On Cutscenes",68,a2,b6,22)) ){
HXLINE(  44)			::flixel::FlxG_obj::save->data->__SetField(HX_("oncutscenes",aa,df,5f,4e),HX_("true",4e,a7,03,4d),::hx::paccDynamic);
HXDLIN(  44)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Redesigned Menu",ef,e8,a2,ef)) ){
HXLINE(  75)			::options::Question_obj::isMenuSong = false;
HXLINE(  76)			::options::Question_obj::isAntialiasing = false;
HXLINE(  77)			::options::Question_obj::isWatermark = false;
HXLINE(  78)			::options::Question_obj::isFlashing = false;
HXLINE(  79)			::options::Question_obj::isFPS = false;
HXLINE(  80)			::options::Question_obj::isMidSongEvent = false;
HXLINE(  81)			::options::Question_obj::isScrollSpeed = false;
HXLINE(  82)			::options::Question_obj::isRedesigned = true;
HXLINE(  83)			::options::Question_obj::isColored = false;
HXLINE(  84)			::options::Question_obj::isSystemCursor = false;
HXLINE(  85)			::options::Question_obj::isBotPlay = false;
HXLINE(  86)			::options::Question_obj::isScroll = false;
HXLINE(  87)			::options::Question_obj::isTap = false;
HXLINE(  88)			this->openSubState( ::options::Question_obj::__alloc( HX_CTX ));
HXLINE(  74)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Reset Button Off",12,a5,3d,ff)) ){
HXLINE( 134)			::flixel::FlxG_obj::save->data->__SetField(HX_("resetButton",21,e5,f4,79),HX_("off",6f,93,54,00),::hx::paccDynamic);
HXDLIN( 134)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Reset Button On",dc,94,c4,2c)) ){
HXLINE( 132)			::flixel::FlxG_obj::save->data->__SetField(HX_("resetButton",21,e5,f4,79),HX_("on",1f,61,00,00),::hx::paccDynamic);
HXDLIN( 132)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Scroll Speed",34,bf,42,cb)) ){
HXLINE( 117)			::options::Question_obj::isMenuSong = false;
HXLINE( 118)			::options::Question_obj::isAntialiasing = false;
HXLINE( 119)			::options::Question_obj::isWatermark = false;
HXLINE( 120)			::options::Question_obj::isFlashing = false;
HXLINE( 121)			::options::Question_obj::isFPS = false;
HXLINE( 122)			::options::Question_obj::isScrollSpeed = true;
HXLINE( 123)			::options::Question_obj::isMidSongEvent = false;
HXLINE( 124)			::options::Question_obj::isRedesigned = false;
HXLINE( 125)			::options::Question_obj::isColored = false;
HXLINE( 126)			::options::Question_obj::isBotPlay = false;
HXLINE( 127)			::options::Question_obj::isScroll = false;
HXLINE( 128)			::options::Question_obj::isSystemCursor = false;
HXLINE( 129)			::options::Question_obj::isTap = false;
HXLINE( 130)			this->openSubState( ::options::Question_obj::__alloc( HX_CTX ));
HXLINE( 116)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Set Menu Music",42,37,43,9d)) ){
HXLINE(  56)			 ::flixel::FlxState nextState =  ::options::MenuSongSelector_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  56)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  56)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
HXDLIN(  56)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Set Username",94,8e,59,a3)) ){
HXLINE(  90)			 ::flixel::FlxState nextState =  ::SetUser_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  90)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  90)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
HXDLIN(  90)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("System Cursor",e7,df,70,f0)) ){
HXLINE( 136)			::options::Question_obj::isMenuSong = false;
HXLINE( 137)			::options::Question_obj::isAntialiasing = false;
HXLINE( 138)			::options::Question_obj::isWatermark = false;
HXLINE( 139)			::options::Question_obj::isFlashing = false;
HXLINE( 140)			::options::Question_obj::isFPS = false;
HXLINE( 141)			::options::Question_obj::isScrollSpeed = false;
HXLINE( 142)			::options::Question_obj::isMidSongEvent = false;
HXLINE( 143)			::options::Question_obj::isRedesigned = false;
HXLINE( 144)			::options::Question_obj::isColored = false;
HXLINE( 145)			::options::Question_obj::isBotPlay = false;
HXLINE( 146)			::options::Question_obj::isScroll = false;
HXLINE( 147)			::options::Question_obj::isTap = false;
HXLINE( 148)			::options::Question_obj::isSystemCursor = true;
HXLINE( 149)			this->openSubState( ::options::Question_obj::__alloc( HX_CTX ));
HXLINE( 135)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Toggle Dark Mode",e1,87,f0,97)) ){
HXLINE(  40)			::flixel::FlxG_obj::save->data->__SetField(HX_("mode",63,d3,60,48),HX_("dark",76,54,63,42),::hx::paccDynamic);
HXDLIN(  40)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Toggle Light Mode",19,64,fb,98)) ){
HXLINE(  42)			::flixel::FlxG_obj::save->data->__SetField(HX_("mode",63,d3,60,48),HX_("light",d6,90,fc,74),::hx::paccDynamic);
HXDLIN(  42)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Toggle Practatice Mode",6f,54,e4,fd)) ){
HXLINE(  48)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("practaticeMode",2b,35,80,f3),::hx::paccDynamic),HX_("on",1f,61,00,00) )) {
HXLINE(  50)				::flixel::FlxG_obj::save->data->__SetField(HX_("practaticeMode",2b,35,80,f3),HX_("off",6f,93,54,00),::hx::paccDynamic);
            			}
            			else {
HXLINE(  53)				::flixel::FlxG_obj::save->data->__SetField(HX_("practaticeMode",2b,35,80,f3),HX_("on",1f,61,00,00),::hx::paccDynamic);
            			}
HXLINE(  48)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Update Announcaments On",06,73,f1,96)) ){
HXLINE(  58)			::flixel::FlxG_obj::save->data->__SetField(HX_("updatenotification",74,e6,05,0c),HX_("true",4e,a7,03,4d),::hx::paccDynamic);
HXDLIN(  58)			goto _hx_goto_2;
            		}
            		_hx_goto_2:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GamePlaySub_obj,optionEnter,(void))

void GamePlaySub_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0,::Array< ::String >,bgColors,::Array< int >,colorRotation, ::flixel::FlxSprite,menuBG1) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_e493678d6ca5c20e_178_create)
HXLINE( 179)			 ::flixel::FlxSprite menuBG = menuBG1;
HXDLIN( 179)			int menuBG2 = menuBG1->color;
HXDLIN( 179)			::flixel::tweens::FlxTween_obj::color(menuBG,2,menuBG2,( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(bgColors->__get(colorRotation->__get(0)))) ),null());
HXLINE( 180)			if ((colorRotation->__get(0) < (bgColors->length - 1))) {
HXLINE( 181)				colorRotation[0]++;
            			}
            			else {
HXLINE( 183)				colorRotation[0] = 0;
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_e493678d6ca5c20e_157_create)
HXLINE( 160)		::DiscordClient_obj::changePresence(HX_("In the Options",f4,bf,f5,43),null(),null(),null(),null());
HXLINE( 164)		::Array< ::String > bgColors = ::Array_obj< ::String >::fromData( _hx_array_data_fe02ecea_7,4);
HXLINE( 165)		::Array< int > colorRotation = ::Array_obj< int >::fromData( _hx_array_data_fe02ecea_8,1);
HXLINE( 167)		 ::flixel::FlxSprite menuBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 167)		 ::flixel::FlxSprite menuBG1 = menuBG->loadGraphic(::Paths_obj::loadImage(HX_("menuDesat",26,91,04,72),null()),null(),null(),null(),null(),null());
HXLINE( 169)		 ::flixel::FlxSprite menuBG2 = menuBG1;
HXDLIN( 169)		menuBG2->setGraphicSize(::Std_obj::_hx_int((menuBG1->get_width() * ((Float)1.1))),null());
HXLINE( 170)		menuBG1->updateHitbox();
HXLINE( 171)		{
HXLINE( 171)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 171)			bool _hx_tmp;
HXDLIN( 171)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 171)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 171)					_hx_tmp = false;
            				}
            			}
HXDLIN( 171)			if (_hx_tmp) {
HXLINE( 171)				 ::flixel::FlxSprite menuBG = menuBG1;
HXDLIN( 171)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 171)				menuBG->set_x(((( (Float)(_hx_tmp) ) - menuBG1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 171)			bool _hx_tmp1;
HXDLIN( 171)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 171)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 171)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 171)			if (_hx_tmp1) {
HXLINE( 171)				 ::flixel::FlxSprite menuBG = menuBG1;
HXDLIN( 171)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 171)				menuBG->set_y(((( (Float)(_hx_tmp) ) - menuBG1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 172)		menuBG1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 173)		this->add(menuBG1);
HXLINE( 175)		 ::flixel::FlxSprite menuBG3 = menuBG1;
HXDLIN( 175)		int menuBG4 = menuBG1->color;
HXDLIN( 175)		::flixel::tweens::FlxTween_obj::color(menuBG3,2,menuBG4,( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(bgColors->__get(colorRotation->__get(0)))) ),null());
HXLINE( 177)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(bgColors,colorRotation,menuBG1)),0);
HXLINE( 186)		this->grpOptions =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 187)		this->add(this->grpOptions);
HXLINE( 191)		{
HXLINE( 191)			int _g = 0;
HXDLIN( 191)			int _g1 = this->options->length;
HXDLIN( 191)			while((_g < _g1)){
HXLINE( 191)				_g = (_g + 1);
HXDLIN( 191)				int i = (_g - 1);
HXLINE( 193)				 ::Alphabet optionText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)((70 * i)) ),this->options->__get(i),true,false,null(),null(),null());
HXLINE( 194)				optionText->isMenuItem = true;
HXLINE( 195)				{
HXLINE( 195)					 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 195)					bool _hx_tmp;
HXDLIN( 195)					switch((int)(axes->_hx_getIndex())){
            						case (int)0: case (int)2: {
HXLINE( 195)							_hx_tmp = true;
            						}
            						break;
            						default:{
HXLINE( 195)							_hx_tmp = false;
            						}
            					}
HXDLIN( 195)					if (_hx_tmp) {
HXLINE( 195)						int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 195)						optionText->set_x(((( (Float)(_hx_tmp) ) - optionText->get_width()) / ( (Float)(2) )));
            					}
HXDLIN( 195)					bool _hx_tmp1;
HXDLIN( 195)					switch((int)(axes->_hx_getIndex())){
            						case (int)1: case (int)2: {
HXLINE( 195)							_hx_tmp1 = true;
            						}
            						break;
            						default:{
HXLINE( 195)							_hx_tmp1 = false;
            						}
            					}
HXDLIN( 195)					if (_hx_tmp1) {
HXLINE( 195)						int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 195)						optionText->set_y(((( (Float)(_hx_tmp) ) - optionText->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE( 196)				optionText->targetY = ( (Float)(i) );
HXLINE( 197)				{
HXLINE( 197)					 ::Alphabet _g1 = optionText;
HXDLIN( 197)					_g1->set_y((_g1->y + ((( (Float)(100) ) * (( (Float)(i) ) - (( (Float)(this->options->length) ) / ( (Float)(2) )))) + 50)));
            				}
HXLINE( 198)				this->grpOptions->add(optionText).StaticCast<  ::Alphabet >();
            			}
            		}
HXLINE( 201)		this->selectorLeft =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_(">",3e,00,00,00),true,false,null(),null(),null());
HXLINE( 202)		this->add(this->selectorLeft);
HXLINE( 203)		this->selectorRight =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("<",3c,00,00,00),true,false,null(),null(),null());
HXLINE( 204)		this->add(this->selectorRight);
HXLINE( 206)		this->changeSelection(null());
HXLINE( 207)		this->super::create();
            	}


void GamePlaySub_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_e493678d6ca5c20e_210_update)
HXLINE( 211)		this->super::update(elapsed);
HXLINE( 212)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 212)		if (_this->keyManager->checkStatusUnsafe(38,_this->status)) {
HXLINE( 214)			this->changeSelection(-1);
HXLINE( 215)			::options::GamePlaySub_obj::hm = true;
            		}
HXLINE( 217)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 217)		if (_this1->keyManager->checkStatusUnsafe(40,_this1->status)) {
HXLINE( 219)			this->changeSelection(1);
HXLINE( 220)			::options::GamePlaySub_obj::hm = false;
            		}
HXLINE( 222)		if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 224)			this->optionEnter(this->options->__get(::options::GamePlaySub_obj::curSelected));
            		}
HXLINE( 226)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 228)			 ::flixel::FlxState nextState =  ::options::MenuOptions_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 228)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 228)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


void GamePlaySub_obj::changeSelection(::hx::Null< int >  __o_huh){
            		int huh = __o_huh.Default(0);
            	HX_STACKFRAME(&_hx_pos_e493678d6ca5c20e_232_changeSelection)
HXLINE( 233)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::options::GamePlaySub >();
HXDLIN( 233)		::options::GamePlaySub_obj::curSelected = (::options::GamePlaySub_obj::curSelected + huh);
HXLINE( 234)		if ((::options::GamePlaySub_obj::curSelected < 0)) {
HXLINE( 235)			::options::GamePlaySub_obj::curSelected = (this->options->length - 1);
            		}
HXLINE( 236)		if ((::options::GamePlaySub_obj::curSelected >= this->options->length)) {
HXLINE( 237)			::options::GamePlaySub_obj::curSelected = 0;
            		}
HXLINE( 239)		int bullShit = 0;
HXLINE( 241)		{
HXLINE( 241)			int _g = 0;
HXDLIN( 241)			::Array< ::Dynamic> _g1 = this->grpOptions->members;
HXDLIN( 241)			while((_g < _g1->length)){
HXLINE( 241)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 241)				_g = (_g + 1);
HXLINE( 243)				item->targetY = ( (Float)((bullShit - ::options::GamePlaySub_obj::curSelected)) );
HXLINE( 244)				bullShit = (bullShit + 1);
HXLINE( 246)				item->set_alpha(((Float)0.6));
HXLINE( 249)				if ((item->targetY == 0)) {
HXLINE( 251)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
HXLINE( 255)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 255)		_hx_tmp1->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(GamePlaySub_obj,changeSelection,(void))

int GamePlaySub_obj::curSelected;

 ::flixel::FlxSprite GamePlaySub_obj::menuBG;

bool GamePlaySub_obj::hm;


::hx::ObjectPtr< GamePlaySub_obj > GamePlaySub_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< GamePlaySub_obj > __this = new GamePlaySub_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< GamePlaySub_obj > GamePlaySub_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	GamePlaySub_obj *__this = (GamePlaySub_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GamePlaySub_obj), true, "options.GamePlaySub"));
	*(void **)__this = GamePlaySub_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

GamePlaySub_obj::GamePlaySub_obj()
{
}

void GamePlaySub_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GamePlaySub);
	HX_MARK_MEMBER_NAME(grpOptions,"grpOptions");
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(selectorLeft,"selectorLeft");
	HX_MARK_MEMBER_NAME(selectorRight,"selectorRight");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GamePlaySub_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(grpOptions,"grpOptions");
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(selectorLeft,"selectorLeft");
	HX_VISIT_MEMBER_NAME(selectorRight,"selectorRight");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val GamePlaySub_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { return ::hx::Val( options ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { return ::hx::Val( grpOptions ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"optionEnter") ) { return ::hx::Val( optionEnter_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selectorLeft") ) { return ::hx::Val( selectorLeft ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectorRight") ) { return ::hx::Val( selectorRight ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool GamePlaySub_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"hm") ) { outValue = ( hm ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"menuBG") ) { outValue = ( menuBG ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val GamePlaySub_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { grpOptions=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selectorLeft") ) { selectorLeft=inValue.Cast<  ::Alphabet >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectorRight") ) { selectorRight=inValue.Cast<  ::Alphabet >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool GamePlaySub_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"hm") ) { hm=ioValue.Cast< bool >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"menuBG") ) { menuBG=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void GamePlaySub_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("grpOptions",f9,45,d8,00));
	outFields->push(HX_("options",5e,33,fe,df));
	outFields->push(HX_("selectorLeft",c6,e2,77,e7));
	outFields->push(HX_("selectorRight",3d,98,7b,18));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GamePlaySub_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(GamePlaySub_obj,grpOptions),HX_("grpOptions",f9,45,d8,00)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(GamePlaySub_obj,options),HX_("options",5e,33,fe,df)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(GamePlaySub_obj,selectorLeft),HX_("selectorLeft",c6,e2,77,e7)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(GamePlaySub_obj,selectorRight),HX_("selectorRight",3d,98,7b,18)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo GamePlaySub_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &GamePlaySub_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(void *) &GamePlaySub_obj::menuBG,HX_("menuBG",24,65,6d,05)},
	{::hx::fsBool,(void *) &GamePlaySub_obj::hm,HX_("hm",05,5b,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String GamePlaySub_obj_sMemberFields[] = {
	HX_("grpOptions",f9,45,d8,00),
	HX_("options",5e,33,fe,df),
	HX_("optionEnter",63,61,dd,12),
	HX_("selectorLeft",c6,e2,77,e7),
	HX_("selectorRight",3d,98,7b,18),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("changeSelection",bc,98,b5,48),
	::String(null()) };

static void GamePlaySub_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GamePlaySub_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(GamePlaySub_obj::menuBG,"menuBG");
	HX_MARK_MEMBER_NAME(GamePlaySub_obj::hm,"hm");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GamePlaySub_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GamePlaySub_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(GamePlaySub_obj::menuBG,"menuBG");
	HX_VISIT_MEMBER_NAME(GamePlaySub_obj::hm,"hm");
};

#endif

::hx::Class GamePlaySub_obj::__mClass;

static ::String GamePlaySub_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("menuBG",24,65,6d,05),
	HX_("hm",05,5b,00,00),
	::String(null())
};

void GamePlaySub_obj::__register()
{
	GamePlaySub_obj _hx_dummy;
	GamePlaySub_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("options.GamePlaySub",ea,ec,02,fe);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GamePlaySub_obj::__GetStatic;
	__mClass->mSetStaticField = &GamePlaySub_obj::__SetStatic;
	__mClass->mMarkFunc = GamePlaySub_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GamePlaySub_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GamePlaySub_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GamePlaySub_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GamePlaySub_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GamePlaySub_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GamePlaySub_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GamePlaySub_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e493678d6ca5c20e_33_boot)
HXDLIN(  33)		curSelected = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e493678d6ca5c20e_35_boot)
HXDLIN(  35)		hm = false;
            	}
}

} // end namespace options
