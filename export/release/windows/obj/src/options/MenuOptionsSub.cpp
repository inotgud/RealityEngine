// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_Debug
#include <Debug.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_options_MenuOptionsSub
#include <options/MenuOptionsSub.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_13bb68b59ee7c762_29_new,"options.MenuOptionsSub","new",0x075effe3,"options.MenuOptionsSub.new","options/MenuOptionsSub.hx",29,0x98bcbbcc)
HX_LOCAL_STACK_FRAME(_hx_pos_13bb68b59ee7c762_42_optionEnter,"options.MenuOptionsSub","optionEnter",0xe0b84be6,"options.MenuOptionsSub.optionEnter","options/MenuOptionsSub.hx",42,0x98bcbbcc)
HX_LOCAL_STACK_FRAME(_hx_pos_13bb68b59ee7c762_105_create,"options.MenuOptionsSub","create",0x95828b59,"options.MenuOptionsSub.create","options/MenuOptionsSub.hx",105,0x98bcbbcc)
HX_LOCAL_STACK_FRAME(_hx_pos_13bb68b59ee7c762_73_create,"options.MenuOptionsSub","create",0x95828b59,"options.MenuOptionsSub.create","options/MenuOptionsSub.hx",73,0x98bcbbcc)
static const ::String _hx_array_data_258ad271_6[] = {
	HX_("#314d7f",00,3a,f0,6c),HX_("#4e7093",c7,f0,f5,c5),HX_("#70526e",08,5c,7a,73),HX_("#594465",86,29,b7,d4),
};
static const int _hx_array_data_258ad271_7[] = {
	(int)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_13bb68b59ee7c762_143_update,"options.MenuOptionsSub","update",0xa078aa66,"options.MenuOptionsSub.update","options/MenuOptionsSub.hx",143,0x98bcbbcc)
HX_LOCAL_STACK_FRAME(_hx_pos_13bb68b59ee7c762_168_changeSelection,"options.MenuOptionsSub","changeSelection",0x3ccb80bf,"options.MenuOptionsSub.changeSelection","options/MenuOptionsSub.hx",168,0x98bcbbcc)
HX_LOCAL_STACK_FRAME(_hx_pos_13bb68b59ee7c762_34_boot,"options.MenuOptionsSub","boot",0x63d9e74f,"options.MenuOptionsSub.boot","options/MenuOptionsSub.hx",34,0x98bcbbcc)
namespace options{

void MenuOptionsSub_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_13bb68b59ee7c762_29_new)
HXLINE(  38)		this->iconArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  29)		super::__construct();
            	}

Dynamic MenuOptionsSub_obj::__CreateEmpty() { return new MenuOptionsSub_obj; }

void *MenuOptionsSub_obj::_hx_vtable = 0;

Dynamic MenuOptionsSub_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuOptionsSub_obj > _hx_result = new MenuOptionsSub_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MenuOptionsSub_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x203e99db) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x203e99db;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void MenuOptionsSub_obj::optionEnter(::String label){
            	HX_STACKFRAME(&_hx_pos_13bb68b59ee7c762_42_optionEnter)
HXDLIN(  42)		::String _hx_switch_0 = label;
            		if (  (_hx_switch_0==HX_("Appearance",04,ca,4d,37)) ){
HXLINE(  51)			this->description = HX_("Appearance",04,ca,4d,37);
HXDLIN(  51)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Gameplay",06,bf,58,a5)) ){
HXLINE(  48)			this->description = HX_("Gameplay option",4f,79,25,8e);
HXDLIN(  48)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Language",78,3c,c3,53)) ){
HXLINE(  45)			this->description = HX_("Your Friday Night Language",d4,49,6d,93);
HXDLIN(  45)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Misc",0c,7f,35,33)) ){
HXLINE(  54)			this->description = HX_("Misc",0c,7f,35,33);
HXDLIN(  54)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Real Options",9c,c4,be,94)) ){
HXLINE(  60)			this->description = HX_("Old Options",a5,4e,f8,1d);
HXDLIN(  60)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("Saves",76,ba,b9,0a)) ){
HXLINE(  57)			this->description = HX_("Your PC FNF Option",77,df,b2,10);
HXDLIN(  57)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  64)			this->description = HX_("",00,00,00,00);
            		}
            		_hx_goto_1:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuOptionsSub_obj,optionEnter,(void))

void MenuOptionsSub_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0,::Array< ::String >,bgColors,::Array< int >,colorRotation, ::flixel::FlxSprite,menuBG1) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_13bb68b59ee7c762_105_create)
HXLINE( 106)			 ::flixel::FlxSprite menuBG = menuBG1;
HXDLIN( 106)			int menuBG2 = menuBG1->color;
HXDLIN( 106)			::flixel::tweens::FlxTween_obj::color(menuBG,2,menuBG2,( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(bgColors->__get(colorRotation->__get(0)))) ),null());
HXLINE( 107)			if ((colorRotation->__get(0) < (bgColors->length - 1))) {
HXLINE( 108)				colorRotation[0]++;
            			}
            			else {
HXLINE( 110)				colorRotation[0] = 0;
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_13bb68b59ee7c762_73_create)
HXLINE(  76)		::DiscordClient_obj::changePresence(HX_("In the Options",f4,bf,f5,43),null(),null(),null(),null());
HXLINE(  80)		 ::Dynamic jsonData = ::Paths_obj::loadOptionsJson(HX_("options",5e,33,fe,df),null());
HXLINE(  81)		if (::hx::IsNull( jsonData )) {
HXLINE(  83)			{
HXLINE(  83)				 ::Dynamic input = HX_("Options Error!",1b,78,05,ac);
HXDLIN(  83)				if (::hx::IsNotNull( input )) {
HXLINE(  83)					::cpp::VirtualArray output = ::Debug_obj::formatOutput(input,::hx::SourceInfo(HX_("source/options/MenuOptionsSub.hx",58,06,b7,e6),83,HX_("options.MenuOptionsSub",71,d2,8a,25),HX_("create",fc,66,0f,7c)));
HXDLIN(  83)					::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_ERROR);
HXDLIN(  83)					::Debug_obj::writeToLogFile(output,HX_("ERROR",a8,03,18,f1));
            				}
            			}
HXLINE(  84)			return;
            		}
HXLINE(  87)		 ::Dynamic data = jsonData;
HXLINE(  88)		this->options = ( (::Array< ::String >)(data->__Field(HX_("options",5e,33,fe,df),::hx::paccDynamic)) );
HXLINE(  90)		::Array< ::String > bgColors = ::Array_obj< ::String >::fromData( _hx_array_data_258ad271_6,4);
HXLINE(  91)		::Array< int > colorRotation = ::Array_obj< int >::fromData( _hx_array_data_258ad271_7,1);
HXLINE(  93)		 ::flixel::FlxSprite menuBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  93)		 ::flixel::FlxSprite menuBG1 = menuBG->loadGraphic(::Paths_obj::loadImage(HX_("menuDesat",26,91,04,72),null()),null(),null(),null(),null(),null());
HXLINE(  95)		 ::flixel::FlxSprite menuBG2 = menuBG1;
HXDLIN(  95)		menuBG2->setGraphicSize(::Std_obj::_hx_int((menuBG1->get_width() * ((Float)1.1))),null());
HXLINE(  96)		menuBG1->updateHitbox();
HXLINE(  97)		{
HXLINE(  97)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  97)			bool _hx_tmp;
HXDLIN(  97)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  97)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(  97)					_hx_tmp = false;
            				}
            			}
HXDLIN(  97)			if (_hx_tmp) {
HXLINE(  97)				 ::flixel::FlxSprite menuBG = menuBG1;
HXDLIN(  97)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  97)				menuBG->set_x(((( (Float)(_hx_tmp) ) - menuBG1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  97)			bool _hx_tmp1;
HXDLIN(  97)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  97)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(  97)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(  97)			if (_hx_tmp1) {
HXLINE(  97)				 ::flixel::FlxSprite menuBG = menuBG1;
HXDLIN(  97)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  97)				menuBG->set_y(((( (Float)(_hx_tmp) ) - menuBG1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  98)		menuBG1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  99)		menuBG1->scrollFactor->set(null(),null());
HXLINE( 100)		this->add(menuBG1);
HXLINE( 102)		 ::flixel::FlxSprite menuBG3 = menuBG1;
HXDLIN( 102)		int menuBG4 = menuBG1->color;
HXDLIN( 102)		::flixel::tweens::FlxTween_obj::color(menuBG3,2,menuBG4,( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(bgColors->__get(colorRotation->__get(0)))) ),null());
HXLINE( 104)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(bgColors,colorRotation,menuBG1)),0);
HXLINE( 113)		this->grpOptions =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 114)		this->add(this->grpOptions);
HXLINE( 116)		{
HXLINE( 116)			int _g = 0;
HXDLIN( 116)			int _g1 = this->options->length;
HXDLIN( 116)			while((_g < _g1)){
HXLINE( 116)				_g = (_g + 1);
HXDLIN( 116)				int i = (_g - 1);
HXLINE( 118)				 ::Alphabet optionText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),this->options->__get(i),true,false,null(),null(),null());
HXLINE( 119)				{
HXLINE( 119)					 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 119)					bool _hx_tmp;
HXDLIN( 119)					switch((int)(axes->_hx_getIndex())){
            						case (int)0: case (int)2: {
HXLINE( 119)							_hx_tmp = true;
            						}
            						break;
            						default:{
HXLINE( 119)							_hx_tmp = false;
            						}
            					}
HXDLIN( 119)					if (_hx_tmp) {
HXLINE( 119)						int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 119)						optionText->set_x(((( (Float)(_hx_tmp) ) - optionText->get_width()) / ( (Float)(2) )));
            					}
HXDLIN( 119)					bool _hx_tmp1;
HXDLIN( 119)					switch((int)(axes->_hx_getIndex())){
            						case (int)1: case (int)2: {
HXLINE( 119)							_hx_tmp1 = true;
            						}
            						break;
            						default:{
HXLINE( 119)							_hx_tmp1 = false;
            						}
            					}
HXDLIN( 119)					if (_hx_tmp1) {
HXLINE( 119)						int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 119)						optionText->set_y(((( (Float)(_hx_tmp) ) - optionText->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE( 120)				optionText->scrollFactor->set(null(),null());
HXLINE( 121)				{
HXLINE( 121)					 ::Alphabet _g1 = optionText;
HXDLIN( 121)					_g1->set_y((_g1->y + ((( (Float)(100) ) * (( (Float)(i) ) - (( (Float)(this->options->length) ) / ( (Float)(2) )))) + 50)));
            				}
HXLINE( 122)				this->grpOptions->add(optionText).StaticCast<  ::Alphabet >();
            			}
            		}
HXLINE( 126)		this->selectorLeft =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_(">",3e,00,00,00),true,false,null(),null(),null());
HXLINE( 127)		this->selectorLeft->set_color(-16711681);
HXLINE( 128)		this->add(this->selectorLeft);
HXLINE( 130)		this->selectorRight =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("<",3c,00,00,00),true,false,null(),null(),null());
HXLINE( 131)		this->selectorRight->set_color(-16711681);
HXLINE( 132)		this->add(this->selectorRight);
HXLINE( 134)		 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,HX_("THIS OPTIONS BETA! if you want to enter real options click real options",ca,4f,7c,ea),12,null());
HXLINE( 135)		versionShit->scrollFactor->set(null(),null());
HXLINE( 136)		versionShit->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 137)		this->add(versionShit);
HXLINE( 139)		this->changeSelection(null());
HXLINE( 140)		this->super::create();
            	}


void MenuOptionsSub_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_13bb68b59ee7c762_143_update)
HXLINE( 144)		this->super::update(elapsed);
HXLINE( 145)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 145)		if (_this->keyManager->checkStatusUnsafe(38,_this->status)) {
HXLINE( 147)			this->changeSelection(-1);
            		}
HXLINE( 150)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 150)		if (_this1->keyManager->checkStatusUnsafe(40,_this1->status)) {
HXLINE( 152)			this->changeSelection(1);
            		}
HXLINE( 154)		if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 156)			this->optionEnter(this->options->__get(::options::MenuOptionsSub_obj::curSelected));
            		}
HXLINE( 158)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 160)			this->close();
            		}
HXLINE( 162)		if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 164)			this->changeSelection(-(::flixel::FlxG_obj::mouse->wheel));
            		}
            	}


void MenuOptionsSub_obj::changeSelection(::hx::Null< int >  __o_huh){
            		int huh = __o_huh.Default(0);
            	HX_STACKFRAME(&_hx_pos_13bb68b59ee7c762_168_changeSelection)
HXLINE( 169)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::options::MenuOptionsSub >();
HXDLIN( 169)		::options::MenuOptionsSub_obj::curSelected = (::options::MenuOptionsSub_obj::curSelected + huh);
HXLINE( 170)		if ((::options::MenuOptionsSub_obj::curSelected < 0)) {
HXLINE( 171)			::options::MenuOptionsSub_obj::curSelected = (this->options->length - 1);
            		}
HXLINE( 172)		if ((::options::MenuOptionsSub_obj::curSelected >= this->options->length)) {
HXLINE( 173)			::options::MenuOptionsSub_obj::curSelected = 0;
            		}
HXLINE( 175)		int bullShit = 0;
HXLINE( 177)		{
HXLINE( 177)			int _g = 0;
HXDLIN( 177)			::Array< ::Dynamic> _g1 = this->grpOptions->members;
HXDLIN( 177)			while((_g < _g1->length)){
HXLINE( 177)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 177)				_g = (_g + 1);
HXLINE( 178)				item->targetY = ( (Float)((bullShit - ::options::MenuOptionsSub_obj::curSelected)) );
HXLINE( 179)				bullShit = (bullShit + 1);
HXLINE( 183)				item->set_alpha(((Float)0.6));
HXLINE( 184)				if ((item->targetY == 0)) {
HXLINE( 185)					item->set_alpha(( (Float)(1) ));
HXLINE( 186)					this->selectorLeft->set_x((item->x - ( (Float)(63) )));
HXLINE( 187)					this->selectorLeft->set_y(item->y);
HXLINE( 188)					 ::Alphabet _hx_tmp = this->selectorRight;
HXDLIN( 188)					Float item1 = item->x;
HXDLIN( 188)					_hx_tmp->set_x(((item1 + item->get_width()) + 15));
HXLINE( 189)					this->selectorRight->set_y(item->y);
            				}
            			}
            		}
HXLINE( 192)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 192)		_hx_tmp1->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuOptionsSub_obj,changeSelection,(void))

int MenuOptionsSub_obj::curSelected;

 ::flixel::FlxSprite MenuOptionsSub_obj::menuBG;


::hx::ObjectPtr< MenuOptionsSub_obj > MenuOptionsSub_obj::__new() {
	::hx::ObjectPtr< MenuOptionsSub_obj > __this = new MenuOptionsSub_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MenuOptionsSub_obj > MenuOptionsSub_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MenuOptionsSub_obj *__this = (MenuOptionsSub_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuOptionsSub_obj), true, "options.MenuOptionsSub"));
	*(void **)__this = MenuOptionsSub_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MenuOptionsSub_obj::MenuOptionsSub_obj()
{
}

void MenuOptionsSub_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuOptionsSub);
	HX_MARK_MEMBER_NAME(description,"description");
	HX_MARK_MEMBER_NAME(grpOptions,"grpOptions");
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(descText,"descText");
	HX_MARK_MEMBER_NAME(iconArray,"iconArray");
	HX_MARK_MEMBER_NAME(optionText,"optionText");
	HX_MARK_MEMBER_NAME(selectorLeft,"selectorLeft");
	HX_MARK_MEMBER_NAME(selectorRight,"selectorRight");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuOptionsSub_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(description,"description");
	HX_VISIT_MEMBER_NAME(grpOptions,"grpOptions");
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(descText,"descText");
	HX_VISIT_MEMBER_NAME(iconArray,"iconArray");
	HX_VISIT_MEMBER_NAME(optionText,"optionText");
	HX_VISIT_MEMBER_NAME(selectorLeft,"selectorLeft");
	HX_VISIT_MEMBER_NAME(selectorRight,"selectorRight");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuOptionsSub_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { return ::hx::Val( options ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { return ::hx::Val( descText ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"iconArray") ) { return ::hx::Val( iconArray ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { return ::hx::Val( grpOptions ); }
		if (HX_FIELD_EQ(inName,"optionText") ) { return ::hx::Val( optionText ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"description") ) { return ::hx::Val( description ); }
		if (HX_FIELD_EQ(inName,"optionEnter") ) { return ::hx::Val( optionEnter_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selectorLeft") ) { return ::hx::Val( selectorLeft ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectorRight") ) { return ::hx::Val( selectorRight ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MenuOptionsSub_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"menuBG") ) { outValue = ( menuBG ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val MenuOptionsSub_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { descText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"iconArray") ) { iconArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { grpOptions=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"optionText") ) { optionText=inValue.Cast<  ::Alphabet >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"description") ) { description=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selectorLeft") ) { selectorLeft=inValue.Cast<  ::Alphabet >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectorRight") ) { selectorRight=inValue.Cast<  ::Alphabet >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MenuOptionsSub_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"menuBG") ) { menuBG=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void MenuOptionsSub_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("description",fc,08,1d,5f));
	outFields->push(HX_("grpOptions",f9,45,d8,00));
	outFields->push(HX_("options",5e,33,fe,df));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("descText",9e,53,35,f3));
	outFields->push(HX_("iconArray",60,3f,53,5f));
	outFields->push(HX_("optionText",c2,2a,95,92));
	outFields->push(HX_("selectorLeft",c6,e2,77,e7));
	outFields->push(HX_("selectorRight",3d,98,7b,18));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuOptionsSub_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(MenuOptionsSub_obj,description),HX_("description",fc,08,1d,5f)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MenuOptionsSub_obj,grpOptions),HX_("grpOptions",f9,45,d8,00)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MenuOptionsSub_obj,options),HX_("options",5e,33,fe,df)},
	{::hx::fsString,(int)offsetof(MenuOptionsSub_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuOptionsSub_obj,descText),HX_("descText",9e,53,35,f3)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MenuOptionsSub_obj,iconArray),HX_("iconArray",60,3f,53,5f)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(MenuOptionsSub_obj,optionText),HX_("optionText",c2,2a,95,92)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(MenuOptionsSub_obj,selectorLeft),HX_("selectorLeft",c6,e2,77,e7)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(MenuOptionsSub_obj,selectorRight),HX_("selectorRight",3d,98,7b,18)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MenuOptionsSub_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &MenuOptionsSub_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(void *) &MenuOptionsSub_obj::menuBG,HX_("menuBG",24,65,6d,05)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MenuOptionsSub_obj_sMemberFields[] = {
	HX_("description",fc,08,1d,5f),
	HX_("grpOptions",f9,45,d8,00),
	HX_("options",5e,33,fe,df),
	HX_("icon",79,e7,b2,45),
	HX_("descText",9e,53,35,f3),
	HX_("iconArray",60,3f,53,5f),
	HX_("optionText",c2,2a,95,92),
	HX_("optionEnter",63,61,dd,12),
	HX_("selectorLeft",c6,e2,77,e7),
	HX_("selectorRight",3d,98,7b,18),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("changeSelection",bc,98,b5,48),
	::String(null()) };

static void MenuOptionsSub_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MenuOptionsSub_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(MenuOptionsSub_obj::menuBG,"menuBG");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MenuOptionsSub_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MenuOptionsSub_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(MenuOptionsSub_obj::menuBG,"menuBG");
};

#endif

::hx::Class MenuOptionsSub_obj::__mClass;

static ::String MenuOptionsSub_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("menuBG",24,65,6d,05),
	::String(null())
};

void MenuOptionsSub_obj::__register()
{
	MenuOptionsSub_obj _hx_dummy;
	MenuOptionsSub_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("options.MenuOptionsSub",71,d2,8a,25);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MenuOptionsSub_obj::__GetStatic;
	__mClass->mSetStaticField = &MenuOptionsSub_obj::__SetStatic;
	__mClass->mMarkFunc = MenuOptionsSub_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MenuOptionsSub_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuOptionsSub_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuOptionsSub_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MenuOptionsSub_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuOptionsSub_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuOptionsSub_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MenuOptionsSub_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_13bb68b59ee7c762_34_boot)
HXDLIN(  34)		curSelected = 0;
            	}
}

} // end namespace options
