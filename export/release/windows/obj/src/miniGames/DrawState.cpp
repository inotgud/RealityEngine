// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_miniGames_DrawState
#include <miniGames/DrawState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a03d27872e111205_29_new,"miniGames.DrawState","new",0x4cc7657b,"miniGames.DrawState.new","miniGames/DrawState.hx",29,0x14bb9fd6)
HX_LOCAL_STACK_FRAME(_hx_pos_a03d27872e111205_33_create,"miniGames.DrawState","create",0xc81fb4c1,"miniGames.DrawState.create","miniGames/DrawState.hx",33,0x14bb9fd6)
HX_LOCAL_STACK_FRAME(_hx_pos_a03d27872e111205_45_update,"miniGames.DrawState","update",0xd315d3ce,"miniGames.DrawState.update","miniGames/DrawState.hx",45,0x14bb9fd6)
namespace miniGames{

void DrawState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_a03d27872e111205_29_new)
HXDLIN(  29)		super::__construct(TransIn,TransOut);
            	}

Dynamic DrawState_obj::__CreateEmpty() { return new DrawState_obj; }

void *DrawState_obj::_hx_vtable = 0;

Dynamic DrawState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DrawState_obj > _hx_result = new DrawState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool DrawState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x57577163) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x57577163;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void DrawState_obj::create(){
            	HX_STACKFRAME(&_hx_pos_a03d27872e111205_33_create)
HXLINE(  36)		::DiscordClient_obj::changePresence(HX_("In the MiniGames",40,bc,74,3c),null(),null(),null(),null());
HXLINE(  39)		this->super::create();
            	}


void DrawState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_a03d27872e111205_45_update)
HXDLIN(  45)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< DrawState_obj > DrawState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< DrawState_obj > __this = new DrawState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< DrawState_obj > DrawState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	DrawState_obj *__this = (DrawState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DrawState_obj), true, "miniGames.DrawState"));
	*(void **)__this = DrawState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

DrawState_obj::DrawState_obj()
{
}

::hx::Val DrawState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *DrawState_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *DrawState_obj_sStaticStorageInfo = 0;
#endif

static ::String DrawState_obj_sMemberFields[] = {
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class DrawState_obj::__mClass;

void DrawState_obj::__register()
{
	DrawState_obj _hx_dummy;
	DrawState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("miniGames.DrawState",09,8c,3a,c1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DrawState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DrawState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DrawState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DrawState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace miniGames
