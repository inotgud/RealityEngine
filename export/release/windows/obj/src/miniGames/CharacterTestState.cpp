// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_miniGames_CharacterTestState
#include <miniGames/CharacterTestState.h>
#endif
#ifndef INCLUDED_miniGames_MiniGamesState
#include <miniGames/MiniGamesState.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_726eca53aa8d4ca2_26_new,"miniGames.CharacterTestState","new",0xa790fd4c,"miniGames.CharacterTestState.new","miniGames/CharacterTestState.hx",26,0xda4b7a03)
HX_LOCAL_STACK_FRAME(_hx_pos_726eca53aa8d4ca2_39_create,"miniGames.CharacterTestState","create",0xea541590,"miniGames.CharacterTestState.create","miniGames/CharacterTestState.hx",39,0xda4b7a03)
HX_LOCAL_STACK_FRAME(_hx_pos_726eca53aa8d4ca2_83_OnClickButton,"miniGames.CharacterTestState","OnClickButton",0xb0b33147,"miniGames.CharacterTestState.OnClickButton","miniGames/CharacterTestState.hx",83,0xda4b7a03)
HX_LOCAL_STACK_FRAME(_hx_pos_726eca53aa8d4ca2_92_update,"miniGames.CharacterTestState","update",0xf54a349d,"miniGames.CharacterTestState.update","miniGames/CharacterTestState.hx",92,0xda4b7a03)
HX_LOCAL_STACK_FRAME(_hx_pos_726eca53aa8d4ca2_28_boot,"miniGames.CharacterTestState","boot",0xef65a5c6,"miniGames.CharacterTestState.boot","miniGames/CharacterTestState.hx",28,0xda4b7a03)
HX_LOCAL_STACK_FRAME(_hx_pos_726eca53aa8d4ca2_31_boot,"miniGames.CharacterTestState","boot",0xef65a5c6,"miniGames.CharacterTestState.boot","miniGames/CharacterTestState.hx",31,0xda4b7a03)
namespace miniGames{

void CharacterTestState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_726eca53aa8d4ca2_26_new)
HXLINE(  34)		this->charnamee = HX_("dad",47,36,4c,00);
HXLINE(  33)		this->name = 0;
HXLINE(  26)		super::__construct(TransIn,TransOut);
            	}

Dynamic CharacterTestState_obj::__CreateEmpty() { return new CharacterTestState_obj; }

void *CharacterTestState_obj::_hx_vtable = 0;

Dynamic CharacterTestState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CharacterTestState_obj > _hx_result = new CharacterTestState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CharacterTestState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7f9a72cc;
		}
	}
}

void CharacterTestState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_726eca53aa8d4ca2_39_create)
HXLINE(  40)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  41)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(  41)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("stageback",e5,7b,3b,06),null()),null(),null(),null(),null(),null());
HXLINE(  42)		bg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  43)		bg1->scrollFactor->set_y(((Float)0.10));
HXLINE(  44)		bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)1.1))),null());
HXLINE(  45)		bg1->updateHitbox();
HXLINE(  46)		{
HXLINE(  46)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  46)			bool _hx_tmp;
HXDLIN(  46)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  46)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(  46)					_hx_tmp = false;
            				}
            			}
HXDLIN(  46)			if (_hx_tmp) {
HXLINE(  46)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  46)				bg1->set_x(((( (Float)(_hx_tmp) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  46)			bool _hx_tmp1;
HXDLIN(  46)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  46)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(  46)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(  46)			if (_hx_tmp1) {
HXLINE(  46)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  46)				bg1->set_y(((( (Float)(_hx_tmp) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  47)		bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  48)		this->add(bg1);
HXLINE(  50)		 ::flixel::FlxSprite front =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,450,null());
HXDLIN(  50)		 ::flixel::FlxSprite front1 = front->loadGraphic(::Paths_obj::loadImage(HX_("stagefront",2b,fd,b0,c6),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE(  51)		front1->setGraphicSize(::Std_obj::_hx_int((front1->get_width() * ((Float)1.1))),null());
HXLINE(  52)		front1->updateHitbox();
HXLINE(  53)		front1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  54)		front1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE(  55)		this->add(front1);
HXLINE(  57)		::miniGames::CharacterTestState_obj::char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(500) ),( (Float)(300) ),HX_("bf",c4,55,00,00),true);
HXLINE(  58)		 ::Character _hx_tmp2 = ::miniGames::CharacterTestState_obj::char1;
HXDLIN(  58)		_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((::miniGames::CharacterTestState_obj::char1->get_width() * ((Float)0.8))),null());
HXLINE(  59)		this->add(::miniGames::CharacterTestState_obj::char1);
HXLINE(  60)		::miniGames::CharacterTestState_obj::char1->dance(null(),null());
HXLINE(  62)		 ::flixel::FlxSprite _hx_tmp3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(  62)		this->notes = _hx_tmp3->loadGraphic(::Paths_obj::loadImage(HX_("notes/notesidle",47,51,c3,51),null()),null(),null(),null(),null(),null());
HXLINE(  63)		this->notes->scale->set_x(::miniGames::CharacterTestState_obj::scale);
HXLINE(  64)		this->notes->scale->set_y(::miniGames::CharacterTestState_obj::scale);
HXLINE(  65)		{
HXLINE(  65)			 ::flixel::FlxSprite _this = this->notes;
HXDLIN(  65)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN(  65)			if (::hx::IsNull( axes1 )) {
HXLINE(  65)				axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN(  65)			bool _hx_tmp4;
HXDLIN(  65)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  65)					_hx_tmp4 = true;
            				}
            				break;
            				default:{
HXLINE(  65)					_hx_tmp4 = false;
            				}
            			}
HXDLIN(  65)			if (_hx_tmp4) {
HXLINE(  65)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  65)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  65)			bool _hx_tmp5;
HXDLIN(  65)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  65)					_hx_tmp5 = true;
            				}
            				break;
            				default:{
HXLINE(  65)					_hx_tmp5 = false;
            				}
            			}
HXDLIN(  65)			if (_hx_tmp5) {
HXLINE(  65)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  65)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  66)		this->add(this->notes);
HXLINE(  68)		this->button =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,150,20,HX_("Change Character",f9,50,ef,9c),this->OnClickButton_dyn());
HXLINE(  69)		this->add(this->button);
HXLINE(  70)		this->eventName =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,50,20,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE(  71)		this->add(this->eventName);
HXLINE(  73)		::miniGames::CharacterTestState_obj::versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,HX_("Controls - Zooms E/Q",4a,9c,cb,c4),12,null());
HXLINE(  74)		::miniGames::CharacterTestState_obj::versionShit->scrollFactor->set(null(),null());
HXLINE(  75)		::miniGames::CharacterTestState_obj::versionShit->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  76)		this->add(::miniGames::CharacterTestState_obj::versionShit);
HXLINE(  79)		this->super::create();
            	}


void CharacterTestState_obj::OnClickButton(){
            	HX_GC_STACKFRAME(&_hx_pos_726eca53aa8d4ca2_83_OnClickButton)
HXLINE(  84)		this->remove(::miniGames::CharacterTestState_obj::char1,null());
HXLINE(  85)		::miniGames::CharacterTestState_obj::char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(500) ),( (Float)(30) ),this->eventName->text,true);
HXLINE(  86)		 ::Character _hx_tmp = ::miniGames::CharacterTestState_obj::char1;
HXDLIN(  86)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((::miniGames::CharacterTestState_obj::char1->get_width() * ((Float)0.8))),null());
HXLINE(  87)		this->add(::miniGames::CharacterTestState_obj::char1);
HXLINE(  88)		::miniGames::CharacterTestState_obj::char1->dance(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterTestState_obj,OnClickButton,(void))

void CharacterTestState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_726eca53aa8d4ca2_92_update)
HXLINE(  95)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE(  97)			 ::flixel::FlxState nextState =  ::miniGames::MiniGamesState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  97)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  97)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 100)		if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 102)			::miniGames::CharacterTestState_obj::char1->dance(null(),null());
HXLINE( 103)			::miniGames::CharacterTestState_obj::char1->updateHitbox();
HXLINE( 104)			::miniGames::CharacterTestState_obj::char1->set_visible(true);
HXLINE( 105)			this->remove(this->notes,null());
HXLINE( 106)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 106)			this->notes = _hx_tmp->loadGraphic(::Paths_obj::loadImage(HX_("notes/notesidle",47,51,c3,51),null()),null(),null(),null(),null(),null());
HXLINE( 107)			this->notes->scale->set_x(::miniGames::CharacterTestState_obj::scale);
HXLINE( 108)			this->notes->scale->set_y(::miniGames::CharacterTestState_obj::scale);
HXLINE( 109)			{
HXLINE( 109)				 ::flixel::FlxSprite _this = this->notes;
HXDLIN( 109)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 109)				if (::hx::IsNull( axes )) {
HXLINE( 109)					axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            				}
HXDLIN( 109)				bool _hx_tmp1;
HXDLIN( 109)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE( 109)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE( 109)						_hx_tmp1 = false;
            					}
            				}
HXDLIN( 109)				if (_hx_tmp1) {
HXLINE( 109)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 109)					_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 109)				bool _hx_tmp2;
HXDLIN( 109)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE( 109)						_hx_tmp2 = true;
            					}
            					break;
            					default:{
HXLINE( 109)						_hx_tmp2 = false;
            					}
            				}
HXDLIN( 109)				if (_hx_tmp2) {
HXLINE( 109)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 109)					_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 110)			this->add(this->notes);
            		}
HXLINE( 114)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 114)		if (_this->keyManager->checkStatusUnsafe(40,_this->status)) {
HXLINE( 116)			::miniGames::CharacterTestState_obj::char1->playAnim(HX_("singDOWN",31,2a,ad,36),null(),null(),null());
HXLINE( 117)			::miniGames::CharacterTestState_obj::char1->updateHitbox();
HXLINE( 118)			::miniGames::CharacterTestState_obj::char1->set_visible(true);
HXLINE( 119)			this->remove(this->notes,null());
HXLINE( 120)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 120)			this->notes = _hx_tmp->loadGraphic(::Paths_obj::loadImage(HX_("notes/notesdown",95,a2,7d,4e),null()),null(),null(),null(),null(),null());
HXLINE( 121)			this->notes->scale->set_x(::miniGames::CharacterTestState_obj::scale);
HXLINE( 122)			this->notes->scale->set_y(::miniGames::CharacterTestState_obj::scale);
HXLINE( 123)			{
HXLINE( 123)				 ::flixel::FlxSprite _this = this->notes;
HXDLIN( 123)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 123)				if (::hx::IsNull( axes )) {
HXLINE( 123)					axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            				}
HXDLIN( 123)				bool _hx_tmp1;
HXDLIN( 123)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE( 123)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE( 123)						_hx_tmp1 = false;
            					}
            				}
HXDLIN( 123)				if (_hx_tmp1) {
HXLINE( 123)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 123)					_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 123)				bool _hx_tmp2;
HXDLIN( 123)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE( 123)						_hx_tmp2 = true;
            					}
            					break;
            					default:{
HXLINE( 123)						_hx_tmp2 = false;
            					}
            				}
HXDLIN( 123)				if (_hx_tmp2) {
HXLINE( 123)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 123)					_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 124)			this->add(this->notes);
            		}
HXLINE( 127)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 127)		if (_this1->keyManager->checkStatusUnsafe(37,_this1->status)) {
HXLINE( 129)			::miniGames::CharacterTestState_obj::char1->playAnim(HX_("singLEFT",d6,39,ef,3b),null(),null(),null());
HXLINE( 130)			::miniGames::CharacterTestState_obj::char1->updateHitbox();
HXLINE( 131)			::miniGames::CharacterTestState_obj::char1->set_visible(true);
HXLINE( 132)			this->remove(this->notes,null());
HXLINE( 133)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 133)			this->notes = _hx_tmp->loadGraphic(::Paths_obj::loadImage(HX_("notes/notesleft",3a,b2,bf,53),null()),null(),null(),null(),null(),null());
HXLINE( 134)			this->notes->scale->set_x(::miniGames::CharacterTestState_obj::scale);
HXLINE( 135)			this->notes->scale->set_y(::miniGames::CharacterTestState_obj::scale);
HXLINE( 136)			{
HXLINE( 136)				 ::flixel::FlxSprite _this = this->notes;
HXDLIN( 136)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 136)				if (::hx::IsNull( axes )) {
HXLINE( 136)					axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            				}
HXDLIN( 136)				bool _hx_tmp1;
HXDLIN( 136)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE( 136)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE( 136)						_hx_tmp1 = false;
            					}
            				}
HXDLIN( 136)				if (_hx_tmp1) {
HXLINE( 136)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 136)					_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 136)				bool _hx_tmp2;
HXDLIN( 136)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE( 136)						_hx_tmp2 = true;
            					}
            					break;
            					default:{
HXLINE( 136)						_hx_tmp2 = false;
            					}
            				}
HXDLIN( 136)				if (_hx_tmp2) {
HXLINE( 136)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 136)					_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 137)			this->add(this->notes);
            		}
HXLINE( 139)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 139)		if (_this2->keyManager->checkStatusUnsafe(39,_this2->status)) {
HXLINE( 141)			::miniGames::CharacterTestState_obj::char1->playAnim(HX_("singRIGHT",0d,6f,70,ac),null(),null(),null());
HXLINE( 142)			::miniGames::CharacterTestState_obj::char1->updateHitbox();
HXLINE( 143)			::miniGames::CharacterTestState_obj::char1->set_visible(true);
HXLINE( 144)			this->remove(this->notes,null());
HXLINE( 145)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 145)			this->notes = _hx_tmp->loadGraphic(::Paths_obj::loadImage(HX_("notes/notesright",49,4e,09,6b),null()),null(),null(),null(),null(),null());
HXLINE( 146)			this->notes->scale->set_x(::miniGames::CharacterTestState_obj::scale);
HXLINE( 147)			this->notes->scale->set_y(::miniGames::CharacterTestState_obj::scale);
HXLINE( 148)			{
HXLINE( 148)				 ::flixel::FlxSprite _this = this->notes;
HXDLIN( 148)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 148)				if (::hx::IsNull( axes )) {
HXLINE( 148)					axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            				}
HXDLIN( 148)				bool _hx_tmp1;
HXDLIN( 148)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE( 148)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE( 148)						_hx_tmp1 = false;
            					}
            				}
HXDLIN( 148)				if (_hx_tmp1) {
HXLINE( 148)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 148)					_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 148)				bool _hx_tmp2;
HXDLIN( 148)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE( 148)						_hx_tmp2 = true;
            					}
            					break;
            					default:{
HXLINE( 148)						_hx_tmp2 = false;
            					}
            				}
HXDLIN( 148)				if (_hx_tmp2) {
HXLINE( 148)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 148)					_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 149)			this->add(this->notes);
            		}
HXLINE( 151)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 151)		if (_this3->keyManager->checkStatusUnsafe(38,_this3->status)) {
HXLINE( 153)			::miniGames::CharacterTestState_obj::char1->playAnim(HX_("singUP",6a,52,21,b9),null(),null(),null());
HXLINE( 154)			::miniGames::CharacterTestState_obj::char1->updateHitbox();
HXLINE( 155)			::miniGames::CharacterTestState_obj::char1->set_visible(true);
HXLINE( 156)			this->remove(this->notes,null());
HXLINE( 157)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 157)			this->notes = _hx_tmp->loadGraphic(::Paths_obj::loadImage(HX_("notes/notesup",ce,0d,01,4d),null()),null(),null(),null(),null(),null());
HXLINE( 158)			this->notes->scale->set_x(::miniGames::CharacterTestState_obj::scale);
HXLINE( 159)			this->notes->scale->set_y(::miniGames::CharacterTestState_obj::scale);
HXLINE( 160)			{
HXLINE( 160)				 ::flixel::FlxSprite _this = this->notes;
HXDLIN( 160)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 160)				if (::hx::IsNull( axes )) {
HXLINE( 160)					axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            				}
HXDLIN( 160)				bool _hx_tmp1;
HXDLIN( 160)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE( 160)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE( 160)						_hx_tmp1 = false;
            					}
            				}
HXDLIN( 160)				if (_hx_tmp1) {
HXLINE( 160)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 160)					_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 160)				bool _hx_tmp2;
HXDLIN( 160)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE( 160)						_hx_tmp2 = true;
            					}
            					break;
            					default:{
HXLINE( 160)						_hx_tmp2 = false;
            					}
            				}
HXDLIN( 160)				if (_hx_tmp2) {
HXLINE( 160)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 160)					_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 161)			this->add(this->notes);
            		}
HXLINE( 163)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 163)		if (_this4->keyManager->checkStatusUnsafe(69,_this4->status)) {
HXLINE( 165)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 165)			_g->set_zoom((_g->zoom + (elapsed * ::flixel::FlxG_obj::camera->zoom)));
            		}
HXLINE( 167)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 167)		if (_this5->keyManager->checkStatusUnsafe(81,_this5->status)) {
HXLINE( 169)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 169)			_g->set_zoom((_g->zoom - (elapsed * ::flixel::FlxG_obj::camera->zoom)));
            		}
HXLINE( 172)		this->super::update(elapsed);
            	}


 ::Character CharacterTestState_obj::char1;

 ::flixel::addons::ui::FlxInputText CharacterTestState_obj::textboxhi;

 ::flixel::text::FlxText CharacterTestState_obj::versionShit;

Float CharacterTestState_obj::scale;


::hx::ObjectPtr< CharacterTestState_obj > CharacterTestState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< CharacterTestState_obj > __this = new CharacterTestState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< CharacterTestState_obj > CharacterTestState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	CharacterTestState_obj *__this = (CharacterTestState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharacterTestState_obj), true, "miniGames.CharacterTestState"));
	*(void **)__this = CharacterTestState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

CharacterTestState_obj::CharacterTestState_obj()
{
}

void CharacterTestState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CharacterTestState);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(charnamee,"charnamee");
	HX_MARK_MEMBER_NAME(eventName,"eventName");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(button,"button");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CharacterTestState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(charnamee,"charnamee");
	HX_VISIT_MEMBER_NAME(eventName,"eventName");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(button,"button");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CharacterTestState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"button") ) { return ::hx::Val( button ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"charnamee") ) { return ::hx::Val( charnamee ); }
		if (HX_FIELD_EQ(inName,"eventName") ) { return ::hx::Val( eventName ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"OnClickButton") ) { return ::hx::Val( OnClickButton_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CharacterTestState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { outValue = ( char1 ); return true; }
		if (HX_FIELD_EQ(inName,"scale") ) { outValue = ( scale ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textboxhi") ) { outValue = ( textboxhi ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"versionShit") ) { outValue = ( versionShit ); return true; }
	}
	return false;
}

::hx::Val CharacterTestState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"button") ) { button=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"charnamee") ) { charnamee=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName") ) { eventName=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CharacterTestState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { char1=ioValue.Cast<  ::Character >(); return true; }
		if (HX_FIELD_EQ(inName,"scale") ) { scale=ioValue.Cast< Float >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textboxhi") ) { textboxhi=ioValue.Cast<  ::flixel::addons::ui::FlxInputText >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"versionShit") ) { versionShit=ioValue.Cast<  ::flixel::text::FlxText >(); return true; }
	}
	return false;
}

void CharacterTestState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("charnamee",24,a9,af,bc));
	outFields->push(HX_("eventName",85,7b,0c,f8));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("button",f2,61,e0,d9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CharacterTestState_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(CharacterTestState_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsString,(int)offsetof(CharacterTestState_obj,charnamee),HX_("charnamee",24,a9,af,bc)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CharacterTestState_obj,eventName),HX_("eventName",85,7b,0c,f8)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CharacterTestState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CharacterTestState_obj,button),HX_("button",f2,61,e0,d9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CharacterTestState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Character */ ,(void *) &CharacterTestState_obj::char1,HX_("char1",9b,9c,b3,45)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxInputText */ ,(void *) &CharacterTestState_obj::textboxhi,HX_("textboxhi",ff,11,bf,bc)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(void *) &CharacterTestState_obj::versionShit,HX_("versionShit",f8,4e,3b,e2)},
	{::hx::fsFloat,(void *) &CharacterTestState_obj::scale,HX_("scale",8a,ce,ce,78)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CharacterTestState_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("charnamee",24,a9,af,bc),
	HX_("eventName",85,7b,0c,f8),
	HX_("notes",41,dc,ca,9f),
	HX_("button",f2,61,e0,d9),
	HX_("create",fc,66,0f,7c),
	HX_("OnClickButton",5b,25,bc,b3),
	HX_("update",09,86,05,87),
	::String(null()) };

static void CharacterTestState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CharacterTestState_obj::char1,"char1");
	HX_MARK_MEMBER_NAME(CharacterTestState_obj::textboxhi,"textboxhi");
	HX_MARK_MEMBER_NAME(CharacterTestState_obj::versionShit,"versionShit");
	HX_MARK_MEMBER_NAME(CharacterTestState_obj::scale,"scale");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CharacterTestState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CharacterTestState_obj::char1,"char1");
	HX_VISIT_MEMBER_NAME(CharacterTestState_obj::textboxhi,"textboxhi");
	HX_VISIT_MEMBER_NAME(CharacterTestState_obj::versionShit,"versionShit");
	HX_VISIT_MEMBER_NAME(CharacterTestState_obj::scale,"scale");
};

#endif

::hx::Class CharacterTestState_obj::__mClass;

static ::String CharacterTestState_obj_sStaticFields[] = {
	HX_("char1",9b,9c,b3,45),
	HX_("textboxhi",ff,11,bf,bc),
	HX_("versionShit",f8,4e,3b,e2),
	HX_("scale",8a,ce,ce,78),
	::String(null())
};

void CharacterTestState_obj::__register()
{
	CharacterTestState_obj _hx_dummy;
	CharacterTestState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("miniGames.CharacterTestState",5a,a7,65,b5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CharacterTestState_obj::__GetStatic;
	__mClass->mSetStaticField = &CharacterTestState_obj::__SetStatic;
	__mClass->mMarkFunc = CharacterTestState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CharacterTestState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CharacterTestState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CharacterTestState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CharacterTestState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharacterTestState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharacterTestState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CharacterTestState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_726eca53aa8d4ca2_28_boot)
HXDLIN(  28)		char1 = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_726eca53aa8d4ca2_31_boot)
HXDLIN(  31)		scale = ((Float)1);
            	}
}

} // end namespace miniGames
