// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Ana
#include <Ana.h>
#endif
#ifndef INCLUDED_Analysis
#include <Analysis.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_CustomState
#include <CustomState.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Debug
#include <Debug.h>
#endif
#ifndef INCLUDED_DialogueBox
#include <DialogueBox.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_EtternaFunctions
#include <EtternaFunctions.h>
#endif
#ifndef INCLUDED_Event
#include <Event.h>
#endif
#ifndef INCLUDED_FlxTransWindow
#include <FlxTransWindow.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_GameOverSubstate
#include <GameOverSubstate.h>
#endif
#ifndef INCLUDED_GameplayCustomizeState
#include <GameplayCustomizeState.h>
#endif
#ifndef INCLUDED_GitarooPause
#include <GitarooPause.h>
#endif
#ifndef INCLUDED_GlobalVideo
#include <GlobalVideo.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_HelperFunctions
#include <HelperFunctions.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_KeyBinds
#include <KeyBinds.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_LuaCamera
#include <LuaCamera.h>
#endif
#ifndef INCLUDED_LuaCharacter
#include <LuaCharacter.h>
#endif
#ifndef INCLUDED_LuaClass
#include <LuaClass.h>
#endif
#ifndef INCLUDED_LuaNote
#include <LuaNote.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_ModchartState
#include <ModchartState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_NoteskinHelpers
#include <NoteskinHelpers.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayStateChangeables
#include <PlayStateChangeables.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Ratings
#include <Ratings.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Replay
#include <Replay.h>
#endif
#ifndef INCLUDED_ResultsScreen
#include <ResultsScreen.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Stage
#include <Stage.h>
#endif
#ifndef INCLUDED_StageBackgroundSprite
#include <StageBackgroundSprite.h>
#endif
#ifndef INCLUDED_StageDebugState
#include <StageDebugState.h>
#endif
#ifndef INCLUDED_StaticArrow
#include <StaticArrow.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_TimingStruct
#include <TimingStruct.h>
#endif
#ifndef INCLUDED_WaveformTestState
#include <WaveformTestState.h>
#endif
#ifndef INCLUDED_WebmHandler
#include <WebmHandler.h>
#endif
#ifndef INCLUDED_WiggleEffect
#include <WiggleEffect.h>
#endif
#ifndef INCLUDED_WiggleEffectType
#include <WiggleEffectType.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrail
#include <flixel/addons/effects/FlxTrail.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrailArea
#include <flixel/addons/effects/FlxTrailArea.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxEffectSprite
#include <flixel/addons/effects/chainable/FlxEffectSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveEffect
#include <flixel/addons/effects/chainable/FlxWaveEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_IFlxEffect
#include <flixel/addons/effects/chainable/IFlxEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_atlas_FlxAtlas
#include <flixel/graphics/atlas/FlxAtlas.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxCollision
#include <flixel/util/FlxCollision.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Json
#include <haxe/Json.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_http_HttpBase
#include <haxe/http/HttpBase.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_iterators_MapKeyValueIterator
#include <haxe/iterators/MapKeyValueIterator.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_Interp
#include <hscript/Interp.h>
#endif
#ifndef INCLUDED_hscript_Parser
#include <hscript/Parser.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeAudioSource
#include <lime/_internal/backend/native/NativeAudioSource.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_media_openal_AL
#include <lime/media/openal/AL.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ShaderFilter
#include <openfl/filters/ShaderFilter.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_smTools_SMFile
#include <smTools/SMFile.h>
#endif
#ifndef INCLUDED_smTools_SMHeader
#include <smTools/SMHeader.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_Http
#include <sys/Http.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_webm_WebmPlayer
#include <webm/WebmPlayer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_94_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",94,0xb30d7781)
static const bool _hx_array_data_46c2835d_1[] = {
	0,0,0,0,
};
static const ::String _hx_array_data_46c2835d_2[] = {
	HX_("purple",3c,f6,89,71),HX_("blue",9a,42,19,41),HX_("green",c3,0e,ed,99),HX_("red",51,d9,56,00),
};
static const ::String _hx_array_data_46c2835d_3[] = {
	HX_("LEFT",07,d0,70,32),HX_("DOWN",62,c0,2e,2d),HX_("UP",5b,4a,00,00),HX_("RIGHT",bc,43,52,67),
};
static const ::String _hx_array_data_46c2835d_4[] = {
	HX_("dad:blah blah blah",24,b6,5d,84),HX_("bf:coolswag",c9,19,15,c1),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_318_addObject,"PlayState","addObject",0x09b6776f,"PlayState.addObject","PlayState.hx",318,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_323_removeObject,"PlayState","removeObject",0x9fa28dd4,"PlayState.removeObject","PlayState.hx",323,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1358_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1358,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_327_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",327,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1154_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1154,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1183_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1183,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1270_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1270,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1275_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1275,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1284_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1284,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1296_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1296,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1300_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1300,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1303_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1303,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1312_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1312,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1315_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1315,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1323_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1323,0xb30d7781)
static const int _hx_array_data_46c2835d_34[] = {
	(int)23,(int)24,(int)25,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1093_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1093,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1123_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1123,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1064_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1064,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1057_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1057,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1048_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1048,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1334_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1334,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1342_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1342,0xb30d7781)
static const ::String _hx_array_data_46c2835d_42[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1445_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1445,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1463_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1463,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1478_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1478,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1473_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1473,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1483_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1483,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1418_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1418,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1530_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1530,0xb30d7781)
static const ::String _hx_array_data_46c2835d_50[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
static const ::String _hx_array_data_46c2835d_51[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1577_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1577,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1594_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1594,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1613_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1613,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1510_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1510,0xb30d7781)
static const int _hx_array_data_46c2835d_56[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1628_getKey,"PlayState","getKey",0xa9336b9a,"PlayState.getKey","PlayState.hx",1628,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1640_releaseInput,"PlayState","releaseInput",0xa075d074,"PlayState.releaseInput","PlayState.hx",1640,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1737_handleInput,"PlayState","handleInput",0x79b5bcb1,"PlayState.handleInput","PlayState.hx",1737,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1741_handleInput,"PlayState","handleInput",0x79b5bcb1,"PlayState.handleInput","PlayState.hx",1741,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1680_handleInput,"PlayState","handleInput",0x79b5bcb1,"PlayState.handleInput","PlayState.hx",1680,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1818_leCoolSongName,"PlayState","leCoolSongName",0x948536b3,"PlayState.leCoolSongName","PlayState.hx",1818,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1828_leCoolSongName,"PlayState","leCoolSongName",0x948536b3,"PlayState.leCoolSongName","PlayState.hx",1828,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1823_leCoolSongName,"PlayState","leCoolSongName",0x948536b3,"PlayState.leCoolSongName","PlayState.hx",1823,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1807_leCoolSongName,"PlayState","leCoolSongName",0x948536b3,"PlayState.leCoolSongName","PlayState.hx",1807,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1836_startSong,"PlayState","startSong",0x419e6106,"PlayState.startSong","PlayState.hx",1836,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1948_generateSong,"PlayState","generateSong",0x3a61615b,"PlayState.generateSong","PlayState.hx",1948,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2146_sortByShit,"PlayState","sortByShit",0xfa9f74a6,"PlayState.sortByShit","PlayState.hx",2146,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2151_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",2151,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2251_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",2251,0xb30d7781)
static const int _hx_array_data_46c2835d_87[] = {
	(int)6,
};
static const int _hx_array_data_46c2835d_88[] = {
	(int)7,
};
static const int _hx_array_data_46c2835d_89[] = {
	(int)5,
};
static const int _hx_array_data_46c2835d_90[] = {
	(int)4,
};
static const int _hx_array_data_46c2835d_91[] = {
	(int)12,(int)16,
};
static const int _hx_array_data_46c2835d_92[] = {
	(int)13,(int)17,
};
static const int _hx_array_data_46c2835d_93[] = {
	(int)14,(int)18,
};
static const int _hx_array_data_46c2835d_94[] = {
	(int)15,(int)19,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2262_appearStaticArrows,"PlayState","appearStaticArrows",0x766c1a7e,"PlayState.appearStaticArrows","PlayState.hx",2262,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2259_appearStaticArrows,"PlayState","appearStaticArrows",0x766c1a7e,"PlayState.appearStaticArrows","PlayState.hx",2259,0xb30d7781)
static const int _hx_array_data_46c2835d_97[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2273_tweenCamIn,"PlayState","tweenCamIn",0x8478acda,"PlayState.tweenCamIn","PlayState.hx",2273,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2277_openSubState,"PlayState","openSubState",0x527dda0c,"PlayState.openSubState","PlayState.hx",2277,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2310_closeSubState,"PlayState","closeSubState",0xb7c1df78,"PlayState.closeSubState","PlayState.hx",2310,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2365_resyncVocals,"PlayState","resyncVocals",0x86228a3d,"PlayState.resyncVocals","PlayState.hx",2365,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2420_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2420,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2500_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2500,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2922_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2922,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3313_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3313,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3422_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3422,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3456_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3456,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3679_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3679,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3701_getSectionByTime,"PlayState","getSectionByTime",0x77354304,"PlayState.getSectionByTime","PlayState.hx",3701,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3720_recalculateAllSectionTimes,"PlayState","recalculateAllSectionTimes",0x34e3dfc0,"PlayState.recalculateAllSectionTimes","PlayState.hx",3720,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3742_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3742,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3801_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3801,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3850_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3850,0xb30d7781)
static const ::String _hx_array_data_46c2835d_131[] = {
	HX_("-easy",af,a6,14,2c),HX_("",00,00,00,00),HX_("-hard",98,49,10,2e),HX_("-insane",97,16,20,ed),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3923_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3923,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3942_getRatesScore,"PlayState","getRatesScore",0xf8894024,"PlayState.getRatesScore","PlayState.hx",3942,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3966_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",3966,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4045_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",4045,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4270_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",4270,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4279_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",4279,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4234_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",4234,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4240_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",4240,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4298_NearlyEquals,"PlayState","NearlyEquals",0x84760165,"PlayState.NearlyEquals","PlayState.hx",4298,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4500_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4500,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4309_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4309,0xb30d7781)
static const ::String _hx_array_data_46c2835d_159[] = {
	HX_("left",07,08,b0,47),HX_("down",62,f8,6d,42),HX_("up",5b,66,00,00),HX_("right",dc,0b,64,e9),
};
static const bool _hx_array_data_46c2835d_160[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_161[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_162[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4355_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4355,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4376_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4376,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4414_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4414,0xb30d7781)
static const bool _hx_array_data_46c2835d_166[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_167[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4468_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4468,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4519_findByTime,"PlayState","findByTime",0xc7b7b00e,"PlayState.findByTime","PlayState.hx",4519,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4530_findByTimeIndex,"PlayState","findByTimeIndex",0x9aab6824,"PlayState.findByTimeIndex","PlayState.hx",4530,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4550_backgroundVideo,"PlayState","backgroundVideo",0x865a229c,"PlayState.backgroundVideo","PlayState.hx",4550,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4606_noteMiss,"PlayState","noteMiss",0x0652ff3f,"PlayState.noteMiss","PlayState.hx",4606,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4701_updateAccuracy,"PlayState","updateAccuracy",0x9f2d7b53,"PlayState.updateAccuracy","PlayState.hx",4701,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4728_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",4728,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4731_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",4731,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4723_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",4723,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4745_noteCheck,"PlayState","noteCheck",0xbf96a725,"PlayState.noteCheck","PlayState.hx",4745,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4791_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",4791,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4854_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",4854,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4875_pressArrow,"PlayState","pressArrow",0x8f0070b7,"PlayState.pressArrow","PlayState.hx",4875,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4892_stepHit,"PlayState","stepHit",0xcb82d856,"PlayState.stepHit","PlayState.hx",4892,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4911_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",4911,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4924_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",4924,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5016_changeCharacter,"PlayState","changeCharacter",0x88dfad08,"PlayState.changeCharacter","PlayState.hx",5016,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5031_completeQuest,"PlayState","completeQuest",0xe7e58398,"PlayState.completeQuest","PlayState.hx",5031,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5043_setTransparent,"PlayState","setTransparent",0x34b6e8c1,"PlayState.setTransparent","PlayState.hx",5043,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5056_fnfEventFunc,"PlayState","fnfEventFunc",0xdf5dce31,"PlayState.fnfEventFunc","PlayState.hx",5056,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5127_newHSSprite,"PlayState","newHSSprite",0xde49673f,"PlayState.newHSSprite","PlayState.hx",5127,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5148_newHSText,"PlayState","newHSText",0x91363567,"PlayState.newHSText","PlayState.hx",5148,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5244_endHscript,"PlayState","endHscript",0x5e532749,"PlayState.endHscript","PlayState.hx",5244,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5247_endHscript,"PlayState","endHscript",0x5e532749,"PlayState.endHscript","PlayState.hx",5247,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5250_endHscript,"PlayState","endHscript",0x5e532749,"PlayState.endHscript","PlayState.hx",5250,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5253_endHscript,"PlayState","endHscript",0x5e532749,"PlayState.endHscript","PlayState.hx",5253,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5164_endHscript,"PlayState","endHscript",0x5e532749,"PlayState.endHscript","PlayState.hx",5164,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5336_endHscript2,"PlayState","endHscript2",0x2a6f38c9,"PlayState.endHscript2","PlayState.hx",5336,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5339_endHscript2,"PlayState","endHscript2",0x2a6f38c9,"PlayState.endHscript2","PlayState.hx",5339,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5342_endHscript2,"PlayState","endHscript2",0x2a6f38c9,"PlayState.endHscript2","PlayState.hx",5342,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5345_endHscript2,"PlayState","endHscript2",0x2a6f38c9,"PlayState.endHscript2","PlayState.hx",5345,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5348_endHscript2,"PlayState","endHscript2",0x2a6f38c9,"PlayState.endHscript2","PlayState.hx",5348,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5258_endHscript2,"PlayState","endHscript2",0x2a6f38c9,"PlayState.endHscript2","PlayState.hx",5258,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5353_hscriptApply,"PlayState","hscriptApply",0xc114dbac,"PlayState.hscriptApply","PlayState.hx",5353,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5378_hscriptApply2,"PlayState","hscriptApply2",0x312b5b06,"PlayState.hscriptApply2","PlayState.hx",5378,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5403_poggers,"PlayState","poggers",0x6fe9ecd6,"PlayState.poggers","PlayState.hx",5403,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_96_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",96,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_99_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",99,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_100_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",100,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_101_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",101,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_102_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",102,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_103_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",103,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_104_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",104,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_105_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",105,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_106_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",106,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_107_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",107,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_108_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",108,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_110_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",110,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_111_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",111,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_128_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",128,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_129_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",129,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_131_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",131,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_133_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",133,0xb30d7781)
static const bool _hx_array_data_46c2835d_235[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_148_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",148,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_158_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",158,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_174_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",174,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_180_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",180,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_181_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",181,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_182_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",182,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_193_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",193,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_194_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",194,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_195_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",195,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_196_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",196,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_197_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",197,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_198_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",198,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_225_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",225,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_251_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",251,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_265_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",265,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_267_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",267,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_273_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",273,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_281_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",281,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_282_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",282,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_284_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",284,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_285_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",285,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_294_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",294,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_304_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",304,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_312_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",312,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1506_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",1506,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1801_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",1801,0xb30d7781)

void PlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_94_new)
HXLINE(4889)		this->danced = false;
HXLINE(4742)		this->etternaModeScore = 0;
HXLINE(4740)		this->mashViolations = 0;
HXLINE(4739)		this->mashing = 0;
HXLINE(4678)		this->tankAngle = ( (Float)(::flixel::FlxG_obj::random->_hx_int(-90,45,null())) );
HXLINE(4677)		this->tankSpeed = ::flixel::FlxG_obj::random->_hx_float(5,7,null());
HXLINE(4676)		this->tankX = ((Float)400);
HXLINE(4545)		this->playingDathing = false;
HXLINE(4541)		this->useVideo = false;
HXLINE(4540)		this->fuckingVolume = ((Float)1);
HXLINE(4304)		this->leftHold = false;
HXLINE(4303)		this->rightHold = false;
HXLINE(4302)		this->downHold = false;
HXLINE(4301)		this->upHold = false;
HXLINE(3963)		this->currentTimingShown = null();
HXLINE(3962)		this->timeShown = 0;
HXLINE(3939)		this->offsetTest = ((Float)0);
HXLINE(3938)		this->hits = ::Array_obj< Float >::__new(0);
HXLINE(3936)		this->endingSong = false;
HXLINE(2417)		this->currentLuaIndex = 0;
HXLINE(2415)		this->pastScrollChanges = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2413)		this->updateFrame = 0;
HXLINE(2411)		this->currentBPM = 0;
HXLINE(2409)		this->removedVideo = false;
HXLINE(2408)		this->stopUpdate = false;
HXLINE(2406)		this->maxNPS = 0;
HXLINE(2405)		this->nps = 0;
HXLINE(2404)		this->canPause = true;
HXLINE(2403)		this->startedCountdown = false;
HXLINE(2401)		this->paused = false;
HXLINE(1945)		this->debugNum = 0;
HXLINE(1805)		this->previousRate = ::PlayState_obj::songMultiplier;
HXLINE(1799)		this->doAnything = false;
HXLINE(1797)		this->songStarted = false;
HXLINE(1677)		this->closestNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1637)		this->keys = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_1,4);
HXLINE(1625)		this->songTime = ((Float)0);
HXLINE(1624)		this->lastReportedPlayheadPosition = 0;
HXLINE(1623)		this->previousFrameTime = 0;
HXLINE(1503)		this->luaWiggles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1502)		this->perfectMode = false;
HXLINE( 310)		this->dataColor = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_2,4);
HXLINE( 309)		this->dataSuffix = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_3,4);
HXLINE( 306)		this->executeModchart = false;
HXLINE( 302)		this->replayAna =  ::Analysis_obj::__alloc( HX_CTX );
HXLINE( 301)		this->saveJudge = ::Array_obj< ::String >::__new(0);
HXLINE( 300)		this->saveNotes = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 291)		this->triggeredAlready = false;
HXLINE( 288)		this->interp2 =  ::hscript::Interp_obj::__alloc( HX_CTX );
HXLINE( 287)		this->interp =  ::hscript::Interp_obj::__alloc( HX_CTX );
HXLINE( 277)		this->randomVar = false;
HXLINE( 271)		this->usedTimeTravel = false;
HXLINE( 270)		this->inCutscene = false;
HXLINE( 261)		this->skipActive = false;
HXLINE( 260)		this->needSkip = false;
HXLINE( 255)		this->songScoreDef = 0;
HXLINE( 253)		this->songScore = 0;
HXLINE( 249)		this->talking = true;
HXLINE( 247)		this->wiggleShit =  ::WiggleEffect_obj::__alloc( HX_CTX );
HXLINE( 245)		this->fc = true;
HXLINE( 241)		this->altSuffix = HX_("",00,00,00,00);
HXLINE( 237)		this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_4,2);
HXLINE( 235)		this->allowedToCheer = false;
HXLINE( 234)		this->allowedToHeadbang = true;
HXLINE( 233)		this->forcedToIdle = false;
HXLINE( 232)		this->idleBeat = 2;
HXLINE( 231)		this->idleToBeat = true;
HXLINE( 230)		this->currentFrames = 0;
HXLINE( 229)		this->notesHitArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 227)		this->isSMFile = false;
HXLINE( 223)		this->cannotDie = false;
HXLINE( 213)		this->startingSong = false;
HXLINE( 212)		this->generatedMusic = false;
HXLINE( 210)		this->songPositionBar = ((Float)0);
HXLINE( 206)		this->ss = false;
HXLINE( 205)		this->totalPlayed = 0;
HXLINE( 204)		this->totalNotesHitDefault = ((Float)0);
HXLINE( 203)		this->totalNotesHit = ((Float)0);
HXLINE( 202)		this->accuracyDefault = ((Float)0.00);
HXLINE( 200)		this->accuracy = ((Float)0.00);
HXLINE( 191)		this->combo = 0;
HXLINE( 189)		this->health = ((Float)1);
HXLINE( 187)		this->gfSpeed = 1;
HXLINE( 185)		this->curSong = HX_("",00,00,00,00);
HXLINE( 184)		this->camZooming = false;
HXLINE( 167)		this->curSection = 0;
HXLINE( 163)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 143)		this->detailsPausedText = HX_("",00,00,00,00);
HXLINE( 142)		this->detailsText = HX_("",00,00,00,00);
HXLINE( 141)		this->iconRPC = HX_("",00,00,00,00);
HXLINE( 140)		this->storyDifficultyText = HX_("",00,00,00,00);
HXLINE( 135)		this->songLength = ((Float)0);
HXLINE( 119)		this->visibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 117)		this->addedBotplay = false;
HXLINE( 115)		this->visibleCombos = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  94)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0a05f89d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PlayState_obj::addObject( ::flixel::FlxBasic object){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_318_addObject)
HXDLIN( 318)		this->add(object);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addObject,(void))

void PlayState_obj::removeObject( ::flixel::FlxBasic object){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_323_removeObject)
HXDLIN( 323)		this->remove(object,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,removeObject,(void))

void PlayState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_18,::Array< ::String >,exprss) HXARGC(1)
            		void _hx_run(::String data){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1358_create)
HXLINE(1359)			exprss[0] = data;
HXLINE(1360)			::sys::io::File_obj::saveContent(HX_("assets/data/testlogs.txt",bc,4e,08,28),data);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_327_create)
HXLINE( 326)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 329)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 330)		::PlayState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 333)		::GameplayCustomizeState_obj::freeplayBf = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) );
HXLINE( 334)		::GameplayCustomizeState_obj::freeplayDad = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
HXLINE( 335)		::GameplayCustomizeState_obj::freeplayGf = ( (::String)(::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) );
HXLINE( 336)		::GameplayCustomizeState_obj::freeplayNoteStyle = ( (::String)(::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic)) );
HXLINE( 337)		::GameplayCustomizeState_obj::freeplayStage = ( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
HXLINE( 338)		::GameplayCustomizeState_obj::freeplaySong = ( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) );
HXLINE( 339)		::GameplayCustomizeState_obj::freeplayWeek = ::PlayState_obj::storyWeek;
HXLINE( 341)		this->previousRate = (::PlayState_obj::songMultiplier - ((Float)0.05));
HXLINE( 343)		if ((this->previousRate < ((Float)1.00))) {
HXLINE( 344)			this->previousRate = ( (Float)(1) );
            		}
HXLINE( 346)		if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic),290 )) {
HXLINE( 347)			::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->setFPSCap(( (Float)(800) ));
            		}
HXLINE( 349)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 350)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 350)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 352)		::PlayState_obj::inDaPlay = true;
HXLINE( 354)		if (::hx::IsNotEq( ::PlayState_obj::currentSong,::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic) )) {
HXLINE( 356)			::PlayState_obj::currentSong = ( (::String)(::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic)) );
HXLINE( 357)			::Main_obj::dumpCache();
            		}
HXLINE( 360)		::PlayState_obj::bads = 0;
HXLINE( 361)		::PlayState_obj::shits = 0;
HXLINE( 362)		::PlayState_obj::goods = 0;
HXLINE( 364)		::PlayState_obj::misses = 0;
HXLINE( 366)		::PlayState_obj::highestCombo = 0;
HXLINE( 367)		::PlayState_obj::repPresses = 0;
HXLINE( 368)		::PlayState_obj::repReleases = 0;
HXLINE( 369)		::PlayState_obj::inResults = false;
HXLINE( 371)		::PlayStateChangeables_obj::useDownscroll = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) );
HXLINE( 372)		::PlayStateChangeables_obj::safeFrames = ( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)) );
HXLINE( 373)		::PlayStateChangeables_obj::scrollSpeed = (( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic)) ) * ::PlayState_obj::songMultiplier);
HXLINE( 374)		::PlayStateChangeables_obj::botPlay = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) );
HXLINE( 375)		::PlayStateChangeables_obj::Optimize = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("optimize",dd,8c,18,1d),::hx::paccDynamic)) );
HXLINE( 376)		::PlayStateChangeables_obj::zoom = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic)) );
HXLINE( 378)		this->removedVideo = false;
HXLINE( 382)		::String library = null();
HXDLIN( 382)		this->executeModchart = ::sys::FileSystem_obj::exists(::Paths_obj::getPath(( (::String)(((HX_("data/",c5,0e,88,d4) + ((HX_("songs/",71,e7,88,2d) + ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) + HX_("/modchart",0b,0e,ff,5d))) + HX_(".lua",4a,2a,ba,1e))) ),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 383)		if (::PlayState_obj::isSM) {
HXLINE( 384)			this->executeModchart = ::sys::FileSystem_obj::exists((::PlayState_obj::pathToSm + HX_("/modchart.lua",d5,99,c0,d9)));
            		}
HXLINE( 385)		if (this->executeModchart) {
HXLINE( 386)			::PlayStateChangeables_obj::Optimize = false;
            		}
HXLINE( 394)		{
HXLINE( 394)			::String input = ((HX_("Searching for mod chart? (",04,61,ee,a6) + ::Std_obj::string(this->executeModchart)) + HX_(") at ",56,9c,de,b0));
HXDLIN( 394)			::String library1 = null();
HXDLIN( 394)			 ::Dynamic input1 = (input + ::Paths_obj::getPath(( (::String)(((HX_("data/",c5,0e,88,d4) + ((HX_("songs/",71,e7,88,2d) + ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) + HX_("/modchart",0b,0e,ff,5d))) + HX_(".lua",4a,2a,ba,1e))) ),HX_("TEXT",ad,94,ba,37),library1));
HXDLIN( 394)			if (::hx::IsNotNull( input1 )) {
HXLINE( 394)				::cpp::VirtualArray output = ::Debug_obj::formatOutput(input1,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),394,HX_("PlayState",5d,83,c2,46),HX_("create",fc,66,0f,7c)));
HXDLIN( 394)				::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_INFO);
HXDLIN( 394)				::Debug_obj::writeToLogFile(output,HX_("INFO",6e,00,7c,30));
            			}
            		}
HXLINE( 396)		if (this->executeModchart) {
HXLINE( 397)			::PlayState_obj::songMultiplier = ( (Float)(1) );
            		}
HXLINE( 401)		this->storyDifficultyText = ::CoolUtil_obj::difficultyFromInt(::PlayState_obj::storyDifficulty);
HXLINE( 403)		this->iconRPC = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
HXLINE( 406)		::String _hx_switch_0 = this->iconRPC;
            		if (  (_hx_switch_0==HX_("mom-car",52,e6,f7,f6)) ){
HXLINE( 413)			this->iconRPC = HX_("mom",cb,16,53,00);
HXDLIN( 413)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("monster-christmas",4f,88,85,27)) ){
HXLINE( 411)			this->iconRPC = HX_("monster",1a,54,b0,b8);
HXDLIN( 411)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 409)			this->iconRPC = HX_("senpai",3c,df,8d,6b);
HXDLIN( 409)			goto _hx_goto_7;
            		}
            		_hx_goto_7:;
HXLINE( 417)		if (::PlayState_obj::isStoryMode) {
HXLINE( 419)			this->detailsText = (HX_("story_mode: Week ",99,85,0e,86) + ::PlayState_obj::storyWeek);
            		}
            		else {
HXLINE( 423)			this->detailsText = HX_("Freeplay",c0,4c,38,fc);
            		}
HXLINE( 427)		this->detailsPausedText = (HX_("Paused - ",65,2f,92,fd) + this->detailsText);
HXLINE( 430)		::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN( 430)		::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE( 437)		::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE( 430)		::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
HXLINE( 446)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 447)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 448)		{
HXLINE( 448)			 ::flixel::FlxCamera _hx_tmp3 = this->camHUD;
HXDLIN( 448)			_hx_tmp3->bgColor = (_hx_tmp3->bgColor & 16777215);
HXDLIN( 448)			 ::flixel::FlxCamera _hx_tmp4 = this->camHUD;
HXDLIN( 448)			_hx_tmp4->bgColor = (_hx_tmp4->bgColor | 0);
            		}
HXLINE( 449)		this->camSustains =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 450)		{
HXLINE( 450)			 ::flixel::FlxCamera _hx_tmp5 = this->camSustains;
HXDLIN( 450)			_hx_tmp5->bgColor = (_hx_tmp5->bgColor & 16777215);
HXDLIN( 450)			 ::flixel::FlxCamera _hx_tmp6 = this->camSustains;
HXDLIN( 450)			_hx_tmp6->bgColor = (_hx_tmp6->bgColor | 0);
            		}
HXLINE( 451)		this->camNotes =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 452)		{
HXLINE( 452)			 ::flixel::FlxCamera _hx_tmp7 = this->camNotes;
HXDLIN( 452)			_hx_tmp7->bgColor = (_hx_tmp7->bgColor & 16777215);
HXDLIN( 452)			 ::flixel::FlxCamera _hx_tmp8 = this->camNotes;
HXDLIN( 452)			_hx_tmp8->bgColor = (_hx_tmp8->bgColor | 0);
            		}
HXLINE( 454)		::flixel::FlxG_obj::cameras->reset(this->camGame);
HXLINE( 455)		::flixel::FlxG_obj::cameras->add(this->camHUD,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 456)		::flixel::FlxG_obj::cameras->add(this->camSustains,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 457)		::flixel::FlxG_obj::cameras->add(this->camNotes,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 459)		this->camHUD->set_zoom(::PlayStateChangeables_obj::zoom);
HXLINE( 461)		::flixel::FlxCamera_obj::_defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame);
HXLINE( 463)		this->persistentUpdate = true;
HXLINE( 464)		this->persistentDraw = true;
HXLINE( 466)		if (::hx::IsNull( ::PlayState_obj::SONG )) {
HXLINE( 467)			::PlayState_obj::SONG = ::Song_obj::loadFromJson(HX_("tutorial",9e,8f,b5,82),HX_("",00,00,00,00));
            		}
HXLINE( 469)		::Conductor_obj::mapBPMChanges(::PlayState_obj::SONG);
HXLINE( 470)		::Conductor_obj::changeBPM(( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE( 472)		::Conductor_obj::bpm = ( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 474)		if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 476)			::PlayState_obj::SONG->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 479)		::TimingStruct_obj::clearTimings();
HXLINE( 481)		int currentIndex = 0;
HXLINE( 482)		{
HXLINE( 482)			int _g = 0;
HXDLIN( 482)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 482)			while((_g < _g1->length)){
HXLINE( 482)				 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 482)				_g = (_g + 1);
HXLINE( 484)				if ((i->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 486)					Float beat = i->position;
HXLINE( 488)					Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 490)					Float bpm = (i->value * ::PlayState_obj::songMultiplier);
HXLINE( 492)					::TimingStruct_obj::addTiming(beat,bpm,endBeat,( (Float)(0) ));
HXLINE( 494)					if ((currentIndex != 0)) {
HXLINE( 496)						 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 497)						data->endBeat = beat;
HXLINE( 498)						data->length = (((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) ))) / ::PlayState_obj::songMultiplier);
HXLINE( 499)						Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 500)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor(((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step) / ::PlayState_obj::songMultiplier));
HXLINE( 501)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + (data->length / ::PlayState_obj::songMultiplier));
            					}
HXLINE( 504)					currentIndex = (currentIndex + 1);
            				}
            			}
            		}
HXLINE( 508)		this->recalculateAllSectionTimes();
HXLINE( 513)		::String library2 = null();
HXDLIN( 513)		if (::openfl::utils::Assets_obj::exists(::Paths_obj::getPath(( (::String)(((HX_("",00,00,00,00) + ((HX_("data/songs/",f6,d7,93,44) + ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) + HX_("/dialogue",47,74,e6,61))) + HX_(".txt",02,3f,c0,1e))) ),HX_("TEXT",ad,94,ba,37),library2),HX_("TEXT",ad,94,ba,37))) {
HXLINE( 515)			::String library = null();
HXDLIN( 515)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(( (::String)(((HX_("",00,00,00,00) + ((HX_("data/songs/",f6,d7,93,44) + ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) + HX_("/dialogue",47,74,e6,61))) + HX_(".txt",02,3f,c0,1e))) ),HX_("TEXT",ad,94,ba,37),library));
            		}
HXLINE( 519)		::String stageCheck = HX_("stage",be,6a,0b,84);
HXLINE( 522)		if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic) )) {
HXLINE( 524)			switch((int)(::PlayState_obj::storyWeek)){
            				case (int)2: {
HXLINE( 527)					stageCheck = HX_("halloween",8d,bb,38,50);
            				}
            				break;
            				case (int)3: {
HXLINE( 529)					stageCheck = HX_("philly",28,77,5e,ef);
            				}
            				break;
            				case (int)4: {
HXLINE( 531)					stageCheck = HX_("limo",1f,17,b3,47);
            				}
            				break;
            				case (int)5: {
HXLINE( 533)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("winter-horrorland",9d,39,f4,1e) )) {
HXLINE( 535)						stageCheck = HX_("mallEvil",88,d3,e3,a7);
            					}
            					else {
HXLINE( 539)						stageCheck = HX_("mall",d4,3a,56,48);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 542)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("thorns",9c,bf,c7,8c) )) {
HXLINE( 544)						stageCheck = HX_("schoolEvil",28,a1,f5,f7);
            					}
            					else {
HXLINE( 548)						stageCheck = HX_("school",74,b8,c8,40);
            					}
            				}
            				break;
            			}
            		}
            		else {
HXLINE( 555)			stageCheck = ( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
            		}
HXLINE( 558)		if (::PlayState_obj::isStoryMode) {
HXLINE( 559)			::PlayState_obj::songMultiplier = ( (Float)(1) );
            		}
HXLINE( 562)		::String gfCheck = HX_("gf",1f,5a,00,00);
HXLINE( 564)		if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic) )) {
HXLINE( 566)			switch((int)(::PlayState_obj::storyWeek)){
            				case (int)4: {
HXLINE( 569)					gfCheck = HX_("gf-car",a6,63,ab,07);
            				}
            				break;
            				case (int)5: {
HXLINE( 571)					gfCheck = HX_("gf-christmas",94,26,b1,6d);
            				}
            				break;
            				case (int)6: {
HXLINE( 573)					gfCheck = HX_("gf-pixel",98,3e,8c,55);
            				}
            				break;
            			}
            		}
            		else {
HXLINE( 578)			gfCheck = ( (::String)(::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) );
            		}
HXLINE( 581)		if (!(::PlayState_obj::stageTesting)) {
HXLINE( 583)			::PlayState_obj::gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),gfCheck,null());
HXLINE( 585)			if (::hx::IsNull( ::PlayState_obj::gf->frames )) {
HXLINE( 590)				::PlayState_obj::gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),HX_("gf",1f,5a,00,00),null());
            			}
HXLINE( 593)			::PlayState_obj::boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 595)			if (::hx::IsNull( ::PlayState_obj::boyfriend->frames )) {
HXLINE( 600)				::PlayState_obj::boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),HX_("bf",c4,55,00,00));
            			}
HXLINE( 603)			::PlayState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 605)			if (::hx::IsNull( ::PlayState_obj::dad->frames )) {
HXLINE( 610)				::PlayState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),HX_("dad",47,36,4c,00),null());
            			}
            		}
HXLINE( 614)		if (!(::PlayState_obj::stageTesting)) {
HXLINE( 615)			::PlayState_obj::Stage =  ::Stage_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
            		}
HXLINE( 617)		 ::haxe::ds::StringMap positions = ( ( ::haxe::ds::StringMap)(::PlayState_obj::Stage->positions->get(::PlayState_obj::Stage->curStage)) );
HXLINE( 618)		bool _hx_tmp9;
HXDLIN( 618)		if (::hx::IsNotNull( positions )) {
HXLINE( 618)			_hx_tmp9 = !(::PlayState_obj::stageTesting);
            		}
            		else {
HXLINE( 618)			_hx_tmp9 = false;
            		}
HXDLIN( 618)		if (_hx_tmp9) {
HXLINE( 620)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,positions);
HXDLIN( 620)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 620)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 620)				::String _hx_char = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN( 620)				::Array< int > pos = ( (::Array< int >)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE( 621)				{
HXLINE( 621)					{
HXLINE( 621)						 ::Character person = ::PlayState_obj::boyfriend;
HXLINE( 622)						if ((person->curCharacter == _hx_char)) {
HXLINE( 623)							person->setPosition(pos->__get(0),pos->__get(1));
            						}
            					}
HXLINE( 621)					{
HXLINE( 621)						 ::Character person1 = ::PlayState_obj::gf;
HXLINE( 622)						if ((person1->curCharacter == _hx_char)) {
HXLINE( 623)							person1->setPosition(pos->__get(0),pos->__get(1));
            						}
            					}
HXLINE( 621)					{
HXLINE( 621)						 ::Character person2 = ::PlayState_obj::dad;
HXLINE( 622)						if ((person2->curCharacter == _hx_char)) {
HXLINE( 623)							person2->setPosition(pos->__get(0),pos->__get(1));
            						}
            					}
            				}
            			}
            		}
HXLINE( 625)		{
HXLINE( 625)			int _g2 = 0;
HXDLIN( 625)			::cpp::VirtualArray _g3 = ::PlayState_obj::Stage->toAdd;
HXDLIN( 625)			while((_g2 < _g3->get_length())){
HXLINE( 625)				 ::Dynamic i = _g3->__get(_g2);
HXDLIN( 625)				_g2 = (_g2 + 1);
HXLINE( 627)				this->add(i);
            			}
            		}
HXLINE( 629)		if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 630)			int _g5_current = 0;
HXDLIN( 630)			::Array< ::Dynamic> _g5_array = ::PlayState_obj::Stage->layInFront;
HXDLIN( 630)			while((_g5_current < _g5_array->length)){
HXLINE( 630)				::Array< ::Dynamic> _g6_value = _g5_array->__get(_g5_current).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 630)				_g5_current = (_g5_current + 1);
HXDLIN( 630)				int _g6_key = (_g5_current - 1);
HXDLIN( 630)				int index = _g6_key;
HXDLIN( 630)				::Array< ::Dynamic> array = _g6_value;
HXLINE( 632)				switch((int)(index)){
            					case (int)0: {
HXLINE( 635)						this->add(::PlayState_obj::gf);
HXLINE( 636)						::PlayState_obj::gf->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 637)						{
HXLINE( 637)							int _g = 0;
HXDLIN( 637)							while((_g < array->length)){
HXLINE( 637)								 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 637)								_g = (_g + 1);
HXLINE( 638)								this->add(bg);
            							}
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 640)						this->add(::PlayState_obj::dad);
HXLINE( 641)						{
HXLINE( 641)							int _g = 0;
HXDLIN( 641)							while((_g < array->length)){
HXLINE( 641)								 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 641)								_g = (_g + 1);
HXLINE( 642)								this->add(bg);
            							}
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 644)						this->add(::PlayState_obj::boyfriend);
HXLINE( 645)						{
HXLINE( 645)							int _g = 0;
HXDLIN( 645)							while((_g < array->length)){
HXLINE( 645)								 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 645)								_g = (_g + 1);
HXLINE( 646)								this->add(bg);
            							}
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE( 650)		Float _hx_tmp10 = ::PlayState_obj::dad->getGraphicMidpoint(null())->x;
HXDLIN( 650)		this->camPos =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,_hx_tmp10,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 652)		::String _hx_switch_1 = ::PlayState_obj::dad->curCharacter;
            		if (  (_hx_switch_1==HX_("dad",47,36,4c,00)) ){
HXLINE( 664)			 ::flixel::math::FlxPoint _g = this->camPos;
HXDLIN( 664)			_g->set_x((_g->x + 400));
HXDLIN( 664)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_1==HX_("gf",1f,5a,00,00)) ){
HXLINE( 655)			if (!(::PlayState_obj::stageTesting)) {
HXLINE( 656)				::PlayState_obj::dad->setPosition(::PlayState_obj::gf->x,::PlayState_obj::gf->y);
            			}
HXLINE( 657)			::PlayState_obj::gf->set_visible(false);
HXLINE( 658)			if (::PlayState_obj::isStoryMode) {
HXLINE( 660)				{
HXLINE( 660)					 ::flixel::math::FlxPoint _g = this->camPos;
HXDLIN( 660)					_g->set_x((_g->x + 600));
            				}
HXLINE( 661)				this->tweenCamIn();
            			}
HXLINE( 654)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_1==HX_("pico",e5,e8,57,4a)) ){
HXLINE( 666)			 ::flixel::math::FlxPoint _g = this->camPos;
HXDLIN( 666)			_g->set_x((_g->x + 600));
HXDLIN( 666)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_1==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 670)			 ::flixel::math::FlxPoint _hx_tmp = this->camPos;
HXDLIN( 670)			Float _hx_tmp1 = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 670)			_hx_tmp->set(_hx_tmp1,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 671)			 ::Character _hx_tmp2 = ::PlayState_obj::dad;
HXDLIN( 671)			_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((::PlayState_obj::dad->get_width() * ( (Float)(6) ))),null());
HXLINE( 672)			::PlayState_obj::dad->updateHitbox();
HXLINE( 673)			::PlayState_obj::dad->set_antialiasing(false);
HXLINE( 669)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_1==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 675)			 ::flixel::math::FlxPoint _hx_tmp = this->camPos;
HXDLIN( 675)			Float _hx_tmp1 = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 675)			_hx_tmp->set(_hx_tmp1,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 676)			 ::Character _hx_tmp2 = ::PlayState_obj::dad;
HXDLIN( 676)			_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((::PlayState_obj::dad->get_width() * ( (Float)(6) ))),null());
HXLINE( 677)			::PlayState_obj::dad->updateHitbox();
HXLINE( 678)			::PlayState_obj::dad->set_antialiasing(false);
HXLINE( 674)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_1==HX_("spirit",31,bb,a9,bd)) ){
HXLINE( 680)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 683)				if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 685)					 ::flixel::addons::effects::FlxTrail evilTrail =  ::flixel::addons::effects::FlxTrail_obj::__alloc( HX_CTX ,::PlayState_obj::dad,null(),4,24,((Float)0.3),((Float)0.069));
HXLINE( 688)					this->add(evilTrail);
            				}
            			}
HXLINE( 693)			 ::flixel::math::FlxPoint _hx_tmp = this->camPos;
HXDLIN( 693)			Float _hx_tmp1 = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 693)			_hx_tmp->set(_hx_tmp1,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 679)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_1==HX_("tankman",f0,7d,78,3d)) ){
HXLINE( 668)			 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 668)			_g->set_y((_g->y + 175));
HXDLIN( 668)			goto _hx_goto_15;
            		}
            		_hx_goto_15:;
HXLINE( 696)		bool _hx_tmp11 = (::PlayState_obj::boyfriend->curCharacter == HX_("bf-pixel",fd,03,90,37));
HXLINE( 702)		if ((::PlayState_obj::gf->curCharacter == HX_("gf-pixel",98,3e,8c,55))) {
HXLINE( 705)			 ::Character _hx_tmp = ::PlayState_obj::gf;
HXDLIN( 705)			Float _hx_tmp1 = ::PlayState_obj::gf->get_width();
HXDLIN( 705)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int((_hx_tmp1 * ::CoolUtil_obj::daPixelZoom)),null());
HXLINE( 706)			::PlayState_obj::gf->updateHitbox();
HXLINE( 707)			::PlayState_obj::gf->set_antialiasing(false);
            		}
HXLINE( 710)		::PlayState_obj::Stage->update(( (Float)(0) ));
HXLINE( 712)		if (::PlayState_obj::loadRep) {
HXLINE( 718)			::PlayStateChangeables_obj::useDownscroll = ( (bool)(::PlayState_obj::rep->replay->__Field(HX_("isDownscroll",79,6e,f3,21),::hx::paccDynamic)) );
HXLINE( 719)			::PlayStateChangeables_obj::safeFrames = ( (int)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) );
HXLINE( 720)			::PlayStateChangeables_obj::botPlay = true;
            		}
HXLINE( 727)		 ::DialogueBox doof = null();
HXLINE( 729)		if (::PlayState_obj::isStoryMode) {
HXLINE( 731)			doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,this->dialogue);
HXLINE( 734)			doof->scrollFactor->set(null(),null());
HXLINE( 735)			doof->finishThing = this->startCountdown_dyn();
            		}
HXLINE( 738)		bool _hx_tmp12;
HXDLIN( 738)		if (!(::PlayState_obj::isStoryMode)) {
HXLINE( 738)			_hx_tmp12 = (::PlayState_obj::songMultiplier == 1);
            		}
            		else {
HXLINE( 738)			_hx_tmp12 = false;
            		}
HXDLIN( 738)		if (_hx_tmp12) {
HXLINE( 740)			Float firstNoteTime = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 741)			bool playerTurn = false;
HXLINE( 742)			{
HXLINE( 742)				int _g8_current = 0;
HXDLIN( 742)				::Array< ::Dynamic> _g8_array = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN( 742)				while((_g8_current < _g8_array->length)){
HXLINE( 742)					 ::Dynamic _g9_value = _g8_array->__get(_g8_current);
HXDLIN( 742)					_g8_current = (_g8_current + 1);
HXDLIN( 742)					int _g9_key = (_g8_current - 1);
HXDLIN( 742)					int index = _g9_key;
HXDLIN( 742)					 ::Dynamic section = _g9_value;
HXLINE( 744)					bool _hx_tmp;
HXDLIN( 744)					if ((( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length > 0)) {
HXLINE( 744)						_hx_tmp = !(::PlayState_obj::isSM);
            					}
            					else {
HXLINE( 744)						_hx_tmp = false;
            					}
HXDLIN( 744)					if (_hx_tmp) {
HXLINE( 746)						if (::hx::IsGreater( section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),5000 )) {
HXLINE( 748)							this->needSkip = true;
HXLINE( 749)							this->skipTo = (( (Float)(section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) ) - ( (Float)(1000) ));
            						}
HXLINE( 751)						goto _hx_goto_16;
            					}
            					else {
HXLINE( 753)						if (::PlayState_obj::isSM) {
HXLINE( 755)							{
HXLINE( 755)								int _g = 0;
HXDLIN( 755)								::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 755)								while((_g < _g1->length)){
HXLINE( 755)									::cpp::VirtualArray note = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN( 755)									_g = (_g + 1);
HXLINE( 757)									if (::hx::IsLess( note->__get(0),firstNoteTime )) {
HXLINE( 759)										if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 761)											firstNoteTime = ( (Float)(note->__get(0)) );
HXLINE( 762)											if (::hx::IsGreater( note->__get(1),3 )) {
HXLINE( 763)												playerTurn = true;
            											}
            											else {
HXLINE( 765)												playerTurn = false;
            											}
            										}
            										else {
HXLINE( 767)											if (::hx::IsGreater( note->__get(1),3 )) {
HXLINE( 769)												firstNoteTime = ( (Float)(note->__get(0)) );
            											}
            										}
            									}
            								}
            							}
HXLINE( 773)							if (((index + 1) == ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length)) {
HXLINE( 775)								Float timing;
HXDLIN( 775)								bool timing1;
HXDLIN( 775)								if (!(playerTurn)) {
HXLINE( 775)									timing1 = !(::PlayStateChangeables_obj::Optimize);
            								}
            								else {
HXLINE( 775)									timing1 = false;
            								}
HXDLIN( 775)								if (timing1) {
HXLINE( 775)									timing = firstNoteTime;
            								}
            								else {
HXLINE( 775)									timing = ::TimingStruct_obj::getTimeFromBeat((::TimingStruct_obj::getBeatFromTime(firstNoteTime) - ( (Float)(4) )));
            								}
HXLINE( 777)								if ((timing > 5000)) {
HXLINE( 779)									this->needSkip = true;
HXLINE( 780)									this->skipTo = (timing - ( (Float)(1000) ));
            								}
            							}
            						}
            					}
            				}
            				_hx_goto_16:;
            			}
            		}
HXLINE( 787)		::Conductor_obj::songPosition = ( (Float)(-5000) );
HXLINE( 788)		::Conductor_obj::rawPosition = ::Conductor_obj::songPosition;
HXLINE( 790)		this->strumLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 791)		this->strumLine->scrollFactor->set(null(),null());
HXLINE( 793)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 794)			this->strumLine->set_y(( (Float)((::flixel::FlxG_obj::height - 165)) ));
            		}
HXLINE( 796)		 ::flixel::FlxSprite _hx_tmp13 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 796)		this->laneunderlayOpponent = _hx_tmp13->makeGraphic(490,(::flixel::FlxG_obj::height * 2),null(),null(),null());
HXLINE( 797)		this->laneunderlayOpponent->set_alpha(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("laneTransparency",24,32,52,af),::hx::paccDynamic)) ));
HXLINE( 798)		this->laneunderlayOpponent->set_color(-16777216);
HXLINE( 799)		this->laneunderlayOpponent->scrollFactor->set(null(),null());
HXLINE( 801)		 ::flixel::FlxSprite _hx_tmp14 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 801)		this->laneunderlay = _hx_tmp14->makeGraphic(490,(::flixel::FlxG_obj::height * 2),null(),null(),null());
HXLINE( 802)		this->laneunderlay->set_alpha(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("laneTransparency",24,32,52,af),::hx::paccDynamic)) ));
HXLINE( 803)		this->laneunderlay->set_color(-16777216);
HXLINE( 804)		this->laneunderlay->scrollFactor->set(null(),null());
HXLINE( 806)		bool _hx_tmp15;
HXDLIN( 806)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("laneUnderlay",58,04,15,b5),::hx::paccDynamic)) )) {
HXLINE( 806)			_hx_tmp15 = !(::PlayStateChangeables_obj::Optimize);
            		}
            		else {
HXLINE( 806)			_hx_tmp15 = false;
            		}
HXDLIN( 806)		if (_hx_tmp15) {
HXLINE( 808)			bool _hx_tmp;
HXDLIN( 808)			if (!(!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) )))) {
HXLINE( 808)				_hx_tmp = this->executeModchart;
            			}
            			else {
HXLINE( 808)				_hx_tmp = true;
            			}
HXDLIN( 808)			if (_hx_tmp) {
HXLINE( 810)				this->add(this->laneunderlayOpponent);
            			}
HXLINE( 812)			this->add(this->laneunderlay);
            		}
HXLINE( 815)		::PlayState_obj::strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 816)		this->add(::PlayState_obj::strumLineNotes);
HXLINE( 818)		::PlayState_obj::playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 819)		::PlayState_obj::cpuStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 821)		::PlayState_obj::noteskinPixelSprite = ::NoteskinHelpers_obj::generatePixelSprite(( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("noteskin",6f,0f,af,70),::hx::paccDynamic)) ),null());
HXLINE( 822)		::PlayState_obj::noteskinSprite = ::NoteskinHelpers_obj::generateNoteskinSprite(( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("noteskin",6f,0f,af,70),::hx::paccDynamic)) ));
HXLINE( 823)		::PlayState_obj::noteskinPixelSpriteEnds = ::NoteskinHelpers_obj::generatePixelSprite(( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("noteskin",6f,0f,af,70),::hx::paccDynamic)) ),true);
HXLINE( 825)		this->generateStaticArrows(0);
HXLINE( 826)		this->generateStaticArrows(1);
HXLINE( 830)		this->laneunderlay->set_x((Dynamic( ::PlayState_obj::playerStrums->members->__get(0)).StaticCast<  ::StaticArrow >()->x - ( (Float)(25) )));
HXLINE( 831)		this->laneunderlayOpponent->set_x((Dynamic( ::PlayState_obj::cpuStrums->members->__get(0)).StaticCast<  ::StaticArrow >()->x - ( (Float)(25) )));
HXLINE( 833)		{
HXLINE( 833)			 ::flixel::FlxSprite _this = this->laneunderlay;
HXDLIN( 833)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::Y_dyn();
HXDLIN( 833)			if (::hx::IsNull( axes )) {
HXLINE( 833)				axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 833)			bool _hx_tmp16;
HXDLIN( 833)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 833)					_hx_tmp16 = true;
            				}
            				break;
            				default:{
HXLINE( 833)					_hx_tmp16 = false;
            				}
            			}
HXDLIN( 833)			if (_hx_tmp16) {
HXLINE( 833)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 833)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 833)			bool _hx_tmp17;
HXDLIN( 833)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 833)					_hx_tmp17 = true;
            				}
            				break;
            				default:{
HXLINE( 833)					_hx_tmp17 = false;
            				}
            			}
HXDLIN( 833)			if (_hx_tmp17) {
HXLINE( 833)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 833)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 834)		{
HXLINE( 834)			 ::flixel::FlxSprite _this1 = this->laneunderlayOpponent;
HXDLIN( 834)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::Y_dyn();
HXDLIN( 834)			if (::hx::IsNull( axes1 )) {
HXLINE( 834)				axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 834)			bool _hx_tmp18;
HXDLIN( 834)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 834)					_hx_tmp18 = true;
            				}
            				break;
            				default:{
HXLINE( 834)					_hx_tmp18 = false;
            				}
            			}
HXDLIN( 834)			if (_hx_tmp18) {
HXLINE( 834)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 834)				_this1->set_x(((( (Float)(_hx_tmp) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 834)			bool _hx_tmp19;
HXDLIN( 834)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 834)					_hx_tmp19 = true;
            				}
            				break;
            				default:{
HXLINE( 834)					_hx_tmp19 = false;
            				}
            			}
HXDLIN( 834)			if (_hx_tmp19) {
HXLINE( 834)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 834)				_this1->set_y(((( (Float)(_hx_tmp) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 838)		bool _hx_tmp20 = ::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic) );
HXLINE( 843)		this->generateSong(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ));
HXLINE( 846)		if (this->executeModchart) {
HXLINE( 848)			::PlayState_obj::luaModchart = ::ModchartState_obj::createModchartState(::PlayState_obj::isStoryMode);
HXLINE( 849)			::PlayState_obj::luaModchart->executeState(HX_("start",62,74,0b,84),::cpp::VirtualArray_obj::__new(1)->init(0, ::Dynamic(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic))));
            		}
HXLINE( 854)		if (this->executeModchart) {
HXLINE( 856)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camGame,HX_("camGame",a1,47,50,cf))->Register(::ModchartState_obj::lua);
HXLINE( 857)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camHUD,HX_("camHUD",e8,2b,76,b7))->Register(::ModchartState_obj::lua);
HXLINE( 858)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camSustains,HX_("camSustains",9f,69,a2,15))->Register(::ModchartState_obj::lua);
HXLINE( 859)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camSustains,HX_("camNotes",b2,c1,02,a8))->Register(::ModchartState_obj::lua);
HXLINE( 860)			 ::LuaCharacter_obj::__alloc( HX_CTX ,::PlayState_obj::dad,HX_("dad",47,36,4c,00))->Register(::ModchartState_obj::lua);
HXLINE( 861)			 ::LuaCharacter_obj::__alloc( HX_CTX ,::PlayState_obj::gf,HX_("gf",1f,5a,00,00))->Register(::ModchartState_obj::lua);
HXLINE( 862)			 ::LuaCharacter_obj::__alloc( HX_CTX ,::PlayState_obj::boyfriend,HX_("boyfriend",6a,29,b8,e6))->Register(::ModchartState_obj::lua);
            		}
HXLINE( 866)		int index = 0;
HXLINE( 868)		if ((::PlayState_obj::startTime != 0)) {
HXLINE( 870)			::Array< ::Dynamic> toBeRemoved = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 871)			{
HXLINE( 871)				int _g = 0;
HXDLIN( 871)				int _g1 = this->unspawnNotes->length;
HXDLIN( 871)				while((_g < _g1)){
HXLINE( 871)					_g = (_g + 1);
HXDLIN( 871)					int i = (_g - 1);
HXLINE( 873)					 ::Note dunceNote = this->unspawnNotes->__get(i).StaticCast<  ::Note >();
HXLINE( 875)					if ((dunceNote->strumTime <= ::PlayState_obj::startTime)) {
HXLINE( 876)						toBeRemoved->push(dunceNote);
            					}
            				}
            			}
HXLINE( 879)			{
HXLINE( 879)				int _g2 = 0;
HXDLIN( 879)				while((_g2 < toBeRemoved->length)){
HXLINE( 879)					 ::Note i = toBeRemoved->__get(_g2).StaticCast<  ::Note >();
HXDLIN( 879)					_g2 = (_g2 + 1);
HXLINE( 880)					this->unspawnNotes->remove(i);
            				}
            			}
HXLINE( 882)			::Debug_obj::logTrace(((HX_("Removed ",a0,48,cd,86) + toBeRemoved->length) + HX_(" cuz of start time",3c,b0,a1,1e)),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),882,HX_("PlayState",5d,83,c2,46),HX_("create",fc,66,0f,7c)));
            		}
HXLINE( 889)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 891)		this->camFollow->setPosition(this->camPos->x,this->camPos->y);
HXLINE( 893)		if (::hx::IsNotNull( ::PlayState_obj::prevCamFollow )) {
HXLINE( 895)			this->camFollow = ::PlayState_obj::prevCamFollow;
HXLINE( 896)			::PlayState_obj::prevCamFollow = null();
            		}
HXLINE( 899)		this->add(this->camFollow);
HXLINE( 901)		 ::flixel::FlxCamera _hx_tmp21 = ::flixel::FlxG_obj::camera;
HXDLIN( 901)		 ::flixel::FlxObject _hx_tmp22 = this->camFollow;
HXDLIN( 901)		_hx_tmp21->follow(_hx_tmp22,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),(((Float)0.04) * (( (Float)(30) ) / ::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->getFPS())));
HXLINE( 903)		::flixel::FlxG_obj::camera->set_zoom(::PlayState_obj::Stage->camZoom);
HXLINE( 904)		{
HXLINE( 904)			 ::flixel::FlxCamera _this2 = ::flixel::FlxG_obj::camera;
HXDLIN( 904)			 ::flixel::math::FlxPoint point = this->camFollow->getPosition(null());
HXDLIN( 904)			_this2->scroll->set((point->x - (( (Float)(_this2->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this2->height) ) * ((Float)0.5))));
HXDLIN( 904)			if (point->_weak) {
HXLINE( 904)				point->put();
            			}
            		}
HXLINE( 906)		{
HXLINE( 906)			 ::flixel::math::FlxRect _this3 = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 906)			_this3->x = ( (Float)(0) );
HXDLIN( 906)			_this3->y = ( (Float)(0) );
HXDLIN( 906)			_this3->width = ( (Float)(::flixel::FlxG_obj::width) );
HXDLIN( 906)			_this3->height = ( (Float)(::flixel::FlxG_obj::height) );
            		}
HXLINE( 908)		::flixel::FlxG_obj::fixedTimestep = false;
HXLINE( 910)		 ::flixel::FlxSprite _hx_tmp23 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)),null());
HXDLIN( 910)		this->healthBarBG = _hx_tmp23->loadGraphic(::Paths_obj::loadImage(HX_("healthBar",97,8a,92,42),null()),null(),null(),null(),null(),null());
HXLINE( 911)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 912)			this->healthBarBG->set_y(( (Float)(50) ));
            		}
HXLINE( 913)		{
HXLINE( 913)			 ::flixel::FlxSprite _this4 = this->healthBarBG;
HXDLIN( 913)			 ::flixel::util::FlxAxes axes2 = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 913)			if (::hx::IsNull( axes2 )) {
HXLINE( 913)				axes2 = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 913)			bool _hx_tmp24;
HXDLIN( 913)			switch((int)(axes2->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 913)					_hx_tmp24 = true;
            				}
            				break;
            				default:{
HXLINE( 913)					_hx_tmp24 = false;
            				}
            			}
HXDLIN( 913)			if (_hx_tmp24) {
HXLINE( 913)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 913)				_this4->set_x(((( (Float)(_hx_tmp) ) - _this4->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 913)			bool _hx_tmp25;
HXDLIN( 913)			switch((int)(axes2->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 913)					_hx_tmp25 = true;
            				}
            				break;
            				default:{
HXLINE( 913)					_hx_tmp25 = false;
            				}
            			}
HXDLIN( 913)			if (_hx_tmp25) {
HXLINE( 913)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 913)				_this4->set_y(((( (Float)(_hx_tmp) ) - _this4->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 914)		this->healthBarBG->scrollFactor->set(null(),null());
HXLINE( 916)		Float _hx_tmp26 = (this->healthBarBG->x + 4);
HXDLIN( 916)		Float _hx_tmp27 = (this->healthBarBG->y + 4);
HXDLIN( 916)		int _hx_tmp28 = ::Std_obj::_hx_int((this->healthBarBG->get_width() - ( (Float)(8) )));
HXDLIN( 916)		this->healthBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp26,_hx_tmp27,::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn(),_hx_tmp28,::Std_obj::_hx_int((this->healthBarBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("health",9c,28,06,fd),0,2,null());
HXLINE( 918)		this->healthBar->scrollFactor->set(null(),null());
HXLINE( 922)		Float _hx_tmp29 = (this->healthBarBG->y + 50);
HXLINE( 924)		::String _hx_tmp30 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic)) );
HXLINE( 925)		::String _hx_tmp31;
HXDLIN( 925)		if ((::flixel::math::FlxMath_obj::roundDecimal(::PlayState_obj::songMultiplier,2) != ((Float)1.00))) {
HXLINE( 925)			_hx_tmp31 = ((HX_(" (",08,1c,00,00) + ::flixel::math::FlxMath_obj::roundDecimal(::PlayState_obj::songMultiplier,2)) + HX_("x)",b1,68,00,00));
            		}
            		else {
HXLINE( 925)			_hx_tmp31 = HX_("",00,00,00,00);
            		}
HXLINE( 922)		this->RealityEngineWatermark =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,4,_hx_tmp29,0,(((_hx_tmp30 + _hx_tmp31) + HX_(" - ",73,6f,18,00)) + ::CoolUtil_obj::difficultyFromInt(::PlayState_obj::storyDifficulty)),16,null());
HXLINE( 929)		this->RealityEngineWatermark->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("muffengineReality.ttf",be,dc,c5,aa)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 930)		this->RealityEngineWatermark->scrollFactor->set(null(),null());
HXLINE( 931)		this->add(this->RealityEngineWatermark);
HXLINE( 933)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 934)			this->RealityEngineWatermark->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            		}
HXLINE( 936)		this->scoreTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(235) )),(this->healthBarBG->y + 50),0,HX_("",00,00,00,00),20,null());
HXLINE( 937)		{
HXLINE( 937)			 ::flixel::text::FlxText _this5 = this->scoreTxt;
HXDLIN( 937)			 ::flixel::util::FlxAxes axes3 = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 937)			if (::hx::IsNull( axes3 )) {
HXLINE( 937)				axes3 = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 937)			bool _hx_tmp32;
HXDLIN( 937)			switch((int)(axes3->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 937)					_hx_tmp32 = true;
            				}
            				break;
            				default:{
HXLINE( 937)					_hx_tmp32 = false;
            				}
            			}
HXDLIN( 937)			if (_hx_tmp32) {
HXLINE( 937)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 937)				_this5->set_x(((( (Float)(_hx_tmp) ) - _this5->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 937)			bool _hx_tmp33;
HXDLIN( 937)			switch((int)(axes3->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 937)					_hx_tmp33 = true;
            				}
            				break;
            				default:{
HXLINE( 937)					_hx_tmp33 = false;
            				}
            			}
HXDLIN( 937)			if (_hx_tmp33) {
HXLINE( 937)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 937)				_this5->set_y(((( (Float)(_hx_tmp) ) - _this5->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 938)		this->scoreTxt->set_borderSize(((Float)1.30));
HXLINE( 939)		this->scoreTxt->scrollFactor->set(null(),null());
HXLINE( 940)		this->scoreTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("muffengineReality.ttf",be,dc,c5,aa)),20,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 941)		 ::flixel::text::FlxText _hx_tmp34 = this->scoreTxt;
HXDLIN( 941)		_hx_tmp34->set_text(::Ratings_obj::CalculateRanking(this->songScore,this->songScoreDef,this->nps,this->maxNPS,this->accuracy));
HXLINE( 943)		 ::flixel::text::FlxText selec =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1150,(::flixel::FlxG_obj::height - -17),0,(HX_("Reality Engine v",68,29,ea,98) + ::MainMenuState_obj::RealityEngineVer),12,null());
HXLINE( 944)		selec->scrollFactor->set(null(),null());
HXLINE( 945)		selec->setFormat(HX_("PhantomMuff1.5RealityEngine",8f,cd,de,3f),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 946)		this->add(selec);
HXLINE( 948)		if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("healthBar",97,8a,92,42),::hx::paccDynamic)) ))) {
HXLINE( 949)			this->scoreTxt->set_y(this->healthBarBG->y);
            		}
HXLINE( 951)		this->add(this->scoreTxt);
HXLINE( 953)		this->judgementCounter =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,0,0,HX_("",00,00,00,00),20,null());
HXLINE( 954)		this->judgementCounter->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("muffengineReality.ttf",be,dc,c5,aa)),20,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 955)		this->judgementCounter->set_borderSize(( (Float)(2) ));
HXLINE( 956)		this->judgementCounter->set_borderQuality(( (Float)(2) ));
HXLINE( 957)		this->judgementCounter->scrollFactor->set(null(),null());
HXLINE( 958)		this->judgementCounter->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 959)		{
HXLINE( 959)			 ::flixel::text::FlxText _this6 = this->judgementCounter;
HXDLIN( 959)			 ::flixel::util::FlxAxes axes4 = ::flixel::util::FlxAxes_obj::Y_dyn();
HXDLIN( 959)			if (::hx::IsNull( axes4 )) {
HXLINE( 959)				axes4 = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 959)			bool _hx_tmp35;
HXDLIN( 959)			switch((int)(axes4->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 959)					_hx_tmp35 = true;
            				}
            				break;
            				default:{
HXLINE( 959)					_hx_tmp35 = false;
            				}
            			}
HXDLIN( 959)			if (_hx_tmp35) {
HXLINE( 959)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 959)				_this6->set_x(((( (Float)(_hx_tmp) ) - _this6->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 959)			bool _hx_tmp36;
HXDLIN( 959)			switch((int)(axes4->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 959)					_hx_tmp36 = true;
            				}
            				break;
            				default:{
HXLINE( 959)					_hx_tmp36 = false;
            				}
            			}
HXDLIN( 959)			if (_hx_tmp36) {
HXLINE( 959)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 959)				_this6->set_y(((( (Float)(_hx_tmp) ) - _this6->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 960)		this->judgementCounter->set_text((((((((((HX_("Sicks: ",bb,1b,ab,be) + ::PlayState_obj::sicks) + HX_("\nGoods: ",d2,a1,f4,51)) + ::PlayState_obj::goods) + HX_("\nBads: ",de,84,b3,1f)) + ::PlayState_obj::bads) + HX_("\nShits: ",2f,9b,a2,0e)) + ::PlayState_obj::shits) + HX_("\nMisses: ",ba,59,21,f5)) + ::PlayState_obj::misses));
HXLINE( 961)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("judgementCounter",c7,fa,f4,d2),::hx::paccDynamic)) )) {
HXLINE( 963)			this->add(this->judgementCounter);
            		}
HXLINE( 966)		Float _hx_tmp37 = this->healthBarBG->x;
HXDLIN( 966)		Float _hx_tmp38 = ((_hx_tmp37 + (this->healthBarBG->get_width() / ( (Float)(2) ))) - ( (Float)(75) ));
HXDLIN( 966)		int _hx_tmp39;
HXDLIN( 966)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 966)			_hx_tmp39 = 100;
            		}
            		else {
HXLINE( 966)			_hx_tmp39 = -100;
            		}
HXDLIN( 966)		this->replayTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp38,(this->healthBarBG->y + _hx_tmp39),0,HX_("REPLAY",27,93,04,b9),20,null());
HXLINE( 968)		this->replayTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("muffengineReality.ttf",be,dc,c5,aa)),42,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 969)		this->replayTxt->set_borderSize(( (Float)(4) ));
HXLINE( 970)		this->replayTxt->set_borderQuality(( (Float)(2) ));
HXLINE( 971)		this->replayTxt->scrollFactor->set(null(),null());
HXLINE( 972)		this->replayTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 973)		if (::PlayState_obj::loadRep) {
HXLINE( 975)			this->add(this->replayTxt);
            		}
HXLINE( 978)		Float _hx_tmp40 = this->healthBarBG->x;
HXDLIN( 978)		Float _hx_tmp41 = ((_hx_tmp40 + (this->healthBarBG->get_width() / ( (Float)(2) ))) - ( (Float)(75) ));
HXDLIN( 978)		int _hx_tmp42;
HXDLIN( 978)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 978)			_hx_tmp42 = 100;
            		}
            		else {
HXLINE( 978)			_hx_tmp42 = -100;
            		}
HXDLIN( 978)		this->botPlayState =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp41,(this->healthBarBG->y + _hx_tmp42),0,HX_("BOTPLAY",5b,cf,7d,e1),20,null());
HXLINE( 980)		this->botPlayState->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("muffengineReality.ttf",be,dc,c5,aa)),42,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 981)		this->botPlayState->scrollFactor->set(null(),null());
HXLINE( 982)		this->botPlayState->set_borderSize(( (Float)(4) ));
HXLINE( 983)		this->botPlayState->set_borderQuality(( (Float)(2) ));
HXLINE( 984)		this->botPlayState->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 985)		bool _hx_tmp43;
HXDLIN( 985)		if (::PlayStateChangeables_obj::botPlay) {
HXLINE( 985)			_hx_tmp43 = !(::PlayState_obj::loadRep);
            		}
            		else {
HXLINE( 985)			_hx_tmp43 = false;
            		}
HXDLIN( 985)		if (_hx_tmp43) {
HXLINE( 986)			this->add(this->botPlayState);
            		}
HXLINE( 988)		this->addedBotplay = ::PlayStateChangeables_obj::botPlay;
HXLINE( 990)		this->iconP1 =  ::HealthIcon_obj::__alloc( HX_CTX ,::PlayState_obj::boyfriend->curCharacter,true);
HXLINE( 991)		 ::HealthIcon _hx_tmp44 = this->iconP1;
HXDLIN( 991)		Float _hx_tmp45 = this->healthBar->y;
HXDLIN( 991)		_hx_tmp44->set_y((_hx_tmp45 - (this->iconP1->get_height() / ( (Float)(2) ))));
HXLINE( 993)		this->iconP2 =  ::HealthIcon_obj::__alloc( HX_CTX ,::PlayState_obj::dad->curCharacter,false);
HXLINE( 994)		 ::HealthIcon _hx_tmp46 = this->iconP2;
HXDLIN( 994)		Float _hx_tmp47 = this->healthBar->y;
HXDLIN( 994)		_hx_tmp46->set_y((_hx_tmp47 - (this->iconP2->get_height() / ( (Float)(2) ))));
HXLINE( 996)		this->iconP1 =  ::HealthIcon_obj::__alloc( HX_CTX ,::PlayState_obj::boyfriend->curCharacter,true);
HXLINE( 997)		 ::HealthIcon _hx_tmp48 = this->iconP1;
HXDLIN( 997)		Float _hx_tmp49 = this->healthBar->y;
HXDLIN( 997)		_hx_tmp48->set_y((_hx_tmp49 - (this->iconP1->get_height() / ( (Float)(2) ))));
HXLINE( 999)		this->iconP2 =  ::HealthIcon_obj::__alloc( HX_CTX ,::PlayState_obj::dad->curCharacter,false);
HXLINE(1000)		 ::HealthIcon _hx_tmp50 = this->iconP2;
HXDLIN(1000)		Float _hx_tmp51 = this->healthBar->y;
HXDLIN(1000)		_hx_tmp50->set_y((_hx_tmp51 - (this->iconP2->get_height() / ( (Float)(2) ))));
HXLINE(1002)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("healthBar",97,8a,92,42),::hx::paccDynamic)) )) {
HXLINE(1004)			this->add(this->healthBarBG);
HXLINE(1005)			this->add(this->healthBar);
HXLINE(1006)			this->add(this->iconP1);
HXLINE(1007)			this->add(this->iconP2);
HXLINE(1009)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("colour",4c,c8,86,c6),::hx::paccDynamic)) )) {
HXLINE(1010)				this->healthBar->createFilledBar(::PlayState_obj::dad->barColor,::PlayState_obj::boyfriend->barColor,null(),null());
            			}
            			else {
HXLINE(1012)				this->healthBar->createFilledBar(-65536,-10027213,null(),null());
            			}
            		}
HXLINE(1015)		::PlayState_obj::strumLineNotes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1016)		this->notes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1017)		this->healthBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1018)		this->healthBarBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1019)		this->iconP1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1020)		this->iconP2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1021)		this->scoreTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1022)		this->laneunderlay->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1023)		this->laneunderlayOpponent->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1025)		if (::PlayState_obj::isStoryMode) {
HXLINE(1026)			doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1027)		this->RealityEngineWatermark->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1029)		this->startingSong = true;
HXLINE(1033)		::PlayState_obj::dad->dance(null(),null());
HXLINE(1034)		::PlayState_obj::boyfriend->dance(null(),null());
HXLINE(1035)		::PlayState_obj::gf->dance(null(),null());
HXLINE(1037)		if (::PlayState_obj::isStoryMode) {
HXLINE(1039)			::String _hx_switch_2 = ::StringTools_obj::replace(this->curSong,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
            			if (  (_hx_switch_2==HX_("guns",f3,21,6e,44)) ){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(3)
            				void _hx_run(::String idle,int frameNumber,int frameIndex){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1154_create)
HXLINE(1156)					if ((frameNumber == 1)) {
HXLINE(1158)						_gthis->camFollow->set_x(( (Float)(340) ));
HXLINE(1159)						::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("zoom",13,a3,f8,50),(::PlayState_obj::Stage->camZoom = ((Float)1.2)))),3,null());
HXLINE(1161)						 ::flixel::_hx_system::FlxSound sound =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXLINE(1160)						 ::flixel::_hx_system::FlxSound sound1 = sound->loadEmbedded(::Paths_obj::sound(HX_("cuts2",61,ce,59,4e),null()),null(),null(),null());
HXLINE(1162)						sound1->play(null(),null(),null());
HXLINE(1163)						::flixel::FlxG_obj::sound->list->add(sound1).StaticCast<  ::flixel::_hx_system::FlxSound >();
            					}
HXLINE(1167)					if ((frameNumber == 114)) {
HXLINE(1169)						::PlayState_obj::gf->playAnim(HX_("sad",16,98,57,00),null(),null(),null());
HXLINE(1170)						_gthis->camFollow->set_x(( (Float)(370) ));
HXLINE(1171)						::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("zoom",13,a3,f8,50),(::PlayState_obj::Stage->camZoom = ((Float)1.3)))),((Float)0.1),null());
            					}
HXLINE(1174)					if ((frameNumber == 233)) {
HXLINE(1176)						_gthis->camFollow->set_x(( (Float)(450) ));
HXLINE(1177)						::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("zoom",13,a3,f8,50),(::PlayState_obj::Stage->camZoom = ((Float)0.9)))),2,null());
            					}
            				}
            				HX_END_LOCAL_FUNC3((void))

            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::flixel::FlxSprite,anim2) HXARGC(1)
            				void _hx_run(::String idle){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1183_create)
HXLINE(1184)					_gthis->remove(anim2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1185)					::PlayState_obj::dad->set_alpha(( (Float)(1) ));
HXLINE(1186)					_gthis->startCountdown();
HXLINE(1187)					if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("hideHud",15,b9,3c,b7),::hx::paccDynamic)) ))) {
HXLINE(1189)						::flixel::tweens::FlxTween_obj::tween(_gthis->scoreTxt, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((::Conductor_obj::stepCrochet * ( (Float)(16) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
HXLINE(1190)						::flixel::tweens::FlxTween_obj::tween(_gthis->iconP1, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((::Conductor_obj::stepCrochet * ( (Float)(16) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
HXLINE(1191)						::flixel::tweens::FlxTween_obj::tween(_gthis->iconP2, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((::Conductor_obj::stepCrochet * ( (Float)(16) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
HXLINE(1192)						::flixel::tweens::FlxTween_obj::tween(_gthis->healthBar, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((::Conductor_obj::stepCrochet * ( (Float)(16) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
HXLINE(1193)						::flixel::tweens::FlxTween_obj::tween(_gthis->healthBarBG, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((::Conductor_obj::stepCrochet * ( (Float)(16) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1138)				::PlayState_obj::dad->set_alpha(( (Float)(0) ));
HXLINE(1139)				this->healthBarBG->set_alpha(( (Float)(0) ));
HXLINE(1140)				this->healthBar->set_alpha(( (Float)(0) ));
HXLINE(1141)				this->iconP1->set_alpha(( (Float)(0) ));
HXLINE(1142)				this->iconP2->set_alpha(( (Float)(0) ));
HXLINE(1143)				this->scoreTxt->set_alpha(( (Float)(0) ));
HXLINE(1145)				 ::flixel::FlxSprite anim2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,::PlayState_obj::dad->x,::PlayState_obj::dad->y,null());
HXLINE(1147)				 ::flixel::FlxSprite anim21 = anim2;
HXDLIN(1147)				anim21->set_frames(::Paths_obj::getSparrowAtlas(HX_("TANK_TALK_2",14,97,2b,c7),HX_("shared",a5,5e,2b,1d),null()));
HXLINE(1148)				anim2->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("TANK TALK 2",b4,26,63,8b),24,false,null(),null());
HXLINE(1149)				anim2->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(1150)				anim2->set_antialiasing(true);
HXLINE(1151)				this->add(anim2);
HXLINE(1153)				anim2->animation->callback =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE(1182)				anim2->animation->finishCallback =  ::Dynamic(new _hx_Closure_2(_gthis,anim2));
HXLINE(1137)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_2==HX_("roses",04,6c,64,ed)) ){
HXLINE(1072)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1072)				_hx_tmp->play(::Paths_obj::sound(HX_("ANGRY",01,81,d0,a0),null()),null(),null(),null(),null(),null());
HXLINE(1073)				this->schoolIntro(doof);
HXLINE(1071)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_2==HX_("senpai",3c,df,8d,6b)) ){
HXLINE(1070)				this->schoolIntro(doof);
HXDLIN(1070)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_2==HX_("stress",34,24,2d,11)) ){
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer GodEfftingDamnit){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1270_create)
HXLINE(1271)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1271)					_hx_tmp->play(::Paths_obj::sound(HX_("cuts3",62,ce,59,4e),null()),null(),null(),null(),null(),null());
HXLINE(1272)					::PlayState_obj::gf->dance(null(),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis, ::flixel::group::FlxTypedGroup,gfCutsceneLayer, ::flixel::FlxSprite,gfCuts, ::flixel::FlxSprite,gfDemon) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer dagfDemon){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1275_create)
HXLINE(1276)					_gthis->camFollow->setPosition(550,300);
HXLINE(1277)					::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("zoom",13,a3,f8,50),(::PlayState_obj::Stage->camZoom * ((Float)1.6)))),3, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
HXLINE(1278)					gfCutsceneLayer->remove(gfCuts,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1279)					gfDemon->set_alpha(((Float)1.00001));
HXLINE(1280)					gfCutsceneLayer->add(gfDemon).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1281)					gfDemon->animation->play(HX_("dance",33,83,83,d4),null(),null(),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_5, ::flixel::group::FlxTypedGroup,gfCutsceneLayer, ::flixel::FlxSprite,gfDemon, ::flixel::FlxSprite,bf, ::flixel::FlxSprite,picoKill) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer demonpart2){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1284_create)
HXLINE(1285)					::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("zoom",13,a3,f8,50),(::PlayState_obj::Stage->camZoom = ((Float)1.0)))),2,null());
HXLINE(1286)					gfCutsceneLayer->remove(bf,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1287)					gfCutsceneLayer->remove(gfDemon,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1288)					picoKill->set_alpha(( (Float)(1) ));
HXLINE(1289)					gfCutsceneLayer->add(picoKill).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1290)					picoKill->animation->play(HX_("dance",33,83,83,d4),null(),null(),null());
HXLINE(1291)					::PlayState_obj::boyfriend->set_alpha(( (Float)(1) ));
HXLINE(1292)					::PlayState_obj::boyfriend->playAnim(HX_("bfCatch",d7,2f,ed,87),null(),null(),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_6) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer idle){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1296_create)
HXLINE(1296)					::PlayState_obj::boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer demonpart2){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1300_create)
HXLINE(1300)					_gthis->camFollow->setPosition(550,450);
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_8, ::flixel::group::FlxTypedGroup,gfCutsceneLayer, ::flixel::FlxSprite,picoSpeaker, ::flixel::FlxSprite,picoKill) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer dagfDemon){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1303_create)
HXLINE(1304)					gfCutsceneLayer->remove(picoKill,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1305)					gfCutsceneLayer->add(picoSpeaker).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1306)					picoSpeaker->set_alpha(( (Float)(1) ));
HXLINE(1307)					picoSpeaker->animation->play(HX_("dance",33,83,83,d4),null(),null(),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_9) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer eugh){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1312_create)
HXLINE(1312)					::PlayState_obj::boyfriend->playAnim(HX_("singUPmiss",66,22,08,8a),null(),null(),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_10, ::flixel::FlxSprite,godeffing, ::flixel::group::FlxTypedGroup,gfCutsceneLayer, ::flixel::FlxSprite,picoSpeaker) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer eugh){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1315_create)
HXLINE(1316)					::PlayState_obj::dad->set_visible(true);
HXLINE(1317)					gfCutsceneLayer->remove(godeffing,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1318)					gfCutsceneLayer->remove(picoSpeaker,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1319)					::PlayState_obj::gf->set_alpha(( (Float)(1) ));
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_11, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer dagfDemon){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1323_create)
HXLINE(1324)					::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("zoom",13,a3,f8,50),(::PlayState_obj::Stage->camZoom = ((Float)0.9)))),2,null());
HXLINE(1325)					_gthis->startCountdown();
HXLINE(1326)					::PlayState_obj::gf->dance(null(),null());
HXLINE(1328)					_gthis->camHUD->set_visible(true);
HXLINE(1329)					_gthis->inCutscene = false;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1197)				 ::flixel::group::FlxTypedGroup gfCutsceneLayer =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(1198)				this->add(gfCutsceneLayer);
HXLINE(1200)				 ::flixel::group::FlxTypedGroup bfTankCutsceneLayer =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(1201)				this->add(bfTankCutsceneLayer);
HXLINE(1203)				::PlayState_obj::gf->set_alpha(((Float)0.00001));
HXLINE(1205)				::PlayState_obj::boyfriend->set_alpha(((Float)0.00001));
HXLINE(1207)				::flixel::FlxG_obj::camera->set_zoom((::PlayState_obj::Stage->camZoom = ((Float)1.0)));
HXLINE(1209)				::PlayState_obj::dad->set_visible(false);
HXLINE(1211)				this->camHUD->set_visible(false);
HXLINE(1213)				this->inCutscene = true;
HXLINE(1217)				 ::flixel::FlxSprite gfCuts =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,400,130,null());
HXLINE(1218)				 ::flixel::FlxSprite gfCuts1 = gfCuts;
HXDLIN(1218)				gfCuts1->set_frames(::Paths_obj::getSparrowAtlas(HX_("characters/gfTankmen",28,f4,8f,ed),null(),null()));
HXLINE(1219)				gfCuts->animation->addByPrefix(HX_("dance",33,83,83,d4),HX_("GF Dancing at Gunpoint0",84,51,8b,ad),24,null(),null(),null());
HXLINE(1220)				gfCuts->animation->play(HX_("dance",33,83,83,d4),null(),null(),null());
HXLINE(1221)				gfCuts->set_antialiasing(true);
HXLINE(1222)				{
HXLINE(1222)					 ::flixel::FlxSprite _g = gfCuts;
HXDLIN(1222)					_g->set_y((_g->y - ( (Float)(50) )));
            				}
HXLINE(1223)				gfCuts->set_x(( (Float)(150) ));
HXLINE(1224)				gfCuts->set_alpha(((Float)1.00001));
HXLINE(1225)				gfCutsceneLayer->add(gfCuts).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1227)				 ::flixel::FlxSprite gfDemon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,::PlayState_obj::gf->x,::PlayState_obj::gf->y,null());
HXLINE(1228)				 ::flixel::FlxSprite gfDemon1 = gfDemon;
HXDLIN(1228)				gfDemon1->set_frames(::Paths_obj::getSparrowAtlas(HX_("characters/gfDemon",a7,b1,57,52),null(),null()));
HXLINE(1229)				gfDemon->animation->addByPrefix(HX_("dance",33,83,83,d4),HX_("GF Turnin Demon W Effect",2c,8f,db,d7),24,null(),null(),null());
HXLINE(1230)				gfDemon->set_antialiasing(true);
HXLINE(1231)				gfDemon->set_alpha(((Float)0.00001));
HXLINE(1232)				{
HXLINE(1232)					 ::flixel::FlxSprite _g1 = gfDemon;
HXDLIN(1232)					_g1->set_x((_g1->x - ( (Float)(360) )));
            				}
HXLINE(1233)				{
HXLINE(1233)					 ::flixel::FlxSprite _g2 = gfDemon;
HXDLIN(1233)					_g2->set_y((_g2->y - ( (Float)(370) )));
            				}
HXLINE(1234)				gfCutsceneLayer->add(gfDemon).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1236)				 ::flixel::FlxSprite picoKill =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,-220,null());
HXLINE(1237)				 ::flixel::FlxSprite picoKill1 = picoKill;
HXDLIN(1237)				picoKill1->set_frames(::Paths_obj::getSparrowAtlas(HX_("characters/pico_saves_them",1a,02,24,0e),null(),null()));
HXLINE(1238)				picoKill->animation->addByPrefix(HX_("dance",33,83,83,d4),HX_("pico_saves_them idle",15,7a,6a,36),24,null(),null(),null());
HXLINE(1239)				picoKill->set_antialiasing(true);
HXLINE(1240)				picoKill->set_alpha(((Float)0.00001));
HXLINE(1241)				gfCutsceneLayer->add(picoKill).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1243)				 ::flixel::FlxSprite picoSpeaker =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,::PlayState_obj::gf->x,::PlayState_obj::gf->y,null());
HXLINE(1244)				 ::flixel::FlxSprite picoSpeaker1 = picoSpeaker;
HXDLIN(1244)				picoSpeaker1->set_frames(::Paths_obj::getSparrowAtlas(HX_("characters/picoSpeaker",75,ba,55,ad),null(),null()));
HXLINE(1245)				picoSpeaker->animation->addByIndices(HX_("dance",33,83,83,d4),HX_("Pico shoot 1",95,79,46,d7),::Array_obj< int >::fromData( _hx_array_data_46c2835d_34,3),HX_("",00,00,00,00),24,true,null(),null());
HXLINE(1246)				picoSpeaker->set_antialiasing(true);
HXLINE(1247)				picoSpeaker->set_alpha(((Float)0.00001));
HXLINE(1248)				gfCutsceneLayer->add(picoSpeaker).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1250)				 ::flixel::FlxSprite godeffing =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,300,null());
HXLINE(1251)				 ::flixel::FlxSprite godeffing1 = godeffing;
HXDLIN(1251)				godeffing1->set_frames(::Paths_obj::getSparrowAtlas(HX_("TANK_TALK_3",15,97,2b,c7),null(),null()));
HXLINE(1252)				godeffing->animation->addByPrefix(HX_("dance",33,83,83,d4),HX_("TANK_TALK_3 idle",ff,d3,75,58),24,null(),null(),null());
HXLINE(1253)				godeffing->animation->play(HX_("dance",33,83,83,d4),null(),null(),null());
HXLINE(1254)				godeffing->set_antialiasing(true);
HXLINE(1255)				godeffing->set_alpha(((Float)1.00001));
HXLINE(1256)				gfCutsceneLayer->add(godeffing).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1258)				 ::flixel::FlxSprite bf =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,::PlayState_obj::boyfriend->x,::PlayState_obj::boyfriend->y,null());
HXLINE(1259)				 ::flixel::FlxSprite bf1 = bf;
HXDLIN(1259)				bf1->set_frames(::Paths_obj::getSparrowAtlas(HX_("characters/BOYFRIEND",65,2c,9c,1b),null(),null()));
HXLINE(1260)				bf->animation->addByPrefix(HX_("dance",33,83,83,d4),HX_("BF idle dance",03,fa,cc,7f),24,null(),null(),null());
HXLINE(1261)				bf->animation->play(HX_("dance",33,83,83,d4),null(),null(),null());
HXLINE(1262)				bf->set_antialiasing(true);
HXLINE(1263)				bf->set_alpha(((Float)1.00001));
HXLINE(1264)				gfCutsceneLayer->add(bf).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1266)				this->camFollow->setPosition(550,450);
HXLINE(1269)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_3()),null());
HXLINE(1274)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)14.8), ::Dynamic(new _hx_Closure_4(_gthis,gfCutsceneLayer,gfCuts,gfDemon)),null());
HXLINE(1283)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)17.2), ::Dynamic(new _hx_Closure_5(gfCutsceneLayer,gfDemon,bf,picoKill)),null());
HXLINE(1294)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)18.3), ::Dynamic(new _hx_Closure_6()),null());
HXLINE(1298)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)20.1), ::Dynamic(new _hx_Closure_7(_gthis)),null());
HXLINE(1302)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)20.5), ::Dynamic(new _hx_Closure_8(gfCutsceneLayer,picoSpeaker,picoKill)),null());
HXLINE(1310)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)31.4), ::Dynamic(new _hx_Closure_9()),null());
HXLINE(1314)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)35.1), ::Dynamic(new _hx_Closure_10(godeffing,gfCutsceneLayer,picoSpeaker)),null());
HXLINE(1322)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)35.2), ::Dynamic(new _hx_Closure_11(_gthis)),null());
HXLINE(1196)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_2==HX_("thorns",9c,bf,c7,8c)) ){
HXLINE(1075)				this->schoolIntro(doof);
HXDLIN(1075)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_2==HX_("ugh",d6,21,59,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_12, ::PlayState,_gthis) HXARGC(3)
            				void _hx_run(::String idle,int frameNumber,int frameIndex){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1093_create)
HXLINE(1094)					if ((frameNumber == 107)) {
HXLINE(1096)						::PlayState_obj::boyfriend->playAnim(HX_("singUP",6a,52,21,b9),null(),null(),null());
HXLINE(1097)						{
HXLINE(1097)							 ::flixel::FlxObject _g = _gthis->camFollow;
HXDLIN(1097)							_g->set_x((_g->x + 390));
            						}
            					}
HXLINE(1100)					if ((frameNumber == 1)) {
HXLINE(1102)						_gthis->camFollow->set_x(( (Float)(290) ));
HXLINE(1103)						::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("zoom",13,a3,f8,50),(::PlayState_obj::Stage->camZoom = ((Float)1.1)))),2,null());
HXLINE(1105)						 ::flixel::_hx_system::FlxSound sound =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXLINE(1104)						 ::flixel::_hx_system::FlxSound sound1 = sound->loadEmbedded(::Paths_obj::sound(HX_("cuts1",60,ce,59,4e),null()),null(),null(),null());
HXLINE(1106)						sound1->play(null(),null(),null());
HXLINE(1107)						::flixel::FlxG_obj::sound->list->add(sound1).StaticCast<  ::flixel::_hx_system::FlxSound >();
            					}
HXLINE(1110)					if ((frameNumber == 311)) {
HXLINE(1112)						_gthis->camFollow->set_x(( (Float)(450) ));
            					}
HXLINE(1115)					if ((frameNumber == 181)) {
HXLINE(1117)						_gthis->camFollow->set_x(( (Float)(390) ));
            					}
            				}
            				HX_END_LOCAL_FUNC3((void))

            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_13, ::flixel::FlxSprite,wellWell, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run(::String idle){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1123_create)
HXLINE(1124)					_gthis->remove(wellWell,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1125)					::PlayState_obj::dad->set_alpha(( (Float)(1) ));
HXLINE(1126)					::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("zoom",13,a3,f8,50),(::PlayState_obj::Stage->camZoom = ((Float)0.9)))),2,null());
HXLINE(1127)					_gthis->startCountdown();
HXLINE(1128)					if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("hideHud",15,b9,3c,b7),::hx::paccDynamic)) ))) {
HXLINE(1130)						::flixel::tweens::FlxTween_obj::tween(_gthis->scoreTxt, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((::Conductor_obj::stepCrochet * ( (Float)(16) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
HXLINE(1131)						::flixel::tweens::FlxTween_obj::tween(_gthis->iconP1, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((::Conductor_obj::stepCrochet * ( (Float)(16) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
HXLINE(1132)						::flixel::tweens::FlxTween_obj::tween(_gthis->iconP2, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((::Conductor_obj::stepCrochet * ( (Float)(16) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
HXLINE(1133)						::flixel::tweens::FlxTween_obj::tween(_gthis->healthBar, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((::Conductor_obj::stepCrochet * ( (Float)(16) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
HXLINE(1134)						::flixel::tweens::FlxTween_obj::tween(_gthis->healthBarBG, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((::Conductor_obj::stepCrochet * ( (Float)(16) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1077)				::PlayState_obj::dad->set_alpha(( (Float)(0) ));
HXLINE(1078)				this->healthBarBG->set_alpha(( (Float)(0) ));
HXLINE(1079)				this->healthBar->set_alpha(( (Float)(0) ));
HXLINE(1080)				this->iconP1->set_alpha(( (Float)(0) ));
HXLINE(1081)				this->iconP2->set_alpha(( (Float)(0) ));
HXLINE(1082)				this->scoreTxt->set_alpha(( (Float)(0) ));
HXLINE(1084)				 ::flixel::FlxSprite wellWell =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,::PlayState_obj::dad->x,::PlayState_obj::dad->y,null());
HXLINE(1086)				 ::flixel::FlxSprite wellWell1 = wellWell;
HXDLIN(1086)				wellWell1->set_frames(::Paths_obj::getSparrowAtlas(HX_("TANK_TALK_1",13,97,2b,c7),HX_("shared",a5,5e,2b,1d),null()));
HXLINE(1087)				wellWell->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("TANK TALK 1 P1",2e,59,02,09),24,false,null(),null());
HXLINE(1088)				wellWell->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(1089)				wellWell->set_antialiasing(true);
HXLINE(1090)				this->add(wellWell);
HXLINE(1092)				wellWell->animation->callback =  ::Dynamic(new _hx_Closure_12(_gthis));
HXLINE(1122)				wellWell->animation->finishCallback =  ::Dynamic(new _hx_Closure_13(wellWell,_gthis));
HXLINE(1076)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_2==HX_("winter-horrorland",9d,39,f4,1e)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_16, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_15, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_14, ::PlayState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1064_create)
HXLINE(1064)							_gthis->startCountdown();
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1057_create)
HXLINE(1058)						_gthis->camHUD->set_visible(true);
HXLINE(1059)						_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1060)						::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("zoom",13,a3,f8,50),::PlayState_obj::Stage->camZoom)),((Float)2.5), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_14(_gthis)))));
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1048_create)
HXLINE(1049)					_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1050)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1050)					_hx_tmp->play(::Paths_obj::sound(HX_("Lights_Turn_On",5f,e1,29,ad),null()),null(),null(),null(),null(),null());
HXLINE(1051)					_gthis->camFollow->set_y(( (Float)(-2050) ));
HXLINE(1052)					{
HXLINE(1052)						 ::flixel::FlxObject _g = _gthis->camFollow;
HXDLIN(1052)						_g->set_x((_g->x + 200));
            					}
HXLINE(1053)					{
HXLINE(1053)						 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN(1053)						 ::flixel::math::FlxPoint point = _gthis->camFollow->getPosition(null());
HXDLIN(1053)						_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN(1053)						if (point->_weak) {
HXLINE(1053)							point->put();
            						}
            					}
HXLINE(1054)					::flixel::FlxG_obj::camera->set_zoom(((Float)1.5));
HXLINE(1056)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_15(_gthis,blackScreen2)),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1042)				 ::flixel::FlxSprite blackScreen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(1042)				int blackScreen1 = ::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::width * 2)) ));
HXDLIN(1042)				 ::flixel::FlxSprite blackScreen2 = blackScreen->makeGraphic(blackScreen1,::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::height * 2)) )),-16777216,null(),null());
HXLINE(1043)				this->add(blackScreen2);
HXLINE(1044)				blackScreen2->scrollFactor->set(null(),null());
HXLINE(1045)				this->camHUD->set_visible(false);
HXLINE(1047)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_16(_gthis,blackScreen2)),null());
HXLINE(1041)				goto _hx_goto_20;
            			}
            			/* default */{
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer timer){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1334_create)
HXLINE(1334)					_gthis->startCountdown();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1332)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
            			_hx_goto_20:;
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_17, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer timer){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1342_create)
HXLINE(1342)				_gthis->startCountdown();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1340)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_17(_gthis)),null());
            		}
HXLINE(1346)		if (!(::PlayState_obj::loadRep)) {
HXLINE(1347)			::PlayState_obj::rep =  ::Replay_obj::__alloc( HX_CTX ,HX_("na",33,60,00,00));
            		}
HXLINE(1350)		::flixel::FlxG_obj::keys->preventDefaultKeys = ::Array_obj< int >::__new(0);
HXLINE(1351)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->handleInput_dyn(),null(),null(),null());
HXLINE(1352)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->releaseInput_dyn(),null(),null(),null());
HXLINE(1354)		 ::sys::Http http =  ::sys::Http_obj::__alloc( HX_CTX ,HX_("https://raw.githubusercontent.com/Goodbs/RealityEngineOnlineData/main/questsHscript.hx",37,cf,70,3a));
HXLINE(1356)		::Array< ::String > exprss = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_42,1);
HXLINE(1357)		http->onData =  ::Dynamic(new _hx_Closure_18(exprss));
HXLINE(1363)		http->request(null());
HXLINE(1365)		::String expr2 = exprss->__get(0);
HXLINE(1366)		 ::hscript::Parser parser2 =  ::hscript::Parser_obj::__alloc( HX_CTX );
HXLINE(1367)		parser2->allowTypes = true;
HXLINE(1368)		parser2->allowJSON = true;
HXLINE(1369)		parser2->allowMetadata = true;
HXLINE(1370)		this->endHscript2();
HXLINE(1371)		 ::hscript::Expr ast2 = parser2->parseString(expr2,null());
HXLINE(1372)		this->interp2->execute(ast2);
HXLINE(1374)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("specialCharter",92,bf,b5,48),::hx::paccDynamic),HX_("on",1f,61,00,00) )) {
HXLINE(1376)			this->remove(::PlayState_obj::dad,null());
HXLINE(1377)			this->remove(::PlayState_obj::gf,null());
HXLINE(1378)			this->remove(this->RealityEngineWatermark,null());
HXLINE(1379)			this->RealityEngineWatermark->set_text((((((HX_("curBeat ",4a,60,ff,f7) + this->curBeat) + HX_(" curStep ",d4,95,e9,29)) + this->curStep) + HX_(" curSection ",1b,98,59,78)) + this->curSection));
HXLINE(1380)			this->add(this->RealityEngineWatermark);
            		}
HXLINE(1386)		if ((::PlayState_obj::eventeditortesting == true)) {
HXLINE(1388)			::String expr = ::PlayState_obj::eventeditortestscript;
HXLINE(1389)			 ::hscript::Parser parser =  ::hscript::Parser_obj::__alloc( HX_CTX );
HXLINE(1390)			parser->allowTypes = true;
HXLINE(1391)			parser->allowJSON = true;
HXLINE(1392)			parser->allowMetadata = true;
HXLINE(1393)			this->endHscript();
HXLINE(1394)			 ::hscript::Expr ast = parser->parseString(expr,null());
HXLINE(1396)			this->interp->execute(ast);
            		}
            		else {
HXLINE(1399)			::String library = null();
HXDLIN(1399)			if (::sys::FileSystem_obj::exists(::Paths_obj::getPath(( (::String)(((HX_("",00,00,00,00) + ((HX_("data/songs/",f6,d7,93,44) + ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) + HX_("/hscript",24,80,5b,ac))) + HX_(".hx",be,42,23,00))) ),HX_("TEXT",ad,94,ba,37),library))) {
HXLINE(1401)				::String library = null();
HXDLIN(1401)				::String expr = ::sys::io::File_obj::getContent(::Paths_obj::getPath(( (::String)(((HX_("",00,00,00,00) + ((HX_("data/songs/",f6,d7,93,44) + ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) + HX_("/hscript",24,80,5b,ac))) + HX_(".hx",be,42,23,00))) ),HX_("TEXT",ad,94,ba,37),library));
HXLINE(1402)				 ::hscript::Parser parser =  ::hscript::Parser_obj::__alloc( HX_CTX );
HXLINE(1403)				parser->allowTypes = true;
HXLINE(1404)				parser->allowJSON = true;
HXLINE(1405)				parser->allowMetadata = true;
HXLINE(1406)				this->endHscript();
HXLINE(1407)				 ::hscript::Expr ast = parser->parseString(expr,null());
HXLINE(1408)				this->interp->execute(ast);
            			}
            		}
HXLINE(1411)		this->hscriptApply(HX_("create",fc,66,0f,7c),null());
HXLINE(1412)		this->hscriptApply2(HX_("create",fc,66,0f,7c),null());
HXLINE(1414)		this->super::create();
            	}


void PlayState_obj::schoolIntro( ::DialogueBox dialogueBox){
            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,black1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1445_schoolIntro)
HXLINE(1446)			{
HXLINE(1446)				 ::flixel::FlxSprite _g = black1;
HXDLIN(1446)				_g->set_alpha((_g->alpha - ((Float)0.15)));
            			}
HXLINE(1448)			if ((black1->alpha > 0)) {
HXLINE(1450)				tmr->reset(((Float)0.3));
            			}
            			else {
HXLINE(1454)				if (::hx::IsNotNull( dialogueBox )) {
HXLINE(1456)					_gthis->inCutscene = true;
HXLINE(1458)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("thorns",9c,bf,c7,8c) )) {
            						HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer swagTimer){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1463_schoolIntro)
HXLINE(1464)							{
HXLINE(1464)								 ::flixel::FlxSprite _g = senpaiEvil;
HXDLIN(1464)								_g->set_alpha((_g->alpha + ((Float)0.15)));
            							}
HXLINE(1465)							if ((senpaiEvil->alpha < 1)) {
HXLINE(1467)								swagTimer->reset(null());
            							}
            							else {
            								HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(0)
            								void _hx_run(){
            									HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::DialogueBox,dialogueBox) HXARGC(0)
            									void _hx_run(){
            										HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1478_schoolIntro)
HXLINE(1478)										_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            									}
            									HX_END_LOCAL_FUNC0((void))

            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1473_schoolIntro)
HXLINE(1474)									_gthis->remove(senpaiEvil,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1475)									_gthis->remove(red1,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1476)									::flixel::FlxG_obj::camera->fade(-1,((Float)0.01),true, ::Dynamic(new _hx_Closure_0(_gthis,dialogueBox)),true);
            								}
            								HX_END_LOCAL_FUNC0((void))

            								HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            								void _hx_run( ::flixel::util::FlxTimer deadTime){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1483_schoolIntro)
HXLINE(1483)									::flixel::FlxG_obj::camera->fade(-1,((Float)1.6),false,null(),null());
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(1471)								senpaiEvil->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(1472)								 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1472)								_hx_tmp->play(::Paths_obj::sound(HX_("Senpai_Dies",56,a2,b9,ec),null()),1,false,null(),true, ::Dynamic(new _hx_Closure_1(_gthis,dialogueBox,red1,senpaiEvil)));
HXLINE(1481)								 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)3.2), ::Dynamic(new _hx_Closure_2()),null());
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1460)						_gthis->add(senpaiEvil).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1461)						senpaiEvil->set_alpha(( (Float)(0) ));
HXLINE(1462)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_3(_gthis,dialogueBox,red1,senpaiEvil)),null());
            					}
            					else {
HXLINE(1490)						_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
            				else {
HXLINE(1494)					_gthis->startCountdown();
            				}
HXLINE(1496)				_gthis->remove(black1,null()).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1418_schoolIntro)
HXLINE(1417)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1419)		 ::flixel::FlxSprite black =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1419)		 ::flixel::FlxSprite black1 = black->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-16777216,null(),null());
HXLINE(1420)		black1->scrollFactor->set(null(),null());
HXLINE(1421)		this->add(black1);
HXLINE(1423)		 ::flixel::FlxSprite red =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1423)		 ::flixel::FlxSprite red1 = red->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-58575,null(),null());
HXLINE(1424)		red1->scrollFactor->set(null(),null());
HXLINE(1426)		 ::flixel::FlxSprite senpaiEvil =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(1427)		 ::flixel::FlxSprite senpaiEvil1 = senpaiEvil;
HXDLIN(1427)		senpaiEvil1->set_frames(::Paths_obj::getSparrowAtlas(HX_("weeb/senpaiCrazy",d1,d1,90,fa),null(),null()));
HXLINE(1428)		senpaiEvil->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Senpai Pre Explosion",54,71,6e,81),24,false,null(),null());
HXLINE(1429)		 ::flixel::FlxSprite senpaiEvil2 = senpaiEvil;
HXDLIN(1429)		senpaiEvil2->setGraphicSize(::Std_obj::_hx_int((senpaiEvil->get_width() * ( (Float)(6) ))),null());
HXLINE(1430)		senpaiEvil->scrollFactor->set(null(),null());
HXLINE(1431)		senpaiEvil->updateHitbox();
HXLINE(1432)		{
HXLINE(1432)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(1432)			bool _hx_tmp;
HXDLIN(1432)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(1432)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(1432)					_hx_tmp = false;
            				}
            			}
HXDLIN(1432)			if (_hx_tmp) {
HXLINE(1432)				 ::flixel::FlxSprite senpaiEvil1 = senpaiEvil;
HXDLIN(1432)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(1432)				senpaiEvil1->set_x(((( (Float)(_hx_tmp) ) - senpaiEvil->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(1432)			bool _hx_tmp1;
HXDLIN(1432)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(1432)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(1432)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(1432)			if (_hx_tmp1) {
HXLINE(1432)				 ::flixel::FlxSprite senpaiEvil1 = senpaiEvil;
HXDLIN(1432)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(1432)				senpaiEvil1->set_y(((( (Float)(_hx_tmp) ) - senpaiEvil->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(1434)		bool _hx_tmp2;
HXDLIN(1434)		if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("roses",04,6c,64,ed) )) {
HXLINE(1434)			_hx_tmp2 = ::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("thorns",9c,bf,c7,8c) );
            		}
            		else {
HXLINE(1434)			_hx_tmp2 = true;
            		}
HXDLIN(1434)		if (_hx_tmp2) {
HXLINE(1436)			this->remove(black1,null());
HXLINE(1438)			if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("thorns",9c,bf,c7,8c) )) {
HXLINE(1440)				this->add(red1);
            			}
            		}
HXLINE(1444)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_4(_gthis,dialogueBox,red1,black1,senpaiEvil)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,schoolIntro,(void))

void PlayState_obj::startCountdown(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis,::Array< int >,swagCounter) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1530_startCountdown)
HXLINE(1532)			bool _hx_tmp;
HXDLIN(1532)			if (_gthis->allowedToHeadbang) {
HXLINE(1532)				_hx_tmp = (::hx::Mod(swagCounter->__get(0),_gthis->gfSpeed) == 0);
            			}
            			else {
HXLINE(1532)				_hx_tmp = false;
            			}
HXDLIN(1532)			if (_hx_tmp) {
HXLINE(1533)				::PlayState_obj::gf->dance(null(),null());
            			}
HXLINE(1534)			if ((::hx::Mod(swagCounter->__get(0),_gthis->idleBeat) == 0)) {
HXLINE(1536)				bool _hx_tmp;
HXDLIN(1536)				if (_gthis->idleToBeat) {
HXLINE(1536)					_hx_tmp = !(::StringTools_obj::endsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            				}
            				else {
HXLINE(1536)					_hx_tmp = false;
            				}
HXDLIN(1536)				if (_hx_tmp) {
HXLINE(1537)					::PlayState_obj::boyfriend->dance(_gthis->forcedToIdle,null());
            				}
HXLINE(1538)				if (_gthis->idleToBeat) {
HXLINE(1539)					::PlayState_obj::dad->dance(_gthis->forcedToIdle,null());
            				}
            			}
            			else {
HXLINE(1541)				bool _hx_tmp;
HXDLIN(1541)				if ((::PlayState_obj::dad->curCharacter != HX_("spooky",eb,bd,9e,c1))) {
HXLINE(1541)					_hx_tmp = (::PlayState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            				}
            				else {
HXLINE(1541)					_hx_tmp = true;
            				}
HXDLIN(1541)				if (_hx_tmp) {
HXLINE(1542)					::PlayState_obj::dad->dance(null(),null());
            				}
            			}
HXLINE(1544)			 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1545)			introAssets->set(HX_("default",c1,d8,c3,9b),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_50,3));
HXLINE(1546)			introAssets->set(HX_("pixel",86,c6,a3,c2),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_51,3));
HXLINE(1548)			::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(HX_("default",c1,d8,c3,9b))) );
HXLINE(1549)			::String week6Bullshit = null();
HXLINE(1551)			if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1553)				introAlts = ( (::Array< ::String >)(introAssets->get(HX_("pixel",86,c6,a3,c2))) );
HXLINE(1554)				_gthis->altSuffix = HX_("-pixel",39,03,b3,c0);
HXLINE(1555)				week6Bullshit = HX_("week6",c2,95,be,c7);
            			}
HXLINE(1558)			switch((int)(swagCounter->__get(0))){
            				case (int)0: {
HXLINE(1562)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1562)					_hx_tmp->play(::Paths_obj::sound((HX_("intro3",47,54,90,9e) + _gthis->altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)1: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,ready1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1577_startCountdown)
HXLINE(1577)						ready1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1564)					 ::flixel::FlxSprite ready =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1564)					 ::flixel::FlxSprite ready1 = ready->loadGraphic(::Paths_obj::loadImage(introAlts->__get(0),week6Bullshit),null(),null(),null(),null(),null());
HXLINE(1565)					ready1->scrollFactor->set(null(),null());
HXLINE(1566)					ready1->updateHitbox();
HXLINE(1568)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1569)						 ::flixel::FlxSprite ready = ready1;
HXDLIN(1569)						Float _hx_tmp = ready1->get_width();
HXDLIN(1569)						ready->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::CoolUtil_obj::daPixelZoom)),null());
            					}
HXLINE(1571)					{
HXLINE(1571)						 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(1571)						bool _hx_tmp;
HXDLIN(1571)						switch((int)(axes->_hx_getIndex())){
            							case (int)0: case (int)2: {
HXLINE(1571)								_hx_tmp = true;
            							}
            							break;
            							default:{
HXLINE(1571)								_hx_tmp = false;
            							}
            						}
HXDLIN(1571)						if (_hx_tmp) {
HXLINE(1571)							 ::flixel::FlxSprite ready = ready1;
HXDLIN(1571)							int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(1571)							ready->set_x(((( (Float)(_hx_tmp) ) - ready1->get_width()) / ( (Float)(2) )));
            						}
HXDLIN(1571)						bool _hx_tmp1;
HXDLIN(1571)						switch((int)(axes->_hx_getIndex())){
            							case (int)1: case (int)2: {
HXLINE(1571)								_hx_tmp1 = true;
            							}
            							break;
            							default:{
HXLINE(1571)								_hx_tmp1 = false;
            							}
            						}
HXDLIN(1571)						if (_hx_tmp1) {
HXLINE(1571)							 ::flixel::FlxSprite ready = ready1;
HXDLIN(1571)							int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(1571)							ready->set_y(((( (Float)(_hx_tmp) ) - ready1->get_height()) / ( (Float)(2) )));
            						}
            					}
HXLINE(1572)					_gthis->add(ready1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1573)					 ::flixel::FlxSprite ready2 = ready1;
HXDLIN(1573)					 ::flixel::FlxSprite _g = ready1;
HXDLIN(1573)					 ::Dynamic _hx_tmp2 =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1573)					::flixel::tweens::FlxTween_obj::tween(ready2,_hx_tmp2,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(ready1)))));
HXLINE(1580)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN(1580)					_hx_tmp3->play(::Paths_obj::sound((HX_("intro2",46,54,90,9e) + _gthis->altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)2: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,set1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1594_startCountdown)
HXLINE(1594)						set1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1582)					 ::flixel::FlxSprite set =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1582)					 ::flixel::FlxSprite set1 = set->loadGraphic(::Paths_obj::loadImage(introAlts->__get(1),week6Bullshit),null(),null(),null(),null(),null());
HXLINE(1583)					set1->scrollFactor->set(null(),null());
HXLINE(1585)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1586)						 ::flixel::FlxSprite set = set1;
HXDLIN(1586)						Float _hx_tmp = set1->get_width();
HXDLIN(1586)						set->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::CoolUtil_obj::daPixelZoom)),null());
            					}
HXLINE(1588)					{
HXLINE(1588)						 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(1588)						bool _hx_tmp;
HXDLIN(1588)						switch((int)(axes->_hx_getIndex())){
            							case (int)0: case (int)2: {
HXLINE(1588)								_hx_tmp = true;
            							}
            							break;
            							default:{
HXLINE(1588)								_hx_tmp = false;
            							}
            						}
HXDLIN(1588)						if (_hx_tmp) {
HXLINE(1588)							 ::flixel::FlxSprite set = set1;
HXDLIN(1588)							int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(1588)							set->set_x(((( (Float)(_hx_tmp) ) - set1->get_width()) / ( (Float)(2) )));
            						}
HXDLIN(1588)						bool _hx_tmp1;
HXDLIN(1588)						switch((int)(axes->_hx_getIndex())){
            							case (int)1: case (int)2: {
HXLINE(1588)								_hx_tmp1 = true;
            							}
            							break;
            							default:{
HXLINE(1588)								_hx_tmp1 = false;
            							}
            						}
HXDLIN(1588)						if (_hx_tmp1) {
HXLINE(1588)							 ::flixel::FlxSprite set = set1;
HXDLIN(1588)							int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(1588)							set->set_y(((( (Float)(_hx_tmp) ) - set1->get_height()) / ( (Float)(2) )));
            						}
            					}
HXLINE(1589)					_gthis->add(set1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1590)					 ::flixel::FlxSprite set2 = set1;
HXDLIN(1590)					 ::flixel::FlxSprite _g = set1;
HXDLIN(1590)					 ::Dynamic _hx_tmp2 =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1590)					::flixel::tweens::FlxTween_obj::tween(set2,_hx_tmp2,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(set1)))));
HXLINE(1597)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN(1597)					_hx_tmp3->play(::Paths_obj::sound((HX_("intro1",45,54,90,9e) + _gthis->altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)3: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::flixel::FlxSprite,go1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1613_startCountdown)
HXLINE(1613)						go1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1599)					 ::flixel::FlxSprite go =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1599)					 ::flixel::FlxSprite go1 = go->loadGraphic(::Paths_obj::loadImage(introAlts->__get(2),week6Bullshit),null(),null(),null(),null(),null());
HXLINE(1600)					go1->scrollFactor->set(null(),null());
HXLINE(1602)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1603)						 ::flixel::FlxSprite go = go1;
HXDLIN(1603)						Float _hx_tmp = go1->get_width();
HXDLIN(1603)						go->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::CoolUtil_obj::daPixelZoom)),null());
            					}
HXLINE(1605)					go1->updateHitbox();
HXLINE(1607)					{
HXLINE(1607)						 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(1607)						bool _hx_tmp;
HXDLIN(1607)						switch((int)(axes->_hx_getIndex())){
            							case (int)0: case (int)2: {
HXLINE(1607)								_hx_tmp = true;
            							}
            							break;
            							default:{
HXLINE(1607)								_hx_tmp = false;
            							}
            						}
HXDLIN(1607)						if (_hx_tmp) {
HXLINE(1607)							 ::flixel::FlxSprite go = go1;
HXDLIN(1607)							int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(1607)							go->set_x(((( (Float)(_hx_tmp) ) - go1->get_width()) / ( (Float)(2) )));
            						}
HXDLIN(1607)						bool _hx_tmp1;
HXDLIN(1607)						switch((int)(axes->_hx_getIndex())){
            							case (int)1: case (int)2: {
HXLINE(1607)								_hx_tmp1 = true;
            							}
            							break;
            							default:{
HXLINE(1607)								_hx_tmp1 = false;
            							}
            						}
HXDLIN(1607)						if (_hx_tmp1) {
HXLINE(1607)							 ::flixel::FlxSprite go = go1;
HXDLIN(1607)							int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(1607)							go->set_y(((( (Float)(_hx_tmp) ) - go1->get_height()) / ( (Float)(2) )));
            						}
            					}
HXLINE(1608)					_gthis->add(go1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1609)					 ::flixel::FlxSprite go2 = go1;
HXDLIN(1609)					 ::flixel::FlxSprite _g = go1;
HXDLIN(1609)					 ::Dynamic _hx_tmp2 =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1609)					::flixel::tweens::FlxTween_obj::tween(go2,_hx_tmp2,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(go1)))));
HXLINE(1616)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN(1616)					_hx_tmp3->play(::Paths_obj::sound((HX_("introGo",b4,7b,b9,1f) + _gthis->altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            			}
HXLINE(1619)			::Array< int > swagCounter1 = swagCounter;
HXDLIN(1619)			int _hx_tmp1 = 0;
HXDLIN(1619)			swagCounter1[_hx_tmp1] = (swagCounter1->__get(_hx_tmp1) + 1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1510_startCountdown)
HXLINE(1509)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1511)		this->inCutscene = false;
HXLINE(1513)		this->appearStaticArrows();
HXLINE(1517)		this->talking = false;
HXLINE(1518)		this->startedCountdown = true;
HXLINE(1519)		::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE(1520)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(1520)		::Conductor_obj::songPosition = (::Conductor_obj::songPosition - (::Conductor_obj::crochet * ( (Float)(5) )));
HXLINE(1522)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(1523)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1523)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1524)		if (::hx::IsNotNull( this->vocals )) {
HXLINE(1525)			 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(1525)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1527)		::Array< int > swagCounter = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_56,1);
HXLINE(1529)		 ::flixel::util::FlxTimer _hx_tmp1 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(1529)		this->startTimer = _hx_tmp1->start((::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_3(_gthis,swagCounter)),4);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startCountdown,(void))

::String PlayState_obj::getKey(int charCode){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1628_getKey)
HXLINE(1629)		{
HXLINE(1629)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap);
HXDLIN(1629)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1629)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN(1629)				::String key = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN(1629)				int value = ( (int)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE(1631)				if ((charCode == value)) {
HXLINE(1632)					return key;
            				}
            			}
            		}
HXLINE(1634)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getKey,return )

void PlayState_obj::releaseInput( ::openfl::events::KeyboardEvent evt){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1640_releaseInput)
HXLINE(1642)		::String key = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(evt->keyCode);
HXLINE(1644)		::Array< ::String > binds = ::Array_obj< ::String >::__new(4)->init(0, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic)))->init(1, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic)))->init(2, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic)))->init(3, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic)));
HXLINE(1651)		int data = -1;
HXLINE(1653)		switch((int)(evt->keyCode)){
            			case (int)37: {
HXLINE(1656)				data = 0;
            			}
            			break;
            			case (int)38: {
HXLINE(1660)				data = 2;
            			}
            			break;
            			case (int)39: {
HXLINE(1662)				data = 3;
            			}
            			break;
            			case (int)40: {
HXLINE(1658)				data = 1;
            			}
            			break;
            		}
HXLINE(1665)		{
HXLINE(1665)			int _g = 0;
HXDLIN(1665)			int _g1 = binds->length;
HXDLIN(1665)			while((_g < _g1)){
HXLINE(1665)				_g = (_g + 1);
HXDLIN(1665)				int i = (_g - 1);
HXLINE(1667)				::String _hx_tmp = binds->__get(i).toLowerCase();
HXDLIN(1667)				if ((_hx_tmp == key.toLowerCase())) {
HXLINE(1668)					data = i;
            				}
            			}
            		}
HXLINE(1671)		if ((data == -1)) {
HXLINE(1672)			return;
            		}
HXLINE(1674)		this->keys[data] = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,releaseInput,(void))

void PlayState_obj::handleInput( ::openfl::events::KeyboardEvent evt){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1737_handleInput)
HXLINE(1737)			bool _hx_tmp;
HXDLIN(1737)			bool _hx_tmp1;
HXDLIN(1737)			if (daNote->canBeHit) {
HXLINE(1737)				_hx_tmp1 = daNote->mustPress;
            			}
            			else {
HXLINE(1737)				_hx_tmp1 = false;
            			}
HXDLIN(1737)			if (_hx_tmp1) {
HXLINE(1737)				_hx_tmp = !(daNote->wasGoodHit);
            			}
            			else {
HXLINE(1737)				_hx_tmp = false;
            			}
HXDLIN(1737)			if (_hx_tmp) {
HXLINE(1738)				_gthis->closestNotes->push(daNote);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		int _hx_run( ::Note a, ::Note b){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1741_handleInput)
HXLINE(1741)			return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1680_handleInput)
HXLINE(1679)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1682)		bool _hx_tmp;
HXDLIN(1682)		bool _hx_tmp1;
HXDLIN(1682)		if (!(::PlayStateChangeables_obj::botPlay)) {
HXLINE(1682)			_hx_tmp1 = ::PlayState_obj::loadRep;
            		}
            		else {
HXLINE(1682)			_hx_tmp1 = true;
            		}
HXDLIN(1682)		if (!(_hx_tmp1)) {
HXLINE(1682)			_hx_tmp = this->paused;
            		}
            		else {
HXLINE(1682)			_hx_tmp = true;
            		}
HXDLIN(1682)		if (_hx_tmp) {
HXLINE(1683)			return;
            		}
HXLINE(1690)		::String key = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(evt->keyCode);
HXLINE(1692)		::Array< ::String > binds = ::Array_obj< ::String >::__new(4)->init(0, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic)))->init(1, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic)))->init(2, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic)))->init(3, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic)));
HXLINE(1699)		int data = -1;
HXLINE(1701)		switch((int)(evt->keyCode)){
            			case (int)37: {
HXLINE(1704)				data = 0;
            			}
            			break;
            			case (int)38: {
HXLINE(1708)				data = 2;
            			}
            			break;
            			case (int)39: {
HXLINE(1710)				data = 3;
            			}
            			break;
            			case (int)40: {
HXLINE(1706)				data = 1;
            			}
            			break;
            		}
HXLINE(1713)		{
HXLINE(1713)			int _g = 0;
HXDLIN(1713)			int _g1 = binds->length;
HXDLIN(1713)			while((_g < _g1)){
HXLINE(1713)				_g = (_g + 1);
HXDLIN(1713)				int i = (_g - 1);
HXLINE(1715)				::String _hx_tmp = binds->__get(i).toLowerCase();
HXDLIN(1715)				if ((_hx_tmp == key.toLowerCase())) {
HXLINE(1716)					data = i;
            				}
            			}
            		}
HXLINE(1718)		if ((data == -1)) {
HXLINE(1721)			return;
            		}
HXLINE(1723)		if (this->keys->__get(data)) {
HXLINE(1726)			return;
            		}
HXLINE(1729)		this->keys[data] = true;
HXLINE(1731)		 ::Ana ana =  ::Ana_obj::__alloc( HX_CTX ,::Conductor_obj::songPosition,null(),false,HX_("miss",fc,52,5c,48),data);
HXLINE(1733)		this->closestNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1735)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(1741)		this->closestNotes->sort( ::Dynamic(new _hx_Closure_1()));
HXLINE(1743)		::Array< ::Dynamic> dataNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1744)		{
HXLINE(1744)			int _g2 = 0;
HXDLIN(1744)			::Array< ::Dynamic> _g3 = this->closestNotes;
HXDLIN(1744)			while((_g2 < _g3->length)){
HXLINE(1744)				 ::Note i = _g3->__get(_g2).StaticCast<  ::Note >();
HXDLIN(1744)				_g2 = (_g2 + 1);
HXLINE(1745)				bool _hx_tmp;
HXDLIN(1745)				if ((i->noteData == data)) {
HXLINE(1745)					_hx_tmp = !(i->isSustainNote);
            				}
            				else {
HXLINE(1745)					_hx_tmp = false;
            				}
HXDLIN(1745)				if (_hx_tmp) {
HXLINE(1746)					dataNotes->push(i);
            				}
            			}
            		}
HXLINE(1750)		if ((dataNotes->length != 0)) {
HXLINE(1752)			 ::Note coolNote = null();
HXLINE(1754)			{
HXLINE(1754)				int _g = 0;
HXDLIN(1754)				while((_g < dataNotes->length)){
HXLINE(1754)					 ::Note i = dataNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(1754)					_g = (_g + 1);
HXLINE(1756)					coolNote = i;
HXLINE(1757)					goto _hx_goto_63;
            				}
            				_hx_goto_63:;
            			}
HXLINE(1760)			if ((dataNotes->length > 1)) {
HXLINE(1762)				int _g = 0;
HXDLIN(1762)				int _g1 = dataNotes->length;
HXDLIN(1762)				while((_g < _g1)){
HXLINE(1762)					_g = (_g + 1);
HXDLIN(1762)					int i = (_g - 1);
HXLINE(1764)					if ((i == 0)) {
HXLINE(1765)						continue;
            					}
HXLINE(1767)					 ::Note note = dataNotes->__get(i).StaticCast<  ::Note >();
HXLINE(1769)					bool _hx_tmp;
HXDLIN(1769)					bool _hx_tmp1;
HXDLIN(1769)					if (!(note->isSustainNote)) {
HXLINE(1769)						_hx_tmp1 = ((note->strumTime - coolNote->strumTime) < 2);
            					}
            					else {
HXLINE(1769)						_hx_tmp1 = false;
            					}
HXDLIN(1769)					if (_hx_tmp1) {
HXLINE(1769)						_hx_tmp = (note->noteData == data);
            					}
            					else {
HXLINE(1769)						_hx_tmp = false;
            					}
HXDLIN(1769)					if (_hx_tmp) {
HXLINE(1773)						note->kill();
HXLINE(1774)						this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(1775)						note->destroy();
            					}
            				}
            			}
HXLINE(1780)			::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
HXLINE(1781)			this->goodNoteHit(coolNote,null());
HXLINE(1782)			Float noteDiff = -((coolNote->strumTime - ::Conductor_obj::songPosition));
HXLINE(1783)			ana->hit = true;
HXLINE(1784)			ana->hitJudge = ::Ratings_obj::judgeNote(noteDiff);
HXLINE(1785)			ana->nearestNote = ::cpp::VirtualArray_obj::__new(3)->init(0,coolNote->strumTime)->init(1,coolNote->noteData)->init(2,coolNote->sustainLength);
            		}
            		else {
HXLINE(1787)			bool _hx_tmp;
HXDLIN(1787)			if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(1787)				_hx_tmp = this->songStarted;
            			}
            			else {
HXLINE(1787)				_hx_tmp = false;
            			}
HXDLIN(1787)			if (_hx_tmp) {
HXLINE(1789)				this->noteMiss(data,null());
HXLINE(1790)				ana->hit = false;
HXLINE(1791)				ana->hitJudge = HX_("shit",c0,cf,52,4c);
HXLINE(1792)				ana->nearestNote = ::cpp::VirtualArray_obj::__new(0);
HXLINE(1793)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1793)				_hx_tmp->health = (_hx_tmp->health - ((Float)0.20));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,handleInput,(void))

void PlayState_obj::leCoolSongName(::hx::Null< Float >  __o_durationIn,::hx::Null< Float >  __o_durationOut){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0,Float,durationIn, ::flixel::FlxSprite,leBox1, ::flixel::text::FlxText,leSongName) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1818_leCoolSongName)
HXLINE(1819)			::flixel::tweens::FlxTween_obj::tween(leBox1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),-100)),durationIn, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backInOut_dyn())
            				->setFixed(1,HX_("type",ba,f2,08,4d),1)));
HXLINE(1820)			::flixel::tweens::FlxTween_obj::tween(leSongName, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),100)),durationIn, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backInOut_dyn())
            				->setFixed(1,HX_("type",ba,f2,08,4d),1)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis,Float,durationOut, ::flixel::FlxSprite,leBox1, ::flixel::text::FlxText,leSongName) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::flixel::text::FlxText,leSongName) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1828_leCoolSongName)
HXLINE(1828)				_gthis->remove(leSongName,null()).StaticCast<  ::flixel::FlxBasic >();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1823_leCoolSongName)
HXLINE(1824)			::flixel::tweens::FlxTween_obj::tween(leSongName, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),-200)),durationOut, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backInOut_dyn())
            				->setFixed(1,HX_("type",ba,f2,08,4d),1)));
HXLINE(1825)			::flixel::tweens::FlxTween_obj::tween(leBox1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),-550)),durationOut, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backInOut_dyn())
            				->setFixed(1,HX_("type",ba,f2,08,4d),1)));
HXLINE(1826)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_1(_gthis,leSongName)),null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            		Float durationIn = __o_durationIn.Default(1);
            		Float durationOut = __o_durationOut.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1807_leCoolSongName)
HXDLIN(1807)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1808)		 ::flixel::FlxSprite leBox =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-550,300,null());
HXDLIN(1808)		 ::flixel::FlxSprite leBox1 = leBox->loadGraphic(::Paths_obj::loadImage(HX_("songbar",1e,e1,34,aa),null()),null(),null(),null(),null(),null());
HXLINE(1809)		leBox1->scrollFactor->set(null(),null());
HXLINE(1810)		leBox1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1811)		this->add(leBox1);
HXLINE(1812)		 ::flixel::text::FlxText leSongName =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,-200,320,0,( (::String)(::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic)) ),60,null());
HXLINE(1813)		leSongName->scrollFactor->set(null(),null());
HXLINE(1814)		leSongName->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1815)		leSongName->setFormat(HX_("PhantomMuff1.5RealityEngine",8f,cd,de,3f),60,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1816)		this->add(leSongName);
HXLINE(1817)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0(durationIn,leBox1,leSongName)),null());
HXLINE(1822)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(6, ::Dynamic(new _hx_Closure_2(_gthis,durationOut,leBox1,leSongName)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,leCoolSongName,(void))

void PlayState_obj::startSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1836_startSong)
HXLINE(1837)		this->startingSong = false;
HXLINE(1838)		this->songStarted = true;
HXLINE(1839)		this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(1840)		this->lastReportedPlayheadPosition = 0;
HXLINE(1842)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1843)		this->vocals->play(null(),null(),null());
HXLINE(1846)		if (this->allowedToHeadbang) {
HXLINE(1847)			::PlayState_obj::gf->dance(null(),null());
            		}
HXLINE(1848)		bool _hx_tmp;
HXDLIN(1848)		if (this->idleToBeat) {
HXLINE(1848)			_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            		}
            		else {
HXLINE(1848)			_hx_tmp = false;
            		}
HXDLIN(1848)		if (_hx_tmp) {
HXLINE(1849)			::PlayState_obj::boyfriend->dance(this->forcedToIdle,null());
            		}
HXLINE(1850)		bool _hx_tmp1;
HXDLIN(1850)		if (this->idleToBeat) {
HXLINE(1850)			_hx_tmp1 = !(::StringTools_obj::startsWith(::PlayState_obj::dad->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            		}
            		else {
HXLINE(1850)			_hx_tmp1 = false;
            		}
HXDLIN(1850)		if (_hx_tmp1) {
HXLINE(1851)			::PlayState_obj::dad->dance(this->forcedToIdle,null());
            		}
HXLINE(1853)		this->leCoolSongName(1,1);
HXLINE(1855)		::String _hx_switch_0 = this->curSong;
            		if (  (_hx_switch_0==HX_("Blammed",76,2a,51,09)) ||  (_hx_switch_0==HX_("Bopeebo",90,29,16,da)) ||  (_hx_switch_0==HX_("Cocoa",e9,0c,83,dd)) ||  (_hx_switch_0==HX_("Eggnog",81,78,4e,29)) ||  (_hx_switch_0==HX_("Philly Nice",95,67,fc,96)) ){
HXLINE(1858)			this->allowedToCheer = true;
HXDLIN(1858)			goto _hx_goto_72;
            		}
            		/* default */{
HXLINE(1860)			this->allowedToCheer = false;
            		}
            		_hx_goto_72:;
HXLINE(1863)		if (this->useVideo) {
HXLINE(1864)			::GlobalVideo_obj::get()->__Field(HX_("resume",ad,69,84,08),::hx::paccDynamic)();
            		}
HXLINE(1867)		if (this->executeModchart) {
HXLINE(1868)			::PlayState_obj::luaModchart->executeState(HX_("songStart",4d,bc,85,b3),::cpp::VirtualArray_obj::__new(1)->init(0,null()));
            		}
HXLINE(1873)		::String _hx_tmp2 = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(1873)		::String _hx_tmp3 = (_hx_tmp2 + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(1880)		::String _hx_tmp4 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(1873)		::DiscordClient_obj::changePresence(_hx_tmp3,(((_hx_tmp4 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
HXLINE(1888)		::flixel::FlxG_obj::sound->music->set_time(::PlayState_obj::startTime);
HXLINE(1889)		if (::hx::IsNotNull( this->vocals )) {
HXLINE(1890)			this->vocals->set_time(::PlayState_obj::startTime);
            		}
HXLINE(1891)		::Conductor_obj::songPosition = ::PlayState_obj::startTime;
HXLINE(1892)		::PlayState_obj::startTime = ( (Float)(0) );
HXLINE(1918)		{
HXLINE(1919)			::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
HXLINE(1920)			if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE(1921)				::lime::media::openal::AL_obj::sourcef(this->vocals->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
            			}
            		}
HXLINE(1926)		{
HXLINE(1926)			int _g = 0;
HXDLIN(1926)			int _g1 = this->unspawnNotes->length;
HXDLIN(1926)			while((_g < _g1)){
HXLINE(1926)				_g = (_g + 1);
HXDLIN(1926)				int i = (_g - 1);
HXLINE(1927)				if ((this->unspawnNotes->__get(i).StaticCast<  ::Note >()->strumTime < ::PlayState_obj::startTime)) {
HXLINE(1928)					this->unspawnNotes->remove(this->unspawnNotes->__get(i).StaticCast<  ::Note >());
            				}
            			}
            		}
HXLINE(1930)		if (this->needSkip) {
HXLINE(1932)			this->skipActive = true;
HXLINE(1933)			this->skipText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->healthBarBG->x + 80),(this->healthBarBG->y - ( (Float)(110) )),500,null(),null(),null());
HXLINE(1934)			this->skipText->set_text(HX_("Press Space to Skip Intro",59,92,f0,d6));
HXLINE(1935)			this->skipText->set_size(30);
HXLINE(1936)			this->skipText->set_color(-1);
HXLINE(1937)			{
HXLINE(1937)				 ::flixel::text::FlxText _this = this->skipText;
HXDLIN(1937)				_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(1937)				_this->set_borderColor(-16777216);
HXDLIN(1937)				_this->set_borderSize(( (Float)(2) ));
HXDLIN(1937)				_this->set_borderQuality(( (Float)(1) ));
            			}
HXLINE(1938)			this->skipText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1939)			this->skipText->set_alpha(( (Float)(0) ));
HXLINE(1940)			::flixel::tweens::FlxTween_obj::tween(this->skipText, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.2),null());
HXLINE(1941)			this->add(this->skipText);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startSong,(void))

void PlayState_obj::generateSong(::String dataPath){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1948_generateSong)
HXLINE(1951)		 ::Dynamic songData = ::PlayState_obj::SONG;
HXLINE(1952)		::Conductor_obj::changeBPM(( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE(1954)		this->curSong = ( (::String)(songData->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) );
HXLINE(1957)		bool _hx_tmp;
HXDLIN(1957)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1957)			_hx_tmp = !(::PlayState_obj::isSM);
            		}
            		else {
HXLINE(1957)			_hx_tmp = false;
            		}
HXDLIN(1957)		if (_hx_tmp) {
HXLINE(1958)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1958)			::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1958)			::String _hx_switch_0 = songLowercase;
            			if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1958)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1958)				goto _hx_goto_75;
            			}
            			if (  (_hx_switch_0==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1958)				songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1958)				goto _hx_goto_75;
            			}
            			if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1958)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1958)				goto _hx_goto_75;
            			}
            			_hx_goto_75:;
HXDLIN(1958)			::String result = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
HXDLIN(1958)			::String _hx_tmp1;
HXDLIN(1958)			if (::Paths_obj::doesSoundAssetExist(result)) {
HXLINE(1958)				_hx_tmp1 = result;
            			}
            			else {
HXLINE(1958)				_hx_tmp1 = null();
            			}
HXDLIN(1958)			this->vocals = _hx_tmp->loadEmbedded(_hx_tmp1,null(),null(),null());
            		}
            		else {
HXLINE(1960)			this->vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
            		}
HXLINE(1970)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(1972)		if (!(this->paused)) {
HXLINE(1975)			bool _hx_tmp;
HXDLIN(1975)			if (!(::PlayState_obj::isStoryMode)) {
HXLINE(1975)				_hx_tmp = ::PlayState_obj::isSM;
            			}
            			else {
HXLINE(1975)				_hx_tmp = false;
            			}
HXDLIN(1975)			if (_hx_tmp) {
HXLINE(1978)				 ::haxe::io::Bytes bytes = ::sys::io::File_obj::getBytes(((::PlayState_obj::pathToSm + HX_("/",2f,00,00,00)) + ::PlayState_obj::sm->header->MUSIC));
HXLINE(1979)				 ::openfl::media::Sound sound =  ::openfl::media::Sound_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1980)				sound->loadCompressedDataFromByteArray(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytesData(bytes->b),bytes->length);
HXLINE(1981)				::flixel::FlxG_obj::sound->playMusic(sound,null(),null(),null());
            			}
            			else {
HXLINE(1984)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1984)				::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1984)				::String _hx_switch_1 = songLowercase;
            				if (  (_hx_switch_1==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1984)					songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1984)					goto _hx_goto_76;
            				}
            				if (  (_hx_switch_1==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1984)					songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1984)					goto _hx_goto_76;
            				}
            				if (  (_hx_switch_1==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1984)					songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1984)					goto _hx_goto_76;
            				}
            				_hx_goto_76:;
HXDLIN(1984)				_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),1,false,null());
            			}
            		}
HXLINE(1990)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(1992)		bool _hx_tmp1;
HXDLIN(1992)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1992)			_hx_tmp1 = !(::PlayState_obj::isSM);
            		}
            		else {
HXLINE(1992)			_hx_tmp1 = false;
            		}
HXDLIN(1992)		if (_hx_tmp1) {
HXLINE(1993)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this = ::flixel::FlxG_obj::sound;
HXDLIN(1993)			::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1993)			::String _hx_switch_2 = songLowercase;
            			if (  (_hx_switch_2==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1993)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1993)				goto _hx_goto_77;
            			}
            			if (  (_hx_switch_2==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1993)				songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1993)				goto _hx_goto_77;
            			}
            			if (  (_hx_switch_2==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1993)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1993)				goto _hx_goto_77;
            			}
            			_hx_goto_77:;
HXDLIN(1993)			::String result = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
HXDLIN(1993)			::String EmbeddedSound;
HXDLIN(1993)			if (::Paths_obj::doesSoundAssetExist(result)) {
HXLINE(1993)				EmbeddedSound = result;
            			}
            			else {
HXLINE(1993)				EmbeddedSound = null();
            			}
HXDLIN(1993)			bool _hx_tmp;
HXDLIN(1993)			if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE(1993)				_hx_tmp = ::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE(1993)				_hx_tmp = true;
            			}
HXDLIN(1993)			if (_hx_tmp) {
HXLINE(1993)				::openfl::utils::Assets_obj::getSound(EmbeddedSound,true);
            			}
            		}
HXLINE(1994)		if (!(::PlayState_obj::isSM)) {
HXLINE(1995)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this = ::flixel::FlxG_obj::sound;
HXDLIN(1995)			::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1995)			::String _hx_switch_3 = songLowercase;
            			if (  (_hx_switch_3==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1995)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1995)				goto _hx_goto_78;
            			}
            			if (  (_hx_switch_3==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1995)				songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1995)				goto _hx_goto_78;
            			}
            			if (  (_hx_switch_3==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1995)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1995)				goto _hx_goto_78;
            			}
            			_hx_goto_78:;
HXDLIN(1995)			::String EmbeddedSound = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
HXDLIN(1995)			bool _hx_tmp;
HXDLIN(1995)			if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE(1995)				_hx_tmp = ::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE(1995)				_hx_tmp = true;
            			}
HXDLIN(1995)			if (_hx_tmp) {
HXLINE(1995)				::openfl::utils::Assets_obj::getSound(EmbeddedSound,true);
            			}
            		}
HXLINE(1998)		this->songLength = ((::flixel::FlxG_obj::sound->music->_length / ::PlayState_obj::songMultiplier) / ( (Float)(1000) ));
HXLINE(2000)		::Conductor_obj::crochet = ((( (Float)(60) ) / ( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) )) * ( (Float)(1000) ));
HXLINE(2001)		::Conductor_obj::stepCrochet = (::Conductor_obj::crochet / ( (Float)(4) ));
HXLINE(2003)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(2005)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,10,null());
HXDLIN(2005)			::PlayState_obj::songPosBG = _hx_tmp->loadGraphic(::Paths_obj::loadImage(HX_("healthBar",97,8a,92,42),null()),null(),null(),null(),null(),null());
HXLINE(2006)			if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(2007)				::PlayState_obj::songPosBG->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 35));
            			}
HXLINE(2008)			{
HXLINE(2008)				 ::flixel::FlxSprite _this = ::PlayState_obj::songPosBG;
HXDLIN(2008)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN(2008)				if (::hx::IsNull( axes )) {
HXLINE(2008)					axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            				}
HXDLIN(2008)				bool _hx_tmp1;
HXDLIN(2008)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE(2008)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE(2008)						_hx_tmp1 = false;
            					}
            				}
HXDLIN(2008)				if (_hx_tmp1) {
HXLINE(2008)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(2008)					_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(2008)				bool _hx_tmp2;
HXDLIN(2008)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE(2008)						_hx_tmp2 = true;
            					}
            					break;
            					default:{
HXLINE(2008)						_hx_tmp2 = false;
            					}
            				}
HXDLIN(2008)				if (_hx_tmp2) {
HXLINE(2008)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(2008)					_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE(2009)			::PlayState_obj::songPosBG->scrollFactor->set(null(),null());
HXLINE(2011)			Float _hx_tmp3 = (( (Float)(640) ) - (( (Float)(::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_width() - ( (Float)(100) )))) ) / ( (Float)(2) )));
HXDLIN(2011)			Float _hx_tmp4 = (::PlayState_obj::songPosBG->y + 4);
HXDLIN(2011)			int _hx_tmp5 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_width() - ( (Float)(100) )));
HXLINE(2012)			int _hx_tmp6 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_height() + 6));
HXLINE(2011)			::PlayState_obj::songPosBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_tmp4,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp5,_hx_tmp6,::hx::ObjectPtr<OBJ_>(this),HX_("songPositionBar",d5,62,6e,a6),0,this->songLength,null());
HXLINE(2013)			::PlayState_obj::songPosBar->scrollFactor->set(null(),null());
HXLINE(2014)			 ::flixel::ui::FlxBar _hx_tmp7 = ::PlayState_obj::songPosBar;
HXDLIN(2014)			int Alpha = 255;
HXDLIN(2014)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(2014)			{
HXLINE(2014)				color = (color & -16711681);
HXDLIN(2014)				color = (color | 0);
            			}
HXDLIN(2014)			{
HXLINE(2014)				color = (color & -65281);
HXDLIN(2014)				color = (color | 65280);
            			}
HXDLIN(2014)			{
HXLINE(2014)				color = (color & -256);
HXDLIN(2014)				color = (color | 128);
            			}
HXDLIN(2014)			{
HXLINE(2014)				color = (color & 16777215);
HXDLIN(2014)				int color1;
HXDLIN(2014)				if ((Alpha > 255)) {
HXLINE(2014)					color1 = 255;
            				}
            				else {
HXLINE(2014)					if ((Alpha < 0)) {
HXLINE(2014)						color1 = 0;
            					}
            					else {
HXLINE(2014)						color1 = Alpha;
            					}
            				}
HXDLIN(2014)				color = (color | (color1 << 24));
            			}
HXDLIN(2014)			_hx_tmp7->createFilledBar(-16777216,color,null(),null());
HXLINE(2015)			this->add(::PlayState_obj::songPosBar);
HXLINE(2017)			 ::flixel::FlxSprite _hx_tmp8 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,::PlayState_obj::songPosBar->x,::PlayState_obj::songPosBar->y,null());
HXDLIN(2017)			int _hx_tmp9 = ::Math_obj::floor(::PlayState_obj::songPosBar->get_width());
HXDLIN(2017)			this->bar = _hx_tmp8->makeGraphic(_hx_tmp9,::Math_obj::floor(::PlayState_obj::songPosBar->get_height()),0,null(),null());
HXLINE(2019)			this->add(this->bar);
HXLINE(2021)			 ::flixel::FlxSprite _hx_tmp10 = this->bar;
HXDLIN(2021)			Float _hx_tmp11 = ::PlayState_obj::songPosBar->get_width();
HXDLIN(2021)			Float _hx_tmp12 = ::PlayState_obj::songPosBar->get_height();
HXDLIN(2021)			::flixel::util::FlxSpriteUtil_obj::drawRect(_hx_tmp10,( (Float)(0) ),( (Float)(0) ),_hx_tmp11,_hx_tmp12,0, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("color",63,71,5c,4a),-16777216)
            				->setFixed(1,HX_("thickness",74,f1,66,5a),4)),null());
HXLINE(2023)			 ::flixel::FlxSprite _hx_tmp13 = ::PlayState_obj::songPosBG;
HXDLIN(2023)			_hx_tmp13->set_width(::PlayState_obj::songPosBar->get_width());
HXLINE(2025)			Float _hx_tmp14 = ::PlayState_obj::songPosBG->x;
HXDLIN(2025)			Float _hx_tmp15 = (_hx_tmp14 + (::PlayState_obj::songPosBG->get_width() / ( (Float)(2) )));
HXDLIN(2025)			this->songName =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(_hx_tmp15 - ( (Float)((( (::String)(::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic)) ).length * 5)) )),(::PlayState_obj::songPosBG->y - ( (Float)(15) )),0,( (::String)(::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic)) ),16,null());
HXLINE(2026)			this->songName->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("muffengineReality.ttf",be,dc,c5,aa)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(2027)			this->songName->scrollFactor->set(null(),null());
HXLINE(2029)			 ::flixel::text::FlxText _hx_tmp16 = this->songName;
HXDLIN(2029)			::String _hx_tmp17 = ( (::String)((::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic) + HX_(" (",08,1c,00,00))) );
HXDLIN(2029)			_hx_tmp16->set_text(((_hx_tmp17 + ::flixel::util::FlxStringUtil_obj::formatTime(this->songLength,false)) + HX_(")",29,00,00,00)));
HXLINE(2030)			 ::flixel::text::FlxText _hx_tmp18 = this->songName;
HXDLIN(2030)			Float _hx_tmp19 = ::PlayState_obj::songPosBG->y;
HXDLIN(2030)			_hx_tmp18->set_y((_hx_tmp19 + (::PlayState_obj::songPosBG->get_height() / ( (Float)(3) ))));
HXLINE(2032)			this->add(this->songName);
HXLINE(2034)			{
HXLINE(2034)				 ::flixel::text::FlxText _this1 = this->songName;
HXDLIN(2034)				 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN(2034)				if (::hx::IsNull( axes1 )) {
HXLINE(2034)					axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
            				}
HXDLIN(2034)				bool _hx_tmp20;
HXDLIN(2034)				switch((int)(axes1->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE(2034)						_hx_tmp20 = true;
            					}
            					break;
            					default:{
HXLINE(2034)						_hx_tmp20 = false;
            					}
            				}
HXDLIN(2034)				if (_hx_tmp20) {
HXLINE(2034)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(2034)					_this1->set_x(((( (Float)(_hx_tmp) ) - _this1->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(2034)				bool _hx_tmp21;
HXDLIN(2034)				switch((int)(axes1->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE(2034)						_hx_tmp21 = true;
            					}
            					break;
            					default:{
HXLINE(2034)						_hx_tmp21 = false;
            					}
            				}
HXDLIN(2034)				if (_hx_tmp21) {
HXLINE(2034)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(2034)					_this1->set_y(((( (Float)(_hx_tmp) ) - _this1->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE(2036)			::PlayState_obj::songPosBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2037)			this->bar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2038)			::PlayState_obj::songPosBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(2039)			this->songName->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(2042)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(2043)		this->add(this->notes);
HXLINE(2045)		::Array< ::Dynamic> noteData = ( (::Array< ::Dynamic>)(songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE(2050)		int playerCounter = 0;
HXLINE(2052)		int daBeats = 0;
HXLINE(2054)		{
HXLINE(2054)			int _g = 0;
HXDLIN(2054)			while((_g < noteData->length)){
HXLINE(2054)				 ::Dynamic section = noteData->__get(_g);
HXDLIN(2054)				_g = (_g + 1);
HXLINE(2056)				int coolSection = ::Std_obj::_hx_int((( (Float)(section->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) / ( (Float)(4) )));
HXLINE(2058)				{
HXLINE(2058)					int _g1 = 0;
HXDLIN(2058)					::Array< ::Dynamic> _g2 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2058)					while((_g1 < _g2->length)){
HXLINE(2058)						::cpp::VirtualArray songNotes = ::cpp::VirtualArray( _g2->__get(_g1));
HXDLIN(2058)						_g1 = (_g1 + 1);
HXLINE(2060)						Float daStrumTime = (( (Float)(songNotes->__get(0)) ) / ::PlayState_obj::songMultiplier);
HXLINE(2061)						if ((daStrumTime < 0)) {
HXLINE(2062)							daStrumTime = ( (Float)(0) );
            						}
HXLINE(2063)						int daNoteData = ::Std_obj::_hx_int(::hx::Mod(songNotes->__get(1),4));
HXLINE(2065)						bool gottaHitNote = true;
HXLINE(2067)						bool _hx_tmp;
HXDLIN(2067)						if (::hx::IsGreater( songNotes->__get(1),3 )) {
HXLINE(2067)							_hx_tmp = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
            						}
            						else {
HXLINE(2067)							_hx_tmp = false;
            						}
HXDLIN(2067)						if (_hx_tmp) {
HXLINE(2068)							gottaHitNote = false;
            						}
            						else {
HXLINE(2069)							bool _hx_tmp;
HXDLIN(2069)							if (::hx::IsLess( songNotes->__get(1),4 )) {
HXLINE(2069)								_hx_tmp = !(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            							}
            							else {
HXLINE(2069)								_hx_tmp = false;
            							}
HXDLIN(2069)							if (_hx_tmp) {
HXLINE(2070)								gottaHitNote = false;
            							}
            						}
HXLINE(2072)						 ::Note oldNote;
HXLINE(2073)						if ((this->unspawnNotes->length > 0)) {
HXLINE(2074)							oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
            						}
            						else {
HXLINE(2076)							oldNote = null();
            						}
HXLINE(2078)						 ::Note swagNote =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,daNoteData,oldNote,false,false,false,songNotes->__get(4));
HXLINE(2080)						bool _hx_tmp1;
HXDLIN(2080)						if (!(gottaHitNote)) {
HXLINE(2080)							_hx_tmp1 = ::PlayStateChangeables_obj::Optimize;
            						}
            						else {
HXLINE(2080)							_hx_tmp1 = false;
            						}
HXDLIN(2080)						if (_hx_tmp1) {
HXLINE(2081)							continue;
            						}
HXLINE(2083)						swagNote->sustainLength = ::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime((( (Float)(songNotes->__get(2)) ) / ::PlayState_obj::songMultiplier)));
HXLINE(2084)						swagNote->scrollFactor->set(0,0);
HXLINE(2086)						Float susLength = swagNote->sustainLength;
HXLINE(2088)						susLength = (susLength / ::Conductor_obj::stepCrochet);
HXLINE(2089)						this->unspawnNotes->push(swagNote);
HXLINE(2091)						bool _hx_tmp2;
HXDLIN(2091)						bool _hx_tmp3;
HXDLIN(2091)						if (!(( (bool)(songNotes->__get(3)) ))) {
HXLINE(2092)							bool _hx_tmp;
HXDLIN(2092)							if (!(( (bool)(section->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ))) {
HXLINE(2092)								_hx_tmp = ( (bool)(section->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2092)								_hx_tmp = true;
            							}
HXDLIN(2092)							if (_hx_tmp) {
HXLINE(2091)								_hx_tmp3 = !(gottaHitNote);
            							}
            							else {
HXLINE(2091)								_hx_tmp3 = false;
            							}
            						}
            						else {
HXLINE(2091)							_hx_tmp3 = true;
            						}
HXDLIN(2091)						if (!(_hx_tmp3)) {
HXLINE(2093)							if (( (bool)(section->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) )) {
HXLINE(2091)								_hx_tmp2 = gottaHitNote;
            							}
            							else {
HXLINE(2091)								_hx_tmp2 = false;
            							}
            						}
            						else {
HXLINE(2091)							_hx_tmp2 = true;
            						}
HXDLIN(2091)						swagNote->isAlt = _hx_tmp2;
HXLINE(2095)						if ((susLength > 0)) {
HXLINE(2096)							swagNote->isParent = true;
            						}
HXLINE(2098)						int type = 0;
HXLINE(2100)						{
HXLINE(2100)							int _g = 0;
HXDLIN(2100)							int _g3 = ::Math_obj::floor(susLength);
HXDLIN(2100)							while((_g < _g3)){
HXLINE(2100)								_g = (_g + 1);
HXDLIN(2100)								int susNote = (_g - 1);
HXLINE(2102)								oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
HXLINE(2104)								 ::Note sustainNote =  ::Note_obj::__alloc( HX_CTX ,((daStrumTime + (::Conductor_obj::stepCrochet * ( (Float)(susNote) ))) + ::Conductor_obj::stepCrochet),daNoteData,oldNote,true,null(),null(),null());
HXLINE(2105)								sustainNote->scrollFactor->set(null(),null());
HXLINE(2106)								this->unspawnNotes->push(sustainNote);
HXLINE(2107)								bool _hx_tmp;
HXDLIN(2107)								bool _hx_tmp1;
HXDLIN(2107)								if (!(( (bool)(songNotes->__get(3)) ))) {
HXLINE(2108)									bool _hx_tmp;
HXDLIN(2108)									if (!(( (bool)(section->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ))) {
HXLINE(2108)										_hx_tmp = ( (bool)(section->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) );
            									}
            									else {
HXLINE(2108)										_hx_tmp = true;
            									}
HXDLIN(2108)									if (_hx_tmp) {
HXLINE(2107)										_hx_tmp1 = !(gottaHitNote);
            									}
            									else {
HXLINE(2107)										_hx_tmp1 = false;
            									}
            								}
            								else {
HXLINE(2107)									_hx_tmp1 = true;
            								}
HXDLIN(2107)								if (!(_hx_tmp1)) {
HXLINE(2109)									if (( (bool)(section->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) )) {
HXLINE(2107)										_hx_tmp = gottaHitNote;
            									}
            									else {
HXLINE(2107)										_hx_tmp = false;
            									}
            								}
            								else {
HXLINE(2107)									_hx_tmp = true;
            								}
HXDLIN(2107)								sustainNote->isAlt = _hx_tmp;
HXLINE(2111)								sustainNote->mustPress = gottaHitNote;
HXLINE(2113)								if (sustainNote->mustPress) {
HXLINE(2115)									 ::Note _g = sustainNote;
HXDLIN(2115)									_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            								}
HXLINE(2118)								sustainNote->parent = swagNote;
HXLINE(2119)								swagNote->children->push(sustainNote);
HXLINE(2120)								sustainNote->spotInLine = type;
HXLINE(2121)								type = (type + 1);
            							}
            						}
HXLINE(2124)						swagNote->mustPress = gottaHitNote;
HXLINE(2126)						if (swagNote->mustPress) {
HXLINE(2128)							 ::Note _g = swagNote;
HXDLIN(2128)							_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            					}
            				}
HXLINE(2131)				daBeats = (daBeats + 1);
            			}
            		}
HXLINE(2137)		this->unspawnNotes->sort(this->sortByShit_dyn());
HXLINE(2139)		this->generatedMusic = true;
HXLINE(2141)		::Debug_obj::logTrace(HX_("whats the fuckin shit",64,fd,73,76),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2141,HX_("PlayState",5d,83,c2,46),HX_("generateSong",aa,ed,2b,1f)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateSong,(void))

int PlayState_obj::sortByShit( ::Note Obj1, ::Note Obj2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2146_sortByShit)
HXDLIN(2146)		Float Value1 = Obj1->strumTime;
HXDLIN(2146)		Float Value2 = Obj2->strumTime;
HXDLIN(2146)		int result = 0;
HXDLIN(2146)		if ((Value1 < Value2)) {
HXDLIN(2146)			result = -1;
            		}
            		else {
HXDLIN(2146)			if ((Value1 > Value2)) {
HXDLIN(2146)				result = 1;
            			}
            		}
HXDLIN(2146)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByShit,return )

void PlayState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2151_generateStaticArrows)
HXDLIN(2151)		int _g = 0;
HXDLIN(2151)		while((_g < 4)){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite spr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2251_generateStaticArrows)
HXLINE(2251)				spr->centerOffsets(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXDLIN(2151)			_g = (_g + 1);
HXDLIN(2151)			int i = (_g - 1);
HXLINE(2154)			 ::StaticArrow babyArrow =  ::StaticArrow_obj::__alloc( HX_CTX ,( (Float)(-10) ),this->strumLine->y);
HXLINE(2157)			::String noteTypeCheck = HX_("normal",27,72,69,30);
HXLINE(2159)			bool _hx_tmp;
HXDLIN(2159)			if (::PlayStateChangeables_obj::Optimize) {
HXLINE(2159)				_hx_tmp = (player == 0);
            			}
            			else {
HXLINE(2159)				_hx_tmp = false;
            			}
HXDLIN(2159)			if (_hx_tmp) {
HXLINE(2160)				continue;
            			}
HXLINE(2162)			bool _hx_tmp1;
HXDLIN(2162)			if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic) )) {
HXLINE(2162)				_hx_tmp1 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("overrideNoteskins",38,86,30,16),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(2162)				_hx_tmp1 = false;
            			}
HXDLIN(2162)			if (_hx_tmp1) {
HXLINE(2164)				if ((::PlayState_obj::storyWeek == 6)) {
HXLINE(2167)					noteTypeCheck = HX_("pixel",86,c6,a3,c2);
            				}
            			}
            			else {
HXLINE(2172)				noteTypeCheck = ( (::String)(::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic)) );
            			}
HXLINE(2175)			if ((noteTypeCheck == HX_("pixel",86,c6,a3,c2))) {
HXLINE(2178)				babyArrow->loadGraphic(::PlayState_obj::noteskinPixelSprite,true,17,17,null(),null());
HXLINE(2179)				babyArrow->animation->add(HX_("green",c3,0e,ed,99),::Array_obj< int >::fromData( _hx_array_data_46c2835d_87,1),null(),null(),null(),null());
HXLINE(2180)				babyArrow->animation->add(HX_("red",51,d9,56,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_88,1),null(),null(),null(),null());
HXLINE(2181)				babyArrow->animation->add(HX_("blue",9a,42,19,41),::Array_obj< int >::fromData( _hx_array_data_46c2835d_89,1),null(),null(),null(),null());
HXLINE(2182)				babyArrow->animation->add(HX_("purplel",b0,7e,2d,e7),::Array_obj< int >::fromData( _hx_array_data_46c2835d_90,1),null(),null(),null(),null());
HXLINE(2184)				Float _hx_tmp = babyArrow->get_width();
HXDLIN(2184)				babyArrow->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::CoolUtil_obj::daPixelZoom)),null());
HXLINE(2185)				babyArrow->updateHitbox();
HXLINE(2186)				babyArrow->set_antialiasing(false);
HXLINE(2188)				{
HXLINE(2188)					 ::StaticArrow _g = babyArrow;
HXDLIN(2188)					_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(i) ))));
            				}
HXLINE(2189)				babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::__new(1)->init(0,i),null(),null(),null(),null());
HXLINE(2190)				babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::__new(2)->init(0,(4 + i))->init(1,(8 + i)),12,false,null(),null());
HXLINE(2191)				babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::__new(2)->init(0,(12 + i))->init(1,(16 + i)),24,false,null(),null());
HXLINE(2193)				{
HXLINE(2195)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 0),::Array_obj< int >::fromData( _hx_array_data_46c2835d_91,2),24,false,null(),null());
HXDLIN(2195)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 1),::Array_obj< int >::fromData( _hx_array_data_46c2835d_92,2),24,false,null(),null());
HXDLIN(2195)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 2),::Array_obj< int >::fromData( _hx_array_data_46c2835d_93,2),24,false,null(),null());
HXDLIN(2195)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 3),::Array_obj< int >::fromData( _hx_array_data_46c2835d_94,2),24,false,null(),null());
            				}
            			}
            			else {
HXLINE(2199)				babyArrow->set_frames(::PlayState_obj::noteskinSprite);
HXLINE(2200)				::Debug_obj::logTrace(babyArrow->frames,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2200,HX_("PlayState",5d,83,c2,46),HX_("generateStaticArrows",ad,44,90,42)));
HXLINE(2201)				{
HXLINE(2202)					{
HXLINE(2203)						babyArrow->animation->addByPrefix(this->dataColor->__get(0),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(0)),null(),null(),null(),null());
HXLINE(2204)						 ::flixel::animation::FlxAnimationController babyArrow1 = babyArrow->animation;
HXDLIN(2204)						babyArrow1->addByPrefix((HX_("dirCon",f5,88,50,bc) + 0),(this->dataSuffix->__get(0).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
HXLINE(2202)					{
HXLINE(2203)						babyArrow->animation->addByPrefix(this->dataColor->__get(1),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(1)),null(),null(),null(),null());
HXLINE(2204)						 ::flixel::animation::FlxAnimationController babyArrow2 = babyArrow->animation;
HXDLIN(2204)						babyArrow2->addByPrefix((HX_("dirCon",f5,88,50,bc) + 1),(this->dataSuffix->__get(1).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
HXLINE(2202)					{
HXLINE(2203)						babyArrow->animation->addByPrefix(this->dataColor->__get(2),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(2)),null(),null(),null(),null());
HXLINE(2204)						 ::flixel::animation::FlxAnimationController babyArrow3 = babyArrow->animation;
HXDLIN(2204)						babyArrow3->addByPrefix((HX_("dirCon",f5,88,50,bc) + 2),(this->dataSuffix->__get(2).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
HXLINE(2202)					{
HXLINE(2203)						babyArrow->animation->addByPrefix(this->dataColor->__get(3),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(3)),null(),null(),null(),null());
HXLINE(2204)						 ::flixel::animation::FlxAnimationController babyArrow4 = babyArrow->animation;
HXDLIN(2204)						babyArrow4->addByPrefix((HX_("dirCon",f5,88,50,bc) + 3),(this->dataSuffix->__get(3).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
            				}
HXLINE(2207)				::String lowerDir = this->dataSuffix->__get(i).toLowerCase();
HXLINE(2209)				babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(i)),null(),null(),null(),null());
HXLINE(2210)				babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),(lowerDir + HX_(" press",63,df,f3,93)),24,false,null(),null());
HXLINE(2211)				babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),(lowerDir + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
HXLINE(2213)				{
HXLINE(2213)					 ::StaticArrow _g = babyArrow;
HXDLIN(2213)					_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(i) ))));
            				}
HXLINE(2215)				babyArrow->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(2216)				babyArrow->setGraphicSize(::Std_obj::_hx_int((babyArrow->get_width() * ((Float)0.7))),null());
            			}
HXLINE(2219)			babyArrow->updateHitbox();
HXLINE(2220)			babyArrow->scrollFactor->set(null(),null());
HXLINE(2222)			babyArrow->set_alpha(( (Float)(0) ));
HXLINE(2223)			if (!(::PlayState_obj::isStoryMode)) {
HXLINE(2225)				{
HXLINE(2225)					 ::StaticArrow _g = babyArrow;
HXDLIN(2225)					_g->set_y((_g->y - ( (Float)(10) )));
            				}
HXLINE(2227)				bool _hx_tmp;
HXDLIN(2227)				bool _hx_tmp1;
HXDLIN(2227)				if (!(!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) )))) {
HXLINE(2227)					_hx_tmp1 = this->executeModchart;
            				}
            				else {
HXLINE(2227)					_hx_tmp1 = true;
            				}
HXDLIN(2227)				if (!(_hx_tmp1)) {
HXLINE(2227)					_hx_tmp = (player == 1);
            				}
            				else {
HXLINE(2227)					_hx_tmp = true;
            				}
HXDLIN(2227)				if (_hx_tmp) {
HXLINE(2228)					::flixel::tweens::FlxTween_obj::tween(babyArrow, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),(babyArrow->y + 10))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),1)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (((Float)0.2) * ( (Float)(i) ))))
            						->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
            				}
            			}
HXLINE(2231)			babyArrow->ID = i;
HXLINE(2233)			switch((int)(player)){
            				case (int)0: {
HXLINE(2236)					{
HXLINE(2236)						 ::StaticArrow _g = babyArrow;
HXDLIN(2236)						_g->set_x((_g->x + 20));
            					}
HXLINE(2237)					::PlayState_obj::cpuStrums->add(babyArrow).StaticCast<  ::StaticArrow >();
            				}
            				break;
            				case (int)1: {
HXLINE(2239)					::PlayState_obj::playerStrums->add(babyArrow).StaticCast<  ::StaticArrow >();
            				}
            				break;
            			}
HXLINE(2242)			babyArrow->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE(2243)			{
HXLINE(2243)				 ::StaticArrow _g1 = babyArrow;
HXDLIN(2243)				_g1->set_x((_g1->x + 110));
            			}
HXLINE(2244)			{
HXLINE(2244)				 ::StaticArrow _g2 = babyArrow;
HXDLIN(2244)				_g2->set_x((_g2->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) * ( (Float)(player) ))));
            			}
HXLINE(2246)			bool _hx_tmp2;
HXDLIN(2246)			if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE(2246)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) )) {
HXLINE(2246)					_hx_tmp2 = !(this->executeModchart);
            				}
            				else {
HXLINE(2246)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE(2246)				_hx_tmp2 = true;
            			}
HXDLIN(2246)			if (_hx_tmp2) {
HXLINE(2247)				 ::StaticArrow _g = babyArrow;
HXDLIN(2247)				_g->set_x((_g->x - ( (Float)(320) )));
            			}
HXLINE(2249)			::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE(2254)			::PlayState_obj::strumLineNotes->add(babyArrow).StaticCast<  ::StaticArrow >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateStaticArrows,(void))

void PlayState_obj::appearStaticArrows(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis,::Array< int >,index) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite babyArrow){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2262_appearStaticArrows)
HXLINE(2263)			bool _hx_tmp;
HXDLIN(2263)			bool _hx_tmp1;
HXDLIN(2263)			if (::PlayState_obj::isStoryMode) {
HXLINE(2263)				_hx_tmp1 = !(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(2263)				_hx_tmp1 = false;
            			}
HXDLIN(2263)			if (!(_hx_tmp1)) {
HXLINE(2263)				_hx_tmp = _gthis->executeModchart;
            			}
            			else {
HXLINE(2263)				_hx_tmp = true;
            			}
HXDLIN(2263)			if (_hx_tmp) {
HXLINE(2264)				babyArrow->set_alpha(( (Float)(1) ));
            			}
HXLINE(2265)			bool _hx_tmp2;
HXDLIN(2265)			if ((index->__get(0) > 3)) {
HXLINE(2265)				_hx_tmp2 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(2265)				_hx_tmp2 = false;
            			}
HXDLIN(2265)			if (_hx_tmp2) {
HXLINE(2266)				babyArrow->set_alpha(( (Float)(1) ));
            			}
HXLINE(2267)			index[0]++;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2259_appearStaticArrows)
HXLINE(2258)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2260)		::Array< int > index = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_97,1);
HXLINE(2261)		::PlayState_obj::strumLineNotes->forEach( ::Dynamic(new _hx_Closure_0(_gthis,index)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,appearStaticArrows,(void))

void PlayState_obj::tweenCamIn(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2273_tweenCamIn)
HXDLIN(2273)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("zoom",13,a3,f8,50),((Float)1.3))),((::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,tweenCamIn,(void))

void PlayState_obj::openSubState( ::flixel::FlxSubState SubState){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2277_openSubState)
HXLINE(2278)		if (this->paused) {
HXLINE(2280)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(2282)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(2283)				if (::hx::IsNotNull( this->vocals )) {
HXLINE(2284)					if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE(2285)						this->vocals->pause();
            					}
            				}
            			}
HXLINE(2289)			::String _hx_tmp = ( (::String)(((((HX_("PAUSED on ",af,49,21,f3) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2289)			::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(2295)			::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(2289)			::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
HXLINE(2302)			if (!(this->startTimer->finished)) {
HXLINE(2303)				this->startTimer->active = false;
            			}
            		}
HXLINE(2306)		this->super::openSubState(SubState);
            	}


void PlayState_obj::closeSubState(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2310_closeSubState)
HXLINE(2311)		if (::PauseSubState_obj::goToOptions) {
HXLINE(2313)			::Debug_obj::logTrace(HX_("pause thingyt",1f,4a,55,3f),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2313,HX_("PlayState",5d,83,c2,46),HX_("closeSubState",49,18,32,04)));
HXLINE(2314)			if (::PauseSubState_obj::goBack) {
HXLINE(2316)				::Debug_obj::logTrace(HX_("pause thingyt",1f,4a,55,3f),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2316,HX_("PlayState",5d,83,c2,46),HX_("closeSubState",49,18,32,04)));
HXLINE(2317)				::PauseSubState_obj::goToOptions = false;
HXLINE(2318)				::PauseSubState_obj::goBack = false;
HXLINE(2319)				this->openSubState( ::PauseSubState_obj::__alloc( HX_CTX ));
            			}
            			else {
HXLINE(2322)				this->openSubState( ::OptionsMenu_obj::__alloc( HX_CTX ,true));
            			}
            		}
            		else {
HXLINE(2324)			if (this->paused) {
HXLINE(2326)				bool _hx_tmp;
HXDLIN(2326)				if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(2326)					_hx_tmp = !(this->startingSong);
            				}
            				else {
HXLINE(2326)					_hx_tmp = false;
            				}
HXDLIN(2326)				if (_hx_tmp) {
HXLINE(2328)					this->resyncVocals();
            				}
HXLINE(2331)				if (!(this->startTimer->finished)) {
HXLINE(2332)					this->startTimer->active = true;
            				}
HXLINE(2333)				this->paused = false;
HXLINE(2336)				if (this->startTimer->finished) {
HXLINE(2338)					::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2338)					::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(2345)					::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(2338)					::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,true,(this->songLength - ::Conductor_obj::songPosition));
            				}
            				else {
HXLINE(2356)					::String _hx_tmp = this->detailsText;
HXDLIN(2356)					::String _hx_tmp1 = ( (::String)((((::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2356)					::String _hx_tmp2 = (_hx_tmp1 + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXDLIN(2356)					::DiscordClient_obj::changePresence(_hx_tmp,_hx_tmp2,this->iconRPC,null(),null());
            				}
            			}
            		}
HXLINE(2361)		this->super::closeSubState();
            	}


void PlayState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2365_resyncVocals)
HXLINE(2366)		{
HXLINE(2366)			 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(2366)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(2367)		{
HXLINE(2367)			 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(2367)			_this1->cleanup(_this1->autoDestroy,true);
            		}
HXLINE(2369)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(2370)		this->vocals->play(null(),null(),null());
HXLINE(2371)		::flixel::FlxG_obj::sound->music->set_time((::Conductor_obj::songPosition * ::PlayState_obj::songMultiplier));
HXLINE(2372)		this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
HXLINE(2375)		{
HXLINE(2378)			::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
HXLINE(2379)			if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE(2380)				::lime::media::openal::AL_obj::sourcef(this->vocals->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
            			}
            		}
HXLINE(2385)		::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2385)		::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(2392)		::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(2385)		::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resyncVocals,(void))

void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2420_update)
HXLINE(2419)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2422)		this->perfectMode = false;
HXLINE(2425)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2425)		if (_this->keyManager->checkStatusUnsafe(32,_this->status)) {
HXLINE(2427)			::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),null(),null(),null());
            		}
HXLINE(2431)		if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE(2432)			::PlayState_obj::Stage->update(elapsed);
            		}
HXLINE(2434)		bool _hx_tmp;
HXDLIN(2434)		if (!(this->addedBotplay)) {
HXLINE(2434)			_hx_tmp = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2434)			_hx_tmp = false;
            		}
HXDLIN(2434)		if (_hx_tmp) {
HXLINE(2436)			::PlayStateChangeables_obj::botPlay = true;
HXLINE(2437)			this->addedBotplay = true;
HXLINE(2438)			this->add(this->botPlayState);
            		}
HXLINE(2441)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::Note >() )) {
HXLINE(2443)			if (((this->unspawnNotes->__get(0).StaticCast<  ::Note >()->strumTime - ::Conductor_obj::songPosition) < (( (Float)(14000) ) * ::PlayState_obj::songMultiplier))) {
HXLINE(2445)				 ::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::Note >();
HXLINE(2446)				this->notes->add(dunceNote).StaticCast<  ::Note >();
HXLINE(2449)				if (this->executeModchart) {
HXLINE(2451)					 ::LuaNote_obj::__alloc( HX_CTX ,dunceNote,this->currentLuaIndex);
HXLINE(2452)					dunceNote->luaID = this->currentLuaIndex;
            				}
HXLINE(2456)				if (this->executeModchart) {
HXLINE(2459)					if (!(dunceNote->isSustainNote)) {
HXLINE(2460)						dunceNote->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camNotes));
            					}
            					else {
HXLINE(2462)						dunceNote->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camSustains));
            					}
            				}
            				else {
HXLINE(2467)					dunceNote->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            				}
HXLINE(2470)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE(2471)				this->unspawnNotes->removeRange(index,1);
HXLINE(2472)				this->currentLuaIndex++;
            			}
            		}
HXLINE(2477)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(2480)			::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
HXLINE(2481)			if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE(2482)				::lime::media::openal::AL_obj::sourcef(this->vocals->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
            			}
            		}
HXLINE(2486)		if (this->generatedMusic) {
HXLINE(2488)			bool _hx_tmp;
HXDLIN(2488)			if (this->songStarted) {
HXLINE(2488)				_hx_tmp = !(this->endingSong);
            			}
            			else {
HXLINE(2488)				_hx_tmp = false;
            			}
HXDLIN(2488)			if (_hx_tmp) {
HXLINE(2493)				bool _hx_tmp;
HXDLIN(2493)				bool _hx_tmp1;
HXDLIN(2493)				if ((this->unspawnNotes->length == 0)) {
HXLINE(2493)					_hx_tmp1 = (this->notes->length == 0);
            				}
            				else {
HXLINE(2493)					_hx_tmp1 = false;
            				}
HXDLIN(2493)				if (_hx_tmp1) {
HXLINE(2493)					_hx_tmp = ((::flixel::FlxG_obj::sound->music->_time / ::PlayState_obj::songMultiplier) > (this->songLength - ( (Float)(100) )));
            				}
            				else {
HXLINE(2493)					_hx_tmp = false;
            				}
HXDLIN(2493)				if (_hx_tmp) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer timer){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2500_update)
HXLINE(2500)						_gthis->endSong();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(2495)					::Debug_obj::logTrace(HX_("we're fuckin ending the song ",b3,6b,87,93),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2495,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
HXLINE(2497)					this->endingSong = true;
HXLINE(2498)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            				}
            			}
            		}
HXLINE(2506)		if ((this->updateFrame == 4)) {
HXLINE(2508)			::TimingStruct_obj::clearTimings();
HXLINE(2510)			int currentIndex = 0;
HXLINE(2511)			{
HXLINE(2511)				int _g = 0;
HXDLIN(2511)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN(2511)				while((_g < _g1->length)){
HXLINE(2511)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN(2511)					_g = (_g + 1);
HXLINE(2513)					if ((i->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE(2515)						Float beat = i->position;
HXLINE(2517)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE(2519)						Float bpm = (i->value * ::PlayState_obj::songMultiplier);
HXLINE(2521)						::TimingStruct_obj::addTiming(beat,bpm,endBeat,( (Float)(0) ));
HXLINE(2523)						if ((currentIndex != 0)) {
HXLINE(2525)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE(2526)							data->endBeat = beat;
HXLINE(2527)							data->length = (((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) ))) / ::PlayState_obj::songMultiplier);
HXLINE(2528)							Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(2529)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor(((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step) / ::PlayState_obj::songMultiplier));
HXLINE(2530)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + (data->length / ::PlayState_obj::songMultiplier));
            						}
HXLINE(2533)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE(2537)			this->updateFrame++;
            		}
            		else {
HXLINE(2539)			if ((this->updateFrame != 5)) {
HXLINE(2540)				this->updateFrame++;
            			}
            		}
HXLINE(2542)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(2544)			 ::TimingStruct timingSeg = ::TimingStruct_obj::getTimingAtBeat(this->curDecimalBeat);
HXLINE(2546)			if (::hx::IsNotNull( timingSeg )) {
HXLINE(2548)				Float timingSegBpm = timingSeg->bpm;
HXLINE(2550)				if ((timingSegBpm != ::Conductor_obj::bpm)) {
HXLINE(2553)					::Conductor_obj::changeBPM(timingSegBpm,false);
HXLINE(2554)					::Conductor_obj::crochet = (((( (Float)(60) ) / timingSegBpm) * ( (Float)(1000) )) / ::PlayState_obj::songMultiplier);
HXLINE(2555)					::Conductor_obj::stepCrochet = (::Conductor_obj::crochet / ( (Float)(4) ));
            				}
            			}
HXLINE(2559)			Float newScroll = ((Float)1.0);
HXLINE(2561)			{
HXLINE(2561)				int _g = 0;
HXDLIN(2561)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN(2561)				while((_g < _g1->length)){
HXLINE(2561)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN(2561)					_g = (_g + 1);
HXLINE(2563)					if ((i->type == HX_("Scroll Speed Change",fc,2c,18,61))) {
HXLINE(2566)						bool _hx_tmp;
HXDLIN(2566)						if ((i->position <= this->curDecimalBeat)) {
HXLINE(2566)							_hx_tmp = !(this->pastScrollChanges->contains(i));
            						}
            						else {
HXLINE(2566)							_hx_tmp = false;
            						}
HXDLIN(2566)						if (_hx_tmp) {
HXLINE(2568)							this->pastScrollChanges->push(i);
HXLINE(2570)							newScroll = i->value;
            						}
            					}
            				}
            			}
HXLINE(2575)			if ((newScroll != 0)) {
HXLINE(2576)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayStateChangeables >();
HXDLIN(2576)				::PlayStateChangeables_obj::scrollSpeed = (::PlayStateChangeables_obj::scrollSpeed * newScroll);
            			}
            		}
HXLINE(2579)		bool _hx_tmp1;
HXDLIN(2579)		if (::PlayStateChangeables_obj::botPlay) {
HXLINE(2579)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2579)			_hx_tmp1 = _this->keyManager->checkStatusUnsafe(49,_this->status);
            		}
            		else {
HXLINE(2579)			_hx_tmp1 = false;
            		}
HXDLIN(2579)		if (_hx_tmp1) {
HXLINE(2580)			this->camHUD->set_visible(!(this->camHUD->visible));
            		}
HXLINE(2582)		bool _hx_tmp2;
HXDLIN(2582)		bool _hx_tmp3;
HXDLIN(2582)		if (this->useVideo) {
HXLINE(2582)			_hx_tmp3 = ::hx::IsNotNull( ::GlobalVideo_obj::get() );
            		}
            		else {
HXLINE(2582)			_hx_tmp3 = false;
            		}
HXDLIN(2582)		if (_hx_tmp3) {
HXLINE(2582)			_hx_tmp2 = !(this->stopUpdate);
            		}
            		else {
HXLINE(2582)			_hx_tmp2 = false;
            		}
HXDLIN(2582)		if (_hx_tmp2) {
HXLINE(2584)			bool _hx_tmp;
HXDLIN(2584)			if (( (bool)(::GlobalVideo_obj::get()->__Field(HX_("ended",fa,48,7a,70),::hx::paccDynamic)) )) {
HXLINE(2584)				_hx_tmp = !(this->removedVideo);
            			}
            			else {
HXLINE(2584)				_hx_tmp = false;
            			}
HXDLIN(2584)			if (_hx_tmp) {
HXLINE(2586)				this->remove(this->videoSprite,null());
HXLINE(2587)				this->removedVideo = true;
            			}
            		}
HXLINE(2592)		bool _hx_tmp4;
HXDLIN(2592)		bool _hx_tmp5;
HXDLIN(2592)		if (this->executeModchart) {
HXLINE(2592)			_hx_tmp5 = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(2592)			_hx_tmp5 = false;
            		}
HXDLIN(2592)		if (_hx_tmp5) {
HXLINE(2592)			_hx_tmp4 = this->songStarted;
            		}
            		else {
HXLINE(2592)			_hx_tmp4 = false;
            		}
HXDLIN(2592)		if (_hx_tmp4) {
HXLINE(2594)			::PlayState_obj::luaModchart->setVar(HX_("songPos",bf,44,27,aa),::Conductor_obj::songPosition);
HXLINE(2595)			::PlayState_obj::luaModchart->setVar(HX_("hudZoom",6a,47,5d,7c),this->camHUD->zoom);
HXLINE(2596)			 ::ModchartState _hx_tmp = ::PlayState_obj::luaModchart;
HXDLIN(2596)			_hx_tmp->setVar(HX_("curBeat",16,53,29,ac),::HelperFunctions_obj::truncateFloat(this->curDecimalBeat,3));
HXLINE(2597)			::PlayState_obj::luaModchart->setVar(HX_("cameraZoom",58,cc,16,b7),::flixel::FlxG_obj::camera->zoom);
HXLINE(2599)			::PlayState_obj::luaModchart->executeState(HX_("update",09,86,05,87),::cpp::VirtualArray_obj::__new(1)->init(0,elapsed));
HXLINE(2601)			{
HXLINE(2601)				 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,::PlayState_obj::luaModchart->luaWiggles);
HXDLIN(2601)				while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2601)					 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN(2601)					::String key = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN(2601)					 ::WiggleEffect value = ( ( ::WiggleEffect)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE(2604)					value->update(elapsed);
            				}
            			}
HXLINE(2607)			::PlayStateChangeables_obj::useDownscroll = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("downscroll",ef,45,d4,4f),HX_("bool",2a,84,1b,41))) );
HXLINE(2616)			 ::flixel::FlxCamera _hx_tmp1 = ::flixel::FlxG_obj::camera;
HXDLIN(2616)			_hx_tmp1->set_angle(( (Float)(::PlayState_obj::luaModchart->getVar(HX_("cameraAngle",ee,36,28,17),HX_("float",9c,c5,96,02))) ));
HXLINE(2617)			 ::flixel::FlxCamera _hx_tmp2 = this->camHUD;
HXDLIN(2617)			_hx_tmp2->set_angle(( (Float)(::PlayState_obj::luaModchart->getVar(HX_("camHudAngle",cb,c2,43,4c),HX_("float",9c,c5,96,02))) ));
HXLINE(2619)			if (( (bool)(::PlayState_obj::luaModchart->getVar(HX_("showOnlyStrums",f3,ec,e4,3c),HX_("bool",2a,84,1b,41))) )) {
HXLINE(2621)				this->healthBarBG->set_visible(false);
HXLINE(2622)				this->RealityEngineWatermark->set_visible(false);
HXLINE(2623)				this->healthBar->set_visible(false);
HXLINE(2624)				this->iconP1->set_visible(false);
HXLINE(2625)				this->iconP2->set_visible(false);
HXLINE(2626)				this->scoreTxt->set_visible(false);
            			}
            			else {
HXLINE(2630)				this->healthBarBG->set_visible(true);
HXLINE(2631)				this->RealityEngineWatermark->set_visible(true);
HXLINE(2632)				this->healthBar->set_visible(true);
HXLINE(2633)				this->iconP1->set_visible(true);
HXLINE(2634)				this->iconP2->set_visible(true);
HXLINE(2635)				this->scoreTxt->set_visible(true);
            			}
HXLINE(2638)			bool p1 = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("strumLine1Visible",1e,97,fd,b5),HX_("bool",2a,84,1b,41))) );
HXLINE(2639)			bool p2 = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("strumLine2Visible",3d,09,30,ef),HX_("bool",2a,84,1b,41))) );
HXLINE(2641)			{
HXLINE(2642)				{
HXLINE(2643)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(0)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2644)					if ((0 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2645)						Dynamic( ::PlayState_obj::playerStrums->members->__get(0)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
HXLINE(2642)				{
HXLINE(2643)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(1)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2644)					if ((1 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2645)						Dynamic( ::PlayState_obj::playerStrums->members->__get(1)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
HXLINE(2642)				{
HXLINE(2643)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(2)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2644)					if ((2 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2645)						Dynamic( ::PlayState_obj::playerStrums->members->__get(2)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
HXLINE(2642)				{
HXLINE(2643)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(3)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2644)					if ((3 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2645)						Dynamic( ::PlayState_obj::playerStrums->members->__get(3)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
            			}
HXLINE(2648)			this->camNotes->set_zoom(this->camHUD->zoom);
HXLINE(2649)			this->camNotes->set_x(this->camHUD->x);
HXLINE(2650)			this->camNotes->set_y(this->camHUD->y);
HXLINE(2651)			this->camNotes->set_angle(this->camHUD->angle);
HXLINE(2652)			this->camSustains->set_zoom(this->camHUD->zoom);
HXLINE(2653)			this->camSustains->set_x(this->camHUD->x);
HXLINE(2654)			this->camSustains->set_y(this->camHUD->y);
HXLINE(2655)			this->camSustains->set_angle(this->camHUD->angle);
            		}
HXLINE(2662)		{
HXLINE(2663)			int balls = (this->notesHitArray->length - 1);
HXLINE(2664)			while((balls >= 0)){
HXLINE(2666)				 ::Date cock = this->notesHitArray->__get(balls).StaticCast<  ::Date >();
HXLINE(2667)				bool _hx_tmp;
HXDLIN(2667)				if (::hx::IsNotNull( cock )) {
HXLINE(2667)					Float _hx_tmp1 = (cock->getTime() + 1000);
HXDLIN(2667)					_hx_tmp = (_hx_tmp1 < ::Date_obj::now()->getTime());
            				}
            				else {
HXLINE(2667)					_hx_tmp = false;
            				}
HXDLIN(2667)				if (_hx_tmp) {
HXLINE(2668)					this->notesHitArray->remove(cock);
            				}
            				else {
HXLINE(2670)					balls = 0;
            				}
HXLINE(2671)				balls = (balls - 1);
            			}
HXLINE(2673)			this->nps = this->notesHitArray->length;
HXLINE(2674)			if ((this->nps > this->maxNPS)) {
HXLINE(2675)				this->maxNPS = this->nps;
            			}
            		}
HXLINE(2678)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2678)		if (_this1->keyManager->checkStatusUnsafe(57,_this1->status)) {
HXLINE(2679)			this->iconP1->swapOldIcon();
            		}
HXLINE(2681)		{
HXLINE(2681)			 ::flixel::text::FlxText _this2 = this->scoreTxt;
HXDLIN(2681)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN(2681)			if (::hx::IsNull( axes )) {
HXLINE(2681)				axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN(2681)			bool _hx_tmp6;
HXDLIN(2681)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(2681)					_hx_tmp6 = true;
            				}
            				break;
            				default:{
HXLINE(2681)					_hx_tmp6 = false;
            				}
            			}
HXDLIN(2681)			if (_hx_tmp6) {
HXLINE(2681)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(2681)				_this2->set_x(((( (Float)(_hx_tmp) ) - _this2->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(2681)			bool _hx_tmp7;
HXDLIN(2681)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(2681)					_hx_tmp7 = true;
            				}
            				break;
            				default:{
HXLINE(2681)					_hx_tmp7 = false;
            				}
            			}
HXDLIN(2681)			if (_hx_tmp7) {
HXLINE(2681)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(2681)				_this2->set_y(((( (Float)(_hx_tmp) ) - _this2->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(2683)		::String s = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("pauseBind",d3,ab,7d,45),::hx::paccDynamic)) );
HXDLIN(2683)		s = s.toUpperCase();
HXDLIN(2683)		int pauseBind;
HXDLIN(2683)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s)) {
HXLINE(2683)			pauseBind = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s);
            		}
            		else {
HXLINE(2683)			pauseBind = -1;
            		}
HXLINE(2684)		::String s1 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("gppauseBind",8a,44,8f,3f),::hx::paccDynamic)) );
HXDLIN(2684)		s1 = s1.toUpperCase();
HXDLIN(2684)		int gppauseBind;
HXDLIN(2684)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s1)) {
HXLINE(2684)			gppauseBind = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s1);
            		}
            		else {
HXLINE(2684)			gppauseBind = -1;
            		}
HXLINE(2686)		bool _hx_tmp8;
HXDLIN(2686)		bool _hx_tmp9;
HXDLIN(2686)		bool _hx_tmp10;
HXDLIN(2686)		bool _hx_tmp11;
HXDLIN(2686)		if (!(::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,pauseBind),2))) {
HXLINE(2686)			if (::KeyBinds_obj::gamepad) {
HXLINE(2686)				_hx_tmp11 = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,gppauseBind),2);
            			}
            			else {
HXLINE(2686)				_hx_tmp11 = false;
            			}
            		}
            		else {
HXLINE(2686)			_hx_tmp11 = true;
            		}
HXDLIN(2686)		if (_hx_tmp11) {
HXLINE(2686)			_hx_tmp10 = this->startedCountdown;
            		}
            		else {
HXLINE(2686)			_hx_tmp10 = false;
            		}
HXDLIN(2686)		if (_hx_tmp10) {
HXLINE(2686)			_hx_tmp9 = this->canPause;
            		}
            		else {
HXLINE(2686)			_hx_tmp9 = false;
            		}
HXDLIN(2686)		if (_hx_tmp9) {
HXLINE(2686)			_hx_tmp8 = !(this->cannotDie);
            		}
            		else {
HXLINE(2686)			_hx_tmp8 = false;
            		}
HXDLIN(2686)		if (_hx_tmp8) {
HXLINE(2691)			this->persistentUpdate = false;
HXLINE(2692)			this->persistentDraw = true;
HXLINE(2693)			this->paused = true;
HXLINE(2696)			if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < ((Float)0.1))) {
HXLINE(2699)				{
HXLINE(2699)					 ::flixel::FlxState nextState =  ::GitarooPause_obj::__alloc( HX_CTX );
HXDLIN(2699)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2699)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE(2700)				this->clean();
            			}
            			else {
HXLINE(2703)				this->openSubState( ::PauseSubState_obj::__alloc( HX_CTX ));
            			}
            		}
HXLINE(2706)		bool _hx_tmp12;
HXDLIN(2706)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2706)		if (_this3->keyManager->checkStatusUnsafe(53,_this3->status)) {
HXLINE(2706)			_hx_tmp12 = this->songStarted;
            		}
            		else {
HXLINE(2706)			_hx_tmp12 = false;
            		}
HXDLIN(2706)		if (_hx_tmp12) {
HXLINE(2708)			::PlayState_obj::songMultiplier = ( (Float)(1) );
HXLINE(2709)			if (this->useVideo) {
HXLINE(2711)				::GlobalVideo_obj::get()->__Field(HX_("stop",02,f0,5b,4c),::hx::paccDynamic)();
HXLINE(2712)				this->remove(this->videoSprite,null());
HXLINE(2713)				this->removedVideo = true;
            			}
HXLINE(2715)			this->cannotDie = true;
HXLINE(2717)			{
HXLINE(2717)				 ::flixel::FlxState nextState =  ::WaveformTestState_obj::__alloc( HX_CTX ,null());
HXDLIN(2717)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2717)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(2718)			this->clean();
HXLINE(2719)			::PlayState_obj::stageTesting = false;
HXLINE(2720)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->handleInput_dyn(),null());
HXLINE(2721)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->releaseInput_dyn(),null());
HXLINE(2723)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2725)				::PlayState_obj::luaModchart->die();
HXLINE(2726)				::PlayState_obj::luaModchart = null();
            			}
            		}
HXLINE(2731)		bool _hx_tmp13;
HXDLIN(2731)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2731)		if (_this4->keyManager->checkStatusUnsafe(55,_this4->status)) {
HXLINE(2731)			_hx_tmp13 = this->songStarted;
            		}
            		else {
HXLINE(2731)			_hx_tmp13 = false;
            		}
HXDLIN(2731)		if (_hx_tmp13) {
HXLINE(2733)			::PlayState_obj::songMultiplier = ( (Float)(1) );
HXLINE(2734)			if (this->useVideo) {
HXLINE(2736)				::GlobalVideo_obj::get()->__Field(HX_("stop",02,f0,5b,4c),::hx::paccDynamic)();
HXLINE(2737)				this->remove(this->videoSprite,null());
HXLINE(2738)				this->removedVideo = true;
            			}
HXLINE(2740)			this->cannotDie = true;
HXLINE(2742)			{
HXLINE(2742)				 ::flixel::FlxState nextState =  ::ChartingState_obj::__alloc( HX_CTX ,null());
HXDLIN(2742)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2742)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(2743)			this->clean();
HXLINE(2744)			::PlayState_obj::stageTesting = false;
HXLINE(2745)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->handleInput_dyn(),null());
HXLINE(2746)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->releaseInput_dyn(),null());
HXLINE(2748)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2750)				::PlayState_obj::luaModchart->die();
HXLINE(2751)				::PlayState_obj::luaModchart = null();
            			}
            		}
HXLINE(2759)		 ::HealthIcon _hx_tmp14 = this->iconP1;
HXDLIN(2759)		_hx_tmp14->setGraphicSize(::Std_obj::_hx_int((150 + (((Float)0.50) * (this->iconP1->get_width() - ( (Float)(150) ))))),null());
HXLINE(2760)		 ::HealthIcon _hx_tmp15 = this->iconP2;
HXDLIN(2760)		_hx_tmp15->setGraphicSize(::Std_obj::_hx_int((150 + (((Float)0.50) * (this->iconP2->get_width() - ( (Float)(150) ))))),null());
HXLINE(2762)		this->iconP1->updateHitbox();
HXLINE(2763)		this->iconP2->updateHitbox();
HXLINE(2765)		int iconOffset = 26;
HXLINE(2767)		 ::HealthIcon _hx_tmp16 = this->iconP1;
HXDLIN(2767)		Float _hx_tmp17 = this->healthBar->x;
HXDLIN(2767)		Float _hx_tmp18 = this->healthBar->get_width();
HXDLIN(2767)		_hx_tmp16->set_x((_hx_tmp17 + ((_hx_tmp18 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))) - ( (Float)(iconOffset) ))));
HXLINE(2768)		 ::HealthIcon _hx_tmp19 = this->iconP2;
HXDLIN(2768)		Float _hx_tmp20 = this->healthBar->x;
HXDLIN(2768)		Float _hx_tmp21 = this->healthBar->get_width();
HXDLIN(2768)		Float _hx_tmp22 = (_hx_tmp20 + (_hx_tmp21 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))));
HXDLIN(2768)		_hx_tmp19->set_x((_hx_tmp22 - (this->iconP2->get_width() - ( (Float)(iconOffset) ))));
HXLINE(2770)		if ((this->health > 2)) {
HXLINE(2771)			this->health = ( (Float)(2) );
            		}
HXLINE(2772)		if ((this->healthBar->get_percent() < 20)) {
HXLINE(2773)			this->iconP1->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(2775)			this->iconP1->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(2777)		if ((this->healthBar->get_percent() > 80)) {
HXLINE(2778)			this->iconP2->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(2780)			this->iconP2->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(2901)		bool _hx_tmp23;
HXDLIN(2901)		if (this->skipActive) {
HXLINE(2901)			_hx_tmp23 = (::Conductor_obj::songPosition >= this->skipTo);
            		}
            		else {
HXLINE(2901)			_hx_tmp23 = false;
            		}
HXDLIN(2901)		if (_hx_tmp23) {
HXLINE(2903)			this->remove(this->skipText,null());
HXLINE(2904)			this->skipActive = false;
            		}
HXLINE(2907)		bool _hx_tmp24;
HXDLIN(2907)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2907)		if (_this5->keyManager->checkStatusUnsafe(32,_this5->status)) {
HXLINE(2907)			_hx_tmp24 = this->skipActive;
            		}
            		else {
HXLINE(2907)			_hx_tmp24 = false;
            		}
HXDLIN(2907)		if (_hx_tmp24) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tw){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2922_update)
HXLINE(2922)				_gthis->remove(_gthis->skipText,null()).StaticCast<  ::flixel::FlxBasic >();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2909)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(2910)			this->vocals->pause();
HXLINE(2911)			::Conductor_obj::songPosition = this->skipTo;
HXLINE(2912)			::Conductor_obj::rawPosition = this->skipTo;
HXLINE(2914)			::flixel::FlxG_obj::sound->music->set_time(::Conductor_obj::songPosition);
HXLINE(2915)			::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(2917)			this->vocals->set_time(::Conductor_obj::songPosition);
HXLINE(2918)			this->vocals->play(null(),null(),null());
HXLINE(2919)			::flixel::tweens::FlxTween_obj::tween(this->skipText, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis)))));
HXLINE(2925)			this->skipActive = false;
            		}
HXLINE(2928)		if (this->startingSong) {
HXLINE(2930)			if (this->startedCountdown) {
HXLINE(2932)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(2932)				::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(2933)				::Conductor_obj::rawPosition = ::Conductor_obj::songPosition;
HXLINE(2934)				if ((::Conductor_obj::songPosition >= 0)) {
HXLINE(2935)					this->startSong();
            				}
            			}
            		}
            		else {
HXLINE(2941)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(2941)			::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(2942)			::Conductor_obj::rawPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(2947)			this->songPositionBar = ((::Conductor_obj::songPosition - this->songLength) / ( (Float)(1000) ));
HXLINE(2949)			this->currentSection = this->getSectionByTime(::Conductor_obj::songPosition);
HXLINE(2951)			if (!(this->paused)) {
HXLINE(2953)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2953)				_hx_tmp->songTime = (_hx_tmp->songTime + (::flixel::FlxG_obj::game->ticks - this->previousFrameTime));
HXLINE(2954)				this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(2957)				if ((::Conductor_obj::lastSongPos != ::Conductor_obj::songPosition)) {
HXLINE(2959)					this->songTime = ((this->songTime + ::Conductor_obj::songPosition) / ( (Float)(2) ));
HXLINE(2960)					::Conductor_obj::lastSongPos = ::Conductor_obj::songPosition;
            				}
HXLINE(2965)				Float curTime = (::flixel::FlxG_obj::sound->music->_time / ::PlayState_obj::songMultiplier);
HXLINE(2966)				if ((curTime < 0)) {
HXLINE(2967)					curTime = ( (Float)(0) );
            				}
HXLINE(2969)				int secondsTotal = ::Math_obj::floor(((curTime - this->songLength) / ( (Float)(1000) )));
HXLINE(2970)				if ((secondsTotal < 0)) {
HXLINE(2971)					secondsTotal = 0;
            				}
HXLINE(2973)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(2974)					 ::flixel::text::FlxText _hx_tmp = this->songName;
HXDLIN(2974)					::String _hx_tmp1 = ( (::String)((::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic) + HX_(" (",08,1c,00,00))) );
HXDLIN(2974)					_hx_tmp->set_text(((_hx_tmp1 + ::flixel::util::FlxStringUtil_obj::formatTime((this->songLength - ( (Float)(secondsTotal) )),false)) + HX_(")",29,00,00,00)));
            				}
            			}
            		}
HXLINE(2980)		bool _hx_tmp25;
HXDLIN(2980)		if (this->generatedMusic) {
HXLINE(2980)			_hx_tmp25 = ::hx::IsNotNull( this->currentSection );
            		}
            		else {
HXLINE(2980)			_hx_tmp25 = false;
            		}
HXDLIN(2980)		if (_hx_tmp25) {
HXLINE(2983)			if (this->allowedToCheer) {
HXLINE(2986)				bool _hx_tmp;
HXDLIN(2986)				bool _hx_tmp1;
HXDLIN(2986)				if ((::PlayState_obj::gf->animation->_curAnim->name != HX_("danceLeft",da,cc,f9,df))) {
HXLINE(2986)					_hx_tmp1 = (::PlayState_obj::gf->animation->_curAnim->name == HX_("danceRight",a9,7f,a6,91));
            				}
            				else {
HXLINE(2986)					_hx_tmp1 = true;
            				}
HXDLIN(2986)				if (!(_hx_tmp1)) {
HXLINE(2986)					_hx_tmp = (::PlayState_obj::gf->animation->_curAnim->name == HX_("idle",14,a7,b3,45));
            				}
            				else {
HXLINE(2986)					_hx_tmp = true;
            				}
HXDLIN(2986)				if (_hx_tmp) {
HXLINE(2991)					::String _hx_switch_0 = this->curSong;
            					if (  (_hx_switch_0==HX_("Blammed",76,2a,51,09)) ){
HXLINE(3034)						bool _hx_tmp;
HXDLIN(3034)						if ((this->curBeat > 30)) {
HXLINE(3034)							_hx_tmp = (this->curBeat < 190);
            						}
            						else {
HXLINE(3034)							_hx_tmp = false;
            						}
HXDLIN(3034)						if (_hx_tmp) {
HXLINE(3036)							bool _hx_tmp;
HXDLIN(3036)							if ((this->curBeat >= 90)) {
HXLINE(3036)								_hx_tmp = (this->curBeat > 128);
            							}
            							else {
HXLINE(3036)								_hx_tmp = true;
            							}
HXDLIN(3036)							if (_hx_tmp) {
HXLINE(3038)								if ((::hx::Mod(this->curBeat,4) == 2)) {
HXLINE(3040)									if (!(this->triggeredAlready)) {
HXLINE(3042)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(3043)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(3047)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(3034)						goto _hx_goto_106;
            					}
            					if (  (_hx_switch_0==HX_("Bopeebo",90,29,16,da)) ){
HXLINE(3018)						bool _hx_tmp;
HXDLIN(3018)						if ((this->curBeat > 5)) {
HXLINE(3018)							_hx_tmp = (this->curBeat < 130);
            						}
            						else {
HXLINE(3018)							_hx_tmp = false;
            						}
HXDLIN(3018)						if (_hx_tmp) {
HXLINE(3020)							if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(3022)								if (!(this->triggeredAlready)) {
HXLINE(3024)									::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(3025)									this->triggeredAlready = true;
            								}
            							}
            							else {
HXLINE(3029)								this->triggeredAlready = false;
            							}
            						}
HXLINE(3018)						goto _hx_goto_106;
            					}
            					if (  (_hx_switch_0==HX_("Cocoa",e9,0c,83,dd)) ){
HXLINE(3053)						if ((this->curBeat < 170)) {
HXLINE(3055)							bool _hx_tmp;
HXDLIN(3055)							if ((this->curBeat >= 65)) {
HXLINE(3055)								if ((this->curBeat > 130)) {
HXLINE(3055)									_hx_tmp = (this->curBeat < 145);
            								}
            								else {
HXLINE(3055)									_hx_tmp = false;
            								}
            							}
            							else {
HXLINE(3055)								_hx_tmp = true;
            							}
HXDLIN(3055)							if (_hx_tmp) {
HXLINE(3057)								if ((::hx::Mod(this->curBeat,16) == 15)) {
HXLINE(3059)									if (!(this->triggeredAlready)) {
HXLINE(3061)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(3062)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(3066)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(3053)						goto _hx_goto_106;
            					}
            					if (  (_hx_switch_0==HX_("Eggnog",81,78,4e,29)) ){
HXLINE(3072)						bool _hx_tmp;
HXDLIN(3072)						bool _hx_tmp1;
HXDLIN(3072)						if ((this->curBeat > 10)) {
HXLINE(3072)							_hx_tmp1 = (this->curBeat != 111);
            						}
            						else {
HXLINE(3072)							_hx_tmp1 = false;
            						}
HXDLIN(3072)						if (_hx_tmp1) {
HXLINE(3072)							_hx_tmp = (this->curBeat < 220);
            						}
            						else {
HXLINE(3072)							_hx_tmp = false;
            						}
HXDLIN(3072)						if (_hx_tmp) {
HXLINE(3074)							if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(3076)								if (!(this->triggeredAlready)) {
HXLINE(3078)									::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(3079)									this->triggeredAlready = true;
            								}
            							}
            							else {
HXLINE(3083)								this->triggeredAlready = false;
            							}
            						}
HXLINE(3072)						goto _hx_goto_106;
            					}
            					if (  (_hx_switch_0==HX_("Philly Nice",95,67,fc,96)) ){
HXLINE(2996)						if ((this->curBeat < 250)) {
HXLINE(2999)							bool _hx_tmp;
HXDLIN(2999)							if ((this->curBeat != 184)) {
HXLINE(2999)								_hx_tmp = (this->curBeat != 216);
            							}
            							else {
HXLINE(2999)								_hx_tmp = false;
            							}
HXDLIN(2999)							if (_hx_tmp) {
HXLINE(3001)								if ((::hx::Mod(this->curBeat,16) == 8)) {
HXLINE(3004)									if (!(this->triggeredAlready)) {
HXLINE(3006)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(3007)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(3011)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2996)						goto _hx_goto_106;
            					}
            					_hx_goto_106:;
            				}
            			}
HXLINE(3091)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3092)				::PlayState_obj::luaModchart->setVar(HX_("mustHit",ca,3b,5d,00), ::Dynamic(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)));
            			}
HXLINE(3095)			bool _hx_tmp;
HXDLIN(3095)			Float _hx_tmp1 = this->camFollow->x;
HXDLIN(3095)			if ((_hx_tmp1 != (::PlayState_obj::dad->getMidpoint(null())->x + 150))) {
HXLINE(3095)				_hx_tmp = !(( (bool)(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(3095)				_hx_tmp = false;
            			}
HXDLIN(3095)			if (_hx_tmp) {
HXLINE(3097)				int offsetX = 0;
HXLINE(3098)				int offsetY = 0;
HXLINE(3100)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3102)					offsetX = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followXOffset",ba,cc,46,b7),HX_("float",9c,c5,96,02))) );
HXLINE(3103)					offsetY = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followYOffset",7b,43,dc,e0),HX_("float",9c,c5,96,02))) );
            				}
HXLINE(3106)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(3106)				Float _hx_tmp1 = ((::PlayState_obj::dad->getMidpoint(null())->x + 150) + offsetX);
HXDLIN(3106)				_hx_tmp->setPosition(_hx_tmp1,((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(100) )) + offsetY));
HXLINE(3108)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3109)					::PlayState_obj::luaModchart->executeState(HX_("playerTwoTurn",c8,15,04,05),::cpp::VirtualArray_obj::__new(0));
            				}
HXLINE(3113)				::String _hx_switch_1 = ::PlayState_obj::dad->curCharacter;
            				if (  (_hx_switch_1==HX_("mom",cb,16,53,00)) ||  (_hx_switch_1==HX_("mom-car",52,e6,f7,f6)) ){
HXLINE(3116)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(3116)					_hx_tmp->set_y(::PlayState_obj::dad->getMidpoint(null())->y);
HXDLIN(3116)					goto _hx_goto_107;
            				}
            				if (  (_hx_switch_1==HX_("senpai",3c,df,8d,6b)) ||  (_hx_switch_1==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE(3118)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(3118)					_hx_tmp->set_y((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(430) )));
HXLINE(3119)					 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(3119)					_hx_tmp1->set_x((::PlayState_obj::dad->getMidpoint(null())->x - ( (Float)(100) )));
HXLINE(3117)					goto _hx_goto_107;
            				}
            				_hx_goto_107:;
            			}
HXLINE(3123)			bool _hx_tmp2;
HXDLIN(3123)			if (( (bool)(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(3123)				Float _hx_tmp = this->camFollow->x;
HXDLIN(3123)				_hx_tmp2 = (_hx_tmp != (::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(100) )));
            			}
            			else {
HXLINE(3123)				_hx_tmp2 = false;
            			}
HXDLIN(3123)			if (_hx_tmp2) {
HXLINE(3125)				int offsetX = 0;
HXLINE(3126)				int offsetY = 0;
HXLINE(3128)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3130)					offsetX = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followXOffset",ba,cc,46,b7),HX_("float",9c,c5,96,02))) );
HXLINE(3131)					offsetY = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followYOffset",7b,43,dc,e0),HX_("float",9c,c5,96,02))) );
            				}
HXLINE(3134)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(3134)				Float _hx_tmp1 = ((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(100) )) + offsetX);
HXDLIN(3134)				_hx_tmp->setPosition(_hx_tmp1,((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(100) )) + offsetY));
HXLINE(3137)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3138)					::PlayState_obj::luaModchart->executeState(HX_("playerOneTurn",a2,b7,e0,d9),::cpp::VirtualArray_obj::__new(0));
            				}
HXLINE(3140)				if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE(3141)					::String _hx_switch_2 = ::PlayState_obj::Stage->curStage;
            					if (  (_hx_switch_2==HX_("limo",1f,17,b3,47)) ){
HXLINE(3144)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(3144)						_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(300) )));
HXDLIN(3144)						goto _hx_goto_108;
            					}
            					if (  (_hx_switch_2==HX_("mall",d4,3a,56,48)) ){
HXLINE(3146)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(3146)						_hx_tmp->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXDLIN(3146)						goto _hx_goto_108;
            					}
            					if (  (_hx_switch_2==HX_("school",74,b8,c8,40)) ){
HXLINE(3148)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(3148)						_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(200) )));
HXLINE(3149)						 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(3149)						_hx_tmp1->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXLINE(3147)						goto _hx_goto_108;
            					}
            					if (  (_hx_switch_2==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE(3151)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(3151)						_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(200) )));
HXLINE(3152)						 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(3152)						_hx_tmp1->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXLINE(3150)						goto _hx_goto_108;
            					}
            					_hx_goto_108:;
            				}
            			}
            		}
HXLINE(3157)		bool _hx_tmp26;
HXDLIN(3157)		if (this->camZooming) {
HXLINE(3157)			_hx_tmp26 = (::Conductor_obj::bpm < 320);
            		}
            		else {
HXLINE(3157)			_hx_tmp26 = false;
            		}
HXDLIN(3157)		if (_hx_tmp26) {
HXLINE(3159)			if ((::Conductor_obj::bpm > 320)) {
HXLINE(3161)				this->camZooming = false;
            			}
HXLINE(3164)			if (::hx::IsLess( ::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic),((Float)0.8) )) {
HXLINE(3165)				::flixel::FlxG_obj::save->data->__SetField(HX_("zoom",13,a3,f8,50),((Float)0.8),::hx::paccDynamic);
            			}
HXLINE(3167)			if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic),((Float)1.2) )) {
HXLINE(3168)				::flixel::FlxG_obj::save->data->__SetField(HX_("zoom",13,a3,f8,50),((Float)1.2),::hx::paccDynamic);
            			}
HXLINE(3170)			if (!(this->executeModchart)) {
HXLINE(3172)				Float a = ::PlayState_obj::Stage->camZoom;
HXDLIN(3172)				::flixel::FlxG_obj::camera->set_zoom((a + (((Float)0.95) * (::flixel::FlxG_obj::camera->zoom - a))));
HXLINE(3173)				Float a1 = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic)) );
HXDLIN(3173)				this->camHUD->set_zoom((a1 + (((Float)0.95) * (this->camHUD->zoom - a1))));
HXLINE(3175)				this->camNotes->set_zoom(this->camHUD->zoom);
HXLINE(3176)				this->camSustains->set_zoom(this->camHUD->zoom);
            			}
            			else {
HXLINE(3180)				Float a = ::PlayState_obj::Stage->camZoom;
HXDLIN(3180)				::flixel::FlxG_obj::camera->set_zoom((a + (((Float)0.95) * (::flixel::FlxG_obj::camera->zoom - a))));
HXLINE(3181)				this->camHUD->set_zoom((1 + (((Float)0.95) * (this->camHUD->zoom - ( (Float)(1) )))));
HXLINE(3183)				this->camNotes->set_zoom(this->camHUD->zoom);
HXLINE(3184)				this->camSustains->set_zoom(this->camHUD->zoom);
            			}
            		}
HXLINE(3192)		if ((this->curSong == HX_("Fresh",4e,f6,b3,99))) {
HXLINE(3194)			switch((int)(this->curBeat)){
            				case (int)16: {
HXLINE(3197)					this->camZooming = true;
HXLINE(3198)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)48: {
HXLINE(3200)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)80: {
HXLINE(3202)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)112: {
HXLINE(3204)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)163: {
            				}
            				break;
            			}
            		}
HXLINE(3211)		bool _hx_tmp27;
HXDLIN(3211)		if ((this->health <= 0)) {
HXLINE(3211)			_hx_tmp27 = !(this->cannotDie);
            		}
            		else {
HXLINE(3211)			_hx_tmp27 = false;
            		}
HXDLIN(3211)		if (_hx_tmp27) {
HXLINE(3214)			if (::hx::IsNotEq( ::flixel::FlxG_obj::save->data->__Field(HX_("specialCharter",92,bf,b5,48),::hx::paccDynamic),HX_("on",1f,61,00,00) )) {
HXLINE(3221)				if (!(this->usedTimeTravel)) {
HXLINE(3223)					::PlayState_obj::boyfriend->stunned = true;
HXLINE(3225)					this->persistentUpdate = false;
HXLINE(3226)					this->persistentDraw = false;
HXLINE(3227)					this->paused = true;
HXLINE(3229)					{
HXLINE(3229)						 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(3229)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(3230)					{
HXLINE(3230)						 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(3230)						_this1->cleanup(_this1->autoDestroy,true);
            					}
HXLINE(3232)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("InstantRespawn",e7,e4,09,0a),::hx::paccDynamic)) )) {
HXLINE(3234)						 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(3234)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3234)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            					else {
HXLINE(3238)						Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(3238)						this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            					}
HXLINE(3243)					::String _hx_tmp = ( (::String)(((((HX_("GAME OVER -- ",e2,09,af,80) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(3243)					::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(3249)					::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(3243)					::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            				}
            				else {
HXLINE(3260)					this->health = ( (Float)(1) );
            				}
            			}
            		}
HXLINE(3263)		bool _hx_tmp28;
HXDLIN(3263)		if (!(this->inCutscene)) {
HXLINE(3263)			_hx_tmp28 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("resetButton",21,e5,f4,79),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(3263)			_hx_tmp28 = false;
            		}
HXDLIN(3263)		if (_hx_tmp28) {
HXLINE(3265)			::String s = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("resetBind",2c,ff,02,87),::hx::paccDynamic)) );
HXDLIN(3265)			s = s.toUpperCase();
HXDLIN(3265)			int resetBind;
HXDLIN(3265)			if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s)) {
HXLINE(3265)				resetBind = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s);
            			}
            			else {
HXLINE(3265)				resetBind = -1;
            			}
HXLINE(3266)			::String s1 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("gpresetBind",e3,97,14,81),::hx::paccDynamic)) );
HXDLIN(3266)			s1 = s1.toUpperCase();
HXDLIN(3266)			int gpresetBind;
HXDLIN(3266)			if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s1)) {
HXLINE(3266)				gpresetBind = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s1);
            			}
            			else {
HXLINE(3266)				gpresetBind = -1;
            			}
HXLINE(3267)			bool _hx_tmp;
HXDLIN(3267)			if (!(::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,resetBind),2))) {
HXLINE(3267)				if (::KeyBinds_obj::gamepad) {
HXLINE(3267)					_hx_tmp = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,gpresetBind),2);
            				}
            				else {
HXLINE(3267)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE(3267)				_hx_tmp = true;
            			}
HXDLIN(3267)			if (_hx_tmp) {
HXLINE(3269)				::PlayState_obj::boyfriend->stunned = true;
HXLINE(3271)				this->persistentUpdate = false;
HXLINE(3272)				this->persistentDraw = false;
HXLINE(3273)				this->paused = true;
HXLINE(3275)				{
HXLINE(3275)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(3275)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(3276)				{
HXLINE(3276)					 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(3276)					_this1->cleanup(_this1->autoDestroy,true);
            				}
HXLINE(3278)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("InstantRespawn",e7,e4,09,0a),::hx::paccDynamic)) )) {
HXLINE(3280)					 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(3280)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3280)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            				else {
HXLINE(3284)					Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(3284)					this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            				}
HXLINE(3289)				::String _hx_tmp = ( (::String)(((((HX_("GAME OVER -- ",e2,09,af,80) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(3289)				::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(3295)				::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(3289)				::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            			}
            		}
HXLINE(3307)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis,Float,stepHeight1,::Array< bool >,holdArray3) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3313_update)
HXLINE(3317)				if (!(daNote->modifiedByLua)) {
HXLINE(3319)					if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(3321)						if (daNote->mustPress) {
HXLINE(3322)							 ::Note daNote1 = daNote;
HXDLIN(3322)							Float _hx_tmp = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(3324)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::songPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXDLIN(3324)							Float _hx_tmp2;
HXDLIN(3324)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(3324)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(3324)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(3322)							Float _hx_tmp3 = (_hx_tmp + (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(3322)							daNote1->set_y((_hx_tmp3 - ( (Float)(daNote->noteYOff) )));
            						}
            						else {
HXLINE(3328)							 ::Note daNote1 = daNote;
HXDLIN(3328)							Float _hx_tmp = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(3330)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::songPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXDLIN(3330)							Float _hx_tmp2;
HXDLIN(3330)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(3330)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(3330)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(3328)							Float _hx_tmp3 = (_hx_tmp + (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(3328)							daNote1->set_y((_hx_tmp3 - ( (Float)(daNote->noteYOff) )));
            						}
HXLINE(3333)						if (daNote->isSustainNote) {
HXLINE(3335)							{
HXLINE(3335)								 ::Note _g = daNote;
HXDLIN(3335)								Float _g1 = _g->y;
HXDLIN(3335)								Float _hx_tmp = daNote->get_height();
HXDLIN(3335)								_g->set_y((_g1 - (_hx_tmp - stepHeight1)));
            							}
HXLINE(3338)							bool _hx_tmp1;
HXDLIN(3338)							bool _hx_tmp2;
HXDLIN(3338)							bool _hx_tmp3;
HXDLIN(3338)							bool _hx_tmp4;
HXDLIN(3338)							if (!(::PlayStateChangeables_obj::botPlay)) {
HXLINE(3338)								_hx_tmp4 = !(daNote->mustPress);
            							}
            							else {
HXLINE(3338)								_hx_tmp4 = true;
            							}
HXDLIN(3338)							if (!(_hx_tmp4)) {
HXLINE(3338)								_hx_tmp3 = daNote->wasGoodHit;
            							}
            							else {
HXLINE(3338)								_hx_tmp3 = true;
            							}
HXDLIN(3338)							if (!(_hx_tmp3)) {
HXLINE(3338)								_hx_tmp2 = holdArray3->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))));
            							}
            							else {
HXLINE(3338)								_hx_tmp2 = true;
            							}
HXDLIN(3338)							if (_hx_tmp2) {
HXLINE(3342)								Float _hx_tmp = (daNote->y - (daNote->offset->y * daNote->scale->y));
HXDLIN(3342)								Float _hx_tmp2 = (_hx_tmp + daNote->get_height());
HXLINE(3338)								_hx_tmp1 = (_hx_tmp2 >= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            							}
            							else {
HXLINE(3338)								_hx_tmp1 = false;
            							}
HXDLIN(3338)							if (_hx_tmp1) {
HXLINE(3345)								 ::flixel::math::FlxRect swagRect =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,(daNote->frameWidth * 2),(daNote->frameHeight * 2));
HXLINE(3346)								swagRect->height = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(3349)								swagRect->y = (( (Float)(daNote->frameHeight) ) - swagRect->height);
HXLINE(3351)								daNote->set_clipRect(swagRect);
            							}
            						}
HXLINE(3355)						if (daNote->isParent) {
HXLINE(3357)							int _g = 0;
HXDLIN(3357)							int _g1 = daNote->children->length;
HXDLIN(3357)							while((_g < _g1)){
HXLINE(3357)								_g = (_g + 1);
HXDLIN(3357)								int i = (_g - 1);
HXLINE(3359)								 ::Note slide = daNote->children->__get(i).StaticCast<  ::Note >();
HXLINE(3360)								Float daNote1 = daNote->y;
HXDLIN(3360)								slide->set_y((daNote1 - slide->get_height()));
            							}
            						}
            					}
            					else {
HXLINE(3366)						if (daNote->mustPress) {
HXLINE(3367)							 ::Note daNote1 = daNote;
HXDLIN(3367)							Float _hx_tmp = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(3368)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::songPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXDLIN(3368)							Float _hx_tmp2;
HXDLIN(3368)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(3368)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(3368)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(3367)							Float _hx_tmp3 = (_hx_tmp - (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(3367)							daNote1->set_y((_hx_tmp3 + daNote->noteYOff));
            						}
            						else {
HXLINE(3372)							 ::Note daNote1 = daNote;
HXDLIN(3372)							Float _hx_tmp = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(3373)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::songPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXDLIN(3373)							Float _hx_tmp2;
HXDLIN(3373)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(3373)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(3373)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(3372)							Float _hx_tmp3 = (_hx_tmp - (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(3372)							daNote1->set_y((_hx_tmp3 + daNote->noteYOff));
            						}
HXLINE(3376)						if (daNote->isSustainNote) {
HXLINE(3378)							bool _hx_tmp;
HXDLIN(3378)							bool _hx_tmp1;
HXDLIN(3378)							bool _hx_tmp2;
HXDLIN(3378)							bool _hx_tmp3;
HXDLIN(3378)							if (!(::PlayStateChangeables_obj::botPlay)) {
HXLINE(3378)								_hx_tmp3 = !(daNote->mustPress);
            							}
            							else {
HXLINE(3378)								_hx_tmp3 = true;
            							}
HXDLIN(3378)							if (!(_hx_tmp3)) {
HXLINE(3378)								_hx_tmp2 = daNote->wasGoodHit;
            							}
            							else {
HXLINE(3378)								_hx_tmp2 = true;
            							}
HXDLIN(3378)							if (!(_hx_tmp2)) {
HXLINE(3378)								_hx_tmp1 = holdArray3->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))));
            							}
            							else {
HXLINE(3378)								_hx_tmp1 = true;
            							}
HXDLIN(3378)							if (_hx_tmp1) {
HXLINE(3378)								_hx_tmp = ((daNote->y + (daNote->offset->y * daNote->scale->y)) <= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            							}
            							else {
HXLINE(3378)								_hx_tmp = false;
            							}
HXDLIN(3378)							if (_hx_tmp) {
HXLINE(3385)								Float swagRect = daNote->get_width();
HXDLIN(3385)								Float swagRect1 = (swagRect / daNote->scale->x);
HXDLIN(3385)								Float swagRect2 = daNote->get_height();
HXDLIN(3385)								 ::flixel::math::FlxRect swagRect3 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,swagRect1,(swagRect2 / daNote->scale->y));
HXLINE(3386)								swagRect3->y = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(3389)								 ::flixel::math::FlxRect swagRect4 = swagRect3;
HXDLIN(3389)								swagRect4->height = (swagRect4->height - swagRect3->y);
HXLINE(3391)								daNote->set_clipRect(swagRect3);
            							}
            						}
            					}
            				}
HXLINE(3397)				bool _hx_tmp;
HXDLIN(3397)				if (!(daNote->mustPress)) {
HXLINE(3397)					_hx_tmp = (::Conductor_obj::songPosition >= daNote->strumTime);
            				}
            				else {
HXLINE(3397)					_hx_tmp = false;
            				}
HXDLIN(3397)				if (_hx_tmp) {
HXLINE(3399)					if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("tutorial",9e,8f,b5,82) )) {
HXLINE(3400)						_gthis->camZooming = true;
            					}
HXLINE(3402)					::String altAnim = HX_("",00,00,00,00);
HXLINE(3404)					if (daNote->isAlt) {
HXLINE(3406)						altAnim = HX_("-alt",1c,93,08,1e);
            					}
HXLINE(3411)					bool _hx_tmp;
HXDLIN(3411)					if (!(daNote->isParent)) {
HXLINE(3411)						_hx_tmp = ::hx::IsNotNull( daNote->parent );
            					}
            					else {
HXLINE(3411)						_hx_tmp = false;
            					}
HXDLIN(3411)					if (_hx_tmp) {
HXLINE(3413)						if ((daNote->spotInLine != (daNote->parent->children->length - 1))) {
HXLINE(3415)							int singData = ::Std_obj::_hx_int(::Math_obj::abs(( (Float)(daNote->noteData) )));
HXLINE(3416)							::PlayState_obj::dad->playAnim(((HX_("sing",4f,96,53,4c) + _gthis->dataSuffix->__get(singData)) + altAnim),true,null(),null());
HXLINE(3418)							if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) )) {
            								HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::Note,daNote) HXARGC(1)
            								void _hx_run( ::StaticArrow spr){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3422_update)
HXLINE(3422)									_gthis->pressArrow(spr,spr->ID,daNote);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(3420)								::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_2(_gthis,daNote)),null());
            							}
HXLINE(3437)							if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3438)								::PlayState_obj::luaModchart->executeState(HX_("playerTwoSing",9a,c0,51,04),::cpp::VirtualArray_obj::__new(2)->init(0,::Math_obj::abs(( (Float)(daNote->noteData) )))->init(1,::Conductor_obj::songPosition));
            							}
HXLINE(3441)							::PlayState_obj::dad->holdTimer = ( (Float)(0) );
HXLINE(3443)							if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(3444)								_gthis->vocals->set_volume(( (Float)(1) ));
            							}
            						}
            					}
            					else {
HXLINE(3449)						int singData = ::Std_obj::_hx_int(::Math_obj::abs(( (Float)(daNote->noteData) )));
HXLINE(3450)						::PlayState_obj::dad->playAnim(((HX_("sing",4f,96,53,4c) + _gthis->dataSuffix->__get(singData)) + altAnim),true,null(),null());
HXLINE(3452)						if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) )) {
            							HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::Note,daNote) HXARGC(1)
            							void _hx_run( ::StaticArrow spr){
            								HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3456_update)
HXLINE(3456)								_gthis->pressArrow(spr,spr->ID,daNote);
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(3454)							::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_3(_gthis,daNote)),null());
            						}
HXLINE(3471)						if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3472)							::PlayState_obj::luaModchart->executeState(HX_("playerTwoSing",9a,c0,51,04),::cpp::VirtualArray_obj::__new(2)->init(0,::Math_obj::abs(( (Float)(daNote->noteData) )))->init(1,::Conductor_obj::songPosition));
            						}
HXLINE(3475)						::PlayState_obj::dad->holdTimer = ( (Float)(0) );
HXLINE(3477)						if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(3478)							_gthis->vocals->set_volume(( (Float)(1) ));
            						}
            					}
HXLINE(3480)					daNote->set_active(false);
HXLINE(3482)					daNote->kill();
HXLINE(3483)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(3484)					daNote->destroy();
            				}
HXLINE(3487)				bool _hx_tmp1;
HXDLIN(3487)				if (daNote->mustPress) {
HXLINE(3487)					_hx_tmp1 = !(daNote->modifiedByLua);
            				}
            				else {
HXLINE(3487)					_hx_tmp1 = false;
            				}
HXDLIN(3487)				if (_hx_tmp1) {
HXLINE(3489)					daNote->set_visible(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->visible);
HXLINE(3490)					daNote->set_x(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->x);
HXLINE(3491)					if (!(daNote->isSustainNote)) {
HXLINE(3492)						daNote->modAngle = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            					}
HXLINE(3493)					if (daNote->sustainActive) {
HXLINE(3495)						if (_gthis->executeModchart) {
HXLINE(3496)							daNote->set_alpha(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->alpha);
            						}
            					}
HXLINE(3498)					daNote->modAngle = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            				}
            				else {
HXLINE(3500)					bool _hx_tmp;
HXDLIN(3500)					if (!(daNote->wasGoodHit)) {
HXLINE(3500)						_hx_tmp = !(daNote->modifiedByLua);
            					}
            					else {
HXLINE(3500)						_hx_tmp = false;
            					}
HXDLIN(3500)					if (_hx_tmp) {
HXLINE(3502)						daNote->set_visible(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->visible);
HXLINE(3503)						daNote->set_x(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->x);
HXLINE(3504)						if (!(daNote->isSustainNote)) {
HXLINE(3505)							daNote->modAngle = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            						}
HXLINE(3506)						if (daNote->sustainActive) {
HXLINE(3508)							if (_gthis->executeModchart) {
HXLINE(3509)								daNote->set_alpha(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->alpha);
            							}
            						}
HXLINE(3511)						daNote->modAngle = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            					}
            				}
HXLINE(3514)				bool _hx_tmp2;
HXDLIN(3514)				bool _hx_tmp3;
HXDLIN(3514)				if (!(daNote->mustPress)) {
HXLINE(3514)					_hx_tmp3 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) );
            				}
            				else {
HXLINE(3514)					_hx_tmp3 = false;
            				}
HXDLIN(3514)				if (_hx_tmp3) {
HXLINE(3514)					_hx_tmp2 = !(_gthis->executeModchart);
            				}
            				else {
HXLINE(3514)					_hx_tmp2 = false;
            				}
HXDLIN(3514)				if (_hx_tmp2) {
HXLINE(3515)					daNote->set_alpha(( (Float)(0) ));
            				}
HXLINE(3516)				if (daNote->isSustainNote) {
HXLINE(3518)					{
HXLINE(3518)						 ::Note _g = daNote;
HXDLIN(3518)						Float _g1 = _g->x;
HXDLIN(3518)						_g->set_x((_g1 + ((daNote->get_width() / ( (Float)(2) )) + 20)));
            					}
HXLINE(3519)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(3520)						 ::Note _g = daNote;
HXDLIN(3520)						_g->set_x((_g->x - ( (Float)(11) )));
            					}
            				}
HXLINE(3525)				bool _hx_tmp4;
HXDLIN(3525)				bool _hx_tmp5;
HXDLIN(3525)				if (daNote->isSustainNote) {
HXLINE(3525)					_hx_tmp5 = daNote->wasGoodHit;
            				}
            				else {
HXLINE(3525)					_hx_tmp5 = false;
            				}
HXDLIN(3525)				if (_hx_tmp5) {
HXLINE(3525)					_hx_tmp4 = (::Conductor_obj::songPosition >= daNote->strumTime);
            				}
            				else {
HXLINE(3525)					_hx_tmp4 = false;
            				}
HXDLIN(3525)				if (_hx_tmp4) {
HXLINE(3527)					daNote->set_visible(false);
            				}
HXLINE(3532)				Float diff = ((daNote->strumTime / ::PlayState_obj::songMultiplier) - (::Conductor_obj::songPosition / ::PlayState_obj::songMultiplier));
HXLINE(3534)				Float window = -((( (Float)(::Ratings_obj::timingWindows->__get(0)) ) * ::Conductor_obj::timeScale));
HXLINE(3536)				bool _hx_tmp6;
HXDLIN(3536)				if ((diff < window)) {
HXLINE(3536)					_hx_tmp6 = _gthis->songStarted;
            				}
            				else {
HXLINE(3536)					_hx_tmp6 = false;
            				}
HXDLIN(3536)				if (_hx_tmp6) {
HXLINE(3538)					if (!(daNote->mustPress)) {
HXLINE(3540)						daNote->kill();
HXLINE(3541)						daNote->set_alive(false);
HXLINE(3542)						_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(3543)						daNote->destroy();
            					}
            					else {
HXLINE(3547)						if (daNote->visible) {
HXLINE(3549)							bool _hx_tmp;
HXDLIN(3549)							if (daNote->isSustainNote) {
HXLINE(3549)								_hx_tmp = daNote->wasGoodHit;
            							}
            							else {
HXLINE(3549)								_hx_tmp = false;
            							}
HXDLIN(3549)							if (_hx_tmp) {
HXLINE(3551)								daNote->kill();
HXLINE(3552)								_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
            							}
            							else {
HXLINE(3556)								bool _hx_tmp;
HXDLIN(3556)								if (::PlayState_obj::loadRep) {
HXLINE(3556)									_hx_tmp = daNote->isSustainNote;
            								}
            								else {
HXLINE(3556)									_hx_tmp = false;
            								}
HXDLIN(3556)								if (_hx_tmp) {
HXLINE(3559)									if (::hx::IsNotNull( _gthis->findByTime(daNote->strumTime) )) {
HXLINE(3560)										 ::PlayState _gthis1 = _gthis;
HXDLIN(3560)										_gthis1->totalNotesHit = (_gthis1->totalNotesHit + 1);
            									}
            									else {
HXLINE(3563)										_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(3564)										bool _hx_tmp;
HXDLIN(3564)										if (::PlayState_obj::theFunne) {
HXLINE(3564)											_hx_tmp = !(daNote->isSustainNote);
            										}
            										else {
HXLINE(3564)											_hx_tmp = false;
            										}
HXDLIN(3564)										if (_hx_tmp) {
HXLINE(3566)											_gthis->noteMiss(daNote->noteData,daNote);
            										}
HXLINE(3568)										if (daNote->isParent) {
HXLINE(3570)											 ::PlayState _gthis1 = _gthis;
HXDLIN(3570)											_gthis1->health = (_gthis1->health - ((Float)0.15));
HXLINE(3572)											{
HXLINE(3572)												int _g = 0;
HXDLIN(3572)												::Array< ::Dynamic> _g1 = daNote->children;
HXDLIN(3572)												while((_g < _g1->length)){
HXLINE(3572)													 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3572)													_g = (_g + 1);
HXLINE(3574)													i->set_alpha(((Float)0.3));
HXLINE(3575)													i->sustainActive = false;
            												}
            											}
            										}
            										else {
HXLINE(3580)											bool _hx_tmp;
HXDLIN(3580)											bool _hx_tmp1;
HXDLIN(3580)											bool _hx_tmp2;
HXDLIN(3580)											if (!(daNote->wasGoodHit)) {
HXLINE(3580)												_hx_tmp2 = daNote->isSustainNote;
            											}
            											else {
HXLINE(3580)												_hx_tmp2 = false;
            											}
HXDLIN(3580)											if (_hx_tmp2) {
HXLINE(3580)												_hx_tmp1 = daNote->sustainActive;
            											}
            											else {
HXLINE(3580)												_hx_tmp1 = false;
            											}
HXDLIN(3580)											if (_hx_tmp1) {
HXLINE(3580)												_hx_tmp = (daNote->spotInLine != daNote->parent->children->length);
            											}
            											else {
HXLINE(3580)												_hx_tmp = false;
            											}
HXDLIN(3580)											if (_hx_tmp) {
HXLINE(3587)												{
HXLINE(3587)													int _g = 0;
HXDLIN(3587)													::Array< ::Dynamic> _g1 = daNote->parent->children;
HXDLIN(3587)													while((_g < _g1->length)){
HXLINE(3587)														 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3587)														_g = (_g + 1);
HXLINE(3589)														i->set_alpha(((Float)0.3));
HXLINE(3590)														i->sustainActive = false;
            													}
            												}
HXLINE(3592)												if (daNote->parent->wasGoodHit) {
HXLINE(3594)													::PlayState_obj::misses++;
HXLINE(3595)													 ::PlayState _gthis1 = _gthis;
HXDLIN(3595)													_gthis1->totalNotesHit = (_gthis1->totalNotesHit - ( (Float)(1) ));
            												}
HXLINE(3597)												_gthis->updateAccuracy();
            											}
            											else {
HXLINE(3599)												bool _hx_tmp;
HXDLIN(3599)												if (!(daNote->wasGoodHit)) {
HXLINE(3599)													_hx_tmp = !(daNote->isSustainNote);
            												}
            												else {
HXLINE(3599)													_hx_tmp = false;
            												}
HXDLIN(3599)												if (_hx_tmp) {
HXLINE(3601)													::PlayState_obj::misses++;
HXLINE(3602)													_gthis->updateAccuracy();
HXLINE(3603)													 ::PlayState _gthis1 = _gthis;
HXDLIN(3603)													_gthis1->health = (_gthis1->health - ((Float)0.15));
            												}
            											}
            										}
            									}
            								}
            								else {
HXLINE(3610)									_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(3611)									bool _hx_tmp;
HXDLIN(3611)									if (::PlayState_obj::theFunne) {
HXLINE(3611)										_hx_tmp = !(daNote->isSustainNote);
            									}
            									else {
HXLINE(3611)										_hx_tmp = false;
            									}
HXDLIN(3611)									if (_hx_tmp) {
HXLINE(3613)										if (::PlayStateChangeables_obj::botPlay) {
HXLINE(3615)											daNote->rating = HX_("bad",c5,b1,4a,00);
HXLINE(3616)											_gthis->goodNoteHit(daNote,null());
            										}
            										else {
HXLINE(3619)											_gthis->noteMiss(daNote->noteData,daNote);
            										}
            									}
HXLINE(3621)									bool _hx_tmp1;
HXDLIN(3621)									if (daNote->isParent) {
HXLINE(3621)										_hx_tmp1 = daNote->visible;
            									}
            									else {
HXLINE(3621)										_hx_tmp1 = false;
            									}
HXDLIN(3621)									if (_hx_tmp1) {
HXLINE(3623)										 ::PlayState _gthis1 = _gthis;
HXDLIN(3623)										_gthis1->health = (_gthis1->health - ((Float)0.15));
HXLINE(3625)										{
HXLINE(3625)											int _g = 0;
HXDLIN(3625)											::Array< ::Dynamic> _g1 = daNote->children;
HXDLIN(3625)											while((_g < _g1->length)){
HXLINE(3625)												 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3625)												_g = (_g + 1);
HXLINE(3627)												i->set_alpha(((Float)0.3));
HXLINE(3628)												i->sustainActive = false;
            											}
            										}
            									}
            									else {
HXLINE(3633)										bool _hx_tmp;
HXDLIN(3633)										bool _hx_tmp1;
HXDLIN(3633)										bool _hx_tmp2;
HXDLIN(3633)										if (!(daNote->wasGoodHit)) {
HXLINE(3633)											_hx_tmp2 = daNote->isSustainNote;
            										}
            										else {
HXLINE(3633)											_hx_tmp2 = false;
            										}
HXDLIN(3633)										if (_hx_tmp2) {
HXLINE(3633)											_hx_tmp1 = daNote->sustainActive;
            										}
            										else {
HXLINE(3633)											_hx_tmp1 = false;
            										}
HXDLIN(3633)										if (_hx_tmp1) {
HXLINE(3633)											_hx_tmp = (daNote->spotInLine != daNote->parent->children->length);
            										}
            										else {
HXLINE(3633)											_hx_tmp = false;
            										}
HXDLIN(3633)										if (_hx_tmp) {
HXLINE(3640)											{
HXLINE(3640)												int _g = 0;
HXDLIN(3640)												::Array< ::Dynamic> _g1 = daNote->parent->children;
HXDLIN(3640)												while((_g < _g1->length)){
HXLINE(3640)													 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3640)													_g = (_g + 1);
HXLINE(3642)													i->set_alpha(((Float)0.3));
HXLINE(3643)													i->sustainActive = false;
            												}
            											}
HXLINE(3645)											if (daNote->parent->wasGoodHit) {
HXLINE(3647)												::PlayState_obj::misses++;
HXLINE(3648)												 ::PlayState _gthis1 = _gthis;
HXDLIN(3648)												_gthis1->totalNotesHit = (_gthis1->totalNotesHit - ( (Float)(1) ));
            											}
HXLINE(3650)											_gthis->updateAccuracy();
            										}
            										else {
HXLINE(3652)											bool _hx_tmp;
HXDLIN(3652)											if (!(daNote->wasGoodHit)) {
HXLINE(3652)												_hx_tmp = !(daNote->isSustainNote);
            											}
            											else {
HXLINE(3652)												_hx_tmp = false;
            											}
HXDLIN(3652)											if (_hx_tmp) {
HXLINE(3654)												::PlayState_obj::misses++;
HXLINE(3655)												_gthis->updateAccuracy();
HXLINE(3656)												 ::PlayState _gthis1 = _gthis;
HXDLIN(3656)												_gthis1->health = (_gthis1->health - ((Float)0.15));
            											}
            										}
            									}
            								}
            							}
HXLINE(3661)							daNote->set_visible(false);
HXLINE(3662)							daNote->kill();
HXLINE(3663)							_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
            						}
            						else {
HXLINE(3667)							daNote->kill();
HXLINE(3668)							_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3309)			bool holdArray = ::PlayerSettings_obj::player1->controls->_left->check();
HXDLIN(3309)			bool holdArray1 = ::PlayerSettings_obj::player1->controls->_down->check();
HXDLIN(3309)			bool holdArray2 = ::PlayerSettings_obj::player1->controls->_up->check();
HXDLIN(3309)			::Array< bool > holdArray3 = ::Array_obj< bool >::__new(4)->init(0,holdArray)->init(1,holdArray1)->init(2,holdArray2)->init(3,::PlayerSettings_obj::player1->controls->_right->check());
HXLINE(3310)			Float stepHeight = (((Float)0.45) * ::Conductor_obj::stepCrochet);
HXDLIN(3310)			Float stepHeight1 = (stepHeight * ::flixel::math::FlxMath_obj::roundDecimal(( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ),2));
HXLINE(3312)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_4(_gthis,stepHeight1,holdArray3)),null());
            		}
HXLINE(3675)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) )) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(1)
            			void _hx_run( ::StaticArrow spr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3679_update)
HXLINE(3679)				if (spr->animation->get_finished()) {
HXLINE(3681)					spr->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE(3682)					spr->centerOffsets(null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3677)			::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_5()),null());
            		}
HXLINE(3687)		bool _hx_tmp29;
HXDLIN(3687)		if (!(this->inCutscene)) {
HXLINE(3687)			_hx_tmp29 = this->songStarted;
            		}
            		else {
HXLINE(3687)			_hx_tmp29 = false;
            		}
HXDLIN(3687)		if (_hx_tmp29) {
HXLINE(3688)			this->keyShit();
            		}
HXLINE(3695)		this->hscriptApply(HX_("update",09,86,05,87),null());
HXLINE(3696)		this->hscriptApply2(HX_("update",09,86,05,87),null());
HXLINE(3697)		this->super::update(elapsed);
            	}


 ::Dynamic PlayState_obj::getSectionByTime(Float ms){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3701_getSectionByTime)
HXLINE(3702)		{
HXLINE(3702)			int _g = 0;
HXDLIN(3702)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3702)			while((_g < _g1->length)){
HXLINE(3702)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3702)				_g = (_g + 1);
HXLINE(3704)				Float start = ::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(( (Float)(i->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) )));
HXLINE(3705)				Float end = ::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(( (Float)(i->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic)) )));
HXLINE(3707)				bool _hx_tmp;
HXDLIN(3707)				if ((ms >= start)) {
HXLINE(3707)					_hx_tmp = (ms < end);
            				}
            				else {
HXLINE(3707)					_hx_tmp = false;
            				}
HXDLIN(3707)				if (_hx_tmp) {
HXLINE(3709)					return i;
            				}
            			}
            		}
HXLINE(3713)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getSectionByTime,return )

void PlayState_obj::recalculateAllSectionTimes(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3720_recalculateAllSectionTimes)
HXDLIN(3720)		int _g = 0;
HXDLIN(3720)		int _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3720)		while((_g < _g1)){
HXDLIN(3720)			_g = (_g + 1);
HXDLIN(3720)			int i = (_g - 1);
HXLINE(3722)			 ::Dynamic section =  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i);
HXLINE(3724)			int currentBeat = (4 * i);
HXLINE(3726)			 ::TimingStruct currentSeg = ::TimingStruct_obj::getTimingAtBeat(( (Float)(currentBeat) ));
HXLINE(3728)			if (::hx::IsNull( currentSeg )) {
HXLINE(3729)				return;
            			}
HXLINE(3731)			Float start = ((( (Float)(currentBeat) ) - currentSeg->startBeat) / (currentSeg->bpm / ( (Float)(60) )));
HXLINE(3733)			section->__SetField(HX_("startTime",8f,45,f0,05),((currentSeg->startTime + start) * ( (Float)(1000) )),::hx::paccDynamic);
HXLINE(3735)			if ((i != 0)) {
HXLINE(3736)				 ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((i - 1))->__SetField(HX_("endTime",88,85,21,2f),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(3737)			section->__SetField(HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY,::hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,recalculateAllSectionTimes,(void))

void PlayState_obj::endSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3742_endSong)
HXLINE(3741)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3743)		this->endingSong = true;
HXLINE(3744)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->handleInput_dyn(),null());
HXLINE(3745)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->releaseInput_dyn(),null());
HXLINE(3746)		if (this->useVideo) {
HXLINE(3748)			::GlobalVideo_obj::get()->__Field(HX_("stop",02,f0,5b,4c),::hx::paccDynamic)();
HXLINE(3749)			::PlayState_obj::instance->remove(::PlayState_obj::instance->videoSprite,null()).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE(3752)		if (!(::PlayState_obj::loadRep)) {
HXLINE(3753)			::PlayState_obj::rep->SaveReplay(this->saveNotes,this->saveJudge,this->replayAna);
            		}
            		else {
HXLINE(3756)			::PlayStateChangeables_obj::botPlay = false;
HXLINE(3757)			::PlayStateChangeables_obj::scrollSpeed = (( (Float)(1) ) / ::PlayState_obj::songMultiplier);
HXLINE(3758)			::PlayStateChangeables_obj::useDownscroll = false;
            		}
HXLINE(3761)		if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic),290 )) {
HXLINE(3762)			::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->setFPSCap(( (Float)(290) ));
            		}
HXLINE(3765)		if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3767)			::PlayState_obj::luaModchart->die();
HXLINE(3768)			::PlayState_obj::luaModchart = null();
            		}
HXLINE(3772)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("oneMinutes",59,dd,1b,b6),::hx::paccDynamic),HX_("on",1f,61,00,00) )) {
HXLINE(3774)			::flixel::FlxG_obj::save->data->__SetField(HX_("specialCharter",92,bf,b5,48),HX_("off",6f,93,54,00),::hx::paccDynamic);
HXLINE(3775)			::flixel::FlxG_obj::save->data->__SetField(HX_("oneMinutes",59,dd,1b,b6),HX_("off",6f,93,54,00),::hx::paccDynamic);
            		}
HXLINE(3777)		this->canPause = false;
HXLINE(3778)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE(3779)		this->vocals->set_volume(( (Float)(0) ));
HXLINE(3780)		{
HXLINE(3780)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3780)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(3781)		{
HXLINE(3781)			 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN(3781)			_this1->cleanup(_this1->autoDestroy,true);
            		}
HXLINE(3782)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(3785)			::Highscore_obj::saveScore(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),::Math_obj::round(( (Float)(this->songScore) )),::PlayState_obj::storyDifficulty);
HXLINE(3786)			::String _hx_tmp = ( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) );
HXDLIN(3786)			::String _hx_tmp1 = ::Ratings_obj::GenerateLetterRank(this->accuracy);
HXDLIN(3786)			::Highscore_obj::saveCombo(_hx_tmp,_hx_tmp1,::PlayState_obj::storyDifficulty);
            		}
HXLINE(3790)		if (::PlayState_obj::offsetTesting) {
HXLINE(3792)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3792)			::String library = null();
HXDLIN(3792)			_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
HXLINE(3793)			::PlayState_obj::offsetTesting = false;
HXLINE(3794)			{
HXLINE(3794)				 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::OptionsMenu_obj::__alloc( HX_CTX ,null())) ),false);
HXDLIN(3794)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3794)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(3795)			this->clean();
HXLINE(3796)			::flixel::FlxG_obj::save->data->__SetField(HX_("offset",93,97,3f,60),this->offsetTest,::hx::paccDynamic);
            		}
            		else {
HXLINE(3798)			if (::PlayState_obj::stageTesting) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3801_endSong)
HXLINE(3802)					{
HXLINE(3802)						int _g = 0;
HXDLIN(3802)						::cpp::VirtualArray _g1 = ::PlayState_obj::Stage->toAdd;
HXDLIN(3802)						while((_g < _g1->get_length())){
HXLINE(3802)							 ::Dynamic bg = _g1->__get(_g);
HXDLIN(3802)							_g = (_g + 1);
HXLINE(3804)							_gthis->remove(bg,null()).StaticCast<  ::flixel::FlxBasic >();
            						}
            					}
HXLINE(3806)					{
HXLINE(3806)						int _g2 = 0;
HXDLIN(3806)						::Array< ::Dynamic> _g3 = ::PlayState_obj::Stage->layInFront;
HXDLIN(3806)						while((_g2 < _g3->length)){
HXLINE(3806)							::Array< ::Dynamic> array = _g3->__get(_g2).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(3806)							_g2 = (_g2 + 1);
HXLINE(3808)							{
HXLINE(3808)								int _g = 0;
HXDLIN(3808)								while((_g < array->length)){
HXLINE(3808)									 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(3808)									_g = (_g + 1);
HXLINE(3809)									_gthis->remove(bg,null()).StaticCast<  ::flixel::FlxBasic >();
            								}
            							}
            						}
            					}
HXLINE(3811)					_gthis->remove(::PlayState_obj::boyfriend,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3812)					_gthis->remove(::PlayState_obj::dad,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3813)					_gthis->remove(::PlayState_obj::gf,null()).StaticCast<  ::flixel::FlxBasic >();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(3800)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(3815)				{
HXLINE(3815)					 ::flixel::FlxState nextState =  ::StageDebugState_obj::__alloc( HX_CTX ,::PlayState_obj::Stage->curStage,null(),null(),null());
HXDLIN(3815)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3815)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
            			else {
HXLINE(3819)				if (::PlayState_obj::isStoryMode) {
HXLINE(3821)					 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayState >();
HXDLIN(3821)					::PlayState_obj::campaignScore = (::PlayState_obj::campaignScore + ::Math_obj::round(( (Float)(this->songScore) )));
HXLINE(3822)					 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3822)					::PlayState_obj::campaignMisses = (::PlayState_obj::campaignMisses + ::PlayState_obj::misses);
HXLINE(3823)					 ::Dynamic _hx_tmp2 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3823)					::PlayState_obj::campaignSicks = (::PlayState_obj::campaignSicks + ::PlayState_obj::sicks);
HXLINE(3824)					 ::Dynamic _hx_tmp3 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3824)					::PlayState_obj::campaignGoods = (::PlayState_obj::campaignGoods + ::PlayState_obj::goods);
HXLINE(3825)					 ::Dynamic _hx_tmp4 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3825)					::PlayState_obj::campaignBads = (::PlayState_obj::campaignBads + ::PlayState_obj::bads);
HXLINE(3826)					 ::Dynamic _hx_tmp5 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3826)					::PlayState_obj::campaignShits = (::PlayState_obj::campaignShits + ::PlayState_obj::shits);
HXLINE(3828)					::PlayState_obj::storyPlaylist->remove(::PlayState_obj::storyPlaylist->__get(0));
HXLINE(3830)					if ((::PlayState_obj::storyPlaylist->get_length() <= 0)) {
HXLINE(3832)						this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(3833)						this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(3835)						this->paused = true;
HXLINE(3837)						{
HXLINE(3837)							 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3837)							_this->cleanup(_this->autoDestroy,true);
            						}
HXLINE(3838)						{
HXLINE(3838)							 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN(3838)							_this1->cleanup(_this1->autoDestroy,true);
            						}
HXLINE(3839)						if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("scoreScreen",5e,6c,c3,13),::hx::paccDynamic)) )) {
            							HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            							void _hx_run( ::flixel::util::FlxTimer tmr){
            								HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3850_endSong)
HXLINE(3850)								::PlayState_obj::inResults = true;
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(3841)							if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(3843)								::flixel::tweens::FlxTween_obj::tween(::PlayState_obj::songPosBar, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1,null());
HXLINE(3844)								::flixel::tweens::FlxTween_obj::tween(this->bar, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1,null());
HXLINE(3845)								::flixel::tweens::FlxTween_obj::tween(this->songName, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1,null());
            							}
HXLINE(3847)							this->openSubState( ::ResultsScreen_obj::__alloc( HX_CTX ,null()));
HXLINE(3848)							 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_1()),null());
            						}
            						else {
HXLINE(3855)							::GameplayCustomizeState_obj::freeplayBf = HX_("bf",c4,55,00,00);
HXLINE(3856)							::GameplayCustomizeState_obj::freeplayDad = HX_("dad",47,36,4c,00);
HXLINE(3857)							::GameplayCustomizeState_obj::freeplayGf = HX_("gf",1f,5a,00,00);
HXLINE(3858)							::GameplayCustomizeState_obj::freeplayNoteStyle = HX_("normal",27,72,69,30);
HXLINE(3859)							::GameplayCustomizeState_obj::freeplayStage = HX_("stage",be,6a,0b,84);
HXLINE(3860)							::GameplayCustomizeState_obj::freeplaySong = HX_("bopeebo",b0,01,c5,0c);
HXLINE(3861)							::GameplayCustomizeState_obj::freeplayWeek = 1;
HXLINE(3862)							 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3862)							::String library = null();
HXDLIN(3862)							_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
HXLINE(3863)							::Conductor_obj::changeBPM(( (Float)(102) ),null());
HXLINE(3864)							{
HXLINE(3864)								 ::flixel::FlxState nextState =  ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(3864)								if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3864)									::flixel::FlxG_obj::game->_requestedState = nextState;
            								}
            							}
HXLINE(3865)							this->clean();
            						}
HXLINE(3869)						if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3871)							::PlayState_obj::luaModchart->die();
HXLINE(3872)							::PlayState_obj::luaModchart = null();
            						}
HXLINE(3876)						if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(3878)							::Highscore_obj::saveWeekScore(::PlayState_obj::storyWeek,::PlayState_obj::campaignScore,::PlayState_obj::storyDifficulty);
            						}
            					}
            					else {
HXLINE(3883)						::String diff = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_131,4)->__get(::PlayState_obj::storyDifficulty);
HXLINE(3885)						{
HXLINE(3885)							 ::Dynamic input = (((HX_("PlayState: Loading next story song ",1a,f0,bd,89) + ::Std_obj::string(::PlayState_obj::storyPlaylist->__get(0))) + HX_("-",2d,00,00,00)) + diff);
HXDLIN(3885)							if (::hx::IsNotNull( input )) {
HXLINE(3885)								::cpp::VirtualArray output = ::Debug_obj::formatOutput(input,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),3885,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXDLIN(3885)								::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_INFO);
HXDLIN(3885)								::Debug_obj::writeToLogFile(output,HX_("INFO",6e,00,7c,30));
            							}
            						}
HXLINE(3887)						if ((::StringTools_obj::replace(( (::String)(::PlayState_obj::storyPlaylist->__get(0)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase() == HX_("eggnog",61,04,ba,f4))) {
HXLINE(3889)							 ::flixel::FlxSprite blackShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(-(::flixel::FlxG_obj::width)) ) * ::flixel::FlxG_obj::camera->zoom),(( (Float)(-(::flixel::FlxG_obj::height)) ) * ::flixel::FlxG_obj::camera->zoom),null());
HXDLIN(3889)							 ::flixel::FlxSprite blackShit1 = blackShit->makeGraphic((::flixel::FlxG_obj::width * 3),(::flixel::FlxG_obj::height * 3),-16777216,null(),null());
HXLINE(3891)							blackShit1->scrollFactor->set(null(),null());
HXLINE(3892)							this->add(blackShit1);
HXLINE(3893)							this->camHUD->set_visible(false);
HXLINE(3895)							 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3895)							_hx_tmp->play(::Paths_obj::sound(HX_("Lights_Shut_off",86,a9,43,29),null()),null(),null(),null(),null(),null());
            						}
HXLINE(3898)						::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(3899)						::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE(3900)						::PlayState_obj::prevCamFollow = this->camFollow;
HXLINE(3902)						::PlayState_obj::SONG = ::Song_obj::loadFromJson(( (::String)(::PlayState_obj::storyPlaylist->__get(0)) ),diff);
HXLINE(3903)						{
HXLINE(3903)							 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3903)							_this->cleanup(_this->autoDestroy,true);
            						}
HXLINE(3905)						{
HXLINE(3905)							 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(3905)							if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3905)								::flixel::FlxG_obj::game->_requestedState = nextState;
            							}
            						}
HXLINE(3906)						this->clean();
            					}
            				}
            				else {
HXLINE(3913)					this->paused = true;
HXLINE(3915)					{
HXLINE(3915)						 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3915)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(3916)					{
HXLINE(3916)						 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN(3916)						_this1->cleanup(_this1->autoDestroy,true);
            					}
HXLINE(3918)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("scoreScreen",5e,6c,c3,13),::hx::paccDynamic)) )) {
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer tmr){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3923_endSong)
HXLINE(3923)							::PlayState_obj::inResults = true;
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(3920)						this->openSubState( ::ResultsScreen_obj::__alloc( HX_CTX ,null()));
HXLINE(3921)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_2()),null());
            					}
            					else {
HXLINE(3928)						{
HXLINE(3928)							 ::flixel::FlxState nextState =  ::FreeplayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(3928)							if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3928)								::flixel::FlxG_obj::game->_requestedState = nextState;
            							}
            						}
HXLINE(3929)						this->clean();
            					}
            				}
            			}
            		}
HXLINE(3933)		this->hscriptApply2(HX_("endsong",30,b1,a3,43),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,endSong,(void))

Float PlayState_obj::getRatesScore(Float rate,Float score){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3942_getRatesScore)
HXLINE(3943)		Float rateX = ( (Float)(1) );
HXLINE(3944)		Float lastScore = score;
HXLINE(3945)		Float pr = (rate - ((Float)0.05));
HXLINE(3946)		if ((pr < ((Float)1.00))) {
HXLINE(3947)			pr = ( (Float)(1) );
            		}
HXLINE(3949)		while((rateX <= pr)){
HXLINE(3951)			if ((rateX > pr)) {
HXLINE(3952)				goto _hx_goto_133;
            			}
HXLINE(3953)			lastScore = (score + ((lastScore * rateX) * ((Float)0.022)));
HXLINE(3954)			rateX = (rateX + ((Float)0.05));
            		}
            		_hx_goto_133:;
HXLINE(3957)		int actualScore = ::Math_obj::round((score + (( (Float)(::Math_obj::floor((lastScore * pr))) ) * ((Float)0.022))));
HXLINE(3959)		return ( (Float)(actualScore) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,getRatesScore,return )

void PlayState_obj::popUpScore( ::Note daNote){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3966_popUpScore)
HXLINE(3965)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3967)		Float noteDiff;
HXLINE(3968)		if (::hx::IsNotNull( daNote )) {
HXLINE(3969)			noteDiff = -((daNote->strumTime - ::Conductor_obj::songPosition));
            		}
            		else {
HXLINE(3971)			noteDiff = ::Conductor_obj::safeZoneOffset;
            		}
HXLINE(3972)		Float wife = ::EtternaFunctions_obj::wife3(-(noteDiff),::Conductor_obj::timeScale);
HXLINE(3974)		this->vocals->set_volume(( (Float)(1) ));
HXLINE(3975)		::String placement = ::Std_obj::string(this->combo);
HXLINE(3977)		 ::flixel::text::FlxText coolText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,placement,32,null());
HXLINE(3978)		{
HXLINE(3978)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(3978)			bool _hx_tmp;
HXDLIN(3978)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(3978)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(3978)					_hx_tmp = false;
            				}
            			}
HXDLIN(3978)			if (_hx_tmp) {
HXLINE(3978)				 ::flixel::text::FlxText coolText1 = coolText;
HXDLIN(3978)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(3978)				coolText1->set_x(((( (Float)(_hx_tmp) ) - coolText->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(3978)			bool _hx_tmp1;
HXDLIN(3978)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(3978)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(3978)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(3978)			if (_hx_tmp1) {
HXLINE(3978)				 ::flixel::text::FlxText coolText1 = coolText;
HXDLIN(3978)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(3978)				coolText1->set_y(((( (Float)(_hx_tmp) ) - coolText->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(3979)		coolText->set_x((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.55)));
HXLINE(3980)		{
HXLINE(3980)			 ::flixel::text::FlxText _g = coolText;
HXDLIN(3980)			_g->set_y((_g->y - ( (Float)(350) )));
            		}
HXLINE(3981)		coolText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3984)		 ::flixel::FlxSprite rating =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(3985)		Float score = ( (Float)(350) );
HXLINE(3987)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),1 )) {
HXLINE(3988)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3988)			_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + wife);
            		}
HXLINE(3990)		::String daRating = ::Ratings_obj::judgeNote(noteDiff);
HXLINE(3992)		::String _hx_switch_0 = daRating;
            		if (  (_hx_switch_0==HX_("bad",c5,b1,4a,00)) ){
HXLINE(4004)			daRating = HX_("bad",c5,b1,4a,00);
HXLINE(4005)			score = ( (Float)(0) );
HXLINE(4006)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4006)			_hx_tmp->health = (_hx_tmp->health - ((Float)0.06));
HXLINE(4007)			this->ss = false;
HXLINE(4008)			::PlayState_obj::bads++;
HXLINE(4009)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(4010)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4010)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.50));
            			}
HXLINE(4003)			goto _hx_goto_135;
            		}
            		if (  (_hx_switch_0==HX_("good",3d,95,69,44)) ){
HXLINE(4012)			daRating = HX_("good",3d,95,69,44);
HXLINE(4013)			score = ( (Float)(200) );
HXLINE(4014)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4014)			_hx_tmp->health = (_hx_tmp->health + ((Float)0.1));
HXLINE(4015)			this->ss = false;
HXLINE(4016)			::PlayState_obj::goods++;
HXLINE(4017)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(4018)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4018)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.75));
            			}
HXLINE(4011)			goto _hx_goto_135;
            		}
            		if (  (_hx_switch_0==HX_("shit",c0,cf,52,4c)) ){
HXLINE(3995)			score = ( (Float)(-300) );
HXLINE(3996)			this->combo = 0;
HXLINE(3997)			::PlayState_obj::misses++;
HXLINE(3998)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3998)			_hx_tmp->health = (_hx_tmp->health - ((Float)0.1));
HXLINE(3999)			this->ss = false;
HXLINE(4000)			::PlayState_obj::shits++;
HXLINE(4001)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(4002)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4002)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit - ( (Float)(1) ));
            			}
HXLINE(3994)			goto _hx_goto_135;
            		}
            		if (  (_hx_switch_0==HX_("sick",be,8c,53,4c)) ){
HXLINE(4020)			if ((this->health < 2)) {
HXLINE(4021)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4021)				_hx_tmp->health = (_hx_tmp->health + ((Float)0.3));
            			}
HXLINE(4022)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(4023)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4023)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
            			}
HXLINE(4024)			::PlayState_obj::sicks++;
HXLINE(4026)			 ::flixel::FlxSprite sploosh =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,daNote->x,Dynamic( ::PlayState_obj::playerStrums->members->__get(daNote->noteData)).StaticCast<  ::StaticArrow >()->y,null());
HXLINE(4027)			 ::flixel::graphics::frames::FlxAtlasFrames tex = ::Paths_obj::getSparrowAtlas(HX_("noteSplashes",a7,57,29,8d),HX_("shared",a5,5e,2b,1d),null());
HXLINE(4028)			sploosh->set_frames(tex);
HXLINE(4029)			sploosh->animation->addByPrefix(HX_("splash 0 0",07,1d,fe,7f),HX_("note impact 1 purple",b7,c8,f9,6e),24,false,null(),null());
HXLINE(4030)			sploosh->animation->addByPrefix(HX_("splash 0 1",08,1d,fe,7f),HX_("note impact 1  blue",9f,28,67,5c),24,false,null(),null());
HXLINE(4031)			sploosh->animation->addByPrefix(HX_("splash 0 2",09,1d,fe,7f),HX_("note impact 1 green",a8,64,68,48),24,false,null(),null());
HXLINE(4032)			sploosh->animation->addByPrefix(HX_("splash 0 3",0a,1d,fe,7f),HX_("note impact 1 red",f6,7b,28,9d),24,false,null(),null());
HXLINE(4033)			sploosh->animation->addByPrefix(HX_("splash 1 0",48,df,fe,7f),HX_("note impact 2 purple",d6,3a,2c,a8),24,false,null(),null());
HXLINE(4034)			sploosh->animation->addByPrefix(HX_("splash 1 1",49,df,fe,7f),HX_("note impact 2 blue",b4,4c,11,42),24,false,null(),null());
HXLINE(4035)			sploosh->animation->addByPrefix(HX_("splash 1 2",4a,df,fe,7f),HX_("note impact 2 green",69,db,fd,71),24,false,null(),null());
HXLINE(4036)			sploosh->animation->addByPrefix(HX_("splash 1 3",4b,df,fe,7f),HX_("note impact 2 red",77,10,8f,30),24,false,null(),null());
HXLINE(4037)			if ((daRating == HX_("sick",be,8c,53,4c))) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,sploosh) HXARGC(1)
            				void _hx_run(::String name){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4045_popUpScore)
HXLINE(4045)					sploosh->kill();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(4039)				this->add(sploosh);
HXLINE(4040)				sploosh->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(4041)				 ::flixel::animation::FlxAnimationController sploosh1 = sploosh->animation;
HXDLIN(4041)				::String _hx_tmp = ((HX_("splash ",d9,b8,d8,e5) + ::flixel::FlxG_obj::random->_hx_int(0,1,null())) + HX_(" ",20,00,00,00));
HXDLIN(4041)				sploosh1->play((_hx_tmp + daNote->noteData),null(),null(),null());
HXLINE(4042)				sploosh->set_alpha(((Float)0.6));
HXLINE(4043)				{
HXLINE(4043)					 ::flixel::math::FlxPoint _g = sploosh->offset;
HXDLIN(4043)					_g->set_x((_g->x + 90));
            				}
HXLINE(4044)				{
HXLINE(4044)					 ::flixel::math::FlxPoint _g1 = sploosh->offset;
HXDLIN(4044)					_g1->set_y((_g1->y + 80));
            				}
HXLINE(4045)				sploosh->animation->finishCallback =  ::Dynamic(new _hx_Closure_0(sploosh));
            			}
HXLINE(4019)			goto _hx_goto_135;
            		}
            		_hx_goto_135:;
HXLINE(4049)		if ((::PlayState_obj::songMultiplier >= ((Float)1.05))) {
HXLINE(4050)			score = this->getRatesScore(::PlayState_obj::songMultiplier,score);
            		}
HXLINE(4054)		bool _hx_tmp2;
HXDLIN(4054)		if ((daRating == HX_("shit",c0,cf,52,4c))) {
HXLINE(4054)			_hx_tmp2 = (daRating != HX_("bad",c5,b1,4a,00));
            		}
            		else {
HXLINE(4054)			_hx_tmp2 = true;
            		}
HXDLIN(4054)		if (_hx_tmp2) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4270_popUpScore)
HXLINE(4271)				if (::hx::IsNotNull( _gthis->currentTimingShown )) {
HXLINE(4272)					 ::flixel::text::FlxText _g = _gthis->currentTimingShown;
HXDLIN(4272)					_g->set_alpha((_g->alpha - ((Float)0.02)));
            				}
HXLINE(4273)				_gthis->timeShown++;
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis, ::flixel::text::FlxText,coolText, ::flixel::FlxSprite,comboSpr1, ::flixel::FlxSprite,rating) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4279_popUpScore)
HXLINE(4280)				coolText->destroy();
HXLINE(4281)				comboSpr1->destroy();
HXLINE(4282)				bool _hx_tmp;
HXDLIN(4282)				if (::hx::IsNotNull( _gthis->currentTimingShown )) {
HXLINE(4282)					_hx_tmp = (_gthis->timeShown >= 20);
            				}
            				else {
HXLINE(4282)					_hx_tmp = false;
            				}
HXDLIN(4282)				if (_hx_tmp) {
HXLINE(4284)					_gthis->remove(_gthis->currentTimingShown,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4285)					_gthis->currentTimingShown = null();
            				}
HXLINE(4287)				rating->destroy();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(4056)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4056)			_hx_tmp->songScore = (_hx_tmp->songScore + ::Math_obj::round(score));
HXLINE(4066)			::String pixelShitPart1 = HX_("",00,00,00,00);
HXLINE(4067)			::String pixelShitPart2 = HX_("",00,00,00,00);
HXLINE(4068)			::String pixelShitPart3 = null();
HXLINE(4070)			if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(4072)				pixelShitPart1 = HX_("weeb/pixelUI/",79,62,e4,09);
HXLINE(4073)				pixelShitPart2 = HX_("-pixel",39,03,b3,c0);
HXLINE(4074)				pixelShitPart3 = HX_("shared",a5,5e,2b,1d);
            			}
HXLINE(4077)			 ::flixel::FlxSprite rating1 = rating;
HXDLIN(4077)			rating1->loadGraphic(::Paths_obj::loadImage(((pixelShitPart1 + daRating) + pixelShitPart2),pixelShitPart3),null(),null(),null(),null(),null());
HXLINE(4078)			{
HXLINE(4078)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(4078)				bool _hx_tmp1;
HXDLIN(4078)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE(4078)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE(4078)						_hx_tmp1 = false;
            					}
            				}
HXDLIN(4078)				if (_hx_tmp1) {
HXLINE(4078)					 ::flixel::FlxSprite rating1 = rating;
HXDLIN(4078)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(4078)					rating1->set_x(((( (Float)(_hx_tmp) ) - rating->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(4078)				bool _hx_tmp2;
HXDLIN(4078)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE(4078)						_hx_tmp2 = true;
            					}
            					break;
            					default:{
HXLINE(4078)						_hx_tmp2 = false;
            					}
            				}
HXDLIN(4078)				if (_hx_tmp2) {
HXLINE(4078)					 ::flixel::FlxSprite rating1 = rating;
HXDLIN(4078)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(4078)					rating1->set_y(((( (Float)(_hx_tmp) ) - rating->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE(4079)			{
HXLINE(4079)				 ::flixel::FlxSprite _g = rating;
HXDLIN(4079)				_g->set_y((_g->y - ( (Float)(50) )));
            			}
HXLINE(4080)			rating->set_x((coolText->x - ( (Float)(125) )));
HXLINE(4082)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHit",bf,5d,c0,31),::hx::paccDynamic)) )) {
HXLINE(4084)				rating->set_x(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHitX",b9,a9,91,56),::hx::paccDynamic)) ));
HXLINE(4085)				rating->set_y(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHitY",ba,a9,91,56),::hx::paccDynamic)) ));
            			}
HXLINE(4087)			rating->acceleration->set_y(( (Float)(550) ));
HXLINE(4088)			{
HXLINE(4088)				 ::flixel::math::FlxPoint _g1 = rating->velocity;
HXDLIN(4088)				Float _g2 = _g1->y;
HXDLIN(4088)				_g1->set_y((_g2 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,175,null())) )));
            			}
HXLINE(4089)			{
HXLINE(4089)				 ::flixel::math::FlxPoint _g3 = rating->velocity;
HXDLIN(4089)				Float _g4 = _g3->x;
HXDLIN(4089)				_g3->set_x((_g4 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(0,10,null())) )));
            			}
HXLINE(4091)			Float msTiming = ::HelperFunctions_obj::truncateFloat((noteDiff / ::PlayState_obj::songMultiplier),3);
HXLINE(4092)			bool _hx_tmp3;
HXDLIN(4092)			if (::PlayStateChangeables_obj::botPlay) {
HXLINE(4092)				_hx_tmp3 = !(::PlayState_obj::loadRep);
            			}
            			else {
HXLINE(4092)				_hx_tmp3 = false;
            			}
HXDLIN(4092)			if (_hx_tmp3) {
HXLINE(4093)				msTiming = ( (Float)(0) );
            			}
HXLINE(4095)			if (::PlayState_obj::loadRep) {
HXLINE(4096)				msTiming = ::HelperFunctions_obj::truncateFloat(( (Float)(this->findByTime(daNote->strumTime)->__get(3)) ),3);
            			}
HXLINE(4098)			if (::hx::IsNotNull( this->currentTimingShown )) {
HXLINE(4099)				this->remove(this->currentTimingShown,null());
            			}
HXLINE(4101)			this->currentTimingShown =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("0ms",96,cb,24,00),null(),null());
HXLINE(4102)			this->timeShown = 0;
HXLINE(4103)			::String _hx_switch_1 = daRating;
            			if (  (_hx_switch_1==HX_("good",3d,95,69,44)) ){
HXLINE(4108)				this->currentTimingShown->set_color(-16744448);
HXDLIN(4108)				goto _hx_goto_136;
            			}
            			if (  (_hx_switch_1==HX_("bad",c5,b1,4a,00)) ||  (_hx_switch_1==HX_("shit",c0,cf,52,4c)) ){
HXLINE(4106)				this->currentTimingShown->set_color(-65536);
HXDLIN(4106)				goto _hx_goto_136;
            			}
            			if (  (_hx_switch_1==HX_("sick",be,8c,53,4c)) ){
HXLINE(4110)				this->currentTimingShown->set_color(-16711681);
HXDLIN(4110)				goto _hx_goto_136;
            			}
            			_hx_goto_136:;
HXLINE(4112)			this->currentTimingShown->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXLINE(4113)			this->currentTimingShown->set_borderSize(( (Float)(1) ));
HXLINE(4114)			this->currentTimingShown->set_borderColor(-16777216);
HXLINE(4115)			this->currentTimingShown->set_text((msTiming + HX_("ms",66,5f,00,00)));
HXLINE(4116)			this->currentTimingShown->set_size(20);
HXLINE(4118)			bool _hx_tmp4;
HXDLIN(4118)			if ((msTiming >= ((Float)0.03))) {
HXLINE(4118)				_hx_tmp4 = ::PlayState_obj::offsetTesting;
            			}
            			else {
HXLINE(4118)				_hx_tmp4 = false;
            			}
HXDLIN(4118)			if (_hx_tmp4) {
HXLINE(4121)				this->hits->shift();
HXLINE(4122)				this->hits->shift();
HXLINE(4123)				this->hits->shift();
HXLINE(4124)				this->hits->pop();
HXLINE(4125)				this->hits->pop();
HXLINE(4126)				this->hits->pop();
HXLINE(4127)				this->hits->push(msTiming);
HXLINE(4129)				Float total = ((Float)0.0);
HXLINE(4131)				{
HXLINE(4131)					int _g = 0;
HXDLIN(4131)					::Array< Float > _g1 = this->hits;
HXDLIN(4131)					while((_g < _g1->length)){
HXLINE(4131)						Float i = _g1->__get(_g);
HXDLIN(4131)						_g = (_g + 1);
HXLINE(4132)						total = (total + i);
            					}
            				}
HXLINE(4134)				this->offsetTest = ::HelperFunctions_obj::truncateFloat((total / ( (Float)(this->hits->length) )),2);
            			}
HXLINE(4137)			if ((this->currentTimingShown->alpha != 1)) {
HXLINE(4138)				this->currentTimingShown->set_alpha(( (Float)(1) ));
            			}
HXLINE(4140)			bool _hx_tmp5;
HXDLIN(4140)			if (::PlayStateChangeables_obj::botPlay) {
HXLINE(4140)				_hx_tmp5 = ::PlayState_obj::loadRep;
            			}
            			else {
HXLINE(4140)				_hx_tmp5 = true;
            			}
HXDLIN(4140)			if (_hx_tmp5) {
HXLINE(4141)				this->add(this->currentTimingShown);
            			}
HXLINE(4143)			 ::flixel::FlxSprite comboSpr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(4143)			 ::flixel::FlxSprite comboSpr1 = comboSpr->loadGraphic(::Paths_obj::loadImage(((pixelShitPart1 + HX_("combo",4e,28,5d,4a)) + pixelShitPart2),pixelShitPart3),null(),null(),null(),null(),null());
HXLINE(4144)			{
HXLINE(4144)				 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(4144)				bool _hx_tmp6;
HXDLIN(4144)				switch((int)(axes1->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE(4144)						_hx_tmp6 = true;
            					}
            					break;
            					default:{
HXLINE(4144)						_hx_tmp6 = false;
            					}
            				}
HXDLIN(4144)				if (_hx_tmp6) {
HXLINE(4144)					 ::flixel::FlxSprite comboSpr = comboSpr1;
HXDLIN(4144)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(4144)					comboSpr->set_x(((( (Float)(_hx_tmp) ) - comboSpr1->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(4144)				bool _hx_tmp7;
HXDLIN(4144)				switch((int)(axes1->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE(4144)						_hx_tmp7 = true;
            					}
            					break;
            					default:{
HXLINE(4144)						_hx_tmp7 = false;
            					}
            				}
HXDLIN(4144)				if (_hx_tmp7) {
HXLINE(4144)					 ::flixel::FlxSprite comboSpr = comboSpr1;
HXDLIN(4144)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(4144)					comboSpr->set_y(((( (Float)(_hx_tmp) ) - comboSpr1->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE(4145)			comboSpr1->set_x(rating->x);
HXLINE(4146)			comboSpr1->set_y((rating->y + 100));
HXLINE(4147)			comboSpr1->acceleration->set_y(( (Float)(600) ));
HXLINE(4148)			{
HXLINE(4148)				 ::flixel::math::FlxPoint _g5 = comboSpr1->velocity;
HXDLIN(4148)				_g5->set_y((_g5->y - ( (Float)(150) )));
            			}
HXLINE(4150)			{
HXLINE(4150)				 ::flixel::text::FlxText _this = this->currentTimingShown;
HXDLIN(4150)				 ::flixel::util::FlxAxes axes2 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(4150)				bool _hx_tmp8;
HXDLIN(4150)				switch((int)(axes2->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE(4150)						_hx_tmp8 = true;
            					}
            					break;
            					default:{
HXLINE(4150)						_hx_tmp8 = false;
            					}
            				}
HXDLIN(4150)				if (_hx_tmp8) {
HXLINE(4150)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(4150)					_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(4150)				bool _hx_tmp9;
HXDLIN(4150)				switch((int)(axes2->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE(4150)						_hx_tmp9 = true;
            					}
            					break;
            					default:{
HXLINE(4150)						_hx_tmp9 = false;
            					}
            				}
HXDLIN(4150)				if (_hx_tmp9) {
HXLINE(4150)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(4150)					_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE(4151)			this->currentTimingShown->set_x((comboSpr1->x + 100));
HXLINE(4152)			this->currentTimingShown->set_y((rating->y + 100));
HXLINE(4153)			this->currentTimingShown->acceleration->set_y(( (Float)(600) ));
HXLINE(4154)			{
HXLINE(4154)				 ::flixel::math::FlxPoint _g6 = this->currentTimingShown->velocity;
HXDLIN(4154)				_g6->set_y((_g6->y - ( (Float)(150) )));
            			}
HXLINE(4156)			{
HXLINE(4156)				 ::flixel::math::FlxPoint _g7 = comboSpr1->velocity;
HXDLIN(4156)				Float _g8 = _g7->x;
HXDLIN(4156)				_g7->set_x((_g8 + ::flixel::FlxG_obj::random->_hx_int(1,10,null())));
            			}
HXLINE(4157)			{
HXLINE(4157)				 ::flixel::math::FlxPoint _g9 = this->currentTimingShown->velocity;
HXDLIN(4157)				_g9->set_x((_g9->x + comboSpr1->velocity->x));
            			}
HXLINE(4158)			bool _hx_tmp10;
HXDLIN(4158)			if (::PlayStateChangeables_obj::botPlay) {
HXLINE(4158)				_hx_tmp10 = ::PlayState_obj::loadRep;
            			}
            			else {
HXLINE(4158)				_hx_tmp10 = true;
            			}
HXDLIN(4158)			if (_hx_tmp10) {
HXLINE(4159)				this->add(rating);
            			}
HXLINE(4161)			if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(4163)				 ::flixel::FlxSprite rating1 = rating;
HXDLIN(4163)				rating1->setGraphicSize(::Std_obj::_hx_int((rating->get_width() * ((Float)0.7))),null());
HXLINE(4164)				rating->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(4165)				 ::flixel::FlxSprite comboSpr = comboSpr1;
HXDLIN(4165)				comboSpr->setGraphicSize(::Std_obj::_hx_int((comboSpr1->get_width() * ((Float)0.7))),null());
HXLINE(4166)				comboSpr1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4170)				 ::flixel::FlxSprite rating1 = rating;
HXDLIN(4170)				Float _hx_tmp = rating->get_width();
HXDLIN(4170)				rating1->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp * ::CoolUtil_obj::daPixelZoom) * ((Float)0.7))),null());
HXLINE(4171)				 ::flixel::FlxSprite comboSpr = comboSpr1;
HXDLIN(4171)				Float _hx_tmp1 = comboSpr1->get_width();
HXDLIN(4171)				comboSpr->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp1 * ::CoolUtil_obj::daPixelZoom) * ((Float)0.7))),null());
            			}
HXLINE(4174)			this->currentTimingShown->updateHitbox();
HXLINE(4175)			comboSpr1->updateHitbox();
HXLINE(4176)			rating->updateHitbox();
HXLINE(4178)			this->currentTimingShown->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(4179)			comboSpr1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(4180)			rating->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(4182)			::Array< int > seperatedScore = ::Array_obj< int >::__new(0);
HXLINE(4184)			::Array< ::String > comboSplit = (this->combo + HX_("",00,00,00,00)).split(HX_("",00,00,00,00));
HXLINE(4186)			if ((this->combo > ::PlayState_obj::highestCombo)) {
HXLINE(4187)				::PlayState_obj::highestCombo = this->combo;
            			}
HXLINE(4190)			if ((comboSplit->length == 1)) {
HXLINE(4192)				seperatedScore->push(0);
HXLINE(4193)				seperatedScore->push(0);
            			}
            			else {
HXLINE(4195)				if ((comboSplit->length == 2)) {
HXLINE(4196)					seperatedScore->push(0);
            				}
            			}
HXLINE(4198)			{
HXLINE(4198)				int _g10 = 0;
HXDLIN(4198)				int _g11 = comboSplit->length;
HXDLIN(4198)				while((_g10 < _g11)){
HXLINE(4198)					_g10 = (_g10 + 1);
HXDLIN(4198)					int i = (_g10 - 1);
HXLINE(4200)					::String str = comboSplit->__get(i);
HXLINE(4201)					seperatedScore->push(::Std_obj::parseInt(str));
            				}
            			}
HXLINE(4204)			int daLoop = 0;
HXLINE(4205)			{
HXLINE(4205)				int _g12 = 0;
HXDLIN(4205)				while((_g12 < seperatedScore->length)){
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::flixel::FlxSprite,numScore1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4234_popUpScore)
HXLINE(4235)						_gthis->visibleCombos->remove(numScore1);
HXLINE(4236)						numScore1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::flixel::FlxSprite,numScore1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4240_popUpScore)
HXLINE(4240)						if (!(_gthis->visibleCombos->contains(numScore1))) {
HXLINE(4242)							tween->cancel();
HXLINE(4243)							numScore1->destroy();
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(4205)					int i = seperatedScore->__get(_g12);
HXDLIN(4205)					_g12 = (_g12 + 1);
HXLINE(4207)					 ::flixel::FlxSprite numScore =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(4207)					 ::flixel::FlxSprite numScore1 = numScore->loadGraphic(::Paths_obj::loadImage((((pixelShitPart1 + HX_("num",46,de,53,00)) + ::Std_obj::_hx_int(( (Float)(i) ))) + pixelShitPart2),pixelShitPart3),null(),null(),null(),null(),null());
HXLINE(4208)					{
HXLINE(4208)						 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(4208)						bool _hx_tmp;
HXDLIN(4208)						switch((int)(axes->_hx_getIndex())){
            							case (int)0: case (int)2: {
HXLINE(4208)								_hx_tmp = true;
            							}
            							break;
            							default:{
HXLINE(4208)								_hx_tmp = false;
            							}
            						}
HXDLIN(4208)						if (_hx_tmp) {
HXLINE(4208)							 ::flixel::FlxSprite numScore = numScore1;
HXDLIN(4208)							int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(4208)							numScore->set_x(((( (Float)(_hx_tmp) ) - numScore1->get_width()) / ( (Float)(2) )));
            						}
HXDLIN(4208)						bool _hx_tmp1;
HXDLIN(4208)						switch((int)(axes->_hx_getIndex())){
            							case (int)1: case (int)2: {
HXLINE(4208)								_hx_tmp1 = true;
            							}
            							break;
            							default:{
HXLINE(4208)								_hx_tmp1 = false;
            							}
            						}
HXDLIN(4208)						if (_hx_tmp1) {
HXLINE(4208)							 ::flixel::FlxSprite numScore = numScore1;
HXDLIN(4208)							int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(4208)							numScore->set_y(((( (Float)(_hx_tmp) ) - numScore1->get_height()) / ( (Float)(2) )));
            						}
            					}
HXLINE(4209)					numScore1->set_x(((rating->x + (43 * daLoop)) - ( (Float)(50) )));
HXLINE(4210)					numScore1->set_y((rating->y + 100));
HXLINE(4211)					numScore1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(4213)					if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(4215)						numScore1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(4216)						 ::flixel::FlxSprite numScore = numScore1;
HXDLIN(4216)						numScore->setGraphicSize(::Std_obj::_hx_int((numScore1->get_width() * ((Float)0.5))),null());
            					}
            					else {
HXLINE(4220)						 ::flixel::FlxSprite numScore = numScore1;
HXDLIN(4220)						Float _hx_tmp = numScore1->get_width();
HXDLIN(4220)						numScore->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::CoolUtil_obj::daPixelZoom)),null());
            					}
HXLINE(4222)					numScore1->updateHitbox();
HXLINE(4224)					 ::flixel::math::FlxPoint numScore2 = numScore1->acceleration;
HXDLIN(4224)					numScore2->set_y(( (Float)(::flixel::FlxG_obj::random->_hx_int(200,300,null())) ));
HXLINE(4225)					{
HXLINE(4225)						 ::flixel::math::FlxPoint _g = numScore1->velocity;
HXDLIN(4225)						Float _g1 = _g->y;
HXDLIN(4225)						_g->set_y((_g1 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,160,null())) )));
            					}
HXLINE(4226)					 ::flixel::math::FlxPoint numScore3 = numScore1->velocity;
HXDLIN(4226)					numScore3->set_x(::flixel::FlxG_obj::random->_hx_float(-5,5,null()));
HXLINE(4228)					this->add(numScore1);
HXLINE(4230)					this->visibleCombos->push(numScore1);
HXLINE(4232)					::flixel::tweens::FlxTween_obj::tween(numScore1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.002)))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis,numScore1)))
            						->setFixed(2,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_2(_gthis,numScore1)))));
HXLINE(4249)					if ((this->visibleCombos->length > (seperatedScore->length + 20))) {
HXLINE(4251)						int _g = 0;
HXDLIN(4251)						int _g1 = (seperatedScore->length - 1);
HXDLIN(4251)						while((_g < _g1)){
HXLINE(4251)							_g = (_g + 1);
HXDLIN(4251)							int i = (_g - 1);
HXLINE(4253)							this->visibleCombos->remove(this->visibleCombos->__get((this->visibleCombos->length - 1)).StaticCast<  ::flixel::FlxSprite >());
            						}
            					}
HXLINE(4257)					daLoop = (daLoop + 1);
            				}
            			}
HXLINE(4264)			 ::flixel::text::FlxText coolText1 = coolText;
HXDLIN(4264)			coolText1->set_text(::Std_obj::string(seperatedScore));
HXLINE(4267)			::flixel::tweens::FlxTween_obj::tween(rating, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))
            				->setFixed(1,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_3(_gthis)))));
HXLINE(4277)			::flixel::tweens::FlxTween_obj::tween(comboSpr1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_4(_gthis,coolText,comboSpr1,rating)))));
HXLINE(4292)			 ::PlayState _hx_tmp11 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4292)			_hx_tmp11->curSection = (_hx_tmp11->curSection + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,popUpScore,(void))

bool PlayState_obj::NearlyEquals(Float value1,Float value2,::hx::Null< Float >  __o_unimportantDifference){
            		Float unimportantDifference = __o_unimportantDifference.Default(10);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4298_NearlyEquals)
HXDLIN(4298)		Float _hx_tmp = ::flixel::math::FlxMath_obj::roundDecimal(value1,1);
HXDLIN(4298)		return (::Math_obj::abs((_hx_tmp - ::flixel::math::FlxMath_obj::roundDecimal(value2,1))) < unimportantDifference);
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,NearlyEquals,return )

void PlayState_obj::keyShit(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::StaticArrow spr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4500_keyShit)
HXLINE(4500)			if (!(::PlayStateChangeables_obj::botPlay)) {
HXLINE(4502)				bool _hx_tmp;
HXDLIN(4502)				bool _hx_tmp1;
HXDLIN(4502)				bool _hx_tmp2;
HXDLIN(4502)				if (_gthis->keys->__get(spr->ID)) {
HXLINE(4502)					_hx_tmp2 = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            				}
            				else {
HXLINE(4502)					_hx_tmp2 = false;
            				}
HXDLIN(4502)				if (_hx_tmp2) {
HXLINE(4502)					_hx_tmp1 = (spr->animation->_curAnim->name != HX_("pressed",a2,d2,e6,39));
            				}
            				else {
HXLINE(4502)					_hx_tmp1 = false;
            				}
HXDLIN(4502)				if (_hx_tmp1) {
HXLINE(4502)					_hx_tmp = !(::StringTools_obj::startsWith(spr->animation->_curAnim->name,HX_("dirCon",f5,88,50,bc)));
            				}
            				else {
HXLINE(4502)					_hx_tmp = false;
            				}
HXDLIN(4502)				if (_hx_tmp) {
HXLINE(4506)					spr->playAnim(HX_("pressed",a2,d2,e6,39),false);
            				}
HXLINE(4507)				if (!(_gthis->keys->__get(spr->ID))) {
HXLINE(4508)					spr->playAnim(HX_("static",ae,dc,fb,05),false);
            				}
            			}
            			else {
HXLINE(4510)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) )) {
HXLINE(4512)					if (spr->animation->get_finished()) {
HXLINE(4513)						spr->playAnim(HX_("static",ae,dc,fb,05),null());
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4309_keyShit)
HXLINE(4308)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4311)		bool holdArray = ::PlayerSettings_obj::player1->controls->_left->check();
HXDLIN(4311)		bool holdArray1 = ::PlayerSettings_obj::player1->controls->_down->check();
HXDLIN(4311)		bool holdArray2 = ::PlayerSettings_obj::player1->controls->_up->check();
HXDLIN(4311)		::Array< bool > holdArray3 = ::Array_obj< bool >::__new(4)->init(0,holdArray)->init(1,holdArray1)->init(2,holdArray2)->init(3,::PlayerSettings_obj::player1->controls->_right->check());
HXLINE(4312)		bool pressArray = ::PlayerSettings_obj::player1->controls->_leftP->check();
HXDLIN(4312)		bool pressArray1 = ::PlayerSettings_obj::player1->controls->_downP->check();
HXDLIN(4312)		bool pressArray2 = ::PlayerSettings_obj::player1->controls->_upP->check();
HXDLIN(4312)		::Array< bool > pressArray3 = ::Array_obj< bool >::__new(4)->init(0,pressArray)->init(1,pressArray1)->init(2,pressArray2)->init(3,::PlayerSettings_obj::player1->controls->_rightP->check());
HXLINE(4313)		bool releaseArray = ::PlayerSettings_obj::player1->controls->_leftR->check();
HXDLIN(4313)		bool releaseArray1 = ::PlayerSettings_obj::player1->controls->_downR->check();
HXDLIN(4313)		bool releaseArray2 = ::PlayerSettings_obj::player1->controls->_upR->check();
HXDLIN(4313)		::Array< bool > releaseArray3 = ::Array_obj< bool >::__new(4)->init(0,releaseArray)->init(1,releaseArray1)->init(2,releaseArray2)->init(3,::PlayerSettings_obj::player1->controls->_rightR->check());
HXLINE(4314)		::Array< ::String > keynameArray = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_159,4);
HXLINE(4316)		if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(4318)			{
HXLINE(4318)				int _g = 0;
HXDLIN(4318)				int _g1 = pressArray3->length;
HXDLIN(4318)				while((_g < _g1)){
HXLINE(4318)					_g = (_g + 1);
HXDLIN(4318)					int i = (_g - 1);
HXLINE(4320)					if ((pressArray3->__get(i) == true)) {
HXLINE(4322)						::PlayState_obj::luaModchart->executeState(HX_("keyPressed",c3,72,6e,a8),::cpp::VirtualArray_obj::__new(1)->init(0,keynameArray->__get(i)));
            					}
            				}
            			}
HXLINE(4326)			{
HXLINE(4326)				int _g2 = 0;
HXDLIN(4326)				int _g3 = releaseArray3->length;
HXDLIN(4326)				while((_g2 < _g3)){
HXLINE(4326)					_g2 = (_g2 + 1);
HXDLIN(4326)					int i = (_g2 - 1);
HXLINE(4328)					if ((releaseArray3->__get(i) == true)) {
HXLINE(4330)						::PlayState_obj::luaModchart->executeState(HX_("keyReleased",7c,05,0c,bf),::cpp::VirtualArray_obj::__new(1)->init(0,keynameArray->__get(i)));
            					}
            				}
            			}
            		}
HXLINE(4337)		if (::PlayStateChangeables_obj::botPlay) {
HXLINE(4339)			holdArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_160,4);
HXLINE(4340)			pressArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_161,4);
HXLINE(4341)			releaseArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_162,4);
            		}
HXLINE(4344)		::Array< ::Dynamic> anas = ::Array_obj< ::Dynamic>::__new(4)->init(0,null())->init(1,null())->init(2,null())->init(3,null());
HXLINE(4346)		{
HXLINE(4346)			int _g = 0;
HXDLIN(4346)			int _g1 = pressArray3->length;
HXDLIN(4346)			while((_g < _g1)){
HXLINE(4346)				_g = (_g + 1);
HXDLIN(4346)				int i = (_g - 1);
HXLINE(4347)				if (pressArray3->__get(i)) {
HXLINE(4348)					anas[i] =  ::Ana_obj::__alloc( HX_CTX ,::Conductor_obj::songPosition,null(),false,HX_("miss",fc,52,5c,48),i);
            				}
            			}
            		}
HXLINE(4351)		bool _hx_tmp;
HXDLIN(4351)		if (holdArray3->contains(true)) {
HXLINE(4351)			_hx_tmp = this->generatedMusic;
            		}
            		else {
HXLINE(4351)			_hx_tmp = false;
            		}
HXDLIN(4351)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis,::Array< bool >,holdArray3) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4355_keyShit)
HXLINE(4355)				bool _hx_tmp;
HXDLIN(4355)				bool _hx_tmp1;
HXDLIN(4355)				bool _hx_tmp2;
HXDLIN(4355)				bool _hx_tmp3;
HXDLIN(4355)				if (daNote->isSustainNote) {
HXLINE(4355)					_hx_tmp3 = daNote->canBeHit;
            				}
            				else {
HXLINE(4355)					_hx_tmp3 = false;
            				}
HXDLIN(4355)				if (_hx_tmp3) {
HXLINE(4355)					_hx_tmp2 = daNote->mustPress;
            				}
            				else {
HXLINE(4355)					_hx_tmp2 = false;
            				}
HXDLIN(4355)				if (_hx_tmp2) {
HXLINE(4355)					_hx_tmp1 = holdArray3->__get(daNote->noteData);
            				}
            				else {
HXLINE(4355)					_hx_tmp1 = false;
            				}
HXDLIN(4355)				if (_hx_tmp1) {
HXLINE(4355)					_hx_tmp = daNote->sustainActive;
            				}
            				else {
HXLINE(4355)					_hx_tmp = false;
            				}
HXDLIN(4355)				if (_hx_tmp) {
HXLINE(4357)					_gthis->goodNoteHit(daNote,null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(4353)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,holdArray3)),null());
            		}
HXLINE(4362)		bool _hx_tmp1;
HXDLIN(4362)		if (::KeyBinds_obj::gamepad) {
HXLINE(4362)			_hx_tmp1 = !(( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justPressed) )->get_ANY());
            		}
            		else {
HXLINE(4362)			_hx_tmp1 = false;
            		}
HXDLIN(4362)		if (_hx_tmp1) {
HXLINE(4365)			bool _hx_tmp;
HXDLIN(4365)			if (pressArray3->contains(true)) {
HXLINE(4365)				_hx_tmp = this->generatedMusic;
            			}
            			else {
HXLINE(4365)				_hx_tmp = false;
            			}
HXDLIN(4365)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,possibleNotes,::Array< ::Dynamic>,dumbNotes,::Array< int >,directionList,::Array< bool >,directionsAccounted) HXARGC(1)
            				void _hx_run( ::Note daNote){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4376_keyShit)
HXLINE(4376)					bool _hx_tmp;
HXDLIN(4376)					bool _hx_tmp1;
HXDLIN(4376)					bool _hx_tmp2;
HXDLIN(4376)					if (daNote->canBeHit) {
HXLINE(4376)						_hx_tmp2 = daNote->mustPress;
            					}
            					else {
HXLINE(4376)						_hx_tmp2 = false;
            					}
HXDLIN(4376)					if (_hx_tmp2) {
HXLINE(4376)						_hx_tmp1 = !(daNote->wasGoodHit);
            					}
            					else {
HXLINE(4376)						_hx_tmp1 = false;
            					}
HXDLIN(4376)					if (_hx_tmp1) {
HXLINE(4376)						_hx_tmp = !(directionsAccounted->__get(daNote->noteData));
            					}
            					else {
HXLINE(4376)						_hx_tmp = false;
            					}
HXDLIN(4376)					if (_hx_tmp) {
HXLINE(4378)						if (directionList->contains(daNote->noteData)) {
HXLINE(4380)							directionsAccounted[daNote->noteData] = true;
HXLINE(4381)							{
HXLINE(4381)								int _g = 0;
HXDLIN(4381)								while((_g < possibleNotes->length)){
HXLINE(4381)									 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(4381)									_g = (_g + 1);
HXLINE(4383)									bool _hx_tmp;
HXDLIN(4383)									if ((coolNote->noteData == daNote->noteData)) {
HXLINE(4383)										_hx_tmp = (::Math_obj::abs((daNote->strumTime - coolNote->strumTime)) < 10);
            									}
            									else {
HXLINE(4383)										_hx_tmp = false;
            									}
HXDLIN(4383)									if (_hx_tmp) {
HXLINE(4386)										dumbNotes->push(daNote);
HXLINE(4387)										goto _hx_goto_151;
            									}
            									else {
HXLINE(4389)										bool _hx_tmp;
HXDLIN(4389)										if ((coolNote->noteData == daNote->noteData)) {
HXLINE(4389)											_hx_tmp = (daNote->strumTime < coolNote->strumTime);
            										}
            										else {
HXLINE(4389)											_hx_tmp = false;
            										}
HXDLIN(4389)										if (_hx_tmp) {
HXLINE(4391)											possibleNotes->remove(coolNote);
HXLINE(4392)											possibleNotes->push(daNote);
HXLINE(4393)											goto _hx_goto_151;
            										}
            									}
            								}
            								_hx_goto_151:;
            							}
            						}
            						else {
HXLINE(4399)							directionsAccounted[daNote->noteData] = true;
HXLINE(4400)							possibleNotes->push(daNote);
HXLINE(4401)							directionList->push(daNote->noteData);
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            				int _hx_run( ::Note a, ::Note b){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4414_keyShit)
HXLINE(4414)					return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE(4367)				::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
HXLINE(4369)				::Array< ::Dynamic> possibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4370)				::Array< int > directionList = ::Array_obj< int >::__new(0);
HXLINE(4371)				::Array< ::Dynamic> dumbNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4372)				::Array< bool > directionsAccounted = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_166,4);
HXLINE(4374)				this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(possibleNotes,dumbNotes,directionList,directionsAccounted)),null());
HXLINE(4406)				{
HXLINE(4406)					int _g = 0;
HXDLIN(4406)					while((_g < dumbNotes->length)){
HXLINE(4406)						 ::Note note = dumbNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(4406)						_g = (_g + 1);
HXLINE(4409)						note->kill();
HXLINE(4410)						this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(4411)						note->destroy();
            					}
            				}
HXLINE(4414)				possibleNotes->sort( ::Dynamic(new _hx_Closure_2()));
HXLINE(4416)				::Array< bool > hit = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_167,4);
HXLINE(4418)				if (this->perfectMode) {
HXLINE(4419)					this->goodNoteHit(possibleNotes->__get(0).StaticCast<  ::Note >(),null());
            				}
            				else {
HXLINE(4420)					if ((possibleNotes->length > 0)) {
HXLINE(4422)						if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(4424)							int _g = 0;
HXDLIN(4424)							int _g1 = pressArray3->length;
HXDLIN(4424)							while((_g < _g1)){
HXLINE(4424)								_g = (_g + 1);
HXDLIN(4424)								int shit = (_g - 1);
HXLINE(4426)								bool _hx_tmp;
HXDLIN(4426)								if (pressArray3->__get(shit)) {
HXLINE(4426)									_hx_tmp = !(directionList->contains(shit));
            								}
            								else {
HXLINE(4426)									_hx_tmp = false;
            								}
HXDLIN(4426)								if (_hx_tmp) {
HXLINE(4427)									this->noteMiss(shit,null());
            								}
            							}
            						}
HXLINE(4430)						{
HXLINE(4430)							int _g = 0;
HXDLIN(4430)							while((_g < possibleNotes->length)){
HXLINE(4430)								 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(4430)								_g = (_g + 1);
HXLINE(4432)								bool _hx_tmp;
HXDLIN(4432)								if (pressArray3->__get(coolNote->noteData)) {
HXLINE(4432)									_hx_tmp = !(hit->__get(coolNote->noteData));
            								}
            								else {
HXLINE(4432)									_hx_tmp = false;
            								}
HXDLIN(4432)								if (_hx_tmp) {
HXLINE(4434)									if ((this->mashViolations != 0)) {
HXLINE(4435)										this->mashViolations--;
            									}
HXLINE(4436)									hit[coolNote->noteData] = true;
HXLINE(4437)									this->scoreTxt->set_color(-1);
HXLINE(4438)									Float noteDiff = -((coolNote->strumTime - ::Conductor_obj::songPosition));
HXLINE(4439)									anas->__get(coolNote->noteData).StaticCast<  ::Ana >()->hit = true;
HXLINE(4440)									anas->__get(coolNote->noteData).StaticCast<  ::Ana >()->hitJudge = ::Ratings_obj::judgeNote(noteDiff);
HXLINE(4441)									anas->__get(coolNote->noteData).StaticCast<  ::Ana >()->nearestNote = ::cpp::VirtualArray_obj::__new(3)->init(0,coolNote->strumTime)->init(1,coolNote->noteData)->init(2,coolNote->sustainLength);
HXLINE(4442)									this->goodNoteHit(coolNote,null());
            								}
            							}
            						}
            					}
            				}
HXLINE(4447)				bool _hx_tmp;
HXDLIN(4447)				if ((::PlayState_obj::boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * ( (Float)(4) )) * ((Float)0.001)))) {
HXLINE(4447)					if (holdArray3->contains(true)) {
HXLINE(4447)						_hx_tmp = ::PlayStateChangeables_obj::botPlay;
            					}
            					else {
HXLINE(4447)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE(4447)					_hx_tmp = false;
            				}
HXDLIN(4447)				if (_hx_tmp) {
HXLINE(4449)					bool _hx_tmp;
HXDLIN(4449)					if (::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE(4449)						_hx_tmp = !(::StringTools_obj::endsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            					}
            					else {
HXLINE(4449)						_hx_tmp = false;
            					}
HXDLIN(4449)					if (_hx_tmp) {
HXLINE(4450)						::PlayState_obj::boyfriend->dance(null(),null());
            					}
            				}
            				else {
HXLINE(4452)					if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(4454)						int _g = 0;
HXDLIN(4454)						int _g1 = pressArray3->length;
HXDLIN(4454)						while((_g < _g1)){
HXLINE(4454)							_g = (_g + 1);
HXDLIN(4454)							int shit = (_g - 1);
HXLINE(4455)							if (pressArray3->__get(shit)) {
HXLINE(4456)								this->noteMiss(shit,null());
            							}
            						}
            					}
            				}
            			}
HXLINE(4460)			if (!(::PlayState_obj::loadRep)) {
HXLINE(4461)				int _g = 0;
HXDLIN(4461)				while((_g < anas->length)){
HXLINE(4461)					 ::Ana i = anas->__get(_g).StaticCast<  ::Ana >();
HXDLIN(4461)					_g = (_g + 1);
HXLINE(4462)					if (::hx::IsNotNull( i )) {
HXLINE(4463)						this->replayAna->anaArray->push(i);
            					}
            				}
            			}
            		}
HXLINE(4465)		if (::PlayStateChangeables_obj::botPlay) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4468_keyShit)
HXLINE(4468)				bool _hx_tmp;
HXDLIN(4468)				if (daNote->mustPress) {
HXLINE(4468)					_hx_tmp = (::Conductor_obj::songPosition >= daNote->strumTime);
            				}
            				else {
HXLINE(4468)					_hx_tmp = false;
            				}
HXDLIN(4468)				if (_hx_tmp) {
HXLINE(4471)					if (::PlayState_obj::loadRep) {
HXLINE(4474)						::cpp::VirtualArray n = _gthis->findByTime(daNote->strumTime);
HXLINE(4476)						if (::hx::IsNotNull( n )) {
HXLINE(4478)							_gthis->goodNoteHit(daNote,null());
HXLINE(4479)							::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
            						}
            					}
            					else {
HXLINE(4484)						_gthis->goodNoteHit(daNote,null());
HXLINE(4485)						::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(4466)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_3(_gthis)),null());
            		}
HXLINE(4490)		bool _hx_tmp2;
HXDLIN(4490)		if ((::PlayState_obj::boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * ( (Float)(4) )) * ((Float)0.001)))) {
HXLINE(4490)			if (holdArray3->contains(true)) {
HXLINE(4490)				_hx_tmp2 = ::PlayStateChangeables_obj::botPlay;
            			}
            			else {
HXLINE(4490)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE(4490)			_hx_tmp2 = false;
            		}
HXDLIN(4490)		if (_hx_tmp2) {
HXLINE(4492)			bool _hx_tmp;
HXDLIN(4492)			bool _hx_tmp1;
HXDLIN(4492)			if (::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE(4492)				_hx_tmp1 = !(::StringTools_obj::endsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            			}
            			else {
HXLINE(4492)				_hx_tmp1 = false;
            			}
HXDLIN(4492)			if (_hx_tmp1) {
HXLINE(4494)				if ((::PlayState_obj::boyfriend->animation->_curAnim->curFrame < 10)) {
HXLINE(4492)					_hx_tmp = ::PlayState_obj::boyfriend->animation->_curAnim->finished;
            				}
            				else {
HXLINE(4492)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(4492)				_hx_tmp = false;
            			}
HXDLIN(4492)			if (_hx_tmp) {
HXLINE(4495)				::PlayState_obj::boyfriend->dance(null(),null());
            			}
            		}
HXLINE(4498)		::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_4(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,keyShit,(void))

::cpp::VirtualArray PlayState_obj::findByTime(Float time){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4519_findByTime)
HXLINE(4520)		{
HXLINE(4520)			int _g = 0;
HXDLIN(4520)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)(::PlayState_obj::rep->replay->__Field(HX_("songNotes",2c,24,45,cf),::hx::paccDynamic)) );
HXDLIN(4520)			while((_g < _g1->get_length())){
HXLINE(4520)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(4520)				_g = (_g + 1);
HXLINE(4523)				if (::hx::IsEq( i->__GetItem(0),time )) {
HXLINE(4524)					return ( (::cpp::VirtualArray)(i) );
            				}
            			}
            		}
HXLINE(4526)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,findByTime,return )

int PlayState_obj::findByTimeIndex(Float time){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4530_findByTimeIndex)
HXLINE(4531)		{
HXLINE(4531)			int _g = 0;
HXDLIN(4531)			int _g1 = ( (::cpp::VirtualArray)(::PlayState_obj::rep->replay->__Field(HX_("songNotes",2c,24,45,cf),::hx::paccDynamic)) )->get_length();
HXDLIN(4531)			while((_g < _g1)){
HXLINE(4531)				_g = (_g + 1);
HXDLIN(4531)				int i = (_g - 1);
HXLINE(4534)				if (::hx::IsEq(  ::Dynamic(::PlayState_obj::rep->replay->__Field(HX_("songNotes",2c,24,45,cf),::hx::paccDynamic))->__GetItem(i)->__GetItem(0),time )) {
HXLINE(4535)					return i;
            				}
            			}
            		}
HXLINE(4537)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,findByTimeIndex,return )

void PlayState_obj::backgroundVideo(::String source){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4550_backgroundVideo)
HXLINE(4552)		this->useVideo = true;
HXLINE(4554)		::String ourSource = HX_("assets/videos/daWeirdVid/dontDelete.webm",08,bc,66,81);
HXLINE(4556)		::String str1 = HX_("WEBM SHIT",e7,ff,8c,40);
HXLINE(4557)		::PlayState_obj::webmHandler =  ::WebmHandler_obj::__alloc( HX_CTX );
HXLINE(4558)		::PlayState_obj::webmHandler->source(ourSource);
HXLINE(4559)		::PlayState_obj::webmHandler->makePlayer();
HXLINE(4560)		::PlayState_obj::webmHandler->webm->set_name(str1);
HXLINE(4562)		::GlobalVideo_obj::setWebm(::PlayState_obj::webmHandler);
HXLINE(4564)		::GlobalVideo_obj::get()->__Field(HX_("source",db,b0,31,32),::hx::paccDynamic)(source);
HXLINE(4565)		::GlobalVideo_obj::get()->__Field(HX_("clearPause",29,16,62,92),::hx::paccDynamic)();
HXLINE(4566)		if (::GlobalVideo_obj::isWebm) {
HXLINE(4568)			::GlobalVideo_obj::get()->__Field(HX_("updatePlayer",4a,92,7c,37),::hx::paccDynamic)();
            		}
HXLINE(4570)		::GlobalVideo_obj::get()->__Field(HX_("show",fd,d4,52,4c),::hx::paccDynamic)();
HXLINE(4572)		if (::GlobalVideo_obj::isWebm) {
HXLINE(4574)			::GlobalVideo_obj::get()->__Field(HX_("restart",cf,c7,a5,6a),::hx::paccDynamic)();
            		}
            		else {
HXLINE(4578)			::GlobalVideo_obj::get()->__Field(HX_("play",f4,2d,5a,4a),::hx::paccDynamic)();
            		}
HXLINE(4581)		 ::openfl::display::BitmapData data = ::PlayState_obj::webmHandler->webm->get_bitmapData();
HXLINE(4583)		this->videoSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-470,-30,null())->loadGraphic(data,null(),null(),null(),null(),null());
HXLINE(4585)		 ::flixel::FlxSprite _hx_tmp = this->videoSprite;
HXDLIN(4585)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->videoSprite->get_width() * ((Float)1.2))),null());
HXLINE(4587)		this->remove(::PlayState_obj::gf,null());
HXLINE(4588)		this->remove(::PlayState_obj::boyfriend,null());
HXLINE(4589)		this->remove(::PlayState_obj::dad,null());
HXLINE(4590)		this->add(this->videoSprite);
HXLINE(4591)		this->add(::PlayState_obj::gf);
HXLINE(4592)		this->add(::PlayState_obj::boyfriend);
HXLINE(4593)		this->add(::PlayState_obj::dad);
HXLINE(4597)		if (!(this->songStarted)) {
HXLINE(4598)			::PlayState_obj::webmHandler->pause();
            		}
            		else {
HXLINE(4600)			::PlayState_obj::webmHandler->resume();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,backgroundVideo,(void))

void PlayState_obj::noteMiss(::hx::Null< int >  __o_direction, ::Note daNote){
            		int direction = __o_direction.Default(1);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4606_noteMiss)
HXDLIN(4606)		if (!(::PlayState_obj::boyfriend->stunned)) {
HXLINE(4609)			bool _hx_tmp;
HXDLIN(4609)			if ((this->combo > 5)) {
HXLINE(4609)				_hx_tmp = ::PlayState_obj::gf->animOffsets->exists(HX_("sad",16,98,57,00));
            			}
            			else {
HXLINE(4609)				_hx_tmp = false;
            			}
HXDLIN(4609)			if (_hx_tmp) {
HXLINE(4611)				::PlayState_obj::gf->playAnim(HX_("sad",16,98,57,00),null(),null(),null());
            			}
HXLINE(4613)			if ((this->combo != 0)) {
HXLINE(4615)				this->combo = 0;
HXLINE(4616)				this->popUpScore(null());
            			}
HXLINE(4618)			::PlayState_obj::misses++;
HXLINE(4620)			if (::hx::IsNotNull( daNote )) {
HXLINE(4622)				if (!(::PlayState_obj::loadRep)) {
HXLINE(4624)					this->saveNotes->push(::cpp::VirtualArray_obj::__new(4)->init(0,daNote->strumTime)->init(1,0)->init(2,direction)->init(3,-((( (Float)((166 * ::Math_obj::floor(((( (Float)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) ) / ( (Float)(60) )) * ( (Float)(1000) ))))) ) / ( (Float)(166) )))));
HXLINE(4630)					this->saveJudge->push(HX_("miss",fc,52,5c,48));
            				}
            			}
            			else {
HXLINE(4633)				if (!(::PlayState_obj::loadRep)) {
HXLINE(4635)					this->saveNotes->push(::cpp::VirtualArray_obj::__new(4)->init(0,::Conductor_obj::songPosition)->init(1,0)->init(2,direction)->init(3,-((( (Float)((166 * ::Math_obj::floor(((( (Float)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) ) / ( (Float)(60) )) * ( (Float)(1000) ))))) ) / ( (Float)(166) )))));
HXLINE(4641)					this->saveJudge->push(HX_("miss",fc,52,5c,48));
            				}
            			}
HXLINE(4647)			 ::PlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4647)			_hx_tmp1->totalNotesHit = (_hx_tmp1->totalNotesHit - ( (Float)(1) ));
HXLINE(4649)			if (::hx::IsNotNull( daNote )) {
HXLINE(4651)				if (!(daNote->isSustainNote)) {
HXLINE(4652)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4652)					_hx_tmp->songScore = (_hx_tmp->songScore - 10);
            				}
            			}
            			else {
HXLINE(4655)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4655)				_hx_tmp->songScore = (_hx_tmp->songScore - 10);
            			}
HXLINE(4657)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("missSounds",e0,d4,49,2b),::hx::paccDynamic)) )) {
HXLINE(4659)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(4659)				::String key = (HX_("missnote",ee,98,f1,e3) + this->altSuffix);
HXDLIN(4659)				::String library = null();
HXDLIN(4659)				::String _hx_tmp1 = ::Paths_obj::sound((key + ::flixel::FlxG_obj::random->_hx_int(1,3,null())),library);
HXDLIN(4659)				_hx_tmp->play(_hx_tmp1,::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.2),null()),null(),null(),null(),null());
            			}
HXLINE(4665)			::PlayState_obj::boyfriend->playAnim(((HX_("sing",4f,96,53,4c) + this->dataSuffix->__get(direction)) + HX_("miss",fc,52,5c,48)),true,null(),null());
HXLINE(4668)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(4669)				::PlayState_obj::luaModchart->executeState(HX_("playerOneMiss",21,1f,37,d5),::cpp::VirtualArray_obj::__new(2)->init(0,direction)->init(1,::Conductor_obj::songPosition));
            			}
HXLINE(4672)			this->updateAccuracy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteMiss,(void))

void PlayState_obj::updateAccuracy(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4701_updateAccuracy)
HXLINE(4702)		 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4702)		_hx_tmp->totalPlayed = (_hx_tmp->totalPlayed + 1);
HXLINE(4703)		this->accuracy = ::Math_obj::max(( (Float)(0) ),((this->totalNotesHit / ( (Float)(this->totalPlayed) )) * ( (Float)(100) )));
HXLINE(4704)		this->accuracyDefault = ::Math_obj::max(( (Float)(0) ),((this->totalNotesHitDefault / ( (Float)(this->totalPlayed) )) * ( (Float)(100) )));
HXLINE(4706)		 ::flixel::text::FlxText _hx_tmp1 = this->scoreTxt;
HXDLIN(4706)		_hx_tmp1->set_text(::Ratings_obj::CalculateRanking(this->songScore,this->songScoreDef,this->nps,this->maxNPS,this->accuracy));
HXLINE(4707)		if ((::MainMenuState_obj::language == HX_("en",69,58,00,00))) {
HXLINE(4709)			this->judgementCounter->set_text((((((((((HX_("Sicks: ",bb,1b,ab,be) + ::PlayState_obj::sicks) + HX_("\nGoods: ",d2,a1,f4,51)) + ::PlayState_obj::goods) + HX_("\nBads: ",de,84,b3,1f)) + ::PlayState_obj::bads) + HX_("\nShits: ",2f,9b,a2,0e)) + ::PlayState_obj::shits) + HX_("\nMisses: ",ba,59,21,f5)) + ::PlayState_obj::misses));
            		}
HXLINE(4711)		if ((::MainMenuState_obj::language == HX_("tr",7e,65,00,00))) {
HXLINE(4713)			this->judgementCounter->set_text((((((((((HX_("En Iyiler: ",3d,00,00,1f) + ::PlayState_obj::sicks) + HX_("\nIyiler: ",d0,8f,4e,a2)) + ::PlayState_obj::goods) + HX_("\nKotuler: ",10,db,5c,2e)) + ::PlayState_obj::bads) + HX_("\nShits: ",2f,9b,a2,0e)) + ::PlayState_obj::shits) + HX_("\nKacirmalar: ",23,83,24,18)) + ::PlayState_obj::misses));
            		}
HXLINE(4715)		if ((::MainMenuState_obj::language == HX_("ru",c3,63,00,00))) {
HXLINE(4717)			this->judgementCounter->set_text((((((((((HX_("Sicks: ",bb,1b,ab,be) + ::PlayState_obj::sicks) + HX_("\nGoods: ",d2,a1,f4,51)) + ::PlayState_obj::goods) + HX_("\nBads: ",de,84,b3,1f)) + ::PlayState_obj::bads) + HX_("\nShits: ",2f,9b,a2,0e)) + ::PlayState_obj::shits) + HX_("\nMisses: ",ba,59,21,f5)) + ::PlayState_obj::misses));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateAccuracy,(void))

int PlayState_obj::getKeyPresses( ::Note note){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,possibleNotes) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4728_getKeyPresses)
HXLINE(4728)			bool _hx_tmp;
HXDLIN(4728)			if (daNote->canBeHit) {
HXLINE(4728)				_hx_tmp = daNote->mustPress;
            			}
            			else {
HXLINE(4728)				_hx_tmp = false;
            			}
HXDLIN(4728)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            				int _hx_run( ::Note a, ::Note b){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4731_getKeyPresses)
HXLINE(4731)					return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE(4730)				possibleNotes->push(daNote);
HXLINE(4731)				possibleNotes->sort( ::Dynamic(new _hx_Closure_0()));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4723_getKeyPresses)
HXLINE(4724)		::Array< ::Dynamic> possibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4726)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(possibleNotes)),null());
HXLINE(4734)		if ((possibleNotes->length == 1)) {
HXLINE(4735)			return (possibleNotes->length + 1);
            		}
HXLINE(4736)		return possibleNotes->length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getKeyPresses,return )

void PlayState_obj::noteCheck(::Array< bool > controlArray, ::Note note){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4745_noteCheck)
HXLINE(4746)		Float noteDiff = -((note->strumTime - ::Conductor_obj::songPosition));
HXLINE(4748)		note->rating = ::Ratings_obj::judgeNote(noteDiff);
HXLINE(4763)		if (controlArray->__get(note->noteData)) {
HXLINE(4765)			int _hx_tmp = this->mashing;
HXDLIN(4765)			this->goodNoteHit(note,(_hx_tmp > this->getKeyPresses(note)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteCheck,(void))

void PlayState_obj::goodNoteHit( ::Note note,::hx::Null< bool >  __o_resetMashViolation){
            		bool resetMashViolation = __o_resetMashViolation.Default(true);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4791_goodNoteHit)
HXLINE(4790)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4792)		if ((this->mashing != 0)) {
HXLINE(4793)			this->mashing = 0;
            		}
HXLINE(4795)		Float noteDiff = -((note->strumTime - ::Conductor_obj::songPosition));
HXLINE(4797)		if (::PlayState_obj::loadRep) {
HXLINE(4799)			noteDiff = ( (Float)(this->findByTime(note->strumTime)->__get(3)) );
HXLINE(4800)			::Array< ::String > _hx_tmp = ( (::Array< ::String >)(::PlayState_obj::rep->replay->__Field(HX_("songJudgements",53,36,93,44),::hx::paccDynamic)) );
HXDLIN(4800)			int _hx_tmp1 = this->findByTimeIndex(note->strumTime);
HXDLIN(4800)			note->rating = _hx_tmp->__get(_hx_tmp1);
            		}
            		else {
HXLINE(4803)			note->rating = ::Ratings_obj::judgeNote(noteDiff);
            		}
HXLINE(4805)		if ((note->rating == HX_("miss",fc,52,5c,48))) {
HXLINE(4806)			return;
            		}
HXLINE(4810)		if (!(note->isSustainNote)) {
HXLINE(4811)			::Array< ::Dynamic> _hx_tmp = this->notesHitArray;
HXDLIN(4811)			_hx_tmp->unshift(::Date_obj::now());
            		}
HXLINE(4813)		bool _hx_tmp;
HXDLIN(4813)		if (!(resetMashViolation)) {
HXLINE(4813)			_hx_tmp = (this->mashViolations >= 1);
            		}
            		else {
HXLINE(4813)			_hx_tmp = false;
            		}
HXDLIN(4813)		if (_hx_tmp) {
HXLINE(4814)			this->mashViolations--;
            		}
HXLINE(4816)		if ((this->mashViolations < 0)) {
HXLINE(4817)			this->mashViolations = 0;
            		}
HXLINE(4819)		if (!(note->wasGoodHit)) {
HXLINE(4821)			if (!(note->isSustainNote)) {
HXLINE(4823)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4823)				_hx_tmp->combo = (_hx_tmp->combo + 1);
HXLINE(4824)				this->popUpScore(note);
            			}
HXLINE(4827)			::String altAnim = HX_("",00,00,00,00);
HXLINE(4828)			if (note->isAlt) {
HXLINE(4830)				altAnim = HX_("-alt",1c,93,08,1e);
            			}
HXLINE(4834)			::PlayState_obj::boyfriend->playAnim(((HX_("sing",4f,96,53,4c) + this->dataSuffix->__get(note->noteData)) + altAnim),true,null(),null());
HXLINE(4837)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(4838)				::PlayState_obj::luaModchart->executeState(HX_("playerOneSing",74,62,2e,d9),::cpp::VirtualArray_obj::__new(2)->init(0,note->noteData)->init(1,::Conductor_obj::songPosition));
            			}
HXLINE(4841)			bool _hx_tmp;
HXDLIN(4841)			if (!(::PlayState_obj::loadRep)) {
HXLINE(4841)				_hx_tmp = note->mustPress;
            			}
            			else {
HXLINE(4841)				_hx_tmp = false;
            			}
HXDLIN(4841)			if (_hx_tmp) {
HXLINE(4843)				::Array< Float > array = ::Array_obj< Float >::__new(4)->init(0,note->strumTime)->init(1,note->sustainLength)->init(2,note->noteData)->init(3,noteDiff);
HXLINE(4844)				if (note->isSustainNote) {
HXLINE(4845)					array[1] = ( (Float)(-1) );
            				}
HXLINE(4846)				this->saveNotes->push(array);
HXLINE(4847)				this->saveJudge->push(note->rating);
            			}
HXLINE(4850)			bool _hx_tmp1;
HXDLIN(4850)			if (::PlayStateChangeables_obj::botPlay) {
HXLINE(4850)				_hx_tmp1 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(4850)				_hx_tmp1 = true;
            			}
HXDLIN(4850)			if (_hx_tmp1) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::Note,note) HXARGC(1)
            				void _hx_run( ::StaticArrow spr){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4854_goodNoteHit)
HXLINE(4854)					_gthis->pressArrow(spr,spr->ID,note);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(4852)				::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_0(_gthis,note)),null());
            			}
HXLINE(4858)			if (!(note->isSustainNote)) {
HXLINE(4860)				note->kill();
HXLINE(4861)				this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(4862)				note->destroy();
            			}
            			else {
HXLINE(4866)				note->wasGoodHit = true;
            			}
HXLINE(4868)			if (!(note->isSustainNote)) {
HXLINE(4869)				this->updateAccuracy();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,goodNoteHit,(void))

void PlayState_obj::pressArrow( ::StaticArrow spr,int idCheck, ::Note daNote){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4875_pressArrow)
HXDLIN(4875)		if ((::Math_obj::abs(( (Float)(daNote->noteData) )) == idCheck)) {
HXLINE(4877)			if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("stepMania",06,56,8a,73),::hx::paccDynamic)) ))) {
HXLINE(4879)				spr->playAnim(HX_("confirm",00,9d,39,10),true);
            			}
            			else {
HXLINE(4883)				spr->playAnim((HX_("dirCon",f5,88,50,bc) + daNote->originColor),true);
HXLINE(4884)				spr->localAngle = daNote->originAngle;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,pressArrow,(void))

void PlayState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4892_stepHit)
HXLINE(4893)		this->hscriptApply(HX_("stepHit",67,ae,41,81),null());
HXLINE(4894)		this->hscriptApply2(HX_("stepHit",67,ae,41,81),null());
HXLINE(4895)		this->super::stepHit();
HXLINE(4896)		bool _hx_tmp;
HXDLIN(4896)		if (!((::flixel::FlxG_obj::sound->music->_time > (::Conductor_obj::rawPosition + 20)))) {
HXLINE(4896)			_hx_tmp = (::flixel::FlxG_obj::sound->music->_time < (::Conductor_obj::rawPosition - ( (Float)(20) )));
            		}
            		else {
HXLINE(4896)			_hx_tmp = true;
            		}
HXDLIN(4896)		if (_hx_tmp) {
HXLINE(4898)			this->resyncVocals();
            		}
HXLINE(4902)		bool _hx_tmp1;
HXDLIN(4902)		if (this->executeModchart) {
HXLINE(4902)			_hx_tmp1 = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(4902)			_hx_tmp1 = false;
            		}
HXDLIN(4902)		if (_hx_tmp1) {
HXLINE(4904)			::PlayState_obj::luaModchart->setVar(HX_("curStep",ec,58,71,b7),this->curStep);
HXLINE(4905)			::PlayState_obj::luaModchart->executeState(HX_("stepHit",67,ae,41,81),::cpp::VirtualArray_obj::__new(1)->init(0,this->curStep));
            		}
            	}


void PlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4911_beatHit)
HXLINE(4912)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("specialCharter",92,bf,b5,48),::hx::paccDynamic),HX_("on",1f,61,00,00) )) {
HXLINE(4914)			this->remove(this->RealityEngineWatermark,null());
HXLINE(4915)			this->RealityEngineWatermark->set_text((((((HX_("curBeat ",4a,60,ff,f7) + this->curBeat) + HX_(" curStep ",d4,95,e9,29)) + this->curStep) + HX_(" curSection ",1b,98,59,78)) + this->curSection));
HXLINE(4916)			this->add(this->RealityEngineWatermark);
            		}
HXLINE(4918)		this->hscriptApply(HX_("beatHit",7d,ea,04,74),null());
HXLINE(4919)		this->hscriptApply2(HX_("beatHit",7d,ea,04,74),null());
HXLINE(4920)		this->super::beatHit();
HXLINE(4922)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::Note a2, ::Note a3){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4924_beatHit)
HXLINE(4924)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(4924)			int Order;
HXDLIN(4924)			if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(4924)				Order = -1;
            			}
            			else {
HXLINE(4924)				Order = 1;
            			}
HXDLIN(4924)			 ::Dynamic _g = ::flixel::util::FlxSort_obj::byY_dyn();
HXDLIN(4924)			int a1 = Order;
HXDLIN(4924)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN(4924)			this->notes->members->sort(_hx_tmp);
            		}
HXLINE(4928)		bool _hx_tmp;
HXDLIN(4928)		if (this->executeModchart) {
HXLINE(4928)			_hx_tmp = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(4928)			_hx_tmp = false;
            		}
HXDLIN(4928)		if (_hx_tmp) {
HXLINE(4930)			::PlayState_obj::luaModchart->executeState(HX_("beatHit",7d,ea,04,74),::cpp::VirtualArray_obj::__new(1)->init(0,this->curBeat));
            		}
HXLINE(4934)		if (::hx::IsNotNull( this->currentSection )) {
HXLINE(4936)			if ((::hx::Mod(this->curBeat,this->idleBeat) == 0)) {
HXLINE(4938)				bool _hx_tmp;
HXDLIN(4938)				if (this->idleToBeat) {
HXLINE(4938)					_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::dad->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            				}
            				else {
HXLINE(4938)					_hx_tmp = false;
            				}
HXDLIN(4938)				if (_hx_tmp) {
HXLINE(4939)					::PlayState_obj::dad->dance(this->forcedToIdle,this->currentSection->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic));
            				}
HXLINE(4940)				bool _hx_tmp1;
HXDLIN(4940)				if (this->idleToBeat) {
HXLINE(4940)					_hx_tmp1 = !(::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            				}
            				else {
HXLINE(4940)					_hx_tmp1 = false;
            				}
HXDLIN(4940)				if (_hx_tmp1) {
HXLINE(4941)					::PlayState_obj::boyfriend->dance(this->forcedToIdle,this->currentSection->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic));
            				}
            			}
            			else {
HXLINE(4943)				bool _hx_tmp;
HXDLIN(4943)				bool _hx_tmp1;
HXDLIN(4943)				if ((::PlayState_obj::dad->curCharacter != HX_("spooky",eb,bd,9e,c1))) {
HXLINE(4943)					_hx_tmp1 = (::PlayState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            				}
            				else {
HXLINE(4943)					_hx_tmp1 = true;
            				}
HXDLIN(4943)				if (_hx_tmp1) {
HXLINE(4943)					_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::dad->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            				}
            				else {
HXLINE(4943)					_hx_tmp = false;
            				}
HXDLIN(4943)				if (_hx_tmp) {
HXLINE(4944)					::PlayState_obj::dad->dance(this->forcedToIdle,this->currentSection->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic));
            				}
            			}
            		}
HXLINE(4947)		this->wiggleShit->update(::Conductor_obj::crochet);
HXLINE(4949)		bool _hx_tmp1;
HXDLIN(4949)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("camzoom",a2,ca,10,f1),::hx::paccDynamic)) )) {
HXLINE(4949)			_hx_tmp1 = (::Conductor_obj::bpm < 340);
            		}
            		else {
HXLINE(4949)			_hx_tmp1 = false;
            		}
HXDLIN(4949)		if (_hx_tmp1) {
HXLINE(4952)			bool _hx_tmp;
HXDLIN(4952)			bool _hx_tmp1;
HXDLIN(4952)			bool _hx_tmp2;
HXDLIN(4952)			bool _hx_tmp3;
HXDLIN(4952)			if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("milf",d6,4c,5c,48) )) {
HXLINE(4952)				_hx_tmp3 = (this->curBeat >= 168);
            			}
            			else {
HXLINE(4952)				_hx_tmp3 = false;
            			}
HXDLIN(4952)			if (_hx_tmp3) {
HXLINE(4952)				_hx_tmp2 = (this->curBeat < 200);
            			}
            			else {
HXLINE(4952)				_hx_tmp2 = false;
            			}
HXDLIN(4952)			if (_hx_tmp2) {
HXLINE(4952)				_hx_tmp1 = this->camZooming;
            			}
            			else {
HXLINE(4952)				_hx_tmp1 = false;
            			}
HXDLIN(4952)			if (_hx_tmp1) {
HXLINE(4952)				_hx_tmp = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            			}
            			else {
HXLINE(4952)				_hx_tmp = false;
            			}
HXDLIN(4952)			if (_hx_tmp) {
HXLINE(4954)				{
HXLINE(4954)					 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(4954)					_g->set_zoom((_g->zoom + (((Float)0.015) / ::PlayState_obj::songMultiplier)));
            				}
HXLINE(4955)				{
HXLINE(4955)					 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN(4955)					_g1->set_zoom((_g1->zoom + (((Float)0.03) / ::PlayState_obj::songMultiplier)));
            				}
            			}
HXLINE(4958)			bool _hx_tmp4;
HXDLIN(4958)			bool _hx_tmp5;
HXDLIN(4958)			if (this->camZooming) {
HXLINE(4958)				_hx_tmp5 = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            			}
            			else {
HXLINE(4958)				_hx_tmp5 = false;
            			}
HXDLIN(4958)			if (_hx_tmp5) {
HXLINE(4958)				_hx_tmp4 = (::hx::Mod(this->curBeat,4) == 0);
            			}
            			else {
HXLINE(4958)				_hx_tmp4 = false;
            			}
HXDLIN(4958)			if (_hx_tmp4) {
HXLINE(4960)				{
HXLINE(4960)					 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(4960)					_g->set_zoom((_g->zoom + (((Float)0.015) / ::PlayState_obj::songMultiplier)));
            				}
HXLINE(4961)				{
HXLINE(4961)					 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN(4961)					_g1->set_zoom((_g1->zoom + (((Float)0.03) / ::PlayState_obj::songMultiplier)));
            				}
            			}
            		}
HXLINE(4964)		if ((::Conductor_obj::bpm < 340)) {
HXLINE(4966)			 ::HealthIcon _hx_tmp = this->iconP1;
HXDLIN(4966)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->iconP1->get_width() + 30)),null());
HXLINE(4967)			 ::HealthIcon _hx_tmp1 = this->iconP2;
HXDLIN(4967)			_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->iconP2->get_width() + 30)),null());
HXLINE(4969)			this->iconP1->updateHitbox();
HXLINE(4970)			this->iconP2->updateHitbox();
            		}
            		else {
HXLINE(4974)			 ::HealthIcon _hx_tmp = this->iconP1;
HXDLIN(4974)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->iconP1->get_width() + 4)),null());
HXLINE(4975)			 ::HealthIcon _hx_tmp1 = this->iconP2;
HXDLIN(4975)			_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->iconP2->get_width() + 4)),null());
HXLINE(4977)			this->iconP1->updateHitbox();
HXLINE(4978)			this->iconP2->updateHitbox();
            		}
HXLINE(4981)		bool _hx_tmp2;
HXDLIN(4981)		if (!(this->endingSong)) {
HXLINE(4981)			_hx_tmp2 = ::hx::IsNotNull( this->currentSection );
            		}
            		else {
HXLINE(4981)			_hx_tmp2 = false;
            		}
HXDLIN(4981)		if (_hx_tmp2) {
HXLINE(4983)			if (this->allowedToHeadbang) {
HXLINE(4985)				::PlayState_obj::gf->dance(null(),null());
            			}
HXLINE(4988)			bool _hx_tmp;
HXDLIN(4988)			if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(4988)				_hx_tmp = (this->curSong == HX_("Bopeebo",90,29,16,da));
            			}
            			else {
HXLINE(4988)				_hx_tmp = false;
            			}
HXDLIN(4988)			if (_hx_tmp) {
HXLINE(4990)				::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
            			}
HXLINE(4993)			bool _hx_tmp1;
HXDLIN(4993)			bool _hx_tmp2;
HXDLIN(4993)			bool _hx_tmp3;
HXDLIN(4993)			bool _hx_tmp4;
HXDLIN(4993)			if ((::hx::Mod(this->curBeat,16) == 15)) {
HXLINE(4993)				_hx_tmp4 = ::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic),HX_("tutorial",9e,8f,b5,82) );
            			}
            			else {
HXLINE(4993)				_hx_tmp4 = false;
            			}
HXDLIN(4993)			if (_hx_tmp4) {
HXLINE(4993)				_hx_tmp3 = (::PlayState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            			}
            			else {
HXLINE(4993)				_hx_tmp3 = false;
            			}
HXDLIN(4993)			if (_hx_tmp3) {
HXLINE(4993)				_hx_tmp2 = (this->curBeat > 16);
            			}
            			else {
HXLINE(4993)				_hx_tmp2 = false;
            			}
HXDLIN(4993)			if (_hx_tmp2) {
HXLINE(4993)				_hx_tmp1 = (this->curBeat < 48);
            			}
            			else {
HXLINE(4993)				_hx_tmp1 = false;
            			}
HXDLIN(4993)			if (_hx_tmp1) {
HXLINE(4995)				if ((this->vocals->_volume != 0)) {
HXLINE(4997)					::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
HXLINE(4998)					::PlayState_obj::dad->playAnim(HX_("cheer",8d,9a,b6,45),true,null(),null());
            				}
            				else {
HXLINE(5002)					::PlayState_obj::dad->playAnim(HX_("sad",16,98,57,00),true,null(),null());
HXLINE(5003)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(5003)					_hx_tmp->play(::Paths_obj::sound((HX_("GF_",60,1d,36,00) + ::flixel::FlxG_obj::random->_hx_int(1,4,null())),HX_("shared",a5,5e,2b,1d)),((Float)0.3),null(),null(),null(),null());
            				}
            			}
HXLINE(5007)			if (::PlayStateChangeables_obj::Optimize) {
HXLINE(5008)				bool _hx_tmp;
HXDLIN(5008)				if ((this->vocals->_volume == 0)) {
HXLINE(5008)					_hx_tmp = !(( (bool)(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            				}
            				else {
HXLINE(5008)					_hx_tmp = false;
            				}
HXDLIN(5008)				if (_hx_tmp) {
HXLINE(5009)					this->vocals->set_volume(( (Float)(1) ));
            				}
            			}
            		}
            	}


void PlayState_obj::changeCharacter(int character,::String customcharacter){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_5016_changeCharacter)
HXLINE(5017)		if ((character == 1)) {
HXLINE(5019)			this->remove(::PlayState_obj::boyfriend,null());
HXLINE(5020)			::PlayState_obj::boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),customcharacter);
HXLINE(5021)			this->add(::PlayState_obj::boyfriend);
            		}
HXLINE(5023)		if ((character == 2)) {
HXLINE(5025)			this->remove(::PlayState_obj::dad,null());
HXLINE(5026)			::PlayState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),customcharacter,null());
HXLINE(5027)			this->add(::PlayState_obj::dad);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,changeCharacter,(void))

void PlayState_obj::completeQuest(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_5031_completeQuest)
HXLINE(5032)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(5032)		_hx_tmp->play(::Paths_obj::sound(HX_("missioncomplete",05,ed,b7,85),null()),null(),null(),null(),null(),null());
HXLINE(5033)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(5033)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("questCompleted",49,69,b5,b6),null()),null(),null(),null(),null(),null());
HXLINE(5034)		bg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE(5035)		bg1->scrollFactor->set_y(((Float)0.10));
HXLINE(5036)		bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)1.1))),null());
HXLINE(5037)		bg1->updateHitbox();
HXLINE(5038)		{
HXLINE(5038)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(5038)			bool _hx_tmp1;
HXDLIN(5038)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(5038)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(5038)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(5038)			if (_hx_tmp1) {
HXLINE(5038)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(5038)				bg1->set_x(((( (Float)(_hx_tmp) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(5038)			bool _hx_tmp2;
HXDLIN(5038)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(5038)					_hx_tmp2 = true;
            				}
            				break;
            				default:{
HXLINE(5038)					_hx_tmp2 = false;
            				}
            			}
HXDLIN(5038)			if (_hx_tmp2) {
HXLINE(5038)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(5038)				bg1->set_y(((( (Float)(_hx_tmp) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(5039)		bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(5040)		this->add(bg1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,completeQuest,(void))

void PlayState_obj::setTransparent(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_5043_setTransparent)
HXLINE(5044)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(5044)		int bg1 = ::flixel::FlxG_obj::width;
HXDLIN(5044)		int bg2 = ::flixel::FlxG_obj::height;
HXDLIN(5044)		int Alpha = 255;
HXDLIN(5044)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(5044)		{
HXLINE(5044)			color = (color & -16711681);
HXDLIN(5044)			color = (color | 65536);
            		}
HXDLIN(5044)		{
HXLINE(5044)			color = (color & -65281);
HXDLIN(5044)			color = (color | 256);
            		}
HXDLIN(5044)		{
HXLINE(5044)			color = (color & -256);
HXDLIN(5044)			color = (color | 1);
            		}
HXDLIN(5044)		{
HXLINE(5044)			color = (color & 16777215);
HXDLIN(5044)			int color1;
HXDLIN(5044)			if ((Alpha > 255)) {
HXLINE(5044)				color1 = 255;
            			}
            			else {
HXLINE(5044)				if ((Alpha < 0)) {
HXLINE(5044)					color1 = 0;
            				}
            				else {
HXLINE(5044)					color1 = Alpha;
            				}
            			}
HXDLIN(5044)			color = (color | (color1 << 24));
            		}
HXDLIN(5044)		 ::flixel::FlxSprite bg3 = bg->makeGraphic(bg1,bg2,color,null(),null());
HXLINE(5045)		if ((::PlayState_obj::Stage->camZoom < 1)) {
HXLINE(5047)			bg3->scale->scale((( (Float)(1) ) / ::PlayState_obj::Stage->camZoom));
            		}
HXLINE(5049)		bg3->scrollFactor->set(null(),null());
HXLINE(5050)		this->add(bg3);
HXLINE(5052)		::FlxTransWindow_obj::getWindowsTransparent(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,setTransparent,(void))

void PlayState_obj::fnfEventFunc(int beat,::String event,::String variable){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_5056_fnfEventFunc)
HXDLIN(5056)		if ((this->curBeat == beat)) {
HXLINE(5058)			if ((event == HX_("characterSwitchDad",ca,1b,cd,d1))) {
HXLINE(5060)				this->remove(::PlayState_obj::dad,null());
HXLINE(5061)				::PlayState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),variable,null());
HXLINE(5062)				this->add(::PlayState_obj::dad);
            			}
HXLINE(5064)			if ((event == HX_("characterSwitchBf",a1,d1,8b,a8))) {
HXLINE(5066)				this->remove(::PlayState_obj::boyfriend,null());
HXLINE(5067)				::PlayState_obj::boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),variable);
HXLINE(5068)				this->add(::PlayState_obj::boyfriend);
            			}
HXLINE(5070)			if ((event == HX_("characterSwitchGf",fc,d5,8b,a8))) {
HXLINE(5072)				this->remove(::PlayState_obj::gf,null());
HXLINE(5073)				::PlayState_obj::gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),variable,null());
HXLINE(5074)				this->add(::PlayState_obj::gf);
            			}
HXLINE(5076)			if ((event == HX_("playAnimDad",22,29,92,be))) {
HXLINE(5078)				::PlayState_obj::dad->playAnim(variable,null(),null(),null());
            			}
HXLINE(5080)			if ((event == HX_("playAnimBf",49,b7,2f,0b))) {
HXLINE(5082)				::PlayState_obj::boyfriend->playAnim(variable,null(),null(),null());
            			}
HXLINE(5084)			if ((event == HX_("playAnimGf",a4,bb,2f,0b))) {
HXLINE(5086)				::PlayState_obj::gf->playAnim(variable,null(),null(),null());
            			}
HXLINE(5088)			if ((event == HX_("flash-red",f4,40,e6,e9))) {
HXLINE(5090)				::flixel::FlxG_obj::camera->flash(-65536,4,null(),null());
            			}
HXLINE(5092)			if ((event == HX_("flash-white",0c,21,b0,c3))) {
HXLINE(5094)				::flixel::FlxG_obj::camera->flash(-1,4,null(),null());
            			}
HXLINE(5096)			if ((event == HX_("flash-yellow",b1,5f,e5,8a))) {
HXLINE(5098)				::flixel::FlxG_obj::camera->flash(-256,4,null(),null());
            			}
HXLINE(5100)			if ((event == HX_("flash-pink",73,39,43,be))) {
HXLINE(5102)				::flixel::FlxG_obj::camera->flash(-16181,4,null(),null());
            			}
HXLINE(5104)			if ((event == HX_("flash-green",26,e5,df,93))) {
HXLINE(5106)				::flixel::FlxG_obj::camera->flash(-16744448,4,null(),null());
            			}
HXLINE(5108)			if ((event == HX_("flash-orange",2b,73,45,00))) {
HXLINE(5110)				::flixel::FlxG_obj::camera->flash(-23296,4,null(),null());
            			}
HXLINE(5112)			if ((event == HX_("flash-blue",97,89,04,b5))) {
HXLINE(5114)				::flixel::FlxG_obj::camera->flash(-16776961,4,null(),null());
            			}
HXLINE(5116)			if ((event == HX_("flash-cyan",20,8c,b7,b5))) {
HXLINE(5118)				::flixel::FlxG_obj::camera->flash(-16711681,4,null(),null());
            			}
HXLINE(5120)			if ((event == HX_("shake",c6,de,1c,7c))) {
HXLINE(5122)				::flixel::FlxG_obj::camera->shake(null(),null(),null(),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,fnfEventFunc,(void))

void PlayState_obj::newHSSprite(Float xSpr,Float ySpr,::String image, ::Dynamic spritesheetbool,::String idleanim){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_5127_newHSSprite)
HXLINE(5128)		if (::hx::IsNull( spritesheetbool )) {
HXLINE(5130)			spritesheetbool = false;
            		}
HXLINE(5132)		 ::flixel::FlxSprite newFlxSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,xSpr,ySpr,null());
HXLINE(5133)		if (::hx::IsEq( spritesheetbool,true )) {
HXLINE(5135)			newFlxSprite->set_frames(::Paths_obj::getSparrowAtlas(image,null(),null()));
            		}
            		else {
HXLINE(5138)			newFlxSprite->loadGraphic(::Paths_obj::loadImage(image,null()),null(),null(),null(),null(),null());
            		}
HXLINE(5140)		if (::hx::IsEq( spritesheetbool,true )) {
HXLINE(5142)			newFlxSprite->animation->addByPrefix(HX_("idle",14,a7,b3,45),idleanim,null(),null(),null(),null());
HXLINE(5143)			newFlxSprite->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            		}
HXLINE(5145)		this->add(newFlxSprite);
            	}


HX_DEFINE_DYNAMIC_FUNC5(PlayState_obj,newHSSprite,(void))

void PlayState_obj::newHSText(Float xSprText,Float ySprText,::String hsText,int sizeHS, ::Dynamic scrollFactorBool){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_5148_newHSText)
HXLINE(5149)		bool _hx_tmp = ::hx::IsNull( scrollFactorBool );
HXLINE(5153)		 ::flixel::text::FlxText newFlxText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,xSprText,ySprText,0,hsText,sizeHS,null());
HXLINE(5154)		if (::hx::IsEq( scrollFactorBool,true )) {
HXLINE(5156)			newFlxText->scrollFactor->set(null(),null());
            		}
HXLINE(5161)		this->add(newFlxText);
            	}


HX_DEFINE_DYNAMIC_FUNC5(PlayState_obj,newHSText,(void))

void PlayState_obj::endHscript(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5244_endHscript)
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run(Float elapsed){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5247_endHscript)
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5250_endHscript)
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5253_endHscript)
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5164_endHscript)
HXLINE(5165)		this->interp->variables->set(HX_("Application",30,43,71,0e),::hx::ClassOf< ::lime::app::Application >());
HXLINE(5166)		this->interp->variables->set(HX_("setTransparent",d0,66,78,ca),this->setTransparent_dyn());
HXLINE(5167)		this->interp->variables->set(HX_("newHSSprite",d0,19,fb,d4),this->newHSSprite_dyn());
HXLINE(5168)		this->interp->variables->set(HX_("newHSText",b8,71,e3,54),this->newHSText_dyn());
HXLINE(5169)		this->interp->variables->set(HX_("add",21,f2,49,00),this->add_dyn());
HXLINE(5170)		this->interp->variables->set(HX_("dad",47,36,4c,00),::PlayState_obj::dad);
HXLINE(5171)		this->interp->variables->set(HX_("fnfEventFunc",80,5a,28,c4),this->fnfEventFunc_dyn());
HXLINE(5172)		this->interp->variables->set(HX_("applyEvent",cc,43,16,21),this->fnfEventFunc_dyn());
HXLINE(5173)		this->interp->variables->set(HX_("account",ad,fc,59,a1),this->account);
HXLINE(5174)		this->interp->variables->set(HX_("account2",e5,1a,63,8d),this->account2);
HXLINE(5175)		this->interp->variables->set(HX_("changeCharacter",19,7c,6c,fc),this->changeCharacter_dyn());
HXLINE(5176)		this->interp->variables->set(HX_("health",9c,28,06,fd),this->health);
HXLINE(5177)		this->interp->variables->set(HX_("GlobalVideo",f8,03,6d,f3),::hx::ClassOf< ::GlobalVideo >());
HXLINE(5178)		this->interp->variables->set(HX_("bf",c4,55,00,00),::PlayState_obj::boyfriend);
HXLINE(5179)		this->interp->variables->set(HX_("boyfriend",6a,29,b8,e6),::PlayState_obj::boyfriend);
HXLINE(5180)		this->interp->variables->set(HX_("girlfriend",ba,91,48,98),::PlayState_obj::gf);
HXLINE(5181)		this->interp->variables->set(HX_("gf",1f,5a,00,00),::PlayState_obj::gf);
HXLINE(5182)		this->interp->variables->set(HX_("iconP1",9a,bd,d6,45),this->iconP1);
HXLINE(5183)		this->interp->variables->set(HX_("iconP2",9b,bd,d6,45),this->iconP2);
HXLINE(5184)		this->interp->variables->set(HX_("remove",44,9c,88,04),this->remove_dyn());
HXLINE(5185)		this->interp->variables->set(HX_("MusicBeatState",76,df,84,5d),::hx::ClassOf< ::MusicBeatState >());
HXLINE(5186)		this->interp->variables->set(HX_("PlayState",5d,83,c2,46),::hx::ClassOf< ::PlayState >());
HXLINE(5187)		this->interp->variables->set(HX_("inCutscene",8f,21,01,56),this->inCutscene);
HXLINE(5188)		this->interp->variables->set(HX_("curBeat",16,53,29,ac),this->curBeat);
HXLINE(5189)		this->interp->variables->set(HX_("curStep",ec,58,71,b7),this->curStep);
HXLINE(5190)		this->interp->variables->set(HX_("curSection",45,58,c1,68),this->curSection);
HXLINE(5191)		this->interp->variables->set(HX_("PlayState",5d,83,c2,46),::hx::ClassOf< ::PlayState >());
HXLINE(5192)		this->interp->variables->set(HX_("DiscordClient",f7,d0,c5,2b),::hx::ClassOf< ::DiscordClient >());
HXLINE(5193)		this->interp->variables->set(HX_("WiggleEffectType",96,b3,49,6f),::hx::ClassOf< ::WiggleEffectType >());
HXLINE(5194)		this->interp->variables->set(HX_("FlxBasic",fc,34,94,6a),::hx::ClassOf< ::flixel::FlxBasic >());
HXLINE(5195)		this->interp->variables->set(HX_("FlxCamera",97,40,7b,39),::hx::ClassOf< ::flixel::FlxCamera >());
HXLINE(5196)		this->interp->variables->set(HX_("FlxG",b5,4b,97,2e),::hx::ClassOf< ::flixel::FlxG >());
HXLINE(5197)		this->interp->variables->set(HX_("FlxGame",64,2d,b7,d4),::hx::ClassOf< ::flixel::FlxGame >());
HXLINE(5198)		this->interp->variables->set(HX_("FlxSprite",f7,d5,84,45),::hx::ClassOf< ::flixel::FlxSprite >());
HXLINE(5199)		this->interp->variables->set(HX_("FlxState",5f,80,e5,40),::hx::ClassOf< ::flixel::FlxState >());
HXLINE(5200)		this->interp->variables->set(HX_("FlxSubState",e3,a6,41,10),::hx::ClassOf< ::flixel::FlxSubState >());
HXLINE(5201)		this->interp->variables->set(HX_("FlxGridOverlay",38,52,48,2c),::hx::ClassOf< ::flixel::addons::display::FlxGridOverlay >());
HXLINE(5202)		this->interp->variables->set(HX_("FlxTrail",14,9e,f9,d2),::hx::ClassOf< ::flixel::addons::effects::FlxTrail >());
HXLINE(5203)		this->interp->variables->set(HX_("FlxTrailArea",c1,ef,71,42),::hx::ClassOf< ::flixel::addons::effects::FlxTrailArea >());
HXLINE(5204)		this->interp->variables->set(HX_("FlxEffectSprite",e8,68,af,66),::hx::ClassOf< ::flixel::addons::effects::chainable::FlxEffectSprite >());
HXLINE(5205)		this->interp->variables->set(HX_("FlxWaveEffect",1c,a0,de,d8),::hx::ClassOf< ::flixel::addons::effects::chainable::FlxWaveEffect >());
HXLINE(5206)		this->interp->variables->set(HX_("FlxTransitionableState",b0,b8,2b,5f),::hx::ClassOf< ::flixel::addons::transition::FlxTransitionableState >());
HXLINE(5207)		this->interp->variables->set(HX_("FlxAtlas",99,57,b7,e3),::hx::ClassOf< ::flixel::graphics::atlas::FlxAtlas >());
HXLINE(5208)		this->interp->variables->set(HX_("FlxAtlasFrames",1f,b4,c0,8d),::hx::ClassOf< ::flixel::graphics::frames::FlxAtlasFrames >());
HXLINE(5209)		this->interp->variables->set(HX_("FlxTypedGroup",67,cd,0c,9b),::hx::ClassOf< ::flixel::group::FlxTypedGroup >());
HXLINE(5210)		this->interp->variables->set(HX_("FlxMath",3a,7b,ae,d8),::hx::ClassOf< ::flixel::math::FlxMath >());
HXLINE(5211)		this->interp->variables->set(HX_("FlxPoint",9e,be,69,83),::hx::ClassOf< ::flixel::math::FlxPoint >());
HXLINE(5212)		this->interp->variables->set(HX_("FlxText",1f,06,52,dd),::hx::ClassOf< ::flixel::text::FlxText >());
HXLINE(5213)		this->interp->variables->set(HX_("CustomState",80,74,7a,fd),::hx::ClassOf< ::CustomState >());
HXLINE(5214)		this->interp->variables->set(HX_("FlxEase",60,c5,64,d3),::hx::ClassOf< ::flixel::tweens::FlxEase >());
HXLINE(5215)		this->interp->variables->set(HX_("FlxTween",b9,b4,4a,d6),::hx::ClassOf< ::flixel::tweens::FlxTween >());
HXLINE(5216)		this->interp->variables->set(HX_("FlxBar",a1,ec,c5,7b),::hx::ClassOf< ::flixel::ui::FlxBar >());
HXLINE(5217)		this->interp->variables->set(HX_("FlxCollision",c0,f1,22,f8),::hx::ClassOf< ::flixel::util::FlxCollision >());
HXLINE(5218)		this->interp->variables->set(HX_("FlxSort",d0,60,b0,dc),::hx::ClassOf< ::flixel::util::FlxSort >());
HXLINE(5219)		this->interp->variables->set(HX_("FlxStringUtil",65,c4,02,2e),::hx::ClassOf< ::flixel::util::FlxStringUtil >());
HXLINE(5220)		this->interp->variables->set(HX_("FlxTimer",13,ca,0f,cd),::hx::ClassOf< ::flixel::util::FlxTimer >());
HXLINE(5221)		this->interp->variables->set(HX_("Json",48,6e,41,31),::hx::ClassOf< ::haxe::Json >());
HXLINE(5222)		this->interp->variables->set(HX_("FlxRect",96,86,ff,db),::hx::ClassOf< ::flixel::math::FlxRect >());
HXLINE(5223)		this->interp->variables->set(HX_("FlxObject",b1,78,2e,97),::hx::ClassOf< ::flixel::FlxObject >());
HXLINE(5224)		this->interp->variables->set(HX_("FlxSound",1d,97,a6,3d),::hx::ClassOf< ::flixel::_hx_system::FlxSound >());
HXLINE(5225)		this->interp->variables->set(HX_("Assets",a3,bc,97,80),::hx::ClassOf< ::lime::utils::Assets >());
HXLINE(5226)		this->interp->variables->set(HX_("ShaderFilter",dd,08,30,bd),::hx::ClassOf< ::openfl::filters::ShaderFilter >());
HXLINE(5227)		this->interp->variables->set(HX_("Exception",2f,f0,6c,eb),::hx::ClassOf< ::haxe::Exception >());
HXLINE(5228)		this->interp->variables->set(HX_("Lib",25,07,3a,00),::hx::ClassOf< ::openfl::Lib >());
HXLINE(5229)		this->interp->variables->set(HX_("CurrentPlayState",24,f4,1a,b2),::hx::ObjectPtr<OBJ_>(this));
HXLINE(5230)		this->interp->variables->set(HX_("OpenFlAssets",73,34,ef,db),::hx::ClassOf< ::openfl::utils::Assets >());
HXLINE(5231)		this->interp->variables->set(HX_("Parser",ff,10,1d,22),::hx::ClassOf< ::hscript::Parser >());
HXLINE(5232)		this->interp->variables->set(HX_("Interp",f4,ed,1a,d3),::hx::ClassOf< ::hscript::Interp >());
HXLINE(5233)		this->interp->variables->set(HX_("Paths",0e,7b,84,50),::hx::ClassOf< ::Paths >());
HXLINE(5234)		this->interp->variables->set(HX_("completeQuest",69,bc,55,34),this->completeQuest_dyn());
HXLINE(5235)		this->interp->variables->set(HX_("SONG",d5,eb,18,37),::PlayState_obj::SONG);
HXLINE(5238)		this->interp->variables->set(HX_("File",9c,fa,94,2e),::hx::ClassOf< ::sys::io::File >());
HXLINE(5239)		this->interp->variables->set(HX_("FileSystem",ab,e2,17,ca),::hx::ClassOf< ::sys::FileSystem >());
HXLINE(5240)		this->interp->variables->set(HX_("FlxGraphic",76,14,33,a3),::hx::ClassOf< ::flixel::graphics::FlxGraphic >());
HXLINE(5241)		this->interp->variables->set(HX_("BitmapData",d9,b9,71,2a),::hx::ClassOf< ::openfl::display::BitmapData >());
HXLINE(5243)		this->interp->variables->set(HX_("create",fc,66,0f,7c), ::Dynamic(new _hx_Closure_0()));
HXLINE(5246)		this->interp->variables->set(HX_("update",09,86,05,87), ::Dynamic(new _hx_Closure_1()));
HXLINE(5249)		this->interp->variables->set(HX_("stepHit",67,ae,41,81), ::Dynamic(new _hx_Closure_2()));
HXLINE(5252)		this->interp->variables->set(HX_("beatHit",7d,ea,04,74), ::Dynamic(new _hx_Closure_3()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,endHscript,(void))

void PlayState_obj::endHscript2(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5336_endHscript2)
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5339_endHscript2)
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            		void _hx_run(Float elapsed){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5342_endHscript2)
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5345_endHscript2)
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5348_endHscript2)
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5258_endHscript2)
HXLINE(5259)		this->interp2->variables->set(HX_("newHSSprite",d0,19,fb,d4),this->newHSSprite_dyn());
HXLINE(5260)		this->interp2->variables->set(HX_("newHSText",b8,71,e3,54),this->newHSText_dyn());
HXLINE(5261)		this->interp2->variables->set(HX_("add",21,f2,49,00),this->add_dyn());
HXLINE(5262)		this->interp2->variables->set(HX_("dad",47,36,4c,00),::PlayState_obj::dad);
HXLINE(5263)		this->interp2->variables->set(HX_("fnfEventFunc",80,5a,28,c4),this->fnfEventFunc_dyn());
HXLINE(5264)		this->interp2->variables->set(HX_("applyEvent",cc,43,16,21),this->fnfEventFunc_dyn());
HXLINE(5265)		this->interp2->variables->set(HX_("account",ad,fc,59,a1),this->account);
HXLINE(5266)		this->interp2->variables->set(HX_("account2",e5,1a,63,8d),this->account2);
HXLINE(5267)		this->interp2->variables->set(HX_("changeCharacter",19,7c,6c,fc),this->changeCharacter_dyn());
HXLINE(5268)		this->interp2->variables->set(HX_("health",9c,28,06,fd),this->health);
HXLINE(5269)		this->interp2->variables->set(HX_("GlobalVideo",f8,03,6d,f3),::hx::ClassOf< ::GlobalVideo >());
HXLINE(5270)		this->interp2->variables->set(HX_("bf",c4,55,00,00),::PlayState_obj::boyfriend);
HXLINE(5271)		this->interp2->variables->set(HX_("boyfriend",6a,29,b8,e6),::PlayState_obj::boyfriend);
HXLINE(5272)		this->interp2->variables->set(HX_("girlfriend",ba,91,48,98),::PlayState_obj::gf);
HXLINE(5273)		this->interp2->variables->set(HX_("gf",1f,5a,00,00),::PlayState_obj::gf);
HXLINE(5274)		this->interp2->variables->set(HX_("iconP1",9a,bd,d6,45),this->iconP1);
HXLINE(5275)		this->interp2->variables->set(HX_("iconP2",9b,bd,d6,45),this->iconP2);
HXLINE(5276)		this->interp2->variables->set(HX_("remove",44,9c,88,04),this->remove_dyn());
HXLINE(5277)		this->interp2->variables->set(HX_("MusicBeatState",76,df,84,5d),::hx::ClassOf< ::MusicBeatState >());
HXLINE(5278)		this->interp2->variables->set(HX_("PlayState",5d,83,c2,46),::hx::ClassOf< ::PlayState >());
HXLINE(5279)		this->interp2->variables->set(HX_("inCutscene",8f,21,01,56),this->inCutscene);
HXLINE(5280)		this->interp2->variables->set(HX_("curBeat",16,53,29,ac),this->curBeat);
HXLINE(5281)		this->interp2->variables->set(HX_("curStep",ec,58,71,b7),this->curStep);
HXLINE(5282)		this->interp2->variables->set(HX_("curSection",45,58,c1,68),this->curSection);
HXLINE(5283)		this->interp2->variables->set(HX_("PlayState",5d,83,c2,46),::hx::ClassOf< ::PlayState >());
HXLINE(5284)		this->interp2->variables->set(HX_("completeQuest",69,bc,55,34),this->completeQuest_dyn());
HXLINE(5285)		this->interp2->variables->set(HX_("DiscordClient",f7,d0,c5,2b),::hx::ClassOf< ::DiscordClient >());
HXLINE(5286)		this->interp2->variables->set(HX_("WiggleEffectType",96,b3,49,6f),::hx::ClassOf< ::WiggleEffectType >());
HXLINE(5287)		this->interp2->variables->set(HX_("FlxBasic",fc,34,94,6a),::hx::ClassOf< ::flixel::FlxBasic >());
HXLINE(5288)		this->interp2->variables->set(HX_("FlxCamera",97,40,7b,39),::hx::ClassOf< ::flixel::FlxCamera >());
HXLINE(5289)		this->interp2->variables->set(HX_("FlxG",b5,4b,97,2e),::hx::ClassOf< ::flixel::FlxG >());
HXLINE(5290)		this->interp2->variables->set(HX_("FlxGame",64,2d,b7,d4),::hx::ClassOf< ::flixel::FlxGame >());
HXLINE(5291)		this->interp2->variables->set(HX_("FlxSprite",f7,d5,84,45),::hx::ClassOf< ::flixel::FlxSprite >());
HXLINE(5292)		this->interp2->variables->set(HX_("FlxState",5f,80,e5,40),::hx::ClassOf< ::flixel::FlxState >());
HXLINE(5293)		this->interp2->variables->set(HX_("FlxSubState",e3,a6,41,10),::hx::ClassOf< ::flixel::FlxSubState >());
HXLINE(5294)		this->interp2->variables->set(HX_("FlxGridOverlay",38,52,48,2c),::hx::ClassOf< ::flixel::addons::display::FlxGridOverlay >());
HXLINE(5295)		this->interp2->variables->set(HX_("FlxTrail",14,9e,f9,d2),::hx::ClassOf< ::flixel::addons::effects::FlxTrail >());
HXLINE(5296)		this->interp2->variables->set(HX_("FlxTrailArea",c1,ef,71,42),::hx::ClassOf< ::flixel::addons::effects::FlxTrailArea >());
HXLINE(5297)		this->interp2->variables->set(HX_("FlxEffectSprite",e8,68,af,66),::hx::ClassOf< ::flixel::addons::effects::chainable::FlxEffectSprite >());
HXLINE(5298)		this->interp2->variables->set(HX_("FlxWaveEffect",1c,a0,de,d8),::hx::ClassOf< ::flixel::addons::effects::chainable::FlxWaveEffect >());
HXLINE(5299)		this->interp2->variables->set(HX_("FlxTransitionableState",b0,b8,2b,5f),::hx::ClassOf< ::flixel::addons::transition::FlxTransitionableState >());
HXLINE(5300)		this->interp2->variables->set(HX_("FlxAtlas",99,57,b7,e3),::hx::ClassOf< ::flixel::graphics::atlas::FlxAtlas >());
HXLINE(5301)		this->interp2->variables->set(HX_("FlxAtlasFrames",1f,b4,c0,8d),::hx::ClassOf< ::flixel::graphics::frames::FlxAtlasFrames >());
HXLINE(5302)		this->interp2->variables->set(HX_("FlxTypedGroup",67,cd,0c,9b),::hx::ClassOf< ::flixel::group::FlxTypedGroup >());
HXLINE(5303)		this->interp2->variables->set(HX_("FlxMath",3a,7b,ae,d8),::hx::ClassOf< ::flixel::math::FlxMath >());
HXLINE(5304)		this->interp2->variables->set(HX_("FlxPoint",9e,be,69,83),::hx::ClassOf< ::flixel::math::FlxPoint >());
HXLINE(5305)		this->interp2->variables->set(HX_("FlxText",1f,06,52,dd),::hx::ClassOf< ::flixel::text::FlxText >());
HXLINE(5306)		this->interp2->variables->set(HX_("CustomState",80,74,7a,fd),::hx::ClassOf< ::CustomState >());
HXLINE(5307)		this->interp2->variables->set(HX_("FlxEase",60,c5,64,d3),::hx::ClassOf< ::flixel::tweens::FlxEase >());
HXLINE(5308)		this->interp2->variables->set(HX_("FlxTween",b9,b4,4a,d6),::hx::ClassOf< ::flixel::tweens::FlxTween >());
HXLINE(5309)		this->interp2->variables->set(HX_("FlxBar",a1,ec,c5,7b),::hx::ClassOf< ::flixel::ui::FlxBar >());
HXLINE(5310)		this->interp2->variables->set(HX_("FlxCollision",c0,f1,22,f8),::hx::ClassOf< ::flixel::util::FlxCollision >());
HXLINE(5311)		this->interp2->variables->set(HX_("FlxSort",d0,60,b0,dc),::hx::ClassOf< ::flixel::util::FlxSort >());
HXLINE(5312)		this->interp2->variables->set(HX_("FlxStringUtil",65,c4,02,2e),::hx::ClassOf< ::flixel::util::FlxStringUtil >());
HXLINE(5313)		this->interp2->variables->set(HX_("FlxTimer",13,ca,0f,cd),::hx::ClassOf< ::flixel::util::FlxTimer >());
HXLINE(5314)		this->interp2->variables->set(HX_("Json",48,6e,41,31),::hx::ClassOf< ::haxe::Json >());
HXLINE(5315)		this->interp2->variables->set(HX_("FlxRect",96,86,ff,db),::hx::ClassOf< ::flixel::math::FlxRect >());
HXLINE(5316)		this->interp2->variables->set(HX_("FlxObject",b1,78,2e,97),::hx::ClassOf< ::flixel::FlxObject >());
HXLINE(5317)		this->interp2->variables->set(HX_("FlxSound",1d,97,a6,3d),::hx::ClassOf< ::flixel::_hx_system::FlxSound >());
HXLINE(5318)		this->interp2->variables->set(HX_("Assets",a3,bc,97,80),::hx::ClassOf< ::lime::utils::Assets >());
HXLINE(5319)		this->interp2->variables->set(HX_("ShaderFilter",dd,08,30,bd),::hx::ClassOf< ::openfl::filters::ShaderFilter >());
HXLINE(5320)		this->interp2->variables->set(HX_("Exception",2f,f0,6c,eb),::hx::ClassOf< ::haxe::Exception >());
HXLINE(5321)		this->interp2->variables->set(HX_("Lib",25,07,3a,00),::hx::ClassOf< ::openfl::Lib >());
HXLINE(5322)		this->interp2->variables->set(HX_("CurrentPlayState",24,f4,1a,b2),::hx::ObjectPtr<OBJ_>(this));
HXLINE(5323)		this->interp2->variables->set(HX_("OpenFlAssets",73,34,ef,db),::hx::ClassOf< ::openfl::utils::Assets >());
HXLINE(5324)		this->interp2->variables->set(HX_("Parser",ff,10,1d,22),::hx::ClassOf< ::hscript::Parser >());
HXLINE(5325)		this->interp2->variables->set(HX_("interp2",de,1f,24,17),::hx::ClassOf< ::hscript::Interp >());
HXLINE(5326)		this->interp2->variables->set(HX_("SONG",d5,eb,18,37),::PlayState_obj::SONG);
HXLINE(5327)		this->interp2->variables->set(HX_("Paths",0e,7b,84,50),::hx::ClassOf< ::Paths >());
HXLINE(5330)		this->interp2->variables->set(HX_("File",9c,fa,94,2e),::hx::ClassOf< ::sys::io::File >());
HXLINE(5331)		this->interp2->variables->set(HX_("FileSystem",ab,e2,17,ca),::hx::ClassOf< ::sys::FileSystem >());
HXLINE(5332)		this->interp2->variables->set(HX_("FlxGraphic",76,14,33,a3),::hx::ClassOf< ::flixel::graphics::FlxGraphic >());
HXLINE(5333)		this->interp2->variables->set(HX_("BitmapData",d9,b9,71,2a),::hx::ClassOf< ::openfl::display::BitmapData >());
HXLINE(5335)		this->interp2->variables->set(HX_("create",fc,66,0f,7c), ::Dynamic(new _hx_Closure_0()));
HXLINE(5338)		this->interp2->variables->set(HX_("endsong",30,b1,a3,43), ::Dynamic(new _hx_Closure_1()));
HXLINE(5341)		this->interp2->variables->set(HX_("update",09,86,05,87), ::Dynamic(new _hx_Closure_2()));
HXLINE(5344)		this->interp2->variables->set(HX_("stepHit",67,ae,41,81), ::Dynamic(new _hx_Closure_3()));
HXLINE(5347)		this->interp2->variables->set(HX_("beatHit",7d,ea,04,74), ::Dynamic(new _hx_Closure_4()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,endHscript2,(void))

 ::Dynamic PlayState_obj::hscriptApply(::String functionToCall,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5353_hscriptApply)
HXLINE(5354)		if (::hx::IsNull( this->interp )) {
HXLINE(5356)			return null();
            		}
HXLINE(5358)		if (this->interp->variables->exists(functionToCall)) {
HXLINE(5360)			 ::Dynamic functionH = this->interp->variables->get(functionToCall);
HXLINE(5361)			if (::hx::IsNull( params )) {
HXLINE(5363)				 ::Dynamic result = null();
HXLINE(5364)				result = functionH();
HXLINE(5365)				return result;
            			}
            			else {
HXLINE(5369)				 ::Dynamic result = null();
HXLINE(5370)				result = ::Reflect_obj::callMethod(null(),functionH,params);
HXLINE(5371)				return result;
            			}
            		}
HXLINE(5374)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,hscriptApply,return )

 ::Dynamic PlayState_obj::hscriptApply2(::String functionToCall,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5378_hscriptApply2)
HXLINE(5379)		if (::hx::IsNull( this->interp2 )) {
HXLINE(5381)			return null();
            		}
HXLINE(5383)		if (this->interp2->variables->exists(functionToCall)) {
HXLINE(5385)			 ::Dynamic functionH = this->interp2->variables->get(functionToCall);
HXLINE(5386)			if (::hx::IsNull( params )) {
HXLINE(5388)				 ::Dynamic result = null();
HXLINE(5389)				result = functionH();
HXLINE(5390)				return result;
            			}
            			else {
HXLINE(5394)				 ::Dynamic result = null();
HXLINE(5395)				result = ::Reflect_obj::callMethod(null(),functionH,params);
HXLINE(5396)				return result;
            			}
            		}
HXLINE(5399)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,hscriptApply2,return )

void PlayState_obj::poggers( ::Dynamic __o_cleanTheSong){
            		 ::Dynamic cleanTheSong = __o_cleanTheSong;
            		if (::hx::IsNull(__o_cleanTheSong)) cleanTheSong = false;
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5403_poggers)
HXLINE(5404)		::Array< ::Dynamic> notes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5406)		if (( (bool)(cleanTheSong) )) {
HXLINE(5408)			this->cleanedSong = ::PlayState_obj::SONG;
HXLINE(5410)			{
HXLINE(5410)				int _g = 0;
HXDLIN(5410)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->cleanedSong->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(5410)				while((_g < _g1->length)){
HXLINE(5410)					 ::Dynamic section = _g1->__get(_g);
HXDLIN(5410)					_g = (_g + 1);
HXLINE(5412)					::Array< ::Dynamic> removed = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5414)					{
HXLINE(5414)						int _g2 = 0;
HXDLIN(5414)						::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(5414)						while((_g2 < _g3->length)){
HXLINE(5414)							::cpp::VirtualArray note = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(5414)							_g2 = (_g2 + 1);
HXLINE(5417)							 ::Dynamic old = note->__get(0);
HXLINE(5418)							if (::hx::IsLess( note->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(5420)								notes->push(note);
HXLINE(5421)								removed->push(note);
            							}
HXLINE(5423)							if (::hx::IsGreater( note->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) )) {
HXLINE(5425)								notes->push(note);
HXLINE(5426)								removed->push(note);
            							}
            						}
            					}
HXLINE(5430)					{
HXLINE(5430)						int _g4 = 0;
HXDLIN(5430)						while((_g4 < removed->length)){
HXLINE(5430)							::cpp::VirtualArray i = ::cpp::VirtualArray( removed->__get(_g4));
HXDLIN(5430)							_g4 = (_g4 + 1);
HXLINE(5432)							( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
            						}
            					}
            				}
            			}
HXLINE(5436)			{
HXLINE(5436)				int _g2 = 0;
HXDLIN(5436)				::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(this->cleanedSong->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(5436)				while((_g2 < _g3->length)){
HXLINE(5436)					 ::Dynamic section = _g3->__get(_g2);
HXDLIN(5436)					_g2 = (_g2 + 1);
HXLINE(5438)					::Array< ::Dynamic> saveRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5440)					{
HXLINE(5440)						int _g = 0;
HXDLIN(5440)						while((_g < notes->length)){
HXLINE(5440)							::cpp::VirtualArray i = ::cpp::VirtualArray( notes->__get(_g));
HXDLIN(5440)							_g = (_g + 1);
HXLINE(5442)							bool _hx_tmp;
HXDLIN(5442)							if (::hx::IsGreaterEq( i->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(5442)								_hx_tmp = ::hx::IsLess( i->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) );
            							}
            							else {
HXLINE(5442)								_hx_tmp = false;
            							}
HXDLIN(5442)							if (_hx_tmp) {
HXLINE(5444)								saveRemove->push(i);
HXLINE(5445)								( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(i);
            							}
            						}
            					}
HXLINE(5449)					{
HXLINE(5449)						int _g1 = 0;
HXDLIN(5449)						while((_g1 < saveRemove->length)){
HXLINE(5449)							::cpp::VirtualArray i = ::cpp::VirtualArray( saveRemove->__get(_g1));
HXDLIN(5449)							_g1 = (_g1 + 1);
HXLINE(5450)							notes->remove(i);
            						}
            					}
            				}
            			}
HXLINE(5455)			::PlayState_obj::SONG = this->cleanedSong;
            		}
            		else {
HXLINE(5459)			{
HXLINE(5459)				int _g = 0;
HXDLIN(5459)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(5459)				while((_g < _g1->length)){
HXLINE(5459)					 ::Dynamic section = _g1->__get(_g);
HXDLIN(5459)					_g = (_g + 1);
HXLINE(5461)					::Array< ::Dynamic> removed = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5463)					{
HXLINE(5463)						int _g2 = 0;
HXDLIN(5463)						::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(5463)						while((_g2 < _g3->length)){
HXLINE(5463)							::cpp::VirtualArray note = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(5463)							_g2 = (_g2 + 1);
HXLINE(5466)							 ::Dynamic old = note->__get(0);
HXLINE(5467)							if (::hx::IsLess( note->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(5469)								notes->push(note);
HXLINE(5470)								removed->push(note);
            							}
HXLINE(5472)							if (::hx::IsGreater( note->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) )) {
HXLINE(5474)								notes->push(note);
HXLINE(5475)								removed->push(note);
            							}
            						}
            					}
HXLINE(5479)					{
HXLINE(5479)						int _g4 = 0;
HXDLIN(5479)						while((_g4 < removed->length)){
HXLINE(5479)							::cpp::VirtualArray i = ::cpp::VirtualArray( removed->__get(_g4));
HXDLIN(5479)							_g4 = (_g4 + 1);
HXLINE(5481)							( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
            						}
            					}
            				}
            			}
HXLINE(5485)			{
HXLINE(5485)				int _g2 = 0;
HXDLIN(5485)				::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(5485)				while((_g2 < _g3->length)){
HXLINE(5485)					 ::Dynamic section = _g3->__get(_g2);
HXDLIN(5485)					_g2 = (_g2 + 1);
HXLINE(5487)					::Array< ::Dynamic> saveRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5489)					{
HXLINE(5489)						int _g = 0;
HXDLIN(5489)						while((_g < notes->length)){
HXLINE(5489)							::cpp::VirtualArray i = ::cpp::VirtualArray( notes->__get(_g));
HXDLIN(5489)							_g = (_g + 1);
HXLINE(5491)							bool _hx_tmp;
HXDLIN(5491)							if (::hx::IsGreaterEq( i->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(5491)								_hx_tmp = ::hx::IsLess( i->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) );
            							}
            							else {
HXLINE(5491)								_hx_tmp = false;
            							}
HXDLIN(5491)							if (_hx_tmp) {
HXLINE(5493)								saveRemove->push(i);
HXLINE(5494)								( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(i);
            							}
            						}
            					}
HXLINE(5498)					{
HXLINE(5498)						int _g1 = 0;
HXDLIN(5498)						while((_g1 < saveRemove->length)){
HXLINE(5498)							::cpp::VirtualArray i = ::cpp::VirtualArray( saveRemove->__get(_g1));
HXDLIN(5498)							_g1 = (_g1 + 1);
HXLINE(5499)							notes->remove(i);
            						}
            					}
            				}
            			}
HXLINE(5504)			::PlayState_obj::SONG = this->cleanedSong;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,poggers,(void))

 ::PlayState PlayState_obj::instance;

 ::Dynamic PlayState_obj::SONG;

bool PlayState_obj::isStoryMode;

int PlayState_obj::storyWeek;

::cpp::VirtualArray PlayState_obj::storyPlaylist;

int PlayState_obj::storyDifficulty;

int PlayState_obj::weekSong;

int PlayState_obj::weekScore;

int PlayState_obj::shits;

int PlayState_obj::bads;

int PlayState_obj::goods;

int PlayState_obj::sicks;

::String PlayState_obj::eventeditortestscript;

bool PlayState_obj::eventeditortesting;

 ::flixel::FlxSprite PlayState_obj::songPosBG;

 ::flixel::ui::FlxBar PlayState_obj::songPosBar;

 ::flixel::graphics::frames::FlxAtlasFrames PlayState_obj::noteskinSprite;

 ::openfl::display::BitmapData PlayState_obj::noteskinPixelSprite;

 ::openfl::display::BitmapData PlayState_obj::noteskinPixelSpriteEnds;

 ::Replay PlayState_obj::rep;

bool PlayState_obj::loadRep;

bool PlayState_obj::inResults;

bool PlayState_obj::inDaPlay;

::Array< bool > PlayState_obj::noteBools;

bool PlayState_obj::isSM;

 ::smTools::SMFile PlayState_obj::sm;

::String PlayState_obj::pathToSm;

 ::Character PlayState_obj::dad;

 ::Character PlayState_obj::gf;

 ::Boyfriend PlayState_obj::boyfriend;

::String PlayState_obj::olds;

::String PlayState_obj::oldcode;

bool PlayState_obj::zoomText;

 ::flixel::FlxObject PlayState_obj::prevCamFollow;

 ::flixel::group::FlxTypedGroup PlayState_obj::strumLineNotes;

 ::flixel::group::FlxTypedGroup PlayState_obj::playerStrums;

 ::flixel::group::FlxTypedGroup PlayState_obj::cpuStrums;

int PlayState_obj::misses;

int PlayState_obj::campaignMisses;

int PlayState_obj::campaignSicks;

int PlayState_obj::campaignGoods;

int PlayState_obj::campaignBads;

int PlayState_obj::campaignShits;

bool PlayState_obj::offsetTesting;

::String PlayState_obj::currentSong;

int PlayState_obj::campaignScore;

bool PlayState_obj::theFunne;

bool PlayState_obj::stageTesting;

 ::Stage PlayState_obj::Stage;

int PlayState_obj::repPresses;

int PlayState_obj::repReleases;

Float PlayState_obj::timeCurrently;

Float PlayState_obj::timeCurrentlyR;

Float PlayState_obj::songOffset;

int PlayState_obj::highestCombo;

Float PlayState_obj::startTime;

 ::ModchartState PlayState_obj::luaModchart;

Float PlayState_obj::songMultiplier;

 ::WebmHandler PlayState_obj::webmHandler;


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(visibleCombos,"visibleCombos");
	HX_MARK_MEMBER_NAME(addedBotplay,"addedBotplay");
	HX_MARK_MEMBER_NAME(visibleNotes,"visibleNotes");
	HX_MARK_MEMBER_NAME(songLength,"songLength");
	HX_MARK_MEMBER_NAME(RealityEngineWatermark,"RealityEngineWatermark");
	HX_MARK_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_MARK_MEMBER_NAME(iconRPC,"iconRPC");
	HX_MARK_MEMBER_NAME(detailsText,"detailsText");
	HX_MARK_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(account,"account");
	HX_MARK_MEMBER_NAME(account2,"account2");
	HX_MARK_MEMBER_NAME(laneunderlay,"laneunderlay");
	HX_MARK_MEMBER_NAME(laneunderlayOpponent,"laneunderlayOpponent");
	HX_MARK_MEMBER_NAME(camZooming,"camZooming");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(accuracy,"accuracy");
	HX_MARK_MEMBER_NAME(accuracyDefault,"accuracyDefault");
	HX_MARK_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_MARK_MEMBER_NAME(totalNotesHitDefault,"totalNotesHitDefault");
	HX_MARK_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_MARK_MEMBER_NAME(ss,"ss");
	HX_MARK_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_MARK_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(iconP1,"iconP1");
	HX_MARK_MEMBER_NAME(iconP2,"iconP2");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camSustains,"camSustains");
	HX_MARK_MEMBER_NAME(camNotes,"camNotes");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(cannotDie,"cannotDie");
	HX_MARK_MEMBER_NAME(isSMFile,"isSMFile");
	HX_MARK_MEMBER_NAME(notesHitArray,"notesHitArray");
	HX_MARK_MEMBER_NAME(currentFrames,"currentFrames");
	HX_MARK_MEMBER_NAME(idleToBeat,"idleToBeat");
	HX_MARK_MEMBER_NAME(idleBeat,"idleBeat");
	HX_MARK_MEMBER_NAME(forcedToIdle,"forcedToIdle");
	HX_MARK_MEMBER_NAME(allowedToHeadbang,"allowedToHeadbang");
	HX_MARK_MEMBER_NAME(allowedToCheer,"allowedToCheer");
	HX_MARK_MEMBER_NAME(dialogue,"dialogue");
	HX_MARK_MEMBER_NAME(songName,"songName");
	HX_MARK_MEMBER_NAME(altSuffix,"altSuffix");
	HX_MARK_MEMBER_NAME(currentSection,"currentSection");
	HX_MARK_MEMBER_NAME(fc,"fc");
	HX_MARK_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_MARK_MEMBER_NAME(talking,"talking");
	HX_MARK_MEMBER_NAME(songScore,"songScore");
	HX_MARK_MEMBER_NAME(songScoreDef,"songScoreDef");
	HX_MARK_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_MARK_MEMBER_NAME(judgementCounter,"judgementCounter");
	HX_MARK_MEMBER_NAME(replayTxt,"replayTxt");
	HX_MARK_MEMBER_NAME(needSkip,"needSkip");
	HX_MARK_MEMBER_NAME(skipActive,"skipActive");
	HX_MARK_MEMBER_NAME(skipText,"skipText");
	HX_MARK_MEMBER_NAME(skipTo,"skipTo");
	HX_MARK_MEMBER_NAME(funneEffect,"funneEffect");
	HX_MARK_MEMBER_NAME(inCutscene,"inCutscene");
	HX_MARK_MEMBER_NAME(usedTimeTravel,"usedTimeTravel");
	HX_MARK_MEMBER_NAME(camPos,"camPos");
	HX_MARK_MEMBER_NAME(randomVar,"randomVar");
	HX_MARK_MEMBER_NAME(interp,"interp");
	HX_MARK_MEMBER_NAME(interp2,"interp2");
	HX_MARK_MEMBER_NAME(triggeredAlready,"triggeredAlready");
	HX_MARK_MEMBER_NAME(tankGrounds,"tankGrounds");
	HX_MARK_MEMBER_NAME(botPlayState,"botPlayState");
	HX_MARK_MEMBER_NAME(saveNotes,"saveNotes");
	HX_MARK_MEMBER_NAME(saveJudge,"saveJudge");
	HX_MARK_MEMBER_NAME(replayAna,"replayAna");
	HX_MARK_MEMBER_NAME(executeModchart,"executeModchart");
	HX_MARK_MEMBER_NAME(dataSuffix,"dataSuffix");
	HX_MARK_MEMBER_NAME(dataColor,"dataColor");
	HX_MARK_MEMBER_NAME(startTimer,"startTimer");
	HX_MARK_MEMBER_NAME(perfectMode,"perfectMode");
	HX_MARK_MEMBER_NAME(luaWiggles,"luaWiggles");
	HX_MARK_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_MARK_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_MARK_MEMBER_NAME(songTime,"songTime");
	HX_MARK_MEMBER_NAME(keys,"keys");
	HX_MARK_MEMBER_NAME(closestNotes,"closestNotes");
	HX_MARK_MEMBER_NAME(songStarted,"songStarted");
	HX_MARK_MEMBER_NAME(doAnything,"doAnything");
	HX_MARK_MEMBER_NAME(bar,"bar");
	HX_MARK_MEMBER_NAME(previousRate,"previousRate");
	HX_MARK_MEMBER_NAME(debugNum,"debugNum");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_MARK_MEMBER_NAME(canPause,"canPause");
	HX_MARK_MEMBER_NAME(nps,"nps");
	HX_MARK_MEMBER_NAME(maxNPS,"maxNPS");
	HX_MARK_MEMBER_NAME(stopUpdate,"stopUpdate");
	HX_MARK_MEMBER_NAME(removedVideo,"removedVideo");
	HX_MARK_MEMBER_NAME(currentBPM,"currentBPM");
	HX_MARK_MEMBER_NAME(updateFrame,"updateFrame");
	HX_MARK_MEMBER_NAME(pastScrollChanges,"pastScrollChanges");
	HX_MARK_MEMBER_NAME(currentLuaIndex,"currentLuaIndex");
	HX_MARK_MEMBER_NAME(endingSong,"endingSong");
	HX_MARK_MEMBER_NAME(hits,"hits");
	HX_MARK_MEMBER_NAME(offsetTest,"offsetTest");
	HX_MARK_MEMBER_NAME(timeShown,"timeShown");
	HX_MARK_MEMBER_NAME(currentTimingShown,"currentTimingShown");
	HX_MARK_MEMBER_NAME(upHold,"upHold");
	HX_MARK_MEMBER_NAME(downHold,"downHold");
	HX_MARK_MEMBER_NAME(rightHold,"rightHold");
	HX_MARK_MEMBER_NAME(leftHold,"leftHold");
	HX_MARK_MEMBER_NAME(fuckingVolume,"fuckingVolume");
	HX_MARK_MEMBER_NAME(useVideo,"useVideo");
	HX_MARK_MEMBER_NAME(playingDathing,"playingDathing");
	HX_MARK_MEMBER_NAME(videoSprite,"videoSprite");
	HX_MARK_MEMBER_NAME(tankX,"tankX");
	HX_MARK_MEMBER_NAME(tankSpeed,"tankSpeed");
	HX_MARK_MEMBER_NAME(tankAngle,"tankAngle");
	HX_MARK_MEMBER_NAME(mashing,"mashing");
	HX_MARK_MEMBER_NAME(mashViolations,"mashViolations");
	HX_MARK_MEMBER_NAME(etternaModeScore,"etternaModeScore");
	HX_MARK_MEMBER_NAME(danced,"danced");
	HX_MARK_MEMBER_NAME(cleanedSong,"cleanedSong");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(visibleCombos,"visibleCombos");
	HX_VISIT_MEMBER_NAME(addedBotplay,"addedBotplay");
	HX_VISIT_MEMBER_NAME(visibleNotes,"visibleNotes");
	HX_VISIT_MEMBER_NAME(songLength,"songLength");
	HX_VISIT_MEMBER_NAME(RealityEngineWatermark,"RealityEngineWatermark");
	HX_VISIT_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_VISIT_MEMBER_NAME(iconRPC,"iconRPC");
	HX_VISIT_MEMBER_NAME(detailsText,"detailsText");
	HX_VISIT_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(account,"account");
	HX_VISIT_MEMBER_NAME(account2,"account2");
	HX_VISIT_MEMBER_NAME(laneunderlay,"laneunderlay");
	HX_VISIT_MEMBER_NAME(laneunderlayOpponent,"laneunderlayOpponent");
	HX_VISIT_MEMBER_NAME(camZooming,"camZooming");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(accuracy,"accuracy");
	HX_VISIT_MEMBER_NAME(accuracyDefault,"accuracyDefault");
	HX_VISIT_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_VISIT_MEMBER_NAME(totalNotesHitDefault,"totalNotesHitDefault");
	HX_VISIT_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_VISIT_MEMBER_NAME(ss,"ss");
	HX_VISIT_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_VISIT_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(iconP1,"iconP1");
	HX_VISIT_MEMBER_NAME(iconP2,"iconP2");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camSustains,"camSustains");
	HX_VISIT_MEMBER_NAME(camNotes,"camNotes");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(cannotDie,"cannotDie");
	HX_VISIT_MEMBER_NAME(isSMFile,"isSMFile");
	HX_VISIT_MEMBER_NAME(notesHitArray,"notesHitArray");
	HX_VISIT_MEMBER_NAME(currentFrames,"currentFrames");
	HX_VISIT_MEMBER_NAME(idleToBeat,"idleToBeat");
	HX_VISIT_MEMBER_NAME(idleBeat,"idleBeat");
	HX_VISIT_MEMBER_NAME(forcedToIdle,"forcedToIdle");
	HX_VISIT_MEMBER_NAME(allowedToHeadbang,"allowedToHeadbang");
	HX_VISIT_MEMBER_NAME(allowedToCheer,"allowedToCheer");
	HX_VISIT_MEMBER_NAME(dialogue,"dialogue");
	HX_VISIT_MEMBER_NAME(songName,"songName");
	HX_VISIT_MEMBER_NAME(altSuffix,"altSuffix");
	HX_VISIT_MEMBER_NAME(currentSection,"currentSection");
	HX_VISIT_MEMBER_NAME(fc,"fc");
	HX_VISIT_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_VISIT_MEMBER_NAME(talking,"talking");
	HX_VISIT_MEMBER_NAME(songScore,"songScore");
	HX_VISIT_MEMBER_NAME(songScoreDef,"songScoreDef");
	HX_VISIT_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_VISIT_MEMBER_NAME(judgementCounter,"judgementCounter");
	HX_VISIT_MEMBER_NAME(replayTxt,"replayTxt");
	HX_VISIT_MEMBER_NAME(needSkip,"needSkip");
	HX_VISIT_MEMBER_NAME(skipActive,"skipActive");
	HX_VISIT_MEMBER_NAME(skipText,"skipText");
	HX_VISIT_MEMBER_NAME(skipTo,"skipTo");
	HX_VISIT_MEMBER_NAME(funneEffect,"funneEffect");
	HX_VISIT_MEMBER_NAME(inCutscene,"inCutscene");
	HX_VISIT_MEMBER_NAME(usedTimeTravel,"usedTimeTravel");
	HX_VISIT_MEMBER_NAME(camPos,"camPos");
	HX_VISIT_MEMBER_NAME(randomVar,"randomVar");
	HX_VISIT_MEMBER_NAME(interp,"interp");
	HX_VISIT_MEMBER_NAME(interp2,"interp2");
	HX_VISIT_MEMBER_NAME(triggeredAlready,"triggeredAlready");
	HX_VISIT_MEMBER_NAME(tankGrounds,"tankGrounds");
	HX_VISIT_MEMBER_NAME(botPlayState,"botPlayState");
	HX_VISIT_MEMBER_NAME(saveNotes,"saveNotes");
	HX_VISIT_MEMBER_NAME(saveJudge,"saveJudge");
	HX_VISIT_MEMBER_NAME(replayAna,"replayAna");
	HX_VISIT_MEMBER_NAME(executeModchart,"executeModchart");
	HX_VISIT_MEMBER_NAME(dataSuffix,"dataSuffix");
	HX_VISIT_MEMBER_NAME(dataColor,"dataColor");
	HX_VISIT_MEMBER_NAME(startTimer,"startTimer");
	HX_VISIT_MEMBER_NAME(perfectMode,"perfectMode");
	HX_VISIT_MEMBER_NAME(luaWiggles,"luaWiggles");
	HX_VISIT_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_VISIT_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_VISIT_MEMBER_NAME(songTime,"songTime");
	HX_VISIT_MEMBER_NAME(keys,"keys");
	HX_VISIT_MEMBER_NAME(closestNotes,"closestNotes");
	HX_VISIT_MEMBER_NAME(songStarted,"songStarted");
	HX_VISIT_MEMBER_NAME(doAnything,"doAnything");
	HX_VISIT_MEMBER_NAME(bar,"bar");
	HX_VISIT_MEMBER_NAME(previousRate,"previousRate");
	HX_VISIT_MEMBER_NAME(debugNum,"debugNum");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_VISIT_MEMBER_NAME(canPause,"canPause");
	HX_VISIT_MEMBER_NAME(nps,"nps");
	HX_VISIT_MEMBER_NAME(maxNPS,"maxNPS");
	HX_VISIT_MEMBER_NAME(stopUpdate,"stopUpdate");
	HX_VISIT_MEMBER_NAME(removedVideo,"removedVideo");
	HX_VISIT_MEMBER_NAME(currentBPM,"currentBPM");
	HX_VISIT_MEMBER_NAME(updateFrame,"updateFrame");
	HX_VISIT_MEMBER_NAME(pastScrollChanges,"pastScrollChanges");
	HX_VISIT_MEMBER_NAME(currentLuaIndex,"currentLuaIndex");
	HX_VISIT_MEMBER_NAME(endingSong,"endingSong");
	HX_VISIT_MEMBER_NAME(hits,"hits");
	HX_VISIT_MEMBER_NAME(offsetTest,"offsetTest");
	HX_VISIT_MEMBER_NAME(timeShown,"timeShown");
	HX_VISIT_MEMBER_NAME(currentTimingShown,"currentTimingShown");
	HX_VISIT_MEMBER_NAME(upHold,"upHold");
	HX_VISIT_MEMBER_NAME(downHold,"downHold");
	HX_VISIT_MEMBER_NAME(rightHold,"rightHold");
	HX_VISIT_MEMBER_NAME(leftHold,"leftHold");
	HX_VISIT_MEMBER_NAME(fuckingVolume,"fuckingVolume");
	HX_VISIT_MEMBER_NAME(useVideo,"useVideo");
	HX_VISIT_MEMBER_NAME(playingDathing,"playingDathing");
	HX_VISIT_MEMBER_NAME(videoSprite,"videoSprite");
	HX_VISIT_MEMBER_NAME(tankX,"tankX");
	HX_VISIT_MEMBER_NAME(tankSpeed,"tankSpeed");
	HX_VISIT_MEMBER_NAME(tankAngle,"tankAngle");
	HX_VISIT_MEMBER_NAME(mashing,"mashing");
	HX_VISIT_MEMBER_NAME(mashViolations,"mashViolations");
	HX_VISIT_MEMBER_NAME(etternaModeScore,"etternaModeScore");
	HX_VISIT_MEMBER_NAME(danced,"danced");
	HX_VISIT_MEMBER_NAME(cleanedSong,"cleanedSong");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ss") ) { return ::hx::Val( ss ); }
		if (HX_FIELD_EQ(inName,"fc") ) { return ::hx::Val( fc ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { return ::hx::Val( bar ); }
		if (HX_FIELD_EQ(inName,"nps") ) { return ::hx::Val( nps ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { return ::hx::Val( keys ); }
		if (HX_FIELD_EQ(inName,"hits") ) { return ::hx::Val( hits ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		if (HX_FIELD_EQ(inName,"tankX") ) { return ::hx::Val( tankX ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"health") ) { return ::hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"iconP1") ) { return ::hx::Val( iconP1 ); }
		if (HX_FIELD_EQ(inName,"iconP2") ) { return ::hx::Val( iconP2 ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"skipTo") ) { return ::hx::Val( skipTo ); }
		if (HX_FIELD_EQ(inName,"camPos") ) { return ::hx::Val( camPos ); }
		if (HX_FIELD_EQ(inName,"interp") ) { return ::hx::Val( interp ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"getKey") ) { return ::hx::Val( getKey_dyn() ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"maxNPS") ) { return ::hx::Val( maxNPS ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"upHold") ) { return ::hx::Val( upHold ); }
		if (HX_FIELD_EQ(inName,"danced") ) { return ::hx::Val( danced ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iconRPC") ) { return ::hx::Val( iconRPC ); }
		if (HX_FIELD_EQ(inName,"account") ) { return ::hx::Val( account ); }
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { return ::hx::Val( gfSpeed ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"talking") ) { return ::hx::Val( talking ); }
		if (HX_FIELD_EQ(inName,"interp2") ) { return ::hx::Val( interp2 ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyShit") ) { return ::hx::Val( keyShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"mashing") ) { return ::hx::Val( mashing ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"poggers") ) { return ::hx::Val( poggers_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"account2") ) { return ::hx::Val( account2 ); }
		if (HX_FIELD_EQ(inName,"accuracy") ) { return ::hx::Val( accuracy ); }
		if (HX_FIELD_EQ(inName,"camNotes") ) { return ::hx::Val( camNotes ); }
		if (HX_FIELD_EQ(inName,"isSMFile") ) { return ::hx::Val( isSMFile ); }
		if (HX_FIELD_EQ(inName,"idleBeat") ) { return ::hx::Val( idleBeat ); }
		if (HX_FIELD_EQ(inName,"dialogue") ) { return ::hx::Val( dialogue ); }
		if (HX_FIELD_EQ(inName,"songName") ) { return ::hx::Val( songName ); }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { return ::hx::Val( scoreTxt ); }
		if (HX_FIELD_EQ(inName,"needSkip") ) { return ::hx::Val( needSkip ); }
		if (HX_FIELD_EQ(inName,"skipText") ) { return ::hx::Val( skipText ); }
		if (HX_FIELD_EQ(inName,"songTime") ) { return ::hx::Val( songTime ); }
		if (HX_FIELD_EQ(inName,"debugNum") ) { return ::hx::Val( debugNum ); }
		if (HX_FIELD_EQ(inName,"canPause") ) { return ::hx::Val( canPause ); }
		if (HX_FIELD_EQ(inName,"downHold") ) { return ::hx::Val( downHold ); }
		if (HX_FIELD_EQ(inName,"leftHold") ) { return ::hx::Val( leftHold ); }
		if (HX_FIELD_EQ(inName,"useVideo") ) { return ::hx::Val( useVideo ); }
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"healthBar") ) { return ::hx::Val( healthBar ); }
		if (HX_FIELD_EQ(inName,"cannotDie") ) { return ::hx::Val( cannotDie ); }
		if (HX_FIELD_EQ(inName,"altSuffix") ) { return ::hx::Val( altSuffix ); }
		if (HX_FIELD_EQ(inName,"songScore") ) { return ::hx::Val( songScore ); }
		if (HX_FIELD_EQ(inName,"replayTxt") ) { return ::hx::Val( replayTxt ); }
		if (HX_FIELD_EQ(inName,"randomVar") ) { return ::hx::Val( randomVar ); }
		if (HX_FIELD_EQ(inName,"saveNotes") ) { return ::hx::Val( saveNotes ); }
		if (HX_FIELD_EQ(inName,"saveJudge") ) { return ::hx::Val( saveJudge ); }
		if (HX_FIELD_EQ(inName,"replayAna") ) { return ::hx::Val( replayAna ); }
		if (HX_FIELD_EQ(inName,"dataColor") ) { return ::hx::Val( dataColor ); }
		if (HX_FIELD_EQ(inName,"addObject") ) { return ::hx::Val( addObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"timeShown") ) { return ::hx::Val( timeShown ); }
		if (HX_FIELD_EQ(inName,"rightHold") ) { return ::hx::Val( rightHold ); }
		if (HX_FIELD_EQ(inName,"tankSpeed") ) { return ::hx::Val( tankSpeed ); }
		if (HX_FIELD_EQ(inName,"tankAngle") ) { return ::hx::Val( tankAngle ); }
		if (HX_FIELD_EQ(inName,"noteCheck") ) { return ::hx::Val( noteCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"newHSText") ) { return ::hx::Val( newHSText_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songLength") ) { return ::hx::Val( songLength ); }
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"camZooming") ) { return ::hx::Val( camZooming ); }
		if (HX_FIELD_EQ(inName,"idleToBeat") ) { return ::hx::Val( idleToBeat ); }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { return ::hx::Val( wiggleShit ); }
		if (HX_FIELD_EQ(inName,"skipActive") ) { return ::hx::Val( skipActive ); }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { return ::hx::Val( inCutscene ); }
		if (HX_FIELD_EQ(inName,"dataSuffix") ) { return ::hx::Val( dataSuffix ); }
		if (HX_FIELD_EQ(inName,"startTimer") ) { return ::hx::Val( startTimer ); }
		if (HX_FIELD_EQ(inName,"luaWiggles") ) { return ::hx::Val( luaWiggles ); }
		if (HX_FIELD_EQ(inName,"doAnything") ) { return ::hx::Val( doAnything ); }
		if (HX_FIELD_EQ(inName,"sortByShit") ) { return ::hx::Val( sortByShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"tweenCamIn") ) { return ::hx::Val( tweenCamIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopUpdate") ) { return ::hx::Val( stopUpdate ); }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { return ::hx::Val( currentBPM ); }
		if (HX_FIELD_EQ(inName,"endingSong") ) { return ::hx::Val( endingSong ); }
		if (HX_FIELD_EQ(inName,"offsetTest") ) { return ::hx::Val( offsetTest ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"findByTime") ) { return ::hx::Val( findByTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"pressArrow") ) { return ::hx::Val( pressArrow_dyn() ); }
		if (HX_FIELD_EQ(inName,"endHscript") ) { return ::hx::Val( endHscript_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"detailsText") ) { return ::hx::Val( detailsText ); }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { return ::hx::Val( totalPlayed ); }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { return ::hx::Val( healthBarBG ); }
		if (HX_FIELD_EQ(inName,"camSustains") ) { return ::hx::Val( camSustains ); }
		if (HX_FIELD_EQ(inName,"funneEffect") ) { return ::hx::Val( funneEffect ); }
		if (HX_FIELD_EQ(inName,"tankGrounds") ) { return ::hx::Val( tankGrounds ); }
		if (HX_FIELD_EQ(inName,"schoolIntro") ) { return ::hx::Val( schoolIntro_dyn() ); }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { return ::hx::Val( perfectMode ); }
		if (HX_FIELD_EQ(inName,"handleInput") ) { return ::hx::Val( handleInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"songStarted") ) { return ::hx::Val( songStarted ); }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { return ::hx::Val( updateFrame ); }
		if (HX_FIELD_EQ(inName,"videoSprite") ) { return ::hx::Val( videoSprite ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"cleanedSong") ) { return ::hx::Val( cleanedSong ); }
		if (HX_FIELD_EQ(inName,"newHSSprite") ) { return ::hx::Val( newHSSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"endHscript2") ) { return ::hx::Val( endHscript2_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addedBotplay") ) { return ::hx::Val( addedBotplay ); }
		if (HX_FIELD_EQ(inName,"visibleNotes") ) { return ::hx::Val( visibleNotes ); }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"laneunderlay") ) { return ::hx::Val( laneunderlay ); }
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"forcedToIdle") ) { return ::hx::Val( forcedToIdle ); }
		if (HX_FIELD_EQ(inName,"songScoreDef") ) { return ::hx::Val( songScoreDef ); }
		if (HX_FIELD_EQ(inName,"botPlayState") ) { return ::hx::Val( botPlayState ); }
		if (HX_FIELD_EQ(inName,"removeObject") ) { return ::hx::Val( removeObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"releaseInput") ) { return ::hx::Val( releaseInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"closestNotes") ) { return ::hx::Val( closestNotes ); }
		if (HX_FIELD_EQ(inName,"previousRate") ) { return ::hx::Val( previousRate ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"removedVideo") ) { return ::hx::Val( removedVideo ); }
		if (HX_FIELD_EQ(inName,"NearlyEquals") ) { return ::hx::Val( NearlyEquals_dyn() ); }
		if (HX_FIELD_EQ(inName,"fnfEventFunc") ) { return ::hx::Val( fnfEventFunc_dyn() ); }
		if (HX_FIELD_EQ(inName,"hscriptApply") ) { return ::hx::Val( hscriptApply_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleCombos") ) { return ::hx::Val( visibleCombos ); }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { return ::hx::Val( totalNotesHit ); }
		if (HX_FIELD_EQ(inName,"notesHitArray") ) { return ::hx::Val( notesHitArray ); }
		if (HX_FIELD_EQ(inName,"currentFrames") ) { return ::hx::Val( currentFrames ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRatesScore") ) { return ::hx::Val( getRatesScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"fuckingVolume") ) { return ::hx::Val( fuckingVolume ); }
		if (HX_FIELD_EQ(inName,"getKeyPresses") ) { return ::hx::Val( getKeyPresses_dyn() ); }
		if (HX_FIELD_EQ(inName,"completeQuest") ) { return ::hx::Val( completeQuest_dyn() ); }
		if (HX_FIELD_EQ(inName,"hscriptApply2") ) { return ::hx::Val( hscriptApply2_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { return ::hx::Val( generatedMusic ); }
		if (HX_FIELD_EQ(inName,"allowedToCheer") ) { return ::hx::Val( allowedToCheer ); }
		if (HX_FIELD_EQ(inName,"currentSection") ) { return ::hx::Val( currentSection ); }
		if (HX_FIELD_EQ(inName,"usedTimeTravel") ) { return ::hx::Val( usedTimeTravel ); }
		if (HX_FIELD_EQ(inName,"startCountdown") ) { return ::hx::Val( startCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"leCoolSongName") ) { return ::hx::Val( leCoolSongName_dyn() ); }
		if (HX_FIELD_EQ(inName,"playingDathing") ) { return ::hx::Val( playingDathing ); }
		if (HX_FIELD_EQ(inName,"updateAccuracy") ) { return ::hx::Val( updateAccuracy_dyn() ); }
		if (HX_FIELD_EQ(inName,"mashViolations") ) { return ::hx::Val( mashViolations ); }
		if (HX_FIELD_EQ(inName,"setTransparent") ) { return ::hx::Val( setTransparent_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"accuracyDefault") ) { return ::hx::Val( accuracyDefault ); }
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { return ::hx::Val( songPositionBar ); }
		if (HX_FIELD_EQ(inName,"executeModchart") ) { return ::hx::Val( executeModchart ); }
		if (HX_FIELD_EQ(inName,"currentLuaIndex") ) { return ::hx::Val( currentLuaIndex ); }
		if (HX_FIELD_EQ(inName,"findByTimeIndex") ) { return ::hx::Val( findByTimeIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"backgroundVideo") ) { return ::hx::Val( backgroundVideo_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeCharacter") ) { return ::hx::Val( changeCharacter_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"judgementCounter") ) { return ::hx::Val( judgementCounter ); }
		if (HX_FIELD_EQ(inName,"triggeredAlready") ) { return ::hx::Val( triggeredAlready ); }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { return ::hx::Val( startedCountdown ); }
		if (HX_FIELD_EQ(inName,"getSectionByTime") ) { return ::hx::Val( getSectionByTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"etternaModeScore") ) { return ::hx::Val( etternaModeScore ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { return ::hx::Val( detailsPausedText ); }
		if (HX_FIELD_EQ(inName,"allowedToHeadbang") ) { return ::hx::Val( allowedToHeadbang ); }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { return ::hx::Val( previousFrameTime ); }
		if (HX_FIELD_EQ(inName,"pastScrollChanges") ) { return ::hx::Val( pastScrollChanges ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"appearStaticArrows") ) { return ::hx::Val( appearStaticArrows_dyn() ); }
		if (HX_FIELD_EQ(inName,"currentTimingShown") ) { return ::hx::Val( currentTimingShown ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { return ::hx::Val( storyDifficultyText ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"laneunderlayOpponent") ) { return ::hx::Val( laneunderlayOpponent ); }
		if (HX_FIELD_EQ(inName,"totalNotesHitDefault") ) { return ::hx::Val( totalNotesHitDefault ); }
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"RealityEngineWatermark") ) { return ::hx::Val( RealityEngineWatermark ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"recalculateAllSectionTimes") ) { return ::hx::Val( recalculateAllSectionTimes_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { return ::hx::Val( lastReportedPlayheadPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"sm") ) { outValue = ( sm ); return true; }
		if (HX_FIELD_EQ(inName,"gf") ) { outValue = ( gf ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"rep") ) { outValue = ( rep ); return true; }
		if (HX_FIELD_EQ(inName,"dad") ) { outValue = ( dad ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { outValue = ( SONG ); return true; }
		if (HX_FIELD_EQ(inName,"bads") ) { outValue = ( bads ); return true; }
		if (HX_FIELD_EQ(inName,"isSM") ) { outValue = ( isSM ); return true; }
		if (HX_FIELD_EQ(inName,"olds") ) { outValue = ( olds ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shits") ) { outValue = ( shits ); return true; }
		if (HX_FIELD_EQ(inName,"goods") ) { outValue = ( goods ); return true; }
		if (HX_FIELD_EQ(inName,"sicks") ) { outValue = ( sicks ); return true; }
		if (HX_FIELD_EQ(inName,"Stage") ) { outValue = ( Stage ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"misses") ) { outValue = ( misses ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loadRep") ) { outValue = ( loadRep ); return true; }
		if (HX_FIELD_EQ(inName,"oldcode") ) { outValue = ( oldcode ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		if (HX_FIELD_EQ(inName,"weekSong") ) { outValue = ( weekSong ); return true; }
		if (HX_FIELD_EQ(inName,"inDaPlay") ) { outValue = ( inDaPlay ); return true; }
		if (HX_FIELD_EQ(inName,"pathToSm") ) { outValue = ( pathToSm ); return true; }
		if (HX_FIELD_EQ(inName,"zoomText") ) { outValue = ( zoomText ); return true; }
		if (HX_FIELD_EQ(inName,"theFunne") ) { outValue = ( theFunne ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { outValue = ( storyWeek ); return true; }
		if (HX_FIELD_EQ(inName,"weekScore") ) { outValue = ( weekScore ); return true; }
		if (HX_FIELD_EQ(inName,"songPosBG") ) { outValue = ( songPosBG ); return true; }
		if (HX_FIELD_EQ(inName,"inResults") ) { outValue = ( inResults ); return true; }
		if (HX_FIELD_EQ(inName,"noteBools") ) { outValue = ( noteBools ); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { outValue = ( boyfriend ); return true; }
		if (HX_FIELD_EQ(inName,"cpuStrums") ) { outValue = ( cpuStrums ); return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { outValue = ( startTime ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songPosBar") ) { outValue = ( songPosBar ); return true; }
		if (HX_FIELD_EQ(inName,"repPresses") ) { outValue = ( repPresses ); return true; }
		if (HX_FIELD_EQ(inName,"songOffset") ) { outValue = ( songOffset ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { outValue = ( isStoryMode ); return true; }
		if (HX_FIELD_EQ(inName,"currentSong") ) { outValue = ( currentSong ); return true; }
		if (HX_FIELD_EQ(inName,"repReleases") ) { outValue = ( repReleases ); return true; }
		if (HX_FIELD_EQ(inName,"luaModchart") ) { outValue = ( luaModchart ); return true; }
		if (HX_FIELD_EQ(inName,"webmHandler") ) { outValue = ( webmHandler ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerStrums") ) { outValue = ( playerStrums ); return true; }
		if (HX_FIELD_EQ(inName,"campaignBads") ) { outValue = ( campaignBads ); return true; }
		if (HX_FIELD_EQ(inName,"stageTesting") ) { outValue = ( stageTesting ); return true; }
		if (HX_FIELD_EQ(inName,"highestCombo") ) { outValue = ( highestCombo ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { outValue = ( storyPlaylist ); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { outValue = ( prevCamFollow ); return true; }
		if (HX_FIELD_EQ(inName,"campaignSicks") ) { outValue = ( campaignSicks ); return true; }
		if (HX_FIELD_EQ(inName,"campaignGoods") ) { outValue = ( campaignGoods ); return true; }
		if (HX_FIELD_EQ(inName,"campaignShits") ) { outValue = ( campaignShits ); return true; }
		if (HX_FIELD_EQ(inName,"offsetTesting") ) { outValue = ( offsetTesting ); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { outValue = ( campaignScore ); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrently") ) { outValue = ( timeCurrently ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"noteskinSprite") ) { outValue = ( noteskinSprite ); return true; }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { outValue = ( strumLineNotes ); return true; }
		if (HX_FIELD_EQ(inName,"campaignMisses") ) { outValue = ( campaignMisses ); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrentlyR") ) { outValue = ( timeCurrentlyR ); return true; }
		if (HX_FIELD_EQ(inName,"songMultiplier") ) { outValue = ( songMultiplier ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { outValue = ( storyDifficulty ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"eventeditortesting") ) { outValue = ( eventeditortesting ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"noteskinPixelSprite") ) { outValue = ( noteskinPixelSprite ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"eventeditortestscript") ) { outValue = ( eventeditortestscript ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"noteskinPixelSpriteEnds") ) { outValue = ( noteskinPixelSpriteEnds ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ss") ) { ss=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fc") ) { fc=inValue.Cast< bool >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { bar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nps") ) { nps=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { keys=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hits") ) { hits=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tankX") ) { tankX=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP1") ) { iconP1=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP2") ) { iconP2=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipTo") ) { skipTo=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camPos") ) { camPos=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"interp") ) { interp=inValue.Cast<  ::hscript::Interp >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxNPS") ) { maxNPS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upHold") ) { upHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"danced") ) { danced=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iconRPC") ) { iconRPC=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"account") ) { account=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { gfSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"talking") ) { talking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"interp2") ) { interp2=inValue.Cast<  ::hscript::Interp >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mashing") ) { mashing=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"account2") ) { account2=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"accuracy") ) { accuracy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camNotes") ) { camNotes=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isSMFile") ) { isSMFile=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"idleBeat") ) { idleBeat=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogue") ) { dialogue=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songName") ) { songName=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { scoreTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"needSkip") ) { needSkip=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipText") ) { skipText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songTime") ) { songTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugNum") ) { debugNum=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canPause") ) { canPause=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"downHold") ) { downHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftHold") ) { leftHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"useVideo") ) { useVideo=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cannotDie") ) { cannotDie=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"altSuffix") ) { altSuffix=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScore") ) { songScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"replayTxt") ) { replayTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"randomVar") ) { randomVar=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"saveNotes") ) { saveNotes=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"saveJudge") ) { saveJudge=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"replayAna") ) { replayAna=inValue.Cast<  ::Analysis >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dataColor") ) { dataColor=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeShown") ) { timeShown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightHold") ) { rightHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tankSpeed") ) { tankSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tankAngle") ) { tankAngle=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songLength") ) { songLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZooming") ) { camZooming=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"idleToBeat") ) { idleToBeat=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { wiggleShit=inValue.Cast<  ::WiggleEffect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipActive") ) { skipActive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { inCutscene=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dataSuffix") ) { dataSuffix=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTimer") ) { startTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"luaWiggles") ) { luaWiggles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"doAnything") ) { doAnything=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stopUpdate") ) { stopUpdate=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { currentBPM=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endingSong") ) { endingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetTest") ) { offsetTest=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"detailsText") ) { detailsText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { totalPlayed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { healthBarBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camSustains") ) { camSustains=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"funneEffect") ) { funneEffect=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tankGrounds") ) { tankGrounds=inValue.Cast<  ::StageBackgroundSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { perfectMode=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songStarted") ) { songStarted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { updateFrame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"videoSprite") ) { videoSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cleanedSong") ) { cleanedSong=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addedBotplay") ) { addedBotplay=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"visibleNotes") ) { visibleNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"laneunderlay") ) { laneunderlay=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"forcedToIdle") ) { forcedToIdle=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScoreDef") ) { songScoreDef=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"botPlayState") ) { botPlayState=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"closestNotes") ) { closestNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousRate") ) { previousRate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"removedVideo") ) { removedVideo=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleCombos") ) { visibleCombos=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { totalNotesHit=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notesHitArray") ) { notesHitArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentFrames") ) { currentFrames=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fuckingVolume") ) { fuckingVolume=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { generatedMusic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowedToCheer") ) { allowedToCheer=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentSection") ) { currentSection=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"usedTimeTravel") ) { usedTimeTravel=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playingDathing") ) { playingDathing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mashViolations") ) { mashViolations=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"accuracyDefault") ) { accuracyDefault=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { songPositionBar=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"executeModchart") ) { executeModchart=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentLuaIndex") ) { currentLuaIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"judgementCounter") ) { judgementCounter=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"triggeredAlready") ) { triggeredAlready=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { startedCountdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"etternaModeScore") ) { etternaModeScore=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { detailsPausedText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowedToHeadbang") ) { allowedToHeadbang=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { previousFrameTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pastScrollChanges") ) { pastScrollChanges=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentTimingShown") ) { currentTimingShown=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { storyDifficultyText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"laneunderlayOpponent") ) { laneunderlayOpponent=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalNotesHitDefault") ) { totalNotesHitDefault=inValue.Cast< Float >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"RealityEngineWatermark") ) { RealityEngineWatermark=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { lastReportedPlayheadPosition=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"sm") ) { sm=ioValue.Cast<  ::smTools::SMFile >(); return true; }
		if (HX_FIELD_EQ(inName,"gf") ) { gf=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"rep") ) { rep=ioValue.Cast<  ::Replay >(); return true; }
		if (HX_FIELD_EQ(inName,"dad") ) { dad=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"bads") ) { bads=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"isSM") ) { isSM=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"olds") ) { olds=ioValue.Cast< ::String >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shits") ) { shits=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"goods") ) { goods=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"sicks") ) { sicks=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"Stage") ) { Stage=ioValue.Cast<  ::Stage >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"misses") ) { misses=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loadRep") ) { loadRep=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"oldcode") ) { oldcode=ioValue.Cast< ::String >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::PlayState >(); return true; }
		if (HX_FIELD_EQ(inName,"weekSong") ) { weekSong=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"inDaPlay") ) { inDaPlay=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"pathToSm") ) { pathToSm=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"zoomText") ) { zoomText=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"theFunne") ) { theFunne=ioValue.Cast< bool >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { storyWeek=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"weekScore") ) { weekScore=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"songPosBG") ) { songPosBG=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		if (HX_FIELD_EQ(inName,"inResults") ) { inResults=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"noteBools") ) { noteBools=ioValue.Cast< ::Array< bool > >(); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=ioValue.Cast<  ::Boyfriend >(); return true; }
		if (HX_FIELD_EQ(inName,"cpuStrums") ) { cpuStrums=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songPosBar") ) { songPosBar=ioValue.Cast<  ::flixel::ui::FlxBar >(); return true; }
		if (HX_FIELD_EQ(inName,"repPresses") ) { repPresses=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"songOffset") ) { songOffset=ioValue.Cast< Float >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { isStoryMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"currentSong") ) { currentSong=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"repReleases") ) { repReleases=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"luaModchart") ) { luaModchart=ioValue.Cast<  ::ModchartState >(); return true; }
		if (HX_FIELD_EQ(inName,"webmHandler") ) { webmHandler=ioValue.Cast<  ::WebmHandler >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignBads") ) { campaignBads=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"stageTesting") ) { stageTesting=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"highestCombo") ) { highestCombo=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { storyPlaylist=ioValue.Cast< ::cpp::VirtualArray >(); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { prevCamFollow=ioValue.Cast<  ::flixel::FlxObject >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignSicks") ) { campaignSicks=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignGoods") ) { campaignGoods=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignShits") ) { campaignShits=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"offsetTesting") ) { offsetTesting=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { campaignScore=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrently") ) { timeCurrently=ioValue.Cast< Float >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"noteskinSprite") ) { noteskinSprite=ioValue.Cast<  ::flixel::graphics::frames::FlxAtlasFrames >(); return true; }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignMisses") ) { campaignMisses=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrentlyR") ) { timeCurrentlyR=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"songMultiplier") ) { songMultiplier=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { storyDifficulty=ioValue.Cast< int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"eventeditortesting") ) { eventeditortesting=ioValue.Cast< bool >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"noteskinPixelSprite") ) { noteskinPixelSprite=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"eventeditortestscript") ) { eventeditortestscript=ioValue.Cast< ::String >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"noteskinPixelSpriteEnds") ) { noteskinPixelSpriteEnds=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("visibleCombos",77,ea,17,26));
	outFields->push(HX_("addedBotplay",9b,66,6f,1d));
	outFields->push(HX_("visibleNotes",6f,f6,4f,15));
	outFields->push(HX_("songLength",9b,3a,8c,fa));
	outFields->push(HX_("RealityEngineWatermark",f2,07,bd,03));
	outFields->push(HX_("storyDifficultyText",5d,4b,db,c2));
	outFields->push(HX_("iconRPC",ec,c8,10,d6));
	outFields->push(HX_("detailsText",8f,5e,84,21));
	outFields->push(HX_("detailsPausedText",dd,4f,70,44));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("account",ad,fc,59,a1));
	outFields->push(HX_("account2",e5,1a,63,8d));
	outFields->push(HX_("laneunderlay",38,48,63,db));
	outFields->push(HX_("laneunderlayOpponent",f5,b5,24,53));
	outFields->push(HX_("camZooming",60,3b,bf,d6));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("gfSpeed",e8,9c,20,98));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("accuracy",39,06,c5,ff));
	outFields->push(HX_("accuracyDefault",88,23,d8,06));
	outFields->push(HX_("totalNotesHit",76,f4,57,a6));
	outFields->push(HX_("totalNotesHitDefault",eb,26,a4,bd));
	outFields->push(HX_("totalPlayed",37,de,ee,fd));
	outFields->push(HX_("ss",a0,64,00,00));
	outFields->push(HX_("healthBarBG",1c,d8,3b,f4));
	outFields->push(HX_("healthBar",97,8a,92,42));
	outFields->push(HX_("songPositionBar",d5,62,6e,a6));
	outFields->push(HX_("generatedMusic",96,8a,5d,71));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("iconP1",9a,bd,d6,45));
	outFields->push(HX_("iconP2",9b,bd,d6,45));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camSustains",9f,69,a2,15));
	outFields->push(HX_("camNotes",b2,c1,02,a8));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("cannotDie",fd,a9,4e,4f));
	outFields->push(HX_("isSMFile",a0,bf,e3,d7));
	outFields->push(HX_("notesHitArray",a7,0b,f3,bd));
	outFields->push(HX_("currentFrames",bf,30,e2,8f));
	outFields->push(HX_("idleToBeat",c5,ee,79,79));
	outFields->push(HX_("idleBeat",aa,ce,03,36));
	outFields->push(HX_("forcedToIdle",28,1b,86,c6));
	outFields->push(HX_("allowedToHeadbang",bb,a8,e9,48));
	outFields->push(HX_("allowedToCheer",ca,12,31,a1));
	outFields->push(HX_("dialogue",18,2d,94,a7));
	outFields->push(HX_("songName",c0,d0,d7,36));
	outFields->push(HX_("altSuffix",da,14,b5,b7));
	outFields->push(HX_("currentSection",ac,7a,6c,6b));
	outFields->push(HX_("fc",3d,59,00,00));
	outFields->push(HX_("wiggleShit",0b,07,40,33));
	outFields->push(HX_("talking",36,57,a8,16));
	outFields->push(HX_("songScore",3d,bb,53,a8));
	outFields->push(HX_("songScoreDef",88,1a,f9,d0));
	outFields->push(HX_("scoreTxt",3e,12,c4,0e));
	outFields->push(HX_("judgementCounter",c7,fa,f4,d2));
	outFields->push(HX_("replayTxt",89,f1,6f,0a));
	outFields->push(HX_("needSkip",f5,99,f0,28));
	outFields->push(HX_("skipActive",a5,35,4a,7e));
	outFields->push(HX_("skipText",cc,ba,4e,c3));
	outFields->push(HX_("skipTo",da,3d,a7,dc));
	outFields->push(HX_("funneEffect",67,55,3f,6f));
	outFields->push(HX_("inCutscene",8f,21,01,56));
	outFields->push(HX_("usedTimeTravel",a4,7d,1d,70));
	outFields->push(HX_("camPos",c5,54,7c,b7));
	outFields->push(HX_("randomVar",a4,58,4f,a7));
	outFields->push(HX_("interp",d4,79,86,9e));
	outFields->push(HX_("interp2",de,1f,24,17));
	outFields->push(HX_("triggeredAlready",c1,04,84,a5));
	outFields->push(HX_("tankGrounds",42,12,18,21));
	outFields->push(HX_("botPlayState",76,4c,39,74));
	outFields->push(HX_("saveNotes",c4,e3,77,2e));
	outFields->push(HX_("saveJudge",1a,b7,c8,e4));
	outFields->push(HX_("replayAna",ed,7d,61,0a));
	outFields->push(HX_("executeModchart",31,4a,80,b8));
	outFields->push(HX_("dataSuffix",9b,a8,47,88));
	outFields->push(HX_("dataColor",d9,f2,4b,90));
	outFields->push(HX_("startTimer",03,98,4c,2c));
	outFields->push(HX_("perfectMode",10,4f,4c,f3));
	outFields->push(HX_("luaWiggles",90,11,ce,e3));
	outFields->push(HX_("previousFrameTime",a3,ef,a7,c2));
	outFields->push(HX_("lastReportedPlayheadPosition",86,66,7f,37));
	outFields->push(HX_("songTime",82,2a,d5,3a));
	outFields->push(HX_("keys",f4,e1,06,47));
	outFields->push(HX_("closestNotes",28,4f,02,c1));
	outFields->push(HX_("songStarted",ec,81,a7,ed));
	outFields->push(HX_("doAnything",2d,8c,83,68));
	outFields->push(HX_("bar",d3,b1,4a,00));
	outFields->push(HX_("previousRate",b7,22,46,f2));
	outFields->push(HX_("debugNum",b3,39,d8,90));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("startedCountdown",30,57,28,9b));
	outFields->push(HX_("canPause",c6,18,eb,2b));
	outFields->push(HX_("nps",f1,d9,53,00));
	outFields->push(HX_("maxNPS",ad,a9,51,be));
	outFields->push(HX_("stopUpdate",ab,d7,b4,b0));
	outFields->push(HX_("removedVideo",bb,c0,72,00));
	outFields->push(HX_("currentBPM",26,68,25,c7));
	outFields->push(HX_("updateFrame",64,e1,1b,ec));
	outFields->push(HX_("pastScrollChanges",44,1c,82,6e));
	outFields->push(HX_("currentLuaIndex",93,2f,c9,10));
	outFields->push(HX_("endingSong",5c,73,d7,67));
	outFields->push(HX_("hits",c0,42,0e,45));
	outFields->push(HX_("offsetTest",85,51,11,49));
	outFields->push(HX_("timeShown",84,5d,18,31));
	outFields->push(HX_("currentTimingShown",2e,56,ba,1d));
	outFields->push(HX_("upHold",3a,25,8e,74));
	outFields->push(HX_("downHold",c1,c6,fa,79));
	outFields->push(HX_("rightHold",3b,1f,d9,af));
	outFields->push(HX_("leftHold",e6,0c,0e,4c));
	outFields->push(HX_("fuckingVolume",c5,2f,0e,74));
	outFields->push(HX_("useVideo",b4,76,67,fe));
	outFields->push(HX_("playingDathing",83,ed,1f,d5));
	outFields->push(HX_("videoSprite",e0,72,3d,3c));
	outFields->push(HX_("tankX",2e,d2,ec,0a));
	outFields->push(HX_("tankSpeed",3d,7c,80,fc));
	outFields->push(HX_("tankAngle",89,28,f9,9d));
	outFields->push(HX_("mashing",99,83,64,f9));
	outFields->push(HX_("mashViolations",77,15,e1,83));
	outFields->push(HX_("etternaModeScore",aa,02,79,42));
	outFields->push(HX_("danced",d1,49,8f,1e));
	outFields->push(HX_("cleanedSong",1d,82,51,e6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,visibleCombos),HX_("visibleCombos",77,ea,17,26)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,addedBotplay),HX_("addedBotplay",9b,66,6f,1d)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,visibleNotes),HX_("visibleNotes",6f,f6,4f,15)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songLength),HX_("songLength",9b,3a,8c,fa)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,RealityEngineWatermark),HX_("RealityEngineWatermark",f2,07,bd,03)},
	{::hx::fsString,(int)offsetof(PlayState_obj,storyDifficultyText),HX_("storyDifficultyText",5d,4b,db,c2)},
	{::hx::fsString,(int)offsetof(PlayState_obj,iconRPC),HX_("iconRPC",ec,c8,10,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsText),HX_("detailsText",8f,5e,84,21)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsPausedText),HX_("detailsPausedText",dd,4f,70,44)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(PlayState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,account),HX_("account",ad,fc,59,a1)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,account2),HX_("account2",e5,1a,63,8d)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,laneunderlay),HX_("laneunderlay",38,48,63,db)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,laneunderlayOpponent),HX_("laneunderlayOpponent",f5,b5,24,53)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,camZooming),HX_("camZooming",60,3b,bf,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,gfSpeed),HX_("gfSpeed",e8,9c,20,98)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,health),HX_("health",9c,28,06,fd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,accuracy),HX_("accuracy",39,06,c5,ff)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,accuracyDefault),HX_("accuracyDefault",88,23,d8,06)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHit),HX_("totalNotesHit",76,f4,57,a6)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHitDefault),HX_("totalNotesHitDefault",eb,26,a4,bd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,totalPlayed),HX_("totalPlayed",37,de,ee,fd)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,ss),HX_("ss",a0,64,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,healthBarBG),HX_("healthBarBG",1c,d8,3b,f4)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(PlayState_obj,healthBar),HX_("healthBar",97,8a,92,42)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songPositionBar),HX_("songPositionBar",d5,62,6e,a6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,generatedMusic),HX_("generatedMusic",96,8a,5d,71)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP1),HX_("iconP1",9a,bd,d6,45)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP2),HX_("iconP2",9b,bd,d6,45)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camSustains),HX_("camSustains",9f,69,a2,15)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camNotes),HX_("camNotes",b2,c1,02,a8)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,cannotDie),HX_("cannotDie",fd,a9,4e,4f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,isSMFile),HX_("isSMFile",a0,bf,e3,d7)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,notesHitArray),HX_("notesHitArray",a7,0b,f3,bd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,currentFrames),HX_("currentFrames",bf,30,e2,8f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,idleToBeat),HX_("idleToBeat",c5,ee,79,79)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,idleBeat),HX_("idleBeat",aa,ce,03,36)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,forcedToIdle),HX_("forcedToIdle",28,1b,86,c6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,allowedToHeadbang),HX_("allowedToHeadbang",bb,a8,e9,48)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,allowedToCheer),HX_("allowedToCheer",ca,12,31,a1)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dialogue),HX_("dialogue",18,2d,94,a7)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,songName),HX_("songName",c0,d0,d7,36)},
	{::hx::fsString,(int)offsetof(PlayState_obj,altSuffix),HX_("altSuffix",da,14,b5,b7)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,currentSection),HX_("currentSection",ac,7a,6c,6b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,fc),HX_("fc",3d,59,00,00)},
	{::hx::fsObject /*  ::WiggleEffect */ ,(int)offsetof(PlayState_obj,wiggleShit),HX_("wiggleShit",0b,07,40,33)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,talking),HX_("talking",36,57,a8,16)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScore),HX_("songScore",3d,bb,53,a8)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScoreDef),HX_("songScoreDef",88,1a,f9,d0)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,scoreTxt),HX_("scoreTxt",3e,12,c4,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,judgementCounter),HX_("judgementCounter",c7,fa,f4,d2)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,replayTxt),HX_("replayTxt",89,f1,6f,0a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,needSkip),HX_("needSkip",f5,99,f0,28)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,skipActive),HX_("skipActive",a5,35,4a,7e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,skipText),HX_("skipText",cc,ba,4e,c3)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,skipTo),HX_("skipTo",da,3d,a7,dc)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,funneEffect),HX_("funneEffect",67,55,3f,6f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inCutscene),HX_("inCutscene",8f,21,01,56)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,usedTimeTravel),HX_("usedTimeTravel",a4,7d,1d,70)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(PlayState_obj,camPos),HX_("camPos",c5,54,7c,b7)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,randomVar),HX_("randomVar",a4,58,4f,a7)},
	{::hx::fsObject /*  ::hscript::Interp */ ,(int)offsetof(PlayState_obj,interp),HX_("interp",d4,79,86,9e)},
	{::hx::fsObject /*  ::hscript::Interp */ ,(int)offsetof(PlayState_obj,interp2),HX_("interp2",de,1f,24,17)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,triggeredAlready),HX_("triggeredAlready",c1,04,84,a5)},
	{::hx::fsObject /*  ::StageBackgroundSprite */ ,(int)offsetof(PlayState_obj,tankGrounds),HX_("tankGrounds",42,12,18,21)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,botPlayState),HX_("botPlayState",76,4c,39,74)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(PlayState_obj,saveNotes),HX_("saveNotes",c4,e3,77,2e)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,saveJudge),HX_("saveJudge",1a,b7,c8,e4)},
	{::hx::fsObject /*  ::Analysis */ ,(int)offsetof(PlayState_obj,replayAna),HX_("replayAna",ed,7d,61,0a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,executeModchart),HX_("executeModchart",31,4a,80,b8)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dataSuffix),HX_("dataSuffix",9b,a8,47,88)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dataColor),HX_("dataColor",d9,f2,4b,90)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,startTimer),HX_("startTimer",03,98,4c,2c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,perfectMode),HX_("perfectMode",10,4f,4c,f3)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,luaWiggles),HX_("luaWiggles",90,11,ce,e3)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,previousFrameTime),HX_("previousFrameTime",a3,ef,a7,c2)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastReportedPlayheadPosition),HX_("lastReportedPlayheadPosition",86,66,7f,37)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songTime),HX_("songTime",82,2a,d5,3a)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(PlayState_obj,keys),HX_("keys",f4,e1,06,47)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,closestNotes),HX_("closestNotes",28,4f,02,c1)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,songStarted),HX_("songStarted",ec,81,a7,ed)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,doAnything),HX_("doAnything",2d,8c,83,68)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,bar),HX_("bar",d3,b1,4a,00)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,previousRate),HX_("previousRate",b7,22,46,f2)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,debugNum),HX_("debugNum",b3,39,d8,90)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedCountdown),HX_("startedCountdown",30,57,28,9b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canPause),HX_("canPause",c6,18,eb,2b)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,nps),HX_("nps",f1,d9,53,00)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,maxNPS),HX_("maxNPS",ad,a9,51,be)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,stopUpdate),HX_("stopUpdate",ab,d7,b4,b0)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,removedVideo),HX_("removedVideo",bb,c0,72,00)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,currentBPM),HX_("currentBPM",26,68,25,c7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,updateFrame),HX_("updateFrame",64,e1,1b,ec)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,pastScrollChanges),HX_("pastScrollChanges",44,1c,82,6e)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,currentLuaIndex),HX_("currentLuaIndex",93,2f,c9,10)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,endingSong),HX_("endingSong",5c,73,d7,67)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,hits),HX_("hits",c0,42,0e,45)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,offsetTest),HX_("offsetTest",85,51,11,49)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,timeShown),HX_("timeShown",84,5d,18,31)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,currentTimingShown),HX_("currentTimingShown",2e,56,ba,1d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,upHold),HX_("upHold",3a,25,8e,74)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,downHold),HX_("downHold",c1,c6,fa,79)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,rightHold),HX_("rightHold",3b,1f,d9,af)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,leftHold),HX_("leftHold",e6,0c,0e,4c)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,fuckingVolume),HX_("fuckingVolume",c5,2f,0e,74)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,useVideo),HX_("useVideo",b4,76,67,fe)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,playingDathing),HX_("playingDathing",83,ed,1f,d5)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,videoSprite),HX_("videoSprite",e0,72,3d,3c)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,tankX),HX_("tankX",2e,d2,ec,0a)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,tankSpeed),HX_("tankSpeed",3d,7c,80,fc)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,tankAngle),HX_("tankAngle",89,28,f9,9d)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,mashing),HX_("mashing",99,83,64,f9)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,mashViolations),HX_("mashViolations",77,15,e1,83)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,etternaModeScore),HX_("etternaModeScore",aa,02,79,42)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,danced),HX_("danced",d1,49,8f,1e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,cleanedSong),HX_("cleanedSong",1d,82,51,e6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::PlayState */ ,(void *) &PlayState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &PlayState_obj::SONG,HX_("SONG",d5,eb,18,37)},
	{::hx::fsBool,(void *) &PlayState_obj::isStoryMode,HX_("isStoryMode",ae,68,02,07)},
	{::hx::fsInt,(void *) &PlayState_obj::storyWeek,HX_("storyWeek",89,3e,16,2f)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(void *) &PlayState_obj::storyPlaylist,HX_("storyPlaylist",67,a1,89,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::storyDifficulty,HX_("storyDifficulty",90,ca,a7,d0)},
	{::hx::fsInt,(void *) &PlayState_obj::weekSong,HX_("weekSong",e9,b9,87,33)},
	{::hx::fsInt,(void *) &PlayState_obj::weekScore,HX_("weekScore",be,2e,4d,db)},
	{::hx::fsInt,(void *) &PlayState_obj::shits,HX_("shits",b3,f8,22,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::bads,HX_("bads",0e,db,10,41)},
	{::hx::fsInt,(void *) &PlayState_obj::goods,HX_("goods",96,00,f9,97)},
	{::hx::fsInt,(void *) &PlayState_obj::sicks,HX_("sicks",f5,99,c7,7c)},
	{::hx::fsString,(void *) &PlayState_obj::eventeditortestscript,HX_("eventeditortestscript",e4,37,ff,53)},
	{::hx::fsBool,(void *) &PlayState_obj::eventeditortesting,HX_("eventeditortesting",69,71,23,4c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(void *) &PlayState_obj::songPosBG,HX_("songPosBG",44,6c,11,f6)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(void *) &PlayState_obj::songPosBar,HX_("songPosBar",54,66,2d,59)},
	{::hx::fsObject /*  ::flixel::graphics::frames::FlxAtlasFrames */ ,(void *) &PlayState_obj::noteskinSprite,HX_("noteskinSprite",d4,1c,dd,5f)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(void *) &PlayState_obj::noteskinPixelSprite,HX_("noteskinPixelSprite",fc,2f,73,52)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(void *) &PlayState_obj::noteskinPixelSpriteEnds,HX_("noteskinPixelSpriteEnds",54,66,20,24)},
	{::hx::fsObject /*  ::Replay */ ,(void *) &PlayState_obj::rep,HX_("rep",5d,d9,56,00)},
	{::hx::fsBool,(void *) &PlayState_obj::loadRep,HX_("loadRep",d7,52,e1,08)},
	{::hx::fsBool,(void *) &PlayState_obj::inResults,HX_("inResults",91,9b,59,51)},
	{::hx::fsBool,(void *) &PlayState_obj::inDaPlay,HX_("inDaPlay",d6,fd,3f,93)},
	{::hx::fsObject /* ::Array< bool > */ ,(void *) &PlayState_obj::noteBools,HX_("noteBools",b7,6b,85,f4)},
	{::hx::fsBool,(void *) &PlayState_obj::isSM,HX_("isSM",04,f3,be,45)},
	{::hx::fsObject /*  ::smTools::SMFile */ ,(void *) &PlayState_obj::sm,HX_("sm",9a,64,00,00)},
	{::hx::fsString,(void *) &PlayState_obj::pathToSm,HX_("pathToSm",3a,8b,a0,42)},
	{::hx::fsObject /*  ::Character */ ,(void *) &PlayState_obj::dad,HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::Character */ ,(void *) &PlayState_obj::gf,HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::Boyfriend */ ,(void *) &PlayState_obj::boyfriend,HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsString,(void *) &PlayState_obj::olds,HX_("olds",ec,f9,b0,49)},
	{::hx::fsString,(void *) &PlayState_obj::oldcode,HX_("oldcode",54,29,30,0c)},
	{::hx::fsBool,(void *) &PlayState_obj::zoomText,HX_("zoomText",60,21,f6,a5)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(void *) &PlayState_obj::prevCamFollow,HX_("prevCamFollow",6d,99,a3,09)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::strumLineNotes,HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::playerStrums,HX_("playerStrums",4b,e1,2a,0d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::cpuStrums,HX_("cpuStrums",52,86,8a,e0)},
	{::hx::fsInt,(void *) &PlayState_obj::misses,HX_("misses",6a,62,54,56)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignMisses,HX_("campaignMisses",9a,a9,70,e4)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignSicks,HX_("campaignSicks",c5,48,c4,0b)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignGoods,HX_("campaignGoods",66,af,f5,26)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignBads,HX_("campaignBads",3e,f6,cb,d5)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignShits,HX_("campaignShits",83,a7,1f,0b)},
	{::hx::fsBool,(void *) &PlayState_obj::offsetTesting,HX_("offsetTesting",7d,bc,10,da)},
	{::hx::fsString,(void *) &PlayState_obj::currentSong,HX_("currentSong",ae,fc,e9,84)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignScore,HX_("campaignScore",22,22,d6,07)},
	{::hx::fsBool,(void *) &PlayState_obj::theFunne,HX_("theFunne",05,d0,55,cd)},
	{::hx::fsBool,(void *) &PlayState_obj::stageTesting,HX_("stageTesting",b2,74,2e,c5)},
	{::hx::fsObject /*  ::Stage */ ,(void *) &PlayState_obj::Stage,HX_("Stage",9e,da,38,17)},
	{::hx::fsInt,(void *) &PlayState_obj::repPresses,HX_("repPresses",d4,b6,b1,e7)},
	{::hx::fsInt,(void *) &PlayState_obj::repReleases,HX_("repReleases",49,43,a4,da)},
	{::hx::fsFloat,(void *) &PlayState_obj::timeCurrently,HX_("timeCurrently",39,e5,d2,31)},
	{::hx::fsFloat,(void *) &PlayState_obj::timeCurrentlyR,HX_("timeCurrentlyR",f9,ac,b5,66)},
	{::hx::fsFloat,(void *) &PlayState_obj::songOffset,HX_("songOffset",48,3d,c4,bb)},
	{::hx::fsInt,(void *) &PlayState_obj::highestCombo,HX_("highestCombo",8a,3b,03,1f)},
	{::hx::fsFloat,(void *) &PlayState_obj::startTime,HX_("startTime",8f,45,f0,05)},
	{::hx::fsObject /*  ::ModchartState */ ,(void *) &PlayState_obj::luaModchart,HX_("luaModchart",b4,54,b5,aa)},
	{::hx::fsFloat,(void *) &PlayState_obj::songMultiplier,HX_("songMultiplier",b6,0b,db,c3)},
	{::hx::fsObject /*  ::WebmHandler */ ,(void *) &PlayState_obj::webmHandler,HX_("webmHandler",71,c7,d0,f2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("visibleCombos",77,ea,17,26),
	HX_("addedBotplay",9b,66,6f,1d),
	HX_("visibleNotes",6f,f6,4f,15),
	HX_("songLength",9b,3a,8c,fa),
	HX_("RealityEngineWatermark",f2,07,bd,03),
	HX_("storyDifficultyText",5d,4b,db,c2),
	HX_("iconRPC",ec,c8,10,d6),
	HX_("detailsText",8f,5e,84,21),
	HX_("detailsPausedText",dd,4f,70,44),
	HX_("vocals",5e,10,51,59),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSection",45,58,c1,68),
	HX_("camFollow",e0,6e,47,22),
	HX_("account",ad,fc,59,a1),
	HX_("account2",e5,1a,63,8d),
	HX_("laneunderlay",38,48,63,db),
	HX_("laneunderlayOpponent",f5,b5,24,53),
	HX_("camZooming",60,3b,bf,d6),
	HX_("curSong",75,95,6d,b7),
	HX_("gfSpeed",e8,9c,20,98),
	HX_("health",9c,28,06,fd),
	HX_("combo",4e,28,5d,4a),
	HX_("accuracy",39,06,c5,ff),
	HX_("accuracyDefault",88,23,d8,06),
	HX_("totalNotesHit",76,f4,57,a6),
	HX_("totalNotesHitDefault",eb,26,a4,bd),
	HX_("totalPlayed",37,de,ee,fd),
	HX_("ss",a0,64,00,00),
	HX_("healthBarBG",1c,d8,3b,f4),
	HX_("healthBar",97,8a,92,42),
	HX_("songPositionBar",d5,62,6e,a6),
	HX_("generatedMusic",96,8a,5d,71),
	HX_("startingSong",b5,31,61,33),
	HX_("iconP1",9a,bd,d6,45),
	HX_("iconP2",9b,bd,d6,45),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camSustains",9f,69,a2,15),
	HX_("camNotes",b2,c1,02,a8),
	HX_("camGame",a1,47,50,cf),
	HX_("cannotDie",fd,a9,4e,4f),
	HX_("isSMFile",a0,bf,e3,d7),
	HX_("notesHitArray",a7,0b,f3,bd),
	HX_("currentFrames",bf,30,e2,8f),
	HX_("idleToBeat",c5,ee,79,79),
	HX_("idleBeat",aa,ce,03,36),
	HX_("forcedToIdle",28,1b,86,c6),
	HX_("allowedToHeadbang",bb,a8,e9,48),
	HX_("allowedToCheer",ca,12,31,a1),
	HX_("dialogue",18,2d,94,a7),
	HX_("songName",c0,d0,d7,36),
	HX_("altSuffix",da,14,b5,b7),
	HX_("currentSection",ac,7a,6c,6b),
	HX_("fc",3d,59,00,00),
	HX_("wiggleShit",0b,07,40,33),
	HX_("talking",36,57,a8,16),
	HX_("songScore",3d,bb,53,a8),
	HX_("songScoreDef",88,1a,f9,d0),
	HX_("scoreTxt",3e,12,c4,0e),
	HX_("judgementCounter",c7,fa,f4,d2),
	HX_("replayTxt",89,f1,6f,0a),
	HX_("needSkip",f5,99,f0,28),
	HX_("skipActive",a5,35,4a,7e),
	HX_("skipText",cc,ba,4e,c3),
	HX_("skipTo",da,3d,a7,dc),
	HX_("funneEffect",67,55,3f,6f),
	HX_("inCutscene",8f,21,01,56),
	HX_("usedTimeTravel",a4,7d,1d,70),
	HX_("camPos",c5,54,7c,b7),
	HX_("randomVar",a4,58,4f,a7),
	HX_("interp",d4,79,86,9e),
	HX_("interp2",de,1f,24,17),
	HX_("triggeredAlready",c1,04,84,a5),
	HX_("tankGrounds",42,12,18,21),
	HX_("botPlayState",76,4c,39,74),
	HX_("saveNotes",c4,e3,77,2e),
	HX_("saveJudge",1a,b7,c8,e4),
	HX_("replayAna",ed,7d,61,0a),
	HX_("executeModchart",31,4a,80,b8),
	HX_("dataSuffix",9b,a8,47,88),
	HX_("dataColor",d9,f2,4b,90),
	HX_("addObject",c0,b3,63,cd),
	HX_("removeObject",23,1a,6d,84),
	HX_("create",fc,66,0f,7c),
	HX_("schoolIntro",58,5d,50,47),
	HX_("startTimer",03,98,4c,2c),
	HX_("perfectMode",10,4f,4c,f3),
	HX_("luaWiggles",90,11,ce,e3),
	HX_("startCountdown",ef,1f,f0,88),
	HX_("previousFrameTime",a3,ef,a7,c2),
	HX_("lastReportedPlayheadPosition",86,66,7f,37),
	HX_("songTime",82,2a,d5,3a),
	HX_("getKey",a9,c2,20,a3),
	HX_("keys",f4,e1,06,47),
	HX_("releaseInput",c3,5c,40,85),
	HX_("closestNotes",28,4f,02,c1),
	HX_("handleInput",42,6f,67,70),
	HX_("songStarted",ec,81,a7,ed),
	HX_("doAnything",2d,8c,83,68),
	HX_("bar",d3,b1,4a,00),
	HX_("previousRate",b7,22,46,f2),
	HX_("leCoolSongName",c2,b4,46,2a),
	HX_("startSong",57,9d,4b,05),
	HX_("debugNum",b3,39,d8,90),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("sortByShit",35,ff,86,6e),
	HX_("generateStaticArrows",ad,44,90,42),
	HX_("appearStaticArrows",0d,4c,c7,a0),
	HX_("tweenCamIn",69,37,60,f8),
	HX_("openSubState",5b,66,48,37),
	HX_("closeSubState",49,18,32,04),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("paused",ae,40,84,ef),
	HX_("startedCountdown",30,57,28,9b),
	HX_("canPause",c6,18,eb,2b),
	HX_("nps",f1,d9,53,00),
	HX_("maxNPS",ad,a9,51,be),
	HX_("stopUpdate",ab,d7,b4,b0),
	HX_("removedVideo",bb,c0,72,00),
	HX_("currentBPM",26,68,25,c7),
	HX_("updateFrame",64,e1,1b,ec),
	HX_("pastScrollChanges",44,1c,82,6e),
	HX_("currentLuaIndex",93,2f,c9,10),
	HX_("update",09,86,05,87),
	HX_("getSectionByTime",d3,a2,dd,1e),
	HX_("recalculateAllSectionTimes",4f,b8,31,bc),
	HX_("endSong",50,dd,7c,2e),
	HX_("endingSong",5c,73,d7,67),
	HX_("hits",c0,42,0e,45),
	HX_("offsetTest",85,51,11,49),
	HX_("getRatesScore",f5,78,f9,44),
	HX_("timeShown",84,5d,18,31),
	HX_("currentTimingShown",2e,56,ba,1d),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("NearlyEquals",b4,8d,40,69),
	HX_("upHold",3a,25,8e,74),
	HX_("downHold",c1,c6,fa,79),
	HX_("rightHold",3b,1f,d9,af),
	HX_("leftHold",e6,0c,0e,4c),
	HX_("keyShit",ff,40,2c,a6),
	HX_("findByTime",9d,3a,9f,3b),
	HX_("findByTimeIndex",35,37,38,0e),
	HX_("fuckingVolume",c5,2f,0e,74),
	HX_("useVideo",b4,76,67,fe),
	HX_("playingDathing",83,ed,1f,d5),
	HX_("videoSprite",e0,72,3d,3c),
	HX_("backgroundVideo",ad,f1,e6,f9),
	HX_("noteMiss",0e,78,8f,57),
	HX_("tankX",2e,d2,ec,0a),
	HX_("tankSpeed",3d,7c,80,fc),
	HX_("tankAngle",89,28,f9,9d),
	HX_("updateAccuracy",62,f9,ee,34),
	HX_("getKeyPresses",08,cf,e0,04),
	HX_("mashing",99,83,64,f9),
	HX_("mashViolations",77,15,e1,83),
	HX_("etternaModeScore",aa,02,79,42),
	HX_("noteCheck",76,e3,43,83),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("pressArrow",46,fb,e7,02),
	HX_("danced",d1,49,8f,1e),
	HX_("stepHit",67,ae,41,81),
	HX_("beatHit",7d,ea,04,74),
	HX_("cleanedSong",1d,82,51,e6),
	HX_("changeCharacter",19,7c,6c,fc),
	HX_("completeQuest",69,bc,55,34),
	HX_("setTransparent",d0,66,78,ca),
	HX_("fnfEventFunc",80,5a,28,c4),
	HX_("newHSSprite",d0,19,fb,d4),
	HX_("newHSText",b8,71,e3,54),
	HX_("endHscript",d8,b1,3a,d2),
	HX_("endHscript2",5a,eb,20,21),
	HX_("hscriptApply",fb,67,df,a5),
	HX_("hscriptApply2",d7,93,9b,7d),
	HX_("poggers",e7,c2,a8,25),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_MARK_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::weekSong,"weekSong");
	HX_MARK_MEMBER_NAME(PlayState_obj::weekScore,"weekScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::shits,"shits");
	HX_MARK_MEMBER_NAME(PlayState_obj::bads,"bads");
	HX_MARK_MEMBER_NAME(PlayState_obj::goods,"goods");
	HX_MARK_MEMBER_NAME(PlayState_obj::sicks,"sicks");
	HX_MARK_MEMBER_NAME(PlayState_obj::eventeditortestscript,"eventeditortestscript");
	HX_MARK_MEMBER_NAME(PlayState_obj::eventeditortesting,"eventeditortesting");
	HX_MARK_MEMBER_NAME(PlayState_obj::songPosBG,"songPosBG");
	HX_MARK_MEMBER_NAME(PlayState_obj::songPosBar,"songPosBar");
	HX_MARK_MEMBER_NAME(PlayState_obj::noteskinSprite,"noteskinSprite");
	HX_MARK_MEMBER_NAME(PlayState_obj::noteskinPixelSprite,"noteskinPixelSprite");
	HX_MARK_MEMBER_NAME(PlayState_obj::noteskinPixelSpriteEnds,"noteskinPixelSpriteEnds");
	HX_MARK_MEMBER_NAME(PlayState_obj::rep,"rep");
	HX_MARK_MEMBER_NAME(PlayState_obj::loadRep,"loadRep");
	HX_MARK_MEMBER_NAME(PlayState_obj::inResults,"inResults");
	HX_MARK_MEMBER_NAME(PlayState_obj::inDaPlay,"inDaPlay");
	HX_MARK_MEMBER_NAME(PlayState_obj::noteBools,"noteBools");
	HX_MARK_MEMBER_NAME(PlayState_obj::isSM,"isSM");
	HX_MARK_MEMBER_NAME(PlayState_obj::sm,"sm");
	HX_MARK_MEMBER_NAME(PlayState_obj::pathToSm,"pathToSm");
	HX_MARK_MEMBER_NAME(PlayState_obj::dad,"dad");
	HX_MARK_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_MARK_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(PlayState_obj::olds,"olds");
	HX_MARK_MEMBER_NAME(PlayState_obj::oldcode,"oldcode");
	HX_MARK_MEMBER_NAME(PlayState_obj::zoomText,"zoomText");
	HX_MARK_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_MARK_MEMBER_NAME(PlayState_obj::strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(PlayState_obj::playerStrums,"playerStrums");
	HX_MARK_MEMBER_NAME(PlayState_obj::cpuStrums,"cpuStrums");
	HX_MARK_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignMisses,"campaignMisses");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignSicks,"campaignSicks");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignGoods,"campaignGoods");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignBads,"campaignBads");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignShits,"campaignShits");
	HX_MARK_MEMBER_NAME(PlayState_obj::offsetTesting,"offsetTesting");
	HX_MARK_MEMBER_NAME(PlayState_obj::currentSong,"currentSong");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::theFunne,"theFunne");
	HX_MARK_MEMBER_NAME(PlayState_obj::stageTesting,"stageTesting");
	HX_MARK_MEMBER_NAME(PlayState_obj::Stage,"Stage");
	HX_MARK_MEMBER_NAME(PlayState_obj::repPresses,"repPresses");
	HX_MARK_MEMBER_NAME(PlayState_obj::repReleases,"repReleases");
	HX_MARK_MEMBER_NAME(PlayState_obj::timeCurrently,"timeCurrently");
	HX_MARK_MEMBER_NAME(PlayState_obj::timeCurrentlyR,"timeCurrentlyR");
	HX_MARK_MEMBER_NAME(PlayState_obj::songOffset,"songOffset");
	HX_MARK_MEMBER_NAME(PlayState_obj::highestCombo,"highestCombo");
	HX_MARK_MEMBER_NAME(PlayState_obj::startTime,"startTime");
	HX_MARK_MEMBER_NAME(PlayState_obj::luaModchart,"luaModchart");
	HX_MARK_MEMBER_NAME(PlayState_obj::songMultiplier,"songMultiplier");
	HX_MARK_MEMBER_NAME(PlayState_obj::webmHandler,"webmHandler");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::weekSong,"weekSong");
	HX_VISIT_MEMBER_NAME(PlayState_obj::weekScore,"weekScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::shits,"shits");
	HX_VISIT_MEMBER_NAME(PlayState_obj::bads,"bads");
	HX_VISIT_MEMBER_NAME(PlayState_obj::goods,"goods");
	HX_VISIT_MEMBER_NAME(PlayState_obj::sicks,"sicks");
	HX_VISIT_MEMBER_NAME(PlayState_obj::eventeditortestscript,"eventeditortestscript");
	HX_VISIT_MEMBER_NAME(PlayState_obj::eventeditortesting,"eventeditortesting");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songPosBG,"songPosBG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songPosBar,"songPosBar");
	HX_VISIT_MEMBER_NAME(PlayState_obj::noteskinSprite,"noteskinSprite");
	HX_VISIT_MEMBER_NAME(PlayState_obj::noteskinPixelSprite,"noteskinPixelSprite");
	HX_VISIT_MEMBER_NAME(PlayState_obj::noteskinPixelSpriteEnds,"noteskinPixelSpriteEnds");
	HX_VISIT_MEMBER_NAME(PlayState_obj::rep,"rep");
	HX_VISIT_MEMBER_NAME(PlayState_obj::loadRep,"loadRep");
	HX_VISIT_MEMBER_NAME(PlayState_obj::inResults,"inResults");
	HX_VISIT_MEMBER_NAME(PlayState_obj::inDaPlay,"inDaPlay");
	HX_VISIT_MEMBER_NAME(PlayState_obj::noteBools,"noteBools");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isSM,"isSM");
	HX_VISIT_MEMBER_NAME(PlayState_obj::sm,"sm");
	HX_VISIT_MEMBER_NAME(PlayState_obj::pathToSm,"pathToSm");
	HX_VISIT_MEMBER_NAME(PlayState_obj::dad,"dad");
	HX_VISIT_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_VISIT_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(PlayState_obj::olds,"olds");
	HX_VISIT_MEMBER_NAME(PlayState_obj::oldcode,"oldcode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::zoomText,"zoomText");
	HX_VISIT_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(PlayState_obj::playerStrums,"playerStrums");
	HX_VISIT_MEMBER_NAME(PlayState_obj::cpuStrums,"cpuStrums");
	HX_VISIT_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignMisses,"campaignMisses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignSicks,"campaignSicks");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignGoods,"campaignGoods");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignBads,"campaignBads");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignShits,"campaignShits");
	HX_VISIT_MEMBER_NAME(PlayState_obj::offsetTesting,"offsetTesting");
	HX_VISIT_MEMBER_NAME(PlayState_obj::currentSong,"currentSong");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::theFunne,"theFunne");
	HX_VISIT_MEMBER_NAME(PlayState_obj::stageTesting,"stageTesting");
	HX_VISIT_MEMBER_NAME(PlayState_obj::Stage,"Stage");
	HX_VISIT_MEMBER_NAME(PlayState_obj::repPresses,"repPresses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::repReleases,"repReleases");
	HX_VISIT_MEMBER_NAME(PlayState_obj::timeCurrently,"timeCurrently");
	HX_VISIT_MEMBER_NAME(PlayState_obj::timeCurrentlyR,"timeCurrentlyR");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songOffset,"songOffset");
	HX_VISIT_MEMBER_NAME(PlayState_obj::highestCombo,"highestCombo");
	HX_VISIT_MEMBER_NAME(PlayState_obj::startTime,"startTime");
	HX_VISIT_MEMBER_NAME(PlayState_obj::luaModchart,"luaModchart");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songMultiplier,"songMultiplier");
	HX_VISIT_MEMBER_NAME(PlayState_obj::webmHandler,"webmHandler");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("instance",95,1f,e1,59),
	HX_("SONG",d5,eb,18,37),
	HX_("isStoryMode",ae,68,02,07),
	HX_("storyWeek",89,3e,16,2f),
	HX_("storyPlaylist",67,a1,89,7c),
	HX_("storyDifficulty",90,ca,a7,d0),
	HX_("weekSong",e9,b9,87,33),
	HX_("weekScore",be,2e,4d,db),
	HX_("shits",b3,f8,22,7c),
	HX_("bads",0e,db,10,41),
	HX_("goods",96,00,f9,97),
	HX_("sicks",f5,99,c7,7c),
	HX_("eventeditortestscript",e4,37,ff,53),
	HX_("eventeditortesting",69,71,23,4c),
	HX_("songPosBG",44,6c,11,f6),
	HX_("songPosBar",54,66,2d,59),
	HX_("noteskinSprite",d4,1c,dd,5f),
	HX_("noteskinPixelSprite",fc,2f,73,52),
	HX_("noteskinPixelSpriteEnds",54,66,20,24),
	HX_("rep",5d,d9,56,00),
	HX_("loadRep",d7,52,e1,08),
	HX_("inResults",91,9b,59,51),
	HX_("inDaPlay",d6,fd,3f,93),
	HX_("noteBools",b7,6b,85,f4),
	HX_("isSM",04,f3,be,45),
	HX_("sm",9a,64,00,00),
	HX_("pathToSm",3a,8b,a0,42),
	HX_("dad",47,36,4c,00),
	HX_("gf",1f,5a,00,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("olds",ec,f9,b0,49),
	HX_("oldcode",54,29,30,0c),
	HX_("zoomText",60,21,f6,a5),
	HX_("prevCamFollow",6d,99,a3,09),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("playerStrums",4b,e1,2a,0d),
	HX_("cpuStrums",52,86,8a,e0),
	HX_("misses",6a,62,54,56),
	HX_("campaignMisses",9a,a9,70,e4),
	HX_("campaignSicks",c5,48,c4,0b),
	HX_("campaignGoods",66,af,f5,26),
	HX_("campaignBads",3e,f6,cb,d5),
	HX_("campaignShits",83,a7,1f,0b),
	HX_("offsetTesting",7d,bc,10,da),
	HX_("currentSong",ae,fc,e9,84),
	HX_("campaignScore",22,22,d6,07),
	HX_("theFunne",05,d0,55,cd),
	HX_("stageTesting",b2,74,2e,c5),
	HX_("Stage",9e,da,38,17),
	HX_("repPresses",d4,b6,b1,e7),
	HX_("repReleases",49,43,a4,da),
	HX_("timeCurrently",39,e5,d2,31),
	HX_("timeCurrentlyR",f9,ac,b5,66),
	HX_("songOffset",48,3d,c4,bb),
	HX_("highestCombo",8a,3b,03,1f),
	HX_("startTime",8f,45,f0,05),
	HX_("luaModchart",b4,54,b5,aa),
	HX_("songMultiplier",b6,0b,db,c3),
	HX_("webmHandler",71,c7,d0,f2),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_96_boot)
HXDLIN(  96)		instance = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_99_boot)
HXDLIN(  99)		isStoryMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_100_boot)
HXDLIN( 100)		storyWeek = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_101_boot)
HXDLIN( 101)		storyPlaylist = ::cpp::VirtualArray_obj::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_102_boot)
HXDLIN( 102)		storyDifficulty = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_103_boot)
HXDLIN( 103)		weekSong = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_104_boot)
HXDLIN( 104)		weekScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_105_boot)
HXDLIN( 105)		shits = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_106_boot)
HXDLIN( 106)		bads = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_107_boot)
HXDLIN( 107)		goods = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_108_boot)
HXDLIN( 108)		sicks = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_110_boot)
HXDLIN( 110)		eventeditortestscript = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_111_boot)
HXDLIN( 111)		eventeditortesting = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_128_boot)
HXDLIN( 128)		loadRep = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_129_boot)
HXDLIN( 129)		inResults = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_131_boot)
HXDLIN( 131)		inDaPlay = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_133_boot)
HXDLIN( 133)		noteBools = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_235,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_148_boot)
HXDLIN( 148)		isSM = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_158_boot)
HXDLIN( 158)		olds = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_174_boot)
HXDLIN( 174)		zoomText = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_180_boot)
HXDLIN( 180)		strumLineNotes = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_181_boot)
HXDLIN( 181)		playerStrums = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_182_boot)
HXDLIN( 182)		cpuStrums = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_193_boot)
HXDLIN( 193)		misses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_194_boot)
HXDLIN( 194)		campaignMisses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_195_boot)
HXDLIN( 195)		campaignSicks = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_196_boot)
HXDLIN( 196)		campaignGoods = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_197_boot)
HXDLIN( 197)		campaignBads = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_198_boot)
HXDLIN( 198)		campaignShits = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_225_boot)
HXDLIN( 225)		offsetTesting = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_251_boot)
HXDLIN( 251)		currentSong = HX_("noneYet",50,51,f0,d8);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_265_boot)
HXDLIN( 265)		campaignScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_267_boot)
HXDLIN( 267)		theFunne = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_273_boot)
HXDLIN( 273)		stageTesting = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_281_boot)
HXDLIN( 281)		repPresses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_282_boot)
HXDLIN( 282)		repReleases = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_284_boot)
HXDLIN( 284)		timeCurrently = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_285_boot)
HXDLIN( 285)		timeCurrentlyR = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_294_boot)
HXDLIN( 294)		songOffset = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_304_boot)
HXDLIN( 304)		highestCombo = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_312_boot)
HXDLIN( 312)		startTime = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1506_boot)
HXDLIN(1506)		luaModchart = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1801_boot)
HXDLIN(1801)		songMultiplier = ((Float)1.0);
            	}
}

