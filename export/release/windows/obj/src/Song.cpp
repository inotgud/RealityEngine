// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Debug
#include <Debug.h>
#endif
#ifndef INCLUDED_Event
#include <Event.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_TimingStruct
#include <TimingStruct.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_4e288e2989890fc6_68_loadFromJsonRAW,"Song","loadFromJsonRAW",0x06d28d57,"Song.loadFromJsonRAW","Song.hx",68,0x775e99e9)
HX_LOCAL_STACK_FRAME(_hx_pos_4e288e2989890fc6_80_loadFromJson,"Song","loadFromJson",0x10fda511,"Song.loadFromJson","Song.hx",80,0x775e99e9)
HX_LOCAL_STACK_FRAME(_hx_pos_4e288e2989890fc6_92_conversionChecks,"Song","conversionChecks",0xdb8cfafa,"Song.conversionChecks","Song.hx",92,0x775e99e9)
HX_LOCAL_STACK_FRAME(_hx_pos_4e288e2989890fc6_189_parseJSONshit,"Song","parseJSONshit",0x7c7ff6e2,"Song.parseJSONshit","Song.hx",189,0x775e99e9)
HX_LOCAL_STACK_FRAME(_hx_pos_4e288e2989890fc6_65_boot,"Song","boot",0xfba9eb4b,"Song.boot","Song.hx",65,0x775e99e9)

void Song_obj::__construct() { }

Dynamic Song_obj::__CreateEmpty() { return new Song_obj; }

void *Song_obj::_hx_vtable = 0;

Dynamic Song_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Song_obj > _hx_result = new Song_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Song_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b844619;
}

::String Song_obj::latestChart;

 ::Dynamic Song_obj::loadFromJsonRAW(::String rawJson){
            	HX_GC_STACKFRAME(&_hx_pos_4e288e2989890fc6_68_loadFromJsonRAW)
HXLINE(  69)		while(!(::StringTools_obj::endsWith(rawJson,HX_("}",7d,00,00,00)))){
HXLINE(  71)			rawJson = rawJson.substr(0,(rawJson.length - 1));
            		}
HXLINE(  74)		 ::Dynamic jsonData =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,rawJson)->doParse();
HXLINE(  76)		 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  76)		_g->set(HX_("name",4b,72,ff,48), ::Dynamic(jsonData->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)));
HXDLIN(  76)		return ::Song_obj::parseJSONshit(HX_("rawsong",bd,0d,34,1e),jsonData,_g);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Song_obj,loadFromJsonRAW,return )

 ::Dynamic Song_obj::loadFromJson(::String songId,::String difficulty){
            	HX_STACKFRAME(&_hx_pos_4e288e2989890fc6_80_loadFromJson)
HXLINE(  81)		::String songFile = ((((HX_("",00,00,00,00) + songId) + HX_("/",2f,00,00,00)) + songId) + difficulty);
HXLINE(  83)		{
HXLINE(  83)			 ::Dynamic input = (HX_("Loading song JSON: ",f5,e3,7f,a3) + songFile);
HXDLIN(  83)			if (::hx::IsNotNull( input )) {
HXLINE(  83)				::cpp::VirtualArray output = ::Debug_obj::formatOutput(input,::hx::SourceInfo(HX_("source/Song.hx",75,11,88,af),83,HX_("Song",f5,4f,31,37),HX_("loadFromJson",f8,fc,9c,5d)));
HXDLIN(  83)				::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_INFO);
HXDLIN(  83)				::Debug_obj::writeToLogFile(output,HX_("INFO",6e,00,7c,30));
            			}
            		}
HXLINE(  85)		 ::Dynamic rawJson = ::Paths_obj::loadJSON((HX_("songs/",71,e7,88,2d) + songFile),null());
HXLINE(  86)		 ::Dynamic rawMetaJson = ::Paths_obj::loadJSON(((HX_("songs/",71,e7,88,2d) + songId) + HX_("/_meta",15,5c,30,c6)),null());
HXLINE(  88)		return ::Song_obj::parseJSONshit(songId,rawJson,rawMetaJson);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Song_obj,loadFromJson,return )

 ::Dynamic Song_obj::conversionChecks( ::Dynamic song){
            	HX_GC_STACKFRAME(&_hx_pos_4e288e2989890fc6_92_conversionChecks)
HXLINE(  93)		Float ba = ( (Float)(song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE(  95)		int index = 0;
HXLINE(  97)		::Array< ::Dynamic> convertedStuff = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  99)		if (::hx::IsNull( song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 100)			song->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 102)		{
HXLINE( 102)			int _g = 0;
HXDLIN( 102)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 102)			while((_g < _g1->length)){
HXLINE( 102)				 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 102)				_g = (_g + 1);
HXLINE( 104)				::String name = ( (::String)(::Reflect_obj::field(i,HX_("name",4b,72,ff,48))) );
HXLINE( 105)				::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 106)				Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 107)				Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 109)				convertedStuff->push( ::Event_obj::__alloc( HX_CTX ,name,pos,value,type));
            			}
            		}
HXLINE( 112)		song->__SetField(HX_("eventObjects",da,5f,a4,12),convertedStuff,::hx::paccDynamic);
HXLINE( 114)		if (::hx::IsNull( song->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic) )) {
HXLINE( 115)			song->__SetField(HX_("noteStyle",df,ef,aa,c1),HX_("normal",27,72,69,30),::hx::paccDynamic);
            		}
HXLINE( 117)		if (::hx::IsNull( song->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic) )) {
HXLINE( 118)			song->__SetField(HX_("gfVersion",b9,c6,7d,f3),HX_("gf",1f,5a,00,00),::hx::paccDynamic);
            		}
HXLINE( 120)		::TimingStruct_obj::clearTimings();
HXLINE( 122)		int currentIndex = 0;
HXLINE( 123)		{
HXLINE( 123)			int _g2 = 0;
HXDLIN( 123)			::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 123)			while((_g2 < _g3->length)){
HXLINE( 123)				 ::Event i = _g3->__get(_g2).StaticCast<  ::Event >();
HXDLIN( 123)				_g2 = (_g2 + 1);
HXLINE( 125)				if ((i->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 127)					Float beat = i->position;
HXLINE( 129)					Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 131)					::TimingStruct_obj::addTiming(beat,i->value,endBeat,( (Float)(0) ));
HXLINE( 133)					if ((currentIndex != 0)) {
HXLINE( 135)						 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 136)						data->endBeat = beat;
HXLINE( 137)						data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 138)						Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 139)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE( 140)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            					}
HXLINE( 143)					currentIndex = (currentIndex + 1);
            				}
            			}
            		}
HXLINE( 147)		{
HXLINE( 147)			int _g4 = 0;
HXDLIN( 147)			::Array< ::Dynamic> _g5 = ( (::Array< ::Dynamic>)(song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN( 147)			while((_g4 < _g5->length)){
HXLINE( 147)				 ::Dynamic i = _g5->__get(_g4);
HXDLIN( 147)				_g4 = (_g4 + 1);
HXLINE( 149)				if (( (bool)(i->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) )) {
HXLINE( 150)					i->__SetField(HX_("CPUAltAnim",b2,2f,f2,ef),i->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic),::hx::paccDynamic);
            				}
HXLINE( 152)				int currentBeat = (4 * index);
HXLINE( 154)				 ::TimingStruct currentSeg = ::TimingStruct_obj::getTimingAtBeat(( (Float)(currentBeat) ));
HXLINE( 156)				if (::hx::IsNull( currentSeg )) {
HXLINE( 157)					continue;
            				}
HXLINE( 159)				Float beat = (currentSeg->startBeat + (( (Float)(currentBeat) ) - currentSeg->startBeat));
HXLINE( 161)				bool _hx_tmp;
HXDLIN( 161)				if (( (bool)(i->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE( 161)					_hx_tmp = ::hx::IsNotEq( i->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic),ba );
            				}
            				else {
HXLINE( 161)					_hx_tmp = false;
            				}
HXDLIN( 161)				if (_hx_tmp) {
HXLINE( 164)					ba = ( (Float)(i->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 165)					::Array< ::Dynamic> song1 = ( (::Array< ::Dynamic>)(song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 165)					song1->push( ::Event_obj::__alloc( HX_CTX ,(HX_("FNF BPM Change ",0d,e9,d2,db) + index),beat,( (Float)(i->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1)));
            				}
HXLINE( 168)				{
HXLINE( 168)					int _g = 0;
HXDLIN( 168)					::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 168)					while((_g < _g1->length)){
HXLINE( 168)						::cpp::VirtualArray ii = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN( 168)						_g = (_g + 1);
HXLINE( 170)						if (::hx::IsNull( song->__Field(HX_("chartVersion",da,e9,39,c8),::hx::paccDynamic) )) {
HXLINE( 172)							ii->set(3,false);
HXLINE( 173)							ii->set(4,::TimingStruct_obj::getBeatFromTime(( (Float)(ii->__get(0)) )));
            						}
HXLINE( 176)						bool _hx_tmp = ::hx::IsEq( ii->__get(3),0 );
            					}
            				}
HXLINE( 180)				index = (index + 1);
            			}
            		}
HXLINE( 183)		song->__SetField(HX_("chartVersion",da,e9,39,c8),::Song_obj::latestChart,::hx::paccDynamic);
HXLINE( 185)		return song;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Song_obj,conversionChecks,return )

 ::Dynamic Song_obj::parseJSONshit(::String songId, ::Dynamic jsonData, ::Dynamic jsonMetaData){
            	HX_STACKFRAME(&_hx_pos_4e288e2989890fc6_189_parseJSONshit)
HXLINE( 190)		 ::Dynamic songData = jsonData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic);
HXLINE( 192)		songData->__SetField(HX_("songId",10,c3,88,2d),songId,::hx::paccDynamic);
HXLINE( 195)		if (::hx::IsNull( songData->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic) )) {
HXLINE( 196)			songData->__SetField(HX_("validScore",b6,dc,18,c7),true,::hx::paccDynamic);
            		}
HXLINE( 199)		 ::Dynamic songMetaData = jsonMetaData;
HXLINE( 200)		if (::hx::IsNotNull( songMetaData->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic) )) {
HXLINE( 202)			songData->__SetField(HX_("songName",c0,d0,d7,36),songMetaData->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),::hx::paccDynamic);
            		}
            		else {
HXLINE( 206)			songData->__SetField(HX_("songName",c0,d0,d7,36),songId.split(HX_("-",2d,00,00,00))->join(HX_(" ",20,00,00,00)),::hx::paccDynamic);
            		}
HXLINE( 209)		 ::Dynamic _hx_tmp;
HXDLIN( 209)		if (::hx::IsNotNull( songMetaData->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic) )) {
HXLINE( 209)			_hx_tmp = songMetaData->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic);
            		}
            		else {
HXLINE( 209)			_hx_tmp = 0;
            		}
HXDLIN( 209)		songData->__SetField(HX_("offset",93,97,3f,60),_hx_tmp,::hx::paccDynamic);
HXLINE( 211)		return ::Song_obj::conversionChecks(songData);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Song_obj,parseJSONshit,return )


Song_obj::Song_obj()
{
}

bool Song_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"latestChart") ) { outValue = ( latestChart ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadFromJson") ) { outValue = loadFromJson_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"parseJSONshit") ) { outValue = parseJSONshit_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"loadFromJsonRAW") ) { outValue = loadFromJsonRAW_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"conversionChecks") ) { outValue = conversionChecks_dyn(); return true; }
	}
	return false;
}

bool Song_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"latestChart") ) { latestChart=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Song_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Song_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &Song_obj::latestChart,HX_("latestChart",17,86,c2,48)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Song_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Song_obj::latestChart,"latestChart");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Song_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Song_obj::latestChart,"latestChart");
};

#endif

::hx::Class Song_obj::__mClass;

static ::String Song_obj_sStaticFields[] = {
	HX_("latestChart",17,86,c2,48),
	HX_("loadFromJsonRAW",d0,df,d3,41),
	HX_("loadFromJson",f8,fc,9c,5d),
	HX_("conversionChecks",61,d2,b3,41),
	HX_("parseJSONshit",1b,89,4d,3b),
	::String(null())
};

void Song_obj::__register()
{
	Song_obj _hx_dummy;
	Song_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Song",f5,4f,31,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Song_obj::__GetStatic;
	__mClass->mSetStaticField = &Song_obj::__SetStatic;
	__mClass->mMarkFunc = Song_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Song_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Song_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Song_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Song_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Song_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Song_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_4e288e2989890fc6_65_boot)
HXDLIN(  65)		latestChart = HX_("KE1",57,25,39,00);
            	}
}

