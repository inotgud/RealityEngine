// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_KeyboardSoundEffectTwo
#include <KeyboardSoundEffectTwo.h>
#endif
#ifndef INCLUDED_Option
#include <Option.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5200f9dd1aad7d94_876_new,"KeyboardSoundEffectTwo","new",0xaf507e45,"KeyboardSoundEffectTwo.new","Options.hx",876,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_5200f9dd1aad7d94_885_left,"KeyboardSoundEffectTwo","left",0xb5cb8282,"KeyboardSoundEffectTwo.left","Options.hx",885,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_5200f9dd1aad7d94_894_right,"KeyboardSoundEffectTwo","right",0xd353bd01,"KeyboardSoundEffectTwo.right","Options.hx",894,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_5200f9dd1aad7d94_904_updateDisplay,"KeyboardSoundEffectTwo","updateDisplay",0xde256d5e,"KeyboardSoundEffectTwo.updateDisplay","Options.hx",904,0x9d9a0240)

void KeyboardSoundEffectTwo_obj::__construct(::String desc){
            	HX_STACKFRAME(&_hx_pos_5200f9dd1aad7d94_876_new)
HXLINE( 877)		super::__construct();
HXLINE( 878)		if (::OptionsMenu_obj::isInPause) {
HXLINE( 879)			this->description = HX_("if you turn it on, it will sound every time you press the note",da,c7,5c,f4);
            		}
            		else {
HXLINE( 881)			this->description = desc;
            		}
            	}

Dynamic KeyboardSoundEffectTwo_obj::__CreateEmpty() { return new KeyboardSoundEffectTwo_obj; }

void *KeyboardSoundEffectTwo_obj::_hx_vtable = 0;

Dynamic KeyboardSoundEffectTwo_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KeyboardSoundEffectTwo_obj > _hx_result = new KeyboardSoundEffectTwo_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool KeyboardSoundEffectTwo_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x27a70eb9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x27a70eb9;
	} else {
		return inClassId==(int)0x4b0d3a93;
	}
}

bool KeyboardSoundEffectTwo_obj::left(){
            	HX_STACKFRAME(&_hx_pos_5200f9dd1aad7d94_885_left)
HXLINE( 886)		if (::OptionsMenu_obj::isInPause) {
HXLINE( 887)			return false;
            		}
HXLINE( 888)		::flixel::FlxG_obj::save->data->__SetField(HX_("keyboardeffect",78,8e,42,b1),HX_("Off",4f,4b,3c,00),::hx::paccDynamic);
HXLINE( 889)		this->display = this->updateDisplay();
HXLINE( 890)		return true;
            	}


bool KeyboardSoundEffectTwo_obj::right(){
            	HX_STACKFRAME(&_hx_pos_5200f9dd1aad7d94_894_right)
HXLINE( 895)		if (::OptionsMenu_obj::isInPause) {
HXLINE( 896)			return false;
            		}
HXLINE( 897)		::flixel::FlxG_obj::save->data->__SetField(HX_("keyboardeffect",78,8e,42,b1),HX_("On",3f,45,00,00),::hx::paccDynamic);
HXLINE( 898)		this->display = this->updateDisplay();
HXLINE( 899)		return true;
            	}


::String KeyboardSoundEffectTwo_obj::updateDisplay(){
            	HX_STACKFRAME(&_hx_pos_5200f9dd1aad7d94_904_updateDisplay)
HXDLIN( 904)		return HX_("Set Keyboard Sound Effect Off (soon)",fa,b7,c6,d6);
            	}



::hx::ObjectPtr< KeyboardSoundEffectTwo_obj > KeyboardSoundEffectTwo_obj::__new(::String desc) {
	::hx::ObjectPtr< KeyboardSoundEffectTwo_obj > __this = new KeyboardSoundEffectTwo_obj();
	__this->__construct(desc);
	return __this;
}

::hx::ObjectPtr< KeyboardSoundEffectTwo_obj > KeyboardSoundEffectTwo_obj::__alloc(::hx::Ctx *_hx_ctx,::String desc) {
	KeyboardSoundEffectTwo_obj *__this = (KeyboardSoundEffectTwo_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(KeyboardSoundEffectTwo_obj), true, "KeyboardSoundEffectTwo"));
	*(void **)__this = KeyboardSoundEffectTwo_obj::_hx_vtable;
	__this->__construct(desc);
	return __this;
}

KeyboardSoundEffectTwo_obj::KeyboardSoundEffectTwo_obj()
{
}

::hx::Val KeyboardSoundEffectTwo_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateDisplay") ) { return ::hx::Val( updateDisplay_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *KeyboardSoundEffectTwo_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *KeyboardSoundEffectTwo_obj_sStaticStorageInfo = 0;
#endif

static ::String KeyboardSoundEffectTwo_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("right",dc,0b,64,e9),
	HX_("updateDisplay",39,8f,b8,86),
	::String(null()) };

::hx::Class KeyboardSoundEffectTwo_obj::__mClass;

void KeyboardSoundEffectTwo_obj::__register()
{
	KeyboardSoundEffectTwo_obj _hx_dummy;
	KeyboardSoundEffectTwo_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("KeyboardSoundEffectTwo",d3,f7,c0,39);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(KeyboardSoundEffectTwo_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< KeyboardSoundEffectTwo_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyboardSoundEffectTwo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyboardSoundEffectTwo_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

