// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_AttachedSprite
#include <AttachedSprite.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_QuestsState
#include <QuestsState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_http_HttpBase
#include <haxe/http/HttpBase.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_realityEngine_EngineMain
#include <realityEngine/EngineMain.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_Http
#include <sys/Http.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_Process
#include <sys/io/Process.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c6a5b00a6e0009b5_53_new,"QuestsState","new",0xa95daed2,"QuestsState.new","QuestsState.hx",53,0x6b8590de)
HX_LOCAL_STACK_FRAME(_hx_pos_c6a5b00a6e0009b5_65_create,"QuestsState","create",0x675e9bca,"QuestsState.create","QuestsState.hx",65,0x6b8590de)
HX_LOCAL_STACK_FRAME(_hx_pos_c6a5b00a6e0009b5_111_create,"QuestsState","create",0x675e9bca,"QuestsState.create","QuestsState.hx",111,0x6b8590de)
static const ::String _hx_array_data_7d4d9de0_5[] = {
	HX_("https://raw.githubusercontent.com/Goodbs/RealityEngineOnlineData/main/quests.txt",ee,10,16,90),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c6a5b00a6e0009b5_61_create,"QuestsState","create",0x675e9bca,"QuestsState.create","QuestsState.hx",61,0x6b8590de)
HX_LOCAL_STACK_FRAME(_hx_pos_c6a5b00a6e0009b5_147_changeSelection,"QuestsState","changeSelection",0xd7cc5a2e,"QuestsState.changeSelection","QuestsState.hx",147,0x6b8590de)
HX_LOCAL_STACK_FRAME(_hx_pos_c6a5b00a6e0009b5_172_update,"QuestsState","update",0x7254bad7,"QuestsState.update","QuestsState.hx",172,0x6b8590de)
HX_LOCAL_STACK_FRAME(_hx_pos_c6a5b00a6e0009b5_229_update,"QuestsState","update",0x7254bad7,"QuestsState.update","QuestsState.hx",229,0x6b8590de)

void QuestsState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_c6a5b00a6e0009b5_53_new)
HXLINE( 146)		this->hmmssxcc = HX_("",00,00,00,00);
HXLINE(  59)		this->curSelected = 0;
HXLINE(  58)		this->isAvailable = true;
HXLINE(  55)		this->accepteds = false;
HXLINE(  53)		super::__construct(TransIn,TransOut);
            	}

Dynamic QuestsState_obj::__CreateEmpty() { return new QuestsState_obj; }

void *QuestsState_obj::_hx_vtable = 0;

Dynamic QuestsState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< QuestsState_obj > _hx_result = new QuestsState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool QuestsState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3048e320 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void QuestsState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::QuestsState,_gthis) HXARGC(1)
            		void _hx_run(::String status){
            			HX_GC_STACKFRAME(&_hx_pos_c6a5b00a6e0009b5_65_create)
HXLINE(  65)			_gthis->isAvailable = false;
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::QuestsState,_gthis) HXARGC(1)
            		void _hx_run(::String data){
            			HX_GC_STACKFRAME(&_hx_pos_c6a5b00a6e0009b5_111_create)
HXLINE( 113)			::String text = ::StringTools_obj::trim(data.split(HX_("\n",0a,00,00,00))->__get(0));
HXLINE( 116)			_gthis->grpQuests =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 117)			_gthis->add(_gthis->grpQuests).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 118)			::String hmm =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("curl",ec,4a,c9,41),::Array_obj< ::String >::fromData( _hx_array_data_7d4d9de0_5,1),null())->_hx_stdout->readAll(null())->toString();
HXLINE( 119)			::Array< ::String > _this = hmm.substr(1,(hmm.length - 2)).split(HX_(",",2c,00,00,00));
HXDLIN( 119)			 ::Dynamic f = ::Std_obj::string_dyn();
HXDLIN( 119)			::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN( 119)			{
HXLINE( 119)				int _g = 0;
HXDLIN( 119)				int _g1 = _this->length;
HXDLIN( 119)				while((_g < _g1)){
HXLINE( 119)					_g = (_g + 1);
HXDLIN( 119)					int i = (_g - 1);
HXDLIN( 119)					{
HXLINE( 119)						::String inValue = ( (::String)(f(_hx_array_unsafe_get(_this,i))) );
HXDLIN( 119)						result->__unsafe_set(i,inValue);
            					}
            				}
            			}
HXDLIN( 119)			_gthis->quests = result;
HXLINE( 120)			{
HXLINE( 120)				int _g2 = 0;
HXDLIN( 120)				int _g3 = _gthis->quests->length;
HXDLIN( 120)				while((_g2 < _g3)){
HXLINE( 120)					_g2 = (_g2 + 1);
HXDLIN( 120)					int i = (_g2 - 1);
HXLINE( 122)					::Array< ::Dynamic> iconArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 123)					 ::Alphabet optionText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)((70 * i)) ),_gthis->quests->__get(i),true,false,null(),null(),null());
HXLINE( 124)					optionText->isMenuItem = true;
HXLINE( 125)					{
HXLINE( 125)						 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 125)						bool _hx_tmp;
HXDLIN( 125)						switch((int)(axes->_hx_getIndex())){
            							case (int)0: case (int)2: {
HXLINE( 125)								_hx_tmp = true;
            							}
            							break;
            							default:{
HXLINE( 125)								_hx_tmp = false;
            							}
            						}
HXDLIN( 125)						if (_hx_tmp) {
HXLINE( 125)							int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 125)							optionText->set_x(((( (Float)(_hx_tmp) ) - optionText->get_width()) / ( (Float)(2) )));
            						}
HXDLIN( 125)						bool _hx_tmp1;
HXDLIN( 125)						switch((int)(axes->_hx_getIndex())){
            							case (int)1: case (int)2: {
HXLINE( 125)								_hx_tmp1 = true;
            							}
            							break;
            							default:{
HXLINE( 125)								_hx_tmp1 = false;
            							}
            						}
HXDLIN( 125)						if (_hx_tmp1) {
HXLINE( 125)							int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 125)							optionText->set_y(((( (Float)(_hx_tmp) ) - optionText->get_height()) / ( (Float)(2) )));
            						}
            					}
HXLINE( 126)					optionText->targetY = ( (Float)(i) );
HXLINE( 127)					{
HXLINE( 127)						 ::Alphabet _g = optionText;
HXDLIN( 127)						_g->set_y((_g->y + ((( (Float)(100) ) * (( (Float)(i) ) - (( (Float)(_gthis->quests->length) ) / ( (Float)(2) )))) + 50)));
            					}
HXLINE( 128)					_gthis->grpQuests->add(optionText).StaticCast<  ::Alphabet >();
HXLINE( 130)					 ::AttachedSprite icon =  ::AttachedSprite_obj::__alloc( HX_CTX ,(HX_("defaultQuests/",fd,85,cf,c5) + _gthis->quests->__get(i)),null(),null(),null());
HXLINE( 131)					icon->sprTracker = optionText;
HXLINE( 133)					iconArray->push(icon);
HXLINE( 134)					_gthis->add(icon).StaticCast<  ::flixel::FlxBasic >();
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_c6a5b00a6e0009b5_61_create)
HXLINE(  60)		 ::QuestsState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  62)		 ::sys::Http httpC =  ::sys::Http_obj::__alloc( HX_CTX ,HX_("https://google.com",9b,52,cc,0c));
HXLINE(  64)		httpC->onError =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(  68)		httpC->request(null());
HXLINE(  70)		::realityEngine::EngineMain_obj::discordClient(HX_("Quests",71,4e,e4,03));
HXLINE(  71)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(  71)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("menuDesat2",4c,70,fa,51),null()),null(),null(),null(),null(),null());
HXLINE(  72)		bg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  73)		bg1->scrollFactor->set_y(((Float)0.10));
HXLINE(  74)		bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)1.1))),null());
HXLINE(  75)		bg1->updateHitbox();
HXLINE(  76)		{
HXLINE(  76)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  76)			bool _hx_tmp;
HXDLIN(  76)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  76)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(  76)					_hx_tmp = false;
            				}
            			}
HXDLIN(  76)			if (_hx_tmp) {
HXLINE(  76)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  76)				bg1->set_x(((( (Float)(_hx_tmp) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  76)			bool _hx_tmp1;
HXDLIN(  76)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  76)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(  76)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(  76)			if (_hx_tmp1) {
HXLINE(  76)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  76)				bg1->set_y(((( (Float)(_hx_tmp) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  77)		bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  78)		if ((this->isAvailable == true)) {
HXLINE(  80)			bg1->set_color(-16711681);
            		}
            		else {
HXLINE(  83)			int Alpha = 255;
HXDLIN(  83)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  83)			{
HXLINE(  83)				color = (color & -16711681);
HXDLIN(  83)				color = (color | 0);
            			}
HXDLIN(  83)			{
HXLINE(  83)				color = (color & -65281);
HXDLIN(  83)				color = (color | 43776);
            			}
HXDLIN(  83)			{
HXLINE(  83)				color = (color & -256);
HXDLIN(  83)				color = (color | 171);
            			}
HXDLIN(  83)			{
HXLINE(  83)				color = (color & 16777215);
HXDLIN(  83)				int color1;
HXDLIN(  83)				if ((Alpha > 255)) {
HXLINE(  83)					color1 = 255;
            				}
            				else {
HXLINE(  83)					if ((Alpha < 0)) {
HXLINE(  83)						color1 = 0;
            					}
            					else {
HXLINE(  83)						color1 = Alpha;
            					}
            				}
HXDLIN(  83)				color = (color | (color1 << 24));
            			}
HXDLIN(  83)			bg1->set_color(color);
            		}
HXLINE(  85)		this->add(bg1);
HXLINE(  87)		if ((this->isAvailable == true)) {
HXLINE(  89)			 ::Alphabet modText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(40) ),( (Float)(40) ),HX_("QUESTS",51,86,d2,81),true,false,null(),null(),null());
HXLINE(  90)			modText->isMenuItem = false;
HXLINE(  91)			this->add(modText);
            		}
            		else {
HXLINE(  94)			 ::Alphabet modText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(40) ),( (Float)(40) ),HX_("QUESTS",51,86,d2,81),true,false,null(),null(),null());
HXLINE(  95)			modText->isMenuItem = false;
HXLINE(  96)			this->add(modText);
HXLINE(  97)			 ::Alphabet modTexts =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(643) ),( (Float)(40) ),HX_("no connection",9d,7d,96,8b),true,false,null(),null(),null());
HXLINE(  98)			modTexts->isMenuItem = false;
HXLINE(  99)			modTexts->set_color(-65536);
HXLINE( 100)			this->add(modTexts);
            		}
HXLINE( 108)		 ::sys::Http http =  ::sys::Http_obj::__alloc( HX_CTX ,HX_("https://raw.githubusercontent.com/Goodbs/RealityEngineOnlineData/main/quests.txt",ee,10,16,90));
HXLINE( 110)		http->onData =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE( 140)		http->request(null());
HXLINE( 142)		this->changeSelection(null());
HXLINE( 144)		this->super::create();
            	}


void QuestsState_obj::changeSelection(::hx::Null< int >  __o_huh){
            		int huh = __o_huh.Default(0);
            	HX_STACKFRAME(&_hx_pos_c6a5b00a6e0009b5_147_changeSelection)
HXLINE( 148)		 ::QuestsState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 148)		_hx_tmp->curSelected = (_hx_tmp->curSelected + huh);
HXLINE( 149)		if ((this->curSelected < 0)) {
HXLINE( 150)			this->curSelected = (this->quests->length - 1);
            		}
HXLINE( 151)		if ((this->curSelected >= this->quests->length)) {
HXLINE( 152)			this->curSelected = 0;
            		}
HXLINE( 154)		int bullShit = 0;
HXLINE( 155)		{
HXLINE( 155)			int _g = 0;
HXDLIN( 155)			::Array< ::Dynamic> _g1 = this->grpQuests->members;
HXDLIN( 155)			while((_g < _g1->length)){
HXLINE( 155)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 155)				_g = (_g + 1);
HXLINE( 157)				item->targetY = ( (Float)((bullShit - this->curSelected)) );
HXLINE( 158)				bullShit = (bullShit + 1);
HXLINE( 160)				item->set_alpha(((Float)0.6));
HXLINE( 163)				if ((item->targetY == 0)) {
HXLINE( 165)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
HXLINE( 169)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 169)		_hx_tmp1->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(QuestsState_obj,changeSelection,(void))

void QuestsState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_c6a5b00a6e0009b5_172_update)
HXLINE( 171)		 ::QuestsState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 173)		if ((this->accepteds != true)) {
HXLINE( 175)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 175)			if (_this->keyManager->checkStatusUnsafe(27,_this->status)) {
HXLINE( 177)				 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 177)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 177)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            		else {
HXLINE( 181)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 181)			if (_this->keyManager->checkStatusUnsafe(27,_this->status)) {
HXLINE( 183)				 ::flixel::FlxState nextState =  ::QuestsState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 183)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 183)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE( 186)		if ((this->isAvailable == true)) {
HXLINE( 190)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 190)			if (_this->keyManager->checkStatusUnsafe(38,_this->status)) {
HXLINE( 192)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 192)				_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 193)				this->changeSelection(-1);
            			}
HXLINE( 195)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 195)			if (_this1->keyManager->checkStatusUnsafe(40,_this1->status)) {
HXLINE( 197)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 197)				_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 198)				this->changeSelection(1);
            			}
HXLINE( 200)			if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 202)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 202)				_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 203)				this->changeSelection(-(::flixel::FlxG_obj::mouse->wheel));
            			}
HXLINE( 205)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::QuestsState,_gthis) HXARGC(1)
            				void _hx_run(::String data){
            					HX_GC_STACKFRAME(&_hx_pos_c6a5b00a6e0009b5_229_update)
HXLINE( 230)					::String text = ::StringTools_obj::trim(data.split(HX_("\n",0a,00,00,00))->__get(0));
HXLINE( 231)					 ::Dynamic text2;
HXLINE( 232)					 ::sys::Http httpssssss =  ::sys::Http_obj::__alloc( HX_CTX ,((HX_("https://raw.githubusercontent.com/Goodbs/RealityEngineOnlineData/main/questData/",9e,9a,f6,a1) + _gthis->curSelected) + HX_(".txt",02,3f,c0,1e)));
HXLINE( 234)					::String coolutilread = HX_("",00,00,00,00);
HXLINE( 235)					if (::sys::FileSystem_obj::exists(((HX_("assets/data/questsData/",5b,2e,10,72) + _gthis->quests->__get(_gthis->curSelected)) + HX_(".txt",02,3f,c0,1e)))) {
HXLINE( 237)						coolutilread = ::sys::io::File_obj::getContent(((HX_("assets/data/questsData/",5b,2e,10,72) + _gthis->quests->__get(_gthis->curSelected)) + HX_(".txt",02,3f,c0,1e)));
            					}
            					else {
HXLINE( 240)						coolutilread = HX_("Not",f3,90,3b,00);
            					}
HXLINE( 243)					 ::flixel::util::FlxSave _gameSave =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE( 244)					 ::flixel::text::FlxText mod =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,210,(::flixel::FlxG_obj::height - 470),0,((text + HX_(" - Done? ",d6,47,7b,01)) + coolutilread),-180,null());
HXLINE( 245)					mod->scrollFactor->set(null(),null());
HXLINE( 246)					mod->setFormat(HX_("PhantomMuff1.5RealityEngine",8f,cd,de,3f),36,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 247)					_gthis->add(mod).StaticCast<  ::flixel::FlxBasic >();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 207)				this->accepteds = true;
HXLINE( 208)				 ::flixel::FlxSprite bgs =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE( 209)				bgs->set_alpha(((Float)0.6));
HXLINE( 210)				bgs->scrollFactor->set(null(),null());
HXLINE( 211)				this->add(bgs);
HXLINE( 213)				 ::flixel::FlxSprite bg2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 213)				 ::flixel::FlxSprite bg21 = bg2->loadGraphic(::Paths_obj::loadImage(HX_("im",e4,5b,00,00),null()),null(),null(),null(),null(),null());
HXLINE( 214)				bg21->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 215)				bg21->scrollFactor->set_y(((Float)0.10));
HXLINE( 216)				bg21->setGraphicSize(::Std_obj::_hx_int((bg21->get_width() * ((Float)1.1))),null());
HXLINE( 217)				bg21->updateHitbox();
HXLINE( 218)				{
HXLINE( 218)					 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 218)					bool _hx_tmp;
HXDLIN( 218)					switch((int)(axes->_hx_getIndex())){
            						case (int)0: case (int)2: {
HXLINE( 218)							_hx_tmp = true;
            						}
            						break;
            						default:{
HXLINE( 218)							_hx_tmp = false;
            						}
            					}
HXDLIN( 218)					if (_hx_tmp) {
HXLINE( 218)						int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 218)						bg21->set_x(((( (Float)(_hx_tmp) ) - bg21->get_width()) / ( (Float)(2) )));
            					}
HXDLIN( 218)					bool _hx_tmp1;
HXDLIN( 218)					switch((int)(axes->_hx_getIndex())){
            						case (int)1: case (int)2: {
HXLINE( 218)							_hx_tmp1 = true;
            						}
            						break;
            						default:{
HXLINE( 218)							_hx_tmp1 = false;
            						}
            					}
HXDLIN( 218)					if (_hx_tmp1) {
HXLINE( 218)						int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 218)						bg21->set_y(((( (Float)(_hx_tmp) ) - bg21->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE( 219)				bg21->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 220)				this->add(bg21);
HXLINE( 222)				::String hmmST = HX_("",00,00,00,00);
HXLINE( 223)				 ::Alphabet modText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(360) ),( (Float)(128) ),this->quests->__get(this->curSelected),true,false,null(),null(),null());
HXLINE( 224)				modText->isMenuItem = false;
HXLINE( 225)				this->add(modText);
HXLINE( 226)				 ::sys::Http httpss =  ::sys::Http_obj::__alloc( HX_CTX ,((HX_("https://raw.githubusercontent.com/Goodbs/RealityEngineOnlineData/main/questDesc/",97,b4,9a,a4) + this->quests->__get(this->curSelected)) + HX_(".txt",02,3f,c0,1e)));
HXLINE( 228)				httpss->onData =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE( 250)				httpss->request(null());
            			}
            		}
HXLINE( 254)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< QuestsState_obj > QuestsState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< QuestsState_obj > __this = new QuestsState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< QuestsState_obj > QuestsState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	QuestsState_obj *__this = (QuestsState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(QuestsState_obj), true, "QuestsState"));
	*(void **)__this = QuestsState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

QuestsState_obj::QuestsState_obj()
{
}

void QuestsState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(QuestsState);
	HX_MARK_MEMBER_NAME(accepteds,"accepteds");
	HX_MARK_MEMBER_NAME(grpQuests,"grpQuests");
	HX_MARK_MEMBER_NAME(quests,"quests");
	HX_MARK_MEMBER_NAME(isAvailable,"isAvailable");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(hmmssxcc,"hmmssxcc");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void QuestsState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(accepteds,"accepteds");
	HX_VISIT_MEMBER_NAME(grpQuests,"grpQuests");
	HX_VISIT_MEMBER_NAME(quests,"quests");
	HX_VISIT_MEMBER_NAME(isAvailable,"isAvailable");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(hmmssxcc,"hmmssxcc");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val QuestsState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"quests") ) { return ::hx::Val( quests ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hmmssxcc") ) { return ::hx::Val( hmmssxcc ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"accepteds") ) { return ::hx::Val( accepteds ); }
		if (HX_FIELD_EQ(inName,"grpQuests") ) { return ::hx::Val( grpQuests ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isAvailable") ) { return ::hx::Val( isAvailable ); }
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val QuestsState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"quests") ) { quests=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hmmssxcc") ) { hmmssxcc=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"accepteds") ) { accepteds=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpQuests") ) { grpQuests=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isAvailable") ) { isAvailable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void QuestsState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("accepteds",2c,fd,ad,4c));
	outFields->push(HX_("grpQuests",16,54,e0,8c));
	outFields->push(HX_("quests",51,da,4f,cf));
	outFields->push(HX_("isAvailable",7f,10,04,56));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("hmmssxcc",b0,e5,7b,09));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo QuestsState_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(QuestsState_obj,accepteds),HX_("accepteds",2c,fd,ad,4c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(QuestsState_obj,grpQuests),HX_("grpQuests",16,54,e0,8c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(QuestsState_obj,quests),HX_("quests",51,da,4f,cf)},
	{::hx::fsBool,(int)offsetof(QuestsState_obj,isAvailable),HX_("isAvailable",7f,10,04,56)},
	{::hx::fsInt,(int)offsetof(QuestsState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsString,(int)offsetof(QuestsState_obj,hmmssxcc),HX_("hmmssxcc",b0,e5,7b,09)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *QuestsState_obj_sStaticStorageInfo = 0;
#endif

static ::String QuestsState_obj_sMemberFields[] = {
	HX_("accepteds",2c,fd,ad,4c),
	HX_("grpQuests",16,54,e0,8c),
	HX_("quests",51,da,4f,cf),
	HX_("isAvailable",7f,10,04,56),
	HX_("curSelected",fb,eb,ab,32),
	HX_("create",fc,66,0f,7c),
	HX_("hmmssxcc",b0,e5,7b,09),
	HX_("changeSelection",bc,98,b5,48),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class QuestsState_obj::__mClass;

void QuestsState_obj::__register()
{
	QuestsState_obj _hx_dummy;
	QuestsState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("QuestsState",e0,9d,4d,7d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(QuestsState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< QuestsState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = QuestsState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = QuestsState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

