// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_CursedOn
#include <CursedOn.h>
#endif
#ifndef INCLUDED_Option
#include <Option.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4fcc59bbde469467_805_new,"CursedOn","new",0x58a69d63,"CursedOn.new","Options.hx",805,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_4fcc59bbde469467_814_left,"CursedOn","left",0x37d09da4,"CursedOn.left","Options.hx",814,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_4fcc59bbde469467_823_right,"CursedOn","right",0x15c65f9f,"CursedOn.right","Options.hx",823,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_4fcc59bbde469467_833_updateDisplay,"CursedOn","updateDisplay",0xd808ddfc,"CursedOn.updateDisplay","Options.hx",833,0x9d9a0240)

void CursedOn_obj::__construct(::String desc){
            	HX_STACKFRAME(&_hx_pos_4fcc59bbde469467_805_new)
HXLINE( 806)		super::__construct();
HXLINE( 807)		if (::OptionsMenu_obj::isInPause) {
HXLINE( 808)			this->description = HX_("No description",bd,8e,50,26);
            		}
            		else {
HXLINE( 810)			this->description = desc;
            		}
            	}

Dynamic CursedOn_obj::__CreateEmpty() { return new CursedOn_obj; }

void *CursedOn_obj::_hx_vtable = 0;

Dynamic CursedOn_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CursedOn_obj > _hx_result = new CursedOn_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CursedOn_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x27a70eb9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x27a70eb9;
	} else {
		return inClassId==(int)0x63e6a2b1;
	}
}

bool CursedOn_obj::left(){
            	HX_STACKFRAME(&_hx_pos_4fcc59bbde469467_814_left)
HXLINE( 815)		if (::OptionsMenu_obj::isInPause) {
HXLINE( 816)			return false;
            		}
HXLINE( 817)		::flixel::FlxG_obj::save->data->__SetField(HX_("cursedmode",75,ca,3a,2a),HX_("On",3f,45,00,00),::hx::paccDynamic);
HXLINE( 818)		this->display = this->updateDisplay();
HXLINE( 819)		return true;
            	}


bool CursedOn_obj::right(){
            	HX_STACKFRAME(&_hx_pos_4fcc59bbde469467_823_right)
HXLINE( 824)		if (::OptionsMenu_obj::isInPause) {
HXLINE( 825)			return false;
            		}
HXLINE( 826)		::flixel::FlxG_obj::save->data->__SetField(HX_("cursedmode",75,ca,3a,2a),HX_("On",3f,45,00,00),::hx::paccDynamic);
HXLINE( 827)		this->display = this->updateDisplay();
HXLINE( 828)		return true;
            	}


::String CursedOn_obj::updateDisplay(){
            	HX_STACKFRAME(&_hx_pos_4fcc59bbde469467_833_updateDisplay)
HXDLIN( 833)		return HX_("Cursed Mode On",ce,a1,fa,23);
            	}



::hx::ObjectPtr< CursedOn_obj > CursedOn_obj::__new(::String desc) {
	::hx::ObjectPtr< CursedOn_obj > __this = new CursedOn_obj();
	__this->__construct(desc);
	return __this;
}

::hx::ObjectPtr< CursedOn_obj > CursedOn_obj::__alloc(::hx::Ctx *_hx_ctx,::String desc) {
	CursedOn_obj *__this = (CursedOn_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CursedOn_obj), true, "CursedOn"));
	*(void **)__this = CursedOn_obj::_hx_vtable;
	__this->__construct(desc);
	return __this;
}

CursedOn_obj::CursedOn_obj()
{
}

::hx::Val CursedOn_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateDisplay") ) { return ::hx::Val( updateDisplay_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CursedOn_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CursedOn_obj_sStaticStorageInfo = 0;
#endif

static ::String CursedOn_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("right",dc,0b,64,e9),
	HX_("updateDisplay",39,8f,b8,86),
	::String(null()) };

::hx::Class CursedOn_obj::__mClass;

void CursedOn_obj::__register()
{
	CursedOn_obj _hx_dummy;
	CursedOn_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CursedOn",f1,af,55,08);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CursedOn_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CursedOn_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CursedOn_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CursedOn_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

