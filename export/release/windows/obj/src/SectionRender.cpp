// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_SectionRender
#include <SectionRender.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9fde8367b7c4b242_15_new,"SectionRender","new",0x2409696d,"SectionRender.new","SectionRender.hx",15,0x273162a3)
HX_LOCAL_STACK_FRAME(_hx_pos_9fde8367b7c4b242_29_update,"SectionRender","update",0x0cad531c,"SectionRender.update","SectionRender.hx",29,0x273162a3)

void SectionRender_obj::__construct(Float x,Float y,int GRID_SIZE, ::Dynamic __o_Height){
            		 ::Dynamic Height = __o_Height;
            		if (::hx::IsNull(__o_Height)) Height = 16;
            	HX_STACKFRAME(&_hx_pos_9fde8367b7c4b242_15_new)
HXLINE(  16)		super::__construct(x,y,null());
HXLINE(  18)		this->makeGraphic((GRID_SIZE * 8),(GRID_SIZE * ( (int)(Height) )),-1579290,null(),null());
HXLINE(  20)		int h = GRID_SIZE;
HXLINE(  21)		if ((::Math_obj::floor(( (Float)(h) )) != h)) {
HXLINE(  22)			h = GRID_SIZE;
            		}
HXLINE(  24)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("editorBG",b2,00,f3,de),::hx::paccDynamic)) )) {
HXLINE(  25)			::flixel::addons::display::FlxGridOverlay_obj::overlay(::hx::ObjectPtr<OBJ_>(this),GRID_SIZE,::Std_obj::_hx_int(( (Float)(h) )),(GRID_SIZE * 8),(GRID_SIZE * ( (int)(Height) )),null(),null(),null());
            		}
            	}

Dynamic SectionRender_obj::__CreateEmpty() { return new SectionRender_obj; }

void *SectionRender_obj::_hx_vtable = 0;

Dynamic SectionRender_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SectionRender_obj > _hx_result = new SectionRender_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool SectionRender_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x69726473) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x69726473;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void SectionRender_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9fde8367b7c4b242_29_update)
            	}



::hx::ObjectPtr< SectionRender_obj > SectionRender_obj::__new(Float x,Float y,int GRID_SIZE, ::Dynamic __o_Height) {
	::hx::ObjectPtr< SectionRender_obj > __this = new SectionRender_obj();
	__this->__construct(x,y,GRID_SIZE,__o_Height);
	return __this;
}

::hx::ObjectPtr< SectionRender_obj > SectionRender_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y,int GRID_SIZE, ::Dynamic __o_Height) {
	SectionRender_obj *__this = (SectionRender_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SectionRender_obj), true, "SectionRender"));
	*(void **)__this = SectionRender_obj::_hx_vtable;
	__this->__construct(x,y,GRID_SIZE,__o_Height);
	return __this;
}

SectionRender_obj::SectionRender_obj()
{
}

void SectionRender_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SectionRender);
	HX_MARK_MEMBER_NAME(section,"section");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(lastUpdated,"lastUpdated");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SectionRender_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(section,"section");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(lastUpdated,"lastUpdated");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val SectionRender_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"section") ) { return ::hx::Val( section ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastUpdated") ) { return ::hx::Val( lastUpdated ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SectionRender_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"section") ) { section=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastUpdated") ) { lastUpdated=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SectionRender_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("section",e5,05,d8,5d));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("lastUpdated",85,76,7b,52));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SectionRender_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SectionRender_obj,section),HX_("section",e5,05,d8,5d)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(SectionRender_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsBool,(int)offsetof(SectionRender_obj,lastUpdated),HX_("lastUpdated",85,76,7b,52)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SectionRender_obj_sStaticStorageInfo = 0;
#endif

static ::String SectionRender_obj_sMemberFields[] = {
	HX_("section",e5,05,d8,5d),
	HX_("icon",79,e7,b2,45),
	HX_("lastUpdated",85,76,7b,52),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class SectionRender_obj::__mClass;

void SectionRender_obj::__register()
{
	SectionRender_obj _hx_dummy;
	SectionRender_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("SectionRender",fb,2e,8b,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SectionRender_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SectionRender_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SectionRender_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SectionRender_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

