// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_NewUpdateAvailable
#include <NewUpdateAvailable.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxButtonPlus
#include <flixel/addons/ui/FlxButtonPlus.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_http_HttpBase
#include <haxe/http/HttpBase.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_Http
#include <sys/Http.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f3e5d972c778c9ad_49_new,"NewUpdateAvailable","new",0x6c112312,"NewUpdateAvailable.new","NewUpdateAvailable.hx",49,0x41eb649e)
HX_LOCAL_STACK_FRAME(_hx_pos_f3e5d972c778c9ad_71_create,"NewUpdateAvailable","create",0xed994f8a,"NewUpdateAvailable.create","NewUpdateAvailable.hx",71,0x41eb649e)
HX_LOCAL_STACK_FRAME(_hx_pos_f3e5d972c778c9ad_84_create,"NewUpdateAvailable","create",0xed994f8a,"NewUpdateAvailable.create","NewUpdateAvailable.hx",84,0x41eb649e)
HX_LOCAL_STACK_FRAME(_hx_pos_f3e5d972c778c9ad_90_create,"NewUpdateAvailable","create",0xed994f8a,"NewUpdateAvailable.create","NewUpdateAvailable.hx",90,0x41eb649e)
HX_LOCAL_STACK_FRAME(_hx_pos_f3e5d972c778c9ad_53_create,"NewUpdateAvailable","create",0xed994f8a,"NewUpdateAvailable.create","NewUpdateAvailable.hx",53,0x41eb649e)
static const ::String _hx_array_data_03a1f220_5[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_f3e5d972c778c9ad_102_update,"NewUpdateAvailable","update",0xf88f6e97,"NewUpdateAvailable.update","NewUpdateAvailable.hx",102,0x41eb649e)

void NewUpdateAvailable_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_f3e5d972c778c9ad_49_new)
HXLINE(  51)		this->updateVersionString = HX_("",00,00,00,00);
HXLINE(  49)		super::__construct(TransIn,TransOut);
            	}

Dynamic NewUpdateAvailable_obj::__CreateEmpty() { return new NewUpdateAvailable_obj; }

void *NewUpdateAvailable_obj::_hx_vtable = 0;

Dynamic NewUpdateAvailable_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NewUpdateAvailable_obj > _hx_result = new NewUpdateAvailable_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool NewUpdateAvailable_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5b65d4e0) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x5b65d4e0;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void NewUpdateAvailable_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::NewUpdateAvailable,_gthis,::Array< ::String >,updateVersion) HXARGC(1)
            		void _hx_run(::String data){
            			HX_GC_STACKFRAME(&_hx_pos_f3e5d972c778c9ad_71_create)
HXLINE(  72)			updateVersion[0] = ::StringTools_obj::trim(data.split(HX_("\n",0a,00,00,00))->__get(0));
HXLINE(  73)			 ::Alphabet updateText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(40) ),( (Float)(40) ),(HX_("NEW UPDATE AVAILABLE",b2,48,18,16) + updateVersion->__get(0)),true,false,null(),null(),null());
HXLINE(  74)			updateText->isMenuItem = false;
HXLINE(  75)			_gthis->add(updateText).StaticCast<  ::flixel::FlxBasic >();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f3e5d972c778c9ad_84_create)
HXLINE(  85)			::CoolUtil_obj::browserLoad(HX_("https://github.com/Goodbs/RealityEngine/releases/latest",96,74,54,61));
HXLINE(  86)			{
HXLINE(  86)				 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  86)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  86)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f3e5d972c778c9ad_90_create)
HXLINE(  91)			::flixel::FlxG_obj::save->data->__SetField(HX_("updatenot",aa,fe,f8,82),true,::hx::paccDynamic);
HXLINE(  92)			{
HXLINE(  92)				 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  92)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  92)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_f3e5d972c778c9ad_53_create)
HXLINE(  52)		 ::NewUpdateAvailable _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  54)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("updatenot",aa,fe,f8,82),::hx::paccDynamic),true )) {
HXLINE(  56)			 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  56)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  56)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE(  58)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(  58)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("menuDesat2",4c,70,fa,51),null()),null(),null(),null(),null(),null());
HXLINE(  59)		bg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  60)		bg1->scrollFactor->set_y(((Float)0.10));
HXLINE(  61)		bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)1.1))),null());
HXLINE(  62)		bg1->updateHitbox();
HXLINE(  63)		{
HXLINE(  63)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  63)			bool _hx_tmp;
HXDLIN(  63)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  63)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(  63)					_hx_tmp = false;
            				}
            			}
HXDLIN(  63)			if (_hx_tmp) {
HXLINE(  63)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  63)				bg1->set_x(((( (Float)(_hx_tmp) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  63)			bool _hx_tmp1;
HXDLIN(  63)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  63)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(  63)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(  63)			if (_hx_tmp1) {
HXLINE(  63)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  63)				bg1->set_y(((( (Float)(_hx_tmp) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  64)		bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  65)		this->add(bg1);
HXLINE(  66)		::Array< ::String > updateVersion = ::Array_obj< ::String >::fromData( _hx_array_data_03a1f220_5,1);
HXLINE(  68)		 ::sys::Http http =  ::sys::Http_obj::__alloc( HX_CTX ,HX_("https://raw.githubusercontent.com/Goodbs/RealityEngine/main/RealityVersion.txt",68,4e,a5,00));
HXLINE(  70)		http->onData =  ::Dynamic(new _hx_Closure_0(_gthis,updateVersion));
HXLINE(  78)		http->request(null());
HXLINE(  80)		 ::Alphabet updateText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(40) ),( (Float)(200) ),HX_("New Version released",c5,6a,e5,20),true,false,null(),null(),null());
HXLINE(  81)		updateText->isMenuItem = false;
HXLINE(  82)		this->add(updateText);
HXLINE(  84)		 ::flixel::addons::ui::FlxButtonPlus button =  ::flixel::addons::ui::FlxButtonPlus_obj::__alloc( HX_CTX ,460,300, ::Dynamic(new _hx_Closure_1()),HX_("Download Update",a1,6f,4e,9a),100,25);
HXLINE(  88)		this->add(button);
HXLINE(  90)		 ::flixel::addons::ui::FlxButtonPlus button1 =  ::flixel::addons::ui::FlxButtonPlus_obj::__alloc( HX_CTX ,575,300, ::Dynamic(new _hx_Closure_2()),HX_("No",61,44,00,00),100,25);
HXLINE(  94)		this->add(button1);
HXLINE(  97)		::flixel::FlxG_obj::save->data->__SetField(HX_("updatessss",c9,ef,36,1a),HX_("",00,00,00,00),::hx::paccDynamic);
HXLINE(  98)		this->super::create();
            	}


void NewUpdateAvailable_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_f3e5d972c778c9ad_102_update)
HXDLIN( 102)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< NewUpdateAvailable_obj > NewUpdateAvailable_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< NewUpdateAvailable_obj > __this = new NewUpdateAvailable_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< NewUpdateAvailable_obj > NewUpdateAvailable_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	NewUpdateAvailable_obj *__this = (NewUpdateAvailable_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NewUpdateAvailable_obj), true, "NewUpdateAvailable"));
	*(void **)__this = NewUpdateAvailable_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

NewUpdateAvailable_obj::NewUpdateAvailable_obj()
{
}

void NewUpdateAvailable_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NewUpdateAvailable);
	HX_MARK_MEMBER_NAME(updateVersionString,"updateVersionString");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NewUpdateAvailable_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(updateVersionString,"updateVersionString");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val NewUpdateAvailable_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateVersionString") ) { return ::hx::Val( updateVersionString ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val NewUpdateAvailable_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"updateVersionString") ) { updateVersionString=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NewUpdateAvailable_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("updateVersionString",40,de,27,e5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NewUpdateAvailable_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(NewUpdateAvailable_obj,updateVersionString),HX_("updateVersionString",40,de,27,e5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *NewUpdateAvailable_obj_sStaticStorageInfo = 0;
#endif

static ::String NewUpdateAvailable_obj_sMemberFields[] = {
	HX_("updateVersionString",40,de,27,e5),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class NewUpdateAvailable_obj::__mClass;

void NewUpdateAvailable_obj::__register()
{
	NewUpdateAvailable_obj _hx_dummy;
	NewUpdateAvailable_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("NewUpdateAvailable",20,f2,a1,03);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NewUpdateAvailable_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NewUpdateAvailable_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NewUpdateAvailable_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NewUpdateAvailable_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

