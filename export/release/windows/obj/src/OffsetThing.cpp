// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_HelperFunctions
#include <HelperFunctions.h>
#endif
#ifndef INCLUDED_OffsetThing
#include <OffsetThing.h>
#endif
#ifndef INCLUDED_Option
#include <Option.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_63d33519a5872ff8_1713_new,"OffsetThing","new",0xc229fdad,"OffsetThing.new","Options.hx",1713,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_63d33519a5872ff8_1722_left,"OffsetThing","left",0x21417e1a,"OffsetThing.left","Options.hx",1722,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_63d33519a5872ff8_1731_right,"OffsetThing","right",0x6f19e669,"OffsetThing.right","Options.hx",1731,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_63d33519a5872ff8_1741_updateDisplay,"OffsetThing","updateDisplay",0x0bcf3ec6,"OffsetThing.updateDisplay","Options.hx",1741,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_63d33519a5872ff8_1746_getValue,"OffsetThing","getValue",0x40b10a8e,"OffsetThing.getValue","Options.hx",1746,0x9d9a0240)

void OffsetThing_obj::__construct(::String desc){
            	HX_STACKFRAME(&_hx_pos_63d33519a5872ff8_1713_new)
HXLINE(1714)		super::__construct();
HXLINE(1715)		if (::OptionsMenu_obj::isInPause) {
HXLINE(1716)			this->description = HX_("This option cannot be toggled in the pause menu.",b4,21,dd,c9);
            		}
            		else {
HXLINE(1718)			this->description = desc;
            		}
            	}

Dynamic OffsetThing_obj::__CreateEmpty() { return new OffsetThing_obj; }

void *OffsetThing_obj::_hx_vtable = 0;

Dynamic OffsetThing_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OffsetThing_obj > _hx_result = new OffsetThing_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool OffsetThing_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x27a70eb9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x27a70eb9;
	} else {
		return inClassId==(int)0x3f37e87b;
	}
}

bool OffsetThing_obj::left(){
            	HX_STACKFRAME(&_hx_pos_63d33519a5872ff8_1722_left)
HXLINE(1723)		if (::OptionsMenu_obj::isInPause) {
HXLINE(1724)			return false;
            		}
HXLINE(1725)		::hx::FieldRef((::flixel::FlxG_obj::save->data).mPtr,HX_("offset",93,97,3f,60))--;
HXLINE(1726)		this->display = this->updateDisplay();
HXLINE(1727)		return true;
            	}


bool OffsetThing_obj::right(){
            	HX_STACKFRAME(&_hx_pos_63d33519a5872ff8_1731_right)
HXLINE(1732)		if (::OptionsMenu_obj::isInPause) {
HXLINE(1733)			return false;
            		}
HXLINE(1734)		::hx::FieldRef((::flixel::FlxG_obj::save->data).mPtr,HX_("offset",93,97,3f,60))++;
HXLINE(1735)		this->display = this->updateDisplay();
HXLINE(1736)		return true;
            	}


::String OffsetThing_obj::updateDisplay(){
            	HX_STACKFRAME(&_hx_pos_63d33519a5872ff8_1741_updateDisplay)
HXDLIN(1741)		return ((HX_("Note offset: < ",eb,92,0b,ad) + ::HelperFunctions_obj::truncateFloat(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic)) ),0)) + HX_(" >",1e,1c,00,00));
            	}


::String OffsetThing_obj::getValue(){
            	HX_STACKFRAME(&_hx_pos_63d33519a5872ff8_1746_getValue)
HXDLIN(1746)		return ((HX_("Note offset: < ",eb,92,0b,ad) + ::HelperFunctions_obj::truncateFloat(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic)) ),0)) + HX_(" >",1e,1c,00,00));
            	}



::hx::ObjectPtr< OffsetThing_obj > OffsetThing_obj::__new(::String desc) {
	::hx::ObjectPtr< OffsetThing_obj > __this = new OffsetThing_obj();
	__this->__construct(desc);
	return __this;
}

::hx::ObjectPtr< OffsetThing_obj > OffsetThing_obj::__alloc(::hx::Ctx *_hx_ctx,::String desc) {
	OffsetThing_obj *__this = (OffsetThing_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OffsetThing_obj), true, "OffsetThing"));
	*(void **)__this = OffsetThing_obj::_hx_vtable;
	__this->__construct(desc);
	return __this;
}

OffsetThing_obj::OffsetThing_obj()
{
}

::hx::Val OffsetThing_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getValue") ) { return ::hx::Val( getValue_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateDisplay") ) { return ::hx::Val( updateDisplay_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *OffsetThing_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *OffsetThing_obj_sStaticStorageInfo = 0;
#endif

static ::String OffsetThing_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("right",dc,0b,64,e9),
	HX_("updateDisplay",39,8f,b8,86),
	HX_("getValue",fb,8e,8f,91),
	::String(null()) };

::hx::Class OffsetThing_obj::__mClass;

void OffsetThing_obj::__register()
{
	OffsetThing_obj _hx_dummy;
	OffsetThing_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("OffsetThing",3b,a3,3c,8c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(OffsetThing_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< OffsetThing_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OffsetThing_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OffsetThing_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

