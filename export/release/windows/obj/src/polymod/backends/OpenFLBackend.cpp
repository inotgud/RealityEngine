// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_IAssetCache
#include <openfl/utils/IAssetCache.h>
#endif
#ifndef INCLUDED_polymod_backends_IBackend
#include <polymod/backends/IBackend.h>
#endif
#ifndef INCLUDED_polymod_backends_LimeBackend
#include <polymod/backends/LimeBackend.h>
#endif
#ifndef INCLUDED_polymod_backends_OpenFLBackend
#include <polymod/backends/OpenFLBackend.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0a4b69038e11ecd5_37_new,"polymod.backends.OpenFLBackend","new",0x0f63945f,"polymod.backends.OpenFLBackend.new","polymod/backends/OpenFLBackend.hx",37,0x281193d1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a4b69038e11ecd5_40_clearCache,"polymod.backends.OpenFLBackend","clearCache",0xfd1d2356,"polymod.backends.OpenFLBackend.clearCache","polymod/backends/OpenFLBackend.hx",40,0x281193d1)
namespace polymod{
namespace backends{

void OpenFLBackend_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_0a4b69038e11ecd5_37_new)
HXDLIN(  37)		super::__construct();
            	}

Dynamic OpenFLBackend_obj::__CreateEmpty() { return new OpenFLBackend_obj; }

void *OpenFLBackend_obj::_hx_vtable = 0;

Dynamic OpenFLBackend_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OpenFLBackend_obj > _hx_result = new OpenFLBackend_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool OpenFLBackend_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x12bf7dcf) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x12bf7dcf;
	} else {
		return inClassId==(int)0x7a28a88e;
	}
}

void OpenFLBackend_obj::clearCache(){
            	HX_STACKFRAME(&_hx_pos_0a4b69038e11ecd5_40_clearCache)
HXLINE(  41)		this->super::clearCache();
HXLINE(  42)		::openfl::utils::IAssetCache_obj::clear(::openfl::utils::Assets_obj::cache,null());
            	}



::hx::ObjectPtr< OpenFLBackend_obj > OpenFLBackend_obj::__new() {
	::hx::ObjectPtr< OpenFLBackend_obj > __this = new OpenFLBackend_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< OpenFLBackend_obj > OpenFLBackend_obj::__alloc(::hx::Ctx *_hx_ctx) {
	OpenFLBackend_obj *__this = (OpenFLBackend_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OpenFLBackend_obj), true, "polymod.backends.OpenFLBackend"));
	*(void **)__this = OpenFLBackend_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

OpenFLBackend_obj::OpenFLBackend_obj()
{
}

::hx::Val OpenFLBackend_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"clearCache") ) { return ::hx::Val( clearCache_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *OpenFLBackend_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *OpenFLBackend_obj_sStaticStorageInfo = 0;
#endif

static ::String OpenFLBackend_obj_sMemberFields[] = {
	HX_("clearCache",75,d9,1e,16),
	::String(null()) };

::hx::Class OpenFLBackend_obj::__mClass;

void OpenFLBackend_obj::__register()
{
	OpenFLBackend_obj _hx_dummy;
	OpenFLBackend_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("polymod.backends.OpenFLBackend",ed,78,14,4b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(OpenFLBackend_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< OpenFLBackend_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OpenFLBackend_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OpenFLBackend_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace polymod
} // end namespace backends
