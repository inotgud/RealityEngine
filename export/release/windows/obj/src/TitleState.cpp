// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_CustomState
#include <CustomState.h>
#endif
#ifndef INCLUDED_Debug
#include <Debug.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MenuItem
#include <MenuItem.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_NewUpdateAvailable
#include <NewUpdateAvailable.h>
#endif
#ifndef INCLUDED_NoteskinHelpers
#include <NoteskinHelpers.h>
#endif
#ifndef INCLUDED_OpenDiscord
#include <OpenDiscord.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_RealityEngineData
#include <RealityEngineData.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_ThisExit
#include <ThisExit.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrail
#include <flixel/addons/effects/FlxTrail.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrailArea
#include <flixel/addons/effects/FlxTrailArea.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxEffectSprite
#include <flixel/addons/effects/chainable/FlxEffectSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveEffect
#include <flixel/addons/effects/chainable/FlxWaveEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_IFlxEffect
#include <flixel/addons/effects/chainable/IFlxEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_GraphicTransTileDiamond
#include <flixel/addons/transition/GraphicTransTileDiamond.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_atlas_FlxAtlas
#include <flixel/graphics/atlas/FlxAtlas.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_AngleTween
#include <flixel/tweens/misc/AngleTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_http_HttpBase
#include <haxe/http/HttpBase.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_Interp
#include <hscript/Interp.h>
#endif
#ifndef INCLUDED_hscript_Parser
#include <hscript/Parser.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_Http
#include <sys/Http.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a55214e0452daa02_48_new,"TitleState","new",0x3b23deeb,"TitleState.new","TitleState.hx",48,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_209_create,"TitleState","create",0x801cc151,"TitleState.create","TitleState.hx",209,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_212_create,"TitleState","create",0x801cc151,"TitleState.create","TitleState.hx",212,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_226_create,"TitleState","create",0x801cc151,"TitleState.create","TitleState.hx",226,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_79_create,"TitleState","create",0x801cc151,"TitleState.create","TitleState.hx",79,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_259_startIntro,"TitleState","startIntro",0x6a094b7f,"TitleState.startIntro","TitleState.hx",259,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_393_getIntroTextShit,"TitleState","getIntroTextShit",0x5dcf15b8,"TitleState.getIntroTextShit","TitleState.hx",393,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_411_update,"TitleState","update",0x8b12e05e,"TitleState.update","TitleState.hx",411,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_455_update,"TitleState","update",0x8b12e05e,"TitleState.update","TitleState.hx",455,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_498_createCoolText,"TitleState","createCoolText",0x83610287,"TitleState.createCoolText","TitleState.hx",498,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_509_addMoreText,"TitleState","addMoreText",0xcf420fae,"TitleState.addMoreText","TitleState.hx",509,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_519_deleteCoolText,"TitleState","deleteCoolText",0x8afda2b6,"TitleState.deleteCoolText","TitleState.hx",519,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_527_beatHit,"TitleState","beatHit",0xfba69a88,"TitleState.beatHit","TitleState.hx",527,0xd132a6e5)
static const ::String _hx_array_data_8ca18d79_17[] = {
	HX_("Reality Engine",92,44,62,08),HX_("by",d7,55,00,00),
};
static const ::String _hx_array_data_8ca18d79_18[] = {
	HX_("Reality Engine",92,44,62,08),HX_("by",d7,55,00,00),
};
static const ::String _hx_array_data_8ca18d79_19[] = {
	HX_("Reality Engine",92,44,62,08),HX_("yapimcilari",9e,17,5f,8b),
};
static const ::String _hx_array_data_8ca18d79_20[] = {
	HX_("In Partnership",49,39,6b,e0),HX_("with",06,76,f8,4e),
};
static const ::String _hx_array_data_8ca18d79_21[] = {
	HX_("In Partnership",49,39,6b,e0),HX_("with",06,76,f8,4e),
};
static const ::String _hx_array_data_8ca18d79_22[] = {
	HX_("Aynen",3f,56,5a,bd),HX_("sununla ortagiz",42,bb,9b,25),
};
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_589_skipIntro,"TitleState","skipIntro",0xc9924038,"TitleState.skipIntro","TitleState.hx",589,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_604_skipIntro,"TitleState","skipIntro",0xc9924038,"TitleState.skipIntro","TitleState.hx",604,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_620_callOnHscript,"TitleState","callOnHscript",0x0740d2e1,"TitleState.callOnHscript","TitleState.hx",620,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_50_boot,"TitleState","boot",0x7c582f47,"TitleState.boot","TitleState.hx",50,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_52_boot,"TitleState","boot",0x7c582f47,"TitleState.boot","TitleState.hx",52,0xd132a6e5)
static const int _hx_array_data_8ca18d79_28[] = {
	(int)48,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_53_boot,"TitleState","boot",0x7c582f47,"TitleState.boot","TitleState.hx",53,0xd132a6e5)
static const int _hx_array_data_8ca18d79_30[] = {
	(int)109,(int)189,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_54_boot,"TitleState","boot",0x7c582f47,"TitleState.boot","TitleState.hx",54,0xd132a6e5)
static const int _hx_array_data_8ca18d79_32[] = {
	(int)107,(int)187,
};

void TitleState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_48_new)
HXLINE( 586)		this->skippedIntro = false;
HXLINE( 407)		this->transitioning = false;
HXLINE( 255)		this->danceLeft = false;
HXLINE( 253)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 253)		::String library = null();
HXDLIN( 253)		this->backgroundTitle = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("TitleBG",3d,0d,af,b2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  73)		this->playScript = false;
HXLINE(  71)		this->updateAvailable = false;
HXLINE(  69)		this->curWacky = ::Array_obj< ::String >::__new(0);
HXLINE(  57)		this->newUpdateAvailable = false;
HXLINE(  48)		super::__construct(TransIn,TransOut);
            	}

Dynamic TitleState_obj::__CreateEmpty() { return new TitleState_obj; }

void *TitleState_obj::_hx_vtable = 0;

Dynamic TitleState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TitleState_obj > _hx_result = new TitleState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TitleState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x22c6bd01) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x22c6bd01;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void TitleState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(Float elapsed){
            			HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_209_create)
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_212_create)
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            		void _hx_run(int exitCode){
            			HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_226_create)
HXLINE( 226)			::DiscordClient_obj::shutdown();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_79_create)
HXLINE(  81)		this->openSubState( ::OpenDiscord_obj::__alloc( HX_CTX ));
HXLINE(  83)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("muteBind",36,71,98,10),::hx::paccDynamic) )) {
HXLINE(  85)			::flixel::FlxG_obj::save->data->__SetField(HX_("muteBind",36,71,98,10),HX_("0",30,00,00,00),::hx::paccDynamic);
            		}
HXLINE(  87)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("volUpBind",2b,c1,5a,38),::hx::paccDynamic) )) {
HXLINE(  89)			::flixel::FlxG_obj::save->data->__SetField(HX_("volUpBind",2b,c1,5a,38),HX_("+",2b,00,00,00),::hx::paccDynamic);
            		}
HXLINE(  93)		::TitleState_obj::hmmmmmmmmmmmmmmmm = ::sys::io::File_obj::getContent(HX_("assets/data/language.txt",d3,ed,d9,4b));
HXLINE(  94)		::TitleState_obj::language = ::TitleState_obj::hmmmmmmmmmmmmmmmm;
HXLINE( 100)		 ::Dynamic jsonData = ::Paths_obj::loadCustomGameJson(HX_("custom_game",80,06,7f,f9),null());
HXLINE( 101)		 ::Dynamic data = jsonData;
HXLINE( 102)		::lime::app::Application_obj::current->_hx___window->set_title(( (::String)(data->__Field(HX_("gameTitle",46,04,56,45),::hx::paccDynamic)) ));
HXLINE( 103)		::TitleState_obj::description = ( (::String)(data->__Field(HX_("gameDescription",2a,2e,b5,9b),::hx::paccDynamic)) );
HXLINE( 114)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("redesignedmenustyle",62,d6,f1,d5),::hx::paccDynamic),HX_("On",3f,45,00,00) )) {
HXLINE( 116)			::MainMenuState_obj::redesignedmenustyle = true;
            		}
            		else {
HXLINE( 119)			::MainMenuState_obj::redesignedmenustyle = false;
            		}
HXLINE( 126)		if (!(::sys::FileSystem_obj::exists((::Sys_obj::getCwd() + HX_("/assets/replays",0f,a7,b1,e3))))) {
HXLINE( 127)			::sys::FileSystem_obj::createDirectory((::Sys_obj::getCwd() + HX_("/assets/replays",0f,a7,b1,e3)));
            		}
HXLINE( 132)		::String _hx_tmp = ((HX_("We loaded ",89,2a,cb,c1) + ::openfl::utils::Assets_obj::getLibrary(HX_("default",c1,d8,c3,9b))->assetsLoaded) + HX_(" assets into the default library",8a,a8,57,38));
HXDLIN( 132)		::Debug_obj::logTrace(_hx_tmp,::hx::SourceInfo(HX_("source/TitleState.hx",71,4f,0c,46),132,HX_("TitleState",79,8d,a1,8c),HX_("create",fc,66,0f,7c)));
HXLINE( 139)		::flixel::FlxG_obj::autoPause = false;
HXLINE( 141)		::flixel::FlxG_obj::save->bind(HX_("funkin",31,b2,4f,6f),HX_("ninjamuffin99",f7,4c,e5,00));
HXLINE( 143)		::PlayerSettings_obj::init();
HXLINE( 145)		::RealityEngineData_obj::initSave();
HXLINE( 148)		::NoteskinHelpers_obj::updateNoteskins();
HXLINE( 150)		::flixel::FlxG_obj::sound->muteKeys = ::TitleState_obj::muteKeys;
HXLINE( 151)		::flixel::FlxG_obj::sound->volumeDownKeys = ::TitleState_obj::volumeDownKeys;
HXLINE( 152)		::flixel::FlxG_obj::sound->volumeUpKeys = ::TitleState_obj::volumeUpKeys;
HXLINE( 154)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 156)		{
HXLINE( 156)			 ::flixel::math::FlxRect _this = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 156)			_this->x = ( (Float)(0) );
HXDLIN( 156)			_this->y = ( (Float)(0) );
HXDLIN( 156)			_this->width = ( (Float)(0) );
HXDLIN( 156)			_this->height = ( (Float)(0) );
            		}
HXLINE( 158)		::flixel::graphics::FlxGraphic_obj::defaultPersist = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXLINE( 160)		::MusicBeatState_obj::initSave = true;
HXLINE( 162)		::String s = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("fullscreenBind",98,95,ed,45),::hx::paccDynamic)) );
HXDLIN( 162)		s = s.toUpperCase();
HXDLIN( 162)		int _hx_tmp1;
HXDLIN( 162)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s)) {
HXLINE( 162)			_hx_tmp1 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s);
            		}
            		else {
HXLINE( 162)			_hx_tmp1 = -1;
            		}
HXDLIN( 162)		this->fullscreenBind = _hx_tmp1;
HXLINE( 164)		::Highscore_obj::load();
HXLINE( 166)		 ::flixel::math::FlxRandom _hx_tmp2 = ::flixel::FlxG_obj::random;
HXDLIN( 166)		this->curWacky = _hx_tmp2->getObject_Array_String(this->getIntroTextShit(),null(),null(),null());
HXLINE( 171)		::String expr = ::sys::io::File_obj::getContent(HX_("assets/custom/custom_states/TitleState.hx",54,a3,c6,a2));
HXLINE( 173)		 ::hscript::Parser parser =  ::hscript::Parser_obj::__alloc( HX_CTX );
HXLINE( 174)		::TitleState_obj::interp =  ::hscript::Interp_obj::__alloc( HX_CTX );
HXLINE( 175)		 ::hscript::Expr ast = parser->parseString(expr,null());
HXLINE( 176)		::TitleState_obj::interp->variables->set(HX_("add",21,f2,49,00),this->add_dyn());
HXLINE( 177)		::TitleState_obj::interp->variables->set(HX_("remove",44,9c,88,04),this->remove_dyn());
HXLINE( 179)		::TitleState_obj::interp->variables->set(HX_("DiscordClient",f7,d0,c5,2b),::hx::ClassOf< ::DiscordClient >());
HXLINE( 181)		::TitleState_obj::interp->variables->set(HX_("FlxG",b5,4b,97,2e),::hx::ClassOf< ::flixel::FlxG >());
HXLINE( 182)		::TitleState_obj::interp->variables->set(HX_("CustomState",80,74,7a,fd),::hx::ClassOf< ::CustomState >());
HXLINE( 183)		::TitleState_obj::interp->variables->set(HX_("MenuItem",72,ae,e0,25),::hx::ClassOf< ::MenuItem >());
HXLINE( 184)		::TitleState_obj::interp->variables->set(HX_("Character",89,bb,a4,e3),::hx::ClassOf< ::Character >());
HXLINE( 185)		::TitleState_obj::interp->variables->set(HX_("gfDance",94,88,3a,eb),this->gfDance);
HXLINE( 186)		::TitleState_obj::interp->variables->set(HX_("FlxGame",64,2d,b7,d4),::hx::ClassOf< ::flixel::FlxGame >());
HXLINE( 187)		::TitleState_obj::interp->variables->set(HX_("FlxObject",b1,78,2e,97),::hx::ClassOf< ::flixel::FlxObject >());
HXLINE( 188)		::TitleState_obj::interp->variables->set(HX_("FlxSprite",f7,d5,84,45),::hx::ClassOf< ::flixel::FlxSprite >());
HXLINE( 189)		::TitleState_obj::interp->variables->set(HX_("TitleState",79,8d,a1,8c),::hx::ClassOf< ::TitleState >());
HXLINE( 190)		::TitleState_obj::interp->variables->set(HX_("FlxState",5f,80,e5,40),::hx::ClassOf< ::flixel::FlxState >());
HXLINE( 191)		::TitleState_obj::interp->variables->set(HX_("FlxSubState",e3,a6,41,10),::hx::ClassOf< ::flixel::FlxSubState >());
HXLINE( 192)		::TitleState_obj::interp->variables->set(HX_("FlxGridOverlay",38,52,48,2c),::hx::ClassOf< ::flixel::addons::display::FlxGridOverlay >());
HXLINE( 193)		::TitleState_obj::interp->variables->set(HX_("FlxTrail",14,9e,f9,d2),::hx::ClassOf< ::flixel::addons::effects::FlxTrail >());
HXLINE( 194)		::TitleState_obj::interp->variables->set(HX_("FlxTrailArea",c1,ef,71,42),::hx::ClassOf< ::flixel::addons::effects::FlxTrailArea >());
HXLINE( 195)		::TitleState_obj::interp->variables->set(HX_("FlxEffectSprite",e8,68,af,66),::hx::ClassOf< ::flixel::addons::effects::chainable::FlxEffectSprite >());
HXLINE( 196)		::TitleState_obj::interp->variables->set(HX_("FlxWaveEffect",1c,a0,de,d8),::hx::ClassOf< ::flixel::addons::effects::chainable::FlxWaveEffect >());
HXLINE( 197)		::TitleState_obj::interp->variables->set(HX_("FlxTransitionableState",b0,b8,2b,5f),::hx::ClassOf< ::flixel::addons::transition::FlxTransitionableState >());
HXLINE( 198)		::TitleState_obj::interp->variables->set(HX_("FlxAtlas",99,57,b7,e3),::hx::ClassOf< ::flixel::graphics::atlas::FlxAtlas >());
HXLINE( 199)		::TitleState_obj::interp->variables->set(HX_("FlxAtlasFrames",1f,b4,c0,8d),::hx::ClassOf< ::flixel::graphics::frames::FlxAtlasFrames >());
HXLINE( 200)		::TitleState_obj::interp->variables->set(HX_("FlxMath",3a,7b,ae,d8),::hx::ClassOf< ::flixel::math::FlxMath >());
HXLINE( 201)		::TitleState_obj::interp->variables->set(HX_("FlxPoint",9e,be,69,83),::hx::ClassOf< ::flixel::math::FlxPoint >());
HXLINE( 202)		::TitleState_obj::interp->variables->set(HX_("FlxRect",96,86,ff,db),::hx::ClassOf< ::flixel::math::FlxRect >());
HXLINE( 203)		::TitleState_obj::interp->variables->set(HX_("FlxSound",1d,97,a6,3d),::hx::ClassOf< ::flixel::_hx_system::FlxSound >());
HXLINE( 204)		::TitleState_obj::interp->variables->set(HX_("FlxText",1f,06,52,dd),::hx::ClassOf< ::flixel::text::FlxText >());
HXLINE( 205)		::TitleState_obj::interp->variables->set(HX_("FlxEase",60,c5,64,d3),::hx::ClassOf< ::flixel::tweens::FlxEase >());
HXLINE( 206)		::TitleState_obj::interp->variables->set(HX_("FlxTween",b9,b4,4a,d6),::hx::ClassOf< ::flixel::tweens::FlxTween >());
HXLINE( 207)		::TitleState_obj::interp->variables->set(HX_("MusicBeatState",76,df,84,5d),::hx::ClassOf< ::MusicBeatState >());
HXLINE( 208)		::TitleState_obj::interp->variables->set(HX_("update",09,86,05,87), ::Dynamic(new _hx_Closure_0()));
HXLINE( 211)		::TitleState_obj::interp->variables->set(HX_("create",fc,66,0f,7c), ::Dynamic(new _hx_Closure_1()));
HXLINE( 215)		::TitleState_obj::interp->execute(ast);
HXLINE( 218)		this->callOnHscript(HX_("create",fc,66,0f,7c),null());
HXLINE( 222)		::DiscordClient_obj::initialize();
HXLINE( 225)		::lime::app::Application_obj::current->onExit->add( ::Dynamic(new _hx_Closure_2()),null(),null());
HXLINE( 232)		this->super::create();
HXLINE( 247)		this->startIntro();
            	}


void TitleState_obj::startIntro(){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_259_startIntro)
HXLINE( 260)		this->persistentUpdate = true;
HXLINE( 263)		this->logoBl =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-150,-100,null());
HXLINE( 264)		 ::flixel::FlxSprite _hx_tmp = this->logoBl;
HXDLIN( 264)		_hx_tmp->set_frames(::Paths_obj::getSparrowAtlas(HX_("logoBumpin",26,cb,02,ab),null(),null()));
HXLINE( 265)		this->logoBl->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 266)		this->logoBl->animation->addByPrefix(HX_("bump",f6,0f,20,41),HX_("logo bumpin",70,a1,0b,72),24,false,null(),null());
HXLINE( 267)		this->logoBl->updateHitbox();
HXLINE( 268)		this->add(this->logoBl);
HXLINE( 272)		{
HXLINE( 272)			 ::flixel::FlxSprite _this = this->backgroundTitle;
HXDLIN( 272)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 272)			bool _hx_tmp1;
HXDLIN( 272)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 272)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 272)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 272)			if (_hx_tmp1) {
HXLINE( 272)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 272)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 272)			bool _hx_tmp2;
HXDLIN( 272)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 272)					_hx_tmp2 = true;
            				}
            				break;
            				default:{
HXLINE( 272)					_hx_tmp2 = false;
            				}
            			}
HXDLIN( 272)			if (_hx_tmp2) {
HXLINE( 272)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 272)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 273)		this->backgroundTitle->set_antialiasing(true);
HXLINE( 275)		this->gfDance =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.4)),(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.07)),null());
HXLINE( 278)		this->gfDance->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 281)		 ::Dynamic gfJsonData = ::Paths_obj::loadJSON(HX_("gfDanceTitle",64,64,d2,7b),null());
HXLINE( 282)		if (::hx::IsNull( gfJsonData )) {
HXLINE( 284)			{
HXLINE( 284)				 ::Dynamic input = HX_("Failed to parse JSON data for gf dance",f6,85,1a,5f);
HXDLIN( 284)				if (::hx::IsNotNull( input )) {
HXLINE( 284)					::cpp::VirtualArray output = ::Debug_obj::formatOutput(input,::hx::SourceInfo(HX_("source/TitleState.hx",71,4f,0c,46),284,HX_("TitleState",79,8d,a1,8c),HX_("startIntro",aa,a2,37,da)));
HXDLIN( 284)					::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_ERROR);
HXDLIN( 284)					::Debug_obj::writeToLogFile(output,HX_("ERROR",a8,03,18,f1));
            				}
            			}
HXLINE( 285)			return;
            		}
HXLINE( 287)		 ::Dynamic dataGf = gfJsonData;
HXLINE( 288)		 ::flixel::FlxSprite _hx_tmp3 = this->gfDance;
HXDLIN( 288)		_hx_tmp3->set_frames(::Paths_obj::getSparrowAtlas(( (::String)(dataGf->__Field(HX_("sparrowatlas",bf,e5,9f,f1),::hx::paccDynamic)) ),null(),null()));
HXLINE( 289)		{
HXLINE( 289)			int _g = 0;
HXDLIN( 289)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(dataGf->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) );
HXDLIN( 289)			while((_g < _g1->length)){
HXLINE( 289)				 ::Dynamic anim = _g1->__get(_g);
HXDLIN( 289)				_g = (_g + 1);
HXLINE( 291)				 ::Dynamic frameRate;
HXDLIN( 291)				if (::hx::IsNull( anim->__Field(HX_("frameRate",ad,11,25,39),::hx::paccDynamic) )) {
HXLINE( 291)					frameRate = 24;
            				}
            				else {
HXLINE( 291)					frameRate = anim->__Field(HX_("frameRate",ad,11,25,39),::hx::paccDynamic);
            				}
HXLINE( 292)				 ::Dynamic looped;
HXDLIN( 292)				if (::hx::IsNull( anim->__Field(HX_("looped",c3,5f,b9,61),::hx::paccDynamic) )) {
HXLINE( 292)					looped = false;
            				}
            				else {
HXLINE( 292)					looped = anim->__Field(HX_("looped",c3,5f,b9,61),::hx::paccDynamic);
            				}
HXLINE( 293)				 ::Dynamic flipX;
HXDLIN( 293)				if (::hx::IsNull( anim->__Field(HX_("flipX",0b,45,92,02),::hx::paccDynamic) )) {
HXLINE( 293)					flipX = false;
            				}
            				else {
HXLINE( 293)					flipX = anim->__Field(HX_("flipX",0b,45,92,02),::hx::paccDynamic);
            				}
HXLINE( 294)				 ::Dynamic flipY;
HXDLIN( 294)				if (::hx::IsNull( anim->__Field(HX_("flipY",0c,45,92,02),::hx::paccDynamic) )) {
HXLINE( 294)					flipY = false;
            				}
            				else {
HXLINE( 294)					flipY = anim->__Field(HX_("flipY",0c,45,92,02),::hx::paccDynamic);
            				}
HXLINE( 296)				this->gfDance->animation->addByIndices(( (::String)(anim->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),( (::String)(anim->__Field(HX_("prefix",92,d9,b6,ae),::hx::paccDynamic)) ),( (::Array< int >)(anim->__Field(HX_("frameIndices",7a,06,df,83),::hx::paccDynamic)) ),HX_("",00,00,00,00),frameRate,looped,flipX,flipY);
            			}
            		}
HXLINE( 299)		{
HXLINE( 299)			 ::flixel::FlxSprite _g2 = this->gfDance;
HXDLIN( 299)			_g2->set_x(( (Float)((_g2->x + dataGf->__Field(HX_("x",78,00,00,00),::hx::paccDynamic))) ));
            		}
HXLINE( 300)		{
HXLINE( 300)			 ::flixel::FlxSprite _g3 = this->gfDance;
HXDLIN( 300)			_g3->set_y(( (Float)((_g3->y + dataGf->__Field(HX_("y",79,00,00,00),::hx::paccDynamic))) ));
            		}
HXLINE( 303)		this->add(this->gfDance);
HXLINE( 307)		this->titleText =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,100,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.8)),null());
HXLINE( 308)		 ::flixel::FlxSprite _hx_tmp4 = this->titleText;
HXDLIN( 308)		_hx_tmp4->set_frames(::Paths_obj::getSparrowAtlas(HX_("titleEnter",60,80,6b,82),null(),null()));
HXLINE( 309)		this->titleText->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Press Enter to Begin",e9,79,2c,83),24,null(),null(),null());
HXLINE( 310)		this->titleText->animation->addByPrefix(HX_("press",83,53,88,c8),HX_("ENTER PRESSED",5a,47,9f,63),24,null(),null(),null());
HXLINE( 311)		this->titleText->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 312)		this->titleText->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 313)		this->titleText->updateHitbox();
HXLINE( 315)		this->add(this->titleText);
HXLINE( 318)		 ::flixel::FlxSprite logo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 318)		 ::flixel::FlxSprite logo1 = logo->loadGraphic(::Paths_obj::loadImage(HX_("logo",6b,9f,b7,47),null()),null(),null(),null(),null(),null());
HXLINE( 319)		{
HXLINE( 319)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 319)			bool _hx_tmp5;
HXDLIN( 319)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 319)					_hx_tmp5 = true;
            				}
            				break;
            				default:{
HXLINE( 319)					_hx_tmp5 = false;
            				}
            			}
HXDLIN( 319)			if (_hx_tmp5) {
HXLINE( 319)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 319)				logo1->set_x(((( (Float)(_hx_tmp) ) - logo1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 319)			bool _hx_tmp6;
HXDLIN( 319)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 319)					_hx_tmp6 = true;
            				}
            				break;
            				default:{
HXLINE( 319)					_hx_tmp6 = false;
            				}
            			}
HXDLIN( 319)			if (_hx_tmp6) {
HXLINE( 319)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 319)				logo1->set_y(((( (Float)(_hx_tmp) ) - logo1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 320)		logo1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 326)		this->credGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 327)		this->add(this->credGroup);
HXLINE( 328)		this->textGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 330)		this->blackScreen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE( 331)		this->credGroup->add(this->blackScreen).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 333)		this->credTextShit =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("ninjamuffin99\nPhantomArcade\nkawaisprite\nevilsk8er",fd,7d,e3,3b),true,null(),null(),null(),null());
HXLINE( 334)		{
HXLINE( 334)			 ::Alphabet _this1 = this->credTextShit;
HXDLIN( 334)			 ::flixel::util::FlxAxes axes2 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 334)			bool _hx_tmp7;
HXDLIN( 334)			switch((int)(axes2->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 334)					_hx_tmp7 = true;
            				}
            				break;
            				default:{
HXLINE( 334)					_hx_tmp7 = false;
            				}
            			}
HXDLIN( 334)			if (_hx_tmp7) {
HXLINE( 334)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 334)				_this1->set_x(((( (Float)(_hx_tmp) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 334)			bool _hx_tmp8;
HXDLIN( 334)			switch((int)(axes2->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 334)					_hx_tmp8 = true;
            				}
            				break;
            				default:{
HXLINE( 334)					_hx_tmp8 = false;
            				}
            			}
HXDLIN( 334)			if (_hx_tmp8) {
HXLINE( 334)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 334)				_this1->set_y(((( (Float)(_hx_tmp) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 338)		this->credTextShit->set_visible(false);
HXLINE( 340)		 ::flixel::FlxSprite _hx_tmp9 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.52)),null());
HXDLIN( 340)		this->ngSpr = _hx_tmp9->loadGraphic(::Paths_obj::loadImage(HX_("newgrounds_logo",1e,5c,8d,a6),null()),null(),null(),null(),null(),null());
HXLINE( 341)		this->add(this->ngSpr);
HXLINE( 342)		this->ngSpr->set_visible(false);
HXLINE( 343)		 ::flixel::FlxSprite _hx_tmp10 = this->ngSpr;
HXDLIN( 343)		_hx_tmp10->setGraphicSize(::Std_obj::_hx_int((this->ngSpr->get_width() * ((Float)0.8))),null());
HXLINE( 344)		this->ngSpr->updateHitbox();
HXLINE( 345)		{
HXLINE( 345)			 ::flixel::FlxSprite _this2 = this->ngSpr;
HXDLIN( 345)			 ::flixel::util::FlxAxes axes3 = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 345)			if (::hx::IsNull( axes3 )) {
HXLINE( 345)				axes3 = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 345)			bool _hx_tmp11;
HXDLIN( 345)			switch((int)(axes3->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 345)					_hx_tmp11 = true;
            				}
            				break;
            				default:{
HXLINE( 345)					_hx_tmp11 = false;
            				}
            			}
HXDLIN( 345)			if (_hx_tmp11) {
HXLINE( 345)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 345)				_this2->set_x(((( (Float)(_hx_tmp) ) - _this2->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 345)			bool _hx_tmp12;
HXDLIN( 345)			switch((int)(axes3->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 345)					_hx_tmp12 = true;
            				}
            				break;
            				default:{
HXLINE( 345)					_hx_tmp12 = false;
            				}
            			}
HXDLIN( 345)			if (_hx_tmp12) {
HXLINE( 345)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 345)				_this2->set_y(((( (Float)(_hx_tmp) ) - _this2->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 346)		this->ngSpr->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 348)		 ::flixel::FlxSprite _hx_tmp13 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.52)),null());
HXDLIN( 348)		this->ngSpr2 = _hx_tmp13->loadGraphic(::Paths_obj::loadImage(HX_("engine_logo",48,14,9f,07),null()),null(),null(),null(),null(),null());
HXLINE( 349)		this->add(this->ngSpr2);
HXLINE( 350)		this->ngSpr2->set_visible(false);
HXLINE( 351)		 ::flixel::FlxSprite _hx_tmp14 = this->ngSpr2;
HXDLIN( 351)		_hx_tmp14->setGraphicSize(::Std_obj::_hx_int((this->ngSpr2->get_width() * ((Float)0.8))),null());
HXLINE( 352)		this->ngSpr2->updateHitbox();
HXLINE( 353)		{
HXLINE( 353)			 ::flixel::FlxSprite _this3 = this->ngSpr2;
HXDLIN( 353)			 ::flixel::util::FlxAxes axes4 = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 353)			if (::hx::IsNull( axes4 )) {
HXLINE( 353)				axes4 = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 353)			bool _hx_tmp15;
HXDLIN( 353)			switch((int)(axes4->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 353)					_hx_tmp15 = true;
            				}
            				break;
            				default:{
HXLINE( 353)					_hx_tmp15 = false;
            				}
            			}
HXDLIN( 353)			if (_hx_tmp15) {
HXLINE( 353)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 353)				_this3->set_x(((( (Float)(_hx_tmp) ) - _this3->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 353)			bool _hx_tmp16;
HXDLIN( 353)			switch((int)(axes4->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 353)					_hx_tmp16 = true;
            				}
            				break;
            				default:{
HXLINE( 353)					_hx_tmp16 = false;
            				}
            			}
HXDLIN( 353)			if (_hx_tmp16) {
HXLINE( 353)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 353)				_this3->set_y(((( (Float)(_hx_tmp) ) - _this3->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 354)		this->ngSpr2->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 356)		::flixel::tweens::FlxTween_obj::tween(this->credTextShit, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),(this->credTextShit->y + 20))),((Float)2.9), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            			->setFixed(1,HX_("type",ba,f2,08,4d),4)));
HXLINE( 358)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 360)		if (::TitleState_obj::initialized) {
HXLINE( 361)			this->skipIntro();
            		}
            		else {
HXLINE( 364)			 ::flixel::graphics::FlxGraphic diamond = ::flixel::graphics::FlxGraphic_obj::fromClass(::hx::ClassOf< ::flixel::addons::transition::GraphicTransTileDiamond >(),null(),null(),null());
HXLINE( 365)			diamond->persist = true;
HXLINE( 366)			diamond->set_destroyOnNoUse(false);
HXLINE( 368)			 ::flixel::math::FlxPoint _hx_tmp =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,0,-1);
HXDLIN( 368)			::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn =  ::flixel::addons::transition::TransitionData_obj::__alloc( HX_CTX ,HX_("fade",7c,b5,b5,43),-16777216,1,_hx_tmp, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("width",06,b6,62,ca),32)
            				->setFixed(1,HX_("height",e7,07,4c,02),32)
            				->setFixed(2,HX_("asset",f0,69,39,26),diamond)), ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,-200,-200,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)1.4)),(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)1.4))));
HXLINE( 370)			 ::flixel::math::FlxPoint _hx_tmp1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,0,1);
HXDLIN( 370)			::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut =  ::flixel::addons::transition::TransitionData_obj::__alloc( HX_CTX ,HX_("fade",7c,b5,b5,43),-16777216,((Float)0.7),_hx_tmp1, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("width",06,b6,62,ca),32)
            				->setFixed(1,HX_("height",e7,07,4c,02),32)
            				->setFixed(2,HX_("asset",f0,69,39,26),diamond)), ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,-200,-200,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)1.4)),(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)1.4))));
HXLINE( 373)			this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE( 374)			this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE( 375)			if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("menuMusic",86,3a,33,ab),::hx::paccDynamic) )) {
HXLINE( 377)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 377)				::String library = null();
HXDLIN( 377)				_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),0,null(),null());
            			}
            			else {
HXLINE( 380)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 380)				::String library = null();
HXDLIN( 380)				_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("menuMusic",86,3a,33,ab),::hx::paccDynamic)) )) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),0,null(),null());
            			}
HXLINE( 384)			{
HXLINE( 384)				 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 384)				 ::Dynamic onComplete = null();
HXDLIN( 384)				if (::hx::IsNull( _this->_channel )) {
HXLINE( 384)					_this->play(null(),null(),null());
            				}
HXDLIN( 384)				if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 384)					_this->fadeTween->cancel();
            				}
HXDLIN( 384)				_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),((Float)0.7),4, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            			}
HXLINE( 385)			::Conductor_obj::changeBPM(( (Float)(102) ),null());
HXLINE( 386)			::TitleState_obj::initialized = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,startIntro,(void))

::Array< ::Dynamic> TitleState_obj::getIntroTextShit(){
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_393_getIntroTextShit)
HXLINE( 394)		::String library = null();
HXDLIN( 394)		::String fullText = ::openfl::utils::Assets_obj::getText(::Paths_obj::getPath((HX_("data/introText",d4,d9,bb,0c) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 396)		::Array< ::String > firstArray = fullText.split(HX_("\n",0a,00,00,00));
HXLINE( 397)		::Array< ::Dynamic> swagGoodArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 399)		{
HXLINE( 399)			int _g = 0;
HXDLIN( 399)			while((_g < firstArray->length)){
HXLINE( 399)				::String i = firstArray->__get(_g);
HXDLIN( 399)				_g = (_g + 1);
HXLINE( 401)				swagGoodArray->push(i.split(HX_("--",60,27,00,00)));
            			}
            		}
HXLINE( 404)		return swagGoodArray;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,getIntroTextShit,return )

void TitleState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_411_update)
HXLINE( 410)		 ::TitleState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 412)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 413)			::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
            		}
HXLINE( 415)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,this->fullscreenBind),2)) {
HXLINE( 417)			::flixel::FlxG_obj::set_fullscreen(!(::flixel::FlxG_obj::get_fullscreen()));
            		}
HXLINE( 420)		bool pressedEnter = ::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE( 421)		bool hmmtheback = ::PlayerSettings_obj::player1->controls->_back->check();
HXLINE( 433)		bool _hx_tmp;
HXDLIN( 433)		bool _hx_tmp1;
HXDLIN( 433)		if (pressedEnter) {
HXLINE( 433)			_hx_tmp1 = !(this->transitioning);
            		}
            		else {
HXLINE( 433)			_hx_tmp1 = false;
            		}
HXDLIN( 433)		if (_hx_tmp1) {
HXLINE( 433)			_hx_tmp = this->skippedIntro;
            		}
            		else {
HXLINE( 433)			_hx_tmp = false;
            		}
HXDLIN( 433)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::TitleState,_gthis) HXARGC(1)
            			void _hx_run(::String data){
            				HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_455_update)
HXLINE( 456)				::String updateVersion = ::StringTools_obj::trim(data.split(HX_("\n",0a,00,00,00))->__get(0));
HXLINE( 457)				::String curVersion = ::MainMenuState_obj::RealityEngineVer;
HXLINE( 458)				if ((updateVersion != curVersion)) {
HXLINE( 460)					::String _hx_tmp = data.split(HX_("\n",0a,00,00,00))->__get(0);
HXDLIN( 460)					::flixel::FlxG_obj::save->data->__SetField(HX_("updatessss",c9,ef,36,1a),::StringTools_obj::trim(_hx_tmp),::hx::paccDynamic);
HXLINE( 461)					_gthis->newUpdateAvailable = true;
HXLINE( 462)					if (::hx::IsNotEq( ::flixel::FlxG_obj::save->data->__Field(HX_("updatenot",aa,fe,f8,82),::hx::paccDynamic),true )) {
HXLINE( 464)						 ::flixel::FlxState nextState =  ::NewUpdateAvailable_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 464)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 464)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            					else {
HXLINE( 467)						 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 467)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 467)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            				}
            				else {
HXLINE( 472)					 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 472)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 472)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 435)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("flashing",32,85,e8,99),::hx::paccDynamic)) )) {
HXLINE( 436)				this->titleText->animation->play(HX_("press",83,53,88,c8),null(),null(),null());
            			}
HXLINE( 437)			this->add(this->titleText);
HXLINE( 440)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 440)			_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),((Float)0.7),null(),null(),null(),null());
HXLINE( 442)			::flixel::tweens::FlxTween_obj::tween(this->logoBl, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),-1500)),3, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backInOut_dyn())
            				->setFixed(1,HX_("type",ba,f2,08,4d),8)));
HXLINE( 443)			::flixel::tweens::FlxTween_obj::tween(this->gfDance, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),1500)),3, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backInOut_dyn())
            				->setFixed(1,HX_("type",ba,f2,08,4d),8)));
HXLINE( 444)			::flixel::tweens::FlxTween_obj::tween(this->titleText, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),1500)),3, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backInOut_dyn())
            				->setFixed(1,HX_("type",ba,f2,08,4d),8)));
HXLINE( 445)			 ::flixel::FlxCamera _hx_tmp1 = this->get_camera();
HXDLIN( 445)			::flixel::tweens::FlxTween_obj::tween(_hx_tmp1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("zoom",13,a3,f8,50),3)),3, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())
            				->setFixed(1,HX_("type",ba,f2,08,4d),8)));
HXLINE( 446)			::CoolUtil_obj::cameraZoom(this->get_camera(),( (Float)(3) ),( (Float)(3) ),::flixel::tweens::FlxEase_obj::backOut_dyn(),8);
HXLINE( 447)			::flixel::FlxG_obj::camera->flash(-65536,1,null(),null());
HXLINE( 449)			this->transitioning = true;
HXLINE( 452)			 ::sys::Http http =  ::sys::Http_obj::__alloc( HX_CTX ,HX_("https://raw.githubusercontent.com/Goodbs/RealityEngine/main/RealityVersion.txt",68,4e,a5,00));
HXLINE( 454)			http->onData =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE( 476)			http->request(null());
HXLINE( 478)			{
HXLINE( 478)				 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 478)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 478)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE( 482)		bool _hx_tmp2;
HXDLIN( 482)		bool _hx_tmp3;
HXDLIN( 482)		if (pressedEnter) {
HXLINE( 482)			_hx_tmp3 = !(this->skippedIntro);
            		}
            		else {
HXLINE( 482)			_hx_tmp3 = false;
            		}
HXDLIN( 482)		if (_hx_tmp3) {
HXLINE( 482)			_hx_tmp2 = ::TitleState_obj::initialized;
            		}
            		else {
HXLINE( 482)			_hx_tmp2 = false;
            		}
HXDLIN( 482)		if (_hx_tmp2) {
HXLINE( 485)			this->skipIntro();
            		}
HXLINE( 488)		if (hmmtheback) {
HXLINE( 490)			 ::flixel::FlxState nextState =  ::ThisExit_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 490)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 490)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 493)		this->super::update(elapsed);
            	}


void TitleState_obj::createCoolText(::Array< ::String > textArray){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_498_createCoolText)
HXDLIN( 498)		int _g = 0;
HXDLIN( 498)		int _g1 = textArray->length;
HXDLIN( 498)		while((_g < _g1)){
HXDLIN( 498)			_g = (_g + 1);
HXDLIN( 498)			int i = (_g - 1);
HXLINE( 500)			 ::Alphabet money =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),textArray->__get(i),true,false,null(),null(),null());
HXLINE( 501)			{
HXLINE( 501)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 501)				if (::hx::IsNull( axes )) {
HXLINE( 501)					axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            				}
HXDLIN( 501)				bool _hx_tmp;
HXDLIN( 501)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE( 501)						_hx_tmp = true;
            					}
            					break;
            					default:{
HXLINE( 501)						_hx_tmp = false;
            					}
            				}
HXDLIN( 501)				if (_hx_tmp) {
HXLINE( 501)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 501)					money->set_x(((( (Float)(_hx_tmp) ) - money->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 501)				bool _hx_tmp1;
HXDLIN( 501)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE( 501)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE( 501)						_hx_tmp1 = false;
            					}
            				}
HXDLIN( 501)				if (_hx_tmp1) {
HXLINE( 501)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 501)					money->set_y(((( (Float)(_hx_tmp) ) - money->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 502)			{
HXLINE( 502)				 ::Alphabet _g1 = money;
HXDLIN( 502)				_g1->set_y((_g1->y + ((i * 60) + 200)));
            			}
HXLINE( 503)			this->credGroup->add(money).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 504)			this->textGroup->add(money).StaticCast<  ::flixel::FlxBasic >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TitleState_obj,createCoolText,(void))

void TitleState_obj::addMoreText(::String text){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_509_addMoreText)
HXLINE( 510)		 ::Alphabet coolText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),text,true,false,null(),null(),null());
HXLINE( 511)		{
HXLINE( 511)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 511)			if (::hx::IsNull( axes )) {
HXLINE( 511)				axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 511)			bool _hx_tmp;
HXDLIN( 511)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 511)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 511)					_hx_tmp = false;
            				}
            			}
HXDLIN( 511)			if (_hx_tmp) {
HXLINE( 511)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 511)				coolText->set_x(((( (Float)(_hx_tmp) ) - coolText->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 511)			bool _hx_tmp1;
HXDLIN( 511)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 511)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 511)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 511)			if (_hx_tmp1) {
HXLINE( 511)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 511)				coolText->set_y(((( (Float)(_hx_tmp) ) - coolText->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 512)		{
HXLINE( 512)			 ::Alphabet _g = coolText;
HXDLIN( 512)			_g->set_y((_g->y + ((this->textGroup->length * 60) + 200)));
            		}
HXLINE( 513)		this->credGroup->add(coolText).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 514)		this->textGroup->add(coolText).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TitleState_obj,addMoreText,(void))

void TitleState_obj::deleteCoolText(){
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_519_deleteCoolText)
HXDLIN( 519)		while((this->textGroup->members->get_length() > 0)){
HXLINE( 521)			this->credGroup->remove(Dynamic( this->textGroup->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 522)			this->textGroup->remove(Dynamic( this->textGroup->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,deleteCoolText,(void))

void TitleState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_527_beatHit)
HXLINE( 528)		this->super::beatHit();
HXLINE( 530)		this->logoBl->animation->play(HX_("bump",f6,0f,20,41),true,null(),null());
HXLINE( 531)		this->danceLeft = !(this->danceLeft);
HXLINE( 533)		if (this->danceLeft) {
HXLINE( 534)			this->gfDance->animation->play(HX_("danceRight",a9,7f,a6,91),null(),null(),null());
            		}
            		else {
HXLINE( 536)			this->gfDance->animation->play(HX_("danceLeft",da,cc,f9,df),null(),null(),null());
            		}
HXLINE( 539)		::String test1 = HX_("by",d7,55,00,00);
HXLINE( 540)		::String test2 = HX_("In Partnership",49,39,6b,e0);
HXLINE( 541)		::String test3 = HX_("with",06,76,f8,4e);
HXLINE( 544)		switch((int)(this->curBeat)){
            			case (int)0: {
HXLINE( 547)				this->deleteCoolText();
            			}
            			break;
            			case (int)1: {
HXLINE( 549)				this->deleteCoolText();
            			}
            			break;
            			case (int)2: {
HXLINE( 551)				if ((::TitleState_obj::language == HX_("en",69,58,00,00))) {
HXLINE( 552)					this->createCoolText(::Array_obj< ::String >::fromData( _hx_array_data_8ca18d79_17,2));
            				}
HXLINE( 553)				if ((::TitleState_obj::language == HX_("ru",c3,63,00,00))) {
HXLINE( 554)					this->createCoolText(::Array_obj< ::String >::fromData( _hx_array_data_8ca18d79_18,2));
            				}
HXLINE( 555)				if ((::TitleState_obj::language == HX_("tr",7e,65,00,00))) {
HXLINE( 556)					this->createCoolText(::Array_obj< ::String >::fromData( _hx_array_data_8ca18d79_19,2));
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 559)				this->addMoreText(HX_("GoodTR",1b,dc,7b,96));
            			}
            			break;
            			case (int)4: {
HXLINE( 561)				this->ngSpr2->set_visible(true);
            			}
            			break;
            			case (int)5: {
HXLINE( 563)				this->ngSpr2->set_visible(false);
HXLINE( 564)				this->deleteCoolText();
HXLINE( 565)				if ((::TitleState_obj::language == HX_("en",69,58,00,00))) {
HXLINE( 566)					this->createCoolText(::Array_obj< ::String >::fromData( _hx_array_data_8ca18d79_20,2));
            				}
HXLINE( 567)				if ((::TitleState_obj::language == HX_("ru",c3,63,00,00))) {
HXLINE( 568)					this->createCoolText(::Array_obj< ::String >::fromData( _hx_array_data_8ca18d79_21,2));
            				}
HXLINE( 569)				if ((::TitleState_obj::language == HX_("tr",7e,65,00,00))) {
HXLINE( 570)					this->createCoolText(::Array_obj< ::String >::fromData( _hx_array_data_8ca18d79_22,2));
            				}
            			}
            			break;
            			case (int)6: {
HXLINE( 572)				this->addMoreText(HX_("Newgrounds",cc,13,58,ed));
HXLINE( 573)				this->ngSpr->set_visible(true);
            			}
            			break;
            			case (int)7: {
HXLINE( 576)				this->deleteCoolText();
HXLINE( 577)				this->ngSpr->set_visible(false);
            			}
            			break;
            			case (int)8: {
HXLINE( 579)				this->remove(this->bg,null());
HXLINE( 580)				this->skipIntro();
            			}
            			break;
            		}
            	}


void TitleState_obj::skipIntro(){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_589_skipIntro)
HXLINE( 588)		 ::TitleState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 590)		if (!(this->skippedIntro)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::TitleState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_604_skipIntro)
HXLINE( 605)				if ((_gthis->logoBl->angle == -4)) {
HXLINE( 606)					::flixel::tweens::FlxTween_obj::angle(_gthis->logoBl,_gthis->logoBl->angle,( (Float)(4) ),4, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
            				}
HXLINE( 607)				if ((_gthis->logoBl->angle == 4)) {
HXLINE( 608)					::flixel::tweens::FlxTween_obj::angle(_gthis->logoBl,_gthis->logoBl->angle,( (Float)(-4) ),4, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 592)			{
HXLINE( 592)				 ::Dynamic input = HX_("Skipping intro...",71,26,27,37);
HXDLIN( 592)				if (::hx::IsNotNull( input )) {
HXLINE( 592)					::cpp::VirtualArray output = ::Debug_obj::formatOutput(input,::hx::SourceInfo(HX_("source/TitleState.hx",71,4f,0c,46),592,HX_("TitleState",79,8d,a1,8c),HX_("skipIntro",6d,37,1c,d2)));
HXDLIN( 592)					::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_INFO);
HXDLIN( 592)					::Debug_obj::writeToLogFile(output,HX_("INFO",6e,00,7c,30));
            				}
            			}
HXLINE( 594)			this->remove(this->ngSpr,null());
HXLINE( 596)			::flixel::FlxG_obj::camera->flash(-1,4,null(),null());
HXLINE( 597)			this->remove(this->credGroup,null());
HXLINE( 599)			::flixel::tweens::FlxTween_obj::tween(this->logoBl, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),-100)),((Float)1.4), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
HXLINE( 601)			this->logoBl->set_angle(( (Float)(-4) ));
HXLINE( 603)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.01), ::Dynamic(new _hx_Closure_0(_gthis)),0);
HXLINE( 613)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(9400) ));
HXLINE( 615)			this->skippedIntro = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,skipIntro,(void))

 ::Dynamic TitleState_obj::callOnHscript(::String functionToCall,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_620_callOnHscript)
HXLINE( 621)		if (::hx::IsNull( ::TitleState_obj::interp )) {
HXLINE( 623)			return null();
            		}
HXLINE( 625)		if (::TitleState_obj::interp->variables->exists(functionToCall)) {
HXLINE( 627)			 ::Dynamic functionH = ::TitleState_obj::interp->variables->get(functionToCall);
HXLINE( 628)			if (::hx::IsNull( params )) {
HXLINE( 630)				 ::Dynamic result = null();
HXLINE( 631)				result = functionH();
HXLINE( 632)				return result;
            			}
            			else {
HXLINE( 636)				 ::Dynamic result = null();
HXLINE( 637)				result = ::Reflect_obj::callMethod(null(),functionH,params);
HXLINE( 638)				return result;
            			}
            		}
HXLINE( 641)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(TitleState_obj,callOnHscript,return )

bool TitleState_obj::initialized;

::Array< int > TitleState_obj::muteKeys;

::Array< int > TitleState_obj::volumeDownKeys;

::Array< int > TitleState_obj::volumeUpKeys;

::String TitleState_obj::hmmmmmmmmmmmmmmmm;

::String TitleState_obj::language;

::String TitleState_obj::description;

 ::hscript::Interp TitleState_obj::interp;


::hx::ObjectPtr< TitleState_obj > TitleState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< TitleState_obj > __this = new TitleState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< TitleState_obj > TitleState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	TitleState_obj *__this = (TitleState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TitleState_obj), true, "TitleState"));
	*(void **)__this = TitleState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

TitleState_obj::TitleState_obj()
{
}

void TitleState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TitleState);
	HX_MARK_MEMBER_NAME(newUpdateAvailable,"newUpdateAvailable");
	HX_MARK_MEMBER_NAME(blackScreen,"blackScreen");
	HX_MARK_MEMBER_NAME(credGroup,"credGroup");
	HX_MARK_MEMBER_NAME(credTextShit,"credTextShit");
	HX_MARK_MEMBER_NAME(textGroup,"textGroup");
	HX_MARK_MEMBER_NAME(ngSpr,"ngSpr");
	HX_MARK_MEMBER_NAME(ngSpr2,"ngSpr2");
	HX_MARK_MEMBER_NAME(curWacky,"curWacky");
	HX_MARK_MEMBER_NAME(updateAvailable,"updateAvailable");
	HX_MARK_MEMBER_NAME(wackyImage,"wackyImage");
	HX_MARK_MEMBER_NAME(playScript,"playScript");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(logoBl,"logoBl");
	HX_MARK_MEMBER_NAME(backgroundTitle,"backgroundTitle");
	HX_MARK_MEMBER_NAME(gfDance,"gfDance");
	HX_MARK_MEMBER_NAME(danceLeft,"danceLeft");
	HX_MARK_MEMBER_NAME(titleText,"titleText");
	HX_MARK_MEMBER_NAME(transitioning,"transitioning");
	HX_MARK_MEMBER_NAME(fullscreenBind,"fullscreenBind");
	HX_MARK_MEMBER_NAME(skippedIntro,"skippedIntro");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TitleState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(newUpdateAvailable,"newUpdateAvailable");
	HX_VISIT_MEMBER_NAME(blackScreen,"blackScreen");
	HX_VISIT_MEMBER_NAME(credGroup,"credGroup");
	HX_VISIT_MEMBER_NAME(credTextShit,"credTextShit");
	HX_VISIT_MEMBER_NAME(textGroup,"textGroup");
	HX_VISIT_MEMBER_NAME(ngSpr,"ngSpr");
	HX_VISIT_MEMBER_NAME(ngSpr2,"ngSpr2");
	HX_VISIT_MEMBER_NAME(curWacky,"curWacky");
	HX_VISIT_MEMBER_NAME(updateAvailable,"updateAvailable");
	HX_VISIT_MEMBER_NAME(wackyImage,"wackyImage");
	HX_VISIT_MEMBER_NAME(playScript,"playScript");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(logoBl,"logoBl");
	HX_VISIT_MEMBER_NAME(backgroundTitle,"backgroundTitle");
	HX_VISIT_MEMBER_NAME(gfDance,"gfDance");
	HX_VISIT_MEMBER_NAME(danceLeft,"danceLeft");
	HX_VISIT_MEMBER_NAME(titleText,"titleText");
	HX_VISIT_MEMBER_NAME(transitioning,"transitioning");
	HX_VISIT_MEMBER_NAME(fullscreenBind,"fullscreenBind");
	HX_VISIT_MEMBER_NAME(skippedIntro,"skippedIntro");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TitleState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ngSpr") ) { return ::hx::Val( ngSpr ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ngSpr2") ) { return ::hx::Val( ngSpr2 ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"logoBl") ) { return ::hx::Val( logoBl ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfDance") ) { return ::hx::Val( gfDance ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curWacky") ) { return ::hx::Val( curWacky ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"credGroup") ) { return ::hx::Val( credGroup ); }
		if (HX_FIELD_EQ(inName,"textGroup") ) { return ::hx::Val( textGroup ); }
		if (HX_FIELD_EQ(inName,"danceLeft") ) { return ::hx::Val( danceLeft ); }
		if (HX_FIELD_EQ(inName,"titleText") ) { return ::hx::Val( titleText ); }
		if (HX_FIELD_EQ(inName,"skipIntro") ) { return ::hx::Val( skipIntro_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wackyImage") ) { return ::hx::Val( wackyImage ); }
		if (HX_FIELD_EQ(inName,"playScript") ) { return ::hx::Val( playScript ); }
		if (HX_FIELD_EQ(inName,"startIntro") ) { return ::hx::Val( startIntro_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blackScreen") ) { return ::hx::Val( blackScreen ); }
		if (HX_FIELD_EQ(inName,"addMoreText") ) { return ::hx::Val( addMoreText_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"credTextShit") ) { return ::hx::Val( credTextShit ); }
		if (HX_FIELD_EQ(inName,"skippedIntro") ) { return ::hx::Val( skippedIntro ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transitioning") ) { return ::hx::Val( transitioning ); }
		if (HX_FIELD_EQ(inName,"callOnHscript") ) { return ::hx::Val( callOnHscript_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fullscreenBind") ) { return ::hx::Val( fullscreenBind ); }
		if (HX_FIELD_EQ(inName,"createCoolText") ) { return ::hx::Val( createCoolText_dyn() ); }
		if (HX_FIELD_EQ(inName,"deleteCoolText") ) { return ::hx::Val( deleteCoolText_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateAvailable") ) { return ::hx::Val( updateAvailable ); }
		if (HX_FIELD_EQ(inName,"backgroundTitle") ) { return ::hx::Val( backgroundTitle ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getIntroTextShit") ) { return ::hx::Val( getIntroTextShit_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"newUpdateAvailable") ) { return ::hx::Val( newUpdateAvailable ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TitleState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"interp") ) { outValue = ( interp ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"muteKeys") ) { outValue = ( muteKeys ); return true; }
		if (HX_FIELD_EQ(inName,"language") ) { outValue = ( language ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { outValue = ( initialized ); return true; }
		if (HX_FIELD_EQ(inName,"description") ) { outValue = ( description ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"volumeUpKeys") ) { outValue = ( volumeUpKeys ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"volumeDownKeys") ) { outValue = ( volumeDownKeys ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"hmmmmmmmmmmmmmmmm") ) { outValue = ( hmmmmmmmmmmmmmmmm ); return true; }
	}
	return false;
}

::hx::Val TitleState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ngSpr") ) { ngSpr=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ngSpr2") ) { ngSpr2=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"logoBl") ) { logoBl=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfDance") ) { gfDance=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curWacky") ) { curWacky=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"credGroup") ) { credGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textGroup") ) { textGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"danceLeft") ) { danceLeft=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"titleText") ) { titleText=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wackyImage") ) { wackyImage=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playScript") ) { playScript=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blackScreen") ) { blackScreen=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"credTextShit") ) { credTextShit=inValue.Cast<  ::Alphabet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skippedIntro") ) { skippedIntro=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transitioning") ) { transitioning=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fullscreenBind") ) { fullscreenBind=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateAvailable") ) { updateAvailable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backgroundTitle") ) { backgroundTitle=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"newUpdateAvailable") ) { newUpdateAvailable=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TitleState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"interp") ) { interp=ioValue.Cast<  ::hscript::Interp >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"muteKeys") ) { muteKeys=ioValue.Cast< ::Array< int > >(); return true; }
		if (HX_FIELD_EQ(inName,"language") ) { language=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"description") ) { description=ioValue.Cast< ::String >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"volumeUpKeys") ) { volumeUpKeys=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"volumeDownKeys") ) { volumeDownKeys=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"hmmmmmmmmmmmmmmmm") ) { hmmmmmmmmmmmmmmmm=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void TitleState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("newUpdateAvailable",00,ce,1f,50));
	outFields->push(HX_("blackScreen",8b,de,f4,5d));
	outFields->push(HX_("credGroup",91,7f,9c,9c));
	outFields->push(HX_("credTextShit",fb,55,c1,3c));
	outFields->push(HX_("textGroup",52,43,e2,32));
	outFields->push(HX_("ngSpr",7c,26,68,9a));
	outFields->push(HX_("ngSpr2",36,86,b9,80));
	outFields->push(HX_("curWacky",67,31,c6,0c));
	outFields->push(HX_("updateAvailable",80,2a,0e,c7));
	outFields->push(HX_("wackyImage",d4,7e,d6,81));
	outFields->push(HX_("playScript",1f,df,23,ee));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("logoBl",15,ca,6e,5c));
	outFields->push(HX_("backgroundTitle",ca,f2,25,d3));
	outFields->push(HX_("gfDance",94,88,3a,eb));
	outFields->push(HX_("danceLeft",da,cc,f9,df));
	outFields->push(HX_("titleText",65,ba,a4,70));
	outFields->push(HX_("transitioning",6d,6a,93,94));
	outFields->push(HX_("fullscreenBind",98,95,ed,45));
	outFields->push(HX_("skippedIntro",9c,44,26,49));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TitleState_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(TitleState_obj,newUpdateAvailable),HX_("newUpdateAvailable",00,ce,1f,50)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,blackScreen),HX_("blackScreen",8b,de,f4,5d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(TitleState_obj,credGroup),HX_("credGroup",91,7f,9c,9c)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(TitleState_obj,credTextShit),HX_("credTextShit",fb,55,c1,3c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(TitleState_obj,textGroup),HX_("textGroup",52,43,e2,32)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,ngSpr),HX_("ngSpr",7c,26,68,9a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,ngSpr2),HX_("ngSpr2",36,86,b9,80)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(TitleState_obj,curWacky),HX_("curWacky",67,31,c6,0c)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,updateAvailable),HX_("updateAvailable",80,2a,0e,c7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,wackyImage),HX_("wackyImage",d4,7e,d6,81)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,playScript),HX_("playScript",1f,df,23,ee)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,logoBl),HX_("logoBl",15,ca,6e,5c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,backgroundTitle),HX_("backgroundTitle",ca,f2,25,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,gfDance),HX_("gfDance",94,88,3a,eb)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,danceLeft),HX_("danceLeft",da,cc,f9,df)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,titleText),HX_("titleText",65,ba,a4,70)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,transitioning),HX_("transitioning",6d,6a,93,94)},
	{::hx::fsInt,(int)offsetof(TitleState_obj,fullscreenBind),HX_("fullscreenBind",98,95,ed,45)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,skippedIntro),HX_("skippedIntro",9c,44,26,49)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TitleState_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &TitleState_obj::initialized,HX_("initialized",14,f5,0f,37)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &TitleState_obj::muteKeys,HX_("muteKeys",6d,5d,88,16)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &TitleState_obj::volumeDownKeys,HX_("volumeDownKeys",70,2f,58,0b)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &TitleState_obj::volumeUpKeys,HX_("volumeUpKeys",69,bb,f5,23)},
	{::hx::fsString,(void *) &TitleState_obj::hmmmmmmmmmmmmmmmm,HX_("hmmmmmmmmmmmmmmmm",68,eb,38,45)},
	{::hx::fsString,(void *) &TitleState_obj::language,HX_("language",58,80,11,7a)},
	{::hx::fsString,(void *) &TitleState_obj::description,HX_("description",fc,08,1d,5f)},
	{::hx::fsObject /*  ::hscript::Interp */ ,(void *) &TitleState_obj::interp,HX_("interp",d4,79,86,9e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TitleState_obj_sMemberFields[] = {
	HX_("newUpdateAvailable",00,ce,1f,50),
	HX_("blackScreen",8b,de,f4,5d),
	HX_("credGroup",91,7f,9c,9c),
	HX_("credTextShit",fb,55,c1,3c),
	HX_("textGroup",52,43,e2,32),
	HX_("ngSpr",7c,26,68,9a),
	HX_("ngSpr2",36,86,b9,80),
	HX_("curWacky",67,31,c6,0c),
	HX_("updateAvailable",80,2a,0e,c7),
	HX_("wackyImage",d4,7e,d6,81),
	HX_("playScript",1f,df,23,ee),
	HX_("bg",c5,55,00,00),
	HX_("create",fc,66,0f,7c),
	HX_("logoBl",15,ca,6e,5c),
	HX_("backgroundTitle",ca,f2,25,d3),
	HX_("gfDance",94,88,3a,eb),
	HX_("danceLeft",da,cc,f9,df),
	HX_("titleText",65,ba,a4,70),
	HX_("startIntro",aa,a2,37,da),
	HX_("getIntroTextShit",23,9f,f3,eb),
	HX_("transitioning",6d,6a,93,94),
	HX_("fullscreenBind",98,95,ed,45),
	HX_("update",09,86,05,87),
	HX_("createCoolText",32,cb,41,41),
	HX_("addMoreText",23,fe,9f,87),
	HX_("deleteCoolText",61,6b,de,48),
	HX_("beatHit",7d,ea,04,74),
	HX_("skippedIntro",9c,44,26,49),
	HX_("skipIntro",6d,37,1c,d2),
	HX_("callOnHscript",96,08,cf,05),
	::String(null()) };

static void TitleState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TitleState_obj::initialized,"initialized");
	HX_MARK_MEMBER_NAME(TitleState_obj::muteKeys,"muteKeys");
	HX_MARK_MEMBER_NAME(TitleState_obj::volumeDownKeys,"volumeDownKeys");
	HX_MARK_MEMBER_NAME(TitleState_obj::volumeUpKeys,"volumeUpKeys");
	HX_MARK_MEMBER_NAME(TitleState_obj::hmmmmmmmmmmmmmmmm,"hmmmmmmmmmmmmmmmm");
	HX_MARK_MEMBER_NAME(TitleState_obj::language,"language");
	HX_MARK_MEMBER_NAME(TitleState_obj::description,"description");
	HX_MARK_MEMBER_NAME(TitleState_obj::interp,"interp");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TitleState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TitleState_obj::initialized,"initialized");
	HX_VISIT_MEMBER_NAME(TitleState_obj::muteKeys,"muteKeys");
	HX_VISIT_MEMBER_NAME(TitleState_obj::volumeDownKeys,"volumeDownKeys");
	HX_VISIT_MEMBER_NAME(TitleState_obj::volumeUpKeys,"volumeUpKeys");
	HX_VISIT_MEMBER_NAME(TitleState_obj::hmmmmmmmmmmmmmmmm,"hmmmmmmmmmmmmmmmm");
	HX_VISIT_MEMBER_NAME(TitleState_obj::language,"language");
	HX_VISIT_MEMBER_NAME(TitleState_obj::description,"description");
	HX_VISIT_MEMBER_NAME(TitleState_obj::interp,"interp");
};

#endif

::hx::Class TitleState_obj::__mClass;

static ::String TitleState_obj_sStaticFields[] = {
	HX_("initialized",14,f5,0f,37),
	HX_("muteKeys",6d,5d,88,16),
	HX_("volumeDownKeys",70,2f,58,0b),
	HX_("volumeUpKeys",69,bb,f5,23),
	HX_("hmmmmmmmmmmmmmmmm",68,eb,38,45),
	HX_("language",58,80,11,7a),
	HX_("description",fc,08,1d,5f),
	HX_("interp",d4,79,86,9e),
	::String(null())
};

void TitleState_obj::__register()
{
	TitleState_obj _hx_dummy;
	TitleState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TitleState",79,8d,a1,8c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TitleState_obj::__GetStatic;
	__mClass->mSetStaticField = &TitleState_obj::__SetStatic;
	__mClass->mMarkFunc = TitleState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TitleState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TitleState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TitleState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TitleState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TitleState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TitleState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TitleState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_50_boot)
HXDLIN(  50)		initialized = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_52_boot)
HXDLIN(  52)		muteKeys = ::Array_obj< int >::fromData( _hx_array_data_8ca18d79_28,1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_53_boot)
HXDLIN(  53)		volumeDownKeys = ::Array_obj< int >::fromData( _hx_array_data_8ca18d79_30,2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_54_boot)
HXDLIN(  54)		volumeUpKeys = ::Array_obj< int >::fromData( _hx_array_data_8ca18d79_32,2);
            	}
}

