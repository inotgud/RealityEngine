// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_AnimationDebug
#include <AnimationDebug.h>
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_Debug
#include <Debug.h>
#endif
#ifndef INCLUDED_DiffCalc
#include <DiffCalc.h>
#endif
#ifndef INCLUDED_DiffOverview
#include <DiffOverview.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_FreeplaySongMetadata
#include <FreeplaySongMetadata.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_GameplayCustomizeState
#include <GameplayCustomizeState.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeAudioSource
#include <lime/_internal/backend/native/NativeAudioSource.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_media_openal_AL
#include <lime/media/openal/AL.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_smTools_SMFile
#include <smTools/SMFile.h>
#endif
#ifndef INCLUDED_smTools_SMHeader
#include <smTools/SMHeader.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_86166a84e8de7ace_29_new,"FreeplayState","new",0xc894eea3,"FreeplayState.new","FreeplayState.hx",29,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_84_create,"FreeplayState","create",0x931e5499,"FreeplayState.create","FreeplayState.hx",84,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_325_addSong,"FreeplayState","addSong",0x9e966259,"FreeplayState.addSong","FreeplayState.hx",325,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_329_addWeek,"FreeplayState","addWeek",0xa1339e78,"FreeplayState.addWeek","FreeplayState.hx",329,0x0d86f62d)
static const ::String _hx_array_data_b3f26131_8[] = {
	HX_("dad",47,36,4c,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_344_update,"FreeplayState","update",0x9e1473a6,"FreeplayState.update","FreeplayState.hx",344,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_488_loadAnimDebug,"FreeplayState","loadAnimDebug",0xdf551f7f,"FreeplayState.loadAnimDebug","FreeplayState.hx",488,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_509_loadSong,"FreeplayState","loadSong",0xe7d343f8,"FreeplayState.loadSong","FreeplayState.hx",509,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_569_changeDiff,"FreeplayState","changeDiff",0x302511b2,"FreeplayState.changeDiff","FreeplayState.hx",569,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_616_changeSelection,"FreeplayState","changeSelection",0xbe8c8f7f,"FreeplayState.changeSelection","FreeplayState.hx",616,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_65_loadDiff,"FreeplayState","loadDiff",0xdde47c28,"FreeplayState.loadDiff","FreeplayState.hx",65,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_261_populateSongData,"FreeplayState","populateSongData",0x672e1d86,"FreeplayState.populateSongData","FreeplayState.hx",261,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_522_loadSongInFreePlay,"FreeplayState","loadSongInFreePlay",0x7b25afdd,"FreeplayState.loadSongInFreePlay","FreeplayState.hx",522,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_31_boot,"FreeplayState","boot",0xb1d4e08f,"FreeplayState.boot","FreeplayState.hx",31,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_35_boot,"FreeplayState","boot",0xb1d4e08f,"FreeplayState.boot","FreeplayState.hx",35,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_37_boot,"FreeplayState","boot",0xb1d4e08f,"FreeplayState.boot","FreeplayState.hx",37,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_38_boot,"FreeplayState","boot",0xb1d4e08f,"FreeplayState.boot","FreeplayState.hx",38,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_60_boot,"FreeplayState","boot",0xb1d4e08f,"FreeplayState.boot","FreeplayState.hx",60,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_62_boot,"FreeplayState","boot",0xb1d4e08f,"FreeplayState.boot","FreeplayState.hx",62,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_81_boot,"FreeplayState","boot",0xb1d4e08f,"FreeplayState.boot","FreeplayState.hx",81,0x0d86f62d)
HX_LOCAL_STACK_FRAME(_hx_pos_86166a84e8de7ace_255_boot,"FreeplayState","boot",0xb1d4e08f,"FreeplayState.boot","FreeplayState.hx",255,0x0d86f62d)

void FreeplayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_29_new)
HXLINE(  58)		this->iconArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  56)		this->curPlaying = false;
HXLINE(  47)		this->combo = HX_("",00,00,00,00);
HXLINE(  46)		this->intendedScore = 0;
HXLINE(  45)		this->lerpScore = 0;
HXLINE(  29)		super::__construct(TransIn,TransOut);
            	}

Dynamic FreeplayState_obj::__CreateEmpty() { return new FreeplayState_obj; }

void *FreeplayState_obj::_hx_vtable = 0;

Dynamic FreeplayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FreeplayState_obj > _hx_result = new FreeplayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FreeplayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5f09868d) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x5f09868d;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void FreeplayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_86166a84e8de7ace_84_create)
HXLINE(  85)		this->clean();
HXLINE(  86)		::String library = null();
HXDLIN(  86)		::FreeplayState_obj::list = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/freeplaySonglist",38,e4,80,5e) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  88)		::FreeplayState_obj::cached = false;
HXLINE(  90)		::FreeplayState_obj::populateSongData();
HXLINE(  91)		::PlayState_obj::inDaPlay = false;
HXLINE(  92)		::PlayState_obj::currentSong = HX_("bruh",23,d0,1d,41);
HXLINE(  99)		{
HXLINE(  99)			int _g = 0;
HXDLIN(  99)			::Array< ::String > _g1 = ::sys::FileSystem_obj::readDirectory(HX_("assets/sm/",89,ef,2d,70));
HXDLIN(  99)			while((_g < _g1->length)){
HXLINE(  99)				::String i = _g1->__get(_g);
HXDLIN(  99)				_g = (_g + 1);
HXLINE( 102)				if (::sys::FileSystem_obj::isDirectory((HX_("assets/sm/",89,ef,2d,70) + i))) {
HXLINE( 105)					int _g = 0;
HXDLIN( 105)					::Array< ::String > _g1 = ::sys::FileSystem_obj::readDirectory((HX_("assets/sm/",89,ef,2d,70) + i));
HXDLIN( 105)					while((_g < _g1->length)){
HXLINE( 105)						::String file = _g1->__get(_g);
HXDLIN( 105)						_g = (_g + 1);
HXLINE( 107)						if ((file.indexOf(HX_(" ",20,00,00,00),null()) != -1)) {
HXLINE( 108)							::sys::FileSystem_obj::rename((((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/",2f,00,00,00)) + file),(((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/",2f,00,00,00)) + ::StringTools_obj::replace(file,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00))));
            						}
HXLINE( 109)						bool _hx_tmp;
HXDLIN( 109)						if (::StringTools_obj::endsWith(file,HX_(".sm",48,4c,23,00))) {
HXLINE( 109)							_hx_tmp = !(::sys::FileSystem_obj::exists(((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/converted.json",73,2b,b3,66))));
            						}
            						else {
HXLINE( 109)							_hx_tmp = false;
            						}
HXDLIN( 109)						if (_hx_tmp) {
HXLINE( 112)							 ::smTools::SMFile file1 = ::smTools::SMFile_obj::loadFile((((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/",2f,00,00,00)) + ::StringTools_obj::replace(file,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00))));
HXLINE( 114)							::String data = file1->convertToFNF(((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/converted.json",73,2b,b3,66)));
HXLINE( 115)							 ::FreeplaySongMetadata meta =  ::FreeplaySongMetadata_obj::__alloc( HX_CTX ,file1->header->TITLE,0,HX_("sm",9a,64,00,00),file1,(HX_("assets/sm/",89,ef,2d,70) + i));
HXLINE( 116)							::FreeplayState_obj::songs->push(meta);
HXLINE( 117)							 ::Dynamic song = ::Song_obj::loadFromJsonRAW(data);
HXLINE( 118)							::FreeplayState_obj::songData->set(file1->header->TITLE,::Array_obj< ::Dynamic>::__new(3)->init(0,song)->init(1,song)->init(2,song));
            						}
            						else {
HXLINE( 120)							bool _hx_tmp;
HXDLIN( 120)							if (::sys::FileSystem_obj::exists(((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/converted.json",73,2b,b3,66)))) {
HXLINE( 120)								_hx_tmp = ::StringTools_obj::endsWith(file,HX_(".sm",48,4c,23,00));
            							}
            							else {
HXLINE( 120)								_hx_tmp = false;
            							}
HXDLIN( 120)							if (_hx_tmp) {
HXLINE( 123)								 ::smTools::SMFile file1 = ::smTools::SMFile_obj::loadFile((((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/",2f,00,00,00)) + ::StringTools_obj::replace(file,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00))));
HXLINE( 125)								::String data = file1->convertToFNF(((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/converted.json",73,2b,b3,66)));
HXLINE( 126)								 ::FreeplaySongMetadata meta =  ::FreeplaySongMetadata_obj::__alloc( HX_CTX ,file1->header->TITLE,0,HX_("sm",9a,64,00,00),file1,(HX_("assets/sm/",89,ef,2d,70) + i));
HXLINE( 127)								::FreeplayState_obj::songs->push(meta);
HXLINE( 128)								 ::Dynamic song = ::Song_obj::loadFromJsonRAW(::sys::io::File_obj::getContent(((HX_("assets/sm/",89,ef,2d,70) + i) + HX_("/converted.json",73,2b,b3,66))));
HXLINE( 130)								::FreeplayState_obj::songData->set(file1->header->TITLE,::Array_obj< ::Dynamic>::__new(3)->init(0,song)->init(1,song)->init(2,song));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 139)		::DiscordClient_obj::changePresence(HX_("In the Freeplay Menu",55,4e,8a,46),null(),null(),null(),null());
HXLINE( 142)		bool isDebug = false;
HXLINE( 148)		this->persistentUpdate = true;
HXLINE( 154)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 154)		this->bg = _hx_tmp->loadGraphic(::Paths_obj::loadImage(HX_("menuBGBlue",de,35,e3,1e),null()),null(),null(),null(),null(),null());
HXLINE( 155)		this->bg->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 156)		this->add(this->bg);
HXLINE( 158)		this->grpSongs =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 159)		this->add(this->grpSongs);
HXLINE( 161)		{
HXLINE( 161)			int _g2 = 0;
HXDLIN( 161)			int _g3 = ::FreeplayState_obj::songs->length;
HXDLIN( 161)			while((_g2 < _g3)){
HXLINE( 161)				_g2 = (_g2 + 1);
HXDLIN( 161)				int i = (_g2 - 1);
HXLINE( 163)				 ::Alphabet songText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),::FreeplayState_obj::songs->__get(i).StaticCast<  ::FreeplaySongMetadata >()->songName,true,false,true,null(),null());
HXLINE( 164)				songText->isMenuItem = true;
HXLINE( 165)				songText->targetY = ( (Float)(i) );
HXLINE( 166)				this->grpSongs->add(songText).StaticCast<  ::Alphabet >();
HXLINE( 168)				 ::HealthIcon icon =  ::HealthIcon_obj::__alloc( HX_CTX ,::FreeplayState_obj::songs->__get(i).StaticCast<  ::FreeplaySongMetadata >()->songCharacter,null());
HXLINE( 169)				icon->sprTracker = songText;
HXLINE( 172)				this->iconArray->push(icon);
HXLINE( 173)				this->add(icon);
            			}
            		}
HXLINE( 180)		this->scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.65)),5,0,HX_("",00,00,00,00),32,null());
HXLINE( 182)		this->scoreText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 185)		 ::flixel::FlxSprite scoreBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->scoreText->x - ( (Float)(6) )),0,null());
HXDLIN( 185)		 ::flixel::FlxSprite scoreBG1 = scoreBG->makeGraphic(::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.4))),135,-16777216,null(),null());
HXLINE( 186)		scoreBG1->set_alpha(((Float)0.6));
HXLINE( 187)		this->add(scoreBG1);
HXLINE( 189)		this->diffText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->scoreText->x,(this->scoreText->y + 36),0,HX_("",00,00,00,00),24,null());
HXLINE( 190)		this->diffText->set_font(this->scoreText->_font);
HXLINE( 191)		this->add(this->diffText);
HXLINE( 193)		this->diffCalcText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->scoreText->x,(this->scoreText->y + 66),0,HX_("",00,00,00,00),24,null());
HXLINE( 194)		this->diffCalcText->set_font(this->scoreText->_font);
HXLINE( 195)		this->add(this->diffCalcText);
HXLINE( 197)		Float _hx_tmp1 = this->scoreText->x;
HXDLIN( 197)		Float _hx_tmp2 = (this->scoreText->y + 96);
HXDLIN( 197)		this->previewtext =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,0,((HX_("Rate: ",a6,71,1b,f0) + ::flixel::math::FlxMath_obj::roundDecimal(::FreeplayState_obj::rate,2)) + HX_("x",78,00,00,00)),24,null());
HXLINE( 198)		this->previewtext->set_font(this->scoreText->_font);
HXLINE( 199)		this->add(this->previewtext);
HXLINE( 201)		this->comboText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->diffText->x + 100),this->diffText->y,0,HX_("",00,00,00,00),24,null());
HXLINE( 202)		this->comboText->set_font(this->diffText->_font);
HXLINE( 203)		this->add(this->comboText);
HXLINE( 205)		this->add(this->scoreText);
HXLINE( 208)		 ::flixel::graphics::frames::FlxAtlasFrames ui_tex = ::Paths_obj::getSparrowAtlas(HX_("campaign_menu_UI_assets",fd,f3,ba,6a),null(),null());
HXLINE( 209)		this->difficultySelectors =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 210)		this->add(this->difficultySelectors);
HXLINE( 212)		this->leftArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,700,0,null());
HXLINE( 213)		this->leftArrow->set_frames(ui_tex);
HXLINE( 214)		this->leftArrow->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("arrow left",be,05,f8,94),null(),null(),null(),null());
HXLINE( 215)		this->leftArrow->animation->addByPrefix(HX_("press",83,53,88,c8),HX_("arrow push left",f6,7a,62,0c),null(),null(),null(),null());
HXLINE( 216)		this->leftArrow->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 217)		this->difficultySelectors->add(this->leftArrow).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 219)		 ::flixel::FlxSprite _hx_tmp3 = this->leftArrow;
HXDLIN( 219)		int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 219)		_hx_tmp3->set_y(((( (Float)(_hx_tmp4) ) - this->leftArrow->get_height()) - ( (Float)(30) )));
HXLINE( 221)		this->sprDifficulty =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->leftArrow->x + 50),this->leftArrow->y,null());
HXLINE( 222)		this->sprDifficulty->set_frames(ui_tex);
HXLINE( 223)		this->sprDifficulty->animation->addByPrefix(HX_("easy",02,8c,0c,43),HX_("EASY",02,54,cd,2d),null(),null(),null(),null());
HXLINE( 224)		this->sprDifficulty->animation->addByPrefix(HX_("normal",27,72,69,30),HX_("NORMAL",27,1e,ec,e2),null(),null(),null(),null());
HXLINE( 225)		this->sprDifficulty->animation->addByPrefix(HX_("hard",eb,2e,08,45),HX_("HARD",eb,f6,c8,2f),null(),null(),null(),null());
HXLINE( 226)		this->sprDifficulty->animation->addByPrefix(HX_("insane",aa,36,da,9d),HX_("INSANE",aa,e2,5c,50),null(),null(),null(),null());
HXLINE( 232)		Float _hx_tmp5 = this->sprDifficulty->x;
HXDLIN( 232)		Float _hx_tmp6 = ((_hx_tmp5 + this->sprDifficulty->get_width()) + 50);
HXDLIN( 232)		this->rightArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp6,this->leftArrow->y,null());
HXLINE( 233)		this->rightArrow->set_frames(ui_tex);
HXLINE( 234)		this->rightArrow->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("arrow right",45,0e,1a,3b),null(),null(),null(),null());
HXLINE( 235)		this->rightArrow->animation->addByPrefix(HX_("press",83,53,88,c8),HX_("arrow push right",0d,2a,d6,40),24,false,null(),null());
HXLINE( 236)		this->rightArrow->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 237)		this->difficultySelectors->add(this->rightArrow).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 239)		this->changeSelection(null());
HXLINE( 240)		this->changeDiff(null());
HXLINE( 244)		this->selector =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 246)		this->selector->set_size(40);
HXLINE( 247)		this->selector->set_text(HX_(">",3e,00,00,00));
HXLINE( 250)		 ::Alphabet swag =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(1) ),( (Float)(0) ),HX_("swag",8a,2a,5e,4c),null(),null(),null(),null(),null());
HXLINE( 252)		this->super::create();
            	}


void FreeplayState_obj::addSong(::String songName,int weekNum,::String songCharacter){
            	HX_GC_STACKFRAME(&_hx_pos_86166a84e8de7ace_325_addSong)
HXDLIN( 325)		::Array< ::Dynamic> _hx_tmp = ::FreeplayState_obj::songs;
HXDLIN( 325)		_hx_tmp->push( ::FreeplaySongMetadata_obj::__alloc( HX_CTX ,songName,weekNum,songCharacter,null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FreeplayState_obj,addSong,(void))

void FreeplayState_obj::addWeek(::Array< ::String > songs,int weekNum,::Array< ::String > songCharacters){
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_329_addWeek)
HXLINE( 330)		if (::hx::IsNull( songCharacters )) {
HXLINE( 331)			songCharacters = ::Array_obj< ::String >::fromData( _hx_array_data_b3f26131_8,1);
            		}
HXLINE( 333)		int num = 0;
HXLINE( 334)		{
HXLINE( 334)			int _g = 0;
HXDLIN( 334)			while((_g < songs->length)){
HXLINE( 334)				::String song = songs->__get(_g);
HXDLIN( 334)				_g = (_g + 1);
HXLINE( 336)				this->addSong(song,weekNum,songCharacters->__get(num));
HXLINE( 338)				if ((songCharacters->length != 1)) {
HXLINE( 339)					num = (num + 1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FreeplayState_obj,addWeek,(void))

void FreeplayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_86166a84e8de7ace_344_update)
HXLINE( 345)		this->super::update(elapsed);
HXLINE( 347)		if ((::flixel::FlxG_obj::sound->music->_volume < ((Float)0.7))) {
HXLINE( 349)			 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 349)			_g->set_volume((_g->_volume + (((Float)0.5) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 352)		Float a = ( (Float)(this->lerpScore) );
HXDLIN( 352)		this->lerpScore = ::Math_obj::floor((a + (((Float)0.4) * (( (Float)(this->intendedScore) ) - a))));
HXLINE( 354)		if ((::Math_obj::abs(( (Float)((this->lerpScore - this->intendedScore)) )) <= 10)) {
HXLINE( 355)			this->lerpScore = this->intendedScore;
            		}
HXLINE( 357)		this->scoreText->set_text((HX_("PERSONAL BEST:",36,ce,e9,ee) + this->lerpScore));
HXLINE( 358)		this->comboText->set_text((this->combo + HX_("\n",0a,00,00,00)));
HXLINE( 360)		if ((::flixel::FlxG_obj::sound->music->_volume > ((Float)0.8))) {
HXLINE( 362)			 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 362)			_g->set_volume((_g->_volume - (((Float)0.5) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 365)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 365)		bool upP = _this->keyManager->checkStatusUnsafe(38,_this->status);
HXLINE( 366)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 366)		bool downP = _this1->keyManager->checkStatusUnsafe(40,_this1->status);
HXLINE( 367)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 367)		bool accepted = _this2->keyManager->checkStatusUnsafe(13,_this2->status);
HXLINE( 368)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 368)		bool dadDebug = _this3->keyManager->checkStatusUnsafe(54,_this3->status);
HXLINE( 369)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 369)		bool charting = _this4->keyManager->checkStatusUnsafe(55,_this4->status);
HXLINE( 370)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 370)		bool bfDebug = _this5->keyManager->checkStatusUnsafe(48,_this5->status);
HXLINE( 372)		 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
HXLINE( 374)		if (::hx::IsNotNull( gamepad )) {
HXLINE( 376)			 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this = gamepad->justPressed;
HXDLIN( 376)			int id = 11;
HXDLIN( 376)			 ::flixel::input::gamepad::FlxGamepad _this1 = _this->gamepad;
HXDLIN( 376)			int Status = _this->status;
HXDLIN( 376)			bool _hx_tmp;
HXDLIN( 376)			switch((int)(id)){
            				case (int)-2: {
HXLINE( 376)					_hx_tmp = _this1->anyButton(Status);
            				}
            				break;
            				case (int)-1: {
HXLINE( 376)					_hx_tmp = !(_this1->anyButton(Status));
            				}
            				break;
            				default:{
HXLINE( 376)					int RawID = _this1->mapping->getRawID(id);
HXDLIN( 376)					 ::flixel::input::gamepad::FlxGamepadButton button = _this1->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 376)					if (::hx::IsNotNull( button )) {
HXLINE( 376)						_hx_tmp = button->hasState(Status);
            					}
            					else {
HXLINE( 376)						_hx_tmp = false;
            					}
            				}
            			}
HXDLIN( 376)			if (_hx_tmp) {
HXLINE( 378)				this->changeSelection(-1);
            			}
HXLINE( 380)			 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this2 = gamepad->justPressed;
HXDLIN( 380)			int id1 = 12;
HXDLIN( 380)			 ::flixel::input::gamepad::FlxGamepad _this3 = _this2->gamepad;
HXDLIN( 380)			int Status1 = _this2->status;
HXDLIN( 380)			bool _hx_tmp1;
HXDLIN( 380)			switch((int)(id1)){
            				case (int)-2: {
HXLINE( 380)					_hx_tmp1 = _this3->anyButton(Status1);
            				}
            				break;
            				case (int)-1: {
HXLINE( 380)					_hx_tmp1 = !(_this3->anyButton(Status1));
            				}
            				break;
            				default:{
HXLINE( 380)					int RawID = _this3->mapping->getRawID(id1);
HXDLIN( 380)					 ::flixel::input::gamepad::FlxGamepadButton button = _this3->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 380)					if (::hx::IsNotNull( button )) {
HXLINE( 380)						_hx_tmp1 = button->hasState(Status1);
            					}
            					else {
HXLINE( 380)						_hx_tmp1 = false;
            					}
            				}
            			}
HXDLIN( 380)			if (_hx_tmp1) {
HXLINE( 382)				this->changeSelection(1);
            			}
HXLINE( 384)			 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this4 = gamepad->justPressed;
HXDLIN( 384)			int id2 = 13;
HXDLIN( 384)			 ::flixel::input::gamepad::FlxGamepad _this5 = _this4->gamepad;
HXDLIN( 384)			int Status2 = _this4->status;
HXDLIN( 384)			bool _hx_tmp2;
HXDLIN( 384)			switch((int)(id2)){
            				case (int)-2: {
HXLINE( 384)					_hx_tmp2 = _this5->anyButton(Status2);
            				}
            				break;
            				case (int)-1: {
HXLINE( 384)					_hx_tmp2 = !(_this5->anyButton(Status2));
            				}
            				break;
            				default:{
HXLINE( 384)					int RawID = _this5->mapping->getRawID(id2);
HXDLIN( 384)					 ::flixel::input::gamepad::FlxGamepadButton button = _this5->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 384)					if (::hx::IsNotNull( button )) {
HXLINE( 384)						_hx_tmp2 = button->hasState(Status2);
            					}
            					else {
HXLINE( 384)						_hx_tmp2 = false;
            					}
            				}
            			}
HXDLIN( 384)			if (_hx_tmp2) {
HXLINE( 386)				this->changeDiff(-1);
            			}
HXLINE( 388)			 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this6 = gamepad->justPressed;
HXDLIN( 388)			int id3 = 14;
HXDLIN( 388)			 ::flixel::input::gamepad::FlxGamepad _this7 = _this6->gamepad;
HXDLIN( 388)			int Status3 = _this6->status;
HXDLIN( 388)			bool _hx_tmp3;
HXDLIN( 388)			switch((int)(id3)){
            				case (int)-2: {
HXLINE( 388)					_hx_tmp3 = _this7->anyButton(Status3);
            				}
            				break;
            				case (int)-1: {
HXLINE( 388)					_hx_tmp3 = !(_this7->anyButton(Status3));
            				}
            				break;
            				default:{
HXLINE( 388)					int RawID = _this7->mapping->getRawID(id3);
HXDLIN( 388)					 ::flixel::input::gamepad::FlxGamepadButton button = _this7->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 388)					if (::hx::IsNotNull( button )) {
HXLINE( 388)						_hx_tmp3 = button->hasState(Status3);
            					}
            					else {
HXLINE( 388)						_hx_tmp3 = false;
            					}
            				}
            			}
HXDLIN( 388)			if (_hx_tmp3) {
HXLINE( 390)				this->changeDiff(1);
            			}
            		}
HXLINE( 397)		if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 399)			this->changeSelection(-(::flixel::FlxG_obj::mouse->wheel));
            		}
HXLINE( 402)		if (upP) {
HXLINE( 404)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 404)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 405)			this->changeSelection(-1);
            		}
HXLINE( 407)		if (downP) {
HXLINE( 409)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 409)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 410)			this->changeSelection(1);
            		}
HXLINE( 416)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 416)		if (_this6->keyManager->checkStatusUnsafe(16,_this6->status)) {
HXLINE( 418)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 418)			if (_this->keyManager->checkStatusUnsafe(37,_this->status)) {
HXLINE( 420)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::FreeplayState >();
HXDLIN( 420)				::FreeplayState_obj::rate = (::FreeplayState_obj::rate - ((Float)0.05));
HXLINE( 421)				 ::flixel::text::FlxText _hx_tmp1 = this->diffCalcText;
HXDLIN( 421)				_hx_tmp1->set_text((HX_("RATING: ",03,14,1b,b3) + ::DiffCalc_obj::CalculateDiff(::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty),null())));
            			}
HXLINE( 423)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 423)			if (_this1->keyManager->checkStatusUnsafe(39,_this1->status)) {
HXLINE( 425)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::FreeplayState >();
HXDLIN( 425)				::FreeplayState_obj::rate = (::FreeplayState_obj::rate + ((Float)0.05));
HXLINE( 426)				 ::flixel::text::FlxText _hx_tmp1 = this->diffCalcText;
HXDLIN( 426)				_hx_tmp1->set_text((HX_("RATING: ",03,14,1b,b3) + ::DiffCalc_obj::CalculateDiff(::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty),null())));
            			}
HXLINE( 429)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 429)			if (_this2->keyManager->checkStatusUnsafe(82,_this2->status)) {
HXLINE( 431)				::FreeplayState_obj::rate = ( (Float)(1) );
HXLINE( 432)				 ::flixel::text::FlxText _hx_tmp = this->diffCalcText;
HXDLIN( 432)				_hx_tmp->set_text((HX_("RATING: ",03,14,1b,b3) + ::DiffCalc_obj::CalculateDiff(::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty),null())));
            			}
HXLINE( 435)			if ((::FreeplayState_obj::rate > 3)) {
HXLINE( 437)				::FreeplayState_obj::rate = ( (Float)(3) );
HXLINE( 438)				 ::flixel::text::FlxText _hx_tmp = this->diffCalcText;
HXDLIN( 438)				_hx_tmp->set_text((HX_("RATING: ",03,14,1b,b3) + ::DiffCalc_obj::CalculateDiff(::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty),null())));
            			}
            			else {
HXLINE( 440)				if ((::FreeplayState_obj::rate < ((Float)0.5))) {
HXLINE( 442)					::FreeplayState_obj::rate = ((Float)0.5);
HXLINE( 443)					 ::flixel::text::FlxText _hx_tmp = this->diffCalcText;
HXDLIN( 443)					_hx_tmp->set_text((HX_("RATING: ",03,14,1b,b3) + ::DiffCalc_obj::CalculateDiff(::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty),null())));
            				}
            			}
HXLINE( 446)			 ::flixel::text::FlxText _hx_tmp = this->previewtext;
HXDLIN( 446)			_hx_tmp->set_text(((HX_("Rate: ",a6,71,1b,f0) + ::flixel::math::FlxMath_obj::roundDecimal(::FreeplayState_obj::rate,2)) + HX_("x",78,00,00,00)));
            		}
            		else {
HXLINE( 450)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 450)			if (_this->keyManager->checkStatusUnsafe(37,_this->status)) {
HXLINE( 451)				this->changeDiff(-1);
            			}
HXLINE( 452)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 452)			if (_this1->keyManager->checkStatusUnsafe(39,_this1->status)) {
HXLINE( 453)				this->changeDiff(1);
            			}
            		}
HXLINE( 459)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE( 460)			::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,::FreeplayState_obj::rate);
            		}
HXLINE( 464)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 466)			 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 466)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 466)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 469)		if (accepted) {
HXLINE( 470)			this->loadSong(null());
            		}
            		else {
HXLINE( 471)			if (charting) {
HXLINE( 472)				this->loadSong(true);
            			}
            		}
            	}


void FreeplayState_obj::loadAnimDebug(::hx::Null< bool >  __o_dad){
            		bool dad = __o_dad.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_86166a84e8de7ace_488_loadAnimDebug)
HXLINE( 490)		 ::Dynamic hmm;
HXLINE( 491)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 493)			hmm = ::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty);
HXLINE( 494)			if (::hx::IsNull( hmm )) {
HXLINE( 495)				return;
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 499)				return;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 501)		::PlayState_obj::SONG = hmm;
HXLINE( 503)		::String character;
HXDLIN( 503)		if (dad) {
HXLINE( 503)			character = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 503)			character = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) );
            		}
HXLINE( 505)		{
HXLINE( 505)			 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::AnimationDebug_obj::__alloc( HX_CTX ,character)) ),false);
HXDLIN( 505)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 505)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FreeplayState_obj,loadAnimDebug,(void))

void FreeplayState_obj::loadSong(::hx::Null< bool >  __o_isCharting){
            		bool isCharting = __o_isCharting.Default(false);
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_509_loadSong)
HXLINE( 510)		::FreeplayState_obj::loadSongInFreePlay(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songName,::FreeplayState_obj::curDifficulty,isCharting,null());
HXLINE( 512)		this->clean();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FreeplayState_obj,loadSong,(void))

void FreeplayState_obj::changeDiff(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_569_changeDiff)
HXLINE( 570)		::Array< ::String > _hx_tmp = ::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->diffs;
HXDLIN( 570)		if (!(_hx_tmp->contains(::CoolUtil_obj::difficultyFromInt((::FreeplayState_obj::curDifficulty + change))))) {
HXLINE( 571)			return;
            		}
HXLINE( 573)		 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::FreeplayState >();
HXDLIN( 573)		::FreeplayState_obj::curDifficulty = (::FreeplayState_obj::curDifficulty + change);
HXLINE( 575)		if ((::FreeplayState_obj::curDifficulty < 0)) {
HXLINE( 576)			::FreeplayState_obj::curDifficulty = 2;
            		}
HXLINE( 577)		if ((::FreeplayState_obj::curDifficulty > 3)) {
HXLINE( 578)			::FreeplayState_obj::curDifficulty = 0;
            		}
HXLINE( 581)		::String songHighscore = ::StringTools_obj::replace(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songName,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE( 582)		::String _hx_switch_0 = songHighscore;
            		if (  (_hx_switch_0==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE( 585)			songHighscore = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN( 585)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==HX_("M.I.L.F",1e,4e,41,0d)) ){
HXLINE( 589)			songHighscore = HX_("Milf",f6,78,35,33);
HXDLIN( 589)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE( 587)			songHighscore = HX_("Philly",48,eb,f2,23);
HXDLIN( 587)			goto _hx_goto_12;
            		}
            		_hx_goto_12:;
HXLINE( 591)		switch((int)(::FreeplayState_obj::curDifficulty)){
            			case (int)0: {
HXLINE( 594)				this->sprDifficulty->animation->play(HX_("easy",02,8c,0c,43),null(),null(),null());
HXLINE( 595)				this->sprDifficulty->offset->set_x(( (Float)(20) ));
            			}
            			break;
            			case (int)1: {
HXLINE( 597)				this->sprDifficulty->animation->play(HX_("normal",27,72,69,30),null(),null(),null());
HXLINE( 598)				this->sprDifficulty->offset->set_x(( (Float)(70) ));
            			}
            			break;
            			case (int)2: {
HXLINE( 600)				this->sprDifficulty->animation->play(HX_("hard",eb,2e,08,45),null(),null(),null());
HXLINE( 601)				this->sprDifficulty->offset->set_x(( (Float)(20) ));
            			}
            			break;
            			case (int)3: {
HXLINE( 603)				this->sprDifficulty->animation->play(HX_("insane",aa,36,da,9d),null(),null(),null());
HXLINE( 604)				this->sprDifficulty->offset->set_x(( (Float)(20) ));
            			}
            			break;
            		}
HXLINE( 608)		this->intendedScore = ::Highscore_obj::getScore(songHighscore,::FreeplayState_obj::curDifficulty);
HXLINE( 609)		this->combo = ::Highscore_obj::getCombo(songHighscore,::FreeplayState_obj::curDifficulty);
HXLINE( 611)		 ::flixel::text::FlxText _hx_tmp2 = this->diffCalcText;
HXDLIN( 611)		_hx_tmp2->set_text((HX_("RATING: ",03,14,1b,b3) + ::DiffCalc_obj::CalculateDiff(::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty),null())));
HXLINE( 612)		 ::flixel::text::FlxText _hx_tmp3 = this->diffText;
HXDLIN( 612)		_hx_tmp3->set_text(::CoolUtil_obj::difficultyFromInt(::FreeplayState_obj::curDifficulty).toUpperCase());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FreeplayState_obj,changeDiff,(void))

void FreeplayState_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_86166a84e8de7ace_616_changeSelection)
HXLINE( 617)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 617)		_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 619)		 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::FreeplayState >();
HXDLIN( 619)		::FreeplayState_obj::curSelected = (::FreeplayState_obj::curSelected + change);
HXLINE( 621)		if ((::FreeplayState_obj::curSelected < 0)) {
HXLINE( 622)			::FreeplayState_obj::curSelected = (::FreeplayState_obj::songs->length - 1);
            		}
HXLINE( 623)		if ((::FreeplayState_obj::curSelected >= ::FreeplayState_obj::songs->length)) {
HXLINE( 624)			::FreeplayState_obj::curSelected = 0;
            		}
HXLINE( 626)		 ::flixel::FlxSprite _hx_tmp2 = this->bg;
HXDLIN( 626)		_hx_tmp2->loadGraphic(::Paths_obj::loadImage(((HX_("songImages/",22,a9,00,7a) + ::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songName) + HX_("freeplayimage",bb,4a,32,12)),null()),null(),null(),null(),null(),null());
HXLINE( 627)		this->add(this->bg);
HXLINE( 628)		if ((::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->diffs->length != 3)) {
HXLINE( 630)			::String _hx_switch_0 = ::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->diffs->__get(0);
            			if (  (_hx_switch_0==HX_("Easy",22,b8,e5,2d)) ){
HXLINE( 633)				::FreeplayState_obj::curDifficulty = 0;
HXDLIN( 633)				goto _hx_goto_14;
            			}
            			if (  (_hx_switch_0==HX_("Hard",0b,5b,e1,2f)) ){
HXLINE( 637)				::FreeplayState_obj::curDifficulty = 2;
HXDLIN( 637)				goto _hx_goto_14;
            			}
            			if (  (_hx_switch_0==HX_("Insane",ca,aa,6e,d2)) ){
HXLINE( 639)				::FreeplayState_obj::curDifficulty = 3;
HXDLIN( 639)				goto _hx_goto_14;
            			}
            			if (  (_hx_switch_0==HX_("Normal",47,e6,fd,64)) ){
HXLINE( 635)				::FreeplayState_obj::curDifficulty = 1;
HXDLIN( 635)				goto _hx_goto_14;
            			}
            			_hx_goto_14:;
            		}
HXLINE( 647)		::String songHighscore = ::StringTools_obj::replace(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songName,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE( 648)		::String _hx_switch_1 = songHighscore;
            		if (  (_hx_switch_1==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE( 651)			songHighscore = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN( 651)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_1==HX_("M.I.L.F",1e,4e,41,0d)) ){
HXLINE( 655)			songHighscore = HX_("Milf",f6,78,35,33);
HXDLIN( 655)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_1==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE( 653)			songHighscore = HX_("Philly",48,eb,f2,23);
HXDLIN( 653)			goto _hx_goto_15;
            		}
            		_hx_goto_15:;
HXLINE( 659)		this->intendedScore = ::Highscore_obj::getScore(songHighscore,::FreeplayState_obj::curDifficulty);
HXLINE( 660)		this->combo = ::Highscore_obj::getCombo(songHighscore,::FreeplayState_obj::curDifficulty);
HXLINE( 664)		 ::flixel::text::FlxText _hx_tmp3 = this->diffCalcText;
HXDLIN( 664)		_hx_tmp3->set_text((HX_("RATING: ",03,14,1b,b3) + ::DiffCalc_obj::CalculateDiff(::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty),null())));
HXLINE( 665)		 ::flixel::text::FlxText _hx_tmp4 = this->diffText;
HXDLIN( 665)		_hx_tmp4->set_text(::CoolUtil_obj::difficultyFromInt(::FreeplayState_obj::curDifficulty).toUpperCase());
HXLINE( 668)		if ((::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songCharacter == HX_("sm",9a,64,00,00))) {
HXLINE( 671)			 ::FreeplaySongMetadata data = ::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >();
HXLINE( 673)			 ::haxe::io::Bytes bytes = ::sys::io::File_obj::getBytes(((data->path + HX_("/",2f,00,00,00)) + data->sm->header->MUSIC));
HXLINE( 674)			 ::openfl::media::Sound sound =  ::openfl::media::Sound_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 675)			sound->loadCompressedDataFromByteArray(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytesData(bytes->b),bytes->length);
HXLINE( 676)			::flixel::FlxG_obj::sound->playMusic(sound,null(),null(),null());
            		}
            		else {
HXLINE( 680)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 680)			::String songLowercase = ::StringTools_obj::replace(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songName,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN( 680)			::String _hx_switch_2 = songLowercase;
            			if (  (_hx_switch_2==HX_("dad-battle",be,d5,66,07)) ){
HXLINE( 680)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN( 680)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_2==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE( 680)				songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN( 680)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_2==HX_("philly-nice",22,2e,26,44)) ){
HXLINE( 680)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN( 680)				goto _hx_goto_16;
            			}
            			_hx_goto_16:;
HXDLIN( 680)			_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),0,null(),null());
            		}
HXLINE( 683)		 ::Dynamic hmm;
HXLINE( 684)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 686)			hmm = ::FreeplayState_obj::songData->get(::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songName)->__GetItem(::FreeplayState_obj::curDifficulty);
HXLINE( 687)			if (::hx::IsNotNull( hmm )) {
HXLINE( 689)				::Conductor_obj::changeBPM(( (Float)(hmm->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE( 690)				::GameplayCustomizeState_obj::freeplayBf = ( (::String)(hmm->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) );
HXLINE( 691)				::GameplayCustomizeState_obj::freeplayDad = ( (::String)(hmm->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
HXLINE( 692)				::GameplayCustomizeState_obj::freeplayGf = ( (::String)(hmm->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) );
HXLINE( 693)				::GameplayCustomizeState_obj::freeplayNoteStyle = ( (::String)(hmm->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic)) );
HXLINE( 694)				::GameplayCustomizeState_obj::freeplayStage = ( (::String)(hmm->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
HXLINE( 695)				::GameplayCustomizeState_obj::freeplaySong = ( (::String)(hmm->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) );
HXLINE( 696)				::GameplayCustomizeState_obj::freeplayWeek = ::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->week;
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 703)		if (::FreeplayState_obj::openedPreview) {
HXLINE( 705)			this->closeSubState();
HXLINE( 706)			this->openSubState( ::DiffOverview_obj::__alloc( HX_CTX ,null()));
            		}
HXLINE( 709)		int bullShit = 0;
HXLINE( 711)		{
HXLINE( 711)			int _g = 0;
HXDLIN( 711)			int _g1 = this->iconArray->length;
HXDLIN( 711)			while((_g < _g1)){
HXLINE( 711)				_g = (_g + 1);
HXDLIN( 711)				int i = (_g - 1);
HXLINE( 713)				this->iconArray->__get(i).StaticCast<  ::HealthIcon >()->set_alpha(((Float)0.6));
            			}
            		}
HXLINE( 716)		this->iconArray->__get(::FreeplayState_obj::curSelected).StaticCast<  ::HealthIcon >()->set_alpha(( (Float)(1) ));
HXLINE( 718)		{
HXLINE( 718)			int _g2 = 0;
HXDLIN( 718)			::Array< ::Dynamic> _g3 = this->grpSongs->members;
HXDLIN( 718)			while((_g2 < _g3->length)){
HXLINE( 718)				 ::Alphabet item = _g3->__get(_g2).StaticCast<  ::Alphabet >();
HXDLIN( 718)				_g2 = (_g2 + 1);
HXLINE( 720)				item->targetY = ( (Float)((bullShit - ::FreeplayState_obj::curSelected)) );
HXLINE( 721)				bullShit = (bullShit + 1);
HXLINE( 723)				item->set_alpha(((Float)0.6));
HXLINE( 726)				if ((item->targetY == 0)) {
HXLINE( 728)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FreeplayState_obj,changeSelection,(void))

::Array< ::Dynamic> FreeplayState_obj::songs;

Float FreeplayState_obj::rate;

int FreeplayState_obj::curSelected;

int FreeplayState_obj::curDifficulty;

bool FreeplayState_obj::openedPreview;

 ::haxe::ds::StringMap FreeplayState_obj::songData;

void FreeplayState_obj::loadDiff(int diff,::String songId,::Array< ::Dynamic> array){
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_65_loadDiff)
HXLINE(  66)		::String diffName = HX_("",00,00,00,00);
HXLINE(  68)		switch((int)(diff)){
            			case (int)0: {
HXLINE(  71)				diffName = HX_("-easy",af,a6,14,2c);
            			}
            			break;
            			case (int)2: {
HXLINE(  73)				diffName = HX_("-hard",98,49,10,2e);
            			}
            			break;
            			case (int)3: {
HXLINE(  75)				diffName = HX_("-insane",97,16,20,ed);
            			}
            			break;
            		}
HXLINE(  78)		array->push(::Song_obj::conversionChecks(::Song_obj::loadFromJson(songId,diffName)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FreeplayState_obj,loadDiff,(void))

::Array< ::String > FreeplayState_obj::list;

bool FreeplayState_obj::cached;

void FreeplayState_obj::populateSongData(){
            	HX_GC_STACKFRAME(&_hx_pos_86166a84e8de7ace_261_populateSongData)
HXLINE( 262)		::FreeplayState_obj::cached = false;
HXLINE( 263)		::String library = null();
HXDLIN( 263)		::FreeplayState_obj::list = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/freeplaySonglist",38,e4,80,5e) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 265)		::FreeplayState_obj::songData =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 266)		::FreeplayState_obj::songs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 268)		{
HXLINE( 268)			int _g = 0;
HXDLIN( 268)			int _g1 = ::FreeplayState_obj::list->length;
HXDLIN( 268)			while((_g < _g1)){
HXLINE( 268)				_g = (_g + 1);
HXDLIN( 268)				int i = (_g - 1);
HXLINE( 270)				::Array< ::String > data = ::FreeplayState_obj::list->__get(i).split(HX_(":",3a,00,00,00));
HXLINE( 271)				::String songId = data->__get(0);
HXLINE( 272)				 ::Dynamic meta = ::Std_obj::parseInt(data->__get(2));
HXDLIN( 272)				 ::FreeplaySongMetadata meta1 =  ::FreeplaySongMetadata_obj::__alloc( HX_CTX ,songId,( (int)(meta) ),data->__get(1),null(),null());
HXLINE( 274)				::Array< ::Dynamic> diffs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 275)				::Array< ::String > diffsThatExist = ::Array_obj< ::String >::__new(0);
HXLINE( 277)				::String library = null();
HXDLIN( 277)				if (::openfl::utils::Assets_obj::exists(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + ((((HX_("songs/",71,e7,88,2d) + songId) + HX_("/",2f,00,00,00)) + songId) + HX_("-insane",97,16,20,ed))) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library),HX_("TEXT",ad,94,ba,37))) {
HXLINE( 278)					diffsThatExist->push(HX_("Insane",ca,aa,6e,d2));
            				}
HXLINE( 279)				::String library1 = null();
HXDLIN( 279)				if (::openfl::utils::Assets_obj::exists(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + ((((HX_("songs/",71,e7,88,2d) + songId) + HX_("/",2f,00,00,00)) + songId) + HX_("-hard",98,49,10,2e))) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library1),HX_("TEXT",ad,94,ba,37))) {
HXLINE( 280)					diffsThatExist->push(HX_("Hard",0b,5b,e1,2f));
            				}
HXLINE( 281)				::String library2 = null();
HXDLIN( 281)				if (::openfl::utils::Assets_obj::exists(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + ((((HX_("songs/",71,e7,88,2d) + songId) + HX_("/",2f,00,00,00)) + songId) + HX_("-easy",af,a6,14,2c))) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library2),HX_("TEXT",ad,94,ba,37))) {
HXLINE( 282)					diffsThatExist->push(HX_("Easy",22,b8,e5,2d));
            				}
HXLINE( 283)				::String library3 = null();
HXDLIN( 283)				if (::openfl::utils::Assets_obj::exists(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (((HX_("songs/",71,e7,88,2d) + songId) + HX_("/",2f,00,00,00)) + songId)) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library3),HX_("TEXT",ad,94,ba,37))) {
HXLINE( 284)					diffsThatExist->push(HX_("Normal",47,e6,fd,64));
            				}
HXLINE( 286)				if ((diffsThatExist->length == 0)) {
HXLINE( 288)					::Debug_obj::displayAlert((meta1->songName + HX_(" Chart",9e,98,4c,a4)),HX_("No difficulties found for chart, skipping.",c8,d7,62,53));
            				}
HXLINE( 294)				if (diffsThatExist->contains(HX_("Easy",22,b8,e5,2d))) {
HXLINE( 295)					::FreeplayState_obj::loadDiff(0,songId,diffs);
            				}
HXLINE( 296)				if (diffsThatExist->contains(HX_("Normal",47,e6,fd,64))) {
HXLINE( 297)					::FreeplayState_obj::loadDiff(1,songId,diffs);
            				}
HXLINE( 298)				if (diffsThatExist->contains(HX_("Hard",0b,5b,e1,2f))) {
HXLINE( 299)					::FreeplayState_obj::loadDiff(2,songId,diffs);
            				}
HXLINE( 300)				if (diffsThatExist->contains(HX_("Insane",ca,aa,6e,d2))) {
HXLINE( 301)					::FreeplayState_obj::loadDiff(3,songId,diffs);
            				}
HXLINE( 303)				meta1->diffs = diffsThatExist;
HXLINE( 305)				bool _hx_tmp = (diffsThatExist->length != 3);
HXLINE( 308)				::FreeplayState_obj::songData->set(songId,diffs);
HXLINE( 310)				::FreeplayState_obj::songs->push(meta1);
HXLINE( 318)				{
HXLINE( 318)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this = ::flixel::FlxG_obj::sound;
HXDLIN( 318)					::String songLowercase = ::StringTools_obj::replace(songId,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN( 318)					::String _hx_switch_0 = songLowercase;
            					if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE( 318)						songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN( 318)						goto _hx_goto_22;
            					}
            					if (  (_hx_switch_0==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE( 318)						songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN( 318)						goto _hx_goto_22;
            					}
            					if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE( 318)						songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN( 318)						goto _hx_goto_22;
            					}
            					_hx_goto_22:;
HXDLIN( 318)					::String EmbeddedSound = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
HXDLIN( 318)					bool _hx_tmp1;
HXDLIN( 318)					if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE( 318)						_hx_tmp1 = ::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("MUSIC",85,08,49,8e));
            					}
            					else {
HXLINE( 318)						_hx_tmp1 = true;
            					}
HXDLIN( 318)					if (_hx_tmp1) {
HXLINE( 318)						::openfl::utils::Assets_obj::getSound(EmbeddedSound,true);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,populateSongData,(void))

void FreeplayState_obj::loadSongInFreePlay(::String songName,int difficulty,bool isCharting,::hx::Null< bool >  __o_reloadSong){
            		bool reloadSong = __o_reloadSong.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_86166a84e8de7ace_522_loadSongInFreePlay)
HXLINE( 524)		bool _hx_tmp;
HXDLIN( 524)		if (::hx::IsNotNull( ::FreeplayState_obj::songData )) {
HXLINE( 524)			_hx_tmp = (::Lambda_obj::count(::FreeplayState_obj::songData,null()) == 0);
            		}
            		else {
HXLINE( 524)			_hx_tmp = true;
            		}
HXDLIN( 524)		if (_hx_tmp) {
HXLINE( 525)			::FreeplayState_obj::populateSongData();
            		}
HXLINE( 527)		 ::Dynamic currentSongData;
HXLINE( 528)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 530)			if (::hx::IsNull( ::FreeplayState_obj::songData->get(songName) )) {
HXLINE( 531)				return;
            			}
HXLINE( 532)			currentSongData = ::FreeplayState_obj::songData->get(songName)->__GetItem(difficulty);
HXLINE( 533)			if (::hx::IsNull( ::FreeplayState_obj::songData->get(songName)->__GetItem(difficulty) )) {
HXLINE( 534)				return;
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 538)				return;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 541)		::PlayState_obj::SONG = currentSongData;
HXLINE( 542)		::PlayState_obj::isStoryMode = false;
HXLINE( 543)		::PlayState_obj::storyDifficulty = difficulty;
HXLINE( 544)		::PlayState_obj::storyWeek = ::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->week;
HXLINE( 545)		{
HXLINE( 545)			 ::Dynamic input =  ::Dynamic(((((HX_("Loading song ",e7,e5,89,48) + ::PlayState_obj::SONG->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic)) + HX_(" from week ",96,1a,a7,bd)) + ::PlayState_obj::storyWeek) + HX_(" into Free Play...",66,d6,f9,2d)));
HXDLIN( 545)			if (::hx::IsNotNull( input )) {
HXLINE( 545)				::cpp::VirtualArray output = ::Debug_obj::formatOutput(input,::hx::SourceInfo(HX_("source/FreeplayState.hx",21,2d,b0,ce),545,HX_("FreeplayState",31,61,f2,b3),HX_("loadSongInFreePlay",c0,4a,da,0b)));
HXDLIN( 545)				::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_INFO);
HXDLIN( 545)				::Debug_obj::writeToLogFile(output,HX_("INFO",6e,00,7c,30));
            			}
            		}
HXLINE( 547)		if ((::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->songCharacter == HX_("sm",9a,64,00,00))) {
HXLINE( 549)			{
HXLINE( 549)				 ::Dynamic input = HX_("Song is a StepMania song!",88,e7,b7,0a);
HXDLIN( 549)				if (::hx::IsNotNull( input )) {
HXLINE( 549)					::cpp::VirtualArray output = ::Debug_obj::formatOutput(input,::hx::SourceInfo(HX_("source/FreeplayState.hx",21,2d,b0,ce),549,HX_("FreeplayState",31,61,f2,b3),HX_("loadSongInFreePlay",c0,4a,da,0b)));
HXDLIN( 549)					::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_INFO);
HXDLIN( 549)					::Debug_obj::writeToLogFile(output,HX_("INFO",6e,00,7c,30));
            				}
            			}
HXLINE( 550)			::PlayState_obj::isSM = true;
HXLINE( 551)			::PlayState_obj::sm = ::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->sm;
HXLINE( 552)			::PlayState_obj::pathToSm = ::FreeplayState_obj::songs->__get(::FreeplayState_obj::curSelected).StaticCast<  ::FreeplaySongMetadata >()->path;
            		}
            		else {
HXLINE( 555)			::PlayState_obj::isSM = false;
            		}
HXLINE( 560)		::PlayState_obj::songMultiplier = ::FreeplayState_obj::rate;
HXLINE( 562)		if (isCharting) {
HXLINE( 563)			 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::ChartingState_obj::__alloc( HX_CTX ,reloadSong)) ),false);
HXDLIN( 563)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 563)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            		else {
HXLINE( 565)			 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN( 565)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 565)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FreeplayState_obj,loadSongInFreePlay,(void))


::hx::ObjectPtr< FreeplayState_obj > FreeplayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< FreeplayState_obj > __this = new FreeplayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< FreeplayState_obj > FreeplayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	FreeplayState_obj *__this = (FreeplayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FreeplayState_obj), true, "FreeplayState"));
	*(void **)__this = FreeplayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

FreeplayState_obj::FreeplayState_obj()
{
}

void FreeplayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FreeplayState);
	HX_MARK_MEMBER_NAME(selector,"selector");
	HX_MARK_MEMBER_NAME(scoreText,"scoreText");
	HX_MARK_MEMBER_NAME(comboText,"comboText");
	HX_MARK_MEMBER_NAME(diffText,"diffText");
	HX_MARK_MEMBER_NAME(diffCalcText,"diffCalcText");
	HX_MARK_MEMBER_NAME(previewtext,"previewtext");
	HX_MARK_MEMBER_NAME(lerpScore,"lerpScore");
	HX_MARK_MEMBER_NAME(intendedScore,"intendedScore");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(difficultySelectors,"difficultySelectors");
	HX_MARK_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_MARK_MEMBER_NAME(leftArrow,"leftArrow");
	HX_MARK_MEMBER_NAME(rightArrow,"rightArrow");
	HX_MARK_MEMBER_NAME(grpSongs,"grpSongs");
	HX_MARK_MEMBER_NAME(curPlaying,"curPlaying");
	HX_MARK_MEMBER_NAME(iconArray,"iconArray");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FreeplayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(selector,"selector");
	HX_VISIT_MEMBER_NAME(scoreText,"scoreText");
	HX_VISIT_MEMBER_NAME(comboText,"comboText");
	HX_VISIT_MEMBER_NAME(diffText,"diffText");
	HX_VISIT_MEMBER_NAME(diffCalcText,"diffCalcText");
	HX_VISIT_MEMBER_NAME(previewtext,"previewtext");
	HX_VISIT_MEMBER_NAME(lerpScore,"lerpScore");
	HX_VISIT_MEMBER_NAME(intendedScore,"intendedScore");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(difficultySelectors,"difficultySelectors");
	HX_VISIT_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_VISIT_MEMBER_NAME(leftArrow,"leftArrow");
	HX_VISIT_MEMBER_NAME(rightArrow,"rightArrow");
	HX_VISIT_MEMBER_NAME(grpSongs,"grpSongs");
	HX_VISIT_MEMBER_NAME(curPlaying,"curPlaying");
	HX_VISIT_MEMBER_NAME(iconArray,"iconArray");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FreeplayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addSong") ) { return ::hx::Val( addSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"addWeek") ) { return ::hx::Val( addWeek_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { return ::hx::Val( selector ); }
		if (HX_FIELD_EQ(inName,"diffText") ) { return ::hx::Val( diffText ); }
		if (HX_FIELD_EQ(inName,"grpSongs") ) { return ::hx::Val( grpSongs ); }
		if (HX_FIELD_EQ(inName,"loadSong") ) { return ::hx::Val( loadSong_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { return ::hx::Val( scoreText ); }
		if (HX_FIELD_EQ(inName,"comboText") ) { return ::hx::Val( comboText ); }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { return ::hx::Val( lerpScore ); }
		if (HX_FIELD_EQ(inName,"leftArrow") ) { return ::hx::Val( leftArrow ); }
		if (HX_FIELD_EQ(inName,"iconArray") ) { return ::hx::Val( iconArray ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightArrow") ) { return ::hx::Val( rightArrow ); }
		if (HX_FIELD_EQ(inName,"curPlaying") ) { return ::hx::Val( curPlaying ); }
		if (HX_FIELD_EQ(inName,"changeDiff") ) { return ::hx::Val( changeDiff_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"previewtext") ) { return ::hx::Val( previewtext ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"diffCalcText") ) { return ::hx::Val( diffCalcText ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedScore") ) { return ::hx::Val( intendedScore ); }
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { return ::hx::Val( sprDifficulty ); }
		if (HX_FIELD_EQ(inName,"loadAnimDebug") ) { return ::hx::Val( loadAnimDebug_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"difficultySelectors") ) { return ::hx::Val( difficultySelectors ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FreeplayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rate") ) { outValue = ( rate ); return true; }
		if (HX_FIELD_EQ(inName,"list") ) { outValue = ( list ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { outValue = ( songs ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cached") ) { outValue = ( cached ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"songData") ) { outValue = ( songData ); return true; }
		if (HX_FIELD_EQ(inName,"loadDiff") ) { outValue = loadDiff_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { outValue = ( curDifficulty ); return true; }
		if (HX_FIELD_EQ(inName,"openedPreview") ) { outValue = ( openedPreview ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"populateSongData") ) { outValue = populateSongData_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"loadSongInFreePlay") ) { outValue = loadSongInFreePlay_dyn(); return true; }
	}
	return false;
}

::hx::Val FreeplayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { selector=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diffText") ) { diffText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpSongs") ) { grpSongs=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboText") ) { comboText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { lerpScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftArrow") ) { leftArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconArray") ) { iconArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightArrow") ) { rightArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curPlaying") ) { curPlaying=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"previewtext") ) { previewtext=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"diffCalcText") ) { diffCalcText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedScore") ) { intendedScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { sprDifficulty=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"difficultySelectors") ) { difficultySelectors=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FreeplayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rate") ) { rate=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"list") ) { list=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { songs=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cached") ) { cached=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"songData") ) { songData=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { curDifficulty=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"openedPreview") ) { openedPreview=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void FreeplayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("selector",1f,33,6d,b1));
	outFields->push(HX_("scoreText",1f,7d,bd,dc));
	outFields->push(HX_("comboText",1b,60,25,65));
	outFields->push(HX_("diffText",52,3b,1b,21));
	outFields->push(HX_("diffCalcText",07,a5,bb,54));
	outFields->push(HX_("previewtext",b5,50,f9,da));
	outFields->push(HX_("lerpScore",5b,81,4d,e7));
	outFields->push(HX_("intendedScore",a7,fd,7c,89));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("difficultySelectors",b9,fa,53,88));
	outFields->push(HX_("sprDifficulty",d0,6b,83,ba));
	outFields->push(HX_("leftArrow",42,68,6f,3a));
	outFields->push(HX_("rightArrow",4d,60,54,28));
	outFields->push(HX_("grpSongs",d9,dc,c7,63));
	outFields->push(HX_("curPlaying",ce,61,01,95));
	outFields->push(HX_("iconArray",60,3f,53,5f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FreeplayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,selector),HX_("selector",1f,33,6d,b1)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,scoreText),HX_("scoreText",1f,7d,bd,dc)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,comboText),HX_("comboText",1b,60,25,65)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,diffText),HX_("diffText",52,3b,1b,21)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,diffCalcText),HX_("diffCalcText",07,a5,bb,54)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,previewtext),HX_("previewtext",b5,50,f9,da)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,lerpScore),HX_("lerpScore",5b,81,4d,e7)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,intendedScore),HX_("intendedScore",a7,fd,7c,89)},
	{::hx::fsString,(int)offsetof(FreeplayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(FreeplayState_obj,difficultySelectors),HX_("difficultySelectors",b9,fa,53,88)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,sprDifficulty),HX_("sprDifficulty",d0,6b,83,ba)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,leftArrow),HX_("leftArrow",42,68,6f,3a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,rightArrow),HX_("rightArrow",4d,60,54,28)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(FreeplayState_obj,grpSongs),HX_("grpSongs",d9,dc,c7,63)},
	{::hx::fsBool,(int)offsetof(FreeplayState_obj,curPlaying),HX_("curPlaying",ce,61,01,95)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FreeplayState_obj,iconArray),HX_("iconArray",60,3f,53,5f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FreeplayState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &FreeplayState_obj::songs,HX_("songs",fe,36,c7,80)},
	{::hx::fsFloat,(void *) &FreeplayState_obj::rate,HX_("rate",e0,52,a4,4b)},
	{::hx::fsInt,(void *) &FreeplayState_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsInt,(void *) &FreeplayState_obj::curDifficulty,HX_("curDifficulty",db,b7,38,a7)},
	{::hx::fsBool,(void *) &FreeplayState_obj::openedPreview,HX_("openedPreview",5f,3c,15,14)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &FreeplayState_obj::songData,HX_("songData",9f,b4,3b,30)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &FreeplayState_obj::list,HX_("list",5e,1c,b3,47)},
	{::hx::fsBool,(void *) &FreeplayState_obj::cached,HX_("cached",e2,5f,f2,b0)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FreeplayState_obj_sMemberFields[] = {
	HX_("selector",1f,33,6d,b1),
	HX_("scoreText",1f,7d,bd,dc),
	HX_("comboText",1b,60,25,65),
	HX_("diffText",52,3b,1b,21),
	HX_("diffCalcText",07,a5,bb,54),
	HX_("previewtext",b5,50,f9,da),
	HX_("lerpScore",5b,81,4d,e7),
	HX_("intendedScore",a7,fd,7c,89),
	HX_("combo",4e,28,5d,4a),
	HX_("bg",c5,55,00,00),
	HX_("difficultySelectors",b9,fa,53,88),
	HX_("sprDifficulty",d0,6b,83,ba),
	HX_("leftArrow",42,68,6f,3a),
	HX_("rightArrow",4d,60,54,28),
	HX_("grpSongs",d9,dc,c7,63),
	HX_("curPlaying",ce,61,01,95),
	HX_("iconArray",60,3f,53,5f),
	HX_("create",fc,66,0f,7c),
	HX_("addSong",96,66,95,88),
	HX_("addWeek",b5,a2,32,8b),
	HX_("update",09,86,05,87),
	HX_("loadAnimDebug",7c,6f,0c,11),
	HX_("loadSong",1b,f5,f7,bc),
	HX_("changeDiff",95,91,b2,1c),
	HX_("changeSelection",bc,98,b5,48),
	::String(null()) };

static void FreeplayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FreeplayState_obj::songs,"songs");
	HX_MARK_MEMBER_NAME(FreeplayState_obj::rate,"rate");
	HX_MARK_MEMBER_NAME(FreeplayState_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(FreeplayState_obj::curDifficulty,"curDifficulty");
	HX_MARK_MEMBER_NAME(FreeplayState_obj::openedPreview,"openedPreview");
	HX_MARK_MEMBER_NAME(FreeplayState_obj::songData,"songData");
	HX_MARK_MEMBER_NAME(FreeplayState_obj::list,"list");
	HX_MARK_MEMBER_NAME(FreeplayState_obj::cached,"cached");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FreeplayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::songs,"songs");
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::rate,"rate");
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::curDifficulty,"curDifficulty");
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::openedPreview,"openedPreview");
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::songData,"songData");
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::list,"list");
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::cached,"cached");
};

#endif

::hx::Class FreeplayState_obj::__mClass;

static ::String FreeplayState_obj_sStaticFields[] = {
	HX_("songs",fe,36,c7,80),
	HX_("rate",e0,52,a4,4b),
	HX_("curSelected",fb,eb,ab,32),
	HX_("curDifficulty",db,b7,38,a7),
	HX_("openedPreview",5f,3c,15,14),
	HX_("songData",9f,b4,3b,30),
	HX_("loadDiff",4b,2d,09,b3),
	HX_("list",5e,1c,b3,47),
	HX_("cached",e2,5f,f2,b0),
	HX_("populateSongData",a9,29,ed,c0),
	HX_("loadSongInFreePlay",c0,4a,da,0b),
	::String(null())
};

void FreeplayState_obj::__register()
{
	FreeplayState_obj _hx_dummy;
	FreeplayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("FreeplayState",31,61,f2,b3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FreeplayState_obj::__GetStatic;
	__mClass->mSetStaticField = &FreeplayState_obj::__SetStatic;
	__mClass->mMarkFunc = FreeplayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FreeplayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FreeplayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FreeplayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FreeplayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FreeplayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FreeplayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FreeplayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_31_boot)
HXDLIN(  31)		songs = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_35_boot)
HXDLIN(  35)		rate = ((Float)1.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_37_boot)
HXDLIN(  37)		curSelected = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_38_boot)
HXDLIN(  38)		curDifficulty = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_60_boot)
HXDLIN(  60)		openedPreview = false;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_86166a84e8de7ace_62_boot)
HXDLIN(  62)		songData =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_81_boot)
HXDLIN(  81)		list = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_86166a84e8de7ace_255_boot)
HXDLIN( 255)		cached = false;
            	}
}

