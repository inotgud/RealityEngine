// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_FlxTransWindow
#include <FlxTransWindow.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_8ecece8ce262ecb9_16_getWindowsTransparent,"FlxTransWindow","getWindowsTransparent",0x5064785d,"FlxTransWindow.getWindowsTransparent","FlxTransWindow.hx",16,0x80000378)
#include <windows.h>
#include <dwmapi.h>

#pragma comment(lib, "Dwmapi")

void FlxTransWindow_obj::__construct() { }

Dynamic FlxTransWindow_obj::__CreateEmpty() { return new FlxTransWindow_obj; }

void *FlxTransWindow_obj::_hx_vtable = 0;

Dynamic FlxTransWindow_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxTransWindow_obj > _hx_result = new FlxTransWindow_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxTransWindow_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x240e722a;
}

int FlxTransWindow_obj::getWindowsTransparent(::hx::Null< int >  __o_res){
            		int res = __o_res.Default(0);
            	HX_STACKFRAME(&_hx_pos_8ecece8ce262ecb9_16_getWindowsTransparent)
            	
        HWND hWnd = GetActiveWindow();
        res = SetWindowLong(hWnd, GWL_EXSTYLE, GetWindowLong(hWnd, GWL_EXSTYLE) | WS_EX_LAYERED);
        if (res)
        {
            SetLayeredWindowAttributes(hWnd, RGB(1, 1, 1), 0, LWA_COLORKEY);
        }
    

HXDLIN(  16)		return res;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxTransWindow_obj,getWindowsTransparent,return )


FlxTransWindow_obj::FlxTransWindow_obj()
{
}

bool FlxTransWindow_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 21:
		if (HX_FIELD_EQ(inName,"getWindowsTransparent") ) { outValue = getWindowsTransparent_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxTransWindow_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlxTransWindow_obj_sStaticStorageInfo = 0;
#endif

::hx::Class FlxTransWindow_obj::__mClass;

static ::String FlxTransWindow_obj_sStaticFields[] = {
	HX_("getWindowsTransparent",c5,3f,18,d0),
	::String(null())
};

void FlxTransWindow_obj::__register()
{
	FlxTransWindow_obj _hx_dummy;
	FlxTransWindow_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("FlxTransWindow",06,e7,e4,1a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxTransWindow_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxTransWindow_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxTransWindow_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTransWindow_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTransWindow_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

