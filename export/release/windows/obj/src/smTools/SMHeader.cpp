// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Event
#include <Event.h>
#endif
#ifndef INCLUDED_HelperFunctions
#include <HelperFunctions.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_TimingStruct
#include <TimingStruct.h>
#endif
#ifndef INCLUDED_smTools_SMHeader
#include <smTools/SMHeader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_41987ab568a002b9_4_new,"smTools.SMHeader","new",0x9be203a6,"smTools.SMHeader.new","smTools/SMHeader.hx",4,0x44be2029)
HX_LOCAL_STACK_FRAME(_hx_pos_41987ab568a002b9_53_getBPM,"smTools.SMHeader","getBPM",0x18727863,"smTools.SMHeader.getBPM","smTools/SMHeader.hx",53,0x44be2029)
HX_LOCAL_STACK_FRAME(_hx_pos_41987ab568a002b9_100_readHeaderLine,"smTools.SMHeader","readHeaderLine",0x17e15591,"smTools.SMHeader.readHeaderLine","smTools/SMHeader.hx",100,0x44be2029)
namespace smTools{

void SMHeader_obj::__construct(::Array< ::String > headerData){
            	HX_STACKFRAME(&_hx_pos_41987ab568a002b9_4_new)
HXLINE(  18)		this->BPMS = HX_("",00,00,00,00);
HXLINE(  17)		this->OFFSET = HX_("",00,00,00,00);
HXLINE(  13)		this->MUSIC = HX_("",00,00,00,00);
HXLINE(   8)		this->TITLE = HX_("",00,00,00,00);
HXLINE(  24)		this->_header = headerData;
HXLINE(  26)		{
HXLINE(  26)			int _g = 0;
HXDLIN(  26)			while((_g < headerData->length)){
HXLINE(  26)				::String i = headerData->__get(_g);
HXDLIN(  26)				_g = (_g + 1);
HXLINE(  28)				this->readHeaderLine(i);
            			}
            		}
HXLINE(  33)		this->MUSIC = ::StringTools_obj::replace(this->MUSIC,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00));
HXLINE(  35)		this->changeEvents = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  37)		this->getBPM(( (Float)(0) ),true);
            	}

Dynamic SMHeader_obj::__CreateEmpty() { return new SMHeader_obj; }

void *SMHeader_obj::_hx_vtable = 0;

Dynamic SMHeader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SMHeader_obj > _hx_result = new SMHeader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SMHeader_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fac2520;
}

Float SMHeader_obj::getBPM(Float beat,::hx::Null< bool >  __o_printAllBpms){
            		bool printAllBpms = __o_printAllBpms.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_41987ab568a002b9_53_getBPM)
HXLINE(  54)		::Array< ::String > bpmSplit = this->BPMS.split(HX_(",",2c,00,00,00));
HXLINE(  55)		if (printAllBpms) {
HXLINE(  57)			::TimingStruct_obj::clearTimings();
HXLINE(  58)			int currentIndex = 0;
HXLINE(  59)			{
HXLINE(  59)				int _g = 0;
HXDLIN(  59)				while((_g < bpmSplit->length)){
HXLINE(  59)					::String i = bpmSplit->__get(_g);
HXDLIN(  59)					_g = (_g + 1);
HXLINE(  61)					Float bpm = ::Std_obj::parseFloat(i.split(HX_("=",3d,00,00,00))->__get(1));
HXLINE(  62)					Float beat = ::Std_obj::parseFloat(::StringTools_obj::replace(i.split(HX_("=",3d,00,00,00))->__get(0),HX_(",",2c,00,00,00),HX_("",00,00,00,00)));
HXLINE(  64)					Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE(  66)					::TimingStruct_obj::addTiming(beat,bpm,endBeat,-(::Std_obj::parseFloat(this->OFFSET)));
HXLINE(  68)					if ((this->changeEvents->length != 0)) {
HXLINE(  70)						 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE(  71)						data->endBeat = beat;
HXLINE(  72)						data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE(  73)						Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(  74)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE(  75)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            					}
HXLINE(  78)					::Array< ::Dynamic> _hx_tmp = this->changeEvents;
HXDLIN(  78)					_hx_tmp->push( ::Event_obj::__alloc( HX_CTX ,(::HelperFunctions_obj::truncateFloat(beat,0) + HX_("SM",9a,48,00,00)),beat,bpm,HX_("BPM Change",d1,e8,85,d1)));
HXLINE(  80)					if ((bpmSplit->length == 1)) {
HXLINE(  81)						goto _hx_goto_2;
            					}
HXLINE(  82)					currentIndex = (currentIndex + 1);
            				}
            				_hx_goto_2:;
            			}
HXLINE(  86)			return ((Float)0.0);
            		}
HXLINE(  88)		Float returningBPM = ::Std_obj::parseFloat(bpmSplit->__get(0).split(HX_("=",3d,00,00,00))->__get(1));
HXLINE(  89)		{
HXLINE(  89)			int _g = 0;
HXDLIN(  89)			while((_g < bpmSplit->length)){
HXLINE(  89)				::String i = bpmSplit->__get(_g);
HXDLIN(  89)				_g = (_g + 1);
HXLINE(  91)				Float bpm = ::Std_obj::parseFloat(i.split(HX_("=",3d,00,00,00))->__get(1));
HXLINE(  92)				Float beatt = ::Std_obj::parseFloat(::StringTools_obj::replace(i.split(HX_("=",3d,00,00,00))->__get(0),HX_(",",2c,00,00,00),HX_("",00,00,00,00)));
HXLINE(  93)				if ((beatt <= beat)) {
HXLINE(  94)					returningBPM = bpm;
            				}
            			}
            		}
HXLINE(  96)		return returningBPM;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SMHeader_obj,getBPM,return )

void SMHeader_obj::readHeaderLine(::String line){
            	HX_STACKFRAME(&_hx_pos_41987ab568a002b9_100_readHeaderLine)
HXLINE( 101)		::String propName = line.split(HX_("#",23,00,00,00))->__get(1).split(HX_(":",3a,00,00,00))->__get(0);
HXLINE( 102)		::String value = line.split(HX_(":",3a,00,00,00))->__get(1).split(HX_(";",3b,00,00,00))->__get(0);
HXLINE( 103)		 ::Dynamic prop = ::Reflect_obj::getProperty(::hx::ObjectPtr<OBJ_>(this),propName);
HXLINE( 105)		if (::hx::IsNotNull( prop )) {
HXLINE( 107)			::Reflect_obj::setProperty(::hx::ObjectPtr<OBJ_>(this),propName,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SMHeader_obj,readHeaderLine,(void))


::hx::ObjectPtr< SMHeader_obj > SMHeader_obj::__new(::Array< ::String > headerData) {
	::hx::ObjectPtr< SMHeader_obj > __this = new SMHeader_obj();
	__this->__construct(headerData);
	return __this;
}

::hx::ObjectPtr< SMHeader_obj > SMHeader_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< ::String > headerData) {
	SMHeader_obj *__this = (SMHeader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SMHeader_obj), true, "smTools.SMHeader"));
	*(void **)__this = SMHeader_obj::_hx_vtable;
	__this->__construct(headerData);
	return __this;
}

SMHeader_obj::SMHeader_obj()
{
}

void SMHeader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SMHeader);
	HX_MARK_MEMBER_NAME(_header,"_header");
	HX_MARK_MEMBER_NAME(TITLE,"TITLE");
	HX_MARK_MEMBER_NAME(MUSIC,"MUSIC");
	HX_MARK_MEMBER_NAME(OFFSET,"OFFSET");
	HX_MARK_MEMBER_NAME(BPMS,"BPMS");
	HX_MARK_MEMBER_NAME(changeEvents,"changeEvents");
	HX_MARK_END_CLASS();
}

void SMHeader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_header,"_header");
	HX_VISIT_MEMBER_NAME(TITLE,"TITLE");
	HX_VISIT_MEMBER_NAME(MUSIC,"MUSIC");
	HX_VISIT_MEMBER_NAME(OFFSET,"OFFSET");
	HX_VISIT_MEMBER_NAME(BPMS,"BPMS");
	HX_VISIT_MEMBER_NAME(changeEvents,"changeEvents");
}

::hx::Val SMHeader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"BPMS") ) { return ::hx::Val( BPMS ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"TITLE") ) { return ::hx::Val( TITLE ); }
		if (HX_FIELD_EQ(inName,"MUSIC") ) { return ::hx::Val( MUSIC ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"OFFSET") ) { return ::hx::Val( OFFSET ); }
		if (HX_FIELD_EQ(inName,"getBPM") ) { return ::hx::Val( getBPM_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_header") ) { return ::hx::Val( _header ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"changeEvents") ) { return ::hx::Val( changeEvents ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"readHeaderLine") ) { return ::hx::Val( readHeaderLine_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SMHeader_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"BPMS") ) { BPMS=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"TITLE") ) { TITLE=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MUSIC") ) { MUSIC=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"OFFSET") ) { OFFSET=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_header") ) { _header=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"changeEvents") ) { changeEvents=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SMHeader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_header",2c,1b,77,6b));
	outFields->push(HX_("TITLE",78,4d,29,8e));
	outFields->push(HX_("MUSIC",85,08,49,8e));
	outFields->push(HX_("OFFSET",93,43,c2,12));
	outFields->push(HX_("BPMS",b4,0c,dd,2b));
	outFields->push(HX_("changeEvents",a9,08,98,7d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SMHeader_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(SMHeader_obj,_header),HX_("_header",2c,1b,77,6b)},
	{::hx::fsString,(int)offsetof(SMHeader_obj,TITLE),HX_("TITLE",78,4d,29,8e)},
	{::hx::fsString,(int)offsetof(SMHeader_obj,MUSIC),HX_("MUSIC",85,08,49,8e)},
	{::hx::fsString,(int)offsetof(SMHeader_obj,OFFSET),HX_("OFFSET",93,43,c2,12)},
	{::hx::fsString,(int)offsetof(SMHeader_obj,BPMS),HX_("BPMS",b4,0c,dd,2b)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(SMHeader_obj,changeEvents),HX_("changeEvents",a9,08,98,7d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SMHeader_obj_sStaticStorageInfo = 0;
#endif

static ::String SMHeader_obj_sMemberFields[] = {
	HX_("_header",2c,1b,77,6b),
	HX_("TITLE",78,4d,29,8e),
	HX_("MUSIC",85,08,49,8e),
	HX_("OFFSET",93,43,c2,12),
	HX_("BPMS",b4,0c,dd,2b),
	HX_("changeEvents",a9,08,98,7d),
	HX_("getBPM",e9,db,19,a3),
	HX_("readHeaderLine",17,af,80,e7),
	::String(null()) };

::hx::Class SMHeader_obj::__mClass;

void SMHeader_obj::__register()
{
	SMHeader_obj _hx_dummy;
	SMHeader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("smTools.SMHeader",b4,f8,a9,70);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SMHeader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SMHeader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SMHeader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SMHeader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace smTools
