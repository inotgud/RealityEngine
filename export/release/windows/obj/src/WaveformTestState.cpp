// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Waveform
#include <Waveform.h>
#endif
#ifndef INCLUDED_WaveformTestState
#include <WaveformTestState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_smTools_SMFile
#include <smTools/SMFile.h>
#endif
#ifndef INCLUDED_smTools_SMHeader
#include <smTools/SMHeader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6268b51a48a49655_14_new,"WaveformTestState","new",0x9b6caef4,"WaveformTestState.new","WaveformTestState.hx",14,0xcf556afc)
HX_LOCAL_STACK_FRAME(_hx_pos_6268b51a48a49655_19_create,"WaveformTestState","create",0xff28dce8,"WaveformTestState.create","WaveformTestState.hx",19,0xcf556afc)
HX_LOCAL_STACK_FRAME(_hx_pos_6268b51a48a49655_41_update,"WaveformTestState","update",0x0a1efbf5,"WaveformTestState.update","WaveformTestState.hx",41,0xcf556afc)

void WaveformTestState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_6268b51a48a49655_14_new)
HXDLIN(  14)		super::__construct(MaxSize);
            	}

Dynamic WaveformTestState_obj::__CreateEmpty() { return new WaveformTestState_obj; }

void *WaveformTestState_obj::_hx_vtable = 0;

Dynamic WaveformTestState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WaveformTestState_obj > _hx_result = new WaveformTestState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool WaveformTestState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x42681a42) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x42681a42;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void WaveformTestState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_6268b51a48a49655_19_create)
HXLINE(  20)		this->super::create();
HXLINE(  23)		if (::PlayState_obj::isSM) {
HXLINE(  26)			this->waveform =  ::Waveform_obj::__alloc( HX_CTX ,0,0,((::PlayState_obj::pathToSm + HX_("/",2f,00,00,00)) + ::PlayState_obj::sm->header->MUSIC),720);
            		}
            		else {
HXLINE(  31)			if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(  32)				::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(  32)				::String _hx_switch_0 = songLowercase;
            				if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(  32)					songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(  32)					goto _hx_goto_1;
            				}
            				if (  (_hx_switch_0==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(  32)					songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(  32)					goto _hx_goto_1;
            				}
            				if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(  32)					songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(  32)					goto _hx_goto_1;
            				}
            				_hx_goto_1:;
HXDLIN(  32)				::String result = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
HXDLIN(  32)				::String _hx_tmp;
HXDLIN(  32)				if (::Paths_obj::doesSoundAssetExist(result)) {
HXLINE(  32)					_hx_tmp = result;
            				}
            				else {
HXLINE(  32)					_hx_tmp = null();
            				}
HXDLIN(  32)				this->waveform =  ::Waveform_obj::__alloc( HX_CTX ,0,0,_hx_tmp,720);
            			}
            			else {
HXLINE(  34)				::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(  34)				::String _hx_switch_1 = songLowercase;
            				if (  (_hx_switch_1==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(  34)					songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(  34)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_1==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(  34)					songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(  34)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_1==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(  34)					songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(  34)					goto _hx_goto_2;
            				}
            				_hx_goto_2:;
HXDLIN(  34)				this->waveform =  ::Waveform_obj::__alloc( HX_CTX ,0,0,(((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),720);
            			}
            		}
HXLINE(  36)		this->waveform->drawWaveform();
HXLINE(  37)		this->add(this->waveform);
            	}


void WaveformTestState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_6268b51a48a49655_41_update)
HXLINE(  42)		this->super::update(elapsed);
HXLINE(  44)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  44)		if (_this->keyManager->checkStatusUnsafe(87,_this->status)) {
HXLINE(  45)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(  45)			_g->set_y((_g->y + 1));
            		}
HXLINE(  46)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  46)		if (_this1->keyManager->checkStatusUnsafe(83,_this1->status)) {
HXLINE(  47)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(  47)			_g->set_y((_g->y - ( (Float)(1) )));
            		}
HXLINE(  48)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  48)		if (_this2->keyManager->checkStatusUnsafe(65,_this2->status)) {
HXLINE(  49)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(  49)			_g->set_x((_g->x + 1));
            		}
HXLINE(  50)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  50)		if (_this3->keyManager->checkStatusUnsafe(68,_this3->status)) {
HXLINE(  51)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(  51)			_g->set_x((_g->x - ( (Float)(1) )));
            		}
            	}



::hx::ObjectPtr< WaveformTestState_obj > WaveformTestState_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< WaveformTestState_obj > __this = new WaveformTestState_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< WaveformTestState_obj > WaveformTestState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	WaveformTestState_obj *__this = (WaveformTestState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(WaveformTestState_obj), true, "WaveformTestState"));
	*(void **)__this = WaveformTestState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

WaveformTestState_obj::WaveformTestState_obj()
{
}

void WaveformTestState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WaveformTestState);
	HX_MARK_MEMBER_NAME(waveform,"waveform");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void WaveformTestState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(waveform,"waveform");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val WaveformTestState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"waveform") ) { return ::hx::Val( waveform ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val WaveformTestState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"waveform") ) { waveform=inValue.Cast<  ::Waveform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WaveformTestState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("waveform",7d,97,6a,f1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo WaveformTestState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Waveform */ ,(int)offsetof(WaveformTestState_obj,waveform),HX_("waveform",7d,97,6a,f1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *WaveformTestState_obj_sStaticStorageInfo = 0;
#endif

static ::String WaveformTestState_obj_sMemberFields[] = {
	HX_("waveform",7d,97,6a,f1),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class WaveformTestState_obj::__mClass;

void WaveformTestState_obj::__register()
{
	WaveformTestState_obj _hx_dummy;
	WaveformTestState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("WaveformTestState",02,65,cd,f2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(WaveformTestState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< WaveformTestState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WaveformTestState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WaveformTestState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

