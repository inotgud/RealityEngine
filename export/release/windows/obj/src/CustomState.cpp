// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_CustomState
#include <CustomState.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_WiggleEffectType
#include <WiggleEffectType.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrail
#include <flixel/addons/effects/FlxTrail.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrailArea
#include <flixel/addons/effects/FlxTrailArea.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxEffectSprite
#include <flixel/addons/effects/chainable/FlxEffectSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveEffect
#include <flixel/addons/effects/chainable/FlxWaveEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_IFlxEffect
#include <flixel/addons/effects/chainable/IFlxEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_atlas_FlxAtlas
#include <flixel/graphics/atlas/FlxAtlas.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_util_FlxCollision
#include <flixel/util/FlxCollision.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_Interp
#include <hscript/Interp.h>
#endif
#ifndef INCLUDED_hscript_Parser
#include <hscript/Parser.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ShaderFilter
#include <openfl/filters/ShaderFilter.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_realityEngine_EngineMain
#include <realityEngine/EngineMain.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0622449ef633bdbb_33_new,"CustomState","new",0x8fca5572,"CustomState.new","CustomState.hx",33,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_53_create,"CustomState","create",0x6f9fd92a,"CustomState.create","CustomState.hx",53,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_114_newHSSprite,"CustomState","newHSSprite",0x0af800e2,"CustomState.newHSSprite","CustomState.hx",114,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_135_newHSText,"CustomState","newHSText",0x740e104a,"CustomState.newHSText","CustomState.hx",135,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_207_endHscript,"CustomState","endHscript",0xf85ad306,"CustomState.endHscript","CustomState.hx",207,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_210_endHscript,"CustomState","endHscript",0xf85ad306,"CustomState.endHscript","CustomState.hx",210,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_213_endHscript,"CustomState","endHscript",0xf85ad306,"CustomState.endHscript","CustomState.hx",213,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_216_endHscript,"CustomState","endHscript",0xf85ad306,"CustomState.endHscript","CustomState.hx",216,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_151_endHscript,"CustomState","endHscript",0xf85ad306,"CustomState.endHscript","CustomState.hx",151,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_221_hscriptApply,"CustomState","hscriptApply",0xad2cb0a9,"CustomState.hscriptApply","CustomState.hx",221,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_246_update,"CustomState","update",0x7a95f837,"CustomState.update","CustomState.hx",246,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_259_beatHit,"CustomState","beatHit",0x9ed8608f,"CustomState.beatHit","CustomState.hx",259,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_265_stepHit,"CustomState","stepHit",0xac152479,"CustomState.stepHit","CustomState.hx",265,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_35_boot,"CustomState","boot",0x39596ee0,"CustomState.boot","CustomState.hx",35,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_37_boot,"CustomState","boot",0x39596ee0,"CustomState.boot","CustomState.hx",37,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_38_boot,"CustomState","boot",0x39596ee0,"CustomState.boot","CustomState.hx",38,0x2c449e3e)

void CustomState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_0622449ef633bdbb_33_new)
HXLINE(  46)		this->interp =  ::hscript::Interp_obj::__alloc( HX_CTX );
HXLINE(  43)		this->eventsEnter = false;
HXLINE(  42)		this->h6 = false;
HXLINE(  41)		this->h5 = false;
HXLINE(  33)		super::__construct(TransIn,TransOut);
            	}

Dynamic CustomState_obj::__CreateEmpty() { return new CustomState_obj; }

void *CustomState_obj::_hx_vtable = 0;

Dynamic CustomState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CustomState_obj > _hx_result = new CustomState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CustomState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0265b184) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0265b184;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void CustomState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_0622449ef633bdbb_53_create)
HXLINE(  55)		 ::Dynamic jsonData = ::Paths_obj::loadStateJson(::CustomState_obj::statename,null());
HXLINE(  56)		 ::Dynamic data = jsonData;
HXLINE(  57)		::realityEngine::EngineMain_obj::discordClient(( (::String)(data->__Field(HX_("rpc",e5,e2,56,00),::hx::paccDynamic)) ));
HXLINE(  58)		if (::hx::IsEq( data->__Field(HX_("escapeback",28,72,79,b0),::hx::paccDynamic),true )) {
HXLINE(  60)			::CustomState_obj::hmmbool = true;
            		}
HXLINE(  62)		{
HXLINE(  62)			int _g = 0;
HXDLIN(  62)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(data->__Field(HX_("flxsprites",9c,36,b4,ca),::hx::paccDynamic)) );
HXDLIN(  62)			while((_g < _g1->length)){
HXLINE(  62)				 ::Dynamic statespritelayer = _g1->__get(_g);
HXDLIN(  62)				_g = (_g + 1);
HXLINE(  64)				 ::flixel::FlxSprite newstatelayer =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,statespritelayer->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),statespritelayer->__Field(HX_("y",79,00,00,00),::hx::paccDynamic),null());
HXDLIN(  64)				::String library = null();
HXDLIN(  64)				 ::flixel::FlxSprite newstatelayer1 = newstatelayer->loadGraphic(::Paths_obj::getPath(( (::String)(((HX_("images/",77,50,74,c1) + statespritelayer->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic)) + HX_(".png",3b,2d,bd,1e))) ),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  65)				newstatelayer1->scrollFactor->set(0,0);
HXLINE(  66)				newstatelayer1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  67)				if (::hx::IsEq( statespritelayer->__Field(HX_("animated",a3,72,f2,88),::hx::paccDynamic),true )) {
HXLINE(  69)					newstatelayer1->set_frames(::Paths_obj::getSparrowAtlas(( (::String)(statespritelayer->__Field(HX_("sparrowatlas",bf,e5,9f,f1),::hx::paccDynamic)) ),null(),null()));
            				}
HXLINE(  71)				if (::hx::IsEq( statespritelayer->__Field(HX_("scrollFactor",bc,ec,cf,3b),::hx::paccDynamic),true )) {
HXLINE(  73)					newstatelayer1->scrollFactor->set(null(),null());
            				}
HXLINE(  75)				newstatelayer1->updateHitbox();
HXLINE(  76)				this->add(newstatelayer1);
            			}
            		}
HXLINE(  78)		{
HXLINE(  78)			int _g2 = 0;
HXDLIN(  78)			::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(data->__Field(HX_("flxtext",1f,b2,27,25),::hx::paccDynamic)) );
HXDLIN(  78)			while((_g2 < _g3->length)){
HXLINE(  78)				 ::Dynamic statetextlayer = _g3->__get(_g2);
HXDLIN(  78)				_g2 = (_g2 + 1);
HXLINE(  80)				 ::flixel::text::FlxText shittext =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,statetextlayer->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),statetextlayer->__Field(HX_("y",79,00,00,00),::hx::paccDynamic),0,( (::String)(statetextlayer->__Field(HX_("text",ad,cc,f9,4c),::hx::paccDynamic)) ),statetextlayer->__Field(HX_("size",c1,a0,53,4c),::hx::paccDynamic),null());
HXLINE(  81)				shittext->scrollFactor->set(null(),null());
HXLINE(  82)				shittext->set_font(( (::String)(statetextlayer->__Field(HX_("font",cf,5d,c0,43),::hx::paccDynamic)) ));
HXLINE(  83)				this->add(shittext);
            			}
            		}
HXLINE(  85)		{
HXLINE(  85)			int _g4 = 0;
HXDLIN(  85)			::Array< ::Dynamic> _g5 = ( (::Array< ::Dynamic>)(data->__Field(HX_("alphabets",60,a0,34,f0),::hx::paccDynamic)) );
HXDLIN(  85)			while((_g4 < _g5->length)){
HXLINE(  85)				 ::Dynamic alphabetlayer = _g5->__get(_g4);
HXDLIN(  85)				_g4 = (_g4 + 1);
HXLINE(  87)				 ::Alphabet newalphabetlayer =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(alphabetlayer->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) ),( (Float)(alphabetlayer->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ),( (::String)(alphabetlayer->__Field(HX_("text",ad,cc,f9,4c),::hx::paccDynamic)) ),true,false,null(),null(),null());
HXLINE(  88)				if (::hx::IsEq( alphabetlayer->__Field(HX_("isMenuItem",5c,04,de,c6),::hx::paccDynamic),true )) {
HXLINE(  90)					newalphabetlayer->isMenuItem = true;
            				}
HXLINE(  92)				this->add(newalphabetlayer);
            			}
            		}
HXLINE(  95)		::String library = null();
HXDLIN(  95)		if (::sys::FileSystem_obj::exists(::Paths_obj::getPath(((HX_("",00,00,00,00) + (HX_("custom/custom_states/",bd,d6,d1,45) + ::CustomState_obj::statename)) + HX_(".hx",be,42,23,00)),HX_("TEXT",ad,94,ba,37),library))) {
HXLINE(  97)			::String library = null();
HXDLIN(  97)			::String expr = ::sys::io::File_obj::getContent(::Paths_obj::getPath(((HX_("",00,00,00,00) + (HX_("custom/custom_states/",bd,d6,d1,45) + ::CustomState_obj::statename)) + HX_(".hx",be,42,23,00)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  98)			 ::hscript::Parser parser =  ::hscript::Parser_obj::__alloc( HX_CTX );
HXLINE(  99)			parser->allowTypes = true;
HXLINE( 100)			parser->allowJSON = true;
HXLINE( 101)			parser->allowMetadata = true;
HXLINE( 102)			this->endHscript();
HXLINE( 103)			 ::hscript::Expr ast = parser->parseString(expr,null());
HXLINE( 105)			this->interp->execute(ast);
            		}
HXLINE( 108)		this->hscriptApply(HX_("create",fc,66,0f,7c),null());
HXLINE( 110)		this->super::create();
            	}


void CustomState_obj::newHSSprite(Float xSpr,Float ySpr,::String image, ::Dynamic spritesheetbool,::String idleanim){
            	HX_GC_STACKFRAME(&_hx_pos_0622449ef633bdbb_114_newHSSprite)
HXLINE( 115)		if (::hx::IsNull( spritesheetbool )) {
HXLINE( 117)			spritesheetbool = false;
            		}
HXLINE( 119)		 ::flixel::FlxSprite newFlxSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,xSpr,ySpr,null());
HXLINE( 120)		if (::hx::IsEq( spritesheetbool,true )) {
HXLINE( 122)			newFlxSprite->set_frames(::Paths_obj::getSparrowAtlas(image,null(),null()));
            		}
            		else {
HXLINE( 125)			newFlxSprite->loadGraphic(::Paths_obj::loadImage(image,null()),null(),null(),null(),null(),null());
            		}
HXLINE( 127)		if (::hx::IsEq( spritesheetbool,true )) {
HXLINE( 129)			newFlxSprite->animation->addByPrefix(HX_("idle",14,a7,b3,45),idleanim,null(),null(),null(),null());
HXLINE( 130)			newFlxSprite->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            		}
HXLINE( 132)		this->add(newFlxSprite);
            	}


HX_DEFINE_DYNAMIC_FUNC5(CustomState_obj,newHSSprite,(void))

void CustomState_obj::newHSText(Float xSprText,Float ySprText,::String hsText,int sizeHS, ::Dynamic scrollFactorBool){
            	HX_GC_STACKFRAME(&_hx_pos_0622449ef633bdbb_135_newHSText)
HXLINE( 136)		bool _hx_tmp = ::hx::IsNull( scrollFactorBool );
HXLINE( 140)		 ::flixel::text::FlxText newFlxText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,xSprText,ySprText,0,hsText,sizeHS,null());
HXLINE( 141)		if (::hx::IsEq( scrollFactorBool,true )) {
HXLINE( 143)			newFlxText->scrollFactor->set(null(),null());
            		}
HXLINE( 148)		this->add(newFlxText);
            	}


HX_DEFINE_DYNAMIC_FUNC5(CustomState_obj,newHSText,(void))

void CustomState_obj::endHscript(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_0622449ef633bdbb_207_endHscript)
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run(Float elapsed){
            			HX_STACKFRAME(&_hx_pos_0622449ef633bdbb_210_endHscript)
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_0622449ef633bdbb_213_endHscript)
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_0622449ef633bdbb_216_endHscript)
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_0622449ef633bdbb_151_endHscript)
HXLINE( 152)		this->interp->variables->set(HX_("newHSSprite",d0,19,fb,d4),this->newHSSprite_dyn());
HXLINE( 153)		this->interp->variables->set(HX_("newHSText",b8,71,e3,54),this->newHSText_dyn());
HXLINE( 154)		this->interp->variables->set(HX_("add",21,f2,49,00),this->add_dyn());
HXLINE( 155)		this->interp->variables->set(HX_("statename",dc,c4,cd,40),::CustomState_obj::statename);
HXLINE( 156)		this->interp->variables->set(HX_("remove",44,9c,88,04),this->remove_dyn());
HXLINE( 157)		this->interp->variables->set(HX_("MusicBeatState",76,df,84,5d),::hx::ClassOf< ::MusicBeatState >());
HXLINE( 158)		this->interp->variables->set(HX_("PlayState",5d,83,c2,46),::hx::ClassOf< ::PlayState >());
HXLINE( 159)		this->interp->variables->set(HX_("DiscordClient",f7,d0,c5,2b),::hx::ClassOf< ::DiscordClient >());
HXLINE( 160)		this->interp->variables->set(HX_("WiggleEffectType",96,b3,49,6f),::hx::ClassOf< ::WiggleEffectType >());
HXLINE( 161)		this->interp->variables->set(HX_("FlxBasic",fc,34,94,6a),::hx::ClassOf< ::flixel::FlxBasic >());
HXLINE( 162)		this->interp->variables->set(HX_("FlxCamera",97,40,7b,39),::hx::ClassOf< ::flixel::FlxCamera >());
HXLINE( 163)		this->interp->variables->set(HX_("FlxG",b5,4b,97,2e),::hx::ClassOf< ::flixel::FlxG >());
HXLINE( 164)		this->interp->variables->set(HX_("FlxGame",64,2d,b7,d4),::hx::ClassOf< ::flixel::FlxGame >());
HXLINE( 165)		this->interp->variables->set(HX_("FlxSprite",f7,d5,84,45),::hx::ClassOf< ::flixel::FlxSprite >());
HXLINE( 166)		this->interp->variables->set(HX_("FlxState",5f,80,e5,40),::hx::ClassOf< ::flixel::FlxState >());
HXLINE( 167)		this->interp->variables->set(HX_("FlxSubState",e3,a6,41,10),::hx::ClassOf< ::flixel::FlxSubState >());
HXLINE( 168)		this->interp->variables->set(HX_("FlxGridOverlay",38,52,48,2c),::hx::ClassOf< ::flixel::addons::display::FlxGridOverlay >());
HXLINE( 169)		this->interp->variables->set(HX_("FlxTrail",14,9e,f9,d2),::hx::ClassOf< ::flixel::addons::effects::FlxTrail >());
HXLINE( 170)		this->interp->variables->set(HX_("FlxTrailArea",c1,ef,71,42),::hx::ClassOf< ::flixel::addons::effects::FlxTrailArea >());
HXLINE( 171)		this->interp->variables->set(HX_("FlxEffectSprite",e8,68,af,66),::hx::ClassOf< ::flixel::addons::effects::chainable::FlxEffectSprite >());
HXLINE( 172)		this->interp->variables->set(HX_("FlxWaveEffect",1c,a0,de,d8),::hx::ClassOf< ::flixel::addons::effects::chainable::FlxWaveEffect >());
HXLINE( 173)		this->interp->variables->set(HX_("FlxTransitionableState",b0,b8,2b,5f),::hx::ClassOf< ::flixel::addons::transition::FlxTransitionableState >());
HXLINE( 174)		this->interp->variables->set(HX_("FlxAtlas",99,57,b7,e3),::hx::ClassOf< ::flixel::graphics::atlas::FlxAtlas >());
HXLINE( 175)		this->interp->variables->set(HX_("FlxAtlasFrames",1f,b4,c0,8d),::hx::ClassOf< ::flixel::graphics::frames::FlxAtlasFrames >());
HXLINE( 176)		this->interp->variables->set(HX_("FlxTypedGroup",67,cd,0c,9b),::hx::ClassOf< ::flixel::group::FlxTypedGroup >());
HXLINE( 177)		this->interp->variables->set(HX_("FlxMath",3a,7b,ae,d8),::hx::ClassOf< ::flixel::math::FlxMath >());
HXLINE( 178)		this->interp->variables->set(HX_("FlxPoint",9e,be,69,83),::hx::ClassOf< ::flixel::math::FlxPoint >());
HXLINE( 179)		this->interp->variables->set(HX_("FlxText",1f,06,52,dd),::hx::ClassOf< ::flixel::text::FlxText >());
HXLINE( 180)		this->interp->variables->set(HX_("CustomState",80,74,7a,fd),::hx::ClassOf< ::CustomState >());
HXLINE( 181)		this->interp->variables->set(HX_("FlxEase",60,c5,64,d3),::hx::ClassOf< ::flixel::tweens::FlxEase >());
HXLINE( 182)		this->interp->variables->set(HX_("FlxTween",b9,b4,4a,d6),::hx::ClassOf< ::flixel::tweens::FlxTween >());
HXLINE( 183)		this->interp->variables->set(HX_("FlxBar",a1,ec,c5,7b),::hx::ClassOf< ::flixel::ui::FlxBar >());
HXLINE( 184)		this->interp->variables->set(HX_("FlxCollision",c0,f1,22,f8),::hx::ClassOf< ::flixel::util::FlxCollision >());
HXLINE( 185)		this->interp->variables->set(HX_("FlxSort",d0,60,b0,dc),::hx::ClassOf< ::flixel::util::FlxSort >());
HXLINE( 186)		this->interp->variables->set(HX_("FlxStringUtil",65,c4,02,2e),::hx::ClassOf< ::flixel::util::FlxStringUtil >());
HXLINE( 187)		this->interp->variables->set(HX_("FlxTimer",13,ca,0f,cd),::hx::ClassOf< ::flixel::util::FlxTimer >());
HXLINE( 188)		this->interp->variables->set(HX_("FlxRect",96,86,ff,db),::hx::ClassOf< ::flixel::math::FlxRect >());
HXLINE( 189)		this->interp->variables->set(HX_("FlxObject",b1,78,2e,97),::hx::ClassOf< ::flixel::FlxObject >());
HXLINE( 190)		this->interp->variables->set(HX_("FlxSound",1d,97,a6,3d),::hx::ClassOf< ::flixel::_hx_system::FlxSound >());
HXLINE( 191)		this->interp->variables->set(HX_("Assets",a3,bc,97,80),::hx::ClassOf< ::lime::utils::Assets >());
HXLINE( 192)		this->interp->variables->set(HX_("ShaderFilter",dd,08,30,bd),::hx::ClassOf< ::openfl::filters::ShaderFilter >());
HXLINE( 193)		this->interp->variables->set(HX_("Exception",2f,f0,6c,eb),::hx::ClassOf< ::haxe::Exception >());
HXLINE( 194)		this->interp->variables->set(HX_("CurrentPlayState",24,f4,1a,b2),::hx::ObjectPtr<OBJ_>(this));
HXLINE( 195)		this->interp->variables->set(HX_("OpenFlAssets",73,34,ef,db),::hx::ClassOf< ::openfl::utils::Assets >());
HXLINE( 196)		this->interp->variables->set(HX_("Parser",ff,10,1d,22),::hx::ClassOf< ::hscript::Parser >());
HXLINE( 197)		this->interp->variables->set(HX_("Interp",f4,ed,1a,d3),::hx::ClassOf< ::hscript::Interp >());
HXLINE( 198)		this->interp->variables->set(HX_("Paths",0e,7b,84,50),::hx::ClassOf< ::Paths >());
HXLINE( 201)		this->interp->variables->set(HX_("File",9c,fa,94,2e),::hx::ClassOf< ::sys::io::File >());
HXLINE( 202)		this->interp->variables->set(HX_("FileSystem",ab,e2,17,ca),::hx::ClassOf< ::sys::FileSystem >());
HXLINE( 203)		this->interp->variables->set(HX_("FlxGraphic",76,14,33,a3),::hx::ClassOf< ::flixel::graphics::FlxGraphic >());
HXLINE( 204)		this->interp->variables->set(HX_("BitmapData",d9,b9,71,2a),::hx::ClassOf< ::openfl::display::BitmapData >());
HXLINE( 206)		this->interp->variables->set(HX_("create",fc,66,0f,7c), ::Dynamic(new _hx_Closure_0()));
HXLINE( 209)		this->interp->variables->set(HX_("update",09,86,05,87), ::Dynamic(new _hx_Closure_1()));
HXLINE( 212)		this->interp->variables->set(HX_("stepHit",67,ae,41,81), ::Dynamic(new _hx_Closure_2()));
HXLINE( 215)		this->interp->variables->set(HX_("beatHit",7d,ea,04,74), ::Dynamic(new _hx_Closure_3()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CustomState_obj,endHscript,(void))

 ::Dynamic CustomState_obj::hscriptApply(::String functionToCall,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_0622449ef633bdbb_221_hscriptApply)
HXLINE( 222)		if (::hx::IsNull( this->interp )) {
HXLINE( 224)			return null();
            		}
HXLINE( 226)		if (this->interp->variables->exists(functionToCall)) {
HXLINE( 228)			 ::Dynamic functionH = this->interp->variables->get(functionToCall);
HXLINE( 229)			if (::hx::IsNull( params )) {
HXLINE( 231)				 ::Dynamic result = null();
HXLINE( 232)				result = functionH();
HXLINE( 233)				return result;
            			}
            			else {
HXLINE( 237)				 ::Dynamic result = null();
HXLINE( 238)				result = ::Reflect_obj::callMethod(null(),functionH,params);
HXLINE( 239)				return result;
            			}
            		}
HXLINE( 242)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(CustomState_obj,hscriptApply,return )

void CustomState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_0622449ef633bdbb_246_update)
HXLINE( 247)		if ((::CustomState_obj::hmmbool == true)) {
HXLINE( 249)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 249)			if (_this->keyManager->checkStatusUnsafe(27,_this->status)) {
HXLINE( 251)				 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 251)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 251)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE( 254)		this->hscriptApply(HX_("update",09,86,05,87),null());
HXLINE( 255)		this->super::update(elapsed);
            	}


void CustomState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_0622449ef633bdbb_259_beatHit)
HXLINE( 260)		this->hscriptApply(HX_("beatHit",7d,ea,04,74),null());
HXLINE( 261)		this->super::beatHit();
            	}


void CustomState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_0622449ef633bdbb_265_stepHit)
HXDLIN( 265)		this->hscriptApply(HX_("stepHit",67,ae,41,81),null());
            	}


 ::Character CustomState_obj::char1;

::String CustomState_obj::hmmmmmmmmmmmmmmmm;

::String CustomState_obj::language;

::String CustomState_obj::statename;

bool CustomState_obj::hmmbool;


::hx::ObjectPtr< CustomState_obj > CustomState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< CustomState_obj > __this = new CustomState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< CustomState_obj > CustomState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	CustomState_obj *__this = (CustomState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CustomState_obj), true, "CustomState"));
	*(void **)__this = CustomState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

CustomState_obj::CustomState_obj()
{
}

void CustomState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CustomState);
	HX_MARK_MEMBER_NAME(h5,"h5");
	HX_MARK_MEMBER_NAME(h6,"h6");
	HX_MARK_MEMBER_NAME(eventsEnter,"eventsEnter");
	HX_MARK_MEMBER_NAME(interp,"interp");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CustomState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(h5,"h5");
	HX_VISIT_MEMBER_NAME(h6,"h6");
	HX_VISIT_MEMBER_NAME(eventsEnter,"eventsEnter");
	HX_VISIT_MEMBER_NAME(interp,"interp");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CustomState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"h5") ) { return ::hx::Val( h5 ); }
		if (HX_FIELD_EQ(inName,"h6") ) { return ::hx::Val( h6 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"interp") ) { return ::hx::Val( interp ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"newHSText") ) { return ::hx::Val( newHSText_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"endHscript") ) { return ::hx::Val( endHscript_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"eventsEnter") ) { return ::hx::Val( eventsEnter ); }
		if (HX_FIELD_EQ(inName,"newHSSprite") ) { return ::hx::Val( newHSSprite_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"hscriptApply") ) { return ::hx::Val( hscriptApply_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CustomState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { outValue = ( char1 ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hmmbool") ) { outValue = ( hmmbool ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"language") ) { outValue = ( language ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"statename") ) { outValue = ( statename ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"hmmmmmmmmmmmmmmmm") ) { outValue = ( hmmmmmmmmmmmmmmmm ); return true; }
	}
	return false;
}

::hx::Val CustomState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"h5") ) { h5=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"h6") ) { h6=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"interp") ) { interp=inValue.Cast<  ::hscript::Interp >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"eventsEnter") ) { eventsEnter=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CustomState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { char1=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hmmbool") ) { hmmbool=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"language") ) { language=ioValue.Cast< ::String >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"statename") ) { statename=ioValue.Cast< ::String >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"hmmmmmmmmmmmmmmmm") ) { hmmmmmmmmmmmmmmmm=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void CustomState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("h5",cd,5a,00,00));
	outFields->push(HX_("h6",ce,5a,00,00));
	outFields->push(HX_("eventsEnter",3f,33,77,1d));
	outFields->push(HX_("interp",d4,79,86,9e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CustomState_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(CustomState_obj,h5),HX_("h5",cd,5a,00,00)},
	{::hx::fsBool,(int)offsetof(CustomState_obj,h6),HX_("h6",ce,5a,00,00)},
	{::hx::fsBool,(int)offsetof(CustomState_obj,eventsEnter),HX_("eventsEnter",3f,33,77,1d)},
	{::hx::fsObject /*  ::hscript::Interp */ ,(int)offsetof(CustomState_obj,interp),HX_("interp",d4,79,86,9e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CustomState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Character */ ,(void *) &CustomState_obj::char1,HX_("char1",9b,9c,b3,45)},
	{::hx::fsString,(void *) &CustomState_obj::hmmmmmmmmmmmmmmmm,HX_("hmmmmmmmmmmmmmmmm",68,eb,38,45)},
	{::hx::fsString,(void *) &CustomState_obj::language,HX_("language",58,80,11,7a)},
	{::hx::fsString,(void *) &CustomState_obj::statename,HX_("statename",dc,c4,cd,40)},
	{::hx::fsBool,(void *) &CustomState_obj::hmmbool,HX_("hmmbool",f2,51,67,7d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CustomState_obj_sMemberFields[] = {
	HX_("h5",cd,5a,00,00),
	HX_("h6",ce,5a,00,00),
	HX_("eventsEnter",3f,33,77,1d),
	HX_("interp",d4,79,86,9e),
	HX_("create",fc,66,0f,7c),
	HX_("newHSSprite",d0,19,fb,d4),
	HX_("newHSText",b8,71,e3,54),
	HX_("endHscript",d8,b1,3a,d2),
	HX_("hscriptApply",fb,67,df,a5),
	HX_("update",09,86,05,87),
	HX_("beatHit",7d,ea,04,74),
	HX_("stepHit",67,ae,41,81),
	::String(null()) };

static void CustomState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CustomState_obj::char1,"char1");
	HX_MARK_MEMBER_NAME(CustomState_obj::hmmmmmmmmmmmmmmmm,"hmmmmmmmmmmmmmmmm");
	HX_MARK_MEMBER_NAME(CustomState_obj::language,"language");
	HX_MARK_MEMBER_NAME(CustomState_obj::statename,"statename");
	HX_MARK_MEMBER_NAME(CustomState_obj::hmmbool,"hmmbool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CustomState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CustomState_obj::char1,"char1");
	HX_VISIT_MEMBER_NAME(CustomState_obj::hmmmmmmmmmmmmmmmm,"hmmmmmmmmmmmmmmmm");
	HX_VISIT_MEMBER_NAME(CustomState_obj::language,"language");
	HX_VISIT_MEMBER_NAME(CustomState_obj::statename,"statename");
	HX_VISIT_MEMBER_NAME(CustomState_obj::hmmbool,"hmmbool");
};

#endif

::hx::Class CustomState_obj::__mClass;

static ::String CustomState_obj_sStaticFields[] = {
	HX_("char1",9b,9c,b3,45),
	HX_("hmmmmmmmmmmmmmmmm",68,eb,38,45),
	HX_("language",58,80,11,7a),
	HX_("statename",dc,c4,cd,40),
	HX_("hmmbool",f2,51,67,7d),
	::String(null())
};

void CustomState_obj::__register()
{
	CustomState_obj _hx_dummy;
	CustomState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CustomState",80,74,7a,fd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CustomState_obj::__GetStatic;
	__mClass->mSetStaticField = &CustomState_obj::__SetStatic;
	__mClass->mMarkFunc = CustomState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CustomState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CustomState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CustomState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CustomState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CustomState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CustomState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CustomState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0622449ef633bdbb_35_boot)
HXDLIN(  35)		char1 = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_0622449ef633bdbb_37_boot)
HXDLIN(  37)		hmmmmmmmmmmmmmmmm = ::sys::io::File_obj::getContent(HX_("assets/data/language.txt",d3,ed,d9,4b));
            	}
{
            	HX_STACKFRAME(&_hx_pos_0622449ef633bdbb_38_boot)
HXDLIN(  38)		language = ::CustomState_obj::hmmmmmmmmmmmmmmmm;
            	}
}

