// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_LockWeeksOption
#include <LockWeeksOption.h>
#endif
#ifndef INCLUDED_Option
#include <Option.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b4c29dfb4fdbfec8_2004_new,"LockWeeksOption","new",0x229485fb,"LockWeeksOption.new","Options.hx",2004,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_b4c29dfb4fdbfec8_2018_press,"LockWeeksOption","press",0x8495e5de,"LockWeeksOption.press","Options.hx",2018,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_b4c29dfb4fdbfec8_2035_updateDisplay,"LockWeeksOption","updateDisplay",0x41787494,"LockWeeksOption.updateDisplay","Options.hx",2035,0x9d9a0240)

void LockWeeksOption_obj::__construct(::String desc){
            	HX_STACKFRAME(&_hx_pos_b4c29dfb4fdbfec8_2004_new)
HXLINE(2006)		this->confirm = false;
HXLINE(2010)		super::__construct();
HXLINE(2011)		if (::OptionsMenu_obj::isInPause) {
HXLINE(2012)			this->description = HX_("This option cannot be toggled in the pause menu.",b4,21,dd,c9);
            		}
            		else {
HXLINE(2014)			this->description = desc;
            		}
            	}

Dynamic LockWeeksOption_obj::__CreateEmpty() { return new LockWeeksOption_obj; }

void *LockWeeksOption_obj::_hx_vtable = 0;

Dynamic LockWeeksOption_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LockWeeksOption_obj > _hx_result = new LockWeeksOption_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool LockWeeksOption_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b06f001) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1b06f001;
	} else {
		return inClassId==(int)0x27a70eb9;
	}
}

bool LockWeeksOption_obj::press(){
            	HX_STACKFRAME(&_hx_pos_b4c29dfb4fdbfec8_2018_press)
HXLINE(2019)		if (::OptionsMenu_obj::isInPause) {
HXLINE(2020)			return false;
            		}
HXLINE(2021)		if (!(this->confirm)) {
HXLINE(2023)			this->confirm = true;
HXLINE(2024)			this->display = this->updateDisplay();
HXLINE(2025)			return true;
            		}
HXLINE(2027)		this->confirm = false;
HXLINE(2029)		this->display = this->updateDisplay();
HXLINE(2030)		return true;
            	}


::String LockWeeksOption_obj::updateDisplay(){
            	HX_STACKFRAME(&_hx_pos_b4c29dfb4fdbfec8_2035_updateDisplay)
HXDLIN(2035)		if (this->confirm) {
HXDLIN(2035)			return HX_("Confirm Story Reset",e4,1f,01,6b);
            		}
            		else {
HXDLIN(2035)			return HX_("Reset Story Progress",c9,28,76,d8);
            		}
HXDLIN(2035)		return null();
            	}



::hx::ObjectPtr< LockWeeksOption_obj > LockWeeksOption_obj::__new(::String desc) {
	::hx::ObjectPtr< LockWeeksOption_obj > __this = new LockWeeksOption_obj();
	__this->__construct(desc);
	return __this;
}

::hx::ObjectPtr< LockWeeksOption_obj > LockWeeksOption_obj::__alloc(::hx::Ctx *_hx_ctx,::String desc) {
	LockWeeksOption_obj *__this = (LockWeeksOption_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LockWeeksOption_obj), true, "LockWeeksOption"));
	*(void **)__this = LockWeeksOption_obj::_hx_vtable;
	__this->__construct(desc);
	return __this;
}

LockWeeksOption_obj::LockWeeksOption_obj()
{
}

::hx::Val LockWeeksOption_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"press") ) { return ::hx::Val( press_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"confirm") ) { return ::hx::Val( confirm ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateDisplay") ) { return ::hx::Val( updateDisplay_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LockWeeksOption_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"confirm") ) { confirm=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LockWeeksOption_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("confirm",00,9d,39,10));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LockWeeksOption_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(LockWeeksOption_obj,confirm),HX_("confirm",00,9d,39,10)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LockWeeksOption_obj_sStaticStorageInfo = 0;
#endif

static ::String LockWeeksOption_obj_sMemberFields[] = {
	HX_("confirm",00,9d,39,10),
	HX_("press",83,53,88,c8),
	HX_("updateDisplay",39,8f,b8,86),
	::String(null()) };

::hx::Class LockWeeksOption_obj::__mClass;

void LockWeeksOption_obj::__register()
{
	LockWeeksOption_obj _hx_dummy;
	LockWeeksOption_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("LockWeeksOption",89,6c,cd,f0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LockWeeksOption_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LockWeeksOption_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LockWeeksOption_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LockWeeksOption_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

