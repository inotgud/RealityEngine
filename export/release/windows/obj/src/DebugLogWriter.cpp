// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_DebugLogWriter
#include <DebugLogWriter.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_161373f69ee8fd30_338_new,"DebugLogWriter","new",0x033bdc96,"DebugLogWriter.new","Debug.hx",338,0x6a71a26b)
HX_LOCAL_STACK_FRAME(_hx_pos_161373f69ee8fd30_383_isActive,"DebugLogWriter","isActive",0xc261cd5a,"DebugLogWriter.isActive","Debug.hx",383,0x6a71a26b)
HX_LOCAL_STACK_FRAME(_hx_pos_161373f69ee8fd30_402_shouldLog,"DebugLogWriter","shouldLog",0x281a5ec7,"DebugLogWriter.shouldLog","Debug.hx",402,0x6a71a26b)
HX_LOCAL_STACK_FRAME(_hx_pos_161373f69ee8fd30_411_setLogLevel,"DebugLogWriter","setLogLevel",0x888a4e58,"DebugLogWriter.setLogLevel","Debug.hx",411,0x6a71a26b)
HX_LOCAL_STACK_FRAME(_hx_pos_161373f69ee8fd30_425_write,"DebugLogWriter","write",0x66857295,"DebugLogWriter.write","Debug.hx",425,0x6a71a26b)
HX_LOCAL_STACK_FRAME(_hx_pos_161373f69ee8fd30_451_printDebug,"DebugLogWriter","printDebug",0x47c72d70,"DebugLogWriter.printDebug","Debug.hx",451,0x6a71a26b)
HX_LOCAL_STACK_FRAME(_hx_pos_161373f69ee8fd30_340_boot,"DebugLogWriter","boot",0xc93e273c,"DebugLogWriter.boot","Debug.hx",340,0x6a71a26b)
HX_LOCAL_STACK_FRAME(_hx_pos_161373f69ee8fd30_341_boot,"DebugLogWriter","boot",0xc93e273c,"DebugLogWriter.boot","Debug.hx",341,0x6a71a26b)
static const ::String _hx_array_data_840899a4_8[] = {
	HX_("Reality ERROR",f8,20,e8,0f),HX_("Reality WARN",f6,26,40,16),HX_("Reality INFO",1e,fd,08,0d),HX_("Reality TRACE",b5,e3,dd,b2),
};

void DebugLogWriter_obj::__construct(::String logLevelParam){
            	HX_STACKFRAME(&_hx_pos_161373f69ee8fd30_338_new)
HXLINE( 350)		this->active = false;
HXLINE( 346)		this->startTime = ((Float)0);
HXLINE( 357)		this->logLevel = ::DebugLogWriter_obj::LOG_LEVELS->indexOf(logLevelParam,null());
HXLINE( 361)		::String logFilePath = ((((HX_("",00,00,00,00) + ::DebugLogWriter_obj::LOG_FOLDER) + HX_("/",2f,00,00,00)) + ::Sys_obj::time()) + HX_(".log",16,25,ba,1e));
HXLINE( 364)		if ((logFilePath.indexOf(HX_("/",2f,00,00,00),null()) != -1)) {
HXLINE( 366)			int lastIndex = logFilePath.lastIndexOf(HX_("/",2f,00,00,00),null());
HXLINE( 367)			::String logFolderPath = logFilePath.substr(0,lastIndex);
            		}
HXLINE( 378)		this->startTime = ::Sys_obj::time();
            	}

Dynamic DebugLogWriter_obj::__CreateEmpty() { return new DebugLogWriter_obj; }

void *DebugLogWriter_obj::_hx_vtable = 0;

Dynamic DebugLogWriter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DebugLogWriter_obj > _hx_result = new DebugLogWriter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool DebugLogWriter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x65f41c64;
}

bool DebugLogWriter_obj::isActive(){
            	HX_STACKFRAME(&_hx_pos_161373f69ee8fd30_383_isActive)
HXDLIN( 383)		return this->active;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DebugLogWriter_obj,isActive,return )

bool DebugLogWriter_obj::shouldLog(::String input){
            	HX_STACKFRAME(&_hx_pos_161373f69ee8fd30_402_shouldLog)
HXLINE( 403)		int levelIndex = ::DebugLogWriter_obj::LOG_LEVELS->indexOf(input,null());
HXLINE( 405)		if ((levelIndex == -1)) {
HXLINE( 406)			return false;
            		}
HXLINE( 407)		return (levelIndex <= this->logLevel);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DebugLogWriter_obj,shouldLog,return )

void DebugLogWriter_obj::setLogLevel(::String input){
            	HX_STACKFRAME(&_hx_pos_161373f69ee8fd30_411_setLogLevel)
HXLINE( 412)		int levelIndex = ::DebugLogWriter_obj::LOG_LEVELS->indexOf(input,null());
HXLINE( 414)		if ((levelIndex == -1)) {
HXLINE( 415)			return;
            		}
HXLINE( 417)		this->logLevel = levelIndex;
HXLINE( 418)		::flixel::FlxG_obj::save->data->__SetField(HX_("debugLogLevel",d3,6b,21,7d),this->logLevel,::hx::paccDynamic);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DebugLogWriter_obj,setLogLevel,(void))

void DebugLogWriter_obj::write(::cpp::VirtualArray input,::String __o_logLevel){
            		::String logLevel = __o_logLevel;
            		if (::hx::IsNull(__o_logLevel)) logLevel = HX_("Reality TRACE",b5,e3,dd,b2);
            	HX_STACKFRAME(&_hx_pos_161373f69ee8fd30_425_write)
HXLINE( 426)		Float ts;
HXDLIN( 426)		{
HXLINE( 426)			Float ts1 = ::Sys_obj::time();
HXDLIN( 426)			ts = (ts1 - this->startTime);
            		}
HXDLIN( 426)		::String ts2 = ::flixel::util::FlxStringUtil_obj::formatTime(ts,true);
HXLINE( 427)		::String msg = ((((HX_("",00,00,00,00) + ts2) + HX_(" [",3b,1c,00,00)) + ::StringTools_obj::rpad(logLevel,HX_(" ",20,00,00,00),5)) + HX_("] ",23,51,00,00));
HXDLIN( 427)		::String msg1 = (msg + input->join(HX_("",00,00,00,00)));
HXLINE( 430)		bool _hx_tmp;
HXDLIN( 430)		if (this->active) {
HXLINE( 430)			_hx_tmp = ::hx::IsNotNull( this->file );
            		}
            		else {
HXLINE( 430)			_hx_tmp = false;
            		}
HXDLIN( 430)		if (_hx_tmp) {
HXLINE( 432)			if (this->shouldLog(logLevel)) {
HXLINE( 434)				this->file->writeString(((HX_("",00,00,00,00) + msg1) + HX_("\n",0a,00,00,00)),null());
HXLINE( 435)				this->file->flush();
HXLINE( 436)				this->file->flush();
            			}
            		}
HXLINE( 442)		if (this->shouldLog(logLevel)) {
HXLINE( 444)			this->printDebug(msg1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DebugLogWriter_obj,write,(void))

void DebugLogWriter_obj::printDebug(::String msg){
            	HX_STACKFRAME(&_hx_pos_161373f69ee8fd30_451_printDebug)
HXDLIN( 451)		::Sys_obj::println(msg);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DebugLogWriter_obj,printDebug,(void))

::String DebugLogWriter_obj::LOG_FOLDER;

::Array< ::String > DebugLogWriter_obj::LOG_LEVELS;


::hx::ObjectPtr< DebugLogWriter_obj > DebugLogWriter_obj::__new(::String logLevelParam) {
	::hx::ObjectPtr< DebugLogWriter_obj > __this = new DebugLogWriter_obj();
	__this->__construct(logLevelParam);
	return __this;
}

::hx::ObjectPtr< DebugLogWriter_obj > DebugLogWriter_obj::__alloc(::hx::Ctx *_hx_ctx,::String logLevelParam) {
	DebugLogWriter_obj *__this = (DebugLogWriter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DebugLogWriter_obj), true, "DebugLogWriter"));
	*(void **)__this = DebugLogWriter_obj::_hx_vtable;
	__this->__construct(logLevelParam);
	return __this;
}

DebugLogWriter_obj::DebugLogWriter_obj()
{
}

void DebugLogWriter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DebugLogWriter);
	HX_MARK_MEMBER_NAME(startTime,"startTime");
	HX_MARK_MEMBER_NAME(logLevel,"logLevel");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(file,"file");
	HX_MARK_END_CLASS();
}

void DebugLogWriter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(startTime,"startTime");
	HX_VISIT_MEMBER_NAME(logLevel,"logLevel");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(file,"file");
}

::hx::Val DebugLogWriter_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"file") ) { return ::hx::Val( file ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"write") ) { return ::hx::Val( write_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return ::hx::Val( active ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"logLevel") ) { return ::hx::Val( logLevel ); }
		if (HX_FIELD_EQ(inName,"isActive") ) { return ::hx::Val( isActive_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"startTime") ) { return ::hx::Val( startTime ); }
		if (HX_FIELD_EQ(inName,"shouldLog") ) { return ::hx::Val( shouldLog_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"printDebug") ) { return ::hx::Val( printDebug_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setLogLevel") ) { return ::hx::Val( setLogLevel_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DebugLogWriter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"LOG_FOLDER") ) { outValue = ( LOG_FOLDER ); return true; }
		if (HX_FIELD_EQ(inName,"LOG_LEVELS") ) { outValue = ( LOG_LEVELS ); return true; }
	}
	return false;
}

::hx::Val DebugLogWriter_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"file") ) { file=inValue.Cast<  ::sys::io::FileOutput >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"logLevel") ) { logLevel=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DebugLogWriter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"LOG_FOLDER") ) { LOG_FOLDER=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"LOG_LEVELS") ) { LOG_LEVELS=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void DebugLogWriter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("startTime",8f,45,f0,05));
	outFields->push(HX_("logLevel",60,52,69,5d));
	outFields->push(HX_("active",c6,41,46,16));
	outFields->push(HX_("file",7c,ce,bb,43));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DebugLogWriter_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(DebugLogWriter_obj,startTime),HX_("startTime",8f,45,f0,05)},
	{::hx::fsInt,(int)offsetof(DebugLogWriter_obj,logLevel),HX_("logLevel",60,52,69,5d)},
	{::hx::fsBool,(int)offsetof(DebugLogWriter_obj,active),HX_("active",c6,41,46,16)},
	{::hx::fsObject /*  ::sys::io::FileOutput */ ,(int)offsetof(DebugLogWriter_obj,file),HX_("file",7c,ce,bb,43)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo DebugLogWriter_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &DebugLogWriter_obj::LOG_FOLDER,HX_("LOG_FOLDER",69,d8,22,26)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &DebugLogWriter_obj::LOG_LEVELS,HX_("LOG_LEVELS",2a,20,e2,d0)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String DebugLogWriter_obj_sMemberFields[] = {
	HX_("startTime",8f,45,f0,05),
	HX_("logLevel",60,52,69,5d),
	HX_("active",c6,41,46,16),
	HX_("file",7c,ce,bb,43),
	HX_("isActive",50,dd,af,6e),
	HX_("shouldLog",11,46,1a,40),
	HX_("setLogLevel",22,1c,ca,8d),
	HX_("write",df,6c,59,d0),
	HX_("printDebug",e6,a6,b1,2f),
	::String(null()) };

static void DebugLogWriter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DebugLogWriter_obj::LOG_FOLDER,"LOG_FOLDER");
	HX_MARK_MEMBER_NAME(DebugLogWriter_obj::LOG_LEVELS,"LOG_LEVELS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DebugLogWriter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DebugLogWriter_obj::LOG_FOLDER,"LOG_FOLDER");
	HX_VISIT_MEMBER_NAME(DebugLogWriter_obj::LOG_LEVELS,"LOG_LEVELS");
};

#endif

::hx::Class DebugLogWriter_obj::__mClass;

static ::String DebugLogWriter_obj_sStaticFields[] = {
	HX_("LOG_FOLDER",69,d8,22,26),
	HX_("LOG_LEVELS",2a,20,e2,d0),
	::String(null())
};

void DebugLogWriter_obj::__register()
{
	DebugLogWriter_obj _hx_dummy;
	DebugLogWriter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("DebugLogWriter",a4,99,08,84);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DebugLogWriter_obj::__GetStatic;
	__mClass->mSetStaticField = &DebugLogWriter_obj::__SetStatic;
	__mClass->mMarkFunc = DebugLogWriter_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(DebugLogWriter_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DebugLogWriter_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DebugLogWriter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DebugLogWriter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DebugLogWriter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DebugLogWriter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DebugLogWriter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_161373f69ee8fd30_340_boot)
HXDLIN( 340)		LOG_FOLDER = HX_("logs",6f,9f,b7,47);
            	}
{
            	HX_STACKFRAME(&_hx_pos_161373f69ee8fd30_341_boot)
HXDLIN( 341)		LOG_LEVELS = ::Array_obj< ::String >::fromData( _hx_array_data_840899a4_8,4);
            	}
}

