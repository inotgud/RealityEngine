// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_AttachedSprite
#include <AttachedSprite.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CreditsState
#include <CreditsState.h>
#endif
#ifndef INCLUDED_Debug
#include <Debug.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1bf4423a091ce525_25_new,"CreditsState","new",0xfd580e29,"CreditsState.new","CreditsState.hx",25,0xdb40a967)
HX_LOCAL_STACK_FRAME(_hx_pos_1bf4423a091ce525_41_create,"CreditsState","create",0x506b2cd3,"CreditsState.create","CreditsState.hx",41,0xdb40a967)
HX_LOCAL_STACK_FRAME(_hx_pos_1bf4423a091ce525_123_update,"CreditsState","update",0x5b614be0,"CreditsState.update","CreditsState.hx",123,0xdb40a967)
HX_LOCAL_STACK_FRAME(_hx_pos_1bf4423a091ce525_212_changeSelection,"CreditsState","changeSelection",0x5dc3e005,"CreditsState.changeSelection","CreditsState.hx",212,0xdb40a967)
HX_LOCAL_STACK_FRAME(_hx_pos_1bf4423a091ce525_30_boot,"CreditsState","boot",0xa7cd5649,"CreditsState.boot","CreditsState.hx",30,0xdb40a967)

void CreditsState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_1bf4423a091ce525_25_new)
HXLINE(  36)		this->jsonData = ::Paths_obj::loadCreditJSON(HX_("credits.json",fc,84,0d,1f),null());
HXLINE(  27)		this->iconArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  25)		super::__construct(TransIn,TransOut);
            	}

Dynamic CreditsState_obj::__CreateEmpty() { return new CreditsState_obj; }

void *CreditsState_obj::_hx_vtable = 0;

Dynamic CreditsState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CreditsState_obj > _hx_result = new CreditsState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CreditsState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x24631877) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x24631877;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void CreditsState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_1bf4423a091ce525_41_create)
HXLINE(  42)		 ::Dynamic jsonData = ::Paths_obj::loadCreditJSON(HX_("credits.json",fc,84,0d,1f),null());
HXLINE(  43)		if (::hx::IsNull( jsonData )) {
HXLINE(  45)			{
HXLINE(  45)				 ::Dynamic input = HX_("Failed to parse credits JSON!",84,04,6d,ab);
HXDLIN(  45)				if (::hx::IsNotNull( input )) {
HXLINE(  45)					::cpp::VirtualArray output = ::Debug_obj::formatOutput(input,::hx::SourceInfo(HX_("source/CreditsState.hx",f3,8c,3e,78),45,HX_("CreditsState",b7,c5,81,3b),HX_("create",fc,66,0f,7c)));
HXDLIN(  45)					::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_ERROR);
HXDLIN(  45)					::Debug_obj::writeToLogFile(output,HX_("ERROR",a8,03,18,f1));
            				}
            			}
HXLINE(  46)			return;
            		}
HXLINE(  49)		 ::Dynamic data = jsonData;
HXLINE(  61)		::DiscordClient_obj::changePresence(HX_("In the Menus",0a,c1,ad,c6),null(),null(),null(),null());
HXLINE(  64)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  64)		::String library = null();
HXDLIN(  64)		this->bg = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menuDesat",26,91,04,72)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  65)		this->bg->set_color(-16181);
HXLINE(  66)		this->add(this->bg);
HXLINE(  68)		this->descBox =  ::AttachedSprite_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  69)		this->descBox->makeGraphic(1,1,-16777216,null(),null());
HXLINE(  70)		this->descBox->xAdd = ( (Float)(-10) );
HXLINE(  71)		this->descBox->yAdd = ( (Float)(-10) );
HXLINE(  72)		this->descBox->alphaMult = ((Float)0.6);
HXLINE(  73)		this->descBox->set_alpha(((Float)0.6));
HXLINE(  74)		this->add(this->descBox);
HXLINE(  76)		this->descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,600,1180,HX_("",00,00,00,00),32,null());
HXLINE(  77)		this->descText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("muff.ttf",20,12,d0,fd)),32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  78)		this->descBox->sprTracker = this->descText;
HXLINE(  79)		this->descText->scrollFactor->set(null(),null());
HXLINE(  80)		this->descText->set_text(HX_("",00,00,00,00));
HXLINE(  81)		this->descText->set_borderSize(((Float)2.4));
HXLINE(  83)		this->grpCredits =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  84)		this->add(this->grpCredits);
HXLINE(  86)		{
HXLINE(  86)			int _g = 0;
HXDLIN(  86)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(data->__Field(HX_("credits",1a,0e,5e,13),::hx::paccDynamic)) );
HXDLIN(  86)			while((_g < _g1->length)){
HXLINE(  86)				 ::Dynamic credit = _g1->__get(_g);
HXDLIN(  86)				_g = (_g + 1);
HXLINE(  88)				 ::flixel::FlxSprite _hx_tmp = this->bg;
HXDLIN(  88)				_hx_tmp->set_color(( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(( (::String)((HX_("#",23,00,00,00) + credit->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic))) ))) ));
            			}
            		}
HXLINE(  91)		{
HXLINE(  91)			int _g2 = 0;
HXDLIN(  91)			::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(data->__Field(HX_("credits",1a,0e,5e,13),::hx::paccDynamic)) );
HXDLIN(  91)			while((_g2 < _g3->length)){
HXLINE(  91)				 ::Dynamic credit = _g3->__get(_g2);
HXDLIN(  91)				_g2 = (_g2 + 1);
HXLINE(  93)				 ::Alphabet creditText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(730) ),( (::String)(credit->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),true,false,null(),null(),null());
HXLINE(  94)				creditText->isMenuItem = true;
HXLINE(  95)				{
HXLINE(  95)					 ::Alphabet _g = creditText;
HXDLIN(  95)					_g->set_x((_g->x + 570));
            				}
HXLINE(  96)				this->grpCredits->add(creditText).StaticCast<  ::Alphabet >();
HXLINE(  98)				 ::AttachedSprite icon =  ::AttachedSprite_obj::__alloc( HX_CTX ,( (::String)((HX_("credits/",d5,48,ee,de) + credit->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic))) ),null(),null(),null());
HXLINE(  99)				icon->sprTracker = creditText;
HXLINE( 101)				this->iconArray->push(icon);
HXLINE( 102)				this->add(icon);
            			}
            		}
HXLINE( 104)		 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,950,(::flixel::FlxG_obj::height - 25),0,HX_("Press E to Credits Editor",60,2c,31,f5),12,null());
HXLINE( 105)		versionShit->scrollFactor->set(null(),null());
HXLINE( 106)		versionShit->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 109)		this->changeSelection(null());
HXLINE( 113)		 ::flixel::text::FlxText descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,600,1180,HX_("",00,00,00,00),32,null());
HXLINE( 114)		descText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("muff.ttf",20,12,d0,fd)),32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 115)		descText->scrollFactor->set(null(),null());
HXLINE( 116)		descText->set_borderSize(((Float)2.4));
HXLINE( 117)		this->descBox->sprTracker = descText;
HXLINE( 119)		this->super::create();
            	}


void CreditsState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_1bf4423a091ce525_123_update)
HXLINE( 124)		this->super::update(elapsed);
HXLINE( 126)		bool upP = ::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE( 127)		bool downP = ::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE( 128)		bool accepted = ::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE( 129)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 129)		bool space = _this->keyManager->checkStatusUnsafe(32,_this->status);
HXLINE( 131)		int shiftMult = 1;
HXLINE( 138)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 138)		if (_this1->keyManager->checkStatusUnsafe(16,_this1->status)) {
HXLINE( 139)			shiftMult = 3;
            		}
HXLINE( 141)		if (upP) {
HXLINE( 143)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 143)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 144)			this->changeSelection(-(shiftMult));
HXLINE( 145)			 ::Dynamic jsonData2 = ::Paths_obj::loadCreditJSON(HX_("credits.json",fc,84,0d,1f),null());
HXLINE( 146)			if (::hx::IsNull( jsonData2 )) {
HXLINE( 148)				{
HXLINE( 148)					 ::Dynamic input = HX_("Failed to parse credits JSON!",84,04,6d,ab);
HXDLIN( 148)					if (::hx::IsNotNull( input )) {
HXLINE( 148)						::cpp::VirtualArray output = ::Debug_obj::formatOutput(input,::hx::SourceInfo(HX_("source/CreditsState.hx",f3,8c,3e,78),148,HX_("CreditsState",b7,c5,81,3b),HX_("update",09,86,05,87)));
HXDLIN( 148)						::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_ERROR);
HXDLIN( 148)						::Debug_obj::writeToLogFile(output,HX_("ERROR",a8,03,18,f1));
            					}
            				}
HXLINE( 149)				return;
            			}
HXLINE( 152)			 ::Dynamic data2 = jsonData2;
HXLINE( 153)			{
HXLINE( 153)				int _g = 0;
HXDLIN( 153)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(data2->__Field(HX_("credits",1a,0e,5e,13),::hx::paccDynamic)) );
HXDLIN( 153)				while((_g < _g1->length)){
HXLINE( 153)					 ::Dynamic credit = _g1->__get(_g);
HXDLIN( 153)					_g = (_g + 1);
HXLINE( 155)					this->remove(this->bg,null());
HXLINE( 156)					 ::flixel::FlxSprite _hx_tmp = this->bg;
HXDLIN( 156)					_hx_tmp->set_color(( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(( (::String)((HX_("#",23,00,00,00) + credit->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic))) ))) ));
HXLINE( 157)					this->add(this->bg);
HXLINE( 158)					this->descText->set_text(( (::String)(credit->__Field(HX_("desc",51,5e,66,42),::hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE( 162)		if (downP) {
HXLINE( 164)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 164)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 165)			this->changeSelection(shiftMult);
HXLINE( 166)			 ::Dynamic jsonData2 = ::Paths_obj::loadCreditJSON(HX_("credits.json",fc,84,0d,1f),null());
HXLINE( 167)			if (::hx::IsNull( jsonData2 )) {
HXLINE( 169)				{
HXLINE( 169)					 ::Dynamic input = HX_("Failed to parse credits JSON!",84,04,6d,ab);
HXDLIN( 169)					if (::hx::IsNotNull( input )) {
HXLINE( 169)						::cpp::VirtualArray output = ::Debug_obj::formatOutput(input,::hx::SourceInfo(HX_("source/CreditsState.hx",f3,8c,3e,78),169,HX_("CreditsState",b7,c5,81,3b),HX_("update",09,86,05,87)));
HXDLIN( 169)						::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_ERROR);
HXDLIN( 169)						::Debug_obj::writeToLogFile(output,HX_("ERROR",a8,03,18,f1));
            					}
            				}
HXLINE( 170)				return;
            			}
HXLINE( 173)			 ::Dynamic data2 = jsonData2;
HXLINE( 174)			{
HXLINE( 174)				int _g = 0;
HXDLIN( 174)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(data2->__Field(HX_("credits",1a,0e,5e,13),::hx::paccDynamic)) );
HXDLIN( 174)				while((_g < _g1->length)){
HXLINE( 174)					 ::Dynamic credit = _g1->__get(_g);
HXDLIN( 174)					_g = (_g + 1);
HXLINE( 176)					this->remove(this->bg,null());
HXLINE( 177)					 ::flixel::FlxSprite _hx_tmp = this->bg;
HXDLIN( 177)					_hx_tmp->set_color(( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(( (::String)((HX_("#",23,00,00,00) + credit->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic))) ))) ));
HXLINE( 178)					this->add(this->bg);
HXLINE( 179)					this->descText->set_text(( (::String)(credit->__Field(HX_("desc",51,5e,66,42),::hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE( 184)		if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 186)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 186)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 187)			this->changeSelection(-(::flixel::FlxG_obj::mouse->wheel));
            		}
HXLINE( 190)		bool _hx_tmp = ::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE( 207)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 208)			 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 208)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 208)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


void CreditsState_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_1bf4423a091ce525_212_changeSelection)
HXLINE( 213)		 ::Dynamic jsonData2 = ::Paths_obj::loadCreditJSON(HX_("credits.json",fc,84,0d,1f),null());
HXLINE( 214)		if (::hx::IsNull( jsonData2 )) {
HXLINE( 216)			{
HXLINE( 216)				 ::Dynamic input = HX_("Failed to parse credits JSON!",84,04,6d,ab);
HXDLIN( 216)				if (::hx::IsNotNull( input )) {
HXLINE( 216)					::cpp::VirtualArray output = ::Debug_obj::formatOutput(input,::hx::SourceInfo(HX_("source/CreditsState.hx",f3,8c,3e,78),216,HX_("CreditsState",b7,c5,81,3b),HX_("changeSelection",bc,98,b5,48)));
HXDLIN( 216)					::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_ERROR);
HXDLIN( 216)					::Debug_obj::writeToLogFile(output,HX_("ERROR",a8,03,18,f1));
            				}
            			}
HXLINE( 217)			return;
            		}
HXLINE( 220)		 ::Dynamic data2 = jsonData2;
HXLINE( 222)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::CreditsState >();
HXDLIN( 222)		::CreditsState_obj::curSelected = (::CreditsState_obj::curSelected + change);
HXLINE( 224)		if ((::CreditsState_obj::curSelected < 0)) {
HXLINE( 225)			::CreditsState_obj::curSelected = (( (int)(data2->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) ) - 1);
            		}
HXLINE( 226)		if (::hx::IsGreaterEq( ::CreditsState_obj::curSelected,data2->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic) )) {
HXLINE( 227)			::CreditsState_obj::curSelected = 0;
            		}
HXLINE( 232)		int bullShit = 0;
HXLINE( 234)		{
HXLINE( 234)			int _g = 0;
HXDLIN( 234)			::Array< ::Dynamic> _g1 = this->grpCredits->members;
HXDLIN( 234)			while((_g < _g1->length)){
HXLINE( 234)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 234)				_g = (_g + 1);
HXLINE( 236)				item->targetY = ( (Float)((bullShit - ::CreditsState_obj::curSelected)) );
HXLINE( 237)				bullShit = (bullShit + 1);
HXLINE( 239)				item->set_alpha(((Float)0.6));
HXLINE( 242)				if ((item->targetY == 0)) {
HXLINE( 244)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CreditsState_obj,changeSelection,(void))

int CreditsState_obj::curSelected;


::hx::ObjectPtr< CreditsState_obj > CreditsState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< CreditsState_obj > __this = new CreditsState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< CreditsState_obj > CreditsState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	CreditsState_obj *__this = (CreditsState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CreditsState_obj), true, "CreditsState"));
	*(void **)__this = CreditsState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

CreditsState_obj::CreditsState_obj()
{
}

void CreditsState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CreditsState);
	HX_MARK_MEMBER_NAME(iconArray,"iconArray");
	HX_MARK_MEMBER_NAME(descBox,"descBox");
	HX_MARK_MEMBER_NAME(grpCredits,"grpCredits");
	HX_MARK_MEMBER_NAME(descText,"descText");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(jsonData,"jsonData");
	HX_MARK_MEMBER_NAME(colorTween,"colorTween");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CreditsState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(iconArray,"iconArray");
	HX_VISIT_MEMBER_NAME(descBox,"descBox");
	HX_VISIT_MEMBER_NAME(grpCredits,"grpCredits");
	HX_VISIT_MEMBER_NAME(descText,"descText");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(jsonData,"jsonData");
	HX_VISIT_MEMBER_NAME(colorTween,"colorTween");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CreditsState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"descBox") ) { return ::hx::Val( descBox ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { return ::hx::Val( descText ); }
		if (HX_FIELD_EQ(inName,"jsonData") ) { return ::hx::Val( jsonData ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"iconArray") ) { return ::hx::Val( iconArray ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpCredits") ) { return ::hx::Val( grpCredits ); }
		if (HX_FIELD_EQ(inName,"colorTween") ) { return ::hx::Val( colorTween ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CreditsState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val CreditsState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"descBox") ) { descBox=inValue.Cast<  ::AttachedSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { descText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jsonData") ) { jsonData=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"iconArray") ) { iconArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpCredits") ) { grpCredits=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colorTween") ) { colorTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CreditsState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void CreditsState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("iconArray",60,3f,53,5f));
	outFields->push(HX_("descBox",3a,20,25,19));
	outFields->push(HX_("grpCredits",b5,20,38,34));
	outFields->push(HX_("descText",9e,53,35,f3));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("jsonData",72,f8,f4,41));
	outFields->push(HX_("colorTween",08,c2,dc,3d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CreditsState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(CreditsState_obj,iconArray),HX_("iconArray",60,3f,53,5f)},
	{::hx::fsObject /*  ::AttachedSprite */ ,(int)offsetof(CreditsState_obj,descBox),HX_("descBox",3a,20,25,19)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(CreditsState_obj,grpCredits),HX_("grpCredits",b5,20,38,34)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CreditsState_obj,descText),HX_("descText",9e,53,35,f3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CreditsState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(CreditsState_obj,jsonData),HX_("jsonData",72,f8,f4,41)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(CreditsState_obj,colorTween),HX_("colorTween",08,c2,dc,3d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CreditsState_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &CreditsState_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CreditsState_obj_sMemberFields[] = {
	HX_("iconArray",60,3f,53,5f),
	HX_("descBox",3a,20,25,19),
	HX_("grpCredits",b5,20,38,34),
	HX_("descText",9e,53,35,f3),
	HX_("bg",c5,55,00,00),
	HX_("jsonData",72,f8,f4,41),
	HX_("colorTween",08,c2,dc,3d),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("changeSelection",bc,98,b5,48),
	::String(null()) };

static void CreditsState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CreditsState_obj::curSelected,"curSelected");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CreditsState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CreditsState_obj::curSelected,"curSelected");
};

#endif

::hx::Class CreditsState_obj::__mClass;

static ::String CreditsState_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	::String(null())
};

void CreditsState_obj::__register()
{
	CreditsState_obj _hx_dummy;
	CreditsState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CreditsState",b7,c5,81,3b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CreditsState_obj::__GetStatic;
	__mClass->mSetStaticField = &CreditsState_obj::__SetStatic;
	__mClass->mMarkFunc = CreditsState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CreditsState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CreditsState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CreditsState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CreditsState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CreditsState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CreditsState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CreditsState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1bf4423a091ce525_30_boot)
HXDLIN(  30)		curSelected = 0;
            	}
}

