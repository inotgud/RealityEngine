// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_StaticArrow
#include <StaticArrow.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d0007df346683c07_10_new,"StaticArrow","new",0x862b388d,"StaticArrow.new","StaticArrow.hx",10,0x50f5d783)
HX_LOCAL_STACK_FRAME(_hx_pos_d0007df346683c07_25_update,"StaticArrow","update",0xdd7db7fc,"StaticArrow.update","StaticArrow.hx",25,0x50f5d783)
HX_LOCAL_STACK_FRAME(_hx_pos_d0007df346683c07_39_playAnim,"StaticArrow","playAnim",0x3ae3bed8,"StaticArrow.playAnim","StaticArrow.hx",39,0x50f5d783)

void StaticArrow_obj::__construct(Float xx,Float yy){
            	HX_STACKFRAME(&_hx_pos_d0007df346683c07_10_new)
HXLINE(  14)		this->localAngle = ((Float)0);
HXLINE(  13)		this->modAngle = ((Float)0);
HXLINE(  12)		this->modifiedByLua = false;
HXLINE(  18)		this->set_x(xx);
HXLINE(  19)		this->set_y(yy);
HXLINE(  20)		super::__construct(this->x,this->y,null());
HXLINE(  21)		this->updateHitbox();
            	}

Dynamic StaticArrow_obj::__CreateEmpty() { return new StaticArrow_obj; }

void *StaticArrow_obj::_hx_vtable = 0;

Dynamic StaticArrow_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StaticArrow_obj > _hx_result = new StaticArrow_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool StaticArrow_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x005c77cb) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x005c77cb;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void StaticArrow_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d0007df346683c07_25_update)
HXLINE(  26)		if (!(this->modifiedByLua)) {
HXLINE(  27)			this->set_angle((this->localAngle + this->modAngle));
            		}
            		else {
HXLINE(  29)			this->set_angle(this->modAngle);
            		}
HXLINE(  30)		this->super::update(elapsed);
HXLINE(  32)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  32)		if (_this->keyManager->checkStatusUnsafe(51,_this->status)) {
HXLINE(  34)			 ::StaticArrow _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  34)			_hx_tmp->localAngle = (_hx_tmp->localAngle + 10);
            		}
            	}


void StaticArrow_obj::playAnim(::String AnimName, ::Dynamic __o_force){
            		 ::Dynamic force = __o_force;
            		if (::hx::IsNull(__o_force)) force = false;
            	HX_STACKFRAME(&_hx_pos_d0007df346683c07_39_playAnim)
HXLINE(  40)		this->animation->play(AnimName,force,null(),null());
HXLINE(  42)		if (!(::StringTools_obj::startsWith(AnimName,HX_("dirCon",f5,88,50,bc)))) {
HXLINE(  44)			this->localAngle = ( (Float)(0) );
            		}
HXLINE(  46)		this->updateHitbox();
HXLINE(  47)		this->offset->set((( (Float)(this->frameWidth) ) / ( (Float)(2) )),(( (Float)(this->frameHeight) ) / ( (Float)(2) )));
HXLINE(  49)		{
HXLINE(  49)			 ::flixel::math::FlxPoint _g = this->offset;
HXDLIN(  49)			_g->set_x((_g->x - ( (Float)(54) )));
            		}
HXLINE(  50)		{
HXLINE(  50)			 ::flixel::math::FlxPoint _g1 = this->offset;
HXDLIN(  50)			_g1->set_y((_g1->y - ( (Float)(56) )));
            		}
HXLINE(  52)		this->set_angle((this->localAngle + this->modAngle));
            	}


HX_DEFINE_DYNAMIC_FUNC2(StaticArrow_obj,playAnim,(void))


::hx::ObjectPtr< StaticArrow_obj > StaticArrow_obj::__new(Float xx,Float yy) {
	::hx::ObjectPtr< StaticArrow_obj > __this = new StaticArrow_obj();
	__this->__construct(xx,yy);
	return __this;
}

::hx::ObjectPtr< StaticArrow_obj > StaticArrow_obj::__alloc(::hx::Ctx *_hx_ctx,Float xx,Float yy) {
	StaticArrow_obj *__this = (StaticArrow_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StaticArrow_obj), true, "StaticArrow"));
	*(void **)__this = StaticArrow_obj::_hx_vtable;
	__this->__construct(xx,yy);
	return __this;
}

StaticArrow_obj::StaticArrow_obj()
{
}

::hx::Val StaticArrow_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modAngle") ) { return ::hx::Val( modAngle ); }
		if (HX_FIELD_EQ(inName,"playAnim") ) { return ::hx::Val( playAnim_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"localAngle") ) { return ::hx::Val( localAngle ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"modifiedByLua") ) { return ::hx::Val( modifiedByLua ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StaticArrow_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"modAngle") ) { modAngle=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"localAngle") ) { localAngle=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"modifiedByLua") ) { modifiedByLua=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StaticArrow_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("modifiedByLua",18,c8,92,a0));
	outFields->push(HX_("modAngle",b1,dd,08,14));
	outFields->push(HX_("localAngle",68,e6,d5,5a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StaticArrow_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(StaticArrow_obj,modifiedByLua),HX_("modifiedByLua",18,c8,92,a0)},
	{::hx::fsFloat,(int)offsetof(StaticArrow_obj,modAngle),HX_("modAngle",b1,dd,08,14)},
	{::hx::fsFloat,(int)offsetof(StaticArrow_obj,localAngle),HX_("localAngle",68,e6,d5,5a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StaticArrow_obj_sStaticStorageInfo = 0;
#endif

static ::String StaticArrow_obj_sMemberFields[] = {
	HX_("modifiedByLua",18,c8,92,a0),
	HX_("modAngle",b1,dd,08,14),
	HX_("localAngle",68,e6,d5,5a),
	HX_("update",09,86,05,87),
	HX_("playAnim",25,ea,84,30),
	::String(null()) };

::hx::Class StaticArrow_obj::__mClass;

void StaticArrow_obj::__register()
{
	StaticArrow_obj _hx_dummy;
	StaticArrow_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("StaticArrow",1b,ee,8e,1e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StaticArrow_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StaticArrow_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StaticArrow_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StaticArrow_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

