// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MenuCharacter
#include <MenuCharacter.h>
#endif
#ifndef INCLUDED_MenuItem
#include <MenuItem.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_engineEditors_WeekEditor
#include <engineEditors/WeekEditor.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f93022dfbe651d27_27_new,"StoryMenuState","new",0xec20accf,"StoryMenuState.new","StoryMenuState.hx",27,0xd8e12181)
HX_LOCAL_STACK_FRAME(_hx_pos_f93022dfbe651d27_68_create,"StoryMenuState","create",0xac12b9ed,"StoryMenuState.create","StoryMenuState.hx",68,0xd8e12181)
HX_LOCAL_STACK_FRAME(_hx_pos_f93022dfbe651d27_58_create,"StoryMenuState","create",0xac12b9ed,"StoryMenuState.create","StoryMenuState.hx",58,0xd8e12181)
HX_LOCAL_STACK_FRAME(_hx_pos_f93022dfbe651d27_263_update,"StoryMenuState","update",0xb708d8fa,"StoryMenuState.update","StoryMenuState.hx",263,0xd8e12181)
HX_LOCAL_STACK_FRAME(_hx_pos_f93022dfbe651d27_236_update,"StoryMenuState","update",0xb708d8fa,"StoryMenuState.update","StoryMenuState.hx",236,0xd8e12181)
HX_LOCAL_STACK_FRAME(_hx_pos_f93022dfbe651d27_398_selectWeek,"StoryMenuState","selectWeek",0x4a36f481,"StoryMenuState.selectWeek","StoryMenuState.hx",398,0xd8e12181)
HX_LOCAL_STACK_FRAME(_hx_pos_f93022dfbe651d27_369_selectWeek,"StoryMenuState","selectWeek",0x4a36f481,"StoryMenuState.selectWeek","StoryMenuState.hx",369,0xd8e12181)
static const ::String _hx_array_data_4260995d_10[] = {
	HX_("-easy",af,a6,14,2c),HX_("",00,00,00,00),HX_("-hard",98,49,10,2e),HX_("-insane",97,16,20,ed),
};
HX_LOCAL_STACK_FRAME(_hx_pos_f93022dfbe651d27_404_changeDifficulty,"StoryMenuState","changeDifficulty",0xd5c0d9fc,"StoryMenuState.changeDifficulty","StoryMenuState.hx",404,0xd8e12181)
HX_LOCAL_STACK_FRAME(_hx_pos_f93022dfbe651d27_445_loadFromWeekJson,"StoryMenuState","loadFromWeekJson",0x3b8b053d,"StoryMenuState.loadFromWeekJson","StoryMenuState.hx",445,0xd8e12181)
HX_LOCAL_STACK_FRAME(_hx_pos_f93022dfbe651d27_475_changeWeek,"StoryMenuState","changeWeek",0xb5e4b4f5,"StoryMenuState.changeWeek","StoryMenuState.hx",475,0xd8e12181)
HX_LOCAL_STACK_FRAME(_hx_pos_f93022dfbe651d27_515_updateText,"StoryMenuState","updateText",0x9254d6c7,"StoryMenuState.updateText","StoryMenuState.hx",515,0xd8e12181)
HX_LOCAL_STACK_FRAME(_hx_pos_f93022dfbe651d27_535_beatHit,"StoryMenuState","beatHit",0x46ea2a6c,"StoryMenuState.beatHit","StoryMenuState.hx",535,0xd8e12181)

void StoryMenuState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_f93022dfbe651d27_27_new)
HXLINE( 472)		this->intendedScore = 0;
HXLINE( 471)		this->lerpScore = 0;
HXLINE( 365)		this->stopspamming = false;
HXLINE( 364)		this->selectedWeek = false;
HXLINE( 363)		this->movedBack = false;
HXLINE(  43)		this->curWeek = 0;
HXLINE(  37)		::String library = null();
HXDLIN(  37)		this->weekNames = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/weekNames",cf,bb,4c,5f) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  35)		::String library1 = null();
HXDLIN(  35)		this->weekShm = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("custom/custom_weeks/weekList",b2,77,1f,8a) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library1));
HXLINE(  33)		this->curDifficulty = 1;
HXLINE(  29)		this->weeksArray = ::Array_obj< ::String >::__new(0);
HXLINE(  27)		super::__construct(TransIn,TransOut);
            	}

Dynamic StoryMenuState_obj::__CreateEmpty() { return new StoryMenuState_obj; }

void *StoryMenuState_obj::_hx_vtable = 0;

Dynamic StoryMenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StoryMenuState_obj > _hx_result = new StoryMenuState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool StoryMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x244c1c1d) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x244c1c1d;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void StoryMenuState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::Dynamic _hx_run(::String path){
            			HX_GC_STACKFRAME(&_hx_pos_f93022dfbe651d27_68_create)
HXLINE(  69)			::String rawJson = null();
HXLINE(  72)			if (::sys::FileSystem_obj::exists(path)) {
HXLINE(  73)				rawJson = ::sys::io::File_obj::getContent(path);
            			}
HXLINE(  80)			bool getJSON;
HXDLIN(  80)			if (::hx::IsNotNull( rawJson )) {
HXLINE(  80)				getJSON = (rawJson.length > 0);
            			}
            			else {
HXLINE(  80)				getJSON = false;
            			}
HXDLIN(  80)			if (getJSON) {
HXLINE(  81)				return  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,rawJson)->doParse();
            			}
HXLINE(  82)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_f93022dfbe651d27_58_create)
HXLINE(  60)		::PlayState_obj::currentSong = HX_("bruh",23,d0,1d,41);
HXLINE(  61)		::PlayState_obj::inDaPlay = false;
HXLINE(  64)		::DiscordClient_obj::changePresence(HX_("In the Story Mode Menu",27,6e,7d,6d),null(),null(),null(),null());
HXLINE(  67)		 ::Dynamic getJSON =  ::Dynamic(new _hx_Closure_0());
HXLINE(  85)		this->weeksArray = ::Array_obj< ::String >::__new(0);
HXLINE(  86)		{
HXLINE(  86)			int _g = 0;
HXDLIN(  86)			int _g1 = this->weekShm->length;
HXDLIN(  86)			while((_g < _g1)){
HXLINE(  86)				_g = (_g + 1);
HXDLIN(  86)				int i = (_g - 1);
HXLINE(  88)				this->weeksArray->push(this->weekShm->__get(i));
HXLINE(  89)				::String filethingy = ((HX_("custom/custom_weeks/",40,85,55,56) + this->weeksArray->__get(i)) + HX_(".json",56,f1,d6,c2));
HXLINE(  90)				 ::Dynamic swagshit = getJSON(filethingy);
            			}
            		}
HXLINE(  93)		this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(  94)		this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(  96)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(  98)			if (::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE( 100)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 100)				::String library = null();
HXDLIN( 100)				_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
HXLINE( 101)				::Conductor_obj::changeBPM(( (Float)(102) ),null());
            			}
            		}
HXLINE( 105)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE( 107)		this->scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,0,HX_("SCORE: 49324858",a3,72,f5,b2),36,null());
HXLINE( 108)		this->scoreText->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),32,null(),null(),null(),null(),null());
HXLINE( 110)		this->txtWeekTitle =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),10,0,HX_("",00,00,00,00),32,null());
HXLINE( 111)		this->txtWeekTitle->setFormat(HX_("PhantomMuff 1.5",0d,79,26,b7),32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 112)		this->txtWeekTitle->set_alpha(((Float)0.7));
HXLINE( 114)		 ::flixel::text::FlxText rankText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,10,null(),null(),null(),null());
HXLINE( 115)		rankText->set_text(HX_("RANK: GREAT",9b,ee,9f,70));
HXLINE( 116)		rankText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,null(),null(),null(),null(),null());
HXLINE( 117)		rankText->set_size(::Std_obj::_hx_int(( (Float)(this->scoreText->_defaultFormat->size) )));
HXLINE( 118)		{
HXLINE( 118)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 118)			if (::hx::IsNull( axes )) {
HXLINE( 118)				axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 118)			bool _hx_tmp;
HXDLIN( 118)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 118)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 118)					_hx_tmp = false;
            				}
            			}
HXDLIN( 118)			if (_hx_tmp) {
HXLINE( 118)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 118)				rankText->set_x(((( (Float)(_hx_tmp) ) - rankText->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 118)			bool _hx_tmp1;
HXDLIN( 118)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 118)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 118)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 118)			if (_hx_tmp1) {
HXLINE( 118)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 118)				rankText->set_y(((( (Float)(_hx_tmp) ) - rankText->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 120)		 ::flixel::graphics::frames::FlxAtlasFrames ui_tex = ::Paths_obj::getSparrowAtlas(HX_("campaign_menu_UI_assets",fd,f3,ba,6a),null(),null());
HXLINE( 121)		 ::flixel::FlxSprite yellowBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,56,null())->makeGraphic(::flixel::FlxG_obj::width,400,-405679,null(),null());
HXLINE( 123)		this->grpWeekText =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 124)		this->add(this->grpWeekText);
HXLINE( 126)		this->grpLocks =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 127)		this->add(this->grpLocks);
HXLINE( 129)		 ::flixel::FlxSprite blackBarThingie =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,56,-16777216,null(),null());
HXLINE( 130)		this->add(blackBarThingie);
HXLINE( 135)		{
HXLINE( 135)			int _g2 = 0;
HXDLIN( 135)			int _g3 = this->weekShm->length;
HXDLIN( 135)			while((_g2 < _g3)){
HXLINE( 135)				_g2 = (_g2 + 1);
HXDLIN( 135)				int i = (_g2 - 1);
HXLINE( 137)				Float yellowBG1 = yellowBG->y;
HXDLIN( 137)				 ::MenuItem weekThing =  ::MenuItem_obj::__alloc( HX_CTX ,( (Float)(0) ),((yellowBG1 + yellowBG->get_height()) + 10),i);
HXLINE( 138)				{
HXLINE( 138)					 ::MenuItem _g = weekThing;
HXDLIN( 138)					Float _g1 = _g->y;
HXDLIN( 138)					_g->set_y((_g1 + ((weekThing->get_height() + 20) * ( (Float)(i) ))));
            				}
HXLINE( 139)				weekThing->targetY = ( (Float)(i) );
HXLINE( 140)				this->grpWeekText->add(weekThing).StaticCast<  ::MenuItem >();
HXLINE( 142)				{
HXLINE( 142)					 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 142)					if (::hx::IsNull( axes )) {
HXLINE( 142)						axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            					}
HXDLIN( 142)					bool _hx_tmp;
HXDLIN( 142)					switch((int)(axes->_hx_getIndex())){
            						case (int)0: case (int)2: {
HXLINE( 142)							_hx_tmp = true;
            						}
            						break;
            						default:{
HXLINE( 142)							_hx_tmp = false;
            						}
            					}
HXDLIN( 142)					if (_hx_tmp) {
HXLINE( 142)						int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 142)						weekThing->set_x(((( (Float)(_hx_tmp) ) - weekThing->get_width()) / ( (Float)(2) )));
            					}
HXDLIN( 142)					bool _hx_tmp1;
HXDLIN( 142)					switch((int)(axes->_hx_getIndex())){
            						case (int)1: case (int)2: {
HXLINE( 142)							_hx_tmp1 = true;
            						}
            						break;
            						default:{
HXLINE( 142)							_hx_tmp1 = false;
            						}
            					}
HXDLIN( 142)					if (_hx_tmp1) {
HXLINE( 142)						int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 142)						weekThing->set_y(((( (Float)(_hx_tmp) ) - weekThing->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE( 143)				weekThing->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
            			}
            		}
HXLINE( 152)		this->difficultySelectors =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 153)		this->add(this->difficultySelectors);
HXLINE( 157)		Float _hx_tmp2 = Dynamic( this->grpWeekText->members->__get(0)).StaticCast<  ::MenuItem >()->x;
HXDLIN( 157)		Float _hx_tmp3 = ((_hx_tmp2 + Dynamic( this->grpWeekText->members->__get(0)).StaticCast<  ::MenuItem >()->get_width()) + 10);
HXDLIN( 157)		this->leftArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp3,(Dynamic( this->grpWeekText->members->__get(0)).StaticCast<  ::MenuItem >()->y + 10),null());
HXLINE( 158)		this->leftArrow->set_frames(ui_tex);
HXLINE( 159)		this->leftArrow->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("arrow left",be,05,f8,94),null(),null(),null(),null());
HXLINE( 160)		this->leftArrow->animation->addByPrefix(HX_("press",83,53,88,c8),HX_("arrow push left",f6,7a,62,0c),null(),null(),null(),null());
HXLINE( 161)		this->leftArrow->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 162)		this->leftArrow->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 163)		this->difficultySelectors->add(this->leftArrow).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 165)		this->sprDifficulty =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->leftArrow->x + 130),this->leftArrow->y,null());
HXLINE( 166)		this->sprDifficulty->set_frames(ui_tex);
HXLINE( 167)		this->sprDifficulty->animation->addByPrefix(HX_("easy",02,8c,0c,43),HX_("EASY",02,54,cd,2d),null(),null(),null(),null());
HXLINE( 168)		this->sprDifficulty->animation->addByPrefix(HX_("normal",27,72,69,30),HX_("NORMAL",27,1e,ec,e2),null(),null(),null(),null());
HXLINE( 169)		this->sprDifficulty->animation->addByPrefix(HX_("hard",eb,2e,08,45),HX_("HARD",eb,f6,c8,2f),null(),null(),null(),null());
HXLINE( 170)		this->sprDifficulty->animation->addByPrefix(HX_("insane",aa,36,da,9d),HX_("INSANE",aa,e2,5c,50),null(),null(),null(),null());
HXLINE( 171)		this->sprDifficulty->animation->play(HX_("easy",02,8c,0c,43),null(),null(),null());
HXLINE( 172)		this->sprDifficulty->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 173)		this->changeDifficulty(null());
HXLINE( 175)		this->difficultySelectors->add(this->sprDifficulty).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 177)		Float _hx_tmp4 = this->sprDifficulty->x;
HXDLIN( 177)		Float _hx_tmp5 = ((_hx_tmp4 + this->sprDifficulty->get_width()) + 50);
HXDLIN( 177)		this->rightArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp5,this->leftArrow->y,null());
HXLINE( 178)		this->rightArrow->set_frames(ui_tex);
HXLINE( 179)		this->rightArrow->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("arrow right",45,0e,1a,3b),null(),null(),null(),null());
HXLINE( 180)		this->rightArrow->animation->addByPrefix(HX_("press",83,53,88,c8),HX_("arrow push right",0d,2a,d6,40),24,false,null(),null());
HXLINE( 181)		this->rightArrow->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 182)		this->rightArrow->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 183)		this->difficultySelectors->add(this->rightArrow).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 187)		this->add(yellowBG);
HXLINE( 188)		Float eng = (( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.05));
HXDLIN( 188)		Float yellowBG1 = yellowBG->x;
HXDLIN( 188)		 ::flixel::FlxSprite eng1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,eng,((yellowBG1 + yellowBG->get_height()) + 100),null());
HXLINE( 189)		eng1->loadGraphic(HX_("assets/images/Menu_Tracks.png",58,97,d1,a1),null(),null(),null(),null(),null());
HXLINE( 190)		this->add(eng1);
HXLINE( 191)		Float _hx_tmp6 = (( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.05));
HXDLIN( 191)		Float yellowBG2 = yellowBG->x;
HXDLIN( 191)		this->txtTracklist =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp6,((yellowBG2 + yellowBG->get_height()) + 100),0,HX_("",00,00,00,00),32,null());
HXLINE( 192)		this->txtTracklist->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 193)		this->txtTracklist->set_font(rankText->_font);
HXLINE( 194)		this->txtTracklist->set_color(-1747081);
HXLINE( 195)		this->add(this->txtTracklist);
HXLINE( 197)		this->add(this->scoreText);
HXLINE( 198)		this->add(this->txtWeekTitle);
HXLINE( 200)		::String charJsonShit = ( (::String)(this->loadFromWeekJson(this->weeksArray->__get(this->curWeek))->__Field(HX_("character",a9,db,d1,41),::hx::paccDynamic)) );
HXLINE( 202)		if ((charJsonShit != HX_("",00,00,00,00))) {
HXLINE( 204)			this->remove(this->grpWeekCharacters,null());
HXLINE( 205)			this->grpWeekCharacters =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 206)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->grpWeekCharacters;
HXDLIN( 206)			_hx_tmp->add( ::MenuCharacter_obj::__alloc( HX_CTX ,450,25,((Float)0.7),true)).StaticCast<  ::MenuCharacter >();
HXLINE( 207)			Dynamic( this->grpWeekCharacters->members->__get(0)).StaticCast<  ::MenuCharacter >()->setCharacter(charJsonShit);
HXLINE( 208)			this->add(this->grpWeekCharacters);
            		}
            		else {
HXLINE( 212)			this->remove(this->grpWeekCharacters,null());
            		}
HXLINE( 214)		this->updateText();
HXLINE( 216)		int bullShit = 0;
HXLINE( 218)		{
HXLINE( 218)			int _g4 = 0;
HXDLIN( 218)			::Array< ::Dynamic> _g5 = this->grpWeekText->members;
HXDLIN( 218)			while((_g4 < _g5->length)){
HXLINE( 218)				 ::MenuItem item = _g5->__get(_g4).StaticCast<  ::MenuItem >();
HXDLIN( 218)				_g4 = (_g4 + 1);
HXLINE( 220)				item->targetY = ( (Float)((bullShit - this->curWeek)) );
HXLINE( 222)				item->set_alpha(((Float)0.6));
HXLINE( 223)				bullShit = (bullShit + 1);
            			}
            		}
HXLINE( 228)		this->changeWeek(null());
HXLINE( 230)		this->super::create();
            	}


void StoryMenuState_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::StoryMenuState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite lock){
            			HX_STACKFRAME(&_hx_pos_f93022dfbe651d27_263_update)
HXLINE( 263)			lock->set_y(Dynamic( _gthis->grpWeekText->members->__get(lock->ID)).StaticCast<  ::MenuItem >()->y);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_f93022dfbe651d27_236_update)
HXLINE( 235)		 ::StoryMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 238)		Float a = ( (Float)(this->lerpScore) );
HXDLIN( 238)		this->lerpScore = ::Math_obj::floor((a + (((Float)0.5) * (( (Float)(this->intendedScore) ) - a))));
HXLINE( 240)		if ((::MainMenuState_obj::language == HX_("en",69,58,00,00))) {
HXLINE( 242)			this->scoreText->set_text((HX_("WEEK SCORE:",74,77,1e,67) + this->lerpScore));
            		}
HXLINE( 244)		if ((::MainMenuState_obj::language == HX_("tr",7e,65,00,00))) {
HXLINE( 246)			this->scoreText->set_text((HX_("HAFTA SKORU:",46,f0,83,4d) + this->lerpScore));
            		}
HXLINE( 248)		if ((::MainMenuState_obj::language == HX_("ru",c3,63,00,00))) {
HXLINE( 250)			this->scoreText->set_text((HX_W(u"\u041e\u0426\u0415\u041d\u041a\u0410 \u041d\u0415\u0414\u0415\u041b\u0418:",912c,737e) + this->lerpScore));
            		}
HXLINE( 254)		 ::flixel::text::FlxText _hx_tmp = this->txtWeekTitle;
HXDLIN( 254)		_hx_tmp->set_text(this->weekNames->__get(this->curWeek).toUpperCase());
HXLINE( 255)		 ::flixel::text::FlxText _hx_tmp1 = this->txtWeekTitle;
HXDLIN( 255)		int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN( 255)		_hx_tmp1->set_x((( (Float)(_hx_tmp2) ) - (this->txtWeekTitle->get_width() + 10)));
HXLINE( 259)		this->difficultySelectors->set_visible(true);
HXLINE( 261)		this->grpLocks->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 266)		if (!(this->movedBack)) {
HXLINE( 268)			if (!(this->selectedWeek)) {
HXLINE( 270)				 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
HXLINE( 272)				if (::hx::IsNotNull( gamepad )) {
HXLINE( 274)					 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this = gamepad->justPressed;
HXDLIN( 274)					int id = 11;
HXDLIN( 274)					 ::flixel::input::gamepad::FlxGamepad _this1 = _this->gamepad;
HXDLIN( 274)					int Status = _this->status;
HXDLIN( 274)					bool _hx_tmp;
HXDLIN( 274)					switch((int)(id)){
            						case (int)-2: {
HXLINE( 274)							_hx_tmp = _this1->anyButton(Status);
            						}
            						break;
            						case (int)-1: {
HXLINE( 274)							_hx_tmp = !(_this1->anyButton(Status));
            						}
            						break;
            						default:{
HXLINE( 274)							int RawID = _this1->mapping->getRawID(id);
HXDLIN( 274)							 ::flixel::input::gamepad::FlxGamepadButton button = _this1->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 274)							if (::hx::IsNotNull( button )) {
HXLINE( 274)								_hx_tmp = button->hasState(Status);
            							}
            							else {
HXLINE( 274)								_hx_tmp = false;
            							}
            						}
            					}
HXDLIN( 274)					if (_hx_tmp) {
HXLINE( 276)						this->changeWeek(-1);
            					}
HXLINE( 278)					 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this2 = gamepad->justPressed;
HXDLIN( 278)					int id1 = 12;
HXDLIN( 278)					 ::flixel::input::gamepad::FlxGamepad _this3 = _this2->gamepad;
HXDLIN( 278)					int Status1 = _this2->status;
HXDLIN( 278)					bool _hx_tmp1;
HXDLIN( 278)					switch((int)(id1)){
            						case (int)-2: {
HXLINE( 278)							_hx_tmp1 = _this3->anyButton(Status1);
            						}
            						break;
            						case (int)-1: {
HXLINE( 278)							_hx_tmp1 = !(_this3->anyButton(Status1));
            						}
            						break;
            						default:{
HXLINE( 278)							int RawID = _this3->mapping->getRawID(id1);
HXDLIN( 278)							 ::flixel::input::gamepad::FlxGamepadButton button = _this3->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 278)							if (::hx::IsNotNull( button )) {
HXLINE( 278)								_hx_tmp1 = button->hasState(Status1);
            							}
            							else {
HXLINE( 278)								_hx_tmp1 = false;
            							}
            						}
            					}
HXDLIN( 278)					if (_hx_tmp1) {
HXLINE( 280)						this->changeWeek(1);
            					}
HXLINE( 283)					 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this4 = gamepad->pressed;
HXDLIN( 283)					int id2 = 14;
HXDLIN( 283)					 ::flixel::input::gamepad::FlxGamepad _this5 = _this4->gamepad;
HXDLIN( 283)					int Status2 = _this4->status;
HXDLIN( 283)					bool _hx_tmp2;
HXDLIN( 283)					switch((int)(id2)){
            						case (int)-2: {
HXLINE( 283)							_hx_tmp2 = _this5->anyButton(Status2);
            						}
            						break;
            						case (int)-1: {
HXLINE( 283)							_hx_tmp2 = !(_this5->anyButton(Status2));
            						}
            						break;
            						default:{
HXLINE( 283)							int RawID = _this5->mapping->getRawID(id2);
HXDLIN( 283)							 ::flixel::input::gamepad::FlxGamepadButton button = _this5->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 283)							if (::hx::IsNotNull( button )) {
HXLINE( 283)								_hx_tmp2 = button->hasState(Status2);
            							}
            							else {
HXLINE( 283)								_hx_tmp2 = false;
            							}
            						}
            					}
HXDLIN( 283)					if (_hx_tmp2) {
HXLINE( 284)						this->rightArrow->animation->play(HX_("press",83,53,88,c8),null(),null(),null());
            					}
            					else {
HXLINE( 286)						this->rightArrow->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            					}
HXLINE( 287)					 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this6 = gamepad->pressed;
HXDLIN( 287)					int id3 = 13;
HXDLIN( 287)					 ::flixel::input::gamepad::FlxGamepad _this7 = _this6->gamepad;
HXDLIN( 287)					int Status3 = _this6->status;
HXDLIN( 287)					bool _hx_tmp3;
HXDLIN( 287)					switch((int)(id3)){
            						case (int)-2: {
HXLINE( 287)							_hx_tmp3 = _this7->anyButton(Status3);
            						}
            						break;
            						case (int)-1: {
HXLINE( 287)							_hx_tmp3 = !(_this7->anyButton(Status3));
            						}
            						break;
            						default:{
HXLINE( 287)							int RawID = _this7->mapping->getRawID(id3);
HXDLIN( 287)							 ::flixel::input::gamepad::FlxGamepadButton button = _this7->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 287)							if (::hx::IsNotNull( button )) {
HXLINE( 287)								_hx_tmp3 = button->hasState(Status3);
            							}
            							else {
HXLINE( 287)								_hx_tmp3 = false;
            							}
            						}
            					}
HXDLIN( 287)					if (_hx_tmp3) {
HXLINE( 288)						this->leftArrow->animation->play(HX_("press",83,53,88,c8),null(),null(),null());
            					}
            					else {
HXLINE( 290)						this->leftArrow->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            					}
HXLINE( 292)					 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this8 = gamepad->justPressed;
HXDLIN( 292)					int id4 = 14;
HXDLIN( 292)					 ::flixel::input::gamepad::FlxGamepad _this9 = _this8->gamepad;
HXDLIN( 292)					int Status4 = _this8->status;
HXDLIN( 292)					bool _hx_tmp4;
HXDLIN( 292)					switch((int)(id4)){
            						case (int)-2: {
HXLINE( 292)							_hx_tmp4 = _this9->anyButton(Status4);
            						}
            						break;
            						case (int)-1: {
HXLINE( 292)							_hx_tmp4 = !(_this9->anyButton(Status4));
            						}
            						break;
            						default:{
HXLINE( 292)							int RawID = _this9->mapping->getRawID(id4);
HXDLIN( 292)							 ::flixel::input::gamepad::FlxGamepadButton button = _this9->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 292)							if (::hx::IsNotNull( button )) {
HXLINE( 292)								_hx_tmp4 = button->hasState(Status4);
            							}
            							else {
HXLINE( 292)								_hx_tmp4 = false;
            							}
            						}
            					}
HXDLIN( 292)					if (_hx_tmp4) {
HXLINE( 294)						this->changeDifficulty(1);
            					}
HXLINE( 296)					 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this10 = gamepad->justPressed;
HXDLIN( 296)					int id5 = 13;
HXDLIN( 296)					 ::flixel::input::gamepad::FlxGamepad _this11 = _this10->gamepad;
HXDLIN( 296)					int Status5 = _this10->status;
HXDLIN( 296)					bool _hx_tmp5;
HXDLIN( 296)					switch((int)(id5)){
            						case (int)-2: {
HXLINE( 296)							_hx_tmp5 = _this11->anyButton(Status5);
            						}
            						break;
            						case (int)-1: {
HXLINE( 296)							_hx_tmp5 = !(_this11->anyButton(Status5));
            						}
            						break;
            						default:{
HXLINE( 296)							int RawID = _this11->mapping->getRawID(id5);
HXDLIN( 296)							 ::flixel::input::gamepad::FlxGamepadButton button = _this11->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 296)							if (::hx::IsNotNull( button )) {
HXLINE( 296)								_hx_tmp5 = button->hasState(Status5);
            							}
            							else {
HXLINE( 296)								_hx_tmp5 = false;
            							}
            						}
            					}
HXDLIN( 296)					if (_hx_tmp5) {
HXLINE( 298)						this->changeDifficulty(-1);
            					}
            				}
HXLINE( 302)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 302)				if (_this->keyManager->checkStatusUnsafe(38,_this->status)) {
HXLINE( 304)					this->changeWeek(-1);
            				}
HXLINE( 307)				 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 307)				if (_this1->keyManager->checkStatusUnsafe(40,_this1->status)) {
HXLINE( 309)					this->changeWeek(1);
            				}
HXLINE( 312)				 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 312)				if (_this2->keyManager->checkStatusUnsafe(55,_this2->status)) {
HXLINE( 314)					 ::flixel::FlxState nextState =  ::engineEditors::WeekEditor_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 314)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 314)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE( 318)				 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 318)				if (_this3->keyManager->checkStatusUnsafe(69,_this3->status)) {
HXLINE( 320)					 ::flixel::FlxState nextState =  ::engineEditors::WeekEditor_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 320)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 320)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE( 323)				if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 325)					this->changeWeek(-(::flixel::FlxG_obj::mouse->wheel));
            				}
HXLINE( 328)				if (::PlayerSettings_obj::player1->controls->_right->check()) {
HXLINE( 329)					this->rightArrow->animation->play(HX_("press",83,53,88,c8),null(),null(),null());
            				}
            				else {
HXLINE( 331)					this->rightArrow->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            				}
HXLINE( 333)				if (::PlayerSettings_obj::player1->controls->_left->check()) {
HXLINE( 334)					this->leftArrow->animation->play(HX_("press",83,53,88,c8),null(),null(),null());
            				}
            				else {
HXLINE( 336)					this->leftArrow->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            				}
HXLINE( 338)				if (::PlayerSettings_obj::player1->controls->_rightP->check()) {
HXLINE( 339)					this->changeDifficulty(1);
            				}
HXLINE( 340)				if (::PlayerSettings_obj::player1->controls->_leftP->check()) {
HXLINE( 341)					this->changeDifficulty(-1);
            				}
            			}
HXLINE( 344)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 346)				this->selectWeek();
            			}
            		}
HXLINE( 350)		bool _hx_tmp3;
HXDLIN( 350)		bool _hx_tmp4;
HXDLIN( 350)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 350)			_hx_tmp4 = !(this->movedBack);
            		}
            		else {
HXLINE( 350)			_hx_tmp4 = false;
            		}
HXDLIN( 350)		if (_hx_tmp4) {
HXLINE( 350)			_hx_tmp3 = !(this->selectedWeek);
            		}
            		else {
HXLINE( 350)			_hx_tmp3 = false;
            		}
HXDLIN( 350)		if (_hx_tmp3) {
HXLINE( 352)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 352)			_hx_tmp->play(::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE( 353)			this->movedBack = true;
HXLINE( 354)			{
HXLINE( 354)				 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 354)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 354)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE( 357)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 358)			::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
            		}
HXLINE( 360)		this->super::update(elapsed);
            	}


void StoryMenuState_obj::selectWeek(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_f93022dfbe651d27_398_selectWeek)
HXLINE( 398)			 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),true);
HXDLIN( 398)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 398)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_f93022dfbe651d27_369_selectWeek)
HXLINE( 370)		if ((this->stopspamming == false)) {
HXLINE( 372)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 372)			_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE( 374)			Dynamic( this->grpWeekText->members->__get(this->curWeek)).StaticCast<  ::MenuItem >()->startFlashing();
HXLINE( 375)			this->stopspamming = true;
            		}
HXLINE( 378)		::PlayState_obj::storyPlaylist = ( (::cpp::VirtualArray)(this->loadFromWeekJson(this->weeksArray->__get(this->curWeek))->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic)) );
HXLINE( 379)		::PlayState_obj::isStoryMode = true;
HXLINE( 380)		this->selectedWeek = true;
HXLINE( 381)		::PlayState_obj::songMultiplier = ( (Float)(1) );
HXLINE( 383)		::PlayState_obj::isSM = false;
HXLINE( 385)		::PlayState_obj::storyDifficulty = this->curDifficulty;
HXLINE( 387)		::String diff = ::Array_obj< ::String >::fromData( _hx_array_data_4260995d_10,4)->__get(::PlayState_obj::storyDifficulty);
HXLINE( 388)		::PlayState_obj::sicks = 0;
HXLINE( 389)		::PlayState_obj::bads = 0;
HXLINE( 390)		::PlayState_obj::shits = 0;
HXLINE( 391)		::PlayState_obj::goods = 0;
HXLINE( 392)		::PlayState_obj::campaignMisses = 0;
HXLINE( 393)		::PlayState_obj::SONG = ::Song_obj::conversionChecks(::Song_obj::loadFromJson(( (::String)(::PlayState_obj::storyPlaylist->__get(0)) ),diff));
HXLINE( 394)		::PlayState_obj::storyWeek = this->curWeek;
HXLINE( 395)		::PlayState_obj::campaignScore = 0;
HXLINE( 396)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0()),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(StoryMenuState_obj,selectWeek,(void))

void StoryMenuState_obj::changeDifficulty(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_f93022dfbe651d27_404_changeDifficulty)
HXLINE( 405)		 ::StoryMenuState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 405)		_hx_tmp->curDifficulty = (_hx_tmp->curDifficulty + change);
HXLINE( 407)		if ((this->curDifficulty < 0)) {
HXLINE( 408)			this->curDifficulty = 3;
            		}
HXLINE( 409)		if ((this->curDifficulty > 3)) {
HXLINE( 410)			this->curDifficulty = 0;
            		}
HXLINE( 412)		this->sprDifficulty->offset->set_x(( (Float)(0) ));
HXLINE( 414)		switch((int)(this->curDifficulty)){
            			case (int)0: {
HXLINE( 417)				this->sprDifficulty->animation->play(HX_("easy",02,8c,0c,43),null(),null(),null());
HXLINE( 418)				this->sprDifficulty->offset->set_x(( (Float)(20) ));
            			}
            			break;
            			case (int)1: {
HXLINE( 420)				this->sprDifficulty->animation->play(HX_("normal",27,72,69,30),null(),null(),null());
HXLINE( 421)				this->sprDifficulty->offset->set_x(( (Float)(70) ));
            			}
            			break;
            			case (int)2: {
HXLINE( 423)				this->sprDifficulty->animation->play(HX_("hard",eb,2e,08,45),null(),null(),null());
HXLINE( 424)				this->sprDifficulty->offset->set_x(( (Float)(20) ));
            			}
            			break;
            			case (int)3: {
HXLINE( 426)				this->sprDifficulty->animation->play(HX_("insane",aa,36,da,9d),null(),null(),null());
HXLINE( 427)				this->sprDifficulty->offset->set_x(( (Float)(70) ));
            			}
            			break;
            		}
HXLINE( 430)		this->sprDifficulty->set_alpha(( (Float)(0) ));
HXLINE( 433)		this->sprDifficulty->set_y((this->leftArrow->y - ( (Float)(15) )));
HXLINE( 434)		this->intendedScore = ::Highscore_obj::getWeekScore(this->curWeek,this->curDifficulty);
HXLINE( 437)		this->intendedScore = ::Highscore_obj::getWeekScore(this->curWeek,this->curDifficulty);
HXLINE( 440)		::flixel::tweens::FlxTween_obj::tween(this->sprDifficulty, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),(this->leftArrow->y + 15))
            			->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.07),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(StoryMenuState_obj,changeDifficulty,(void))

 ::Dynamic StoryMenuState_obj::loadFromWeekJson(::String jsonInput){
            	HX_GC_STACKFRAME(&_hx_pos_f93022dfbe651d27_445_loadFromWeekJson)
HXLINE( 446)		::String rawJson = null();
HXLINE( 449)		if (::hx::IsNull( rawJson )) {
HXLINE( 452)			::String library = null();
HXDLIN( 452)			rawJson = ::StringTools_obj::trim(::sys::io::File_obj::getContent(::Paths_obj::getPath(((HX_("",00,00,00,00) + (HX_("custom/custom_weeks/",40,85,55,56) + jsonInput)) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library)));
            		}
HXLINE( 461)		while(!(::StringTools_obj::endsWith(rawJson,HX_("}",7d,00,00,00)))){
HXLINE( 463)			rawJson = rawJson.substr(0,(rawJson.length - 1));
            		}
HXLINE( 467)		 ::Dynamic swagShit =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,rawJson)->doParse();
HXLINE( 468)		return swagShit;
            	}


HX_DEFINE_DYNAMIC_FUNC1(StoryMenuState_obj,loadFromWeekJson,return )

void StoryMenuState_obj::changeWeek(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_f93022dfbe651d27_475_changeWeek)
HXLINE( 476)		 ::StoryMenuState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 476)		_hx_tmp->curWeek = (_hx_tmp->curWeek + change);
HXLINE( 478)		if ((this->curWeek >= this->weeksArray->length)) {
HXLINE( 479)			this->curWeek = 0;
            		}
HXLINE( 480)		if ((this->curWeek < 0)) {
HXLINE( 481)			this->curWeek = (this->weeksArray->length - 1);
            		}
HXLINE( 483)		int bullShit = 0;
HXLINE( 485)		{
HXLINE( 485)			int _g = 0;
HXDLIN( 485)			::Array< ::Dynamic> _g1 = this->grpWeekText->members;
HXDLIN( 485)			while((_g < _g1->length)){
HXLINE( 485)				 ::MenuItem item = _g1->__get(_g).StaticCast<  ::MenuItem >();
HXDLIN( 485)				_g = (_g + 1);
HXLINE( 487)				item->targetY = ( (Float)((bullShit - this->curWeek)) );
HXLINE( 488)				if ((item->targetY == 0)) {
HXLINE( 489)					item->set_alpha(( (Float)(1) ));
            				}
            				else {
HXLINE( 491)					item->set_alpha(((Float)0.6));
            				}
HXLINE( 492)				bullShit = (bullShit + 1);
            			}
            		}
HXLINE( 494)		::String charJsonShit = ( (::String)(this->loadFromWeekJson(this->weeksArray->__get(this->curWeek))->__Field(HX_("character",a9,db,d1,41),::hx::paccDynamic)) );
HXLINE( 496)		if ((charJsonShit != HX_("",00,00,00,00))) {
HXLINE( 498)			this->remove(this->grpWeekCharacters,null());
HXLINE( 499)			this->grpWeekCharacters =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 500)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->grpWeekCharacters;
HXDLIN( 500)			_hx_tmp->add( ::MenuCharacter_obj::__alloc( HX_CTX ,450,25,((Float)0.7),true)).StaticCast<  ::MenuCharacter >();
HXLINE( 501)			Dynamic( this->grpWeekCharacters->members->__get(0)).StaticCast<  ::MenuCharacter >()->setCharacter(charJsonShit);
HXLINE( 502)			this->add(this->grpWeekCharacters);
            		}
            		else {
HXLINE( 506)			this->remove(this->grpWeekCharacters,null());
            		}
HXLINE( 509)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 509)		_hx_tmp1->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 511)		this->updateText();
            	}


HX_DEFINE_DYNAMIC_FUNC1(StoryMenuState_obj,changeWeek,(void))

void StoryMenuState_obj::updateText(){
            	HX_STACKFRAME(&_hx_pos_f93022dfbe651d27_515_updateText)
HXLINE( 516)		this->txtTracklist->set_text(HX_("\n",0a,00,00,00));
HXLINE( 517)		::cpp::VirtualArray stringThing = ( (::cpp::VirtualArray)(this->loadFromWeekJson(this->weeksArray->__get(this->curWeek))->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic)) );
HXLINE( 519)		{
HXLINE( 519)			int _g = 0;
HXDLIN( 519)			while((_g < stringThing->get_length())){
HXLINE( 519)				 ::Dynamic i = stringThing->__get(_g);
HXDLIN( 519)				_g = (_g + 1);
HXLINE( 520)				{
HXLINE( 520)					 ::flixel::text::FlxText _g1 = this->txtTracklist;
HXDLIN( 520)					::String _g2 = _g1->text;
HXDLIN( 520)					_g1->set_text((_g2 + (HX_("\n",0a,00,00,00) + ::Std_obj::string(i))));
            				}
            			}
            		}
HXLINE( 522)		 ::flixel::text::FlxText _hx_tmp = this->txtTracklist;
HXDLIN( 522)		_hx_tmp->set_text(this->txtTracklist->text.toUpperCase());
HXLINE( 524)		{
HXLINE( 524)			 ::flixel::text::FlxText _this = this->txtTracklist;
HXDLIN( 524)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 524)			if (::hx::IsNull( axes )) {
HXLINE( 524)				axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 524)			bool _hx_tmp1;
HXDLIN( 524)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 524)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 524)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 524)			if (_hx_tmp1) {
HXLINE( 524)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 524)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 524)			bool _hx_tmp2;
HXDLIN( 524)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 524)					_hx_tmp2 = true;
            				}
            				break;
            				default:{
HXLINE( 524)					_hx_tmp2 = false;
            				}
            			}
HXDLIN( 524)			if (_hx_tmp2) {
HXLINE( 524)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 524)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 525)		{
HXLINE( 525)			 ::flixel::text::FlxText _g1 = this->txtTracklist;
HXDLIN( 525)			_g1->set_x((_g1->x - (( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.35))));
            		}
HXLINE( 527)		{
HXLINE( 527)			 ::flixel::text::FlxText _g2 = this->txtTracklist;
HXDLIN( 527)			_g2->set_text((_g2->text + HX_("\n",0a,00,00,00)));
            		}
HXLINE( 530)		this->intendedScore = ::Highscore_obj::getWeekScore(this->curWeek,this->curDifficulty);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StoryMenuState_obj,updateText,(void))

void StoryMenuState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_f93022dfbe651d27_535_beatHit)
HXLINE( 536)		this->super::beatHit();
HXLINE( 538)		if ((::hx::Mod(this->curBeat,2) == 0)) {
HXLINE( 540)			Dynamic( this->grpWeekCharacters->members->__get(0)).StaticCast<  ::MenuCharacter >()->bopHead(null());
            		}
            	}



::hx::ObjectPtr< StoryMenuState_obj > StoryMenuState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< StoryMenuState_obj > __this = new StoryMenuState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< StoryMenuState_obj > StoryMenuState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	StoryMenuState_obj *__this = (StoryMenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StoryMenuState_obj), true, "StoryMenuState"));
	*(void **)__this = StoryMenuState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

StoryMenuState_obj::StoryMenuState_obj()
{
}

void StoryMenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StoryMenuState);
	HX_MARK_MEMBER_NAME(weeksArray,"weeksArray");
	HX_MARK_MEMBER_NAME(scoreText,"scoreText");
	HX_MARK_MEMBER_NAME(curDifficulty,"curDifficulty");
	HX_MARK_MEMBER_NAME(weekShm,"weekShm");
	HX_MARK_MEMBER_NAME(weekNames,"weekNames");
	HX_MARK_MEMBER_NAME(txtWeekTitle,"txtWeekTitle");
	HX_MARK_MEMBER_NAME(grpWeekCharacters,"grpWeekCharacters");
	HX_MARK_MEMBER_NAME(curWeek,"curWeek");
	HX_MARK_MEMBER_NAME(txtTracklist,"txtTracklist");
	HX_MARK_MEMBER_NAME(grpWeekText,"grpWeekText");
	HX_MARK_MEMBER_NAME(grpLocks,"grpLocks");
	HX_MARK_MEMBER_NAME(gradientBG,"gradientBG");
	HX_MARK_MEMBER_NAME(difficultySelectors,"difficultySelectors");
	HX_MARK_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_MARK_MEMBER_NAME(leftArrow,"leftArrow");
	HX_MARK_MEMBER_NAME(rightArrow,"rightArrow");
	HX_MARK_MEMBER_NAME(movedBack,"movedBack");
	HX_MARK_MEMBER_NAME(selectedWeek,"selectedWeek");
	HX_MARK_MEMBER_NAME(stopspamming,"stopspamming");
	HX_MARK_MEMBER_NAME(lerpScore,"lerpScore");
	HX_MARK_MEMBER_NAME(intendedScore,"intendedScore");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StoryMenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(weeksArray,"weeksArray");
	HX_VISIT_MEMBER_NAME(scoreText,"scoreText");
	HX_VISIT_MEMBER_NAME(curDifficulty,"curDifficulty");
	HX_VISIT_MEMBER_NAME(weekShm,"weekShm");
	HX_VISIT_MEMBER_NAME(weekNames,"weekNames");
	HX_VISIT_MEMBER_NAME(txtWeekTitle,"txtWeekTitle");
	HX_VISIT_MEMBER_NAME(grpWeekCharacters,"grpWeekCharacters");
	HX_VISIT_MEMBER_NAME(curWeek,"curWeek");
	HX_VISIT_MEMBER_NAME(txtTracklist,"txtTracklist");
	HX_VISIT_MEMBER_NAME(grpWeekText,"grpWeekText");
	HX_VISIT_MEMBER_NAME(grpLocks,"grpLocks");
	HX_VISIT_MEMBER_NAME(gradientBG,"gradientBG");
	HX_VISIT_MEMBER_NAME(difficultySelectors,"difficultySelectors");
	HX_VISIT_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_VISIT_MEMBER_NAME(leftArrow,"leftArrow");
	HX_VISIT_MEMBER_NAME(rightArrow,"rightArrow");
	HX_VISIT_MEMBER_NAME(movedBack,"movedBack");
	HX_VISIT_MEMBER_NAME(selectedWeek,"selectedWeek");
	HX_VISIT_MEMBER_NAME(stopspamming,"stopspamming");
	HX_VISIT_MEMBER_NAME(lerpScore,"lerpScore");
	HX_VISIT_MEMBER_NAME(intendedScore,"intendedScore");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val StoryMenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"weekShm") ) { return ::hx::Val( weekShm ); }
		if (HX_FIELD_EQ(inName,"curWeek") ) { return ::hx::Val( curWeek ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"grpLocks") ) { return ::hx::Val( grpLocks ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { return ::hx::Val( scoreText ); }
		if (HX_FIELD_EQ(inName,"weekNames") ) { return ::hx::Val( weekNames ); }
		if (HX_FIELD_EQ(inName,"leftArrow") ) { return ::hx::Val( leftArrow ); }
		if (HX_FIELD_EQ(inName,"movedBack") ) { return ::hx::Val( movedBack ); }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { return ::hx::Val( lerpScore ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"weeksArray") ) { return ::hx::Val( weeksArray ); }
		if (HX_FIELD_EQ(inName,"gradientBG") ) { return ::hx::Val( gradientBG ); }
		if (HX_FIELD_EQ(inName,"rightArrow") ) { return ::hx::Val( rightArrow ); }
		if (HX_FIELD_EQ(inName,"selectWeek") ) { return ::hx::Val( selectWeek_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeWeek") ) { return ::hx::Val( changeWeek_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateText") ) { return ::hx::Val( updateText_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"grpWeekText") ) { return ::hx::Val( grpWeekText ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"txtWeekTitle") ) { return ::hx::Val( txtWeekTitle ); }
		if (HX_FIELD_EQ(inName,"txtTracklist") ) { return ::hx::Val( txtTracklist ); }
		if (HX_FIELD_EQ(inName,"selectedWeek") ) { return ::hx::Val( selectedWeek ); }
		if (HX_FIELD_EQ(inName,"stopspamming") ) { return ::hx::Val( stopspamming ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { return ::hx::Val( curDifficulty ); }
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { return ::hx::Val( sprDifficulty ); }
		if (HX_FIELD_EQ(inName,"intendedScore") ) { return ::hx::Val( intendedScore ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"changeDifficulty") ) { return ::hx::Val( changeDifficulty_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadFromWeekJson") ) { return ::hx::Val( loadFromWeekJson_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"grpWeekCharacters") ) { return ::hx::Val( grpWeekCharacters ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"difficultySelectors") ) { return ::hx::Val( difficultySelectors ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StoryMenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"weekShm") ) { weekShm=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curWeek") ) { curWeek=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"grpLocks") ) { grpLocks=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weekNames") ) { weekNames=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftArrow") ) { leftArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"movedBack") ) { movedBack=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { lerpScore=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"weeksArray") ) { weeksArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gradientBG") ) { gradientBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightArrow") ) { rightArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"grpWeekText") ) { grpWeekText=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"txtWeekTitle") ) { txtWeekTitle=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"txtTracklist") ) { txtTracklist=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedWeek") ) { selectedWeek=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stopspamming") ) { stopspamming=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { curDifficulty=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { sprDifficulty=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intendedScore") ) { intendedScore=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"grpWeekCharacters") ) { grpWeekCharacters=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"difficultySelectors") ) { difficultySelectors=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StoryMenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("weeksArray",1a,2b,03,42));
	outFields->push(HX_("scoreText",1f,7d,bd,dc));
	outFields->push(HX_("curDifficulty",db,b7,38,a7));
	outFields->push(HX_("weekShm",a4,66,f7,24));
	outFields->push(HX_("weekNames",34,4b,f8,f8));
	outFields->push(HX_("txtWeekTitle",74,f4,3f,69));
	outFields->push(HX_("grpWeekCharacters",83,fc,76,59));
	outFields->push(HX_("curWeek",94,d1,0a,ba));
	outFields->push(HX_("txtTracklist",d9,6f,f5,3e));
	outFields->push(HX_("grpWeekText",c6,97,1f,d2));
	outFields->push(HX_("grpLocks",03,78,f1,5b));
	outFields->push(HX_("gradientBG",b5,cf,f5,a3));
	outFields->push(HX_("difficultySelectors",b9,fa,53,88));
	outFields->push(HX_("sprDifficulty",d0,6b,83,ba));
	outFields->push(HX_("leftArrow",42,68,6f,3a));
	outFields->push(HX_("rightArrow",4d,60,54,28));
	outFields->push(HX_("movedBack",fa,67,95,ea));
	outFields->push(HX_("selectedWeek",ef,7f,8f,df));
	outFields->push(HX_("stopspamming",e0,83,63,4e));
	outFields->push(HX_("lerpScore",5b,81,4d,e7));
	outFields->push(HX_("intendedScore",a7,fd,7c,89));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StoryMenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(StoryMenuState_obj,weeksArray),HX_("weeksArray",1a,2b,03,42)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(StoryMenuState_obj,scoreText),HX_("scoreText",1f,7d,bd,dc)},
	{::hx::fsInt,(int)offsetof(StoryMenuState_obj,curDifficulty),HX_("curDifficulty",db,b7,38,a7)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(StoryMenuState_obj,weekShm),HX_("weekShm",a4,66,f7,24)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(StoryMenuState_obj,weekNames),HX_("weekNames",34,4b,f8,f8)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(StoryMenuState_obj,txtWeekTitle),HX_("txtWeekTitle",74,f4,3f,69)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(StoryMenuState_obj,grpWeekCharacters),HX_("grpWeekCharacters",83,fc,76,59)},
	{::hx::fsInt,(int)offsetof(StoryMenuState_obj,curWeek),HX_("curWeek",94,d1,0a,ba)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(StoryMenuState_obj,txtTracklist),HX_("txtTracklist",d9,6f,f5,3e)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(StoryMenuState_obj,grpWeekText),HX_("grpWeekText",c6,97,1f,d2)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(StoryMenuState_obj,grpLocks),HX_("grpLocks",03,78,f1,5b)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,gradientBG),HX_("gradientBG",b5,cf,f5,a3)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(StoryMenuState_obj,difficultySelectors),HX_("difficultySelectors",b9,fa,53,88)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,sprDifficulty),HX_("sprDifficulty",d0,6b,83,ba)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,leftArrow),HX_("leftArrow",42,68,6f,3a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,rightArrow),HX_("rightArrow",4d,60,54,28)},
	{::hx::fsBool,(int)offsetof(StoryMenuState_obj,movedBack),HX_("movedBack",fa,67,95,ea)},
	{::hx::fsBool,(int)offsetof(StoryMenuState_obj,selectedWeek),HX_("selectedWeek",ef,7f,8f,df)},
	{::hx::fsBool,(int)offsetof(StoryMenuState_obj,stopspamming),HX_("stopspamming",e0,83,63,4e)},
	{::hx::fsInt,(int)offsetof(StoryMenuState_obj,lerpScore),HX_("lerpScore",5b,81,4d,e7)},
	{::hx::fsInt,(int)offsetof(StoryMenuState_obj,intendedScore),HX_("intendedScore",a7,fd,7c,89)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StoryMenuState_obj_sStaticStorageInfo = 0;
#endif

static ::String StoryMenuState_obj_sMemberFields[] = {
	HX_("weeksArray",1a,2b,03,42),
	HX_("scoreText",1f,7d,bd,dc),
	HX_("curDifficulty",db,b7,38,a7),
	HX_("weekShm",a4,66,f7,24),
	HX_("weekNames",34,4b,f8,f8),
	HX_("txtWeekTitle",74,f4,3f,69),
	HX_("grpWeekCharacters",83,fc,76,59),
	HX_("curWeek",94,d1,0a,ba),
	HX_("txtTracklist",d9,6f,f5,3e),
	HX_("grpWeekText",c6,97,1f,d2),
	HX_("grpLocks",03,78,f1,5b),
	HX_("gradientBG",b5,cf,f5,a3),
	HX_("difficultySelectors",b9,fa,53,88),
	HX_("sprDifficulty",d0,6b,83,ba),
	HX_("leftArrow",42,68,6f,3a),
	HX_("rightArrow",4d,60,54,28),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("movedBack",fa,67,95,ea),
	HX_("selectedWeek",ef,7f,8f,df),
	HX_("stopspamming",e0,83,63,4e),
	HX_("selectWeek",10,d5,90,bd),
	HX_("changeDifficulty",cb,0f,40,d4),
	HX_("loadFromWeekJson",0c,3b,0a,3a),
	HX_("lerpScore",5b,81,4d,e7),
	HX_("intendedScore",a7,fd,7c,89),
	HX_("changeWeek",84,95,3e,29),
	HX_("updateText",56,b7,ae,05),
	HX_("beatHit",7d,ea,04,74),
	::String(null()) };

::hx::Class StoryMenuState_obj::__mClass;

void StoryMenuState_obj::__register()
{
	StoryMenuState_obj _hx_dummy;
	StoryMenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("StoryMenuState",5d,99,60,42);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StoryMenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StoryMenuState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StoryMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StoryMenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

