// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayStateChangeables
#include <PlayStateChangeables.h>
#endif
#ifndef INCLUDED_Stage
#include <Stage.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_16_new,"Note","new",0x1cc75604,"Note.new","Note.hx",16,0x1a8855ec)
static const int _hx_array_data_33e34412_1[] = {
	(int)180,(int)90,(int)270,(int)0,
};
static const ::String _hx_array_data_33e34412_2[] = {
	HX_("purple",3c,f6,89,71),HX_("blue",9a,42,19,41),HX_("green",c3,0e,ed,99),HX_("red",51,d9,56,00),
};
static const int _hx_array_data_33e34412_3[] = {
	(int)4,
};
static const int _hx_array_data_33e34412_4[] = {
	(int)0,
};
static const int _hx_array_data_33e34412_5[] = {
	(int)4,
};
static const int _hx_array_data_33e34412_6[] = {
	(int)5,
};
static const int _hx_array_data_33e34412_7[] = {
	(int)1,
};
static const int _hx_array_data_33e34412_8[] = {
	(int)5,
};
static const int _hx_array_data_33e34412_9[] = {
	(int)6,
};
static const int _hx_array_data_33e34412_10[] = {
	(int)2,
};
static const int _hx_array_data_33e34412_11[] = {
	(int)6,
};
static const int _hx_array_data_33e34412_12[] = {
	(int)7,
};
static const int _hx_array_data_33e34412_13[] = {
	(int)3,
};
static const int _hx_array_data_33e34412_14[] = {
	(int)7,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_267_update,"Note","update",0xca3a1ee5,"Note.update","Note.hx",267,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_50_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",50,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_51_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",51,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_52_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",52,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_53_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",53,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_54_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",54,0x1a8855ec)

void Note_obj::__construct(Float strumTime,int noteData, ::Note prevNote, ::Dynamic __o_sustainNote, ::Dynamic __o_inCharter, ::Dynamic __o_isAlt, ::Dynamic __o_bet){
            		 ::Dynamic sustainNote = __o_sustainNote;
            		if (::hx::IsNull(__o_sustainNote)) sustainNote = false;
            		 ::Dynamic inCharter = __o_inCharter;
            		if (::hx::IsNull(__o_inCharter)) inCharter = false;
            		 ::Dynamic isAlt = __o_isAlt;
            		if (::hx::IsNull(__o_isAlt)) isAlt = false;
            		 ::Dynamic bet = __o_bet;
            		if (::hx::IsNull(__o_bet)) bet = 0;
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_16_new)
HXLINE(  71)		this->children = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  69)		this->sustainActive = true;
HXLINE(  68)		this->spotInLine = 0;
HXLINE(  67)		this->parent = null();
HXLINE(  66)		this->isParent = false;
HXLINE(  64)		this->arrowAngles = ::Array_obj< int >::fromData( _hx_array_data_33e34412_1,4);
HXLINE(  63)		this->quantityColor = ::Array_obj< int >::__new(8)->init(0,::Note_obj::RED_NOTE)->init(1,2)->init(2,::Note_obj::BLUE_NOTE)->init(3,2)->init(4,::Note_obj::PURP_NOTE)->init(5,2)->init(6,::Note_obj::GREEN_NOTE)->init(7,2);
HXLINE(  62)		this->dataColor = ::Array_obj< ::String >::fromData( _hx_array_data_33e34412_2,4);
HXLINE(  60)		this->originAngle = ((Float)0);
HXLINE(  59)		this->localAngle = ((Float)0);
HXLINE(  58)		this->modAngle = ((Float)0);
HXLINE(  56)		this->rating = HX_("shit",c0,cf,52,4c);
HXLINE(  48)		this->beat = ((Float)0);
HXLINE(  46)		this->noteYOff = 0;
HXLINE(  40)		this->isAlt = false;
HXLINE(  38)		this->luaID = 0;
HXLINE(  35)		this->originColor = 0;
HXLINE(  34)		this->isSustainNote = false;
HXLINE(  33)		this->sustainLength = ((Float)0);
HXLINE(  32)		this->modifiedByLua = false;
HXLINE(  30)		this->wasGoodHit = false;
HXLINE(  29)		this->tooLate = false;
HXLINE(  28)		this->canBeHit = false;
HXLINE(  27)		this->rawNoteData = 0;
HXLINE(  26)		this->noteData = 0;
HXLINE(  25)		this->mustPress = false;
HXLINE(  23)		this->rStrumTime = ((Float)0);
HXLINE(  21)		this->charterSelected = false;
HXLINE(  19)		this->baseStrum = ((Float)0);
HXLINE(  18)		this->strumTime = ((Float)0);
HXLINE(  75)		super::__construct(null(),null(),null());
HXLINE(  77)		if (::hx::IsNull( prevNote )) {
HXLINE(  78)			prevNote = ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(  80)		this->beat = ( (Float)(bet) );
HXLINE(  82)		this->isAlt = ( (bool)(isAlt) );
HXLINE(  84)		this->prevNote = prevNote;
HXLINE(  85)		this->isSustainNote = ( (bool)(sustainNote) );
HXLINE(  87)		{
HXLINE(  87)			 ::Note _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  87)			_g->set_x((_g->x + 50));
            		}
HXLINE(  89)		{
HXLINE(  89)			 ::Note _g1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  89)			_g1->set_y((_g1->y - ( (Float)(2000) )));
            		}
HXLINE(  91)		if (( (bool)(inCharter) )) {
HXLINE(  93)			this->strumTime = strumTime;
HXLINE(  94)			this->rStrumTime = strumTime;
            		}
            		else {
HXLINE(  98)			this->strumTime = strumTime;
HXLINE( 100)			if (::PlayState_obj::isSM) {
HXLINE( 102)				this->rStrumTime = strumTime;
            			}
            			else {
HXLINE( 105)				this->rStrumTime = strumTime;
            			}
            		}
HXLINE( 111)		if ((this->strumTime < 0)) {
HXLINE( 112)			this->strumTime = ( (Float)(0) );
            		}
HXLINE( 114)		if (!(( (bool)(inCharter) ))) {
HXLINE( 115)			 ::Note _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 115)			_g->set_y(( (Float)((_g->y + (::flixel::FlxG_obj::save->data->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic) + ::PlayState_obj::songOffset))) ));
            		}
HXLINE( 117)		this->noteData = noteData;
HXLINE( 119)		::String daStage;
HXDLIN( 119)		bool daStage1;
HXDLIN( 119)		if (::hx::IsNotNull( ::PlayState_obj::instance )) {
HXLINE( 119)			daStage1 = !(::PlayStateChangeables_obj::Optimize);
            		}
            		else {
HXLINE( 119)			daStage1 = false;
            		}
HXDLIN( 119)		if (daStage1) {
HXLINE( 119)			daStage = ::PlayState_obj::Stage->curStage;
            		}
            		else {
HXLINE( 119)			daStage = HX_("stage",be,6a,0b,84);
            		}
HXLINE( 122)		::String noteTypeCheck = HX_("normal",27,72,69,30);
HXLINE( 124)		if (( (bool)(inCharter) )) {
HXLINE( 126)			this->set_frames(::PlayState_obj::noteskinSprite);
HXLINE( 128)			{
HXLINE( 129)				{
HXLINE( 130)					this->animation->addByPrefix((this->dataColor->__get(0) + HX_("Scroll",2d,4c,f9,7b)),(this->dataColor->__get(0) + HX_(" alone",3b,76,01,ed)),null(),null(),null(),null());
HXLINE( 131)					this->animation->addByPrefix((this->dataColor->__get(0) + HX_("hold",3f,c9,12,45)),(this->dataColor->__get(0) + HX_(" hold",5f,59,e5,b1)),null(),null(),null(),null());
HXLINE( 132)					this->animation->addByPrefix((this->dataColor->__get(0) + HX_("holdend",fc,4b,02,b8)),(this->dataColor->__get(0) + HX_(" tail",b0,46,c9,b9)),null(),null(),null(),null());
            				}
HXLINE( 129)				{
HXLINE( 130)					this->animation->addByPrefix((this->dataColor->__get(1) + HX_("Scroll",2d,4c,f9,7b)),(this->dataColor->__get(1) + HX_(" alone",3b,76,01,ed)),null(),null(),null(),null());
HXLINE( 131)					this->animation->addByPrefix((this->dataColor->__get(1) + HX_("hold",3f,c9,12,45)),(this->dataColor->__get(1) + HX_(" hold",5f,59,e5,b1)),null(),null(),null(),null());
HXLINE( 132)					this->animation->addByPrefix((this->dataColor->__get(1) + HX_("holdend",fc,4b,02,b8)),(this->dataColor->__get(1) + HX_(" tail",b0,46,c9,b9)),null(),null(),null(),null());
            				}
HXLINE( 129)				{
HXLINE( 130)					this->animation->addByPrefix((this->dataColor->__get(2) + HX_("Scroll",2d,4c,f9,7b)),(this->dataColor->__get(2) + HX_(" alone",3b,76,01,ed)),null(),null(),null(),null());
HXLINE( 131)					this->animation->addByPrefix((this->dataColor->__get(2) + HX_("hold",3f,c9,12,45)),(this->dataColor->__get(2) + HX_(" hold",5f,59,e5,b1)),null(),null(),null(),null());
HXLINE( 132)					this->animation->addByPrefix((this->dataColor->__get(2) + HX_("holdend",fc,4b,02,b8)),(this->dataColor->__get(2) + HX_(" tail",b0,46,c9,b9)),null(),null(),null(),null());
            				}
HXLINE( 129)				{
HXLINE( 130)					this->animation->addByPrefix((this->dataColor->__get(3) + HX_("Scroll",2d,4c,f9,7b)),(this->dataColor->__get(3) + HX_(" alone",3b,76,01,ed)),null(),null(),null(),null());
HXLINE( 131)					this->animation->addByPrefix((this->dataColor->__get(3) + HX_("hold",3f,c9,12,45)),(this->dataColor->__get(3) + HX_(" hold",5f,59,e5,b1)),null(),null(),null(),null());
HXLINE( 132)					this->animation->addByPrefix((this->dataColor->__get(3) + HX_("holdend",fc,4b,02,b8)),(this->dataColor->__get(3) + HX_(" tail",b0,46,c9,b9)),null(),null(),null(),null());
            				}
            			}
HXLINE( 135)			this->setGraphicSize(::Std_obj::_hx_int((this->get_width() * ((Float)0.7))),null());
HXLINE( 136)			this->updateHitbox();
HXLINE( 137)			this->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 141)			if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic) )) {
HXLINE( 143)				if ((::PlayState_obj::storyWeek == 6)) {
HXLINE( 146)					noteTypeCheck = HX_("pixel",86,c6,a3,c2);
            				}
            			}
            			else {
HXLINE( 151)				noteTypeCheck = ( (::String)(::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic)) );
            			}
HXLINE( 154)			if ((noteTypeCheck == HX_("pixel",86,c6,a3,c2))) {
HXLINE( 157)				this->loadGraphic(::PlayState_obj::noteskinPixelSprite,true,17,17,null(),null());
HXLINE( 158)				if (this->isSustainNote) {
HXLINE( 159)					this->loadGraphic(::PlayState_obj::noteskinPixelSpriteEnds,true,7,6,null(),null());
            				}
HXLINE( 161)				{
HXLINE( 162)					{
HXLINE( 163)						this->animation->add((this->dataColor->__get(0) + HX_("Scroll",2d,4c,f9,7b)),::Array_obj< int >::fromData( _hx_array_data_33e34412_3,1),null(),null(),null(),null());
HXLINE( 164)						this->animation->add((this->dataColor->__get(0) + HX_("hold",3f,c9,12,45)),::Array_obj< int >::fromData( _hx_array_data_33e34412_4,1),null(),null(),null(),null());
HXLINE( 165)						this->animation->add((this->dataColor->__get(0) + HX_("holdend",fc,4b,02,b8)),::Array_obj< int >::fromData( _hx_array_data_33e34412_5,1),null(),null(),null(),null());
            					}
HXLINE( 162)					{
HXLINE( 163)						this->animation->add((this->dataColor->__get(1) + HX_("Scroll",2d,4c,f9,7b)),::Array_obj< int >::fromData( _hx_array_data_33e34412_6,1),null(),null(),null(),null());
HXLINE( 164)						this->animation->add((this->dataColor->__get(1) + HX_("hold",3f,c9,12,45)),::Array_obj< int >::fromData( _hx_array_data_33e34412_7,1),null(),null(),null(),null());
HXLINE( 165)						this->animation->add((this->dataColor->__get(1) + HX_("holdend",fc,4b,02,b8)),::Array_obj< int >::fromData( _hx_array_data_33e34412_8,1),null(),null(),null(),null());
            					}
HXLINE( 162)					{
HXLINE( 163)						this->animation->add((this->dataColor->__get(2) + HX_("Scroll",2d,4c,f9,7b)),::Array_obj< int >::fromData( _hx_array_data_33e34412_9,1),null(),null(),null(),null());
HXLINE( 164)						this->animation->add((this->dataColor->__get(2) + HX_("hold",3f,c9,12,45)),::Array_obj< int >::fromData( _hx_array_data_33e34412_10,1),null(),null(),null(),null());
HXLINE( 165)						this->animation->add((this->dataColor->__get(2) + HX_("holdend",fc,4b,02,b8)),::Array_obj< int >::fromData( _hx_array_data_33e34412_11,1),null(),null(),null(),null());
            					}
HXLINE( 162)					{
HXLINE( 163)						this->animation->add((this->dataColor->__get(3) + HX_("Scroll",2d,4c,f9,7b)),::Array_obj< int >::fromData( _hx_array_data_33e34412_12,1),null(),null(),null(),null());
HXLINE( 164)						this->animation->add((this->dataColor->__get(3) + HX_("hold",3f,c9,12,45)),::Array_obj< int >::fromData( _hx_array_data_33e34412_13,1),null(),null(),null(),null());
HXLINE( 165)						this->animation->add((this->dataColor->__get(3) + HX_("holdend",fc,4b,02,b8)),::Array_obj< int >::fromData( _hx_array_data_33e34412_14,1),null(),null(),null(),null());
            					}
            				}
HXLINE( 168)				Float _hx_tmp = this->get_width();
HXDLIN( 168)				this->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::CoolUtil_obj::daPixelZoom)),null());
HXLINE( 169)				this->updateHitbox();
            			}
            			else {
HXLINE( 171)				this->set_frames(::PlayState_obj::noteskinSprite);
HXLINE( 173)				{
HXLINE( 174)					{
HXLINE( 175)						this->animation->addByPrefix((this->dataColor->__get(0) + HX_("Scroll",2d,4c,f9,7b)),(this->dataColor->__get(0) + HX_(" alone",3b,76,01,ed)),null(),null(),null(),null());
HXLINE( 176)						this->animation->addByPrefix((this->dataColor->__get(0) + HX_("hold",3f,c9,12,45)),(this->dataColor->__get(0) + HX_(" hold",5f,59,e5,b1)),null(),null(),null(),null());
HXLINE( 177)						this->animation->addByPrefix((this->dataColor->__get(0) + HX_("holdend",fc,4b,02,b8)),(this->dataColor->__get(0) + HX_(" tail",b0,46,c9,b9)),null(),null(),null(),null());
            					}
HXLINE( 174)					{
HXLINE( 175)						this->animation->addByPrefix((this->dataColor->__get(1) + HX_("Scroll",2d,4c,f9,7b)),(this->dataColor->__get(1) + HX_(" alone",3b,76,01,ed)),null(),null(),null(),null());
HXLINE( 176)						this->animation->addByPrefix((this->dataColor->__get(1) + HX_("hold",3f,c9,12,45)),(this->dataColor->__get(1) + HX_(" hold",5f,59,e5,b1)),null(),null(),null(),null());
HXLINE( 177)						this->animation->addByPrefix((this->dataColor->__get(1) + HX_("holdend",fc,4b,02,b8)),(this->dataColor->__get(1) + HX_(" tail",b0,46,c9,b9)),null(),null(),null(),null());
            					}
HXLINE( 174)					{
HXLINE( 175)						this->animation->addByPrefix((this->dataColor->__get(2) + HX_("Scroll",2d,4c,f9,7b)),(this->dataColor->__get(2) + HX_(" alone",3b,76,01,ed)),null(),null(),null(),null());
HXLINE( 176)						this->animation->addByPrefix((this->dataColor->__get(2) + HX_("hold",3f,c9,12,45)),(this->dataColor->__get(2) + HX_(" hold",5f,59,e5,b1)),null(),null(),null(),null());
HXLINE( 177)						this->animation->addByPrefix((this->dataColor->__get(2) + HX_("holdend",fc,4b,02,b8)),(this->dataColor->__get(2) + HX_(" tail",b0,46,c9,b9)),null(),null(),null(),null());
            					}
HXLINE( 174)					{
HXLINE( 175)						this->animation->addByPrefix((this->dataColor->__get(3) + HX_("Scroll",2d,4c,f9,7b)),(this->dataColor->__get(3) + HX_(" alone",3b,76,01,ed)),null(),null(),null(),null());
HXLINE( 176)						this->animation->addByPrefix((this->dataColor->__get(3) + HX_("hold",3f,c9,12,45)),(this->dataColor->__get(3) + HX_(" hold",5f,59,e5,b1)),null(),null(),null(),null());
HXLINE( 177)						this->animation->addByPrefix((this->dataColor->__get(3) + HX_("holdend",fc,4b,02,b8)),(this->dataColor->__get(3) + HX_(" tail",b0,46,c9,b9)),null(),null(),null(),null());
            					}
            				}
HXLINE( 180)				this->setGraphicSize(::Std_obj::_hx_int((this->get_width() * ((Float)0.7))),null());
HXLINE( 181)				this->updateHitbox();
HXLINE( 183)				this->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
            			}
            		}
HXLINE( 187)		{
HXLINE( 187)			 ::Note _g2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 187)			_g2->set_x((_g2->x + (::Note_obj::swagWidth * ( (Float)(noteData) ))));
            		}
HXLINE( 188)		this->animation->play((this->dataColor->__get(noteData) + HX_("Scroll",2d,4c,f9,7b)),null(),null(),null());
HXLINE( 189)		this->originColor = noteData;
HXLINE( 191)		bool _hx_tmp;
HXDLIN( 191)		bool _hx_tmp1;
HXDLIN( 191)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("stepMania",06,56,8a,73),::hx::paccDynamic)) )) {
HXLINE( 191)			_hx_tmp1 = !(this->isSustainNote);
            		}
            		else {
HXLINE( 191)			_hx_tmp1 = false;
            		}
HXDLIN( 191)		if (_hx_tmp1) {
HXLINE( 191)			_hx_tmp = !(::PlayState_obj::instance->executeModchart);
            		}
            		else {
HXLINE( 191)			_hx_tmp = false;
            		}
HXDLIN( 191)		if (_hx_tmp) {
HXLINE( 193)			int col = 0;
HXLINE( 195)			int beatRow = ::Math_obj::round((this->beat * ( (Float)(48) )));
HXLINE( 199)			if ((::hx::Mod(beatRow,((Float)48.)) == 0)) {
HXLINE( 200)				col = this->quantityColor->__get(0);
            			}
            			else {
HXLINE( 201)				if ((::hx::Mod(beatRow,((Float)24.)) == 0)) {
HXLINE( 202)					col = this->quantityColor->__get(2);
            				}
            				else {
HXLINE( 203)					if ((::hx::Mod(beatRow,((Float)16.)) == 0)) {
HXLINE( 204)						col = this->quantityColor->__get(4);
            					}
            					else {
HXLINE( 205)						if ((::hx::Mod(beatRow,((Float)12.)) == 0)) {
HXLINE( 206)							col = this->quantityColor->__get(6);
            						}
            						else {
HXLINE( 207)							if ((::hx::Mod(beatRow,((Float)8.)) == 0)) {
HXLINE( 208)								col = this->quantityColor->__get(4);
            							}
            							else {
HXLINE( 209)								if ((::hx::Mod(beatRow,((Float)6.)) == 0)) {
HXLINE( 210)									col = this->quantityColor->__get(4);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 212)			this->animation->play((this->dataColor->__get(col) + HX_("Scroll",2d,4c,f9,7b)),null(),null(),null());
HXLINE( 213)			 ::Note _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 213)			_hx_tmp->localAngle = (_hx_tmp->localAngle - ( (Float)(this->arrowAngles->__get(col)) ));
HXLINE( 214)			 ::Note _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 214)			_hx_tmp1->localAngle = (_hx_tmp1->localAngle + this->arrowAngles->__get(noteData));
HXLINE( 215)			this->originAngle = this->localAngle;
HXLINE( 216)			this->originColor = col;
            		}
HXLINE( 224)		bool _hx_tmp2;
HXDLIN( 224)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE( 224)			_hx_tmp2 = ( (bool)(sustainNote) );
            		}
            		else {
HXLINE( 224)			_hx_tmp2 = false;
            		}
HXDLIN( 224)		if (_hx_tmp2) {
HXLINE( 225)			this->set_flipY(true);
            		}
HXLINE( 227)		Float stepHeight = (((Float)0.45) * ::Conductor_obj::stepCrochet);
HXDLIN( 227)		Float stepHeight1;
HXDLIN( 227)		if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE( 227)			stepHeight1 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 227)			stepHeight1 = ::PlayStateChangeables_obj::scrollSpeed;
            		}
HXDLIN( 227)		Float stepHeight2 = (stepHeight * ::flixel::math::FlxMath_obj::roundDecimal(stepHeight1,2));
HXDLIN( 227)		Float stepHeight3 = (stepHeight2 / ::PlayState_obj::songMultiplier);
HXLINE( 230)		bool _hx_tmp3;
HXDLIN( 230)		if (this->isSustainNote) {
HXLINE( 230)			_hx_tmp3 = ::hx::IsNotNull( prevNote );
            		}
            		else {
HXLINE( 230)			_hx_tmp3 = false;
            		}
HXDLIN( 230)		if (_hx_tmp3) {
HXLINE( 232)			this->noteYOff = ::Math_obj::round((-(stepHeight3) + (::Note_obj::swagWidth * ((Float)0.5))));
HXLINE( 235)			this->set_alpha(((Float)0.6));
HXLINE( 237)			{
HXLINE( 237)				 ::Note _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 237)				Float _g1 = _g->x;
HXDLIN( 237)				_g->set_x((_g1 + (this->get_width() / ( (Float)(2) ))));
            			}
HXLINE( 239)			this->originColor = prevNote->originColor;
HXLINE( 240)			this->originAngle = prevNote->originAngle;
HXLINE( 242)			this->animation->play((this->dataColor->__get(this->originColor) + HX_("holdend",fc,4b,02,b8)),null(),null(),null());
HXLINE( 243)			this->updateHitbox();
HXLINE( 245)			{
HXLINE( 245)				 ::Note _g2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 245)				Float _g3 = _g2->x;
HXDLIN( 245)				_g2->set_x((_g3 - (this->get_width() / ( (Float)(2) ))));
            			}
HXLINE( 249)			if (( (bool)(inCharter) )) {
HXLINE( 250)				 ::Note _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 250)				_g->set_x((_g->x + 30));
            			}
HXLINE( 252)			if (prevNote->isSustainNote) {
HXLINE( 254)				prevNote->animation->play((this->dataColor->__get(prevNote->originColor) + HX_("hold",3f,c9,12,45)),null(),null(),null());
HXLINE( 255)				prevNote->updateHitbox();
HXLINE( 257)				{
HXLINE( 257)					 ::flixel::math::FlxPoint _g = prevNote->scale;
HXDLIN( 257)					Float _g1 = _g->y;
HXDLIN( 257)					_g->set_y((_g1 * (stepHeight3 / prevNote->get_height())));
            				}
HXLINE( 258)				prevNote->updateHitbox();
HXLINE( 260)				if (this->antialiasing) {
HXLINE( 261)					 ::flixel::math::FlxPoint _g = prevNote->scale;
HXDLIN( 261)					_g->set_y((_g->y * (((Float)1.0) + (((Float)1.0) / ( (Float)(prevNote->frameHeight) )))));
            				}
            			}
            		}
            	}

Dynamic Note_obj::__CreateEmpty() { return new Note_obj; }

void *Note_obj::_hx_vtable = 0;

Dynamic Note_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Note_obj > _hx_result = new Note_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool Note_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x08363a36) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x08363a36;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Note_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_267_update)
HXLINE( 268)		this->super::update(elapsed);
HXLINE( 269)		if (!(this->modifiedByLua)) {
HXLINE( 270)			this->set_angle((this->modAngle + this->localAngle));
            		}
            		else {
HXLINE( 272)			this->set_angle(this->modAngle);
            		}
HXLINE( 274)		if (!(this->modifiedByLua)) {
HXLINE( 276)			if (!(this->sustainActive)) {
HXLINE( 278)				this->set_alpha(((Float)0.3));
            			}
            		}
HXLINE( 282)		if (this->mustPress) {
HXLINE( 284)			if (this->isSustainNote) {
HXLINE( 286)				bool _hx_tmp;
HXDLIN( 286)				Float _hx_tmp1;
HXDLIN( 286)				if ((::PlayState_obj::songMultiplier < 1)) {
HXLINE( 286)					_hx_tmp1 = ::PlayState_obj::songMultiplier;
            				}
            				else {
HXLINE( 286)					_hx_tmp1 = ( (Float)(1) );
            				}
HXDLIN( 286)				if (((this->strumTime - ::Conductor_obj::songPosition) <= (((( (Float)(166) ) * ::Conductor_obj::timeScale) / _hx_tmp1) * ((Float)0.5)))) {
HXLINE( 287)					Float _hx_tmp1;
HXDLIN( 287)					if ((::PlayState_obj::songMultiplier < 1)) {
HXLINE( 287)						_hx_tmp1 = ::PlayState_obj::songMultiplier;
            					}
            					else {
HXLINE( 287)						_hx_tmp1 = ( (Float)(1) );
            					}
HXLINE( 286)					_hx_tmp = ((this->strumTime - ::Conductor_obj::songPosition) >= ((( (Float)(-166) ) * ::Conductor_obj::timeScale) / _hx_tmp1));
            				}
            				else {
HXLINE( 286)					_hx_tmp = false;
            				}
HXDLIN( 286)				if (_hx_tmp) {
HXLINE( 288)					this->canBeHit = true;
            				}
            				else {
HXLINE( 290)					this->canBeHit = false;
            				}
            			}
            			else {
HXLINE( 294)				bool _hx_tmp;
HXDLIN( 294)				Float _hx_tmp1;
HXDLIN( 294)				if ((::PlayState_obj::songMultiplier < 1)) {
HXLINE( 294)					_hx_tmp1 = ::PlayState_obj::songMultiplier;
            				}
            				else {
HXLINE( 294)					_hx_tmp1 = ( (Float)(1) );
            				}
HXDLIN( 294)				if (((this->strumTime - ::Conductor_obj::songPosition) <= ((( (Float)(166) ) * ::Conductor_obj::timeScale) / _hx_tmp1))) {
HXLINE( 295)					Float _hx_tmp1;
HXDLIN( 295)					if ((::PlayState_obj::songMultiplier < 1)) {
HXLINE( 295)						_hx_tmp1 = ::PlayState_obj::songMultiplier;
            					}
            					else {
HXLINE( 295)						_hx_tmp1 = ( (Float)(1) );
            					}
HXLINE( 294)					_hx_tmp = ((this->strumTime - ::Conductor_obj::songPosition) >= ((( (Float)(-166) ) * ::Conductor_obj::timeScale) / _hx_tmp1));
            				}
            				else {
HXLINE( 294)					_hx_tmp = false;
            				}
HXDLIN( 294)				if (_hx_tmp) {
HXLINE( 296)					this->canBeHit = true;
            				}
            				else {
HXLINE( 298)					this->canBeHit = false;
            				}
            			}
            		}
            		else {
HXLINE( 305)			this->canBeHit = false;
            		}
HXLINE( 310)		bool _hx_tmp;
HXDLIN( 310)		if (this->tooLate) {
HXLINE( 310)			_hx_tmp = !(this->wasGoodHit);
            		}
            		else {
HXLINE( 310)			_hx_tmp = false;
            		}
HXDLIN( 310)		if (_hx_tmp) {
HXLINE( 312)			if ((this->alpha > ((Float)0.3))) {
HXLINE( 313)				this->set_alpha(((Float)0.3));
            			}
            		}
            	}


Float Note_obj::swagWidth;

int Note_obj::PURP_NOTE;

int Note_obj::GREEN_NOTE;

int Note_obj::BLUE_NOTE;

int Note_obj::RED_NOTE;


::hx::ObjectPtr< Note_obj > Note_obj::__new(Float strumTime,int noteData, ::Note prevNote, ::Dynamic __o_sustainNote, ::Dynamic __o_inCharter, ::Dynamic __o_isAlt, ::Dynamic __o_bet) {
	::hx::ObjectPtr< Note_obj > __this = new Note_obj();
	__this->__construct(strumTime,noteData,prevNote,__o_sustainNote,__o_inCharter,__o_isAlt,__o_bet);
	return __this;
}

::hx::ObjectPtr< Note_obj > Note_obj::__alloc(::hx::Ctx *_hx_ctx,Float strumTime,int noteData, ::Note prevNote, ::Dynamic __o_sustainNote, ::Dynamic __o_inCharter, ::Dynamic __o_isAlt, ::Dynamic __o_bet) {
	Note_obj *__this = (Note_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Note_obj), true, "Note"));
	*(void **)__this = Note_obj::_hx_vtable;
	__this->__construct(strumTime,noteData,prevNote,__o_sustainNote,__o_inCharter,__o_isAlt,__o_bet);
	return __this;
}

Note_obj::Note_obj()
{
}

void Note_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Note);
	HX_MARK_MEMBER_NAME(strumTime,"strumTime");
	HX_MARK_MEMBER_NAME(baseStrum,"baseStrum");
	HX_MARK_MEMBER_NAME(charterSelected,"charterSelected");
	HX_MARK_MEMBER_NAME(rStrumTime,"rStrumTime");
	HX_MARK_MEMBER_NAME(mustPress,"mustPress");
	HX_MARK_MEMBER_NAME(noteData,"noteData");
	HX_MARK_MEMBER_NAME(rawNoteData,"rawNoteData");
	HX_MARK_MEMBER_NAME(canBeHit,"canBeHit");
	HX_MARK_MEMBER_NAME(tooLate,"tooLate");
	HX_MARK_MEMBER_NAME(wasGoodHit,"wasGoodHit");
	HX_MARK_MEMBER_NAME(prevNote,"prevNote");
	HX_MARK_MEMBER_NAME(modifiedByLua,"modifiedByLua");
	HX_MARK_MEMBER_NAME(sustainLength,"sustainLength");
	HX_MARK_MEMBER_NAME(isSustainNote,"isSustainNote");
	HX_MARK_MEMBER_NAME(originColor,"originColor");
	HX_MARK_MEMBER_NAME(luaID,"luaID");
	HX_MARK_MEMBER_NAME(isAlt,"isAlt");
	HX_MARK_MEMBER_NAME(noteCharterObject,"noteCharterObject");
	HX_MARK_MEMBER_NAME(noteYOff,"noteYOff");
	HX_MARK_MEMBER_NAME(beat,"beat");
	HX_MARK_MEMBER_NAME(rating,"rating");
	HX_MARK_MEMBER_NAME(modAngle,"modAngle");
	HX_MARK_MEMBER_NAME(localAngle,"localAngle");
	HX_MARK_MEMBER_NAME(originAngle,"originAngle");
	HX_MARK_MEMBER_NAME(dataColor,"dataColor");
	HX_MARK_MEMBER_NAME(quantityColor,"quantityColor");
	HX_MARK_MEMBER_NAME(arrowAngles,"arrowAngles");
	HX_MARK_MEMBER_NAME(isParent,"isParent");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(spotInLine,"spotInLine");
	HX_MARK_MEMBER_NAME(sustainActive,"sustainActive");
	HX_MARK_MEMBER_NAME(children,"children");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Note_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(strumTime,"strumTime");
	HX_VISIT_MEMBER_NAME(baseStrum,"baseStrum");
	HX_VISIT_MEMBER_NAME(charterSelected,"charterSelected");
	HX_VISIT_MEMBER_NAME(rStrumTime,"rStrumTime");
	HX_VISIT_MEMBER_NAME(mustPress,"mustPress");
	HX_VISIT_MEMBER_NAME(noteData,"noteData");
	HX_VISIT_MEMBER_NAME(rawNoteData,"rawNoteData");
	HX_VISIT_MEMBER_NAME(canBeHit,"canBeHit");
	HX_VISIT_MEMBER_NAME(tooLate,"tooLate");
	HX_VISIT_MEMBER_NAME(wasGoodHit,"wasGoodHit");
	HX_VISIT_MEMBER_NAME(prevNote,"prevNote");
	HX_VISIT_MEMBER_NAME(modifiedByLua,"modifiedByLua");
	HX_VISIT_MEMBER_NAME(sustainLength,"sustainLength");
	HX_VISIT_MEMBER_NAME(isSustainNote,"isSustainNote");
	HX_VISIT_MEMBER_NAME(originColor,"originColor");
	HX_VISIT_MEMBER_NAME(luaID,"luaID");
	HX_VISIT_MEMBER_NAME(isAlt,"isAlt");
	HX_VISIT_MEMBER_NAME(noteCharterObject,"noteCharterObject");
	HX_VISIT_MEMBER_NAME(noteYOff,"noteYOff");
	HX_VISIT_MEMBER_NAME(beat,"beat");
	HX_VISIT_MEMBER_NAME(rating,"rating");
	HX_VISIT_MEMBER_NAME(modAngle,"modAngle");
	HX_VISIT_MEMBER_NAME(localAngle,"localAngle");
	HX_VISIT_MEMBER_NAME(originAngle,"originAngle");
	HX_VISIT_MEMBER_NAME(dataColor,"dataColor");
	HX_VISIT_MEMBER_NAME(quantityColor,"quantityColor");
	HX_VISIT_MEMBER_NAME(arrowAngles,"arrowAngles");
	HX_VISIT_MEMBER_NAME(isParent,"isParent");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(spotInLine,"spotInLine");
	HX_VISIT_MEMBER_NAME(sustainActive,"sustainActive");
	HX_VISIT_MEMBER_NAME(children,"children");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Note_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"beat") ) { return ::hx::Val( beat ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"luaID") ) { return ::hx::Val( luaID ); }
		if (HX_FIELD_EQ(inName,"isAlt") ) { return ::hx::Val( isAlt ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"rating") ) { return ::hx::Val( rating ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return ::hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tooLate") ) { return ::hx::Val( tooLate ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"noteData") ) { return ::hx::Val( noteData ); }
		if (HX_FIELD_EQ(inName,"canBeHit") ) { return ::hx::Val( canBeHit ); }
		if (HX_FIELD_EQ(inName,"prevNote") ) { return ::hx::Val( prevNote ); }
		if (HX_FIELD_EQ(inName,"noteYOff") ) { return ::hx::Val( noteYOff ); }
		if (HX_FIELD_EQ(inName,"modAngle") ) { return ::hx::Val( modAngle ); }
		if (HX_FIELD_EQ(inName,"isParent") ) { return ::hx::Val( isParent ); }
		if (HX_FIELD_EQ(inName,"children") ) { return ::hx::Val( children ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumTime") ) { return ::hx::Val( strumTime ); }
		if (HX_FIELD_EQ(inName,"baseStrum") ) { return ::hx::Val( baseStrum ); }
		if (HX_FIELD_EQ(inName,"mustPress") ) { return ::hx::Val( mustPress ); }
		if (HX_FIELD_EQ(inName,"dataColor") ) { return ::hx::Val( dataColor ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rStrumTime") ) { return ::hx::Val( rStrumTime ); }
		if (HX_FIELD_EQ(inName,"wasGoodHit") ) { return ::hx::Val( wasGoodHit ); }
		if (HX_FIELD_EQ(inName,"localAngle") ) { return ::hx::Val( localAngle ); }
		if (HX_FIELD_EQ(inName,"spotInLine") ) { return ::hx::Val( spotInLine ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"rawNoteData") ) { return ::hx::Val( rawNoteData ); }
		if (HX_FIELD_EQ(inName,"originColor") ) { return ::hx::Val( originColor ); }
		if (HX_FIELD_EQ(inName,"originAngle") ) { return ::hx::Val( originAngle ); }
		if (HX_FIELD_EQ(inName,"arrowAngles") ) { return ::hx::Val( arrowAngles ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"modifiedByLua") ) { return ::hx::Val( modifiedByLua ); }
		if (HX_FIELD_EQ(inName,"sustainLength") ) { return ::hx::Val( sustainLength ); }
		if (HX_FIELD_EQ(inName,"isSustainNote") ) { return ::hx::Val( isSustainNote ); }
		if (HX_FIELD_EQ(inName,"quantityColor") ) { return ::hx::Val( quantityColor ); }
		if (HX_FIELD_EQ(inName,"sustainActive") ) { return ::hx::Val( sustainActive ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"charterSelected") ) { return ::hx::Val( charterSelected ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"noteCharterObject") ) { return ::hx::Val( noteCharterObject ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Note_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"RED_NOTE") ) { outValue = ( RED_NOTE ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"swagWidth") ) { outValue = ( swagWidth ); return true; }
		if (HX_FIELD_EQ(inName,"PURP_NOTE") ) { outValue = ( PURP_NOTE ); return true; }
		if (HX_FIELD_EQ(inName,"BLUE_NOTE") ) { outValue = ( BLUE_NOTE ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"GREEN_NOTE") ) { outValue = ( GREEN_NOTE ); return true; }
	}
	return false;
}

::hx::Val Note_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"beat") ) { beat=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"luaID") ) { luaID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isAlt") ) { isAlt=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"rating") ) { rating=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::Note >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tooLate") ) { tooLate=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"noteData") ) { noteData=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canBeHit") ) { canBeHit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prevNote") ) { prevNote=inValue.Cast<  ::Note >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteYOff") ) { noteYOff=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modAngle") ) { modAngle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isParent") ) { isParent=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"children") ) { children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumTime") ) { strumTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"baseStrum") ) { baseStrum=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mustPress") ) { mustPress=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dataColor") ) { dataColor=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rStrumTime") ) { rStrumTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wasGoodHit") ) { wasGoodHit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"localAngle") ) { localAngle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spotInLine") ) { spotInLine=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"rawNoteData") ) { rawNoteData=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"originColor") ) { originColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"originAngle") ) { originAngle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arrowAngles") ) { arrowAngles=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"modifiedByLua") ) { modifiedByLua=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sustainLength") ) { sustainLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isSustainNote") ) { isSustainNote=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"quantityColor") ) { quantityColor=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sustainActive") ) { sustainActive=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"charterSelected") ) { charterSelected=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"noteCharterObject") ) { noteCharterObject=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Note_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"RED_NOTE") ) { RED_NOTE=ioValue.Cast< int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"swagWidth") ) { swagWidth=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"PURP_NOTE") ) { PURP_NOTE=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"BLUE_NOTE") ) { BLUE_NOTE=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"GREEN_NOTE") ) { GREEN_NOTE=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Note_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("strumTime",f6,2d,21,f4));
	outFields->push(HX_("baseStrum",78,07,fd,93));
	outFields->push(HX_("charterSelected",46,92,b0,25));
	outFields->push(HX_("rStrumTime",24,6f,1d,37));
	outFields->push(HX_("mustPress",ba,d4,17,60));
	outFields->push(HX_("noteData",3c,7b,96,51));
	outFields->push(HX_("rawNoteData",44,35,c3,78));
	outFields->push(HX_("canBeHit",20,a6,d1,1e));
	outFields->push(HX_("tooLate",da,77,57,55));
	outFields->push(HX_("wasGoodHit",ed,7a,9b,17));
	outFields->push(HX_("prevNote",85,f8,d7,11));
	outFields->push(HX_("modifiedByLua",18,c8,92,a0));
	outFields->push(HX_("sustainLength",e9,a1,9c,7c));
	outFields->push(HX_("isSustainNote",6b,1e,77,c3));
	outFields->push(HX_("originColor",9d,25,03,f1));
	outFields->push(HX_("luaID",93,77,e6,7c));
	outFields->push(HX_("isAlt",5f,23,48,c1));
	outFields->push(HX_("noteCharterObject",98,2e,4f,54));
	outFields->push(HX_("noteYOff",88,41,6a,5f));
	outFields->push(HX_("beat",76,e1,13,41));
	outFields->push(HX_("rating",1d,34,8a,bb));
	outFields->push(HX_("modAngle",b1,dd,08,14));
	outFields->push(HX_("localAngle",68,e6,d5,5a));
	outFields->push(HX_("originAngle",0d,f8,88,c9));
	outFields->push(HX_("dataColor",d9,f2,4b,90));
	outFields->push(HX_("quantityColor",d8,61,41,6c));
	outFields->push(HX_("arrowAngles",e9,ff,f7,1d));
	outFields->push(HX_("isParent",b4,a0,e7,45));
	outFields->push(HX_("parent",2a,05,7e,ed));
	outFields->push(HX_("spotInLine",1b,7f,58,08));
	outFields->push(HX_("sustainActive",c9,4e,db,f3));
	outFields->push(HX_("children",3f,19,6a,70));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Note_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Note_obj,strumTime),HX_("strumTime",f6,2d,21,f4)},
	{::hx::fsFloat,(int)offsetof(Note_obj,baseStrum),HX_("baseStrum",78,07,fd,93)},
	{::hx::fsBool,(int)offsetof(Note_obj,charterSelected),HX_("charterSelected",46,92,b0,25)},
	{::hx::fsFloat,(int)offsetof(Note_obj,rStrumTime),HX_("rStrumTime",24,6f,1d,37)},
	{::hx::fsBool,(int)offsetof(Note_obj,mustPress),HX_("mustPress",ba,d4,17,60)},
	{::hx::fsInt,(int)offsetof(Note_obj,noteData),HX_("noteData",3c,7b,96,51)},
	{::hx::fsInt,(int)offsetof(Note_obj,rawNoteData),HX_("rawNoteData",44,35,c3,78)},
	{::hx::fsBool,(int)offsetof(Note_obj,canBeHit),HX_("canBeHit",20,a6,d1,1e)},
	{::hx::fsBool,(int)offsetof(Note_obj,tooLate),HX_("tooLate",da,77,57,55)},
	{::hx::fsBool,(int)offsetof(Note_obj,wasGoodHit),HX_("wasGoodHit",ed,7a,9b,17)},
	{::hx::fsObject /*  ::Note */ ,(int)offsetof(Note_obj,prevNote),HX_("prevNote",85,f8,d7,11)},
	{::hx::fsBool,(int)offsetof(Note_obj,modifiedByLua),HX_("modifiedByLua",18,c8,92,a0)},
	{::hx::fsFloat,(int)offsetof(Note_obj,sustainLength),HX_("sustainLength",e9,a1,9c,7c)},
	{::hx::fsBool,(int)offsetof(Note_obj,isSustainNote),HX_("isSustainNote",6b,1e,77,c3)},
	{::hx::fsInt,(int)offsetof(Note_obj,originColor),HX_("originColor",9d,25,03,f1)},
	{::hx::fsInt,(int)offsetof(Note_obj,luaID),HX_("luaID",93,77,e6,7c)},
	{::hx::fsBool,(int)offsetof(Note_obj,isAlt),HX_("isAlt",5f,23,48,c1)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Note_obj,noteCharterObject),HX_("noteCharterObject",98,2e,4f,54)},
	{::hx::fsInt,(int)offsetof(Note_obj,noteYOff),HX_("noteYOff",88,41,6a,5f)},
	{::hx::fsFloat,(int)offsetof(Note_obj,beat),HX_("beat",76,e1,13,41)},
	{::hx::fsString,(int)offsetof(Note_obj,rating),HX_("rating",1d,34,8a,bb)},
	{::hx::fsFloat,(int)offsetof(Note_obj,modAngle),HX_("modAngle",b1,dd,08,14)},
	{::hx::fsFloat,(int)offsetof(Note_obj,localAngle),HX_("localAngle",68,e6,d5,5a)},
	{::hx::fsFloat,(int)offsetof(Note_obj,originAngle),HX_("originAngle",0d,f8,88,c9)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Note_obj,dataColor),HX_("dataColor",d9,f2,4b,90)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Note_obj,quantityColor),HX_("quantityColor",d8,61,41,6c)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Note_obj,arrowAngles),HX_("arrowAngles",e9,ff,f7,1d)},
	{::hx::fsBool,(int)offsetof(Note_obj,isParent),HX_("isParent",b4,a0,e7,45)},
	{::hx::fsObject /*  ::Note */ ,(int)offsetof(Note_obj,parent),HX_("parent",2a,05,7e,ed)},
	{::hx::fsInt,(int)offsetof(Note_obj,spotInLine),HX_("spotInLine",1b,7f,58,08)},
	{::hx::fsBool,(int)offsetof(Note_obj,sustainActive),HX_("sustainActive",c9,4e,db,f3)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Note_obj,children),HX_("children",3f,19,6a,70)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Note_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &Note_obj::swagWidth,HX_("swagWidth",1c,87,d9,a6)},
	{::hx::fsInt,(void *) &Note_obj::PURP_NOTE,HX_("PURP_NOTE",ee,97,79,1e)},
	{::hx::fsInt,(void *) &Note_obj::GREEN_NOTE,HX_("GREEN_NOTE",4e,c6,8e,9c)},
	{::hx::fsInt,(void *) &Note_obj::BLUE_NOTE,HX_("BLUE_NOTE",f7,42,53,a9)},
	{::hx::fsInt,(void *) &Note_obj::RED_NOTE,HX_("RED_NOTE",00,15,92,9e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Note_obj_sMemberFields[] = {
	HX_("strumTime",f6,2d,21,f4),
	HX_("baseStrum",78,07,fd,93),
	HX_("charterSelected",46,92,b0,25),
	HX_("rStrumTime",24,6f,1d,37),
	HX_("mustPress",ba,d4,17,60),
	HX_("noteData",3c,7b,96,51),
	HX_("rawNoteData",44,35,c3,78),
	HX_("canBeHit",20,a6,d1,1e),
	HX_("tooLate",da,77,57,55),
	HX_("wasGoodHit",ed,7a,9b,17),
	HX_("prevNote",85,f8,d7,11),
	HX_("modifiedByLua",18,c8,92,a0),
	HX_("sustainLength",e9,a1,9c,7c),
	HX_("isSustainNote",6b,1e,77,c3),
	HX_("originColor",9d,25,03,f1),
	HX_("luaID",93,77,e6,7c),
	HX_("isAlt",5f,23,48,c1),
	HX_("noteCharterObject",98,2e,4f,54),
	HX_("noteYOff",88,41,6a,5f),
	HX_("beat",76,e1,13,41),
	HX_("rating",1d,34,8a,bb),
	HX_("modAngle",b1,dd,08,14),
	HX_("localAngle",68,e6,d5,5a),
	HX_("originAngle",0d,f8,88,c9),
	HX_("dataColor",d9,f2,4b,90),
	HX_("quantityColor",d8,61,41,6c),
	HX_("arrowAngles",e9,ff,f7,1d),
	HX_("isParent",b4,a0,e7,45),
	HX_("parent",2a,05,7e,ed),
	HX_("spotInLine",1b,7f,58,08),
	HX_("sustainActive",c9,4e,db,f3),
	HX_("children",3f,19,6a,70),
	HX_("update",09,86,05,87),
	::String(null()) };

static void Note_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Note_obj::swagWidth,"swagWidth");
	HX_MARK_MEMBER_NAME(Note_obj::PURP_NOTE,"PURP_NOTE");
	HX_MARK_MEMBER_NAME(Note_obj::GREEN_NOTE,"GREEN_NOTE");
	HX_MARK_MEMBER_NAME(Note_obj::BLUE_NOTE,"BLUE_NOTE");
	HX_MARK_MEMBER_NAME(Note_obj::RED_NOTE,"RED_NOTE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Note_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Note_obj::swagWidth,"swagWidth");
	HX_VISIT_MEMBER_NAME(Note_obj::PURP_NOTE,"PURP_NOTE");
	HX_VISIT_MEMBER_NAME(Note_obj::GREEN_NOTE,"GREEN_NOTE");
	HX_VISIT_MEMBER_NAME(Note_obj::BLUE_NOTE,"BLUE_NOTE");
	HX_VISIT_MEMBER_NAME(Note_obj::RED_NOTE,"RED_NOTE");
};

#endif

::hx::Class Note_obj::__mClass;

static ::String Note_obj_sStaticFields[] = {
	HX_("swagWidth",1c,87,d9,a6),
	HX_("PURP_NOTE",ee,97,79,1e),
	HX_("GREEN_NOTE",4e,c6,8e,9c),
	HX_("BLUE_NOTE",f7,42,53,a9),
	HX_("RED_NOTE",00,15,92,9e),
	::String(null())
};

void Note_obj::__register()
{
	Note_obj _hx_dummy;
	Note_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Note",12,44,e3,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Note_obj::__GetStatic;
	__mClass->mSetStaticField = &Note_obj::__SetStatic;
	__mClass->mMarkFunc = Note_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Note_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Note_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Note_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Note_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Note_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Note_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Note_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_50_boot)
HXDLIN(  50)		swagWidth = ((Float)112.);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_51_boot)
HXDLIN(  51)		PURP_NOTE = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_52_boot)
HXDLIN(  52)		GREEN_NOTE = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_53_boot)
HXDLIN(  53)		BLUE_NOTE = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_54_boot)
HXDLIN(  54)		RED_NOTE = 3;
            	}
}

