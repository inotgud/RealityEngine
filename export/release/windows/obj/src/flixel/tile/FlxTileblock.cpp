// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTileblock
#include <flixel/tile/FlxTileblock.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ca22d206eb905d85_30_new,"flixel.tile.FlxTileblock","new",0x8f1d69cd,"flixel.tile.FlxTileblock.new","flixel/tile/FlxTileblock.hx",30,0xecdf1de3)
HX_LOCAL_STACK_FRAME(_hx_pos_ca22d206eb905d85_39_destroy,"flixel.tile.FlxTileblock","destroy",0x5d3d80e7,"flixel.tile.FlxTileblock.destroy","flixel/tile/FlxTileblock.hx",39,0xecdf1de3)
namespace flixel{
namespace tile{

void FlxTileblock_obj::__construct(int X,int Y,int Width,int Height){
            	HX_STACKFRAME(&_hx_pos_ca22d206eb905d85_30_new)
HXLINE(  31)		super::__construct(X,Y,null());
HXLINE(  32)		this->makeGraphic(Width,Height,0,true,null());
HXLINE(  33)		this->set_active(false);
HXLINE(  34)		this->set_immovable(true);
HXLINE(  35)		this->set_moves(false);
            	}

Dynamic FlxTileblock_obj::__CreateEmpty() { return new FlxTileblock_obj; }

void *FlxTileblock_obj::_hx_vtable = 0;

Dynamic FlxTileblock_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxTileblock_obj > _hx_result = new FlxTileblock_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxTileblock_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x2b935cf7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2b935cf7;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void FlxTileblock_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_ca22d206eb905d85_39_destroy)
HXLINE(  40)		this->tileSprite = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->tileSprite)) );
HXLINE(  41)		this->super::destroy();
            	}



::hx::ObjectPtr< FlxTileblock_obj > FlxTileblock_obj::__new(int X,int Y,int Width,int Height) {
	::hx::ObjectPtr< FlxTileblock_obj > __this = new FlxTileblock_obj();
	__this->__construct(X,Y,Width,Height);
	return __this;
}

::hx::ObjectPtr< FlxTileblock_obj > FlxTileblock_obj::__alloc(::hx::Ctx *_hx_ctx,int X,int Y,int Width,int Height) {
	FlxTileblock_obj *__this = (FlxTileblock_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxTileblock_obj), true, "flixel.tile.FlxTileblock"));
	*(void **)__this = FlxTileblock_obj::_hx_vtable;
	__this->__construct(X,Y,Width,Height);
	return __this;
}

FlxTileblock_obj::FlxTileblock_obj()
{
}

void FlxTileblock_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTileblock);
	HX_MARK_MEMBER_NAME(tileSprite,"tileSprite");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTileblock_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tileSprite,"tileSprite");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxTileblock_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tileSprite") ) { return ::hx::Val( tileSprite ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxTileblock_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"tileSprite") ) { tileSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTileblock_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("tileSprite",d3,b1,2c,28));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxTileblock_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FlxTileblock_obj,tileSprite),HX_("tileSprite",d3,b1,2c,28)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxTileblock_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTileblock_obj_sMemberFields[] = {
	HX_("tileSprite",d3,b1,2c,28),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class FlxTileblock_obj::__mClass;

void FlxTileblock_obj::__register()
{
	FlxTileblock_obj _hx_dummy;
	FlxTileblock_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.tile.FlxTileblock",5b,7f,bf,db);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxTileblock_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxTileblock_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTileblock_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTileblock_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace tile
