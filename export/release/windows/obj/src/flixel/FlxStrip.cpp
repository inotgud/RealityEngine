// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxStrip
#include <flixel/FlxStrip.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c99c00bf7ae8682b_16_new,"flixel.FlxStrip","new",0x30c98a6a,"flixel.FlxStrip.new","flixel/FlxStrip.hx",16,0x5d849de5)
HX_LOCAL_STACK_FRAME(_hx_pos_c99c00bf7ae8682b_38_destroy,"flixel.FlxStrip","destroy",0x7d62b404,"flixel.FlxStrip.destroy","flixel/FlxStrip.hx",38,0x5d849de5)
HX_LOCAL_STACK_FRAME(_hx_pos_c99c00bf7ae8682b_49_draw,"flixel.FlxStrip","draw",0x78fd3aba,"flixel.FlxStrip.draw","flixel/FlxStrip.hx",49,0x5d849de5)
namespace flixel{

void FlxStrip_obj::__construct( ::Dynamic X, ::Dynamic Y, ::Dynamic SimpleGraphic){
            	HX_GC_STACKFRAME(&_hx_pos_c99c00bf7ae8682b_16_new)
HXLINE(  35)		this->repeat = false;
HXLINE(  33)		int length = null();
HXDLIN(  33)		bool fixed = null();
HXDLIN(  33)		::Array< int > array = null();
HXDLIN(  33)		this->colors =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length,fixed,array);
HXLINE(  31)		int length1 = null();
HXDLIN(  31)		bool fixed1 = null();
HXDLIN(  31)		::Array< Float > array1 = null();
HXDLIN(  31)		this->uvtData =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length1,fixed1,array1,true);
HXLINE(  26)		int length2 = null();
HXDLIN(  26)		bool fixed2 = null();
HXDLIN(  26)		::Array< int > array2 = null();
HXDLIN(  26)		this->indices =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length2,fixed2,array2);
HXLINE(  21)		int length3 = null();
HXDLIN(  21)		bool fixed3 = null();
HXDLIN(  21)		::Array< Float > array3 = null();
HXDLIN(  21)		this->vertices =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length3,fixed3,array3,true);
HXLINE(  16)		super::__construct(X,Y,SimpleGraphic);
            	}

Dynamic FlxStrip_obj::__CreateEmpty() { return new FlxStrip_obj; }

void *FlxStrip_obj::_hx_vtable = 0;

Dynamic FlxStrip_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxStrip_obj > _hx_result = new FlxStrip_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool FlxStrip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7c863966) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x7c863966;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void FlxStrip_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_c99c00bf7ae8682b_38_destroy)
HXLINE(  39)		this->vertices = null();
HXLINE(  40)		this->indices = null();
HXLINE(  41)		this->uvtData = null();
HXLINE(  42)		this->colors = null();
HXLINE(  44)		this->super::destroy();
            	}


void FlxStrip_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_c99c00bf7ae8682b_49_draw)
HXLINE(  50)		bool _hx_tmp;
HXDLIN(  50)		bool _hx_tmp1;
HXDLIN(  50)		if ((this->alpha != 0)) {
HXLINE(  50)			_hx_tmp1 = ::hx::IsNull( this->graphic );
            		}
            		else {
HXLINE(  50)			_hx_tmp1 = true;
            		}
HXDLIN(  50)		if (!(_hx_tmp1)) {
HXLINE(  50)			_hx_tmp = ::hx::IsNull( this->vertices );
            		}
            		else {
HXLINE(  50)			_hx_tmp = true;
            		}
HXDLIN(  50)		if (_hx_tmp) {
HXLINE(  51)			return;
            		}
HXLINE(  53)		{
HXLINE(  53)			int _g = 0;
HXDLIN(  53)			::Array< ::Dynamic> _g1 = this->get_cameras();
HXDLIN(  53)			while((_g < _g1->length)){
HXLINE(  53)				 ::flixel::FlxCamera camera = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN(  53)				_g = (_g + 1);
HXLINE(  55)				bool _hx_tmp;
HXDLIN(  55)				if (camera->visible) {
HXLINE(  55)					_hx_tmp = !(camera->exists);
            				}
            				else {
HXLINE(  55)					_hx_tmp = true;
            				}
HXDLIN(  55)				if (_hx_tmp) {
HXLINE(  56)					continue;
            				}
HXLINE(  58)				this->getScreenPosition(this->_point,camera)->subtractPoint(this->offset);
HXLINE(  59)				camera->drawTriangles(this->graphic,this->vertices,this->indices,this->uvtData,this->colors,this->_point,this->blend,this->repeat,this->antialiasing);
            			}
            		}
            	}



::hx::ObjectPtr< FlxStrip_obj > FlxStrip_obj::__new( ::Dynamic X, ::Dynamic Y, ::Dynamic SimpleGraphic) {
	::hx::ObjectPtr< FlxStrip_obj > __this = new FlxStrip_obj();
	__this->__construct(X,Y,SimpleGraphic);
	return __this;
}

::hx::ObjectPtr< FlxStrip_obj > FlxStrip_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y, ::Dynamic SimpleGraphic) {
	FlxStrip_obj *__this = (FlxStrip_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxStrip_obj), true, "flixel.FlxStrip"));
	*(void **)__this = FlxStrip_obj::_hx_vtable;
	__this->__construct(X,Y,SimpleGraphic);
	return __this;
}

FlxStrip_obj::FlxStrip_obj()
{
}

void FlxStrip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxStrip);
	HX_MARK_MEMBER_NAME(vertices,"vertices");
	HX_MARK_MEMBER_NAME(indices,"indices");
	HX_MARK_MEMBER_NAME(uvtData,"uvtData");
	HX_MARK_MEMBER_NAME(colors,"colors");
	HX_MARK_MEMBER_NAME(repeat,"repeat");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxStrip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vertices,"vertices");
	HX_VISIT_MEMBER_NAME(indices,"indices");
	HX_VISIT_MEMBER_NAME(uvtData,"uvtData");
	HX_VISIT_MEMBER_NAME(colors,"colors");
	HX_VISIT_MEMBER_NAME(repeat,"repeat");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxStrip_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"colors") ) { return ::hx::Val( colors ); }
		if (HX_FIELD_EQ(inName,"repeat") ) { return ::hx::Val( repeat ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"indices") ) { return ::hx::Val( indices ); }
		if (HX_FIELD_EQ(inName,"uvtData") ) { return ::hx::Val( uvtData ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { return ::hx::Val( vertices ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxStrip_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"colors") ) { colors=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"repeat") ) { repeat=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"indices") ) { indices=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uvtData") ) { uvtData=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { vertices=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxStrip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("vertices",f9,bf,15,6a));
	outFields->push(HX_("indices",27,47,54,e3));
	outFields->push(HX_("uvtData",bd,a6,23,27));
	outFields->push(HX_("colors",b0,c5,86,c6));
	outFields->push(HX_("repeat",5b,97,7c,06));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxStrip_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(FlxStrip_obj,vertices),HX_("vertices",f9,bf,15,6a)},
	{::hx::fsObject /*  ::openfl::_Vector::IntVector */ ,(int)offsetof(FlxStrip_obj,indices),HX_("indices",27,47,54,e3)},
	{::hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(FlxStrip_obj,uvtData),HX_("uvtData",bd,a6,23,27)},
	{::hx::fsObject /*  ::openfl::_Vector::IntVector */ ,(int)offsetof(FlxStrip_obj,colors),HX_("colors",b0,c5,86,c6)},
	{::hx::fsBool,(int)offsetof(FlxStrip_obj,repeat),HX_("repeat",5b,97,7c,06)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxStrip_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxStrip_obj_sMemberFields[] = {
	HX_("vertices",f9,bf,15,6a),
	HX_("indices",27,47,54,e3),
	HX_("uvtData",bd,a6,23,27),
	HX_("colors",b0,c5,86,c6),
	HX_("repeat",5b,97,7c,06),
	HX_("destroy",fa,2c,86,24),
	HX_("draw",04,2c,70,42),
	::String(null()) };

::hx::Class FlxStrip_obj::__mClass;

void FlxStrip_obj::__register()
{
	FlxStrip_obj _hx_dummy;
	FlxStrip_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.FlxStrip",78,cd,8d,0a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxStrip_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxStrip_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxStrip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxStrip_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
