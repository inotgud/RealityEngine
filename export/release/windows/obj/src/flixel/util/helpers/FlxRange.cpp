// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_util_helpers_FlxRange
#include <flixel/util/helpers/FlxRange.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_05e7652c5709bfbb_32_new,"flixel.util.helpers.FlxRange","new",0x6d2b50a0,"flixel.util.helpers.FlxRange.new","flixel/util/helpers/FlxRange.hx",32,0x9ab2f00f)
namespace flixel{
namespace util{
namespace helpers{

void FlxRange_obj::__construct( ::Dynamic start, ::Dynamic end){
            	HX_STACKFRAME(&_hx_pos_05e7652c5709bfbb_32_new)
HXLINE(  33)		this->start = start;
HXLINE(  34)		 ::Dynamic _hx_tmp;
HXDLIN(  34)		if (::hx::IsNull( end )) {
HXLINE(  34)			_hx_tmp = start;
            		}
            		else {
HXLINE(  34)			_hx_tmp = end;
            		}
HXDLIN(  34)		this->end = _hx_tmp;
            	}

Dynamic FlxRange_obj::__CreateEmpty() { return new FlxRange_obj; }

void *FlxRange_obj::_hx_vtable = 0;

Dynamic FlxRange_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxRange_obj > _hx_result = new FlxRange_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxRange_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1bedaec6;
}


FlxRange_obj::FlxRange_obj()
{
}

void FlxRange_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxRange);
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(end,"end");
	HX_MARK_END_CLASS();
}

void FlxRange_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(end,"end");
}

::hx::Val FlxRange_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return ::hx::Val( end ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxRange_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxRange_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("start",62,74,0b,84));
	outFields->push(HX_("end",db,03,4d,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxRange_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxRange_obj,start),HX_("start",62,74,0b,84)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxRange_obj,end),HX_("end",db,03,4d,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxRange_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxRange_obj_sMemberFields[] = {
	HX_("start",62,74,0b,84),
	HX_("end",db,03,4d,00),
	::String(null()) };

::hx::Class FlxRange_obj::__mClass;

void FlxRange_obj::__register()
{
	FlxRange_obj _hx_dummy;
	FlxRange_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.util.helpers.FlxRange",ae,c0,56,4c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxRange_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxRange_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxRange_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxRange_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace util
} // end namespace helpers
