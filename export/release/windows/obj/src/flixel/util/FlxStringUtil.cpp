// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_43_formatTime,"flixel.util.FlxStringUtil","formatTime",0xcfa9a0a7,"flixel.util.FlxStringUtil.formatTime","flixel/util/FlxStringUtil.hx",43,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_241_getClassName,"flixel.util.FlxStringUtil","getClassName",0xd57e17b0,"flixel.util.FlxStringUtil.getClassName","flixel/util/FlxStringUtil.hx",241,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_271_formatPackage,"flixel.util.FlxStringUtil","formatPackage",0x398bb32c,"flixel.util.FlxStringUtil.formatPackage","flixel/util/FlxStringUtil.hx",271,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_343_toIntArray,"flixel.util.FlxStringUtil","toIntArray",0xa370d488,"flixel.util.FlxStringUtil.toIntArray","flixel/util/FlxStringUtil.hx",343,0x4e012e33)
HX_LOCAL_STACK_FRAME(_hx_pos_85c2c6c527e56776_588_getDebugString,"flixel.util.FlxStringUtil","getDebugString",0x47d891d1,"flixel.util.FlxStringUtil.getDebugString","flixel/util/FlxStringUtil.hx",588,0x4e012e33)
namespace flixel{
namespace util{

void FlxStringUtil_obj::__construct() { }

Dynamic FlxStringUtil_obj::__CreateEmpty() { return new FlxStringUtil_obj; }

void *FlxStringUtil_obj::_hx_vtable = 0;

Dynamic FlxStringUtil_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxStringUtil_obj > _hx_result = new FlxStringUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxStringUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x168d68bf;
}

::String FlxStringUtil_obj::formatTime(Float Seconds,::hx::Null< bool >  __o_ShowMS){
            		bool ShowMS = __o_ShowMS.Default(false);
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_43_formatTime)
HXLINE(  44)		::String timeString = (::Std_obj::_hx_int((Seconds / ( (Float)(60) ))) + HX_(":",3a,00,00,00));
HXLINE(  45)		int timeStringHelper = ::hx::Mod(::Std_obj::_hx_int(Seconds),60);
HXLINE(  46)		if ((timeStringHelper < 10)) {
HXLINE(  48)			timeString = (timeString + HX_("0",30,00,00,00));
            		}
HXLINE(  50)		timeString = (timeString + timeStringHelper);
HXLINE(  51)		if (ShowMS) {
HXLINE(  53)			timeString = (timeString + HX_(".",2e,00,00,00));
HXLINE(  54)			timeStringHelper = ::Std_obj::_hx_int(((Seconds - ( (Float)(::Std_obj::_hx_int(Seconds)) )) * ( (Float)(100) )));
HXLINE(  55)			if ((timeStringHelper < 10)) {
HXLINE(  57)				timeString = (timeString + HX_("0",30,00,00,00));
            			}
HXLINE(  59)			timeString = (timeString + timeStringHelper);
            		}
HXLINE(  62)		return timeString;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxStringUtil_obj,formatTime,return )

::String FlxStringUtil_obj::getClassName( ::Dynamic objectOrClass,::hx::Null< bool >  __o_simple){
            		bool simple = __o_simple.Default(false);
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_241_getClassName)
HXLINE( 242)		::hx::Class cl;
HXLINE( 243)		if (::Std_obj::isOfType(objectOrClass,::hx::ClassOf< ::hx::Class >())) {
HXLINE( 244)			cl = objectOrClass;
            		}
            		else {
HXLINE( 246)			cl = ::Type_obj::getClass(objectOrClass);
            		}
HXLINE( 248)		return ::flixel::util::FlxStringUtil_obj::formatPackage(::Type_obj::getClassName(cl),simple);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxStringUtil_obj,getClassName,return )

::String FlxStringUtil_obj::formatPackage(::String s,bool simple){
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_271_formatPackage)
HXLINE( 272)		if (::hx::IsNull( s )) {
HXLINE( 273)			return null();
            		}
HXLINE( 275)		s = ::StringTools_obj::replace(s,HX_("::",c0,32,00,00),HX_(".",2e,00,00,00));
HXLINE( 276)		if (simple) {
HXLINE( 277)			s = s.substr((s.lastIndexOf(HX_(".",2e,00,00,00),null()) + 1),null());
            		}
HXLINE( 278)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxStringUtil_obj,formatPackage,return )

::Array< int > FlxStringUtil_obj::toIntArray(::String Data){
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_343_toIntArray)
HXLINE( 344)		bool _hx_tmp;
HXDLIN( 344)		if (::hx::IsNotNull( Data )) {
HXLINE( 344)			_hx_tmp = (Data != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 344)			_hx_tmp = false;
            		}
HXDLIN( 344)		if (_hx_tmp) {
HXLINE( 346)			::Array< ::String > strArray = Data.split(HX_(",",2c,00,00,00));
HXLINE( 347)			::Array< int > iArray = ::Array_obj< int >::__new();
HXLINE( 348)			{
HXLINE( 348)				int _g = 0;
HXDLIN( 348)				while((_g < strArray->length)){
HXLINE( 348)					::String str = strArray->__get(_g);
HXDLIN( 348)					_g = (_g + 1);
HXLINE( 350)					iArray->push(::Std_obj::parseInt(str));
            				}
            			}
HXLINE( 352)			return iArray;
            		}
HXLINE( 354)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxStringUtil_obj,toIntArray,return )

::String FlxStringUtil_obj::getDebugString(::Array< ::Dynamic> LabelValuePairs){
            	HX_STACKFRAME(&_hx_pos_85c2c6c527e56776_588_getDebugString)
HXLINE( 589)		::String output = HX_("(",28,00,00,00);
HXLINE( 590)		{
HXLINE( 590)			int _g = 0;
HXDLIN( 590)			while((_g < LabelValuePairs->length)){
HXLINE( 590)				 ::flixel::util::LabelValuePair pair = LabelValuePairs->__get(_g).StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 590)				_g = (_g + 1);
HXLINE( 592)				output = (output + (pair->label + HX_(": ",a6,32,00,00)));
HXLINE( 593)				 ::Dynamic value = pair->value;
HXLINE( 594)				if (::Std_obj::isOfType(value,::hx::ClassOf< ::Float >())) {
HXLINE( 596)					value = ::flixel::math::FlxMath_obj::roundDecimal(( (Float)(value) ),::flixel::FlxG_obj::debugger->precision);
            				}
HXLINE( 598)				output = (output + (::Std_obj::string(value) + HX_(" | ",44,b4,18,00)));
HXLINE( 599)				::flixel::util::LabelValuePair_obj::_pool->put(pair);
            			}
            		}
HXLINE( 602)		output = ::StringTools_obj::trim(output.substr(0,(output.length - 2)));
HXLINE( 603)		return (output + HX_(")",29,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxStringUtil_obj,getDebugString,return )


FlxStringUtil_obj::FlxStringUtil_obj()
{
}

bool FlxStringUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"formatTime") ) { outValue = formatTime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toIntArray") ) { outValue = toIntArray_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getClassName") ) { outValue = getClassName_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"formatPackage") ) { outValue = formatPackage_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getDebugString") ) { outValue = getDebugString_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxStringUtil_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlxStringUtil_obj_sStaticStorageInfo = 0;
#endif

::hx::Class FlxStringUtil_obj::__mClass;

static ::String FlxStringUtil_obj_sStaticFields[] = {
	HX_("formatTime",e4,ee,61,0c),
	HX_("getClassName",2d,2f,94,eb),
	HX_("formatPackage",0f,29,ca,76),
	HX_("toIntArray",c5,22,29,e0),
	HX_("getDebugString",8e,42,41,a1),
	::String(null())
};

void FlxStringUtil_obj::__register()
{
	FlxStringUtil_obj _hx_dummy;
	FlxStringUtil_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.util.FlxStringUtil",cb,21,bd,03);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxStringUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxStringUtil_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxStringUtil_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxStringUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxStringUtil_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace util
