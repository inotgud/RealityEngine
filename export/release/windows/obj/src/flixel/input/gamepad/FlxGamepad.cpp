// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxAnalogToDigitalMode
#include <flixel/input/gamepad/FlxAnalogToDigitalMode.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAnalogStick
#include <flixel/input/gamepad/FlxGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAttachment
#include <flixel/input/gamepad/FlxGamepadAttachment.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadDeadZoneMode
#include <flixel/input/gamepad/FlxGamepadDeadZoneMode.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadModel
#include <flixel/input/gamepad/FlxGamepadModel.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadAnalogList
#include <flixel/input/gamepad/lists/FlxGamepadAnalogList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadMotionValueList
#include <flixel/input/gamepad/lists/FlxGamepadMotionValueList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadPointerValueList
#include <flixel/input/gamepad/lists/FlxGamepadPointerValueList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_LogitechMapping
#include <flixel/input/gamepad/mappings/LogitechMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_MFiMapping
#include <flixel/input/gamepad/mappings/MFiMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_MayflashWiiRemoteMapping
#include <flixel/input/gamepad/mappings/MayflashWiiRemoteMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_OUYAMapping
#include <flixel/input/gamepad/mappings/OUYAMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_PS4Mapping
#include <flixel/input/gamepad/mappings/PS4Mapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_PSVitaMapping
#include <flixel/input/gamepad/mappings/PSVitaMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_SwitchJoyconLeftMapping
#include <flixel/input/gamepad/mappings/SwitchJoyconLeftMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_SwitchJoyconRightMapping
#include <flixel/input/gamepad/mappings/SwitchJoyconRightMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_SwitchProMapping
#include <flixel/input/gamepad/mappings/SwitchProMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_WiiRemoteMapping
#include <flixel/input/gamepad/mappings/WiiRemoteMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_XInputMapping
#include <flixel/input/gamepad/mappings/XInputMapping.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_ui_GameInputControl
#include <openfl/ui/GameInputControl.h>
#endif
#ifndef INCLUDED_openfl_ui_GameInputDevice
#include <openfl/ui/GameInputDevice.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0a9014dd1064fc14_32_new,"flixel.input.gamepad.FlxGamepad","new",0x48c92544,"flixel.input.gamepad.FlxGamepad.new","flixel/input/gamepad/FlxGamepad.hx",32,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_174_getButton,"flixel.input.gamepad.FlxGamepad","getButton",0xf881030c,"flixel.input.gamepad.FlxGamepad.getButton","flixel/input/gamepad/FlxGamepad.hx",174,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_199_update,"flixel.input.gamepad.FlxGamepad","update",0x525157a5,"flixel.input.gamepad.FlxGamepad.update","flixel/input/gamepad/FlxGamepad.hx",199,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_265_reset,"flixel.input.gamepad.FlxGamepad","reset",0x36e79fb3,"flixel.input.gamepad.FlxGamepad.reset","flixel/input/gamepad/FlxGamepad.hx",265,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_288_destroy,"flixel.input.gamepad.FlxGamepad","destroy",0x3b91c3de,"flixel.input.gamepad.FlxGamepad.destroy","flixel/input/gamepad/FlxGamepad.hx",288,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_342_checkButtonArrayState,"flixel.input.gamepad.FlxGamepad","checkButtonArrayState",0x928c7916,"flixel.input.gamepad.FlxGamepad.checkButtonArrayState","flixel/input/gamepad/FlxGamepad.hx",342,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_485_firstJustPressedRawID,"flixel.input.gamepad.FlxGamepad","firstJustPressedRawID",0xcc1cec41,"flixel.input.gamepad.FlxGamepad.firstJustPressedRawID","flixel/input/gamepad/FlxGamepad.hx",485,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_529_getAxis,"flixel.input.gamepad.FlxGamepad","getAxis",0x2a07633b,"flixel.input.gamepad.FlxGamepad.getAxis","flixel/input/gamepad/FlxGamepad.hx",529,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_567_isAxisForAnalogStick,"flixel.input.gamepad.FlxGamepad","isAxisForAnalogStick",0x770b861e,"flixel.input.gamepad.FlxGamepad.isAxisForAnalogStick","flixel/input/gamepad/FlxGamepad.hx",567,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_628_getYAxisRaw,"flixel.input.gamepad.FlxGamepad","getYAxisRaw",0xd4d1ffe8,"flixel.input.gamepad.FlxGamepad.getYAxisRaw","flixel/input/gamepad/FlxGamepad.hx",628,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_646_anyButton,"flixel.input.gamepad.FlxGamepad","anyButton",0xd989e1e2,"flixel.input.gamepad.FlxGamepad.anyButton","flixel/input/gamepad/FlxGamepad.hx",646,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_661_anyInput,"flixel.input.gamepad.FlxGamepad","anyInput",0x4fe8921a,"flixel.input.gamepad.FlxGamepad.anyInput","flixel/input/gamepad/FlxGamepad.hx",661,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_691_getAxisValue,"flixel.input.gamepad.FlxGamepad","getAxisValue",0xcd45f636,"flixel.input.gamepad.FlxGamepad.getAxisValue","flixel/input/gamepad/FlxGamepad.hx",691,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_721_getAnalogXAxisValue,"flixel.input.gamepad.FlxGamepad","getAnalogXAxisValue",0xef30b762,"flixel.input.gamepad.FlxGamepad.getAnalogXAxisValue","flixel/input/gamepad/FlxGamepad.hx",721,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_731_getAnalogYAxisValue,"flixel.input.gamepad.FlxGamepad","getAnalogYAxisValue",0xaf7b2f41,"flixel.input.gamepad.FlxGamepad.getAnalogYAxisValue","flixel/input/gamepad/FlxGamepad.hx",731,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_741_getAnalogAxisValueCircular,"flixel.input.gamepad.FlxGamepad","getAnalogAxisValueCircular",0x954ad2e5,"flixel.input.gamepad.FlxGamepad.getAnalogAxisValueCircular","flixel/input/gamepad/FlxGamepad.hx",741,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_759_getAnalogAxisValueIndependent,"flixel.input.gamepad.FlxGamepad","getAnalogAxisValueIndependent",0x41d504b4,"flixel.input.gamepad.FlxGamepad.getAnalogAxisValueIndependent","flixel/input/gamepad/FlxGamepad.hx",759,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_767_handleAxisMove,"flixel.input.gamepad.FlxGamepad","handleAxisMove",0x0dec85b6,"flixel.input.gamepad.FlxGamepad.handleAxisMove","flixel/input/gamepad/FlxGamepad.hx",767,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_786_handleAxisMoveSub,"flixel.input.gamepad.FlxGamepad","handleAxisMoveSub",0xcf80d16a,"flixel.input.gamepad.FlxGamepad.handleAxisMoveSub","flixel/input/gamepad/FlxGamepad.hx",786,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_818_createMappingForModel,"flixel.input.gamepad.FlxGamepad","createMappingForModel",0x1a17db56,"flixel.input.gamepad.FlxGamepad.createMappingForModel","flixel/input/gamepad/FlxGamepad.hx",818,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_846_set_model,"flixel.input.gamepad.FlxGamepad","set_model",0xd59c83f0,"flixel.input.gamepad.FlxGamepad.set_model","flixel/input/gamepad/FlxGamepad.hx",846,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_862_get_deadZone,"flixel.input.gamepad.FlxGamepad","get_deadZone",0x3fdae195,"flixel.input.gamepad.FlxGamepad.get_deadZone","flixel/input/gamepad/FlxGamepad.hx",862,0xdb78a809)
namespace flixel{
namespace input{
namespace gamepad{

void FlxGamepad_obj::__construct(int ID, ::flixel::input::gamepad::FlxGamepadManager Manager, ::flixel::input::gamepad::FlxGamepadModel Model, ::flixel::input::gamepad::FlxGamepadAttachment Attachment){
            	HX_GC_STACKFRAME(&_hx_pos_0a9014dd1064fc14_32_new)
HXLINE( 137)		this->buttons = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 131)		this->_deadZone = ((Float)0.15);
HXLINE( 127)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 127)		{
HXLINE( 127)			_g->push(0);
HXDLIN( 127)			_g->push(0);
HXDLIN( 127)			_g->push(0);
HXDLIN( 127)			_g->push(0);
HXDLIN( 127)			_g->push(0);
HXDLIN( 127)			_g->push(0);
            		}
HXDLIN( 127)		this->axis = _g;
HXLINE(  84)		this->deadZoneMode = ::flixel::input::gamepad::FlxGamepadDeadZoneMode_obj::INDEPENDENT_AXES_dyn();
HXLINE(  61)		this->connected = true;
HXLINE( 141)		this->id = ID;
HXLINE( 143)		this->manager = Manager;
HXLINE( 145)		this->pressed =  ::flixel::input::gamepad::lists::FlxGamepadButtonList_obj::__alloc( HX_CTX ,1,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 146)		this->released =  ::flixel::input::gamepad::lists::FlxGamepadButtonList_obj::__alloc( HX_CTX ,0,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 147)		this->justPressed =  ::flixel::input::gamepad::lists::FlxGamepadButtonList_obj::__alloc( HX_CTX ,2,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 148)		this->justReleased =  ::flixel::input::gamepad::lists::FlxGamepadButtonList_obj::__alloc( HX_CTX ,-1,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 149)		this->analog =  ::flixel::input::gamepad::lists::FlxGamepadAnalogList_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 150)		this->motion =  ::flixel::input::gamepad::lists::FlxGamepadMotionValueList_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 151)		this->pointer =  ::flixel::input::gamepad::lists::FlxGamepadPointerValueList_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 153)		if (::hx::IsNull( Model )) {
HXLINE( 162)			Model = ::flixel::input::gamepad::FlxGamepadModel_obj::XINPUT_dyn();
            		}
HXLINE( 166)		if (::hx::IsNull( Attachment )) {
HXLINE( 167)			Attachment = ::flixel::input::gamepad::FlxGamepadAttachment_obj::NONE_dyn();
            		}
HXLINE( 169)		this->set_model(Model);
HXLINE( 170)		this->detectedModel = Model;
            	}

Dynamic FlxGamepad_obj::__CreateEmpty() { return new FlxGamepad_obj; }

void *FlxGamepad_obj::_hx_vtable = 0;

Dynamic FlxGamepad_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxGamepad_obj > _hx_result = new FlxGamepad_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxGamepad_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x38588e22;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_input_gamepad_FlxGamepad__hx_flixel_util_IFlxDestroyable= {
	( void (::hx::Object::*)())&::flixel::input::gamepad::FlxGamepad_obj::destroy,
};

void *FlxGamepad_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_input_gamepad_FlxGamepad__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::flixel::input::gamepad::FlxGamepadButton FlxGamepad_obj::getButton(int RawID){
            	HX_GC_STACKFRAME(&_hx_pos_0a9014dd1064fc14_174_getButton)
HXLINE( 175)		if ((RawID == -1)) {
HXLINE( 176)			return null();
            		}
HXLINE( 177)		 ::flixel::input::gamepad::FlxGamepadButton gamepadButton = this->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXLINE( 179)		if (::hx::IsNull( gamepadButton )) {
HXLINE( 181)			gamepadButton =  ::flixel::input::gamepad::FlxGamepadButton_obj::__alloc( HX_CTX ,RawID);
HXLINE( 182)			this->buttons[RawID] = gamepadButton;
            		}
HXLINE( 185)		return gamepadButton;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getButton,return )

void FlxGamepad_obj::update(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_199_update)
HXLINE( 201)		 ::openfl::ui::GameInputControl control;
HXLINE( 202)		 ::flixel::input::gamepad::FlxGamepadButton button;
HXLINE( 204)		if (::hx::IsNull( this->_device )) {
HXLINE( 205)			return;
            		}
HXLINE( 207)		{
HXLINE( 207)			int _g = 0;
HXDLIN( 207)			int _g1 = this->_device->get_numControls();
HXDLIN( 207)			while((_g < _g1)){
HXLINE( 207)				_g = (_g + 1);
HXDLIN( 207)				int i = (_g - 1);
HXLINE( 209)				control = this->_device->getControlAt(i);
HXLINE( 212)				button = this->getButton(i);
HXLINE( 214)				if (this->isAxisForAnalogStick(i)) {
HXLINE( 216)					this->handleAxisMove(i,control->value,button->value);
            				}
HXLINE( 219)				button->value = control->value;
HXLINE( 221)				Float value = ::Math_obj::abs(control->value);
HXLINE( 223)				if ((value < this->get_deadZone())) {
HXLINE( 225)					button->release();
            				}
            				else {
HXLINE( 227)					if ((value > this->get_deadZone())) {
HXLINE( 229)						button->press();
            					}
            				}
            			}
            		}
HXLINE( 255)		{
HXLINE( 255)			int _g2 = 0;
HXDLIN( 255)			::Array< ::Dynamic> _g3 = this->buttons;
HXDLIN( 255)			while((_g2 < _g3->length)){
HXLINE( 255)				 ::flixel::input::gamepad::FlxGamepadButton button = _g3->__get(_g2).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 255)				_g2 = (_g2 + 1);
HXLINE( 257)				if (::hx::IsNotNull( button )) {
HXLINE( 259)					button->update();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,update,(void))

void FlxGamepad_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_265_reset)
HXLINE( 266)		{
HXLINE( 266)			int _g = 0;
HXDLIN( 266)			::Array< ::Dynamic> _g1 = this->buttons;
HXDLIN( 266)			while((_g < _g1->length)){
HXLINE( 266)				 ::flixel::input::gamepad::FlxGamepadButton button = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 266)				_g = (_g + 1);
HXLINE( 268)				if (::hx::IsNotNull( button )) {
HXLINE( 270)					button->reset();
            				}
            			}
            		}
HXLINE( 274)		int numAxis = this->axis->length;
HXLINE( 276)		{
HXLINE( 276)			int _g2 = 0;
HXDLIN( 276)			int _g3 = numAxis;
HXDLIN( 276)			while((_g2 < _g3)){
HXLINE( 276)				_g2 = (_g2 + 1);
HXDLIN( 276)				int i = (_g2 - 1);
HXLINE( 278)				this->axis[i] = ( (Float)(0) );
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,reset,(void))

void FlxGamepad_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_288_destroy)
HXLINE( 289)		this->connected = false;
HXLINE( 291)		this->buttons = null();
HXLINE( 292)		this->axis = null();
HXLINE( 293)		this->manager = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,destroy,(void))

bool FlxGamepad_obj::checkButtonArrayState(::Array< int > IDArray,int Status){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_342_checkButtonArrayState)
HXLINE( 343)		if (::hx::IsNull( IDArray )) {
HXLINE( 345)			return false;
            		}
HXLINE( 348)		{
HXLINE( 348)			int _g = 0;
HXDLIN( 348)			while((_g < IDArray->length)){
HXLINE( 348)				int code = IDArray->__get(_g);
HXDLIN( 348)				_g = (_g + 1);
HXLINE( 350)				bool _hx_tmp;
HXDLIN( 350)				switch((int)(code)){
            					case (int)-2: {
HXLINE( 350)						_hx_tmp = this->anyButton(Status);
            					}
            					break;
            					case (int)-1: {
HXLINE( 350)						_hx_tmp = !(this->anyButton(Status));
            					}
            					break;
            					default:{
HXLINE( 350)						int RawID = this->mapping->getRawID(code);
HXDLIN( 350)						 ::flixel::input::gamepad::FlxGamepadButton button = this->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 350)						if (::hx::IsNotNull( button )) {
HXLINE( 350)							_hx_tmp = button->hasState(Status);
            						}
            						else {
HXLINE( 350)							_hx_tmp = false;
            						}
            					}
            				}
HXDLIN( 350)				if (_hx_tmp) {
HXLINE( 351)					return true;
            				}
            			}
            		}
HXLINE( 354)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepad_obj,checkButtonArrayState,return )

int FlxGamepad_obj::firstJustPressedRawID(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_485_firstJustPressedRawID)
HXLINE( 486)		{
HXLINE( 486)			int _g = 0;
HXDLIN( 486)			::Array< ::Dynamic> _g1 = this->buttons;
HXDLIN( 486)			while((_g < _g1->length)){
HXLINE( 486)				 ::flixel::input::gamepad::FlxGamepadButton button = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 486)				_g = (_g + 1);
HXLINE( 488)				bool _hx_tmp;
HXDLIN( 488)				if (::hx::IsNotNull( button )) {
HXLINE( 488)					_hx_tmp = (button->current == 2);
            				}
            				else {
HXLINE( 488)					_hx_tmp = false;
            				}
HXDLIN( 488)				if (_hx_tmp) {
HXLINE( 490)					return ( (int)(button->ID) );
            				}
            			}
            		}
HXLINE( 493)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstJustPressedRawID,return )

Float FlxGamepad_obj::getAxis(int AxisButtonID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_529_getAxis)
HXDLIN( 529)		Float axisValue = this->getAxisValue(this->mapping->getRawID(AxisButtonID));
HXDLIN( 529)		Float _hx_tmp = ::Math_obj::abs(axisValue);
HXDLIN( 529)		if ((_hx_tmp > this->get_deadZone())) {
HXDLIN( 529)			return axisValue;
            		}
            		else {
HXDLIN( 529)			return ( (Float)(0) );
            		}
HXDLIN( 529)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAxis,return )

bool FlxGamepad_obj::isAxisForAnalogStick(int AxisIndex){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_567_isAxisForAnalogStick)
HXLINE( 568)		 ::flixel::input::gamepad::FlxGamepadAnalogStick leftStick = this->mapping->leftStick;
HXLINE( 569)		 ::flixel::input::gamepad::FlxGamepadAnalogStick rightStick = this->mapping->rightStick;
HXLINE( 571)		if (::hx::IsNotNull( leftStick )) {
HXLINE( 573)			bool _hx_tmp;
HXDLIN( 573)			if ((AxisIndex != leftStick->x)) {
HXLINE( 573)				_hx_tmp = (AxisIndex == leftStick->y);
            			}
            			else {
HXLINE( 573)				_hx_tmp = true;
            			}
HXDLIN( 573)			if (_hx_tmp) {
HXLINE( 574)				return true;
            			}
            		}
HXLINE( 576)		if (::hx::IsNotNull( rightStick )) {
HXLINE( 578)			bool _hx_tmp;
HXDLIN( 578)			if ((AxisIndex != rightStick->x)) {
HXLINE( 578)				_hx_tmp = (AxisIndex == rightStick->y);
            			}
            			else {
HXLINE( 578)				_hx_tmp = true;
            			}
HXDLIN( 578)			if (_hx_tmp) {
HXLINE( 579)				return true;
            			}
            		}
HXLINE( 581)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,isAxisForAnalogStick,return )

Float FlxGamepad_obj::getYAxisRaw( ::flixel::input::gamepad::FlxGamepadAnalogStick Stick){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_628_getYAxisRaw)
HXDLIN( 628)		return this->getAnalogYAxisValue(Stick);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getYAxisRaw,return )

bool FlxGamepad_obj::anyButton(::hx::Null< int >  __o_state){
            		int state = __o_state.Default(1);
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_646_anyButton)
HXLINE( 647)		{
HXLINE( 647)			int _g = 0;
HXDLIN( 647)			::Array< ::Dynamic> _g1 = this->buttons;
HXDLIN( 647)			while((_g < _g1->length)){
HXLINE( 647)				 ::flixel::input::gamepad::FlxGamepadButton button = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 647)				_g = (_g + 1);
HXLINE( 649)				bool _hx_tmp;
HXDLIN( 649)				if (::hx::IsNotNull( button )) {
HXLINE( 649)					_hx_tmp = button->hasState(state);
            				}
            				else {
HXLINE( 649)					_hx_tmp = false;
            				}
HXDLIN( 649)				if (_hx_tmp) {
HXLINE( 651)					return true;
            				}
            			}
            		}
HXLINE( 654)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyButton,return )

bool FlxGamepad_obj::anyInput(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_661_anyInput)
HXLINE( 662)		if (this->anyButton(null())) {
HXLINE( 663)			return true;
            		}
HXLINE( 665)		int numAxis = this->axis->length;
HXLINE( 667)		{
HXLINE( 667)			int _g = 0;
HXDLIN( 667)			int _g1 = numAxis;
HXDLIN( 667)			while((_g < _g1)){
HXLINE( 667)				_g = (_g + 1);
HXDLIN( 667)				int i = (_g - 1);
HXLINE( 669)				if ((this->axis->__get(0) != 0)) {
HXLINE( 671)					return true;
            				}
            			}
            		}
HXLINE( 687)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,anyInput,return )

Float FlxGamepad_obj::getAxisValue(int AxisID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_691_getAxisValue)
HXLINE( 692)		Float axisValue = ( (Float)(0) );
HXLINE( 695)		if ((AxisID == -1)) {
HXLINE( 697)			return ( (Float)(0) );
            		}
HXLINE( 699)		bool _hx_tmp;
HXDLIN( 699)		bool _hx_tmp1;
HXDLIN( 699)		if (::hx::IsNotNull( this->_device )) {
HXLINE( 699)			_hx_tmp1 = this->_device->enabled;
            		}
            		else {
HXLINE( 699)			_hx_tmp1 = false;
            		}
HXDLIN( 699)		if (_hx_tmp1) {
HXLINE( 699)			 ::Dynamic Max = (this->_device->get_numControls() - 1);
HXDLIN( 699)			if ((AxisID >= 0)) {
HXLINE( 699)				if (::hx::IsNotNull( Max )) {
HXLINE( 699)					_hx_tmp = ::hx::IsLessEq( AxisID,Max );
            				}
            				else {
HXLINE( 699)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 699)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 699)			_hx_tmp = false;
            		}
HXDLIN( 699)		if (_hx_tmp) {
HXLINE( 701)			axisValue = this->_device->getControlAt(AxisID)->value;
            		}
HXLINE( 712)		if (this->isAxisForAnalogStick(AxisID)) {
HXLINE( 714)			Float axisValue1 = axisValue;
HXDLIN( 714)			if (this->mapping->isAxisFlipped(AxisID)) {
HXLINE( 714)				axisValue1 = (axisValue1 * ( (Float)(-1) ));
            			}
HXDLIN( 714)			axisValue = axisValue1;
            		}
HXLINE( 717)		return axisValue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAxisValue,return )

Float FlxGamepad_obj::getAnalogXAxisValue( ::flixel::input::gamepad::FlxGamepadAnalogStick stick){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_721_getAnalogXAxisValue)
HXLINE( 722)		if (::hx::IsNull( stick )) {
HXLINE( 723)			return ( (Float)(0) );
            		}
HXLINE( 724)		if (::hx::IsEq( this->deadZoneMode,::flixel::input::gamepad::FlxGamepadDeadZoneMode_obj::CIRCULAR_dyn() )) {
HXLINE( 725)			return this->getAnalogAxisValueCircular(stick,stick->x);
            		}
            		else {
HXLINE( 727)			return this->getAnalogAxisValueIndependent(stick->x);
            		}
HXLINE( 724)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogXAxisValue,return )

Float FlxGamepad_obj::getAnalogYAxisValue( ::flixel::input::gamepad::FlxGamepadAnalogStick stick){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_731_getAnalogYAxisValue)
HXLINE( 732)		if (::hx::IsNull( stick )) {
HXLINE( 733)			return ( (Float)(0) );
            		}
HXLINE( 734)		if (::hx::IsEq( this->deadZoneMode,::flixel::input::gamepad::FlxGamepadDeadZoneMode_obj::CIRCULAR_dyn() )) {
HXLINE( 735)			return this->getAnalogAxisValueCircular(stick,stick->y);
            		}
            		else {
HXLINE( 737)			return this->getAnalogAxisValueIndependent(stick->y);
            		}
HXLINE( 734)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogYAxisValue,return )

Float FlxGamepad_obj::getAnalogAxisValueCircular( ::flixel::input::gamepad::FlxGamepadAnalogStick stick,int axisID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_741_getAnalogAxisValueCircular)
HXLINE( 742)		if (::hx::IsNull( stick )) {
HXLINE( 743)			return ( (Float)(0) );
            		}
HXLINE( 744)		Float xAxis = this->getAxisValue(stick->x);
HXLINE( 745)		Float yAxis = this->getAxisValue(stick->y);
HXLINE( 747)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(xAxis,yAxis);
HXDLIN( 747)		point->_inPool = false;
HXDLIN( 747)		 ::flixel::math::FlxPoint vector = point;
HXLINE( 748)		Float length = ::Math_obj::sqrt(((vector->x * vector->x) + (vector->y * vector->y)));
HXLINE( 749)		vector->put();
HXLINE( 751)		if ((length > this->get_deadZone())) {
HXLINE( 753)			return this->getAxisValue(axisID);
            		}
HXLINE( 755)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepad_obj,getAnalogAxisValueCircular,return )

Float FlxGamepad_obj::getAnalogAxisValueIndependent(int axisID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_759_getAnalogAxisValueIndependent)
HXLINE( 760)		Float axisValue = this->getAxisValue(axisID);
HXLINE( 761)		Float _hx_tmp = ::Math_obj::abs(axisValue);
HXDLIN( 761)		if ((_hx_tmp > this->get_deadZone())) {
HXLINE( 762)			return axisValue;
            		}
HXLINE( 763)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogAxisValueIndependent,return )

void FlxGamepad_obj::handleAxisMove(int axis,Float newValue,Float oldValue){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_767_handleAxisMove)
HXLINE( 768)		Float axisValue = newValue;
HXDLIN( 768)		if (this->mapping->isAxisFlipped(axis)) {
HXLINE( 768)			axisValue = (axisValue * ( (Float)(-1) ));
            		}
HXDLIN( 768)		newValue = axisValue;
HXLINE( 769)		Float axisValue1 = oldValue;
HXDLIN( 769)		if (this->mapping->isAxisFlipped(axis)) {
HXLINE( 769)			axisValue1 = (axisValue1 * ( (Float)(-1) ));
            		}
HXDLIN( 769)		oldValue = axisValue1;
HXLINE( 772)		 ::flixel::input::gamepad::FlxGamepadAnalogStick leftStick = this->mapping->leftStick;
HXDLIN( 772)		 ::flixel::input::gamepad::FlxGamepadAnalogStick rightStick = this->mapping->rightStick;
HXDLIN( 772)		 ::flixel::input::gamepad::FlxGamepadAnalogStick stick;
HXDLIN( 772)		bool stick1;
HXDLIN( 772)		bool stick2;
HXDLIN( 772)		if (::hx::IsNotNull( leftStick )) {
HXLINE( 772)			stick2 = (axis == leftStick->x);
            		}
            		else {
HXLINE( 772)			stick2 = false;
            		}
HXDLIN( 772)		if (!(stick2)) {
HXLINE( 772)			stick1 = (axis == leftStick->y);
            		}
            		else {
HXLINE( 772)			stick1 = true;
            		}
HXDLIN( 772)		if (stick1) {
HXLINE( 772)			stick = leftStick;
            		}
            		else {
HXLINE( 772)			bool stick1;
HXDLIN( 772)			bool stick2;
HXDLIN( 772)			if (::hx::IsNotNull( rightStick )) {
HXLINE( 772)				stick2 = (axis == rightStick->x);
            			}
            			else {
HXLINE( 772)				stick2 = false;
            			}
HXDLIN( 772)			if (!(stick2)) {
HXLINE( 772)				stick1 = (axis == rightStick->y);
            			}
            			else {
HXLINE( 772)				stick1 = true;
            			}
HXDLIN( 772)			if (stick1) {
HXLINE( 772)				stick = rightStick;
            			}
            			else {
HXLINE( 772)				stick = null();
            			}
            		}
HXDLIN( 772)		 ::flixel::input::gamepad::FlxGamepadAnalogStick stick3 = stick;
HXLINE( 773)		bool _hx_tmp;
HXDLIN( 773)		if (::hx::IsNotEq( stick3->mode,::flixel::input::gamepad::FlxAnalogToDigitalMode_obj::ONLY_DIGITAL_dyn() )) {
HXLINE( 773)			_hx_tmp = ::hx::IsEq( stick3->mode,::flixel::input::gamepad::FlxAnalogToDigitalMode_obj::BOTH_dyn() );
            		}
            		else {
HXLINE( 773)			_hx_tmp = true;
            		}
HXDLIN( 773)		if (_hx_tmp) {
HXLINE( 775)			this->handleAxisMoveSub(stick3,axis,newValue,oldValue,((Float)1.0));
HXLINE( 776)			this->handleAxisMoveSub(stick3,axis,newValue,oldValue,((Float)-1.0));
HXLINE( 778)			bool _hx_tmp = ::hx::IsEq( stick3->mode,::flixel::input::gamepad::FlxAnalogToDigitalMode_obj::ONLY_DIGITAL_dyn() );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxGamepad_obj,handleAxisMove,(void))

void FlxGamepad_obj::handleAxisMoveSub( ::flixel::input::gamepad::FlxGamepadAnalogStick stick,int axis,Float value,Float oldValue,::hx::Null< Float >  __o_sign){
            		Float sign = __o_sign.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_786_handleAxisMoveSub)
HXLINE( 787)		int digitalButton = -1;
HXLINE( 789)		if ((axis == stick->x)) {
HXLINE( 791)			if ((sign < 0)) {
HXLINE( 791)				digitalButton = stick->rawLeft;
            			}
            			else {
HXLINE( 791)				digitalButton = stick->rawRight;
            			}
            		}
            		else {
HXLINE( 793)			if ((axis == stick->y)) {
HXLINE( 795)				if ((sign < 0)) {
HXLINE( 795)					digitalButton = stick->rawUp;
            				}
            				else {
HXLINE( 795)					digitalButton = stick->rawDown;
            				}
            			}
            		}
HXLINE( 798)		Float threshold = stick->digitalThreshold;
HXLINE( 799)		Float valueSign = (value * sign);
HXLINE( 800)		Float oldValueSign = (oldValue * sign);
HXLINE( 802)		bool _hx_tmp;
HXDLIN( 802)		if ((valueSign > threshold)) {
HXLINE( 802)			_hx_tmp = (oldValueSign <= threshold);
            		}
            		else {
HXLINE( 802)			_hx_tmp = false;
            		}
HXDLIN( 802)		if (_hx_tmp) {
HXLINE( 804)			 ::flixel::input::gamepad::FlxGamepadButton btn = this->getButton(digitalButton);
HXLINE( 805)			if (::hx::IsNotNull( btn )) {
HXLINE( 806)				btn->press();
            			}
            		}
            		else {
HXLINE( 808)			bool _hx_tmp;
HXDLIN( 808)			if ((valueSign <= threshold)) {
HXLINE( 808)				_hx_tmp = (oldValueSign > threshold);
            			}
            			else {
HXLINE( 808)				_hx_tmp = false;
            			}
HXDLIN( 808)			if (_hx_tmp) {
HXLINE( 810)				 ::flixel::input::gamepad::FlxGamepadButton btn = this->getButton(digitalButton);
HXLINE( 811)				if (::hx::IsNotNull( btn )) {
HXLINE( 812)					btn->release();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxGamepad_obj,handleAxisMoveSub,(void))

 ::flixel::input::gamepad::mappings::FlxGamepadMapping FlxGamepad_obj::createMappingForModel( ::flixel::input::gamepad::FlxGamepadModel model){
            	HX_GC_STACKFRAME(&_hx_pos_0a9014dd1064fc14_818_createMappingForModel)
HXDLIN( 818)		switch((int)(model->_hx_getIndex())){
            			case (int)0: {
HXLINE( 820)				return  ::flixel::input::gamepad::mappings::LogitechMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)1: {
HXLINE( 821)				return  ::flixel::input::gamepad::mappings::OUYAMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)2: {
HXLINE( 822)				return  ::flixel::input::gamepad::mappings::PS4Mapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)3: {
HXLINE( 823)				return  ::flixel::input::gamepad::mappings::PSVitaMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)4: {
HXLINE( 824)				return  ::flixel::input::gamepad::mappings::XInputMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)5: {
HXLINE( 825)				return  ::flixel::input::gamepad::mappings::MayflashWiiRemoteMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)6: {
HXLINE( 826)				return  ::flixel::input::gamepad::mappings::WiiRemoteMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)7: {
HXLINE( 827)				return  ::flixel::input::gamepad::mappings::MFiMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)8: {
HXLINE( 828)				return  ::flixel::input::gamepad::mappings::SwitchProMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)9: {
HXLINE( 829)				return  ::flixel::input::gamepad::mappings::SwitchJoyconLeftMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)10: {
HXLINE( 830)				return  ::flixel::input::gamepad::mappings::SwitchJoyconRightMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			default:{
HXLINE( 832)				return  ::flixel::input::gamepad::mappings::XInputMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            		}
HXLINE( 818)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,createMappingForModel,return )

 ::flixel::input::gamepad::FlxGamepadModel FlxGamepad_obj::set_model( ::flixel::input::gamepad::FlxGamepadModel Model){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_846_set_model)
HXLINE( 847)		this->model = Model;
HXLINE( 848)		this->mapping = this->createMappingForModel(this->model);
HXLINE( 850)		return this->model;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,set_model,return )

Float FlxGamepad_obj::get_deadZone(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_862_get_deadZone)
HXDLIN( 862)		bool _hx_tmp;
HXDLIN( 862)		if (::hx::IsNotNull( this->manager )) {
HXDLIN( 862)			_hx_tmp = ::hx::IsNull( this->manager->globalDeadZone );
            		}
            		else {
HXDLIN( 862)			_hx_tmp = true;
            		}
HXDLIN( 862)		if (_hx_tmp) {
HXDLIN( 862)			return this->_deadZone;
            		}
            		else {
HXDLIN( 862)			return ( (Float)(this->manager->globalDeadZone) );
            		}
HXDLIN( 862)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,get_deadZone,return )


::hx::ObjectPtr< FlxGamepad_obj > FlxGamepad_obj::__new(int ID, ::flixel::input::gamepad::FlxGamepadManager Manager, ::flixel::input::gamepad::FlxGamepadModel Model, ::flixel::input::gamepad::FlxGamepadAttachment Attachment) {
	::hx::ObjectPtr< FlxGamepad_obj > __this = new FlxGamepad_obj();
	__this->__construct(ID,Manager,Model,Attachment);
	return __this;
}

::hx::ObjectPtr< FlxGamepad_obj > FlxGamepad_obj::__alloc(::hx::Ctx *_hx_ctx,int ID, ::flixel::input::gamepad::FlxGamepadManager Manager, ::flixel::input::gamepad::FlxGamepadModel Model, ::flixel::input::gamepad::FlxGamepadAttachment Attachment) {
	FlxGamepad_obj *__this = (FlxGamepad_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxGamepad_obj), true, "flixel.input.gamepad.FlxGamepad"));
	*(void **)__this = FlxGamepad_obj::_hx_vtable;
	__this->__construct(ID,Manager,Model,Attachment);
	return __this;
}

FlxGamepad_obj::FlxGamepad_obj()
{
}

void FlxGamepad_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxGamepad);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(model,"model");
	HX_MARK_MEMBER_NAME(detectedModel,"detectedModel");
	HX_MARK_MEMBER_NAME(mapping,"mapping");
	HX_MARK_MEMBER_NAME(connected,"connected");
	HX_MARK_MEMBER_NAME(attachment,"attachment");
	HX_MARK_MEMBER_NAME(deadZoneMode,"deadZoneMode");
	HX_MARK_MEMBER_NAME(pressed,"pressed");
	HX_MARK_MEMBER_NAME(released,"released");
	HX_MARK_MEMBER_NAME(justPressed,"justPressed");
	HX_MARK_MEMBER_NAME(justReleased,"justReleased");
	HX_MARK_MEMBER_NAME(analog,"analog");
	HX_MARK_MEMBER_NAME(motion,"motion");
	HX_MARK_MEMBER_NAME(pointer,"pointer");
	HX_MARK_MEMBER_NAME(axis,"axis");
	HX_MARK_MEMBER_NAME(manager,"manager");
	HX_MARK_MEMBER_NAME(_deadZone,"_deadZone");
	HX_MARK_MEMBER_NAME(_device,"_device");
	HX_MARK_MEMBER_NAME(buttons,"buttons");
	HX_MARK_END_CLASS();
}

void FlxGamepad_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(model,"model");
	HX_VISIT_MEMBER_NAME(detectedModel,"detectedModel");
	HX_VISIT_MEMBER_NAME(mapping,"mapping");
	HX_VISIT_MEMBER_NAME(connected,"connected");
	HX_VISIT_MEMBER_NAME(attachment,"attachment");
	HX_VISIT_MEMBER_NAME(deadZoneMode,"deadZoneMode");
	HX_VISIT_MEMBER_NAME(pressed,"pressed");
	HX_VISIT_MEMBER_NAME(released,"released");
	HX_VISIT_MEMBER_NAME(justPressed,"justPressed");
	HX_VISIT_MEMBER_NAME(justReleased,"justReleased");
	HX_VISIT_MEMBER_NAME(analog,"analog");
	HX_VISIT_MEMBER_NAME(motion,"motion");
	HX_VISIT_MEMBER_NAME(pointer,"pointer");
	HX_VISIT_MEMBER_NAME(axis,"axis");
	HX_VISIT_MEMBER_NAME(manager,"manager");
	HX_VISIT_MEMBER_NAME(_deadZone,"_deadZone");
	HX_VISIT_MEMBER_NAME(_device,"_device");
	HX_VISIT_MEMBER_NAME(buttons,"buttons");
}

::hx::Val FlxGamepad_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"axis") ) { return ::hx::Val( axis ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { return ::hx::Val( model ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"analog") ) { return ::hx::Val( analog ); }
		if (HX_FIELD_EQ(inName,"motion") ) { return ::hx::Val( motion ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mapping") ) { return ::hx::Val( mapping ); }
		if (HX_FIELD_EQ(inName,"pressed") ) { return ::hx::Val( pressed ); }
		if (HX_FIELD_EQ(inName,"pointer") ) { return ::hx::Val( pointer ); }
		if (HX_FIELD_EQ(inName,"manager") ) { return ::hx::Val( manager ); }
		if (HX_FIELD_EQ(inName,"_device") ) { return ::hx::Val( _device ); }
		if (HX_FIELD_EQ(inName,"buttons") ) { return ::hx::Val( buttons ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAxis") ) { return ::hx::Val( getAxis_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadZone") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_deadZone() ); }
		if (HX_FIELD_EQ(inName,"released") ) { return ::hx::Val( released ); }
		if (HX_FIELD_EQ(inName,"anyInput") ) { return ::hx::Val( anyInput_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { return ::hx::Val( connected ); }
		if (HX_FIELD_EQ(inName,"_deadZone") ) { return ::hx::Val( _deadZone ); }
		if (HX_FIELD_EQ(inName,"getButton") ) { return ::hx::Val( getButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"anyButton") ) { return ::hx::Val( anyButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_model") ) { return ::hx::Val( set_model_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attachment") ) { return ::hx::Val( attachment ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"justPressed") ) { return ::hx::Val( justPressed ); }
		if (HX_FIELD_EQ(inName,"getYAxisRaw") ) { return ::hx::Val( getYAxisRaw_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"deadZoneMode") ) { return ::hx::Val( deadZoneMode ); }
		if (HX_FIELD_EQ(inName,"justReleased") ) { return ::hx::Val( justReleased ); }
		if (HX_FIELD_EQ(inName,"getAxisValue") ) { return ::hx::Val( getAxisValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_deadZone") ) { return ::hx::Val( get_deadZone_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"detectedModel") ) { return ::hx::Val( detectedModel ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"handleAxisMove") ) { return ::hx::Val( handleAxisMove_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"handleAxisMoveSub") ) { return ::hx::Val( handleAxisMoveSub_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getAnalogXAxisValue") ) { return ::hx::Val( getAnalogXAxisValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnalogYAxisValue") ) { return ::hx::Val( getAnalogYAxisValue_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"isAxisForAnalogStick") ) { return ::hx::Val( isAxisForAnalogStick_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"checkButtonArrayState") ) { return ::hx::Val( checkButtonArrayState_dyn() ); }
		if (HX_FIELD_EQ(inName,"firstJustPressedRawID") ) { return ::hx::Val( firstJustPressedRawID_dyn() ); }
		if (HX_FIELD_EQ(inName,"createMappingForModel") ) { return ::hx::Val( createMappingForModel_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"getAnalogAxisValueCircular") ) { return ::hx::Val( getAnalogAxisValueCircular_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"getAnalogAxisValueIndependent") ) { return ::hx::Val( getAnalogAxisValueIndependent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxGamepad_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"axis") ) { axis=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_model(inValue.Cast<  ::flixel::input::gamepad::FlxGamepadModel >()) );model=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadModel >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"analog") ) { analog=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadAnalogList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"motion") ) { motion=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadMotionValueList >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mapping") ) { mapping=inValue.Cast<  ::flixel::input::gamepad::mappings::FlxGamepadMapping >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pressed") ) { pressed=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadButtonList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointer") ) { pointer=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadPointerValueList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"manager") ) { manager=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_device") ) { _device=inValue.Cast<  ::openfl::ui::GameInputDevice >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buttons") ) { buttons=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"released") ) { released=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadButtonList >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { connected=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_deadZone") ) { _deadZone=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attachment") ) { attachment=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadAttachment >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"justPressed") ) { justPressed=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadButtonList >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"deadZoneMode") ) { deadZoneMode=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadDeadZoneMode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"justReleased") ) { justReleased=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadButtonList >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"detectedModel") ) { detectedModel=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadModel >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxGamepad_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("model",a9,23,58,0c));
	outFields->push(HX_("detectedModel",c7,fe,45,f3));
	outFields->push(HX_("mapping",0e,7b,7a,44));
	outFields->push(HX_("connected",c9,e2,f6,a2));
	outFields->push(HX_("attachment",e3,07,73,dd));
	outFields->push(HX_("deadZone",f0,3e,2e,58));
	outFields->push(HX_("deadZoneMode",73,76,8a,42));
	outFields->push(HX_("pressed",a2,d2,e6,39));
	outFields->push(HX_("released",bd,88,e7,76));
	outFields->push(HX_("justPressed",d6,0d,a7,f2));
	outFields->push(HX_("justReleased",09,1b,5b,66));
	outFields->push(HX_("analog",30,d6,21,5f));
	outFields->push(HX_("motion",36,86,5d,cb));
	outFields->push(HX_("pointer",bd,c0,21,51));
	outFields->push(HX_("axis",a1,1c,79,40));
	outFields->push(HX_("manager",6d,92,c1,13));
	outFields->push(HX_("_deadZone",4f,36,c4,9f));
	outFields->push(HX_("_device",35,ee,ee,df));
	outFields->push(HX_("buttons",41,52,75,ca));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxGamepad_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(FlxGamepad_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadModel */ ,(int)offsetof(FlxGamepad_obj,model),HX_("model",a9,23,58,0c)},
	{::hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadModel */ ,(int)offsetof(FlxGamepad_obj,detectedModel),HX_("detectedModel",c7,fe,45,f3)},
	{::hx::fsObject /*  ::flixel::input::gamepad::mappings::FlxGamepadMapping */ ,(int)offsetof(FlxGamepad_obj,mapping),HX_("mapping",0e,7b,7a,44)},
	{::hx::fsBool,(int)offsetof(FlxGamepad_obj,connected),HX_("connected",c9,e2,f6,a2)},
	{::hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadAttachment */ ,(int)offsetof(FlxGamepad_obj,attachment),HX_("attachment",e3,07,73,dd)},
	{::hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadDeadZoneMode */ ,(int)offsetof(FlxGamepad_obj,deadZoneMode),HX_("deadZoneMode",73,76,8a,42)},
	{::hx::fsObject /*  ::flixel::input::gamepad::lists::FlxGamepadButtonList */ ,(int)offsetof(FlxGamepad_obj,pressed),HX_("pressed",a2,d2,e6,39)},
	{::hx::fsObject /*  ::flixel::input::gamepad::lists::FlxGamepadButtonList */ ,(int)offsetof(FlxGamepad_obj,released),HX_("released",bd,88,e7,76)},
	{::hx::fsObject /*  ::flixel::input::gamepad::lists::FlxGamepadButtonList */ ,(int)offsetof(FlxGamepad_obj,justPressed),HX_("justPressed",d6,0d,a7,f2)},
	{::hx::fsObject /*  ::flixel::input::gamepad::lists::FlxGamepadButtonList */ ,(int)offsetof(FlxGamepad_obj,justReleased),HX_("justReleased",09,1b,5b,66)},
	{::hx::fsObject /*  ::flixel::input::gamepad::lists::FlxGamepadAnalogList */ ,(int)offsetof(FlxGamepad_obj,analog),HX_("analog",30,d6,21,5f)},
	{::hx::fsObject /*  ::flixel::input::gamepad::lists::FlxGamepadMotionValueList */ ,(int)offsetof(FlxGamepad_obj,motion),HX_("motion",36,86,5d,cb)},
	{::hx::fsObject /*  ::flixel::input::gamepad::lists::FlxGamepadPointerValueList */ ,(int)offsetof(FlxGamepad_obj,pointer),HX_("pointer",bd,c0,21,51)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(FlxGamepad_obj,axis),HX_("axis",a1,1c,79,40)},
	{::hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadManager */ ,(int)offsetof(FlxGamepad_obj,manager),HX_("manager",6d,92,c1,13)},
	{::hx::fsFloat,(int)offsetof(FlxGamepad_obj,_deadZone),HX_("_deadZone",4f,36,c4,9f)},
	{::hx::fsObject /*  ::openfl::ui::GameInputDevice */ ,(int)offsetof(FlxGamepad_obj,_device),HX_("_device",35,ee,ee,df)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxGamepad_obj,buttons),HX_("buttons",41,52,75,ca)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxGamepad_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxGamepad_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	HX_("model",a9,23,58,0c),
	HX_("detectedModel",c7,fe,45,f3),
	HX_("mapping",0e,7b,7a,44),
	HX_("connected",c9,e2,f6,a2),
	HX_("attachment",e3,07,73,dd),
	HX_("deadZoneMode",73,76,8a,42),
	HX_("pressed",a2,d2,e6,39),
	HX_("released",bd,88,e7,76),
	HX_("justPressed",d6,0d,a7,f2),
	HX_("justReleased",09,1b,5b,66),
	HX_("analog",30,d6,21,5f),
	HX_("motion",36,86,5d,cb),
	HX_("pointer",bd,c0,21,51),
	HX_("axis",a1,1c,79,40),
	HX_("manager",6d,92,c1,13),
	HX_("_deadZone",4f,36,c4,9f),
	HX_("_device",35,ee,ee,df),
	HX_("buttons",41,52,75,ca),
	HX_("getButton",28,eb,36,56),
	HX_("update",09,86,05,87),
	HX_("reset",cf,49,c8,e6),
	HX_("destroy",fa,2c,86,24),
	HX_("checkButtonArrayState",32,1b,8c,3e),
	HX_("firstJustPressedRawID",5d,8e,1c,78),
	HX_("getAxis",57,cc,fb,12),
	HX_("isAxisForAnalogStick",82,9b,be,67),
	HX_("getYAxisRaw",04,27,e7,79),
	HX_("anyButton",fe,c9,3f,37),
	HX_("anyInput",7e,21,d0,3c),
	HX_("getAxisValue",9a,07,b3,9a),
	HX_("getAnalogXAxisValue",7e,5a,ac,0a),
	HX_("getAnalogYAxisValue",5d,d2,f6,ca),
	HX_("getAnalogAxisValueCircular",49,0b,5e,0f),
	HX_("getAnalogAxisValueIndependent",d0,22,ae,5b),
	HX_("handleAxisMove",1a,b8,cb,dd),
	HX_("handleAxisMoveSub",86,35,c6,43),
	HX_("createMappingForModel",72,7d,17,c6),
	HX_("set_model",0c,6c,52,33),
	HX_("get_deadZone",f9,f2,47,0d),
	::String(null()) };

::hx::Class FlxGamepad_obj::__mClass;

void FlxGamepad_obj::__register()
{
	FlxGamepad_obj _hx_dummy;
	FlxGamepad_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.input.gamepad.FlxGamepad",52,73,7c,f0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxGamepad_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxGamepad_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxGamepad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxGamepad_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace gamepad
