// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_input_gamepad__FlxGamepadInputID_FlxGamepadInputID_Impl_
#include <flixel/input/gamepad/_FlxGamepadInputID/FlxGamepadInputID_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_97787d57481f8476_54_boot,"flixel.input.gamepad._FlxGamepadInputID.FlxGamepadInputID_Impl_","boot",0xe219675e,"flixel.input.gamepad._FlxGamepadInputID.FlxGamepadInputID_Impl_.boot","flixel/system/macros/FlxMacroUtil.hx",54,0x8cc0f087)
namespace flixel{
namespace input{
namespace gamepad{
namespace _FlxGamepadInputID{

void FlxGamepadInputID_Impl__obj::__construct() { }

Dynamic FlxGamepadInputID_Impl__obj::__CreateEmpty() { return new FlxGamepadInputID_Impl__obj; }

void *FlxGamepadInputID_Impl__obj::_hx_vtable = 0;

Dynamic FlxGamepadInputID_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxGamepadInputID_Impl__obj > _hx_result = new FlxGamepadInputID_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxGamepadInputID_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x32abd6c8;
}

 ::haxe::ds::StringMap FlxGamepadInputID_Impl__obj::fromStringMap;

 ::haxe::ds::IntMap FlxGamepadInputID_Impl__obj::toStringMap;


FlxGamepadInputID_Impl__obj::FlxGamepadInputID_Impl__obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxGamepadInputID_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo FlxGamepadInputID_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &FlxGamepadInputID_Impl__obj::fromStringMap,HX_("fromStringMap",81,6f,a2,3b)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &FlxGamepadInputID_Impl__obj::toStringMap,HX_("toStringMap",50,a5,9e,2e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void FlxGamepadInputID_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxGamepadInputID_Impl__obj::fromStringMap,"fromStringMap");
	HX_MARK_MEMBER_NAME(FlxGamepadInputID_Impl__obj::toStringMap,"toStringMap");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxGamepadInputID_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxGamepadInputID_Impl__obj::fromStringMap,"fromStringMap");
	HX_VISIT_MEMBER_NAME(FlxGamepadInputID_Impl__obj::toStringMap,"toStringMap");
};

#endif

::hx::Class FlxGamepadInputID_Impl__obj::__mClass;

static ::String FlxGamepadInputID_Impl__obj_sStaticFields[] = {
	HX_("fromStringMap",81,6f,a2,3b),
	HX_("toStringMap",50,a5,9e,2e),
	::String(null())
};

void FlxGamepadInputID_Impl__obj::__register()
{
	FlxGamepadInputID_Impl__obj _hx_dummy;
	FlxGamepadInputID_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.input.gamepad._FlxGamepadInputID.FlxGamepadInputID_Impl_",c2,4c,79,15);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxGamepadInputID_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxGamepadInputID_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxGamepadInputID_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxGamepadInputID_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxGamepadInputID_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxGamepadInputID_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxGamepadInputID_Impl__obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::StringMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_97787d57481f8476_54_boot)
HXDLIN(  54)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  54)			_g->set(HX_("ANY",cc,96,31,00),-2);
HXDLIN(  54)			_g->set(HX_("A",41,00,00,00),0);
HXDLIN(  54)			_g->set(HX_("B",42,00,00,00),1);
HXDLIN(  54)			_g->set(HX_("X",58,00,00,00),2);
HXDLIN(  54)			_g->set(HX_("Y",59,00,00,00),3);
HXDLIN(  54)			_g->set(HX_("LEFT_SHOULDER",d8,b1,a9,01),4);
HXDLIN(  54)			_g->set(HX_("RIGHT_SHOULDER",83,9f,28,11),5);
HXDLIN(  54)			_g->set(HX_("BACK",27,a2,d1,2b),6);
HXDLIN(  54)			_g->set(HX_("START",42,ac,f9,01),7);
HXDLIN(  54)			_g->set(HX_("LEFT_STICK_CLICK",21,9d,4a,bf),8);
HXDLIN(  54)			_g->set(HX_("RIGHT_STICK_CLICK",56,4c,25,0b),9);
HXDLIN(  54)			_g->set(HX_("GUIDE",9c,f2,d9,19),10);
HXDLIN(  54)			_g->set(HX_("DPAD_UP",6b,00,87,a2),11);
HXDLIN(  54)			_g->set(HX_("DPAD_DOWN",72,1a,5b,87),12);
HXDLIN(  54)			_g->set(HX_("DPAD_LEFT",17,2a,9d,8c),13);
HXDLIN(  54)			_g->set(HX_("DPAD_RIGHT",ac,b7,f4,f3),14);
HXDLIN(  54)			_g->set(HX_("LEFT_TRIGGER_BUTTON",f1,61,33,1b),15);
HXDLIN(  54)			_g->set(HX_("RIGHT_TRIGGER_BUTTON",dc,61,f8,02),16);
HXDLIN(  54)			_g->set(HX_("LEFT_TRIGGER",a0,31,c6,eb),17);
HXDLIN(  54)			_g->set(HX_("RIGHT_TRIGGER",55,e2,81,00),18);
HXDLIN(  54)			_g->set(HX_("LEFT_ANALOG_STICK",19,49,58,a5),19);
HXDLIN(  54)			_g->set(HX_("RIGHT_ANALOG_STICK",44,e8,d6,b8),20);
HXDLIN(  54)			_g->set(HX_("DPAD",6f,6f,2f,2d),21);
HXDLIN(  54)			_g->set(HX_("TILT_PITCH",de,59,c1,1b),26);
HXDLIN(  54)			_g->set(HX_("TILT_ROLL",ff,5e,73,5e),27);
HXDLIN(  54)			_g->set(HX_("POINTER_X",f6,08,fa,28),28);
HXDLIN(  54)			_g->set(HX_("POINTER_Y",f7,08,fa,28),29);
HXDLIN(  54)			_g->set(HX_("EXTRA_0",61,a1,be,f8),30);
HXDLIN(  54)			_g->set(HX_("EXTRA_1",62,a1,be,f8),31);
HXDLIN(  54)			_g->set(HX_("EXTRA_2",63,a1,be,f8),32);
HXDLIN(  54)			_g->set(HX_("EXTRA_3",64,a1,be,f8),33);
HXDLIN(  54)			_g->set(HX_("LEFT_STICK_DIGITAL_UP",29,d8,3b,d5),34);
HXDLIN(  54)			_g->set(HX_("LEFT_STICK_DIGITAL_RIGHT",ae,ca,36,04),35);
HXDLIN(  54)			_g->set(HX_("LEFT_STICK_DIGITAL_DOWN",b0,dd,c3,72),36);
HXDLIN(  54)			_g->set(HX_("LEFT_STICK_DIGITAL_LEFT",55,ed,05,78),37);
HXDLIN(  54)			_g->set(HX_("RIGHT_STICK_DIGITAL_UP",d4,e8,30,f8),38);
HXDLIN(  54)			_g->set(HX_("RIGHT_STICK_DIGITAL_RIGHT",e3,36,d3,6c),39);
HXDLIN(  54)			_g->set(HX_("RIGHT_STICK_DIGITAL_DOWN",1b,af,9e,09),40);
HXDLIN(  54)			_g->set(HX_("RIGHT_STICK_DIGITAL_LEFT",c0,be,e0,0e),41);
HXDLIN(  54)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_97787d57481f8476_54_boot)
HXDLIN(  54)		fromStringMap = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::IntMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_97787d57481f8476_54_boot)
HXDLIN(  54)			 ::haxe::ds::IntMap _g =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXDLIN(  54)			_g->set(-2,HX_("ANY",cc,96,31,00));
HXDLIN(  54)			_g->set(0,HX_("A",41,00,00,00));
HXDLIN(  54)			_g->set(1,HX_("B",42,00,00,00));
HXDLIN(  54)			_g->set(2,HX_("X",58,00,00,00));
HXDLIN(  54)			_g->set(3,HX_("Y",59,00,00,00));
HXDLIN(  54)			_g->set(4,HX_("LEFT_SHOULDER",d8,b1,a9,01));
HXDLIN(  54)			_g->set(5,HX_("RIGHT_SHOULDER",83,9f,28,11));
HXDLIN(  54)			_g->set(6,HX_("BACK",27,a2,d1,2b));
HXDLIN(  54)			_g->set(7,HX_("START",42,ac,f9,01));
HXDLIN(  54)			_g->set(8,HX_("LEFT_STICK_CLICK",21,9d,4a,bf));
HXDLIN(  54)			_g->set(9,HX_("RIGHT_STICK_CLICK",56,4c,25,0b));
HXDLIN(  54)			_g->set(10,HX_("GUIDE",9c,f2,d9,19));
HXDLIN(  54)			_g->set(11,HX_("DPAD_UP",6b,00,87,a2));
HXDLIN(  54)			_g->set(12,HX_("DPAD_DOWN",72,1a,5b,87));
HXDLIN(  54)			_g->set(13,HX_("DPAD_LEFT",17,2a,9d,8c));
HXDLIN(  54)			_g->set(14,HX_("DPAD_RIGHT",ac,b7,f4,f3));
HXDLIN(  54)			_g->set(15,HX_("LEFT_TRIGGER_BUTTON",f1,61,33,1b));
HXDLIN(  54)			_g->set(16,HX_("RIGHT_TRIGGER_BUTTON",dc,61,f8,02));
HXDLIN(  54)			_g->set(17,HX_("LEFT_TRIGGER",a0,31,c6,eb));
HXDLIN(  54)			_g->set(18,HX_("RIGHT_TRIGGER",55,e2,81,00));
HXDLIN(  54)			_g->set(19,HX_("LEFT_ANALOG_STICK",19,49,58,a5));
HXDLIN(  54)			_g->set(20,HX_("RIGHT_ANALOG_STICK",44,e8,d6,b8));
HXDLIN(  54)			_g->set(21,HX_("DPAD",6f,6f,2f,2d));
HXDLIN(  54)			_g->set(26,HX_("TILT_PITCH",de,59,c1,1b));
HXDLIN(  54)			_g->set(27,HX_("TILT_ROLL",ff,5e,73,5e));
HXDLIN(  54)			_g->set(28,HX_("POINTER_X",f6,08,fa,28));
HXDLIN(  54)			_g->set(29,HX_("POINTER_Y",f7,08,fa,28));
HXDLIN(  54)			_g->set(30,HX_("EXTRA_0",61,a1,be,f8));
HXDLIN(  54)			_g->set(31,HX_("EXTRA_1",62,a1,be,f8));
HXDLIN(  54)			_g->set(32,HX_("EXTRA_2",63,a1,be,f8));
HXDLIN(  54)			_g->set(33,HX_("EXTRA_3",64,a1,be,f8));
HXDLIN(  54)			_g->set(34,HX_("LEFT_STICK_DIGITAL_UP",29,d8,3b,d5));
HXDLIN(  54)			_g->set(35,HX_("LEFT_STICK_DIGITAL_RIGHT",ae,ca,36,04));
HXDLIN(  54)			_g->set(36,HX_("LEFT_STICK_DIGITAL_DOWN",b0,dd,c3,72));
HXDLIN(  54)			_g->set(37,HX_("LEFT_STICK_DIGITAL_LEFT",55,ed,05,78));
HXDLIN(  54)			_g->set(38,HX_("RIGHT_STICK_DIGITAL_UP",d4,e8,30,f8));
HXDLIN(  54)			_g->set(39,HX_("RIGHT_STICK_DIGITAL_RIGHT",e3,36,d3,6c));
HXDLIN(  54)			_g->set(40,HX_("RIGHT_STICK_DIGITAL_DOWN",1b,af,9e,09));
HXDLIN(  54)			_g->set(41,HX_("RIGHT_STICK_DIGITAL_LEFT",c0,be,e0,0e));
HXDLIN(  54)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_97787d57481f8476_54_boot)
HXDLIN(  54)		toStringMap = ( ( ::haxe::ds::IntMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
}

} // end namespace flixel
} // end namespace input
} // end namespace gamepad
} // end namespace _FlxGamepadInputID
