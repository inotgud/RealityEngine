// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_input_gamepad_FlxAnalogToDigitalMode
#include <flixel/input/gamepad/FlxAnalogToDigitalMode.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAnalogStick
#include <flixel/input/gamepad/FlxGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_id_WiiRemoteID
#include <flixel/input/gamepad/id/WiiRemoteID.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_1d81ba64e113d8f6_173_boot,"flixel.input.gamepad.id.WiiRemoteID","boot",0xbbe6ca18,"flixel.input.gamepad.id.WiiRemoteID.boot","flixel/input/gamepad/id/WiiRemoteID.hx",173,0xc94ac714)
HX_LOCAL_STACK_FRAME(_hx_pos_1d81ba64e113d8f6_185_boot,"flixel.input.gamepad.id.WiiRemoteID","boot",0xbbe6ca18,"flixel.input.gamepad.id.WiiRemoteID.boot","flixel/input/gamepad/id/WiiRemoteID.hx",185,0xc94ac714)
HX_LOCAL_STACK_FRAME(_hx_pos_1d81ba64e113d8f6_195_boot,"flixel.input.gamepad.id.WiiRemoteID","boot",0xbbe6ca18,"flixel.input.gamepad.id.WiiRemoteID.boot","flixel/input/gamepad/id/WiiRemoteID.hx",195,0xc94ac714)
namespace flixel{
namespace input{
namespace gamepad{
namespace id{

void WiiRemoteID_obj::__construct() { }

Dynamic WiiRemoteID_obj::__CreateEmpty() { return new WiiRemoteID_obj; }

void *WiiRemoteID_obj::_hx_vtable = 0;

Dynamic WiiRemoteID_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WiiRemoteID_obj > _hx_result = new WiiRemoteID_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool WiiRemoteID_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x59b75606;
}

 ::flixel::input::gamepad::FlxGamepadAnalogStick WiiRemoteID_obj::REMOTE_DPAD;

 ::flixel::input::gamepad::FlxGamepadAnalogStick WiiRemoteID_obj::LEFT_ANALOG_STICK;

 ::flixel::input::gamepad::FlxGamepadAnalogStick WiiRemoteID_obj::RIGHT_ANALOG_STICK;


WiiRemoteID_obj::WiiRemoteID_obj()
{
}

bool WiiRemoteID_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"REMOTE_DPAD") ) { outValue = ( REMOTE_DPAD ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"LEFT_ANALOG_STICK") ) { outValue = ( LEFT_ANALOG_STICK ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"RIGHT_ANALOG_STICK") ) { outValue = ( RIGHT_ANALOG_STICK ); return true; }
	}
	return false;
}

bool WiiRemoteID_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"REMOTE_DPAD") ) { REMOTE_DPAD=ioValue.Cast<  ::flixel::input::gamepad::FlxGamepadAnalogStick >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"LEFT_ANALOG_STICK") ) { LEFT_ANALOG_STICK=ioValue.Cast<  ::flixel::input::gamepad::FlxGamepadAnalogStick >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"RIGHT_ANALOG_STICK") ) { RIGHT_ANALOG_STICK=ioValue.Cast<  ::flixel::input::gamepad::FlxGamepadAnalogStick >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *WiiRemoteID_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo WiiRemoteID_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadAnalogStick */ ,(void *) &WiiRemoteID_obj::REMOTE_DPAD,HX_("REMOTE_DPAD",08,df,69,50)},
	{::hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadAnalogStick */ ,(void *) &WiiRemoteID_obj::LEFT_ANALOG_STICK,HX_("LEFT_ANALOG_STICK",19,49,58,a5)},
	{::hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadAnalogStick */ ,(void *) &WiiRemoteID_obj::RIGHT_ANALOG_STICK,HX_("RIGHT_ANALOG_STICK",44,e8,d6,b8)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void WiiRemoteID_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(WiiRemoteID_obj::REMOTE_DPAD,"REMOTE_DPAD");
	HX_MARK_MEMBER_NAME(WiiRemoteID_obj::LEFT_ANALOG_STICK,"LEFT_ANALOG_STICK");
	HX_MARK_MEMBER_NAME(WiiRemoteID_obj::RIGHT_ANALOG_STICK,"RIGHT_ANALOG_STICK");
};

#ifdef HXCPP_VISIT_ALLOCS
static void WiiRemoteID_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(WiiRemoteID_obj::REMOTE_DPAD,"REMOTE_DPAD");
	HX_VISIT_MEMBER_NAME(WiiRemoteID_obj::LEFT_ANALOG_STICK,"LEFT_ANALOG_STICK");
	HX_VISIT_MEMBER_NAME(WiiRemoteID_obj::RIGHT_ANALOG_STICK,"RIGHT_ANALOG_STICK");
};

#endif

::hx::Class WiiRemoteID_obj::__mClass;

static ::String WiiRemoteID_obj_sStaticFields[] = {
	HX_("REMOTE_DPAD",08,df,69,50),
	HX_("LEFT_ANALOG_STICK",19,49,58,a5),
	HX_("RIGHT_ANALOG_STICK",44,e8,d6,b8),
	::String(null())
};

void WiiRemoteID_obj::__register()
{
	WiiRemoteID_obj _hx_dummy;
	WiiRemoteID_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.input.gamepad.id.WiiRemoteID",48,e4,5a,c3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &WiiRemoteID_obj::__GetStatic;
	__mClass->mSetStaticField = &WiiRemoteID_obj::__SetStatic;
	__mClass->mMarkFunc = WiiRemoteID_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(WiiRemoteID_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< WiiRemoteID_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = WiiRemoteID_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WiiRemoteID_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WiiRemoteID_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void WiiRemoteID_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_1d81ba64e113d8f6_173_boot)
HXDLIN( 173)		REMOTE_DPAD =  ::flixel::input::gamepad::FlxGamepadAnalogStick_obj::__alloc( HX_CTX ,0,1, ::Dynamic(::hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("right",dc,0b,64,e9),25)
            			->setFixed(1,HX_("up",5b,66,00,00),22)
            			->setFixed(2,HX_("threshold",ab,c3,a3,34),((Float)0.5))
            			->setFixed(3,HX_("down",62,f8,6d,42),23)
            			->setFixed(4,HX_("left",07,08,b0,47),24)
            			->setFixed(5,HX_("mode",63,d3,60,48),::flixel::input::gamepad::FlxAnalogToDigitalMode_obj::ONLY_DIGITAL_dyn())));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_1d81ba64e113d8f6_185_boot)
HXDLIN( 185)		LEFT_ANALOG_STICK =  ::flixel::input::gamepad::FlxGamepadAnalogStick_obj::__alloc( HX_CTX ,0,1, ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("right",dc,0b,64,e9),31)
            			->setFixed(1,HX_("up",5b,66,00,00),28)
            			->setFixed(2,HX_("down",62,f8,6d,42),29)
            			->setFixed(3,HX_("left",07,08,b0,47),30)));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_1d81ba64e113d8f6_195_boot)
HXDLIN( 195)		RIGHT_ANALOG_STICK =  ::flixel::input::gamepad::FlxGamepadAnalogStick_obj::__alloc( HX_CTX ,2,3, ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("right",dc,0b,64,e9),35)
            			->setFixed(1,HX_("up",5b,66,00,00),32)
            			->setFixed(2,HX_("down",62,f8,6d,42),33)
            			->setFixed(3,HX_("left",07,08,b0,47),34)));
            	}
}

} // end namespace flixel
} // end namespace input
} // end namespace gamepad
} // end namespace id
