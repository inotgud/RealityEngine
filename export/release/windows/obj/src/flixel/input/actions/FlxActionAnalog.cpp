// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionAnalog
#include <flixel/input/actions/FlxActionAnalog.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputType
#include <flixel/input/actions/FlxInputType.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2a6906383b7ff16a_198_new,"flixel.input.actions.FlxActionAnalog","new",0xa7741703,"flixel.input.actions.FlxActionAnalog.new","flixel/input/actions/FlxAction.hx",198,0xb046b220)
HX_LOCAL_STACK_FRAME(_hx_pos_2a6906383b7ff16a_279_destroy,"flixel.input.actions.FlxActionAnalog","destroy",0xc292011d,"flixel.input.actions.FlxActionAnalog.destroy","flixel/input/actions/FlxAction.hx",279,0xb046b220)
HX_LOCAL_STACK_FRAME(_hx_pos_2a6906383b7ff16a_290_check,"flixel.input.actions.FlxActionAnalog","check",0x2a700e2b,"flixel.input.actions.FlxActionAnalog.check","flixel/input/actions/FlxAction.hx",290,0xb046b220)
namespace flixel{
namespace input{
namespace actions{

void FlxActionAnalog_obj::__construct(::String __o_Name, ::Dynamic Callback){
            		::String Name = __o_Name;
            		if (::hx::IsNull(__o_Name)) Name = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_2a6906383b7ff16a_198_new)
HXLINE( 199)		super::__construct(::flixel::input::actions::FlxInputType_obj::ANALOG_dyn(),Name);
HXLINE( 200)		this->callback = Callback;
            	}

Dynamic FlxActionAnalog_obj::__CreateEmpty() { return new FlxActionAnalog_obj; }

void *FlxActionAnalog_obj::_hx_vtable = 0;

Dynamic FlxActionAnalog_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxActionAnalog_obj > _hx_result = new FlxActionAnalog_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxActionAnalog_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2660e195) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2660e195;
	} else {
		return inClassId==(int)0x537409a5;
	}
}

void FlxActionAnalog_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_2a6906383b7ff16a_279_destroy)
HXLINE( 280)		this->callback = null();
HXLINE( 281)		this->super::destroy();
            	}


bool FlxActionAnalog_obj::check(){
            	HX_STACKFRAME(&_hx_pos_2a6906383b7ff16a_290_check)
HXLINE( 291)		bool val = this->super::check();
HXLINE( 292)		bool _hx_tmp;
HXDLIN( 292)		if (val) {
HXLINE( 292)			_hx_tmp = ::hx::IsNotNull( this->callback );
            		}
            		else {
HXLINE( 292)			_hx_tmp = false;
            		}
HXDLIN( 292)		if (_hx_tmp) {
HXLINE( 294)			this->callback(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 296)		return val;
            	}



::hx::ObjectPtr< FlxActionAnalog_obj > FlxActionAnalog_obj::__new(::String __o_Name, ::Dynamic Callback) {
	::hx::ObjectPtr< FlxActionAnalog_obj > __this = new FlxActionAnalog_obj();
	__this->__construct(__o_Name,Callback);
	return __this;
}

::hx::ObjectPtr< FlxActionAnalog_obj > FlxActionAnalog_obj::__alloc(::hx::Ctx *_hx_ctx,::String __o_Name, ::Dynamic Callback) {
	FlxActionAnalog_obj *__this = (FlxActionAnalog_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxActionAnalog_obj), true, "flixel.input.actions.FlxActionAnalog"));
	*(void **)__this = FlxActionAnalog_obj::_hx_vtable;
	__this->__construct(__o_Name,Callback);
	return __this;
}

FlxActionAnalog_obj::FlxActionAnalog_obj()
{
}

void FlxActionAnalog_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxActionAnalog);
	HX_MARK_MEMBER_NAME(callback,"callback");
	 ::flixel::input::actions::FlxAction_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxActionAnalog_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(callback,"callback");
	 ::flixel::input::actions::FlxAction_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxActionAnalog_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"check") ) { return ::hx::Val( check_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { return ::hx::Val( callback ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxActionAnalog_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { callback=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxActionAnalog_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxActionAnalog_obj,callback),HX_("callback",c5,99,06,7f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxActionAnalog_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxActionAnalog_obj_sMemberFields[] = {
	HX_("callback",c5,99,06,7f),
	HX_("destroy",fa,2c,86,24),
	HX_("check",c8,98,b6,45),
	::String(null()) };

::hx::Class FlxActionAnalog_obj::__mClass;

void FlxActionAnalog_obj::__register()
{
	FlxActionAnalog_obj _hx_dummy;
	FlxActionAnalog_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.input.actions.FlxActionAnalog",91,d9,3d,35);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxActionAnalog_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxActionAnalog_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxActionAnalog_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxActionAnalog_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace actions
