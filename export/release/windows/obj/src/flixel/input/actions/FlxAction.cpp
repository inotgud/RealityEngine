// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputType
#include <flixel/input/actions/FlxInputType.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_46dea4e2f301566f_314_new,"flixel.input.actions.FlxAction","new",0x71052df3,"flixel.input.actions.FlxAction.new","flixel/input/actions/FlxAction.hx",314,0xb046b220)
HX_LOCAL_STACK_FRAME(_hx_pos_46dea4e2f301566f_418_remove,"flixel.input.actions.FlxAction","remove",0x3279bc91,"flixel.input.actions.FlxAction.remove","flixel/input/actions/FlxAction.hx",418,0xb046b220)
HX_LOCAL_STACK_FRAME(_hx_pos_46dea4e2f301566f_437_check,"flixel.input.actions.FlxAction","check",0x4ba8c11b,"flixel.input.actions.FlxAction.check","flixel/input/actions/FlxAction.hx",437,0xb046b220)
HX_LOCAL_STACK_FRAME(_hx_pos_46dea4e2f301566f_483_destroy,"flixel.input.actions.FlxAction","destroy",0x2991500d,"flixel.input.actions.FlxAction.destroy","flixel/input/actions/FlxAction.hx",483,0xb046b220)
HX_LOCAL_STACK_FRAME(_hx_pos_46dea4e2f301566f_498_addGenericInput,"flixel.input.actions.FlxAction","addGenericInput",0x4a082847,"flixel.input.actions.FlxAction.addGenericInput","flixel/input/actions/FlxAction.hx",498,0xb046b220)
HX_LOCAL_STACK_FRAME(_hx_pos_46dea4e2f301566f_510_checkExists,"flixel.input.actions.FlxAction","checkExists",0x7f679957,"flixel.input.actions.FlxAction.checkExists","flixel/input/actions/FlxAction.hx",510,0xb046b220)
namespace flixel{
namespace input{
namespace actions{

void FlxAction_obj::__construct( ::flixel::input::actions::FlxInputType InputType,::String Name){
            	HX_STACKFRAME(&_hx_pos_46dea4e2f301566f_314_new)
HXLINE( 345)		this->_checked = false;
HXLINE( 344)		this->_timestamp = 0;
HXLINE( 342)		this->_y = null();
HXLINE( 341)		this->_x = null();
HXLINE( 334)		this->triggered = false;
HXLINE( 359)		this->type = InputType;
HXLINE( 360)		this->name = Name;
HXLINE( 361)		this->inputs = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic FlxAction_obj::__CreateEmpty() { return new FlxAction_obj; }

void *FlxAction_obj::_hx_vtable = 0;

Dynamic FlxAction_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxAction_obj > _hx_result = new FlxAction_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxAction_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2660e195;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_input_actions_FlxAction__hx_flixel_util_IFlxDestroyable= {
	( void (::hx::Object::*)())&::flixel::input::actions::FlxAction_obj::destroy,
};

void *FlxAction_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_input_actions_FlxAction__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxAction_obj::remove( ::flixel::input::actions::FlxActionInput Input,::hx::Null< bool >  __o_Destroy){
            		bool Destroy = __o_Destroy.Default(false);
            	HX_STACKFRAME(&_hx_pos_46dea4e2f301566f_418_remove)
HXLINE( 419)		if (::hx::IsNull( Input )) {
HXLINE( 420)			return;
            		}
HXLINE( 421)		this->inputs->remove(Input);
HXLINE( 422)		if (Destroy) {
HXLINE( 424)			Input->destroy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxAction_obj,remove,(void))

bool FlxAction_obj::check(){
            	HX_STACKFRAME(&_hx_pos_46dea4e2f301566f_437_check)
HXLINE( 438)		this->_x = null();
HXLINE( 439)		this->_y = null();
HXLINE( 441)		if ((this->_timestamp == ::flixel::FlxG_obj::game->ticks)) {
HXLINE( 443)			this->triggered = this->_checked;
HXLINE( 444)			return this->_checked;
            		}
HXLINE( 447)		this->_timestamp = ::flixel::FlxG_obj::game->ticks;
HXLINE( 448)		this->_checked = false;
HXLINE( 450)		int len;
HXDLIN( 450)		if (::hx::IsNotNull( this->inputs )) {
HXLINE( 450)			len = this->inputs->length;
            		}
            		else {
HXLINE( 450)			len = 0;
            		}
HXLINE( 451)		{
HXLINE( 451)			int _g = 0;
HXDLIN( 451)			int _g1 = len;
HXDLIN( 451)			while((_g < _g1)){
HXLINE( 451)				_g = (_g + 1);
HXDLIN( 451)				int i = (_g - 1);
HXLINE( 453)				int j = ((len - i) - 1);
HXLINE( 454)				 ::flixel::input::actions::FlxActionInput input = this->inputs->__get(j).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 456)				if (input->destroyed) {
HXLINE( 458)					this->inputs->removeRange(j,1);
HXLINE( 459)					continue;
            				}
HXLINE( 462)				input->update();
HXLINE( 464)				if (input->check(::hx::ObjectPtr<OBJ_>(this))) {
HXLINE( 466)					this->_checked = true;
            				}
            			}
            		}
HXLINE( 470)		this->triggered = this->_checked;
HXLINE( 471)		return this->_checked;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAction_obj,check,return )

void FlxAction_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_46dea4e2f301566f_483_destroy)
HXLINE( 484)		::flixel::util::FlxDestroyUtil_obj::destroyArray(this->inputs);
HXLINE( 485)		this->inputs = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAction_obj,destroy,(void))

 ::flixel::input::actions::FlxAction FlxAction_obj::addGenericInput( ::flixel::input::actions::FlxActionInput input){
            	HX_STACKFRAME(&_hx_pos_46dea4e2f301566f_498_addGenericInput)
HXLINE( 499)		if (::hx::IsNull( this->inputs )) {
HXLINE( 501)			this->inputs = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 503)		if (!(this->checkExists(input))) {
HXLINE( 504)			this->inputs->push(input);
            		}
HXLINE( 506)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAction_obj,addGenericInput,return )

bool FlxAction_obj::checkExists( ::flixel::input::actions::FlxActionInput input){
            	HX_STACKFRAME(&_hx_pos_46dea4e2f301566f_510_checkExists)
HXLINE( 511)		if (::hx::IsNull( this->inputs )) {
HXLINE( 512)			return false;
            		}
HXLINE( 513)		return this->inputs->contains(input);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAction_obj,checkExists,return )


::hx::ObjectPtr< FlxAction_obj > FlxAction_obj::__new( ::flixel::input::actions::FlxInputType InputType,::String Name) {
	::hx::ObjectPtr< FlxAction_obj > __this = new FlxAction_obj();
	__this->__construct(InputType,Name);
	return __this;
}

::hx::ObjectPtr< FlxAction_obj > FlxAction_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::input::actions::FlxInputType InputType,::String Name) {
	FlxAction_obj *__this = (FlxAction_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxAction_obj), true, "flixel.input.actions.FlxAction"));
	*(void **)__this = FlxAction_obj::_hx_vtable;
	__this->__construct(InputType,Name);
	return __this;
}

FlxAction_obj::FlxAction_obj()
{
}

void FlxAction_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxAction);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(triggered,"triggered");
	HX_MARK_MEMBER_NAME(inputs,"inputs");
	HX_MARK_MEMBER_NAME(_x,"_x");
	HX_MARK_MEMBER_NAME(_y,"_y");
	HX_MARK_MEMBER_NAME(_timestamp,"_timestamp");
	HX_MARK_MEMBER_NAME(_checked,"_checked");
	HX_MARK_END_CLASS();
}

void FlxAction_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(triggered,"triggered");
	HX_VISIT_MEMBER_NAME(inputs,"inputs");
	HX_VISIT_MEMBER_NAME(_x,"_x");
	HX_VISIT_MEMBER_NAME(_y,"_y");
	HX_VISIT_MEMBER_NAME(_timestamp,"_timestamp");
	HX_VISIT_MEMBER_NAME(_checked,"_checked");
}

::hx::Val FlxAction_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"_x") ) { return ::hx::Val( _x ); }
		if (HX_FIELD_EQ(inName,"_y") ) { return ::hx::Val( _y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"check") ) { return ::hx::Val( check_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"inputs") ) { return ::hx::Val( inputs ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_checked") ) { return ::hx::Val( _checked ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"triggered") ) { return ::hx::Val( triggered ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_timestamp") ) { return ::hx::Val( _timestamp ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"checkExists") ) { return ::hx::Val( checkExists_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"addGenericInput") ) { return ::hx::Val( addGenericInput_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxAction_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"_x") ) { _x=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_y") ) { _y=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::flixel::input::actions::FlxInputType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"inputs") ) { inputs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_checked") ) { _checked=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"triggered") ) { triggered=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_timestamp") ) { _timestamp=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxAction_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("triggered",97,6b,49,dc));
	outFields->push(HX_("inputs",29,c5,ed,9b));
	outFields->push(HX_("_x",39,53,00,00));
	outFields->push(HX_("_y",3a,53,00,00));
	outFields->push(HX_("_timestamp",97,50,71,01));
	outFields->push(HX_("_checked",a8,0c,dd,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxAction_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::input::actions::FlxInputType */ ,(int)offsetof(FlxAction_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsString,(int)offsetof(FlxAction_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsBool,(int)offsetof(FlxAction_obj,triggered),HX_("triggered",97,6b,49,dc)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxAction_obj,inputs),HX_("inputs",29,c5,ed,9b)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxAction_obj,_x),HX_("_x",39,53,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxAction_obj,_y),HX_("_y",3a,53,00,00)},
	{::hx::fsInt,(int)offsetof(FlxAction_obj,_timestamp),HX_("_timestamp",97,50,71,01)},
	{::hx::fsBool,(int)offsetof(FlxAction_obj,_checked),HX_("_checked",a8,0c,dd,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxAction_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxAction_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("name",4b,72,ff,48),
	HX_("triggered",97,6b,49,dc),
	HX_("inputs",29,c5,ed,9b),
	HX_("_x",39,53,00,00),
	HX_("_y",3a,53,00,00),
	HX_("_timestamp",97,50,71,01),
	HX_("_checked",a8,0c,dd,4c),
	HX_("remove",44,9c,88,04),
	HX_("check",c8,98,b6,45),
	HX_("destroy",fa,2c,86,24),
	HX_("addGenericInput",34,3a,b7,18),
	HX_("checkExists",c4,f0,f1,a1),
	::String(null()) };

::hx::Class FlxAction_obj::__mClass;

void FlxAction_obj::__register()
{
	FlxAction_obj _hx_dummy;
	FlxAction_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.input.actions.FlxAction",81,b8,dc,b2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxAction_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxAction_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxAction_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxAction_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace actions
