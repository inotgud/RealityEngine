// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6dd8cea91f1ea6da_9_new,"flixel.input.keyboard.FlxKeyList","new",0xfff37fce,"flixel.input.keyboard.FlxKeyList.new","flixel/input/keyboard/FlxKeyList.hx",9,0xb04d5f03)
namespace flixel{
namespace input{
namespace keyboard{

void FlxKeyList_obj::__construct(int status, ::flixel::input::FlxKeyManager keyManager){
            	HX_STACKFRAME(&_hx_pos_6dd8cea91f1ea6da_9_new)
HXDLIN(   9)		super::__construct(status,keyManager);
            	}

Dynamic FlxKeyList_obj::__CreateEmpty() { return new FlxKeyList_obj; }

void *FlxKeyList_obj::_hx_vtable = 0;

Dynamic FlxKeyList_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxKeyList_obj > _hx_result = new FlxKeyList_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxKeyList_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x23ee7f5c) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x23ee7f5c;
	} else {
		return inClassId==(int)0x7e9b8150;
	}
}


::hx::ObjectPtr< FlxKeyList_obj > FlxKeyList_obj::__new(int status, ::flixel::input::FlxKeyManager keyManager) {
	::hx::ObjectPtr< FlxKeyList_obj > __this = new FlxKeyList_obj();
	__this->__construct(status,keyManager);
	return __this;
}

::hx::ObjectPtr< FlxKeyList_obj > FlxKeyList_obj::__alloc(::hx::Ctx *_hx_ctx,int status, ::flixel::input::FlxKeyManager keyManager) {
	FlxKeyList_obj *__this = (FlxKeyList_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxKeyList_obj), true, "flixel.input.keyboard.FlxKeyList"));
	*(void **)__this = FlxKeyList_obj::_hx_vtable;
	__this->__construct(status,keyManager);
	return __this;
}

FlxKeyList_obj::FlxKeyList_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxKeyList_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlxKeyList_obj_sStaticStorageInfo = 0;
#endif

::hx::Class FlxKeyList_obj::__mClass;

void FlxKeyList_obj::__register()
{
	FlxKeyList_obj _hx_dummy;
	FlxKeyList_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.input.keyboard.FlxKeyList",dc,40,f0,d7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxKeyList_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxKeyList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxKeyList_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace keyboard
