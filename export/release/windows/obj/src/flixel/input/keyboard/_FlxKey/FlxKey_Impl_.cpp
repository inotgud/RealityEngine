// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b641261cd9bd2dff_54_boot,"flixel.input.keyboard._FlxKey.FlxKey_Impl_","boot",0xb4b21e40,"flixel.input.keyboard._FlxKey.FlxKey_Impl_.boot","flixel/system/macros/FlxMacroUtil.hx",54,0x8cc0f087)
namespace flixel{
namespace input{
namespace keyboard{
namespace _FlxKey{

void FlxKey_Impl__obj::__construct() { }

Dynamic FlxKey_Impl__obj::__CreateEmpty() { return new FlxKey_Impl__obj; }

void *FlxKey_Impl__obj::_hx_vtable = 0;

Dynamic FlxKey_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxKey_Impl__obj > _hx_result = new FlxKey_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxKey_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x052b5b74;
}

 ::haxe::ds::StringMap FlxKey_Impl__obj::fromStringMap;

 ::haxe::ds::IntMap FlxKey_Impl__obj::toStringMap;


FlxKey_Impl__obj::FlxKey_Impl__obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxKey_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo FlxKey_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &FlxKey_Impl__obj::fromStringMap,HX_("fromStringMap",81,6f,a2,3b)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &FlxKey_Impl__obj::toStringMap,HX_("toStringMap",50,a5,9e,2e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void FlxKey_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxKey_Impl__obj::fromStringMap,"fromStringMap");
	HX_MARK_MEMBER_NAME(FlxKey_Impl__obj::toStringMap,"toStringMap");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxKey_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxKey_Impl__obj::fromStringMap,"fromStringMap");
	HX_VISIT_MEMBER_NAME(FlxKey_Impl__obj::toStringMap,"toStringMap");
};

#endif

::hx::Class FlxKey_Impl__obj::__mClass;

static ::String FlxKey_Impl__obj_sStaticFields[] = {
	HX_("fromStringMap",81,6f,a2,3b),
	HX_("toStringMap",50,a5,9e,2e),
	::String(null())
};

void FlxKey_Impl__obj::__register()
{
	FlxKey_Impl__obj _hx_dummy;
	FlxKey_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.input.keyboard._FlxKey.FlxKey_Impl_",20,01,a0,0b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxKey_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxKey_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxKey_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxKey_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxKey_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxKey_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxKey_Impl__obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::StringMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_b641261cd9bd2dff_54_boot)
HXDLIN(  54)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  54)			_g->set(HX_("ANY",cc,96,31,00),-2);
HXDLIN(  54)			_g->set(HX_("A",41,00,00,00),65);
HXDLIN(  54)			_g->set(HX_("B",42,00,00,00),66);
HXDLIN(  54)			_g->set(HX_("C",43,00,00,00),67);
HXDLIN(  54)			_g->set(HX_("D",44,00,00,00),68);
HXDLIN(  54)			_g->set(HX_("E",45,00,00,00),69);
HXDLIN(  54)			_g->set(HX_("F",46,00,00,00),70);
HXDLIN(  54)			_g->set(HX_("G",47,00,00,00),71);
HXDLIN(  54)			_g->set(HX_("H",48,00,00,00),72);
HXDLIN(  54)			_g->set(HX_("I",49,00,00,00),73);
HXDLIN(  54)			_g->set(HX_("J",4a,00,00,00),74);
HXDLIN(  54)			_g->set(HX_("K",4b,00,00,00),75);
HXDLIN(  54)			_g->set(HX_("L",4c,00,00,00),76);
HXDLIN(  54)			_g->set(HX_("M",4d,00,00,00),77);
HXDLIN(  54)			_g->set(HX_("N",4e,00,00,00),78);
HXDLIN(  54)			_g->set(HX_("O",4f,00,00,00),79);
HXDLIN(  54)			_g->set(HX_("P",50,00,00,00),80);
HXDLIN(  54)			_g->set(HX_("Q",51,00,00,00),81);
HXDLIN(  54)			_g->set(HX_("R",52,00,00,00),82);
HXDLIN(  54)			_g->set(HX_("S",53,00,00,00),83);
HXDLIN(  54)			_g->set(HX_("T",54,00,00,00),84);
HXDLIN(  54)			_g->set(HX_("U",55,00,00,00),85);
HXDLIN(  54)			_g->set(HX_("V",56,00,00,00),86);
HXDLIN(  54)			_g->set(HX_("W",57,00,00,00),87);
HXDLIN(  54)			_g->set(HX_("X",58,00,00,00),88);
HXDLIN(  54)			_g->set(HX_("Y",59,00,00,00),89);
HXDLIN(  54)			_g->set(HX_("Z",5a,00,00,00),90);
HXDLIN(  54)			_g->set(HX_("ZERO",28,d7,b1,3b),48);
HXDLIN(  54)			_g->set(HX_("ONE",46,36,3c,00),49);
HXDLIN(  54)			_g->set(HX_("TWO",6c,09,40,00),50);
HXDLIN(  54)			_g->set(HX_("THREE",3e,8c,7e,8d),51);
HXDLIN(  54)			_g->set(HX_("FOUR",e6,2b,81,2e),52);
HXDLIN(  54)			_g->set(HX_("FIVE",32,9f,7c,2e),53);
HXDLIN(  54)			_g->set(HX_("SIX",02,3b,3f,00),54);
HXDLIN(  54)			_g->set(HX_("SEVEN",ed,5c,1f,f8),55);
HXDLIN(  54)			_g->set(HX_("EIGHT",2f,b9,1c,eb),56);
HXDLIN(  54)			_g->set(HX_("NINE",32,4d,c6,33),57);
HXDLIN(  54)			_g->set(HX_("PAGEUP",6a,5e,bb,98),33);
HXDLIN(  54)			_g->set(HX_("PAGEDOWN",31,36,e2,b9),34);
HXDLIN(  54)			_g->set(HX_("HOME",1f,92,d3,2f),36);
HXDLIN(  54)			_g->set(HX_("END",bb,9f,34,00),35);
HXDLIN(  54)			_g->set(HX_("INSERT",39,ef,5f,50),45);
HXDLIN(  54)			_g->set(HX_("ESCAPE",81,ef,5c,8d),27);
HXDLIN(  54)			_g->set(HX_("MINUS",50,b8,56,86),189);
HXDLIN(  54)			_g->set(HX_("PLUS",5a,07,1b,35),187);
HXDLIN(  54)			_g->set(HX_("DELETE",2b,6c,5b,1d),46);
HXDLIN(  54)			_g->set(HX_("BACKSPACE",1f,f5,42,c6),8);
HXDLIN(  54)			_g->set(HX_("LBRACKET",3c,3b,54,16),219);
HXDLIN(  54)			_g->set(HX_("RBRACKET",f6,e7,82,6d),221);
HXDLIN(  54)			_g->set(HX_("BACKSLASH",96,28,9e,c3),220);
HXDLIN(  54)			_g->set(HX_("CAPSLOCK",8c,6c,6e,80),20);
HXDLIN(  54)			_g->set(HX_("SEMICOLON",11,86,2a,49),186);
HXDLIN(  54)			_g->set(HX_("QUOTE",1c,5b,e0,db),222);
HXDLIN(  54)			_g->set(HX_("ENTER",f8,a4,74,ee),13);
HXDLIN(  54)			_g->set(HX_("SHIFT",62,24,11,fa),16);
HXDLIN(  54)			_g->set(HX_("COMMA",b5,69,4b,c8),188);
HXDLIN(  54)			_g->set(HX_("PERIOD",01,0d,9e,ed),190);
HXDLIN(  54)			_g->set(HX_("SLASH",1d,f8,af,fc),191);
HXDLIN(  54)			_g->set(HX_("GRAVEACCENT",6f,63,9a,0e),192);
HXDLIN(  54)			_g->set(HX_("CONTROL",3d,3f,55,99),17);
HXDLIN(  54)			_g->set(HX_("ALT",09,95,31,00),18);
HXDLIN(  54)			_g->set(HX_("SPACE",a6,c4,54,ff),32);
HXDLIN(  54)			_g->set(HX_("UP",5b,4a,00,00),38);
HXDLIN(  54)			_g->set(HX_("DOWN",62,c0,2e,2d),40);
HXDLIN(  54)			_g->set(HX_("LEFT",07,d0,70,32),37);
HXDLIN(  54)			_g->set(HX_("RIGHT",bc,43,52,67),39);
HXDLIN(  54)			_g->set(HX_("TAB",35,f6,3f,00),9);
HXDLIN(  54)			_g->set(HX_("PRINTSCREEN",39,7f,7c,10),301);
HXDLIN(  54)			_g->set(HX_("F1",2b,3d,00,00),112);
HXDLIN(  54)			_g->set(HX_("F2",2c,3d,00,00),113);
HXDLIN(  54)			_g->set(HX_("F3",2d,3d,00,00),114);
HXDLIN(  54)			_g->set(HX_("F4",2e,3d,00,00),115);
HXDLIN(  54)			_g->set(HX_("F5",2f,3d,00,00),116);
HXDLIN(  54)			_g->set(HX_("F6",30,3d,00,00),117);
HXDLIN(  54)			_g->set(HX_("F7",31,3d,00,00),118);
HXDLIN(  54)			_g->set(HX_("F8",32,3d,00,00),119);
HXDLIN(  54)			_g->set(HX_("F9",33,3d,00,00),120);
HXDLIN(  54)			_g->set(HX_("F10",a5,48,35,00),121);
HXDLIN(  54)			_g->set(HX_("F11",a6,48,35,00),122);
HXDLIN(  54)			_g->set(HX_("F12",a7,48,35,00),123);
HXDLIN(  54)			_g->set(HX_("NUMPADZERO",75,90,dd,33),96);
HXDLIN(  54)			_g->set(HX_("NUMPADONE",99,e5,09,5c),97);
HXDLIN(  54)			_g->set(HX_("NUMPADTWO",bf,b8,0d,5c),98);
HXDLIN(  54)			_g->set(HX_("NUMPADTHREE",51,f6,94,bb),99);
HXDLIN(  54)			_g->set(HX_("NUMPADFOUR",33,e5,ac,26),100);
HXDLIN(  54)			_g->set(HX_("NUMPADFIVE",7f,58,a8,26),101);
HXDLIN(  54)			_g->set(HX_("NUMPADSIX",55,ea,0c,5c),102);
HXDLIN(  54)			_g->set(HX_("NUMPADSEVEN",00,c7,35,26),103);
HXDLIN(  54)			_g->set(HX_("NUMPADEIGHT",42,23,33,19),104);
HXDLIN(  54)			_g->set(HX_("NUMPADNINE",7f,06,f2,2b),105);
HXDLIN(  54)			_g->set(HX_("NUMPADMINUS",63,22,6d,b4),109);
HXDLIN(  54)			_g->set(HX_("NUMPADPLUS",a7,c0,46,2d),107);
HXDLIN(  54)			_g->set(HX_("NUMPADPERIOD",8e,73,24,13),110);
HXDLIN(  54)			_g->set(HX_("NUMPADMULTIPLY",f1,55,e9,54),106);
HXDLIN(  54)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_b641261cd9bd2dff_54_boot)
HXDLIN(  54)		fromStringMap = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::IntMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_b641261cd9bd2dff_54_boot)
HXDLIN(  54)			 ::haxe::ds::IntMap _g =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXDLIN(  54)			_g->set(-2,HX_("ANY",cc,96,31,00));
HXDLIN(  54)			_g->set(65,HX_("A",41,00,00,00));
HXDLIN(  54)			_g->set(66,HX_("B",42,00,00,00));
HXDLIN(  54)			_g->set(67,HX_("C",43,00,00,00));
HXDLIN(  54)			_g->set(68,HX_("D",44,00,00,00));
HXDLIN(  54)			_g->set(69,HX_("E",45,00,00,00));
HXDLIN(  54)			_g->set(70,HX_("F",46,00,00,00));
HXDLIN(  54)			_g->set(71,HX_("G",47,00,00,00));
HXDLIN(  54)			_g->set(72,HX_("H",48,00,00,00));
HXDLIN(  54)			_g->set(73,HX_("I",49,00,00,00));
HXDLIN(  54)			_g->set(74,HX_("J",4a,00,00,00));
HXDLIN(  54)			_g->set(75,HX_("K",4b,00,00,00));
HXDLIN(  54)			_g->set(76,HX_("L",4c,00,00,00));
HXDLIN(  54)			_g->set(77,HX_("M",4d,00,00,00));
HXDLIN(  54)			_g->set(78,HX_("N",4e,00,00,00));
HXDLIN(  54)			_g->set(79,HX_("O",4f,00,00,00));
HXDLIN(  54)			_g->set(80,HX_("P",50,00,00,00));
HXDLIN(  54)			_g->set(81,HX_("Q",51,00,00,00));
HXDLIN(  54)			_g->set(82,HX_("R",52,00,00,00));
HXDLIN(  54)			_g->set(83,HX_("S",53,00,00,00));
HXDLIN(  54)			_g->set(84,HX_("T",54,00,00,00));
HXDLIN(  54)			_g->set(85,HX_("U",55,00,00,00));
HXDLIN(  54)			_g->set(86,HX_("V",56,00,00,00));
HXDLIN(  54)			_g->set(87,HX_("W",57,00,00,00));
HXDLIN(  54)			_g->set(88,HX_("X",58,00,00,00));
HXDLIN(  54)			_g->set(89,HX_("Y",59,00,00,00));
HXDLIN(  54)			_g->set(90,HX_("Z",5a,00,00,00));
HXDLIN(  54)			_g->set(48,HX_("ZERO",28,d7,b1,3b));
HXDLIN(  54)			_g->set(49,HX_("ONE",46,36,3c,00));
HXDLIN(  54)			_g->set(50,HX_("TWO",6c,09,40,00));
HXDLIN(  54)			_g->set(51,HX_("THREE",3e,8c,7e,8d));
HXDLIN(  54)			_g->set(52,HX_("FOUR",e6,2b,81,2e));
HXDLIN(  54)			_g->set(53,HX_("FIVE",32,9f,7c,2e));
HXDLIN(  54)			_g->set(54,HX_("SIX",02,3b,3f,00));
HXDLIN(  54)			_g->set(55,HX_("SEVEN",ed,5c,1f,f8));
HXDLIN(  54)			_g->set(56,HX_("EIGHT",2f,b9,1c,eb));
HXDLIN(  54)			_g->set(57,HX_("NINE",32,4d,c6,33));
HXDLIN(  54)			_g->set(33,HX_("PAGEUP",6a,5e,bb,98));
HXDLIN(  54)			_g->set(34,HX_("PAGEDOWN",31,36,e2,b9));
HXDLIN(  54)			_g->set(36,HX_("HOME",1f,92,d3,2f));
HXDLIN(  54)			_g->set(35,HX_("END",bb,9f,34,00));
HXDLIN(  54)			_g->set(45,HX_("INSERT",39,ef,5f,50));
HXDLIN(  54)			_g->set(27,HX_("ESCAPE",81,ef,5c,8d));
HXDLIN(  54)			_g->set(189,HX_("MINUS",50,b8,56,86));
HXDLIN(  54)			_g->set(187,HX_("PLUS",5a,07,1b,35));
HXDLIN(  54)			_g->set(46,HX_("DELETE",2b,6c,5b,1d));
HXDLIN(  54)			_g->set(8,HX_("BACKSPACE",1f,f5,42,c6));
HXDLIN(  54)			_g->set(219,HX_("LBRACKET",3c,3b,54,16));
HXDLIN(  54)			_g->set(221,HX_("RBRACKET",f6,e7,82,6d));
HXDLIN(  54)			_g->set(220,HX_("BACKSLASH",96,28,9e,c3));
HXDLIN(  54)			_g->set(20,HX_("CAPSLOCK",8c,6c,6e,80));
HXDLIN(  54)			_g->set(186,HX_("SEMICOLON",11,86,2a,49));
HXDLIN(  54)			_g->set(222,HX_("QUOTE",1c,5b,e0,db));
HXDLIN(  54)			_g->set(13,HX_("ENTER",f8,a4,74,ee));
HXDLIN(  54)			_g->set(16,HX_("SHIFT",62,24,11,fa));
HXDLIN(  54)			_g->set(188,HX_("COMMA",b5,69,4b,c8));
HXDLIN(  54)			_g->set(190,HX_("PERIOD",01,0d,9e,ed));
HXDLIN(  54)			_g->set(191,HX_("SLASH",1d,f8,af,fc));
HXDLIN(  54)			_g->set(192,HX_("GRAVEACCENT",6f,63,9a,0e));
HXDLIN(  54)			_g->set(17,HX_("CONTROL",3d,3f,55,99));
HXDLIN(  54)			_g->set(18,HX_("ALT",09,95,31,00));
HXDLIN(  54)			_g->set(32,HX_("SPACE",a6,c4,54,ff));
HXDLIN(  54)			_g->set(38,HX_("UP",5b,4a,00,00));
HXDLIN(  54)			_g->set(40,HX_("DOWN",62,c0,2e,2d));
HXDLIN(  54)			_g->set(37,HX_("LEFT",07,d0,70,32));
HXDLIN(  54)			_g->set(39,HX_("RIGHT",bc,43,52,67));
HXDLIN(  54)			_g->set(9,HX_("TAB",35,f6,3f,00));
HXDLIN(  54)			_g->set(301,HX_("PRINTSCREEN",39,7f,7c,10));
HXDLIN(  54)			_g->set(112,HX_("F1",2b,3d,00,00));
HXDLIN(  54)			_g->set(113,HX_("F2",2c,3d,00,00));
HXDLIN(  54)			_g->set(114,HX_("F3",2d,3d,00,00));
HXDLIN(  54)			_g->set(115,HX_("F4",2e,3d,00,00));
HXDLIN(  54)			_g->set(116,HX_("F5",2f,3d,00,00));
HXDLIN(  54)			_g->set(117,HX_("F6",30,3d,00,00));
HXDLIN(  54)			_g->set(118,HX_("F7",31,3d,00,00));
HXDLIN(  54)			_g->set(119,HX_("F8",32,3d,00,00));
HXDLIN(  54)			_g->set(120,HX_("F9",33,3d,00,00));
HXDLIN(  54)			_g->set(121,HX_("F10",a5,48,35,00));
HXDLIN(  54)			_g->set(122,HX_("F11",a6,48,35,00));
HXDLIN(  54)			_g->set(123,HX_("F12",a7,48,35,00));
HXDLIN(  54)			_g->set(96,HX_("NUMPADZERO",75,90,dd,33));
HXDLIN(  54)			_g->set(97,HX_("NUMPADONE",99,e5,09,5c));
HXDLIN(  54)			_g->set(98,HX_("NUMPADTWO",bf,b8,0d,5c));
HXDLIN(  54)			_g->set(99,HX_("NUMPADTHREE",51,f6,94,bb));
HXDLIN(  54)			_g->set(100,HX_("NUMPADFOUR",33,e5,ac,26));
HXDLIN(  54)			_g->set(101,HX_("NUMPADFIVE",7f,58,a8,26));
HXDLIN(  54)			_g->set(102,HX_("NUMPADSIX",55,ea,0c,5c));
HXDLIN(  54)			_g->set(103,HX_("NUMPADSEVEN",00,c7,35,26));
HXDLIN(  54)			_g->set(104,HX_("NUMPADEIGHT",42,23,33,19));
HXDLIN(  54)			_g->set(105,HX_("NUMPADNINE",7f,06,f2,2b));
HXDLIN(  54)			_g->set(109,HX_("NUMPADMINUS",63,22,6d,b4));
HXDLIN(  54)			_g->set(107,HX_("NUMPADPLUS",a7,c0,46,2d));
HXDLIN(  54)			_g->set(110,HX_("NUMPADPERIOD",8e,73,24,13));
HXDLIN(  54)			_g->set(106,HX_("NUMPADMULTIPLY",f1,55,e9,54));
HXDLIN(  54)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_b641261cd9bd2dff_54_boot)
HXDLIN(  54)		toStringMap = ( ( ::haxe::ds::IntMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
}

} // end namespace flixel
} // end namespace input
} // end namespace keyboard
} // end namespace _FlxKey
