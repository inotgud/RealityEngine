// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4c6d58e3fc627ab0_11_new,"flixel.math.FlxRect","new",0xa1ebbd34,"flixel.math.FlxRect.new","flixel/math/FlxRect.hx",11,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_4c6d58e3fc627ab0_83_put,"flixel.math.FlxRect","put",0xa1ed4fa3,"flixel.math.FlxRect.put","flixel/math/FlxRect.hx",83,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_4c6d58e3fc627ab0_348_getRotatedBounds,"flixel.math.FlxRect","getRotatedBounds",0x28a5b134,"flixel.math.FlxRect.getRotatedBounds","flixel/math/FlxRect.hx",348,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_4c6d58e3fc627ab0_405_destroy,"flixel.math.FlxRect","destroy",0x7f7713ce,"flixel.math.FlxRect.destroy","flixel/math/FlxRect.hx",405,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_4c6d58e3fc627ab0_428_intersection,"flixel.math.FlxRect","intersection",0x60177af5,"flixel.math.FlxRect.intersection","flixel/math/FlxRect.hx",428,0x2aef791c)
HX_LOCAL_STACK_FRAME(_hx_pos_4c6d58e3fc627ab0_15_boot,"flixel.math.FlxRect","boot",0x0472d0de,"flixel.math.FlxRect.boot","flixel/math/FlxRect.hx",15,0x2aef791c)
namespace flixel{
namespace math{

void FlxRect_obj::__construct(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_Width,::hx::Null< Float >  __o_Height){
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            		Float Width = __o_Width.Default(0);
            		Float Height = __o_Height.Default(0);
            	HX_STACKFRAME(&_hx_pos_4c6d58e3fc627ab0_11_new)
HXLINE(  70)		this->_inPool = false;
HXLINE(  69)		this->_weak = false;
HXLINE(  75)		this->x = X;
HXDLIN(  75)		this->y = Y;
HXDLIN(  75)		this->width = Width;
HXDLIN(  75)		this->height = Height;
            	}

Dynamic FlxRect_obj::__CreateEmpty() { return new FlxRect_obj; }

void *FlxRect_obj::_hx_vtable = 0;

Dynamic FlxRect_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxRect_obj > _hx_result = new FlxRect_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxRect_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7da4a0b2;
}

static ::flixel::util::IFlxPooled_obj _hx_flixel_math_FlxRect__hx_flixel_util_IFlxPooled= {
	( void (::hx::Object::*)())&::flixel::math::FlxRect_obj::destroy,
	( void (::hx::Object::*)())&::flixel::math::FlxRect_obj::put,
};

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_math_FlxRect__hx_flixel_util_IFlxDestroyable= {
	( void (::hx::Object::*)())&::flixel::math::FlxRect_obj::destroy,
};

void *FlxRect_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x9aa322a2: return &_hx_flixel_math_FlxRect__hx_flixel_util_IFlxPooled;
		case (int)0xd4fe2fcd: return &_hx_flixel_math_FlxRect__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxRect_obj::put(){
            	HX_STACKFRAME(&_hx_pos_4c6d58e3fc627ab0_83_put)
HXDLIN(  83)		if (!(this->_inPool)) {
HXLINE(  85)			this->_inPool = true;
HXLINE(  86)			this->_weak = false;
HXLINE(  87)			::flixel::math::FlxRect_obj::_pool->putUnsafe(::hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxRect_obj,put,(void))

 ::flixel::math::FlxRect FlxRect_obj::getRotatedBounds(Float degrees, ::flixel::math::FlxPoint origin, ::flixel::math::FlxRect newRect){
            	HX_STACKFRAME(&_hx_pos_4c6d58e3fc627ab0_348_getRotatedBounds)
HXLINE( 349)		if (::hx::IsNull( origin )) {
HXLINE( 350)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(0,0);
HXDLIN( 350)			point->_inPool = false;
HXDLIN( 350)			 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 350)			point1->_weak = true;
HXDLIN( 350)			origin = point1;
            		}
HXLINE( 352)		if (::hx::IsNull( newRect )) {
HXLINE( 353)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 353)			_this->x = ( (Float)(0) );
HXDLIN( 353)			_this->y = ( (Float)(0) );
HXDLIN( 353)			_this->width = ( (Float)(0) );
HXDLIN( 353)			_this->height = ( (Float)(0) );
HXDLIN( 353)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 353)			rect->_inPool = false;
HXDLIN( 353)			newRect = rect;
            		}
HXLINE( 355)		degrees = ::hx::Mod(degrees,360);
HXLINE( 356)		if ((degrees == 0)) {
HXLINE( 358)			if (origin->_weak) {
HXLINE( 358)				origin->put();
            			}
HXLINE( 359)			newRect->x = this->x;
HXDLIN( 359)			newRect->y = this->y;
HXDLIN( 359)			newRect->width = this->width;
HXDLIN( 359)			newRect->height = this->height;
HXDLIN( 359)			return newRect;
            		}
HXLINE( 362)		if ((degrees < 0)) {
HXLINE( 363)			degrees = (degrees + 360);
            		}
HXLINE( 365)		Float radians = ((::Math_obj::PI / ( (Float)(180) )) * degrees);
HXLINE( 366)		Float cos = ::Math_obj::cos(radians);
HXLINE( 367)		Float sin = ::Math_obj::sin(radians);
HXLINE( 369)		Float left = -(origin->x);
HXLINE( 370)		Float top = -(origin->y);
HXLINE( 371)		Float right = (-(origin->x) + this->width);
HXLINE( 372)		Float bottom = (-(origin->y) + this->height);
HXLINE( 373)		if ((degrees < 90)) {
HXLINE( 375)			newRect->x = (((this->x + origin->x) + (cos * left)) - (sin * bottom));
HXLINE( 376)			newRect->y = (((this->y + origin->y) + (sin * left)) + (cos * top));
            		}
            		else {
HXLINE( 378)			if ((degrees < 180)) {
HXLINE( 380)				newRect->x = (((this->x + origin->x) + (cos * right)) - (sin * bottom));
HXLINE( 381)				newRect->y = (((this->y + origin->y) + (sin * left)) + (cos * bottom));
            			}
            			else {
HXLINE( 383)				if ((degrees < 270)) {
HXLINE( 385)					newRect->x = (((this->x + origin->x) + (cos * right)) - (sin * top));
HXLINE( 386)					newRect->y = (((this->y + origin->y) + (sin * right)) + (cos * bottom));
            				}
            				else {
HXLINE( 390)					newRect->x = (((this->x + origin->x) + (cos * left)) - (sin * top));
HXLINE( 391)					newRect->y = (((this->y + origin->y) + (sin * right)) + (cos * top));
            				}
            			}
            		}
HXLINE( 394)		Float newHeight = (::Math_obj::abs((cos * this->height)) + ::Math_obj::abs((sin * this->width)));
HXLINE( 395)		newRect->width = (::Math_obj::abs((cos * this->width)) + ::Math_obj::abs((sin * this->height)));
HXLINE( 396)		newRect->height = newHeight;
HXLINE( 398)		if (origin->_weak) {
HXLINE( 398)			origin->put();
            		}
HXLINE( 399)		return newRect;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxRect_obj,getRotatedBounds,return )

void FlxRect_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_4c6d58e3fc627ab0_405_destroy)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxRect_obj,destroy,(void))

 ::flixel::math::FlxRect FlxRect_obj::intersection( ::flixel::math::FlxRect rect, ::flixel::math::FlxRect result){
            	HX_STACKFRAME(&_hx_pos_4c6d58e3fc627ab0_428_intersection)
HXLINE( 429)		if (::hx::IsNull( result )) {
HXLINE( 430)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 430)			_this->x = ( (Float)(0) );
HXDLIN( 430)			_this->y = ( (Float)(0) );
HXDLIN( 430)			_this->width = ( (Float)(0) );
HXDLIN( 430)			_this->height = ( (Float)(0) );
HXDLIN( 430)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 430)			rect->_inPool = false;
HXDLIN( 430)			result = rect;
            		}
HXLINE( 432)		Float x0;
HXDLIN( 432)		if ((this->x < rect->x)) {
HXLINE( 432)			x0 = rect->x;
            		}
            		else {
HXLINE( 432)			x0 = this->x;
            		}
HXLINE( 433)		Float x1;
HXDLIN( 433)		if (((this->x + this->width) > (rect->x + rect->width))) {
HXLINE( 433)			x1 = (rect->x + rect->width);
            		}
            		else {
HXLINE( 433)			x1 = (this->x + this->width);
            		}
HXLINE( 434)		if ((x1 <= x0)) {
HXLINE( 436)			if (rect->_weak) {
HXLINE( 436)				if (!(rect->_inPool)) {
HXLINE( 436)					rect->_inPool = true;
HXDLIN( 436)					rect->_weak = false;
HXDLIN( 436)					::flixel::math::FlxRect_obj::_pool->putUnsafe(rect);
            				}
            			}
HXLINE( 437)			return result;
            		}
HXLINE( 440)		Float y0;
HXDLIN( 440)		if ((this->y < rect->y)) {
HXLINE( 440)			y0 = rect->y;
            		}
            		else {
HXLINE( 440)			y0 = this->y;
            		}
HXLINE( 441)		Float y1;
HXDLIN( 441)		if (((this->y + this->height) > (rect->y + rect->height))) {
HXLINE( 441)			y1 = (rect->y + rect->height);
            		}
            		else {
HXLINE( 441)			y1 = (this->y + this->height);
            		}
HXLINE( 442)		if ((y1 <= y0)) {
HXLINE( 444)			if (rect->_weak) {
HXLINE( 444)				if (!(rect->_inPool)) {
HXLINE( 444)					rect->_inPool = true;
HXDLIN( 444)					rect->_weak = false;
HXDLIN( 444)					::flixel::math::FlxRect_obj::_pool->putUnsafe(rect);
            				}
            			}
HXLINE( 445)			return result;
            		}
HXLINE( 448)		if (rect->_weak) {
HXLINE( 448)			if (!(rect->_inPool)) {
HXLINE( 448)				rect->_inPool = true;
HXDLIN( 448)				rect->_weak = false;
HXDLIN( 448)				::flixel::math::FlxRect_obj::_pool->putUnsafe(rect);
            			}
            		}
HXLINE( 449)		result->x = x0;
HXDLIN( 449)		result->y = y0;
HXDLIN( 449)		result->width = (x1 - x0);
HXDLIN( 449)		result->height = (y1 - y0);
HXDLIN( 449)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxRect_obj,intersection,return )

 ::flixel::util::FlxPool_flixel_math_FlxRect FlxRect_obj::_pool;


::hx::ObjectPtr< FlxRect_obj > FlxRect_obj::__new(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_Width,::hx::Null< Float >  __o_Height) {
	::hx::ObjectPtr< FlxRect_obj > __this = new FlxRect_obj();
	__this->__construct(__o_X,__o_Y,__o_Width,__o_Height);
	return __this;
}

::hx::ObjectPtr< FlxRect_obj > FlxRect_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_Width,::hx::Null< Float >  __o_Height) {
	FlxRect_obj *__this = (FlxRect_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxRect_obj), false, "flixel.math.FlxRect"));
	*(void **)__this = FlxRect_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_Width,__o_Height);
	return __this;
}

FlxRect_obj::FlxRect_obj()
{
}

::hx::Val FlxRect_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"put") ) { return ::hx::Val( put_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"_weak") ) { return ::hx::Val( _weak ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_inPool") ) { return ::hx::Val( _inPool ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"intersection") ) { return ::hx::Val( intersection_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getRotatedBounds") ) { return ::hx::Val( getRotatedBounds_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxRect_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_pool") ) { outValue = ( _pool ); return true; }
	}
	return false;
}

::hx::Val FlxRect_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_weak") ) { _weak=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_inPool") ) { _inPool=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxRect_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_pool") ) { _pool=ioValue.Cast<  ::flixel::util::FlxPool_flixel_math_FlxRect >(); return true; }
	}
	return false;
}

void FlxRect_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("_weak",57,78,06,02));
	outFields->push(HX_("_inPool",00,71,39,f5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxRect_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(FlxRect_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(FlxRect_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsFloat,(int)offsetof(FlxRect_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsFloat,(int)offsetof(FlxRect_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsBool,(int)offsetof(FlxRect_obj,_weak),HX_("_weak",57,78,06,02)},
	{::hx::fsBool,(int)offsetof(FlxRect_obj,_inPool),HX_("_inPool",00,71,39,f5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlxRect_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::util::FlxPool_flixel_math_FlxRect */ ,(void *) &FlxRect_obj::_pool,HX_("_pool",bb,9c,6d,fd)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxRect_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("_weak",57,78,06,02),
	HX_("_inPool",00,71,39,f5),
	HX_("put",cf,62,55,00),
	HX_("getRotatedBounds",88,12,38,3c),
	HX_("destroy",fa,2c,86,24),
	HX_("intersection",49,a2,61,88),
	::String(null()) };

static void FlxRect_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxRect_obj::_pool,"_pool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxRect_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxRect_obj::_pool,"_pool");
};

#endif

::hx::Class FlxRect_obj::__mClass;

static ::String FlxRect_obj_sStaticFields[] = {
	HX_("_pool",bb,9c,6d,fd),
	::String(null())
};

void FlxRect_obj::__register()
{
	FlxRect_obj _hx_dummy;
	FlxRect_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.math.FlxRect",42,53,98,14);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxRect_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxRect_obj::__SetStatic;
	__mClass->mMarkFunc = FlxRect_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxRect_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxRect_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxRect_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxRect_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxRect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxRect_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxRect_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_4c6d58e3fc627ab0_15_boot)
HXDLIN(  15)		_pool =  ::flixel::util::FlxPool_flixel_math_FlxRect_obj::__alloc( HX_CTX ,::hx::ClassOf< ::flixel::math::FlxRect >());
            	}
}

} // end namespace flixel
} // end namespace math
