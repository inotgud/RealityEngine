// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_math_FlxVelocity
#include <flixel/math/FlxVelocity.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_efb42de64cd9f379_234_computeVelocity,"flixel.math.FlxVelocity","computeVelocity",0xd7550d81,"flixel.math.FlxVelocity.computeVelocity","flixel/math/FlxVelocity.hx",234,0xbea30ec3)
namespace flixel{
namespace math{

void FlxVelocity_obj::__construct() { }

Dynamic FlxVelocity_obj::__CreateEmpty() { return new FlxVelocity_obj; }

void *FlxVelocity_obj::_hx_vtable = 0;

Dynamic FlxVelocity_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxVelocity_obj > _hx_result = new FlxVelocity_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxVelocity_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x083cfec7;
}

Float FlxVelocity_obj::computeVelocity(Float Velocity,Float Acceleration,Float Drag,Float Max,Float Elapsed){
            	HX_STACKFRAME(&_hx_pos_efb42de64cd9f379_234_computeVelocity)
HXLINE( 235)		if ((Acceleration != 0)) {
HXLINE( 237)			Velocity = (Velocity + (Acceleration * Elapsed));
            		}
            		else {
HXLINE( 239)			if ((Drag != 0)) {
HXLINE( 241)				Float drag = (Drag * Elapsed);
HXLINE( 242)				if (((Velocity - drag) > 0)) {
HXLINE( 244)					Velocity = (Velocity - drag);
            				}
            				else {
HXLINE( 246)					if (((Velocity + drag) < 0)) {
HXLINE( 248)						Velocity = (Velocity + drag);
            					}
            					else {
HXLINE( 252)						Velocity = ( (Float)(0) );
            					}
            				}
            			}
            		}
HXLINE( 255)		bool _hx_tmp;
HXDLIN( 255)		if ((Velocity != 0)) {
HXLINE( 255)			_hx_tmp = (Max != 0);
            		}
            		else {
HXLINE( 255)			_hx_tmp = false;
            		}
HXDLIN( 255)		if (_hx_tmp) {
HXLINE( 257)			if ((Velocity > Max)) {
HXLINE( 259)				Velocity = Max;
            			}
            			else {
HXLINE( 261)				if ((Velocity < -(Max))) {
HXLINE( 263)					Velocity = -(Max);
            				}
            			}
            		}
HXLINE( 266)		return Velocity;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxVelocity_obj,computeVelocity,return )


FlxVelocity_obj::FlxVelocity_obj()
{
}

bool FlxVelocity_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"computeVelocity") ) { outValue = computeVelocity_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxVelocity_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlxVelocity_obj_sStaticStorageInfo = 0;
#endif

::hx::Class FlxVelocity_obj::__mClass;

static ::String FlxVelocity_obj_sStaticFields[] = {
	HX_("computeVelocity",b4,d4,7e,b6),
	::String(null())
};

void FlxVelocity_obj::__register()
{
	FlxVelocity_obj _hx_dummy;
	FlxVelocity_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.math.FlxVelocity",3b,6f,ef,61);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxVelocity_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxVelocity_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxVelocity_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxVelocity_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxVelocity_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace math
