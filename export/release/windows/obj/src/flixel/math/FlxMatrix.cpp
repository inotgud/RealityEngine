// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f8ebd3e8714d9448_10_new,"flixel.math.FlxMatrix","new",0x62dffc51,"flixel.math.FlxMatrix.new","flixel/math/FlxMatrix.hx",10,0x564a249f)
namespace flixel{
namespace math{

void FlxMatrix_obj::__construct( ::Dynamic a, ::Dynamic b, ::Dynamic c, ::Dynamic d, ::Dynamic tx, ::Dynamic ty){
            	HX_STACKFRAME(&_hx_pos_f8ebd3e8714d9448_10_new)
HXDLIN(  10)		super::__construct(a,b,c,d,tx,ty);
            	}

Dynamic FlxMatrix_obj::__CreateEmpty() { return new FlxMatrix_obj; }

void *FlxMatrix_obj::_hx_vtable = 0;

Dynamic FlxMatrix_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxMatrix_obj > _hx_result = new FlxMatrix_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool FlxMatrix_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x065caf19) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x065caf19;
	} else {
		return inClassId==(int)0x666c094f;
	}
}


::hx::ObjectPtr< FlxMatrix_obj > FlxMatrix_obj::__new( ::Dynamic a, ::Dynamic b, ::Dynamic c, ::Dynamic d, ::Dynamic tx, ::Dynamic ty) {
	::hx::ObjectPtr< FlxMatrix_obj > __this = new FlxMatrix_obj();
	__this->__construct(a,b,c,d,tx,ty);
	return __this;
}

::hx::ObjectPtr< FlxMatrix_obj > FlxMatrix_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic a, ::Dynamic b, ::Dynamic c, ::Dynamic d, ::Dynamic tx, ::Dynamic ty) {
	FlxMatrix_obj *__this = (FlxMatrix_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxMatrix_obj), false, "flixel.math.FlxMatrix"));
	*(void **)__this = FlxMatrix_obj::_hx_vtable;
	__this->__construct(a,b,c,d,tx,ty);
	return __this;
}

FlxMatrix_obj::FlxMatrix_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxMatrix_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlxMatrix_obj_sStaticStorageInfo = 0;
#endif

::hx::Class FlxMatrix_obj::__mClass;

void FlxMatrix_obj::__register()
{
	FlxMatrix_obj _hx_dummy;
	FlxMatrix_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.math.FlxMatrix",df,7f,9d,67);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxMatrix_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxMatrix_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxMatrix_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace math
