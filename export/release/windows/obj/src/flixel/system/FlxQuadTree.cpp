// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxLinkedList
#include <flixel/system/FlxLinkedList.h>
#endif
#ifndef INCLUDED_flixel_system_FlxQuadTree
#include <flixel/system/FlxQuadTree.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d6b090d39d0d72d3_232_new,"flixel.system.FlxQuadTree","new",0xc8d074fc,"flixel.system.FlxQuadTree.new","flixel/system/FlxQuadTree.hx",232,0xb5742814)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b090d39d0d72d3_277_reset,"flixel.system.FlxQuadTree","reset",0x432c4d6b,"flixel.system.FlxQuadTree.reset","flixel/system/FlxQuadTree.hx",277,0xb5742814)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b090d39d0d72d3_346_destroy,"flixel.system.FlxQuadTree","destroy",0x64a74f96,"flixel.system.FlxQuadTree.destroy","flixel/system/FlxQuadTree.hx",346,0xb5742814)
HX_LOCAL_STACK_FRAME(_hx_pos_d6b090d39d0d72d3_222_boot,"flixel.system.FlxQuadTree","boot",0xe5aee816,"flixel.system.FlxQuadTree.boot","flixel/system/FlxQuadTree.hx",222,0xb5742814)
namespace flixel{
namespace _hx_system{

void FlxQuadTree_obj::__construct(Float X,Float Y,Float Width,Float Height, ::flixel::_hx_system::FlxQuadTree Parent){
            	HX_STACKFRAME(&_hx_pos_d6b090d39d0d72d3_232_new)
HXLINE( 233)		super::__construct(null(),null(),null(),null());
HXLINE( 234)		{
HXLINE( 234)			this->x = X;
HXDLIN( 234)			this->y = Y;
HXDLIN( 234)			this->width = Width;
HXDLIN( 234)			this->height = Height;
            		}
HXLINE( 235)		this->reset(X,Y,Width,Height,Parent);
            	}

Dynamic FlxQuadTree_obj::__CreateEmpty() { return new FlxQuadTree_obj; }

void *FlxQuadTree_obj::_hx_vtable = 0;

Dynamic FlxQuadTree_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxQuadTree_obj > _hx_result = new FlxQuadTree_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool FlxQuadTree_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1fbb2b20) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1fbb2b20;
	} else {
		return inClassId==(int)0x7da4a0b2;
	}
}

void FlxQuadTree_obj::reset(Float X,Float Y,Float Width,Float Height, ::flixel::_hx_system::FlxQuadTree Parent){
            	HX_STACKFRAME(&_hx_pos_d6b090d39d0d72d3_277_reset)
HXLINE( 278)		this->exists = true;
HXLINE( 280)		{
HXLINE( 280)			this->x = X;
HXDLIN( 280)			this->y = Y;
HXDLIN( 280)			this->width = Width;
HXDLIN( 280)			this->height = Height;
            		}
HXLINE( 282)		this->_headA = (this->_tailA = ::flixel::_hx_system::FlxLinkedList_obj::recycle());
HXLINE( 283)		this->_headB = (this->_tailB = ::flixel::_hx_system::FlxLinkedList_obj::recycle());
HXLINE( 286)		if (::hx::IsNotNull( Parent )) {
HXLINE( 288)			 ::flixel::_hx_system::FlxLinkedList iterator;
HXLINE( 289)			 ::flixel::_hx_system::FlxLinkedList ot;
HXLINE( 290)			if (::hx::IsNotNull( Parent->_headA->object )) {
HXLINE( 292)				iterator = Parent->_headA;
HXLINE( 293)				while(::hx::IsNotNull( iterator )){
HXLINE( 295)					if (::hx::IsNotNull( this->_tailA->object )) {
HXLINE( 297)						ot = this->_tailA;
HXLINE( 298)						this->_tailA = ::flixel::_hx_system::FlxLinkedList_obj::recycle();
HXLINE( 299)						ot->next = this->_tailA;
            					}
HXLINE( 301)					this->_tailA->object = iterator->object;
HXLINE( 302)					iterator = iterator->next;
            				}
            			}
HXLINE( 305)			if (::hx::IsNotNull( Parent->_headB->object )) {
HXLINE( 307)				iterator = Parent->_headB;
HXLINE( 308)				while(::hx::IsNotNull( iterator )){
HXLINE( 310)					if (::hx::IsNotNull( this->_tailB->object )) {
HXLINE( 312)						ot = this->_tailB;
HXLINE( 313)						this->_tailB = ::flixel::_hx_system::FlxLinkedList_obj::recycle();
HXLINE( 314)						ot->next = this->_tailB;
            					}
HXLINE( 316)					this->_tailB->object = iterator->object;
HXLINE( 317)					iterator = iterator->next;
            				}
            			}
            		}
            		else {
HXLINE( 323)			::flixel::_hx_system::FlxQuadTree_obj::_min = ::Math_obj::floor(((this->width + this->height) / ( (Float)((2 * ::flixel::_hx_system::FlxQuadTree_obj::divisions)) )));
            		}
HXLINE( 325)		bool _hx_tmp;
HXDLIN( 325)		if (!((this->width > ::flixel::_hx_system::FlxQuadTree_obj::_min))) {
HXLINE( 325)			_hx_tmp = (this->height > ::flixel::_hx_system::FlxQuadTree_obj::_min);
            		}
            		else {
HXLINE( 325)			_hx_tmp = true;
            		}
HXDLIN( 325)		this->_canSubdivide = _hx_tmp;
HXLINE( 328)		this->_northWestTree = null();
HXLINE( 329)		this->_northEastTree = null();
HXLINE( 330)		this->_southEastTree = null();
HXLINE( 331)		this->_southWestTree = null();
HXLINE( 332)		this->_leftEdge = this->x;
HXLINE( 333)		this->_rightEdge = (this->x + this->width);
HXLINE( 334)		this->_halfWidth = (this->width / ( (Float)(2) ));
HXLINE( 335)		this->_midpointX = (this->_leftEdge + this->_halfWidth);
HXLINE( 336)		this->_topEdge = this->y;
HXLINE( 337)		this->_bottomEdge = (this->y + this->height);
HXLINE( 338)		this->_halfHeight = (this->height / ( (Float)(2) ));
HXLINE( 339)		this->_midpointY = (this->_topEdge + this->_halfHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxQuadTree_obj,reset,(void))

void FlxQuadTree_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_d6b090d39d0d72d3_346_destroy)
HXLINE( 347)		this->_headA = ( ( ::flixel::_hx_system::FlxLinkedList)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_headA)) );
HXLINE( 348)		this->_headB = ( ( ::flixel::_hx_system::FlxLinkedList)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_headB)) );
HXLINE( 350)		this->_tailA = ( ( ::flixel::_hx_system::FlxLinkedList)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_tailA)) );
HXLINE( 351)		this->_tailB = ( ( ::flixel::_hx_system::FlxLinkedList)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_tailB)) );
HXLINE( 353)		this->_northWestTree = ( ( ::flixel::_hx_system::FlxQuadTree)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_northWestTree)) );
HXLINE( 354)		this->_northEastTree = ( ( ::flixel::_hx_system::FlxQuadTree)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_northEastTree)) );
HXLINE( 356)		this->_southWestTree = ( ( ::flixel::_hx_system::FlxQuadTree)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_southWestTree)) );
HXLINE( 357)		this->_southEastTree = ( ( ::flixel::_hx_system::FlxQuadTree)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_southEastTree)) );
HXLINE( 359)		::flixel::_hx_system::FlxQuadTree_obj::_object = null();
HXLINE( 360)		::flixel::_hx_system::FlxQuadTree_obj::_processingCallback = null();
HXLINE( 361)		::flixel::_hx_system::FlxQuadTree_obj::_notifyCallback = null();
HXLINE( 363)		this->exists = false;
HXLINE( 366)		this->next = ::flixel::_hx_system::FlxQuadTree_obj::_cachedTreesHead;
HXLINE( 367)		::flixel::_hx_system::FlxQuadTree_obj::_cachedTreesHead = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 368)		::flixel::_hx_system::FlxQuadTree_obj::_NUM_CACHED_QUAD_TREES++;
HXLINE( 370)		this->super::destroy();
            	}


int FlxQuadTree_obj::divisions;

int FlxQuadTree_obj::_min;

 ::flixel::FlxObject FlxQuadTree_obj::_object;

 ::Dynamic FlxQuadTree_obj::_processingCallback;

 ::Dynamic FlxQuadTree_obj::_notifyCallback;

int FlxQuadTree_obj::_NUM_CACHED_QUAD_TREES;

 ::flixel::_hx_system::FlxQuadTree FlxQuadTree_obj::_cachedTreesHead;


::hx::ObjectPtr< FlxQuadTree_obj > FlxQuadTree_obj::__new(Float X,Float Y,Float Width,Float Height, ::flixel::_hx_system::FlxQuadTree Parent) {
	::hx::ObjectPtr< FlxQuadTree_obj > __this = new FlxQuadTree_obj();
	__this->__construct(X,Y,Width,Height,Parent);
	return __this;
}

::hx::ObjectPtr< FlxQuadTree_obj > FlxQuadTree_obj::__alloc(::hx::Ctx *_hx_ctx,Float X,Float Y,Float Width,Float Height, ::flixel::_hx_system::FlxQuadTree Parent) {
	FlxQuadTree_obj *__this = (FlxQuadTree_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxQuadTree_obj), true, "flixel.system.FlxQuadTree"));
	*(void **)__this = FlxQuadTree_obj::_hx_vtable;
	__this->__construct(X,Y,Width,Height,Parent);
	return __this;
}

FlxQuadTree_obj::FlxQuadTree_obj()
{
}

void FlxQuadTree_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxQuadTree);
	HX_MARK_MEMBER_NAME(exists,"exists");
	HX_MARK_MEMBER_NAME(_canSubdivide,"_canSubdivide");
	HX_MARK_MEMBER_NAME(_headA,"_headA");
	HX_MARK_MEMBER_NAME(_tailA,"_tailA");
	HX_MARK_MEMBER_NAME(_headB,"_headB");
	HX_MARK_MEMBER_NAME(_tailB,"_tailB");
	HX_MARK_MEMBER_NAME(_northWestTree,"_northWestTree");
	HX_MARK_MEMBER_NAME(_northEastTree,"_northEastTree");
	HX_MARK_MEMBER_NAME(_southEastTree,"_southEastTree");
	HX_MARK_MEMBER_NAME(_southWestTree,"_southWestTree");
	HX_MARK_MEMBER_NAME(_leftEdge,"_leftEdge");
	HX_MARK_MEMBER_NAME(_rightEdge,"_rightEdge");
	HX_MARK_MEMBER_NAME(_topEdge,"_topEdge");
	HX_MARK_MEMBER_NAME(_bottomEdge,"_bottomEdge");
	HX_MARK_MEMBER_NAME(_halfWidth,"_halfWidth");
	HX_MARK_MEMBER_NAME(_halfHeight,"_halfHeight");
	HX_MARK_MEMBER_NAME(_midpointX,"_midpointX");
	HX_MARK_MEMBER_NAME(_midpointY,"_midpointY");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_END_CLASS();
}

void FlxQuadTree_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(exists,"exists");
	HX_VISIT_MEMBER_NAME(_canSubdivide,"_canSubdivide");
	HX_VISIT_MEMBER_NAME(_headA,"_headA");
	HX_VISIT_MEMBER_NAME(_tailA,"_tailA");
	HX_VISIT_MEMBER_NAME(_headB,"_headB");
	HX_VISIT_MEMBER_NAME(_tailB,"_tailB");
	HX_VISIT_MEMBER_NAME(_northWestTree,"_northWestTree");
	HX_VISIT_MEMBER_NAME(_northEastTree,"_northEastTree");
	HX_VISIT_MEMBER_NAME(_southEastTree,"_southEastTree");
	HX_VISIT_MEMBER_NAME(_southWestTree,"_southWestTree");
	HX_VISIT_MEMBER_NAME(_leftEdge,"_leftEdge");
	HX_VISIT_MEMBER_NAME(_rightEdge,"_rightEdge");
	HX_VISIT_MEMBER_NAME(_topEdge,"_topEdge");
	HX_VISIT_MEMBER_NAME(_bottomEdge,"_bottomEdge");
	HX_VISIT_MEMBER_NAME(_halfWidth,"_halfWidth");
	HX_VISIT_MEMBER_NAME(_halfHeight,"_halfHeight");
	HX_VISIT_MEMBER_NAME(_midpointX,"_midpointX");
	HX_VISIT_MEMBER_NAME(_midpointY,"_midpointY");
	HX_VISIT_MEMBER_NAME(next,"next");
}

::hx::Val FlxQuadTree_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { return ::hx::Val( exists ); }
		if (HX_FIELD_EQ(inName,"_headA") ) { return ::hx::Val( _headA ); }
		if (HX_FIELD_EQ(inName,"_tailA") ) { return ::hx::Val( _tailA ); }
		if (HX_FIELD_EQ(inName,"_headB") ) { return ::hx::Val( _headB ); }
		if (HX_FIELD_EQ(inName,"_tailB") ) { return ::hx::Val( _tailB ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_topEdge") ) { return ::hx::Val( _topEdge ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_leftEdge") ) { return ::hx::Val( _leftEdge ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_rightEdge") ) { return ::hx::Val( _rightEdge ); }
		if (HX_FIELD_EQ(inName,"_halfWidth") ) { return ::hx::Val( _halfWidth ); }
		if (HX_FIELD_EQ(inName,"_midpointX") ) { return ::hx::Val( _midpointX ); }
		if (HX_FIELD_EQ(inName,"_midpointY") ) { return ::hx::Val( _midpointY ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_bottomEdge") ) { return ::hx::Val( _bottomEdge ); }
		if (HX_FIELD_EQ(inName,"_halfHeight") ) { return ::hx::Val( _halfHeight ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_canSubdivide") ) { return ::hx::Val( _canSubdivide ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_northWestTree") ) { return ::hx::Val( _northWestTree ); }
		if (HX_FIELD_EQ(inName,"_northEastTree") ) { return ::hx::Val( _northEastTree ); }
		if (HX_FIELD_EQ(inName,"_southEastTree") ) { return ::hx::Val( _southEastTree ); }
		if (HX_FIELD_EQ(inName,"_southWestTree") ) { return ::hx::Val( _southWestTree ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxQuadTree_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_min") ) { outValue = ( _min ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_object") ) { outValue = ( _object ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"divisions") ) { outValue = ( divisions ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_notifyCallback") ) { outValue = ( _notifyCallback ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_cachedTreesHead") ) { outValue = ( _cachedTreesHead ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_processingCallback") ) { outValue = ( _processingCallback ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_NUM_CACHED_QUAD_TREES") ) { outValue = ( _NUM_CACHED_QUAD_TREES ); return true; }
	}
	return false;
}

::hx::Val FlxQuadTree_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::flixel::_hx_system::FlxQuadTree >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { exists=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_headA") ) { _headA=inValue.Cast<  ::flixel::_hx_system::FlxLinkedList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tailA") ) { _tailA=inValue.Cast<  ::flixel::_hx_system::FlxLinkedList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_headB") ) { _headB=inValue.Cast<  ::flixel::_hx_system::FlxLinkedList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tailB") ) { _tailB=inValue.Cast<  ::flixel::_hx_system::FlxLinkedList >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_topEdge") ) { _topEdge=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_leftEdge") ) { _leftEdge=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_rightEdge") ) { _rightEdge=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_halfWidth") ) { _halfWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_midpointX") ) { _midpointX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_midpointY") ) { _midpointY=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_bottomEdge") ) { _bottomEdge=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_halfHeight") ) { _halfHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_canSubdivide") ) { _canSubdivide=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_northWestTree") ) { _northWestTree=inValue.Cast<  ::flixel::_hx_system::FlxQuadTree >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_northEastTree") ) { _northEastTree=inValue.Cast<  ::flixel::_hx_system::FlxQuadTree >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_southEastTree") ) { _southEastTree=inValue.Cast<  ::flixel::_hx_system::FlxQuadTree >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_southWestTree") ) { _southWestTree=inValue.Cast<  ::flixel::_hx_system::FlxQuadTree >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxQuadTree_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_min") ) { _min=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_object") ) { _object=ioValue.Cast<  ::flixel::FlxObject >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"divisions") ) { divisions=ioValue.Cast< int >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_notifyCallback") ) { _notifyCallback=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_cachedTreesHead") ) { _cachedTreesHead=ioValue.Cast<  ::flixel::_hx_system::FlxQuadTree >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_processingCallback") ) { _processingCallback=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_NUM_CACHED_QUAD_TREES") ) { _NUM_CACHED_QUAD_TREES=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void FlxQuadTree_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("exists",dc,1d,e0,bf));
	outFields->push(HX_("_canSubdivide",a8,f5,58,f6));
	outFields->push(HX_("_headA",62,1a,a0,20));
	outFields->push(HX_("_tailA",f2,4e,d0,06));
	outFields->push(HX_("_headB",63,1a,a0,20));
	outFields->push(HX_("_tailB",f3,4e,d0,06));
	outFields->push(HX_("_northWestTree",53,53,64,c5));
	outFields->push(HX_("_northEastTree",21,72,82,19));
	outFields->push(HX_("_southEastTree",69,27,e0,f8));
	outFields->push(HX_("_southWestTree",9b,08,c2,a4));
	outFields->push(HX_("_leftEdge",43,03,a0,91));
	outFields->push(HX_("_rightEdge",fa,99,77,09));
	outFields->push(HX_("_topEdge",f3,22,d8,1d));
	outFields->push(HX_("_bottomEdge",e7,f9,7f,fa));
	outFields->push(HX_("_halfWidth",14,6f,d7,6a));
	outFields->push(HX_("_halfHeight",19,3b,f9,c7));
	outFields->push(HX_("_midpointX",51,75,ad,d7));
	outFields->push(HX_("_midpointY",52,75,ad,d7));
	outFields->push(HX_("next",f3,84,02,49));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxQuadTree_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FlxQuadTree_obj,exists),HX_("exists",dc,1d,e0,bf)},
	{::hx::fsBool,(int)offsetof(FlxQuadTree_obj,_canSubdivide),HX_("_canSubdivide",a8,f5,58,f6)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxLinkedList */ ,(int)offsetof(FlxQuadTree_obj,_headA),HX_("_headA",62,1a,a0,20)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxLinkedList */ ,(int)offsetof(FlxQuadTree_obj,_tailA),HX_("_tailA",f2,4e,d0,06)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxLinkedList */ ,(int)offsetof(FlxQuadTree_obj,_headB),HX_("_headB",63,1a,a0,20)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxLinkedList */ ,(int)offsetof(FlxQuadTree_obj,_tailB),HX_("_tailB",f3,4e,d0,06)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxQuadTree */ ,(int)offsetof(FlxQuadTree_obj,_northWestTree),HX_("_northWestTree",53,53,64,c5)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxQuadTree */ ,(int)offsetof(FlxQuadTree_obj,_northEastTree),HX_("_northEastTree",21,72,82,19)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxQuadTree */ ,(int)offsetof(FlxQuadTree_obj,_southEastTree),HX_("_southEastTree",69,27,e0,f8)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxQuadTree */ ,(int)offsetof(FlxQuadTree_obj,_southWestTree),HX_("_southWestTree",9b,08,c2,a4)},
	{::hx::fsFloat,(int)offsetof(FlxQuadTree_obj,_leftEdge),HX_("_leftEdge",43,03,a0,91)},
	{::hx::fsFloat,(int)offsetof(FlxQuadTree_obj,_rightEdge),HX_("_rightEdge",fa,99,77,09)},
	{::hx::fsFloat,(int)offsetof(FlxQuadTree_obj,_topEdge),HX_("_topEdge",f3,22,d8,1d)},
	{::hx::fsFloat,(int)offsetof(FlxQuadTree_obj,_bottomEdge),HX_("_bottomEdge",e7,f9,7f,fa)},
	{::hx::fsFloat,(int)offsetof(FlxQuadTree_obj,_halfWidth),HX_("_halfWidth",14,6f,d7,6a)},
	{::hx::fsFloat,(int)offsetof(FlxQuadTree_obj,_halfHeight),HX_("_halfHeight",19,3b,f9,c7)},
	{::hx::fsFloat,(int)offsetof(FlxQuadTree_obj,_midpointX),HX_("_midpointX",51,75,ad,d7)},
	{::hx::fsFloat,(int)offsetof(FlxQuadTree_obj,_midpointY),HX_("_midpointY",52,75,ad,d7)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxQuadTree */ ,(int)offsetof(FlxQuadTree_obj,next),HX_("next",f3,84,02,49)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlxQuadTree_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &FlxQuadTree_obj::divisions,HX_("divisions",a6,2a,2c,7f)},
	{::hx::fsInt,(void *) &FlxQuadTree_obj::_min,HX_("_min",93,56,1e,3f)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(void *) &FlxQuadTree_obj::_object,HX_("_object",5e,90,b6,83)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &FlxQuadTree_obj::_processingCallback,HX_("_processingCallback",d7,be,42,97)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &FlxQuadTree_obj::_notifyCallback,HX_("_notifyCallback",4d,ea,c6,7e)},
	{::hx::fsInt,(void *) &FlxQuadTree_obj::_NUM_CACHED_QUAD_TREES,HX_("_NUM_CACHED_QUAD_TREES",a2,0a,d2,83)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxQuadTree */ ,(void *) &FlxQuadTree_obj::_cachedTreesHead,HX_("_cachedTreesHead",54,73,90,d0)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxQuadTree_obj_sMemberFields[] = {
	HX_("exists",dc,1d,e0,bf),
	HX_("_canSubdivide",a8,f5,58,f6),
	HX_("_headA",62,1a,a0,20),
	HX_("_tailA",f2,4e,d0,06),
	HX_("_headB",63,1a,a0,20),
	HX_("_tailB",f3,4e,d0,06),
	HX_("_northWestTree",53,53,64,c5),
	HX_("_northEastTree",21,72,82,19),
	HX_("_southEastTree",69,27,e0,f8),
	HX_("_southWestTree",9b,08,c2,a4),
	HX_("_leftEdge",43,03,a0,91),
	HX_("_rightEdge",fa,99,77,09),
	HX_("_topEdge",f3,22,d8,1d),
	HX_("_bottomEdge",e7,f9,7f,fa),
	HX_("_halfWidth",14,6f,d7,6a),
	HX_("_halfHeight",19,3b,f9,c7),
	HX_("_midpointX",51,75,ad,d7),
	HX_("_midpointY",52,75,ad,d7),
	HX_("next",f3,84,02,49),
	HX_("reset",cf,49,c8,e6),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

static void FlxQuadTree_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxQuadTree_obj::divisions,"divisions");
	HX_MARK_MEMBER_NAME(FlxQuadTree_obj::_min,"_min");
	HX_MARK_MEMBER_NAME(FlxQuadTree_obj::_object,"_object");
	HX_MARK_MEMBER_NAME(FlxQuadTree_obj::_processingCallback,"_processingCallback");
	HX_MARK_MEMBER_NAME(FlxQuadTree_obj::_notifyCallback,"_notifyCallback");
	HX_MARK_MEMBER_NAME(FlxQuadTree_obj::_NUM_CACHED_QUAD_TREES,"_NUM_CACHED_QUAD_TREES");
	HX_MARK_MEMBER_NAME(FlxQuadTree_obj::_cachedTreesHead,"_cachedTreesHead");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxQuadTree_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxQuadTree_obj::divisions,"divisions");
	HX_VISIT_MEMBER_NAME(FlxQuadTree_obj::_min,"_min");
	HX_VISIT_MEMBER_NAME(FlxQuadTree_obj::_object,"_object");
	HX_VISIT_MEMBER_NAME(FlxQuadTree_obj::_processingCallback,"_processingCallback");
	HX_VISIT_MEMBER_NAME(FlxQuadTree_obj::_notifyCallback,"_notifyCallback");
	HX_VISIT_MEMBER_NAME(FlxQuadTree_obj::_NUM_CACHED_QUAD_TREES,"_NUM_CACHED_QUAD_TREES");
	HX_VISIT_MEMBER_NAME(FlxQuadTree_obj::_cachedTreesHead,"_cachedTreesHead");
};

#endif

::hx::Class FlxQuadTree_obj::__mClass;

static ::String FlxQuadTree_obj_sStaticFields[] = {
	HX_("divisions",a6,2a,2c,7f),
	HX_("_min",93,56,1e,3f),
	HX_("_object",5e,90,b6,83),
	HX_("_processingCallback",d7,be,42,97),
	HX_("_notifyCallback",4d,ea,c6,7e),
	HX_("_NUM_CACHED_QUAD_TREES",a2,0a,d2,83),
	HX_("_cachedTreesHead",54,73,90,d0),
	::String(null())
};

void FlxQuadTree_obj::__register()
{
	FlxQuadTree_obj _hx_dummy;
	FlxQuadTree_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.FlxQuadTree",0a,87,43,f2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxQuadTree_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxQuadTree_obj::__SetStatic;
	__mClass->mMarkFunc = FlxQuadTree_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxQuadTree_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxQuadTree_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxQuadTree_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxQuadTree_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxQuadTree_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxQuadTree_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxQuadTree_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d6b090d39d0d72d3_222_boot)
HXDLIN( 222)		_NUM_CACHED_QUAD_TREES = 0;
            	}
}

} // end namespace flixel
} // end namespace system
