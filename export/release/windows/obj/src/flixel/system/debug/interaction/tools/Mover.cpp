// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_Interaction
#include <flixel/system/debug/interaction/Interaction.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Mover
#include <flixel/system/debug/interaction/tools/Mover.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool
#include <flixel/system/debug/interaction/tools/Tool.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools__Mover_GraphicMoverTool
#include <flixel/system/debug/interaction/tools/_Mover/GraphicMoverTool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a3cdf69c667c8d41_17_new,"flixel.system.debug.interaction.tools.Mover","new",0x9079915c,"flixel.system.debug.interaction.tools.Mover.new","flixel/system/debug/interaction/tools/Mover.hx",17,0xc1a785b7)
HX_LOCAL_STACK_FRAME(_hx_pos_a3cdf69c667c8d41_23_init,"flixel.system.debug.interaction.tools.Mover","init",0xd69e5694,"flixel.system.debug.interaction.tools.Mover.init","flixel/system/debug/interaction/tools/Mover.hx",23,0xc1a785b7)
namespace flixel{
namespace _hx_system{
namespace debug{
namespace interaction{
namespace tools{

void Mover_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a3cdf69c667c8d41_17_new)
HXDLIN(  17)		super::__construct();
            	}

Dynamic Mover_obj::__CreateEmpty() { return new Mover_obj; }

void *Mover_obj::_hx_vtable = 0;

Dynamic Mover_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Mover_obj > _hx_result = new Mover_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Mover_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1361d5a9 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x67484b98) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x67484b98;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

 ::flixel::_hx_system::debug::interaction::tools::Tool Mover_obj::init( ::flixel::_hx_system::debug::interaction::Interaction brain){
            	HX_GC_STACKFRAME(&_hx_pos_a3cdf69c667c8d41_23_init)
HXLINE(  24)		this->super::init(brain);
HXLINE(  25)		this->_lastCursorPosition =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,brain->flixelPointer->x,brain->flixelPointer->x);
HXLINE(  27)		this->_name = HX_("Mover",21,3c,93,9f);
HXLINE(  28)		this->_shortcut = HX_("Shift",62,5c,50,0f);
HXLINE(  29)		this->setButton(::hx::ClassOf< ::flixel::_hx_system::debug::interaction::tools::_Mover::GraphicMoverTool >());
HXLINE(  30)		this->setCursor( ::flixel::_hx_system::debug::interaction::tools::_Mover::GraphicMoverTool_obj::__alloc( HX_CTX ,0,0,null(),null()));
HXLINE(  32)		return ::hx::ObjectPtr<OBJ_>(this);
            	}



::hx::ObjectPtr< Mover_obj > Mover_obj::__new() {
	::hx::ObjectPtr< Mover_obj > __this = new Mover_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Mover_obj > Mover_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Mover_obj *__this = (Mover_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Mover_obj), true, "flixel.system.debug.interaction.tools.Mover"));
	*(void **)__this = Mover_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Mover_obj::Mover_obj()
{
}

void Mover_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Mover);
	HX_MARK_MEMBER_NAME(_lastCursorPosition,"_lastCursorPosition");
	 ::flixel::_hx_system::debug::interaction::tools::Tool_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Mover_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_lastCursorPosition,"_lastCursorPosition");
	 ::flixel::_hx_system::debug::interaction::tools::Tool_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Mover_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return ::hx::Val( init_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_lastCursorPosition") ) { return ::hx::Val( _lastCursorPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Mover_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"_lastCursorPosition") ) { _lastCursorPosition=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Mover_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_lastCursorPosition",b4,fe,02,31));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Mover_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(Mover_obj,_lastCursorPosition),HX_("_lastCursorPosition",b4,fe,02,31)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Mover_obj_sStaticStorageInfo = 0;
#endif

static ::String Mover_obj_sMemberFields[] = {
	HX_("_lastCursorPosition",b4,fe,02,31),
	HX_("init",10,3b,bb,45),
	::String(null()) };

::hx::Class Mover_obj::__mClass;

void Mover_obj::__register()
{
	Mover_obj _hx_dummy;
	Mover_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.system.debug.interaction.tools.Mover",6a,f3,4e,4b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Mover_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Mover_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mover_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mover_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace interaction
} // end namespace tools
