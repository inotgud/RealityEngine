// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxExtendedSprite
#include <flixel/addons/display/FlxExtendedSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxButtonPlus
#include <flixel/addons/ui/FlxButtonPlus.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_41f2a0fccfabe0c4_27_new,"flixel.addons.ui.FlxButtonPlus","new",0x318dc4ff,"flixel.addons.ui.FlxButtonPlus.new","flixel/addons/ui/FlxButtonPlus.hx",27,0x05375332)
static const int _hx_array_data_22f1d98d_1[] = {
	(int)-16744448,(int)-16711936,
};
static const int _hx_array_data_22f1d98d_2[] = {
	(int)-8388608,(int)-65536,
};
HX_LOCAL_STACK_FRAME(_hx_pos_41f2a0fccfabe0c4_177_update,"flixel.addons.ui.FlxButtonPlus","update",0xd094feca,"flixel.addons.ui.FlxButtonPlus.update","flixel/addons/ui/FlxButtonPlus.hx",177,0x05375332)
HX_LOCAL_STACK_FRAME(_hx_pos_41f2a0fccfabe0c4_197_updateButton,"flixel.addons.ui.FlxButtonPlus","updateButton",0xa1cc085c,"flixel.addons.ui.FlxButtonPlus.updateButton","flixel/addons/ui/FlxButtonPlus.hx",197,0x05375332)
HX_LOCAL_STACK_FRAME(_hx_pos_41f2a0fccfabe0c4_267_destroy,"flixel.addons.ui.FlxButtonPlus","destroy",0x38805d19,"flixel.addons.ui.FlxButtonPlus.destroy","flixel/addons/ui/FlxButtonPlus.hx",267,0x05375332)
HX_LOCAL_STACK_FRAME(_hx_pos_41f2a0fccfabe0c4_290_onMouseUp,"flixel.addons.ui.FlxButtonPlus","onMouseUp",0x431b6260,"flixel.addons.ui.FlxButtonPlus.onMouseUp","flixel/addons/ui/FlxButtonPlus.hx",290,0x05375332)
HX_LOCAL_STACK_FRAME(_hx_pos_41f2a0fccfabe0c4_300_updateInactiveButtonColors,"flixel.addons.ui.FlxButtonPlus","updateInactiveButtonColors",0x22344137,"flixel.addons.ui.FlxButtonPlus.updateInactiveButtonColors","flixel/addons/ui/FlxButtonPlus.hx",300,0x05375332)
HX_LOCAL_STACK_FRAME(_hx_pos_41f2a0fccfabe0c4_339_updateActiveButtonColors,"flixel.addons.ui.FlxButtonPlus","updateActiveButtonColors",0x9fdc5992,"flixel.addons.ui.FlxButtonPlus.updateActiveButtonColors","flixel/addons/ui/FlxButtonPlus.hx",339,0x05375332)
namespace flixel{
namespace addons{
namespace ui{

void FlxButtonPlus_obj::__construct(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y, ::Dynamic Callback,::String Label,::hx::Null< int >  __o_Width,::hx::Null< int >  __o_Height){
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            		int Width = __o_Width.Default(100);
            		int Height = __o_Height.Default(20);
            	HX_GC_STACKFRAME(&_hx_pos_41f2a0fccfabe0c4_27_new)
HXLINE(  82)		this->_initialized = false;
HXLINE(  77)		this->_status = 0;
HXLINE(  36)		this->borderColor = -1;
HXLINE(  97)		this->offColor = ::Array_obj< int >::fromData( _hx_array_data_22f1d98d_1,2);
HXLINE(  98)		this->onColor = ::Array_obj< int >::fromData( _hx_array_data_22f1d98d_2,2);
HXLINE( 100)		super::__construct(4,null(),null());
HXLINE( 102)		this->set_x(X);
HXLINE( 103)		this->set_y(Y);
HXLINE( 104)		this->onClickCallback = Callback;
HXLINE( 106)		{
HXLINE( 106)			 ::flixel::addons::display::FlxExtendedSprite Value =  ::flixel::addons::display::FlxExtendedSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 106)			if (::hx::IsNull( Value )) {
HXLINE( 106)				this->buttonNormal = null();
            			}
            			else {
HXLINE( 106)				if (::hx::IsNotEq( this->buttonHighlight,this->buttonNormal )) {
HXLINE( 106)					::flixel::util::FlxDestroyUtil_obj::destroy(this->buttonNormal);
            				}
HXDLIN( 106)				this->group->replace(( ( ::flixel::FlxSprite)(this->buttonNormal) ),Value).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 106)				if ((this->_status != 0)) {
HXLINE( 106)					Value->set_visible(false);
HXDLIN( 106)					this->buttonHighlight->set_visible(true);
            				}
HXDLIN( 106)				this->buttonNormal = Value;
            			}
            		}
HXLINE( 111)		this->buttonNormal->setSize(( (Float)(Width) ),( (Float)(Height) ));
HXLINE( 114)		this->updateInactiveButtonColors(this->offColor);
HXLINE( 116)		this->buttonNormal->set_solid(false);
HXLINE( 117)		this->buttonNormal->scrollFactor->set(null(),null());
HXLINE( 119)		{
HXLINE( 119)			 ::flixel::addons::display::FlxExtendedSprite Value1 =  ::flixel::addons::display::FlxExtendedSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 119)			if (::hx::IsNull( Value1 )) {
HXLINE( 119)				this->buttonHighlight = null();
            			}
            			else {
HXLINE( 119)				if (::hx::IsNotEq( this->buttonHighlight,this->buttonNormal )) {
HXLINE( 119)					::flixel::util::FlxDestroyUtil_obj::destroy(this->buttonHighlight);
            				}
HXDLIN( 119)				if ((this->_status != 1)) {
HXLINE( 119)					Value1->set_visible(false);
HXDLIN( 119)					this->buttonNormal->set_visible(true);
            				}
HXDLIN( 119)				this->group->replace(( ( ::flixel::FlxSprite)(this->buttonHighlight) ),Value1).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 119)				this->buttonHighlight = Value1;
            			}
            		}
HXLINE( 124)		this->buttonHighlight->setSize(( (Float)(Width) ),( (Float)(Height) ));
HXLINE( 127)		this->updateActiveButtonColors(this->onColor);
HXLINE( 129)		this->buttonHighlight->set_solid(false);
HXLINE( 130)		this->buttonHighlight->set_visible(false);
HXLINE( 131)		this->buttonHighlight->scrollFactor->set(null(),null());
HXLINE( 133)		this->add(this->buttonNormal);
HXLINE( 134)		this->add(this->buttonHighlight);
HXLINE( 136)		if (::hx::IsNotNull( Label )) {
HXLINE( 138)			{
HXLINE( 138)				 ::flixel::text::FlxText Value =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,3,Width,Label,null(),null());
HXDLIN( 138)				if (::hx::IsNull( Value )) {
HXLINE( 138)					this->textNormal = null();
            				}
            				else {
HXLINE( 138)					if (::hx::IsNotEq( this->textNormal,this->textHighlight )) {
HXLINE( 138)						::flixel::util::FlxDestroyUtil_obj::destroy(this->textNormal);
            					}
HXDLIN( 138)					if ((this->_status != 0)) {
HXLINE( 138)						Value->set_visible(false);
HXDLIN( 138)						this->textHighlight->set_visible(true);
            					}
HXDLIN( 138)					this->group->replace(( ( ::flixel::FlxSprite)(this->textNormal) ),Value).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 138)					this->textNormal = Value;
            				}
            			}
HXLINE( 139)			this->textNormal->setFormat(null(),8,16777215,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 141)			{
HXLINE( 141)				 ::flixel::text::FlxText Value1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,3,Width,Label,null(),null());
HXDLIN( 141)				if (::hx::IsNull( Value1 )) {
HXLINE( 141)					this->textHighlight = null();
            				}
            				else {
HXLINE( 141)					if (::hx::IsNotEq( this->textNormal,this->textHighlight )) {
HXLINE( 141)						::flixel::util::FlxDestroyUtil_obj::destroy(this->textHighlight);
            					}
HXDLIN( 141)					if ((this->_status != 1)) {
HXLINE( 141)						Value1->set_visible(false);
HXDLIN( 141)						this->textNormal->set_visible(true);
            					}
HXDLIN( 141)					this->group->replace(( ( ::flixel::FlxSprite)(this->textHighlight) ),Value1).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 141)					this->textHighlight = Value1;
            				}
            			}
HXLINE( 142)			this->textHighlight->setFormat(null(),8,16777215,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 143)			this->textHighlight->set_visible(false);
HXLINE( 145)			this->add(this->textNormal);
HXLINE( 146)			this->add(this->textHighlight);
            		}
            	}

Dynamic FlxButtonPlus_obj::__CreateEmpty() { return new FlxButtonPlus_obj; }

void *FlxButtonPlus_obj::_hx_vtable = 0;

Dynamic FlxButtonPlus_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxButtonPlus_obj > _hx_result = new FlxButtonPlus_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool FlxButtonPlus_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x288ce903) {
			if (inClassId<=(int)0x243cd29b) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x243cd29b;
			} else {
				return inClassId==(int)0x288ce903;
			}
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void FlxButtonPlus_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_41f2a0fccfabe0c4_177_update)
HXLINE( 178)		if (!(this->_initialized)) {
HXLINE( 180)			if (::hx::IsNotNull( ::openfl::Lib_obj::get_current()->stage )) {
HXLINE( 182)				::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->onMouseUp_dyn(),null(),null(),null());
HXLINE( 183)				this->_initialized = true;
            			}
            		}
HXLINE( 187)		this->super::update(elapsed);
HXLINE( 190)		this->updateButton();
            	}


void FlxButtonPlus_obj::updateButton(){
            	HX_STACKFRAME(&_hx_pos_41f2a0fccfabe0c4_197_updateButton)
HXLINE( 198)		int prevStatus = this->_status;
HXLINE( 199)		bool offAll = true;
HXLINE( 201)		{
HXLINE( 201)			int _g = 0;
HXDLIN( 201)			::Array< ::Dynamic> _g1 = this->buttonNormal->get_cameras();
HXDLIN( 201)			while((_g < _g1->length)){
HXLINE( 201)				 ::flixel::FlxCamera camera = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 201)				_g = (_g + 1);
HXLINE( 203)				 ::flixel::addons::display::FlxExtendedSprite _this = this->buttonNormal;
HXDLIN( 203)				_this->_rect->x = _this->x;
HXDLIN( 203)				_this->_rect->y = _this->y;
HXDLIN( 203)				_this->_rect->width = _this->get_width();
HXDLIN( 203)				_this->_rect->height = _this->get_height();
HXDLIN( 203)				if (::flixel::math::FlxMath_obj::mouseInFlxRect(true,_this->_rect)) {
HXLINE( 205)					offAll = false;
HXLINE( 207)					if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE( 209)						this->_status = 2;
            					}
HXLINE( 212)					if ((this->_status == 0)) {
HXLINE( 214)						this->_status = 1;
            					}
            				}
            			}
            		}
HXLINE( 219)		if (offAll) {
HXLINE( 221)			this->_status = 0;
            		}
HXLINE( 224)		if ((this->_status != prevStatus)) {
HXLINE( 226)			if ((this->_status == 0)) {
HXLINE( 228)				this->buttonHighlight->set_visible(false);
HXLINE( 229)				this->buttonNormal->set_visible(true);
HXLINE( 231)				if (::hx::IsNotNull( this->textNormal )) {
HXLINE( 233)					this->textHighlight->set_visible(false);
HXLINE( 234)					this->textNormal->set_visible(true);
            				}
HXLINE( 237)				if (::hx::IsNotNull( this->leaveCallback )) {
HXLINE( 239)					this->leaveCallback();
            				}
            			}
            			else {
HXLINE( 242)				if ((this->_status == 1)) {
HXLINE( 244)					this->buttonNormal->set_visible(false);
HXLINE( 245)					this->buttonHighlight->set_visible(true);
HXLINE( 247)					if (::hx::IsNotNull( this->textNormal )) {
HXLINE( 249)						this->textNormal->set_visible(false);
HXLINE( 250)						this->textHighlight->set_visible(true);
            					}
HXLINE( 253)					if (::hx::IsNotNull( this->enterCallback )) {
HXLINE( 255)						this->enterCallback();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxButtonPlus_obj,updateButton,(void))

void FlxButtonPlus_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_41f2a0fccfabe0c4_267_destroy)
HXLINE( 268)		if (::hx::IsNotNull( ::openfl::Lib_obj::get_current()->stage )) {
HXLINE( 270)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->onMouseUp_dyn(),null());
            		}
HXLINE( 273)		{
HXLINE( 273)			 ::flixel::addons::display::FlxExtendedSprite Value = ( ( ::flixel::addons::display::FlxExtendedSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->buttonNormal)) );
HXDLIN( 273)			if (::hx::IsNull( Value )) {
HXLINE( 273)				this->buttonNormal = null();
            			}
            			else {
HXLINE( 273)				if (::hx::IsNotEq( this->buttonHighlight,this->buttonNormal )) {
HXLINE( 273)					::flixel::util::FlxDestroyUtil_obj::destroy(this->buttonNormal);
            				}
HXDLIN( 273)				this->group->replace(( ( ::flixel::FlxSprite)(this->buttonNormal) ),Value).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 273)				if ((this->_status != 0)) {
HXLINE( 273)					Value->set_visible(false);
HXDLIN( 273)					this->buttonHighlight->set_visible(true);
            				}
HXDLIN( 273)				this->buttonNormal = Value;
            			}
            		}
HXLINE( 274)		{
HXLINE( 274)			 ::flixel::addons::display::FlxExtendedSprite Value1 = ( ( ::flixel::addons::display::FlxExtendedSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->buttonHighlight)) );
HXDLIN( 274)			if (::hx::IsNull( Value1 )) {
HXLINE( 274)				this->buttonHighlight = null();
            			}
            			else {
HXLINE( 274)				if (::hx::IsNotEq( this->buttonHighlight,this->buttonNormal )) {
HXLINE( 274)					::flixel::util::FlxDestroyUtil_obj::destroy(this->buttonHighlight);
            				}
HXDLIN( 274)				if ((this->_status != 1)) {
HXLINE( 274)					Value1->set_visible(false);
HXDLIN( 274)					this->buttonNormal->set_visible(true);
            				}
HXDLIN( 274)				this->group->replace(( ( ::flixel::FlxSprite)(this->buttonHighlight) ),Value1).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 274)				this->buttonHighlight = Value1;
            			}
            		}
HXLINE( 275)		{
HXLINE( 275)			 ::flixel::text::FlxText Value2 = ( ( ::flixel::text::FlxText)(::flixel::util::FlxDestroyUtil_obj::destroy(this->textNormal)) );
HXDLIN( 275)			if (::hx::IsNull( Value2 )) {
HXLINE( 275)				this->textNormal = null();
            			}
            			else {
HXLINE( 275)				if (::hx::IsNotEq( this->textNormal,this->textHighlight )) {
HXLINE( 275)					::flixel::util::FlxDestroyUtil_obj::destroy(this->textNormal);
            				}
HXDLIN( 275)				if ((this->_status != 0)) {
HXLINE( 275)					Value2->set_visible(false);
HXDLIN( 275)					this->textHighlight->set_visible(true);
            				}
HXDLIN( 275)				this->group->replace(( ( ::flixel::FlxSprite)(this->textNormal) ),Value2).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 275)				this->textNormal = Value2;
            			}
            		}
HXLINE( 276)		{
HXLINE( 276)			 ::flixel::text::FlxText Value3 = ( ( ::flixel::text::FlxText)(::flixel::util::FlxDestroyUtil_obj::destroy(this->textHighlight)) );
HXDLIN( 276)			if (::hx::IsNull( Value3 )) {
HXLINE( 276)				this->textHighlight = null();
            			}
            			else {
HXLINE( 276)				if (::hx::IsNotEq( this->textNormal,this->textHighlight )) {
HXLINE( 276)					::flixel::util::FlxDestroyUtil_obj::destroy(this->textHighlight);
            				}
HXDLIN( 276)				if ((this->_status != 1)) {
HXLINE( 276)					Value3->set_visible(false);
HXDLIN( 276)					this->textNormal->set_visible(true);
            				}
HXDLIN( 276)				this->group->replace(( ( ::flixel::FlxSprite)(this->textHighlight) ),Value3).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 276)				this->textHighlight = Value3;
            			}
            		}
HXLINE( 278)		this->onClickCallback = null();
HXLINE( 279)		this->enterCallback = null();
HXLINE( 280)		this->leaveCallback = null();
HXLINE( 282)		this->super::destroy();
            	}


void FlxButtonPlus_obj::onMouseUp( ::openfl::events::MouseEvent E){
            	HX_STACKFRAME(&_hx_pos_41f2a0fccfabe0c4_290_onMouseUp)
HXDLIN( 290)		bool _hx_tmp;
HXDLIN( 290)		bool _hx_tmp1;
HXDLIN( 290)		bool _hx_tmp2;
HXDLIN( 290)		bool _hx_tmp3;
HXDLIN( 290)		if (this->exists) {
HXDLIN( 290)			_hx_tmp3 = this->visible;
            		}
            		else {
HXDLIN( 290)			_hx_tmp3 = false;
            		}
HXDLIN( 290)		if (_hx_tmp3) {
HXDLIN( 290)			_hx_tmp2 = this->active;
            		}
            		else {
HXDLIN( 290)			_hx_tmp2 = false;
            		}
HXDLIN( 290)		if (_hx_tmp2) {
HXDLIN( 290)			_hx_tmp1 = (this->_status == 2);
            		}
            		else {
HXDLIN( 290)			_hx_tmp1 = false;
            		}
HXDLIN( 290)		if (_hx_tmp1) {
HXDLIN( 290)			_hx_tmp = ::hx::IsNotNull( this->onClickCallback );
            		}
            		else {
HXDLIN( 290)			_hx_tmp = false;
            		}
HXDLIN( 290)		if (_hx_tmp) {
HXLINE( 292)			this->onClickCallback();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxButtonPlus_obj,onMouseUp,(void))

void FlxButtonPlus_obj::updateInactiveButtonColors(::Array< int > Colors){
            	HX_GC_STACKFRAME(&_hx_pos_41f2a0fccfabe0c4_300_updateInactiveButtonColors)
HXLINE( 301)		this->offColor = Colors;
HXLINE( 303)		Float w = this->buttonNormal->get_width();
HXLINE( 304)		Float h = this->buttonNormal->get_height();
HXLINE( 309)		int colA;
HXLINE( 310)		int colRGB;
HXLINE( 312)		::String normalKey = ((((HX_("Gradient: ",b6,cc,a6,9a) + w) + HX_(" x ",c8,b0,18,00)) + h) + HX_(", colors: [",51,72,4d,6c));
HXLINE( 314)		{
HXLINE( 314)			int _g = 0;
HXDLIN( 314)			::Array< int > _g1 = this->offColor;
HXDLIN( 314)			while((_g < _g1->length)){
HXLINE( 314)				int col = _g1->__get(_g);
HXDLIN( 314)				_g = (_g + 1);
HXLINE( 316)				colA = ((col >> 24) & 255);
HXLINE( 317)				colRGB = (col & 16777215);
HXLINE( 319)				normalKey = ((((normalKey + colRGB) + HX_("_",5f,00,00,00)) + colA) + HX_(", ",74,26,00,00));
            			}
            		}
HXLINE( 322)		normalKey = (normalKey + HX_("]",5d,00,00,00));
HXLINE( 324)		if ((::hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(normalKey)) ) ) == false)) {
HXLINE( 326)			 ::flixel::_hx_system::frontEnds::BitmapFrontEnd normalGraphics = ::flixel::FlxG_obj::bitmap;
HXDLIN( 326)			int normalGraphics1 = ::Std_obj::_hx_int(w);
HXDLIN( 326)			 ::flixel::graphics::FlxGraphic normalGraphics2 = normalGraphics->create(normalGraphics1,::Std_obj::_hx_int(h),0,false,normalKey);
HXLINE( 327)			 ::openfl::display::BitmapData normalGraphics3 = normalGraphics2->bitmap;
HXDLIN( 327)			normalGraphics3->fillRect( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,w,h),this->borderColor);
HXLINE( 328)			 ::openfl::display::BitmapData normalGraphics4 = normalGraphics2->bitmap;
HXDLIN( 328)			int _hx_tmp = ::Std_obj::_hx_int((w - ( (Float)(2) )));
HXDLIN( 328)			int _hx_tmp1 = ::Std_obj::_hx_int((h - ( (Float)(2) )));
HXDLIN( 328)			::flixel::util::FlxGradient_obj::overlayGradientOnBitmapData(normalGraphics4,_hx_tmp,_hx_tmp1,this->offColor,1,1,null(),null(),null());
            		}
HXLINE( 331)		 ::flixel::addons::display::FlxExtendedSprite _hx_tmp = this->buttonNormal;
HXDLIN( 331)		_hx_tmp->set_pixels(( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(normalKey)) )->bitmap);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxButtonPlus_obj,updateInactiveButtonColors,(void))

void FlxButtonPlus_obj::updateActiveButtonColors(::Array< int > Colors){
            	HX_GC_STACKFRAME(&_hx_pos_41f2a0fccfabe0c4_339_updateActiveButtonColors)
HXLINE( 340)		this->onColor = Colors;
HXLINE( 342)		Float w = this->buttonHighlight->get_width();
HXLINE( 343)		Float h = this->buttonHighlight->get_height();
HXLINE( 348)		int colA;
HXLINE( 349)		int colRGB;
HXLINE( 351)		::String highlightKey = ((((HX_("Gradient: ",b6,cc,a6,9a) + w) + HX_(" x ",c8,b0,18,00)) + h) + HX_(", colors: [",51,72,4d,6c));
HXLINE( 353)		{
HXLINE( 353)			int _g = 0;
HXDLIN( 353)			::Array< int > _g1 = this->onColor;
HXDLIN( 353)			while((_g < _g1->length)){
HXLINE( 353)				int col = _g1->__get(_g);
HXDLIN( 353)				_g = (_g + 1);
HXLINE( 355)				colA = ((col >> 24) & 255);
HXLINE( 356)				colRGB = (col & 16777215);
HXLINE( 358)				highlightKey = ((((highlightKey + colRGB) + HX_("_",5f,00,00,00)) + colA) + HX_(", ",74,26,00,00));
            			}
            		}
HXLINE( 361)		highlightKey = (highlightKey + HX_("]",5d,00,00,00));
HXLINE( 363)		if ((::hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(highlightKey)) ) ) == false)) {
HXLINE( 365)			 ::flixel::_hx_system::frontEnds::BitmapFrontEnd highlightGraphics = ::flixel::FlxG_obj::bitmap;
HXDLIN( 365)			int highlightGraphics1 = ::Std_obj::_hx_int(w);
HXDLIN( 365)			 ::flixel::graphics::FlxGraphic highlightGraphics2 = highlightGraphics->create(highlightGraphics1,::Std_obj::_hx_int(h),0,false,highlightKey);
HXLINE( 366)			 ::openfl::display::BitmapData highlightGraphics3 = highlightGraphics2->bitmap;
HXDLIN( 366)			highlightGraphics3->fillRect( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,w,h),this->borderColor);
HXLINE( 367)			 ::openfl::display::BitmapData highlightGraphics4 = highlightGraphics2->bitmap;
HXDLIN( 367)			int _hx_tmp = ::Std_obj::_hx_int((w - ( (Float)(2) )));
HXDLIN( 367)			int _hx_tmp1 = ::Std_obj::_hx_int((h - ( (Float)(2) )));
HXDLIN( 367)			::flixel::util::FlxGradient_obj::overlayGradientOnBitmapData(highlightGraphics4,_hx_tmp,_hx_tmp1,this->onColor,1,1,null(),null(),null());
            		}
HXLINE( 370)		 ::flixel::addons::display::FlxExtendedSprite _hx_tmp = this->buttonHighlight;
HXDLIN( 370)		_hx_tmp->set_pixels(( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(highlightKey)) )->bitmap);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxButtonPlus_obj,updateActiveButtonColors,(void))


::hx::ObjectPtr< FlxButtonPlus_obj > FlxButtonPlus_obj::__new(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y, ::Dynamic Callback,::String Label,::hx::Null< int >  __o_Width,::hx::Null< int >  __o_Height) {
	::hx::ObjectPtr< FlxButtonPlus_obj > __this = new FlxButtonPlus_obj();
	__this->__construct(__o_X,__o_Y,Callback,Label,__o_Width,__o_Height);
	return __this;
}

::hx::ObjectPtr< FlxButtonPlus_obj > FlxButtonPlus_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y, ::Dynamic Callback,::String Label,::hx::Null< int >  __o_Width,::hx::Null< int >  __o_Height) {
	FlxButtonPlus_obj *__this = (FlxButtonPlus_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxButtonPlus_obj), true, "flixel.addons.ui.FlxButtonPlus"));
	*(void **)__this = FlxButtonPlus_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,Callback,Label,__o_Width,__o_Height);
	return __this;
}

FlxButtonPlus_obj::FlxButtonPlus_obj()
{
}

void FlxButtonPlus_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxButtonPlus);
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(offColor,"offColor");
	HX_MARK_MEMBER_NAME(onColor,"onColor");
	HX_MARK_MEMBER_NAME(onClickCallback,"onClickCallback");
	HX_MARK_MEMBER_NAME(enterCallback,"enterCallback");
	HX_MARK_MEMBER_NAME(leaveCallback,"leaveCallback");
	HX_MARK_MEMBER_NAME(buttonNormal,"buttonNormal");
	HX_MARK_MEMBER_NAME(buttonHighlight,"buttonHighlight");
	HX_MARK_MEMBER_NAME(textNormal,"textNormal");
	HX_MARK_MEMBER_NAME(textHighlight,"textHighlight");
	HX_MARK_MEMBER_NAME(_status,"_status");
	HX_MARK_MEMBER_NAME(_initialized,"_initialized");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxButtonPlus_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(offColor,"offColor");
	HX_VISIT_MEMBER_NAME(onColor,"onColor");
	HX_VISIT_MEMBER_NAME(onClickCallback,"onClickCallback");
	HX_VISIT_MEMBER_NAME(enterCallback,"enterCallback");
	HX_VISIT_MEMBER_NAME(leaveCallback,"leaveCallback");
	HX_VISIT_MEMBER_NAME(buttonNormal,"buttonNormal");
	HX_VISIT_MEMBER_NAME(buttonHighlight,"buttonHighlight");
	HX_VISIT_MEMBER_NAME(textNormal,"textNormal");
	HX_VISIT_MEMBER_NAME(textHighlight,"textHighlight");
	HX_VISIT_MEMBER_NAME(_status,"_status");
	HX_VISIT_MEMBER_NAME(_initialized,"_initialized");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxButtonPlus_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onColor") ) { return ::hx::Val( onColor ); }
		if (HX_FIELD_EQ(inName,"_status") ) { return ::hx::Val( _status ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"offColor") ) { return ::hx::Val( offColor ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return ::hx::Val( onMouseUp_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textNormal") ) { return ::hx::Val( textNormal ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return ::hx::Val( borderColor ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"buttonNormal") ) { return ::hx::Val( buttonNormal ); }
		if (HX_FIELD_EQ(inName,"_initialized") ) { return ::hx::Val( _initialized ); }
		if (HX_FIELD_EQ(inName,"updateButton") ) { return ::hx::Val( updateButton_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"enterCallback") ) { return ::hx::Val( enterCallback ); }
		if (HX_FIELD_EQ(inName,"leaveCallback") ) { return ::hx::Val( leaveCallback ); }
		if (HX_FIELD_EQ(inName,"textHighlight") ) { return ::hx::Val( textHighlight ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onClickCallback") ) { return ::hx::Val( onClickCallback ); }
		if (HX_FIELD_EQ(inName,"buttonHighlight") ) { return ::hx::Val( buttonHighlight ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"updateActiveButtonColors") ) { return ::hx::Val( updateActiveButtonColors_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"updateInactiveButtonColors") ) { return ::hx::Val( updateInactiveButtonColors_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxButtonPlus_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"onColor") ) { onColor=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_status") ) { _status=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"offColor") ) { offColor=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textNormal") ) { textNormal=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"buttonNormal") ) { buttonNormal=inValue.Cast<  ::flixel::addons::display::FlxExtendedSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_initialized") ) { _initialized=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"enterCallback") ) { enterCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leaveCallback") ) { leaveCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textHighlight") ) { textHighlight=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onClickCallback") ) { onClickCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buttonHighlight") ) { buttonHighlight=inValue.Cast<  ::flixel::addons::display::FlxExtendedSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxButtonPlus_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("borderColor",d7,3c,d5,d6));
	outFields->push(HX_("offColor",74,7b,5d,04));
	outFields->push(HX_("onColor",c4,0f,9a,e0));
	outFields->push(HX_("buttonNormal",b9,49,27,d8));
	outFields->push(HX_("buttonHighlight",e2,05,c4,76));
	outFields->push(HX_("textNormal",b4,f2,59,67));
	outFields->push(HX_("textHighlight",c7,eb,92,a4));
	outFields->push(HX_("_status",d1,f8,72,74));
	outFields->push(HX_("_initialized",15,a3,19,9d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxButtonPlus_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(FlxButtonPlus_obj,borderColor),HX_("borderColor",d7,3c,d5,d6)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(FlxButtonPlus_obj,offColor),HX_("offColor",74,7b,5d,04)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(FlxButtonPlus_obj,onColor),HX_("onColor",c4,0f,9a,e0)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxButtonPlus_obj,onClickCallback),HX_("onClickCallback",8e,c1,5c,f9)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxButtonPlus_obj,enterCallback),HX_("enterCallback",fd,9a,95,4f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxButtonPlus_obj,leaveCallback),HX_("leaveCallback",dc,d9,4b,66)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxExtendedSprite */ ,(int)offsetof(FlxButtonPlus_obj,buttonNormal),HX_("buttonNormal",b9,49,27,d8)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxExtendedSprite */ ,(int)offsetof(FlxButtonPlus_obj,buttonHighlight),HX_("buttonHighlight",e2,05,c4,76)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FlxButtonPlus_obj,textNormal),HX_("textNormal",b4,f2,59,67)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FlxButtonPlus_obj,textHighlight),HX_("textHighlight",c7,eb,92,a4)},
	{::hx::fsInt,(int)offsetof(FlxButtonPlus_obj,_status),HX_("_status",d1,f8,72,74)},
	{::hx::fsBool,(int)offsetof(FlxButtonPlus_obj,_initialized),HX_("_initialized",15,a3,19,9d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxButtonPlus_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxButtonPlus_obj_sMemberFields[] = {
	HX_("borderColor",d7,3c,d5,d6),
	HX_("offColor",74,7b,5d,04),
	HX_("onColor",c4,0f,9a,e0),
	HX_("onClickCallback",8e,c1,5c,f9),
	HX_("enterCallback",fd,9a,95,4f),
	HX_("leaveCallback",dc,d9,4b,66),
	HX_("buttonNormal",b9,49,27,d8),
	HX_("buttonHighlight",e2,05,c4,76),
	HX_("textNormal",b4,f2,59,67),
	HX_("textHighlight",c7,eb,92,a4),
	HX_("_status",d1,f8,72,74),
	HX_("_initialized",15,a3,19,9d),
	HX_("update",09,86,05,87),
	HX_("updateButton",db,08,a4,d9),
	HX_("destroy",fa,2c,86,24),
	HX_("onMouseUp",81,ac,1d,98),
	HX_("updateInactiveButtonColors",f6,81,e0,4c),
	HX_("updateActiveButtonColors",91,9c,32,d6),
	::String(null()) };

::hx::Class FlxButtonPlus_obj::__mClass;

void FlxButtonPlus_obj::__register()
{
	FlxButtonPlus_obj _hx_dummy;
	FlxButtonPlus_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.ui.FlxButtonPlus",8d,d9,f1,22);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxButtonPlus_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxButtonPlus_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxButtonPlus_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxButtonPlus_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
