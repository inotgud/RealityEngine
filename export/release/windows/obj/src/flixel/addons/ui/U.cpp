// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FontFixer
#include <flixel/addons/ui/FontFixer.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_54_xml_str,"flixel.addons.ui.U","xml_str",0xebebbe9f,"flixel.addons.ui.U.xml_str","flixel/addons/ui/U.hx",54,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_75_xml_name,"flixel.addons.ui.U","xml_name",0x7efe8c9d,"flixel.addons.ui.U.xml_name","flixel/addons/ui/U.hx",75,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_91_xml_color,"flixel.addons.ui.U","xml_color",0x53945ed1,"flixel.addons.ui.U.xml_color","flixel/addons/ui/U.hx",91,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_136_xml_strArray,"flixel.addons.ui.U","xml_strArray",0x1a3ebe7a,"flixel.addons.ui.U.xml_strArray","flixel/addons/ui/U.hx",136,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_151_xml_colorArray,"flixel.addons.ui.U","xml_colorArray",0x092a2908,"flixel.addons.ui.U.xml_colorArray","flixel/addons/ui/U.hx",151,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_171_perc_to_float,"flixel.addons.ui.U","perc_to_float",0xc1657e67,"flixel.addons.ui.U.perc_to_float","flixel/addons/ui/U.hx",171,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_191_isStrNum,"flixel.addons.ui.U","isStrNum",0x399f4549,"flixel.addons.ui.U.isStrNum","flixel/addons/ui/U.hx",191,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_242_xml_f,"flixel.addons.ui.U","xml_f",0xcb3d1ed4,"flixel.addons.ui.U.xml_f","flixel/addons/ui/U.hx",242,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_258_xml_i,"flixel.addons.ui.U","xml_i",0xcb3d1ed7,"flixel.addons.ui.U.xml_i","flixel/addons/ui/U.hx",258,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_274_xml_pt,"flixel.addons.ui.U","xml_pt",0x0a3de3d6,"flixel.addons.ui.U.xml_pt","flixel/addons/ui/U.hx",274,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_283_boolify,"flixel.addons.ui.U","boolify",0xe88e23a8,"flixel.addons.ui.U.boolify","flixel/addons/ui/U.hx",283,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_300_pointify,"flixel.addons.ui.U","pointify",0x7c83db56,"flixel.addons.ui.U.pointify","flixel/addons/ui/U.hx",300,0x74647d9b)
static const ::String _hx_array_data_ef400604_15[] = {
	HX_("(",28,00,00,00),HX_(")",29,00,00,00),HX_(" ",20,00,00,00),HX_("=",3d,00,00,00),HX_(":",3a,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_337_compareStringVars,"flixel.addons.ui.U","compareStringVars",0x90ebbd38,"flixel.addons.ui.U.compareStringVars","flixel/addons/ui/U.hx",337,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_426_xml_bool,"flixel.addons.ui.U","xml_bool",0x771a9e7c,"flixel.addons.ui.U.xml_bool","flixel/addons/ui/U.hx",426,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_554_conformToBounds,"flixel.addons.ui.U","conformToBounds",0xe785bc8c,"flixel.addons.ui.U.conformToBounds","flixel/addons/ui/U.hx",554,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_649_applyResize,"flixel.addons.ui.U","applyResize",0x7e0ec898,"flixel.addons.ui.U.applyResize","flixel/addons/ui/U.hx",649,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_910_xml,"flixel.addons.ui.U","xml",0x6318966d,"flixel.addons.ui.U.xml","flixel/addons/ui/U.hx",910,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_950_clearArraySoft,"flixel.addons.ui.U","clearArraySoft",0x8f7d5f00,"flixel.addons.ui.U.clearArraySoft","flixel/addons/ui/U.hx",950,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_968_clearArray,"flixel.addons.ui.U","clearArray",0x7ee062f6,"flixel.addons.ui.U.clearArray","flixel/addons/ui/U.hx",968,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_983_destroyThing,"flixel.addons.ui.U","destroyThing",0x2d89953e,"flixel.addons.ui.U.destroyThing","flixel/addons/ui/U.hx",983,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1025_font,"flixel.addons.ui.U","font",0x4686b879,"flixel.addons.ui.U.font","flixel/addons/ui/U.hx",1025,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1091_FU,"flixel.addons.ui.U","FU",0x12cfb979,"flixel.addons.ui.U.FU","flixel/addons/ui/U.hx",1091,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1105_getBmp,"flixel.addons.ui.U","getBmp",0xa82bce79,"flixel.addons.ui.U.getBmp","flixel/addons/ui/U.hx",1105,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1133_checkHaxedef,"flixel.addons.ui.U","checkHaxedef",0x22016e21,"flixel.addons.ui.U.checkHaxedef","flixel/addons/ui/U.hx",1133,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1277_copy_shallow_arr_i,"flixel.addons.ui.U","copy_shallow_arr_i",0x68ce9cc0,"flixel.addons.ui.U.copy_shallow_arr_i","flixel/addons/ui/U.hx",1277,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1305_FU_,"flixel.addons.ui.U","FU_",0x62f290c6,"flixel.addons.ui.U.FU_","flixel/addons/ui/U.hx",1305,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1363_scaleTileBmp,"flixel.addons.ui.U","scaleTileBmp",0x08b80cf7,"flixel.addons.ui.U.scaleTileBmp","flixel/addons/ui/U.hx",1363,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1434_scaleAndStoreTileset,"flixel.addons.ui.U","scaleAndStoreTileset",0x3f80e40a,"flixel.addons.ui.U.scaleAndStoreTileset","flixel/addons/ui/U.hx",1434,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1454_loadScaledImage,"flixel.addons.ui.U","loadScaledImage",0x44902b71,"flixel.addons.ui.U.loadScaledImage","flixel/addons/ui/U.hx",1454,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1599_gfx,"flixel.addons.ui.U","gfx",0x630baa0f,"flixel.addons.ui.U.gfx","flixel/addons/ui/U.hx",1599,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_1738_get_gfx,"flixel.addons.ui.U","get_gfx",0x914f75a6,"flixel.addons.ui.U.get_gfx","flixel/addons/ui/U.hx",1738,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_2233_unparentXML,"flixel.addons.ui.U","unparentXML",0x3e984fea,"flixel.addons.ui.U.unparentXML","flixel/addons/ui/U.hx",2233,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_2279_getMatrix,"flixel.addons.ui.U","getMatrix",0x7ebd7c8d,"flixel.addons.ui.U.getMatrix","flixel/addons/ui/U.hx",2279,0x74647d9b)
HX_LOCAL_STACK_FRAME(_hx_pos_9939526bb4013f05_2287_boot,"flixel.addons.ui.U","boot",0x43e1dedc,"flixel.addons.ui.U.boot","flixel/addons/ui/U.hx",2287,0x74647d9b)
namespace flixel{
namespace addons{
namespace ui{

void U_obj::__construct() { }

Dynamic U_obj::__CreateEmpty() { return new U_obj; }

void *U_obj::_hx_vtable = 0;

Dynamic U_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< U_obj > _hx_result = new U_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool U_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2b4a2212;
}

::String U_obj::xml_str( ::Xml data,::String att,::hx::Null< bool >  __o_lower_case,::String __o_default_str){
            		bool lower_case = __o_lower_case.Default(false);
            		::String default_str = __o_default_str;
            		if (::hx::IsNull(__o_default_str)) default_str = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_54_xml_str)
HXLINE(  55)		if (::hx::IsNotNull( data->get(att) )) {
HXLINE(  57)			if (lower_case) {
HXLINE(  59)				return data->get(att).toLowerCase();
            			}
            			else {
HXLINE(  63)				return data->get(att);
            			}
            		}
HXLINE(  66)		return default_str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,xml_str,return )

::String U_obj::xml_name( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_75_xml_name)
HXLINE(  76)		::String name = ::flixel::addons::ui::U_obj::xml_str(data,HX_("name",4b,72,ff,48),true,HX_("",00,00,00,00));
HXLINE(  77)		if ((name == HX_("",00,00,00,00))) {
HXLINE(  79)			name = ::flixel::addons::ui::U_obj::xml_str(data,HX_("id",db,5b,00,00),true,HX_("",00,00,00,00));
            		}
HXLINE(  81)		return name;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,xml_name,return )

 ::Dynamic U_obj::xml_color( ::Xml data,::String att,::hx::Null< bool >  __o_cast32Bit, ::Dynamic defaultColor){
            		bool cast32Bit = __o_cast32Bit.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_91_xml_color)
HXLINE(  92)		 ::Dynamic col = null();
HXLINE(  93)		::String str = ::flixel::addons::ui::U_obj::xml_str(data,att,true,null());
HXLINE(  94)		if ((str != HX_("",00,00,00,00))) {
HXLINE(  96)			 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(str);
HXDLIN(  96)			if (::hx::IsNull( return_val )) {
HXLINE(  96)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + str)));
            			}
HXDLIN(  96)			col = return_val;
            		}
HXLINE(  98)		bool _hx_tmp;
HXDLIN(  98)		if (::hx::IsNull( col )) {
HXLINE(  98)			_hx_tmp = ::hx::IsNotNull( defaultColor );
            		}
            		else {
HXLINE(  98)			_hx_tmp = false;
            		}
HXDLIN(  98)		if (_hx_tmp) {
HXLINE( 100)			col = defaultColor;
            		}
HXLINE( 102)		return col;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,xml_color,return )

::Array< ::String > U_obj::xml_strArray( ::Xml data,::String att,::hx::Null< bool >  __o_lowerCase,::Array< ::String > default_){
            		bool lowerCase = __o_lowerCase.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_136_xml_strArray)
HXLINE( 137)		::String str = ::flixel::addons::ui::U_obj::xml_str(data,att,lowerCase,null());
HXLINE( 138)		if ((str != HX_("",00,00,00,00))) {
HXLINE( 140)			::Array< ::String > arr = str.split(HX_(",",2c,00,00,00));
HXLINE( 141)			return arr;
            		}
            		else {
HXLINE( 145)			return default_;
            		}
HXLINE( 138)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,xml_strArray,return )

::Array< int > U_obj::xml_colorArray( ::Xml data,::String att,::hx::Null< bool >  __o_cast32Bit){
            		bool cast32Bit = __o_cast32Bit.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_151_xml_colorArray)
HXLINE( 152)		::Array< ::String > arr = ::flixel::addons::ui::U_obj::xml_strArray(data,att,null(),null());
HXLINE( 153)		::Array< int > cols = null();
HXLINE( 154)		bool _hx_tmp;
HXDLIN( 154)		if (::hx::IsNotNull( arr )) {
HXLINE( 154)			_hx_tmp = (arr->length > 0);
            		}
            		else {
HXLINE( 154)			_hx_tmp = false;
            		}
HXDLIN( 154)		if (_hx_tmp) {
HXLINE( 156)			cols = ::Array_obj< int >::__new(0);
HXLINE( 157)			{
HXLINE( 157)				int _g = 0;
HXDLIN( 157)				int _g1 = arr->length;
HXDLIN( 157)				while((_g < _g1)){
HXLINE( 157)					_g = (_g + 1);
HXDLIN( 157)					int i = (_g - 1);
HXLINE( 159)					::String str = arr->__get(i);
HXDLIN( 159)					 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(str);
HXDLIN( 159)					if (::hx::IsNull( return_val )) {
HXLINE( 159)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + str)));
            					}
HXDLIN( 159)					cols[i] = ( (int)(return_val) );
            				}
            			}
            		}
HXLINE( 162)		return cols;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_colorArray,return )

Float U_obj::perc_to_float(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_171_perc_to_float)
HXLINE( 172)		int _hx_tmp = str.lastIndexOf(HX_("%",25,00,00,00),null());
HXDLIN( 172)		if ((_hx_tmp == (str.length - 1))) {
HXLINE( 174)			str = str.substr(0,(str.length - 1));
HXLINE( 175)			 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_("([0-9]+)?(\\.)?([0-9]*)?",69,52,2d,64),HX_("",00,00,00,00));
HXLINE( 176)			if (r->match(str)) {
HXLINE( 178)				 ::Dynamic match = r->matchedPos();
HXLINE( 179)				bool _hx_tmp;
HXDLIN( 179)				if (::hx::IsEq( match->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic),0 )) {
HXLINE( 179)					_hx_tmp = ::hx::IsEq( match->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic),str.length );
            				}
            				else {
HXLINE( 179)					_hx_tmp = false;
            				}
HXDLIN( 179)				if (_hx_tmp) {
HXLINE( 181)					Float perc_float = ::Std_obj::parseFloat(str);
HXLINE( 182)					perc_float = (perc_float / ( (Float)(100) ));
HXLINE( 183)					return perc_float;
            				}
            			}
            		}
HXLINE( 187)		return ::Math_obj::NaN;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,perc_to_float,return )

bool U_obj::isStrNum(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_191_isStrNum)
HXLINE( 192)		bool _hx_tmp;
HXDLIN( 192)		if (::hx::IsNotNull( str )) {
HXLINE( 192)			_hx_tmp = (str == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 192)			_hx_tmp = true;
            		}
HXDLIN( 192)		if (_hx_tmp) {
HXLINE( 193)			return false;
            		}
HXLINE( 194)		 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_("-?([0-9]+)?(\\.)?([0-9]*)?",37,d9,6d,5d),HX_("",00,00,00,00));
HXLINE( 195)		if (r->match(str)) {
HXLINE( 197)			 ::Dynamic p = r->matchedPos();
HXLINE( 198)			bool _hx_tmp;
HXDLIN( 198)			if (::hx::IsEq( p->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic),0 )) {
HXLINE( 198)				_hx_tmp = ::hx::IsEq( p->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic),str.length );
            			}
            			else {
HXLINE( 198)				_hx_tmp = false;
            			}
HXDLIN( 198)			if (_hx_tmp) {
HXLINE( 200)				return true;
            			}
            		}
HXLINE( 203)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,isStrNum,return )

Float U_obj::xml_f( ::Xml data,::String att,::hx::Null< Float >  __o_default_){
            		Float default_ = __o_default_.Default(0);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_242_xml_f)
HXLINE( 243)		if (::hx::IsNotNull( data->get(att) )) {
HXLINE( 245)			return ::Std_obj::parseFloat(data->get(att));
            		}
HXLINE( 247)		return default_;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_f,return )

int U_obj::xml_i( ::Xml data,::String att,::hx::Null< int >  __o_default_){
            		int default_ = __o_default_.Default(0);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_258_xml_i)
HXLINE( 259)		if (::hx::IsNotNull( data->get(att) )) {
HXLINE( 261)			return ( (int)(::Std_obj::parseInt(data->get(att))) );
            		}
HXLINE( 263)		return default_;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_i,return )

 ::flixel::math::FlxPoint U_obj::xml_pt( ::Xml data,::String att, ::flixel::math::FlxPoint default_){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_274_xml_pt)
HXLINE( 275)		if (::hx::IsNotNull( data->get(att) )) {
HXLINE( 277)			return ::flixel::addons::ui::U_obj::pointify(data->get(att));
            		}
HXLINE( 279)		return default_;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_pt,return )

bool U_obj::boolify(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_283_boolify)
HXLINE( 284)		str = str.toLowerCase();
HXLINE( 285)		bool _hx_tmp;
HXDLIN( 285)		if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE( 285)			_hx_tmp = (str == HX_("1",31,00,00,00));
            		}
            		else {
HXLINE( 285)			_hx_tmp = true;
            		}
HXDLIN( 285)		if (_hx_tmp) {
HXLINE( 287)			return true;
            		}
HXLINE( 289)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,boolify,return )

 ::flixel::math::FlxPoint U_obj::pointify(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_300_pointify)
HXLINE( 301)		 ::flixel::math::FlxPoint pt = null();
HXLINE( 302)		if (::hx::IsNotNull( str )) {
HXLINE( 304)			::Array< ::String > arr = ::Array_obj< ::String >::fromData( _hx_array_data_ef400604_15,5);
HXLINE( 305)			{
HXLINE( 305)				int _g = 0;
HXDLIN( 305)				while((_g < arr->length)){
HXLINE( 305)					::String thing = arr->__get(_g);
HXDLIN( 305)					_g = (_g + 1);
HXLINE( 307)					while((str.indexOf(thing,null()) != -1)){
HXLINE( 309)						str = ::StringTools_obj::replace(str,thing,HX_("",00,00,00,00));
            					}
            				}
            			}
HXLINE( 312)			if ((str.indexOf(HX_(",",2c,00,00,00),null()) == -1)) {
HXLINE( 314)				if ((str.indexOf(HX_("x",78,00,00,00),null()) != -1)) {
HXLINE( 316)					str = ::StringTools_obj::replace(str,HX_("x",78,00,00,00),HX_(",",2c,00,00,00));
            				}
            			}
HXLINE( 319)			arr = str.split(HX_(",",2c,00,00,00));
HXLINE( 320)			if ((arr->length == 2)) {
HXLINE( 322)				Float pt1 = ::Std_obj::parseFloat(arr->__get(0));
HXDLIN( 322)				pt =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,pt1,::Std_obj::parseFloat(arr->__get(1)));
            			}
            		}
HXLINE( 325)		return pt;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,pointify,return )

bool U_obj::compareStringVars(::String variable,::String otherValue,::String type,::String __o_op){
            		::String op = __o_op;
            		if (::hx::IsNull(__o_op)) op = HX_("==",60,35,00,00);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_337_compareStringVars)
HXLINE( 338)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ){
HXLINE( 404)			bool ba = ::flixel::addons::ui::U_obj::boolify(variable);
HXLINE( 405)			bool bb = ::flixel::addons::ui::U_obj::boolify(otherValue);
HXLINE( 406)			bool _hx_tmp;
HXDLIN( 406)			if ((op != HX_("==",60,35,00,00))) {
HXLINE( 406)				_hx_tmp = (op == HX_("=",3d,00,00,00));
            			}
            			else {
HXLINE( 406)				_hx_tmp = true;
            			}
HXDLIN( 406)			if (_hx_tmp) {
HXLINE( 408)				return (ba == bb);
            			}
            			else {
HXLINE( 410)				bool _hx_tmp;
HXDLIN( 410)				if ((op != HX_("!==",c1,3f,19,00))) {
HXLINE( 410)					_hx_tmp = (op == HX_("!=",fc,1c,00,00));
            				}
            				else {
HXLINE( 410)					_hx_tmp = true;
            				}
HXDLIN( 410)				if (_hx_tmp) {
HXLINE( 412)					return (ba != bb);
            				}
            			}
HXLINE( 403)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE( 377)			Float fa = ::Std_obj::parseFloat(variable);
HXLINE( 378)			Float fb = ::Std_obj::parseFloat(otherValue);
HXLINE( 379)			bool _hx_tmp;
HXDLIN( 379)			if ((op != HX_("==",60,35,00,00))) {
HXLINE( 379)				_hx_tmp = (op == HX_("=",3d,00,00,00));
            			}
            			else {
HXLINE( 379)				_hx_tmp = true;
            			}
HXDLIN( 379)			if (_hx_tmp) {
HXLINE( 381)				return (fa == fb);
            			}
            			else {
HXLINE( 383)				bool _hx_tmp;
HXDLIN( 383)				if ((op != HX_("!==",c1,3f,19,00))) {
HXLINE( 383)					_hx_tmp = (op == HX_("!=",fc,1c,00,00));
            				}
            				else {
HXLINE( 383)					_hx_tmp = true;
            				}
HXDLIN( 383)				if (_hx_tmp) {
HXLINE( 385)					return (fa != fb);
            				}
            				else {
HXLINE( 387)					if ((op == HX_("<",3c,00,00,00))) {
HXLINE( 389)						return (fa < fb);
            					}
            					else {
HXLINE( 391)						if ((op == HX_(">",3e,00,00,00))) {
HXLINE( 393)							return (fa > fb);
            						}
            						else {
HXLINE( 395)							if ((op == HX_("<=",81,34,00,00))) {
HXLINE( 397)								return (fa <= fb);
            							}
            							else {
HXLINE( 399)								if ((op == HX_(">=",3f,36,00,00))) {
HXLINE( 401)									return (fa >= fb);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 376)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE( 350)			int ia = ( (int)(::Std_obj::parseInt(variable)) );
HXLINE( 351)			int ib = ( (int)(::Std_obj::parseInt(otherValue)) );
HXLINE( 352)			bool _hx_tmp;
HXDLIN( 352)			if ((op != HX_("==",60,35,00,00))) {
HXLINE( 352)				_hx_tmp = (op == HX_("=",3d,00,00,00));
            			}
            			else {
HXLINE( 352)				_hx_tmp = true;
            			}
HXDLIN( 352)			if (_hx_tmp) {
HXLINE( 354)				return (ia == ib);
            			}
            			else {
HXLINE( 356)				bool _hx_tmp;
HXDLIN( 356)				if ((op != HX_("!==",c1,3f,19,00))) {
HXLINE( 356)					_hx_tmp = (op == HX_("!=",fc,1c,00,00));
            				}
            				else {
HXLINE( 356)					_hx_tmp = true;
            				}
HXDLIN( 356)				if (_hx_tmp) {
HXLINE( 358)					return (ia != ib);
            				}
            				else {
HXLINE( 360)					if ((op == HX_("<",3c,00,00,00))) {
HXLINE( 362)						return (ia < ib);
            					}
            					else {
HXLINE( 364)						if ((op == HX_(">",3e,00,00,00))) {
HXLINE( 366)							return (ia > ib);
            						}
            						else {
HXLINE( 368)							if ((op == HX_("<=",81,34,00,00))) {
HXLINE( 370)								return (ia <= ib);
            							}
            							else {
HXLINE( 372)								if ((op == HX_(">=",3f,36,00,00))) {
HXLINE( 374)									return (ia >= ib);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 349)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE( 341)			bool _hx_tmp;
HXDLIN( 341)			if ((op != HX_("==",60,35,00,00))) {
HXLINE( 341)				_hx_tmp = (op == HX_("=",3d,00,00,00));
            			}
            			else {
HXLINE( 341)				_hx_tmp = true;
            			}
HXDLIN( 341)			if (_hx_tmp) {
HXLINE( 343)				return (variable == otherValue);
            			}
HXLINE( 345)			bool _hx_tmp1;
HXDLIN( 345)			if ((op != HX_("!==",c1,3f,19,00))) {
HXLINE( 345)				_hx_tmp1 = (op == HX_("!=",fc,1c,00,00));
            			}
            			else {
HXLINE( 345)				_hx_tmp1 = true;
            			}
HXDLIN( 345)			if (_hx_tmp1) {
HXLINE( 347)				return (variable != otherValue);
            			}
HXLINE( 340)			goto _hx_goto_16;
            		}
            		_hx_goto_16:;
HXLINE( 415)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,compareStringVars,return )

bool U_obj::xml_bool( ::Xml data,::String att,::hx::Null< bool >  __o_default_){
            		bool default_ = __o_default_.Default(false);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_426_xml_bool)
HXLINE( 427)		if (::hx::IsNotNull( data->get(att) )) {
HXLINE( 429)			::String str = data->get(att);
HXLINE( 430)			str = str.toLowerCase();
HXLINE( 431)			bool _hx_tmp;
HXDLIN( 431)			if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE( 431)				_hx_tmp = (str == HX_("1",31,00,00,00));
            			}
            			else {
HXLINE( 431)				_hx_tmp = true;
            			}
HXDLIN( 431)			if (_hx_tmp) {
HXLINE( 433)				return true;
            			}
HXLINE( 435)			return false;
            		}
HXLINE( 437)		return default_;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,xml_bool,return )

 ::openfl::geom::Point U_obj::conformToBounds( ::openfl::geom::Point pt, ::Dynamic maxMin){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_554_conformToBounds)
HXLINE( 555)		if (::hx::IsNotNull( maxMin )) {
HXLINE( 557)			if (::hx::IsLess( pt->x,maxMin->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE( 558)				pt->x = ( (Float)(maxMin->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) );
            			}
HXLINE( 559)			if (::hx::IsLess( pt->y,maxMin->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE( 560)				pt->y = ( (Float)(maxMin->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic)) );
            			}
HXLINE( 561)			if (::hx::IsGreater( pt->x,maxMin->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE( 562)				pt->x = ( (Float)(maxMin->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) );
            			}
HXLINE( 563)			if (::hx::IsGreater( pt->x,maxMin->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE( 564)				pt->y = ( (Float)(maxMin->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) );
            			}
            		}
HXLINE( 566)		return pt;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(U_obj,conformToBounds,return )

 ::flixel::math::FlxPoint U_obj::applyResize(Float resize_ratio,int resize_ratio_axis,Float w,Float h, ::flixel::math::FlxPoint pt){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_649_applyResize)
HXLINE( 650)		if (::hx::IsNull( pt )) {
HXLINE( 652)			pt =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 654)		if ((resize_ratio > 0)) {
HXLINE( 656)			Float effective_ratio = (w / h);
HXLINE( 657)			if ((::Math_obj::abs((effective_ratio - resize_ratio)) > ((Float)0.0001))) {
HXLINE( 659)				if ((resize_ratio_axis == 1)) {
HXLINE( 661)					h = (w * (( (Float)(1) ) / resize_ratio));
            				}
            				else {
HXLINE( 665)					w = (h * (( (Float)(1) ) / resize_ratio));
            				}
            			}
            		}
HXLINE( 669)		int iw = ::Std_obj::_hx_int(w);
HXLINE( 670)		if ((iw < 1)) {
HXLINE( 672)			w = ( (Float)(1) );
            		}
HXLINE( 674)		int ih = ::Std_obj::_hx_int(h);
HXLINE( 675)		if ((ih < 1)) {
HXLINE( 677)			h = ( (Float)(1) );
            		}
HXLINE( 679)		pt->set(w,h);
HXLINE( 680)		return pt;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(U_obj,applyResize,return )

 ::Dynamic U_obj::xml(::String id,::String __o_extension,::hx::Null< bool >  __o_getAccess,::String __o_dir){
            		::String extension = __o_extension;
            		if (::hx::IsNull(__o_extension)) extension = HX_("xml",d7,6d,5b,00);
            		bool getAccess = __o_getAccess.Default(true);
            		::String dir = __o_dir;
            		if (::hx::IsNull(__o_dir)) dir = HX_("assets/xml/",c4,ee,51,bb);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_910_xml)
HXLINE( 911)		bool _hx_tmp;
HXDLIN( 911)		if ((id.indexOf(HX_("raw:",52,55,a4,4b),null()) != 0)) {
HXLINE( 911)			_hx_tmp = (id.indexOf(HX_("RAW:",72,1d,65,36),null()) == 0);
            		}
            		else {
HXLINE( 911)			_hx_tmp = true;
            		}
HXDLIN( 911)		if (_hx_tmp) {
HXLINE( 913)			id = id.substr(4,(id.length - 4));
HXLINE( 914)			dir = HX_("",00,00,00,00);
            		}
HXLINE( 917)		::String thePath = (((dir + id) + HX_(".",2e,00,00,00)) + extension);
HXLINE( 919)		bool exists = ::openfl::utils::Assets_obj::exists(thePath,HX_("TEXT",ad,94,ba,37));
HXLINE( 921)		if (!(exists)) {
HXLINE( 923)			return null();
            		}
HXLINE( 926)		::String str = ::openfl::utils::Assets_obj::getText((((dir + id) + HX_(".",2e,00,00,00)) + extension));
HXLINE( 927)		if (::hx::IsNull( str )) {
HXLINE( 929)			return null();
            		}
HXLINE( 931)		 ::Xml the_xml = ::Xml_obj::parse(str);
HXLINE( 932)		if (getAccess) {
HXLINE( 934)			 ::Xml x = the_xml->firstElement();
HXDLIN( 934)			bool _hx_tmp;
HXDLIN( 934)			if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE( 934)				_hx_tmp = (x->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 934)				_hx_tmp = false;
            			}
HXDLIN( 934)			if (_hx_tmp) {
HXLINE( 934)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType))));
            			}
HXDLIN( 934)			 ::Xml this1 = x;
HXDLIN( 934)			 ::Xml fast = this1;
HXLINE( 935)			return fast;
            		}
            		else {
HXLINE( 939)			return the_xml->firstElement();
            		}
HXLINE( 932)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,xml,return )

void U_obj::clearArraySoft(::cpp::VirtualArray array){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_950_clearArraySoft)
HXLINE( 951)		if (::hx::IsNull( array )) {
HXLINE( 952)			return;
            		}
HXLINE( 953)		int i = (array->get_length() - 1);
HXLINE( 954)		while((i >= 0)){
HXLINE( 956)			array->set(i,null());
HXLINE( 957)			array->splice(i,1);
HXLINE( 958)			i = (i - 1);
            		}
HXLINE( 960)		array = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,clearArraySoft,(void))

void U_obj::clearArray(::cpp::VirtualArray array){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_968_clearArray)
HXLINE( 969)		if (::hx::IsNull( array )) {
HXLINE( 970)			return;
            		}
HXLINE( 971)		int i = (array->get_length() - 1);
HXLINE( 972)		while((i >= 0)){
HXLINE( 974)			::flixel::addons::ui::U_obj::destroyThing(array->__get(i));
HXLINE( 975)			array->set(i,null());
HXLINE( 976)			array->splice(i,1);
HXLINE( 977)			i = (i - 1);
            		}
HXLINE( 979)		array = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,clearArray,(void))

void U_obj::destroyThing( ::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_983_destroyThing)
HXLINE( 984)		if (::hx::IsNull( thing )) {
HXLINE( 985)			return;
            		}
HXLINE( 987)		if (::Std_obj::isOfType(thing,::hx::ArrayBase::__mClass)) {
HXLINE( 989)			::flixel::addons::ui::U_obj::clearArray(( (::cpp::VirtualArray)(thing) ));
            		}
            		else {
HXLINE( 991)			if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::util::IFlxDestroyable >())) {
HXLINE( 993)				::Dynamic idstr =  ::hx::interface_check(thing,0xd4fe2fcd);
HXLINE( 994)				::flixel::util::IFlxDestroyable_obj::destroy(idstr);
HXLINE( 995)				idstr = null();
            			}
            			else {
HXLINE( 997)				if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::FlxBasic >())) {
HXLINE( 999)					 ::flixel::FlxBasic fb = ::hx::TCast<  ::flixel::FlxBasic >::cast(thing);
HXLINE(1000)					fb->destroy();
HXLINE(1001)					fb = null();
            				}
            			}
            		}
HXLINE(1003)		thing = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,destroyThing,(void))

::String U_obj::font(::String str,::String __o_style,::String __o_extension){
            		::String style = __o_style;
            		if (::hx::IsNull(__o_style)) style = HX_("",00,00,00,00);
            		::String extension = __o_extension;
            		if (::hx::IsNull(__o_extension)) extension = HX_(".ttf",78,3b,c0,1e);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1025_font)
HXLINE(1026)		::String ostr = str;
HXLINE(1027)		::String style1 = style;
HXDLIN(1027)		if (::hx::IsNull( style1 )) {
HXLINE(1027)			style1 = HX_("",00,00,00,00);
            		}
HXDLIN(1027)		style1 = style1.toLowerCase();
HXDLIN(1027)		::String suffix = HX_("",00,00,00,00);
HXDLIN(1027)		::String _hx_switch_0 = style1;
            		if (  (_hx_switch_0==HX_("b",62,00,00,00)) ||  (_hx_switch_0==HX_("bold",85,81,1b,41)) ){
HXLINE(1027)			suffix = HX_("b",62,00,00,00);
HXDLIN(1027)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_0==HX_("bi",c7,55,00,00)) ||  (_hx_switch_0==HX_("bold-italic",f8,f7,a5,60)) ||  (_hx_switch_0==HX_("boldi",44,d3,f5,b6)) ||  (_hx_switch_0==HX_("bolditalic",35,22,3d,79)) ||  (_hx_switch_0==HX_("ib",d9,5b,00,00)) ||  (_hx_switch_0==HX_("ibold",6e,6a,2e,b6)) ||  (_hx_switch_0==HX_("italic-bold",42,47,7f,d9)) ||  (_hx_switch_0==HX_("italicbold",75,e8,59,e8)) ||  (_hx_switch_0==HX_("z",7a,00,00,00)) ){
HXLINE(1027)			suffix = HX_("z",7a,00,00,00);
HXDLIN(1027)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_0==HX_("i",69,00,00,00)) ||  (_hx_switch_0==HX_("italic",f0,2e,64,06)) ){
HXLINE(1027)			suffix = HX_("i",69,00,00,00);
HXDLIN(1027)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("none",b8,12,0a,49)) ||  (_hx_switch_0==HX_("normal",27,72,69,30)) ||  (_hx_switch_0==HX_("regular",5c,52,88,82)) ){
HXLINE(1027)			suffix = HX_("",00,00,00,00);
HXDLIN(1027)			goto _hx_goto_27;
            		}
            		_hx_goto_27:;
HXDLIN(1027)		if ((str.indexOf(HX_("assets/fonts/",37,ff,a5,9c),null()) != 0)) {
HXLINE(1027)			str = ((HX_("assets/fonts/",37,ff,a5,9c) + str) + suffix);
            		}
            		else {
HXLINE(1027)			str = (str + suffix);
            		}
HXLINE(1028)		if ((str.indexOf(extension,null()) == -1)) {
HXLINE(1030)			str = (str + extension);
            		}
HXLINE(1034)		str = ::flixel::addons::ui::FontFixer_obj::add(str,null());
HXLINE(1037)		bool exists = ::openfl::utils::Assets_obj::exists(str,HX_("FONT",cf,25,81,2e));
HXLINE(1038)		bool _hx_tmp;
HXDLIN(1038)		if (!(exists)) {
HXLINE(1038)			_hx_tmp = (extension == HX_(".ttf",78,3b,c0,1e));
            		}
            		else {
HXLINE(1038)			_hx_tmp = false;
            		}
HXDLIN(1038)		if (_hx_tmp) {
HXLINE(1040)			::String alt = ::flixel::addons::ui::U_obj::font(ostr,style,HX_(".otf",33,70,bc,1e));
HXLINE(1041)			if (::openfl::utils::Assets_obj::exists(alt,HX_("FONT",cf,25,81,2e))) {
HXLINE(1043)				return alt;
            			}
            		}
HXLINE(1047)		return str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(U_obj,font,return )

::String U_obj::FU(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1091_FU)
HXDLIN(1091)		::String _hx_tmp = str.substr(0,1).toUpperCase();
HXDLIN(1091)		return (_hx_tmp + str.substr(1,(str.length - 1)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,FU,return )

 ::openfl::display::BitmapData U_obj::getBmp( ::Dynamic asset){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1105_getBmp)
HXLINE(1106)		::String str = null();
HXLINE(1107)		if (::Std_obj::isOfType(asset,::hx::ClassOf< ::String >())) {
HXLINE(1109)			str = ( (::String)(asset) );
            		}
            		else {
HXLINE(1111)			if (::Std_obj::isOfType(asset,::hx::ClassOf< ::flixel::graphics::FlxGraphic >())) {
HXLINE(1113)				 ::flixel::graphics::FlxGraphic fg = ( ( ::flixel::graphics::FlxGraphic)(asset) );
HXLINE(1114)				str = fg->key;
            			}
            			else {
HXLINE(1116)				if (::Std_obj::isOfType(asset,::hx::ClassOf< ::openfl::display::BitmapData >())) {
HXLINE(1118)					 ::openfl::display::BitmapData bmp = ( ( ::openfl::display::BitmapData)(asset) );
HXLINE(1119)					return bmp;
            				}
            			}
            		}
HXLINE(1121)		if (::hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(str)) ) )) {
HXLINE(1123)			 ::flixel::graphics::FlxGraphic cg = ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(str)) );
HXLINE(1124)			if (::hx::IsNotNull( cg->bitmap )) {
HXLINE(1126)				return cg->bitmap;
            			}
            		}
HXLINE(1129)		return ::openfl::utils::Assets_obj::getBitmapData(str,false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,getBmp,return )

bool U_obj::checkHaxedef(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1133_checkHaxedef)
HXLINE(1134)		str = str.toLowerCase();
HXLINE(1135)		::String _hx_switch_0 = str;
            		if (  (_hx_switch_0==HX_("android",2f,9b,a4,9c)) ){
HXLINE(1165)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("console-pc",69,0c,13,e9)) ||  (_hx_switch_0==HX_("console_pc",1b,fd,38,e9)) ){
HXLINE(1211)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("cpp",23,81,4b,00)) ){
HXLINE(1139)			return true;
HXDLIN(1139)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("demo",23,59,66,42)) ){
HXLINE(1197)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("desktop",dc,c5,94,1e)) ){
HXLINE(1159)			return true;
HXDLIN(1159)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("flash",b0,35,8c,02)) ){
HXLINE(1177)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("html5",6a,28,ac,2e)) ){
HXLINE(1181)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("ios",cd,0d,50,00)) ){
HXLINE(1169)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("js",c9,5c,00,00)) ){
HXLINE(1185)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("legacy",49,7a,62,9a)) ||  (_hx_switch_0==HX_("lime_legacy",73,b1,ea,a6)) ){
HXLINE(1207)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("lime_next",9d,bd,4b,86)) ||  (_hx_switch_0==HX_("next",f3,84,02,49)) ){
HXLINE(1202)			bool val = true;
HXLINE(1206)			return val;
HXLINE(1201)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("linux",f4,eb,01,75)) ){
HXLINE(1153)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("mac",8f,0a,53,00)) ){
HXLINE(1149)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("mobile",62,ac,77,bf)) ){
HXLINE(1161)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("neko",9b,79,02,49)) ){
HXLINE(1141)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("ps3",d0,60,55,00)) ){
HXLINE(1219)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("ps4",d1,60,55,00)) ){
HXLINE(1215)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("sys",0d,ad,57,00)) ){
HXLINE(1195)			return true;
HXDLIN(1195)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("tvos",26,ab,06,4d)) ){
HXLINE(1173)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("vita",60,3f,4f,4e)) ){
HXLINE(1223)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("web",94,a4,5a,00)) ){
HXLINE(1189)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("wiiu",7e,6c,f8,4e)) ){
HXLINE(1227)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("windows",83,de,74,e8)) ){
HXLINE(1147)			return true;
HXDLIN(1147)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("xbox1",3e,28,31,59)) ){
HXLINE(1231)			goto _hx_goto_31;
            		}
            		_hx_goto_31:;
HXLINE(1236)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,checkHaxedef,return )

::Array< int > U_obj::copy_shallow_arr_i(::Array< int > src){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1277_copy_shallow_arr_i)
HXLINE(1278)		if (::hx::IsNull( src )) {
HXLINE(1280)			return null();
            		}
HXLINE(1282)		::Array< int > arr = ::Array_obj< int >::__new();
HXLINE(1283)		{
HXLINE(1283)			int _g = 0;
HXDLIN(1283)			while((_g < src->length)){
HXLINE(1283)				int thing = src->__get(_g);
HXDLIN(1283)				_g = (_g + 1);
HXLINE(1285)				arr->push(thing);
            			}
            		}
HXLINE(1287)		return arr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,copy_shallow_arr_i,return )

::String U_obj::FU_(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1305_FU_)
HXLINE(1306)		::Array< ::String > arr = str.split(HX_(" ",20,00,00,00));
HXLINE(1307)		::String str1 = HX_("",00,00,00,00);
HXLINE(1308)		{
HXLINE(1308)			int _g = 0;
HXDLIN(1308)			int _g1 = arr->length;
HXDLIN(1308)			while((_g < _g1)){
HXLINE(1308)				_g = (_g + 1);
HXDLIN(1308)				int i = (_g - 1);
HXLINE(1310)				str1 = (str1 + ::flixel::addons::ui::U_obj::FU(arr->__get(i)));
HXLINE(1311)				if ((i != (arr->length - 1))) {
HXLINE(1313)					str1 = (str1 + HX_(" ",20,00,00,00));
            				}
            			}
            		}
HXLINE(1316)		return str1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,FU_,return )

 ::openfl::display::BitmapData U_obj::scaleTileBmp(::String orig_id,Float scale,int origW,int origH,::hx::Null< int >  __o_W,::hx::Null< int >  __o_H,::hx::Null< bool >  __o_smooth){
            		int W = __o_W.Default(-1);
            		int H = __o_H.Default(-1);
            		bool smooth = __o_smooth.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_1363_scaleTileBmp)
HXLINE(1364)		 ::openfl::display::BitmapData orig = ::openfl::utils::Assets_obj::getBitmapData(orig_id,false);
HXLINE(1365)		if (::hx::IsNull( orig )) {
HXLINE(1367)			if (::hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(orig_id)) ) )) {
HXLINE(1369)				orig = ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(orig_id)) )->bitmap;
            			}
            			else {
HXLINE(1373)				return null();
            			}
            		}
HXLINE(1377)		int widthInTiles = ::Std_obj::_hx_int((( (Float)(orig->width) ) / ( (Float)(origW) )));
HXLINE(1378)		int heightInTiles = ::Std_obj::_hx_int((( (Float)(orig->height) ) / ( (Float)(origH) )));
HXLINE(1381)		if ((W == -1)) {
HXLINE(1383)			W = ::Std_obj::_hx_int((( (Float)(origW) ) * scale));
            		}
HXLINE(1385)		if ((H == -1)) {
HXLINE(1387)			H = ::Std_obj::_hx_int((( (Float)(origH) ) * scale));
HXLINE(1388)			scale = (( (Float)(H) ) / ( (Float)(origH) ));
            		}
HXLINE(1391)		if ((::Math_obj::abs((scale - ((Float)1.0))) > ((Float)0.001))) {
HXLINE(1393)			int scaled = ::Std_obj::_hx_int(( (Float)((W * widthInTiles)) ));
HXDLIN(1393)			 ::openfl::display::BitmapData scaled1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,scaled,::Std_obj::_hx_int(( (Float)((H * heightInTiles)) )),true,0);
HXLINE(1394)			 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(1395)			 ::openfl::geom::Point pt =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1396)			 ::openfl::geom::Matrix matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(1397)			matrix->scale(scale,scale);
HXLINE(1398)			{
HXLINE(1398)				int _g = 0;
HXDLIN(1398)				int _g1 = heightInTiles;
HXDLIN(1398)				while((_g < _g1)){
HXLINE(1398)					_g = (_g + 1);
HXDLIN(1398)					int tiley = (_g - 1);
HXLINE(1400)					{
HXLINE(1400)						int _g1 = 0;
HXDLIN(1400)						int _g2 = widthInTiles;
HXDLIN(1400)						while((_g1 < _g2)){
HXLINE(1400)							_g1 = (_g1 + 1);
HXDLIN(1400)							int tilex = (_g1 - 1);
HXLINE(1402)							 ::openfl::display::BitmapData tile =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,origW,origH,true,0);
HXLINE(1403)							rect->setTo(( (Float)((tilex * origW)) ),( (Float)((tiley * origH)) ),( (Float)(origW) ),( (Float)(origH) ));
HXLINE(1404)							pt->setTo(( (Float)(0) ),( (Float)(0) ));
HXLINE(1405)							tile->copyPixels(orig,rect,pt,null(),null(),null());
HXLINE(1407)							 ::openfl::display::BitmapData scaleTile =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,W,H,true,0);
HXLINE(1408)							scaleTile->draw(tile,matrix,null(),null(),null(),smooth);
HXLINE(1409)							pt->setTo(( (Float)((tilex * W)) ),( (Float)((tiley * H)) ));
HXLINE(1410)							scaled1->copyPixels(scaleTile,scaleTile->rect,pt,null(),null(),null());
            						}
            					}
            				}
            			}
HXLINE(1413)			return scaled1;
            		}
            		else {
HXLINE(1417)			return orig->clone();
            		}
HXLINE(1391)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(U_obj,scaleTileBmp,return )

::String U_obj::scaleAndStoreTileset(::String orig_id,Float scale,int OrigW,int OrigH,::hx::Null< int >  __o_TileW,::hx::Null< int >  __o_TileH,::hx::Null< bool >  __o_Smooth){
            		int TileW = __o_TileW.Default(-1);
            		int TileH = __o_TileH.Default(-1);
            		bool Smooth = __o_Smooth.Default(true);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1434_scaleAndStoreTileset)
HXLINE(1435)		::String assetKey = ((orig_id + HX_("_x",39,53,00,00)) + scale);
HXLINE(1437)		if ((::hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(assetKey)) ) ) == false)) {
HXLINE(1439)			 ::openfl::display::BitmapData bmp = ::flixel::addons::ui::U_obj::scaleTileBmp(orig_id,scale,OrigW,OrigH,TileW,TileH,Smooth);
HXLINE(1440)			::flixel::FlxG_obj::bitmap->add(bmp,false,assetKey);
            		}
HXLINE(1443)		return assetKey;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(U_obj,scaleAndStoreTileset,return )

::String U_obj::loadScaledImage(::String src,Float W,Float H,::hx::Null< bool >  __o_smooth){
            		bool smooth = __o_smooth.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_1454_loadScaledImage)
HXLINE(1455)		::String bmpSrc = ::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null());
HXLINE(1456)		 ::openfl::display::BitmapData testBmp = ::openfl::utils::Assets_obj::getBitmapData(bmpSrc,false);
HXLINE(1458)		if (::hx::IsNotNull( testBmp )) {
HXLINE(1460)			if ((W < 0)) {
HXLINE(1462)				W = ( (Float)(testBmp->width) );
            			}
HXLINE(1464)			if ((H < 0)) {
HXLINE(1466)				H = ( (Float)(testBmp->height) );
            			}
HXLINE(1469)			Float diff = (::Math_obj::abs((W - ( (Float)(testBmp->width) ))) + ::Math_obj::abs((H - ( (Float)(testBmp->height) ))));
HXLINE(1472)			if ((diff > ((Float)0.01))) {
HXLINE(1474)				::String scaleKey = (((bmpSrc + HX_("_",5f,00,00,00)) + ::Std_obj::_hx_int(W)) + HX_("x",78,00,00,00));
HXDLIN(1474)				::String scaleKey1 = (scaleKey + ::Std_obj::_hx_int(H));
HXLINE(1477)				if (::hx::IsNull( ::flixel::FlxG_obj::bitmap->_cache->get(scaleKey1) )) {
HXLINE(1479)					int scaledBmp = ::Std_obj::_hx_int(W);
HXDLIN(1479)					 ::openfl::display::BitmapData scaledBmp1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,scaledBmp,::Std_obj::_hx_int(H),true,0);
HXLINE(1481)					 ::openfl::geom::Matrix m = ::flixel::addons::ui::U_obj::getMatrix();
HXLINE(1482)					m->identity();
HXLINE(1483)					m->scale((W / ( (Float)(testBmp->width) )),(H / ( (Float)(testBmp->height) )));
HXLINE(1485)					scaledBmp1->draw(testBmp,m,null(),null(),null(),smooth);
HXLINE(1487)					::flixel::FlxG_obj::bitmap->add(scaledBmp1,true,scaleKey1);
            				}
HXLINE(1489)				return scaleKey1;
            			}
            			else {
HXLINE(1493)				return bmpSrc;
            			}
            		}
HXLINE(1496)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(U_obj,loadScaledImage,return )

::String U_obj::gfx(::String id,::String __o_dir1,::String __o_dir2,::String __o_dir3,::String __o_dir4,::hx::Null< bool >  __o_suppressError){
            		::String dir1 = __o_dir1;
            		if (::hx::IsNull(__o_dir1)) dir1 = HX_("",00,00,00,00);
            		::String dir2 = __o_dir2;
            		if (::hx::IsNull(__o_dir2)) dir2 = HX_("",00,00,00,00);
            		::String dir3 = __o_dir3;
            		if (::hx::IsNull(__o_dir3)) dir3 = HX_("",00,00,00,00);
            		::String dir4 = __o_dir4;
            		if (::hx::IsNull(__o_dir4)) dir4 = HX_("",00,00,00,00);
            		bool suppressError = __o_suppressError.Default(false);
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1599_gfx)
HXLINE(1600)		if (::hx::IsNotNull( id )) {
HXLINE(1602)			id = id.toLowerCase();
            		}
HXLINE(1605)		::String prefix = HX_("",00,00,00,00);
HXLINE(1607)		if ((dir1 != HX_("",00,00,00,00))) {
HXLINE(1609)			prefix = (dir1 + HX_("/",2f,00,00,00));
HXLINE(1610)			if ((dir2 != HX_("",00,00,00,00))) {
HXLINE(1612)				prefix = (prefix + (dir2 + HX_("/",2f,00,00,00)));
HXLINE(1613)				if ((dir3 != HX_("",00,00,00,00))) {
HXLINE(1615)					prefix = (prefix + (dir3 + HX_("/",2f,00,00,00)));
HXLINE(1616)					if ((dir4 != HX_("",00,00,00,00))) {
HXLINE(1618)						prefix = (prefix + (dir4 + HX_("/",2f,00,00,00)));
            					}
            				}
            			}
            		}
HXLINE(1624)		if ((prefix != HX_("",00,00,00,00))) {
HXLINE(1626)			id = (prefix + id);
            		}
HXLINE(1629)		if ((id.indexOf(HX_("raw:",52,55,a4,4b),null()) != 0)) {
HXLINE(1631)			id = ::StringTools_obj::replace(id,HX_("-",2d,00,00,00),HX_("_",5f,00,00,00));
            		}
HXLINE(1634)		return ::flixel::addons::ui::U_obj::get_gfx(id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(U_obj,gfx,return )

::String U_obj::get_gfx(::String str){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_1738_get_gfx)
HXLINE(1739)		::String return_str = HX_("",00,00,00,00);
HXLINE(1741)		::String suffix = HX_("",00,00,00,00);
HXLINE(1744)		if ((str.indexOf(HX_(".jpg",73,a1,b8,1e),null()) != -1)) {
HXLINE(1746)			suffix = HX_(".jpg",73,a1,b8,1e);
            		}
            		else {
HXLINE(1750)			suffix = HX_(".png",3b,2d,bd,1e);
            		}
HXLINE(1753)		bool _hx_tmp;
HXDLIN(1753)		bool _hx_tmp1;
HXDLIN(1753)		if (::hx::IsNotNull( str )) {
HXLINE(1753)			_hx_tmp1 = (str.length > 4);
            		}
            		else {
HXLINE(1753)			_hx_tmp1 = false;
            		}
HXDLIN(1753)		if (_hx_tmp1) {
HXLINE(1753)			_hx_tmp = (str.indexOf(suffix,null()) != -1);
            		}
            		else {
HXLINE(1753)			_hx_tmp = false;
            		}
HXDLIN(1753)		if (_hx_tmp) {
HXLINE(1755)			str = str.substr(0,(str.length - 4));
            		}
HXLINE(1757)		bool _hx_tmp2;
HXDLIN(1757)		if ((str.indexOf(HX_("raw:",52,55,a4,4b),null()) != 0)) {
HXLINE(1757)			_hx_tmp2 = (str.indexOf(HX_("RAW:",72,1d,65,36),null()) == 0);
            		}
            		else {
HXLINE(1757)			_hx_tmp2 = true;
            		}
HXDLIN(1757)		if (_hx_tmp2) {
HXLINE(1759)			str = str.substr(4,(str.length - 4));
HXLINE(1760)			return_str = (str + suffix);
            		}
HXLINE(1762)		bool _hx_tmp3;
HXDLIN(1762)		if (::hx::IsNotNull( str )) {
HXLINE(1762)			_hx_tmp3 = (str.indexOf(HX_("assets/gfx/",e2,08,10,b0),null()) == 0);
            		}
            		else {
HXLINE(1762)			_hx_tmp3 = false;
            		}
HXDLIN(1762)		if (_hx_tmp3) {
HXLINE(1764)			return_str = (str + suffix);
            		}
HXLINE(1767)		if ((return_str == HX_("",00,00,00,00))) {
HXLINE(1769)			return_str = ((HX_("assets/gfx/",e2,08,10,b0) + str) + suffix);
            		}
HXLINE(1772)		if ((return_str.indexOf((HX_(".stitch.txt",a1,9d,fa,01) + suffix),null()) != -1)) {
HXLINE(1774)			return_str = ::StringTools_obj::replace(return_str,(HX_(".stitch.txt",a1,9d,fa,01) + suffix),HX_(".stitch.txt",a1,9d,fa,01));
            		}
HXLINE(1777)		return return_str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,get_gfx,return )

 ::Xml U_obj::unparentXML( ::Xml f){
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_2233_unparentXML)
HXLINE(2234)		if (::hx::IsNotNull( f->parent )) {
HXLINE(2236)			f->parent->removeChild(f);
            		}
HXLINE(2238)		return f;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(U_obj,unparentXML,return )

 ::openfl::geom::Matrix U_obj::getMatrix(){
            	HX_GC_STACKFRAME(&_hx_pos_9939526bb4013f05_2279_getMatrix)
HXLINE(2280)		if (::hx::IsNull( ::flixel::addons::ui::U_obj::_matrix )) {
HXLINE(2282)			::flixel::addons::ui::U_obj::_matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE(2284)		return ::flixel::addons::ui::U_obj::_matrix;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(U_obj,getMatrix,return )

 ::openfl::geom::Matrix U_obj::_matrix;


U_obj::U_obj()
{
}

bool U_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"FU") ) { outValue = FU_dyn(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"xml") ) { outValue = xml_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"FU_") ) { outValue = FU__dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gfx") ) { outValue = gfx_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { outValue = font_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"xml_f") ) { outValue = xml_f_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xml_i") ) { outValue = xml_i_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"xml_pt") ) { outValue = xml_pt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBmp") ) { outValue = getBmp_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xml_str") ) { outValue = xml_str_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"boolify") ) { outValue = boolify_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_gfx") ) { outValue = get_gfx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_matrix") ) { outValue = ( _matrix ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"xml_name") ) { outValue = xml_name_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isStrNum") ) { outValue = isStrNum_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pointify") ) { outValue = pointify_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xml_bool") ) { outValue = xml_bool_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"xml_color") ) { outValue = xml_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getMatrix") ) { outValue = getMatrix_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clearArray") ) { outValue = clearArray_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"applyResize") ) { outValue = applyResize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unparentXML") ) { outValue = unparentXML_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"xml_strArray") ) { outValue = xml_strArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"destroyThing") ) { outValue = destroyThing_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"checkHaxedef") ) { outValue = checkHaxedef_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scaleTileBmp") ) { outValue = scaleTileBmp_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"perc_to_float") ) { outValue = perc_to_float_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"xml_colorArray") ) { outValue = xml_colorArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clearArraySoft") ) { outValue = clearArraySoft_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"conformToBounds") ) { outValue = conformToBounds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadScaledImage") ) { outValue = loadScaledImage_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"compareStringVars") ) { outValue = compareStringVars_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"copy_shallow_arr_i") ) { outValue = copy_shallow_arr_i_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"scaleAndStoreTileset") ) { outValue = scaleAndStoreTileset_dyn(); return true; }
	}
	return false;
}

bool U_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_matrix") ) { _matrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *U_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo U_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::geom::Matrix */ ,(void *) &U_obj::_matrix,HX_("_matrix",e0,47,3f,2a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void U_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(U_obj::_matrix,"_matrix");
};

#ifdef HXCPP_VISIT_ALLOCS
static void U_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(U_obj::_matrix,"_matrix");
};

#endif

::hx::Class U_obj::__mClass;

static ::String U_obj_sStaticFields[] = {
	HX_("xml_str",09,93,5f,81),
	HX_("xml_name",f3,94,e4,ae),
	HX_("xml_color",bb,a1,f5,0c),
	HX_("xml_strArray",d0,a9,3e,ee),
	HX_("xml_colorArray",de,15,7c,cd),
	HX_("perc_to_float",51,7e,53,6d),
	HX_("isStrNum",9f,4d,85,69),
	HX_("xml_f",be,24,74,60),
	HX_("xml_i",c1,24,74,60),
	HX_("xml_pt",ac,0a,2c,05),
	HX_("boolify",12,f8,01,7e),
	HX_("pointify",ac,e3,69,ac),
	HX_("compareStringVars",22,fa,08,21),
	HX_("xml_bool",d2,a6,00,a7),
	HX_("conformToBounds",f6,0a,e3,ea),
	HX_("applyResize",02,1a,76,44),
	HX_("xml",d7,6d,5b,00),
	HX_("clearArraySoft",d6,4b,cf,53),
	HX_("clearArray",cc,ac,99,fa),
	HX_("destroyThing",94,80,89,01),
	HX_("font",cf,5d,c0,43),
	HX_("FU",4f,3d,00,00),
	HX_("getBmp",4f,f5,19,a3),
	HX_("checkHaxedef",77,59,01,f6),
	HX_("copy_shallow_arr_i",96,ac,46,f2),
	HX_("FU_",30,68,35,00),
	HX_("scaleTileBmp",4d,f8,b7,dc),
	HX_("scaleAndStoreTileset",60,15,fd,22),
	HX_("loadScaledImage",db,79,ed,47),
	HX_("gfx",79,81,4e,00),
	HX_("get_gfx",10,4a,c3,26),
	HX_("unparentXML",54,a1,ff,04),
	HX_("getMatrix",77,bf,1e,38),
	HX_("_matrix",e0,47,3f,2a),
	::String(null())
};

void U_obj::__register()
{
	U_obj _hx_dummy;
	U_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.ui.U",04,06,40,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &U_obj::__GetStatic;
	__mClass->mSetStaticField = &U_obj::__SetStatic;
	__mClass->mMarkFunc = U_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(U_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< U_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = U_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = U_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = U_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void U_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9939526bb4013f05_2287_boot)
HXDLIN(2287)		_matrix = null();
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
