// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Anchor
#include <flixel/addons/ui/Anchor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_AnchorPoint
#include <flixel/addons/ui/AnchorPoint.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxBaseMultiInput
#include <flixel/addons/ui/FlxBaseMultiInput.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxMultiGamepad
#include <flixel/addons/ui/FlxMultiGamepad.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxMultiGamepadAnalogStick
#include <flixel/addons/ui/FlxMultiGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxMultiKey
#include <flixel/addons/ui/FlxMultiKey.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICursor
#include <flixel/addons/ui/FlxUICursor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIMouse
#include <flixel/addons/ui/FlxUIMouse.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_GamepadAutoConnectPreference
#include <flixel/addons/ui/GamepadAutoConnectPreference.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_XY
#include <flixel/addons/ui/XY.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7e07195111da0df5_27_new,"flixel.addons.ui.FlxUICursor","new",0x0bf8fb7d,"flixel.addons.ui.FlxUICursor.new","flixel/addons/ui/FlxUICursor.hx",27,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_48_findVisibleLocation,"flixel.addons.ui.FlxUICursor","findVisibleLocation",0x70b2b9ab,"flixel.addons.ui.FlxUICursor.findVisibleLocation","flixel/addons/ui/FlxUICursor.hx",48,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_129_set_listIndex,"flixel.addons.ui.FlxUICursor","set_listIndex",0xbbda2114,"flixel.addons.ui.FlxUICursor.set_listIndex","flixel/addons/ui/FlxUICursor.hx",129,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_145_set_visible,"flixel.addons.ui.FlxUICursor","set_visible",0x5e2cefb2,"flixel.addons.ui.FlxUICursor.set_visible","flixel/addons/ui/FlxUICursor.hx",145,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_151_set_location,"flixel.addons.ui.FlxUICursor","set_location",0xd1a64ef5,"flixel.addons.ui.FlxUICursor.set_location","flixel/addons/ui/FlxUICursor.hx",151,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_169_set_gamepad,"flixel.addons.ui.FlxUICursor","set_gamepad",0x448e57e1,"flixel.addons.ui.FlxUICursor.set_gamepad","flixel/addons/ui/FlxUICursor.hx",169,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_192_get_gamepad,"flixel.addons.ui.FlxUICursor","get_gamepad",0x3a2150d5,"flixel.addons.ui.FlxUICursor.get_gamepad","flixel/addons/ui/FlxUICursor.hx",192,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_282_destroy,"flixel.addons.ui.FlxUICursor","destroy",0x543baa97,"flixel.addons.ui.FlxUICursor.destroy","flixel/addons/ui/FlxUICursor.hx",282,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_311_update,"flixel.addons.ui.FlxUICursor","update",0x0fd86b0c,"flixel.addons.ui.FlxUICursor.update","flixel/addons/ui/FlxUICursor.hx",311,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_344_addWidgetsFromUI,"flixel.addons.ui.FlxUICursor","addWidgetsFromUI",0xd07d3faf,"flixel.addons.ui.FlxUICursor.addWidgetsFromUI","flixel/addons/ui/FlxUICursor.hx",344,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_405_jumpToXY,"flixel.addons.ui.FlxUICursor","jumpToXY",0x88ecb30d,"flixel.addons.ui.FlxUICursor.jumpToXY","flixel/addons/ui/FlxUICursor.hx",405,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_468_addWidgetList,"flixel.addons.ui.FlxUICursor","addWidgetList",0xa4f08520,"flixel.addons.ui.FlxUICursor.addWidgetList","flixel/addons/ui/FlxUICursor.hx",468,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_532_addWidget,"flixel.addons.ui.FlxUICursor","addWidget",0xaa5cc3a2,"flixel.addons.ui.FlxUICursor.addWidget","flixel/addons/ui/FlxUICursor.hx",532,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_595_setDefaultKeys,"flixel.addons.ui.FlxUICursor","setDefaultKeys",0xd71836d6,"flixel.addons.ui.FlxUICursor.setDefaultKeys","flixel/addons/ui/FlxUICursor.hx",595,0xd77c8c34)
static const int _hx_array_data_79a4790b_28[] = {
	(int)16,
};
static const int _hx_array_data_79a4790b_29[] = {
	(int)16,
};
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_691_getGamepad,"flixel.addons.ui.FlxUICursor","getGamepad",0xafc4892e,"flixel.addons.ui.FlxUICursor.getGamepad","flixel/addons/ui/FlxUICursor.hx",691,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_728__sortXYWidgetList,"flixel.addons.ui.FlxUICursor","_sortXYWidgetList",0x16b9553d,"flixel.addons.ui.FlxUICursor._sortXYWidgetList","flixel/addons/ui/FlxUICursor.hx",728,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_741__sortXYVisible,"flixel.addons.ui.FlxUICursor","_sortXYVisible",0x87247297,"flixel.addons.ui.FlxUICursor._sortXYVisible","flixel/addons/ui/FlxUICursor.hx",741,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_758__addToKeys,"flixel.addons.ui.FlxUICursor","_addToKeys",0x67642054,"flixel.addons.ui.FlxUICursor._addToKeys","flixel/addons/ui/FlxUICursor.hx",758,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_775__clearKeys,"flixel.addons.ui.FlxUICursor","_clearKeys",0xed476865,"flixel.addons.ui.FlxUICursor._clearKeys","flixel/addons/ui/FlxUICursor.hx",775,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_789__newKeys,"flixel.addons.ui.FlxUICursor","_newKeys",0xbfa453b8,"flixel.addons.ui.FlxUICursor._newKeys","flixel/addons/ui/FlxUICursor.hx",789,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_798__checkKeys,"flixel.addons.ui.FlxUICursor","_checkKeys",0xcd664920,"flixel.addons.ui.FlxUICursor._checkKeys","flixel/addons/ui/FlxUICursor.hx",798,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_870__clickKeysJustPressed,"flixel.addons.ui.FlxUICursor","_clickKeysJustPressed",0x0327bd16,"flixel.addons.ui.FlxUICursor._clickKeysJustPressed","flixel/addons/ui/FlxUICursor.hx",870,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_882__clickKeysPressed,"flixel.addons.ui.FlxUICursor","_clickKeysPressed",0x3a0ee1e2,"flixel.addons.ui.FlxUICursor._clickKeysPressed","flixel/addons/ui/FlxUICursor.hx",882,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_894__getWidgetPoint,"flixel.addons.ui.FlxUICursor","_getWidgetPoint",0xcea94c32,"flixel.addons.ui.FlxUICursor._getWidgetPoint","flixel/addons/ui/FlxUICursor.hx",894,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_933__doMouseMove,"flixel.addons.ui.FlxUICursor","_doMouseMove",0xd60b120f,"flixel.addons.ui.FlxUICursor._doMouseMove","flixel/addons/ui/FlxUICursor.hx",933,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_968__doPress,"flixel.addons.ui.FlxUICursor","_doPress",0xc485f93c,"flixel.addons.ui.FlxUICursor._doPress","flixel/addons/ui/FlxUICursor.hx",968,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_1012__doRelease,"flixel.addons.ui.FlxUICursor","_doRelease",0x8beacbc0,"flixel.addons.ui.FlxUICursor._doRelease","flixel/addons/ui/FlxUICursor.hx",1012,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_1071__findNextY,"flixel.addons.ui.FlxUICursor","_findNextY",0xbaa89f51,"flixel.addons.ui.FlxUICursor._findNextY","flixel/addons/ui/FlxUICursor.hx",1071,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_1144__wrapX,"flixel.addons.ui.FlxUICursor","_wrapX",0x550d8392,"flixel.addons.ui.FlxUICursor._wrapX","flixel/addons/ui/FlxUICursor.hx",1144,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_1157__wrapY,"flixel.addons.ui.FlxUICursor","_wrapY",0x550d8393,"flixel.addons.ui.FlxUICursor._wrapY","flixel/addons/ui/FlxUICursor.hx",1157,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_1234__doInput,"flixel.addons.ui.FlxUICursor","_doInput",0xba1b69c3,"flixel.addons.ui.FlxUICursor._doInput","flixel/addons/ui/FlxUICursor.hx",1234,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_1335__updateCursor,"flixel.addons.ui.FlxUICursor","_updateCursor",0x0235d9fb,"flixel.addons.ui.FlxUICursor._updateCursor","flixel/addons/ui/FlxUICursor.hx",1335,0xd77c8c34)
HX_LOCAL_STACK_FRAME(_hx_pos_7e07195111da0df5_1396__flipAnchor,"flixel.addons.ui.FlxUICursor","_flipAnchor",0xd4c95e3e,"flixel.addons.ui.FlxUICursor._flipAnchor","flixel/addons/ui/FlxUICursor.hx",1396,0xd77c8c34)
namespace flixel{
namespace addons{
namespace ui{

void FlxUICursor_obj::__construct( ::Dynamic Callback,::hx::Null< int >  __o_InputMethod,::hx::Null< int >  __o_DefaultKeys, ::Dynamic Asset){
            		int InputMethod = __o_InputMethod.Default(1);
            		int DefaultKeys = __o_DefaultKeys.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_7e07195111da0df5_27_new)
HXLINE( 687)		this->_clickTime = ((Float)0);
HXLINE( 678)		this->_clickPressed = false;
HXLINE( 676)		this->lastMouseY = ((Float)0);
HXLINE( 675)		this->lastMouseX = ((Float)0);
HXLINE( 221)		this->inputMethod = 0;
HXLINE( 218)		this->dispatchEvents = true;
HXLINE( 164)		this->gamepadAutoConnect = ::flixel::addons::ui::GamepadAutoConnectPreference_obj::FirstActive_dyn();
HXLINE(  34)		this->listIndex = 0;
HXLINE(  33)		this->location = -1;
HXLINE(  31)		this->wrap = true;
HXLINE( 237)		if (::hx::IsNull( Asset )) {
HXLINE( 239)			if ((::flixel::FlxG_obj::height < 400)) {
HXLINE( 241)				Asset = HX_("flixel/flixel-ui/img/finger_small.png",35,b3,60,fc);
            			}
            			else {
HXLINE( 245)				Asset = HX_("flixel/flixel-ui/img/finger_big.png",ee,88,a9,18);
            			}
            		}
HXLINE( 249)		super::__construct(0,0,Asset);
HXLINE( 251)		this->inputMethod = InputMethod;
HXLINE( 252)		this->_lists = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("width",06,b6,62,ca),0)
            			->setFixed(1,HX_("x",78,00,00,00),0)
            			->setFixed(2,HX_("y",79,00,00,00),0)
            			->setFixed(3,HX_("height",e7,07,4c,02),0)
            			->setFixed(4,HX_("widgets",2f,1c,67,28),::Array_obj< ::Dynamic>::__new(0))));
HXLINE( 261)		this->_widgets = ( (::Array< ::Dynamic>)(this->_lists->__get(0)->__Field(HX_("widgets",2f,1c,67,28),::hx::paccDynamic)) );
HXLINE( 262)		this->anchor =  ::flixel::addons::ui::Anchor_obj::__alloc( HX_CTX ,( (Float)(-2) ),( (Float)(0) ),HX_("left",07,08,b0,47),HX_("center",d5,25,db,05),HX_("right",dc,0b,64,e9),HX_("center",d5,25,db,05));
HXLINE( 263)		this->setDefaultKeys(DefaultKeys);
HXLINE( 264)		this->callback = Callback;
HXLINE( 266)		this->scrollFactor->set(0,0);
HXLINE( 269)		bool _hx_tmp;
HXDLIN( 269)		if (::hx::IsNotNull( ::flixel::FlxG_obj::mouse )) {
HXLINE( 269)			_hx_tmp = (::Std_obj::isOfType(::flixel::FlxG_obj::mouse,::hx::ClassOf< ::flixel::addons::ui::FlxUIMouse >()) == false);
            		}
            		else {
HXLINE( 269)			_hx_tmp = false;
            		}
HXDLIN( 269)		if (_hx_tmp) {
HXLINE( 271)			this->_newMouse =  ::flixel::addons::ui::FlxUIMouse_obj::__alloc( HX_CTX ,::flixel::FlxG_obj::mouse->cursorContainer);
HXLINE( 272)			::flixel::FlxG_obj::set_mouse(this->_newMouse);
            		}
            		else {
HXLINE( 276)			this->_newMouse = ( ( ::flixel::addons::ui::FlxUIMouse)(::flixel::FlxG_obj::mouse) );
            		}
            	}

Dynamic FlxUICursor_obj::__CreateEmpty() { return new FlxUICursor_obj; }

void *FlxUICursor_obj::_hx_vtable = 0;

Dynamic FlxUICursor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxUICursor_obj > _hx_result = new FlxUICursor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxUICursor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x46137299) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x0dc54e00) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0dc54e00;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x46137299;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void FlxUICursor_obj::findVisibleLocation(int loc,::hx::Null< bool >  __o_forwardIfInvisible,::hx::Null< bool >  __o_wrap){
            		bool forwardIfInvisible = __o_forwardIfInvisible.Default(true);
            		bool wrap = __o_wrap.Default(true);
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_48_findVisibleLocation)
HXLINE(  49)		this->set_location(loc);
HXLINE(  50)		if ((this->location == -1)) {
HXLINE(  51)			return;
            		}
HXLINE(  53)		bool wrapped = false;
HXLINE(  54)		while(true){
HXLINE(  54)			bool _hx_tmp;
HXDLIN(  54)			if (::hx::IsNotNull( this->_widgets->__get(this->location) )) {
HXLINE(  54)				_hx_tmp = ::hx::IsEq( this->_widgets->__get(this->location)->__Field(HX_("visible",72,78,24,a3),::hx::paccDynamic),false );
            			}
            			else {
HXLINE(  54)				_hx_tmp = true;
            			}
HXDLIN(  54)			if (!(_hx_tmp)) {
HXLINE(  54)				goto _hx_goto_1;
            			}
HXLINE(  56)			if (forwardIfInvisible) {
HXLINE(  58)				if ((this->location == (this->_widgets->length - 1))) {
HXLINE(  60)					if (wrap) {
HXLINE(  62)						if (!(wrapped)) {
HXLINE(  64)							wrapped = true;
HXLINE(  65)							this->set_location(0);
            						}
            						else {
HXLINE(  69)							this->set_location(-1);
HXLINE(  70)							return;
            						}
            					}
            					else {
HXLINE(  75)						this->set_location(-1);
HXLINE(  76)						return;
            					}
            				}
            				else {
HXLINE(  81)					 ::flixel::addons::ui::FlxUICursor _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  81)					_g->set_location((_g->location + 1));
            				}
            			}
            			else {
HXLINE(  86)				if ((this->location == 0)) {
HXLINE(  88)					if (wrap) {
HXLINE(  90)						if (!(wrapped)) {
HXLINE(  92)							wrapped = true;
HXLINE(  93)							this->set_location((this->_widgets->length - 1));
            						}
            						else {
HXLINE(  97)							this->set_location(-1);
HXLINE(  98)							return;
            						}
            					}
            					else {
HXLINE( 103)						this->set_location(-1);
HXLINE( 104)						return;
            					}
            				}
            				else {
HXLINE( 109)					 ::flixel::addons::ui::FlxUICursor _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 109)					_g->set_location((_g->location - 1));
            				}
            			}
            		}
            		_hx_goto_1:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUICursor_obj,findVisibleLocation,(void))

int FlxUICursor_obj::set_listIndex(int i){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_129_set_listIndex)
HXLINE( 130)		if ((i >= this->_lists->length)) {
HXLINE( 132)			i = (this->_lists->length - 1);
            		}
            		else {
HXLINE( 134)			if ((i < 0)) {
HXLINE( 136)				i = 0;
            			}
            		}
HXLINE( 138)		this->listIndex = i;
HXLINE( 139)		this->set_location(0);
HXLINE( 140)		this->_updateCursor();
HXLINE( 141)		return this->listIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,set_listIndex,return )

bool FlxUICursor_obj::set_visible(bool b){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_145_set_visible)
HXLINE( 146)		b = this->super::set_visible(b);
HXLINE( 147)		return b;
            	}


int FlxUICursor_obj::set_location(int i){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_151_set_location)
HXLINE( 152)		if ((i >= this->_widgets->length)) {
HXLINE( 154)			i = (this->_widgets->length - 1);
            		}
HXLINE( 156)		this->location = i;
HXLINE( 157)		this->_updateCursor();
HXLINE( 158)		return this->location;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,set_location,return )

 ::flixel::input::gamepad::FlxGamepad FlxUICursor_obj::set_gamepad( ::flixel::input::gamepad::FlxGamepad g){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_169_set_gamepad)
HXLINE( 170)		this->_gamepad = g;
HXLINE( 171)		this->setDefaultKeys(this->_defaultCode);
HXLINE( 172)		::Array< ::Dynamic> arr = ::Array_obj< ::Dynamic>::__new(5)->init(0,this->keysUp)->init(1,this->keysDown)->init(2,this->keysLeft)->init(3,this->keysRight)->init(4,this->keysClick);
HXLINE( 173)		{
HXLINE( 173)			int _g = 0;
HXDLIN( 173)			while((_g < arr->length)){
HXLINE( 173)				::Array< ::Dynamic> list = arr->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 173)				_g = (_g + 1);
HXLINE( 175)				if (::hx::IsNotNull( list )) {
HXLINE( 177)					int _g = 0;
HXDLIN( 177)					while((_g < list->length)){
HXLINE( 177)						 ::flixel::addons::ui::FlxBaseMultiInput keys = list->__get(_g).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 177)						_g = (_g + 1);
HXLINE( 179)						if (::Std_obj::isOfType(keys,::hx::ClassOf< ::flixel::addons::ui::FlxMultiGamepad >())) {
HXLINE( 181)							 ::flixel::addons::ui::FlxMultiGamepad fmg = ( ( ::flixel::addons::ui::FlxMultiGamepad)(keys) );
HXLINE( 182)							fmg->gamepad = this->_gamepad;
            						}
            					}
            				}
            			}
            		}
HXLINE( 187)		return g;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,set_gamepad,return )

 ::flixel::input::gamepad::FlxGamepad FlxUICursor_obj::get_gamepad(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_192_get_gamepad)
HXDLIN( 192)		return this->_gamepad;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,get_gamepad,return )

void FlxUICursor_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_282_destroy)
HXLINE( 283)		this->super::destroy();
HXLINE( 286)		if (::hx::IsEq( ::flixel::FlxG_obj::mouse,this->_newMouse )) {
HXLINE( 289)			this->_newMouse = null();
            		}
HXLINE( 293)		this->keysUp = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->keysUp);
HXLINE( 294)		this->keysDown = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->keysDown);
HXLINE( 295)		this->keysLeft = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->keysLeft);
HXLINE( 296)		this->keysRight = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->keysRight);
HXLINE( 297)		this->keysClick = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->keysClick);
HXLINE( 299)		this->anchor = ( ( ::flixel::addons::ui::Anchor)(::flixel::util::FlxDestroyUtil_obj::destroy(this->anchor)) );
HXLINE( 301)		{
HXLINE( 301)			int _g = 0;
HXDLIN( 301)			::Array< ::Dynamic> _g1 = this->_lists;
HXDLIN( 301)			while((_g < _g1->length)){
HXLINE( 301)				 ::Dynamic l = _g1->__get(_g);
HXDLIN( 301)				_g = (_g + 1);
HXLINE( 303)				::flixel::addons::ui::U_obj::clearArraySoft(( (::cpp::VirtualArray)(l->__Field(HX_("widgets",2f,1c,67,28),::hx::paccDynamic)) ));
            			}
            		}
HXLINE( 306)		::flixel::addons::ui::U_obj::clearArraySoft(this->_lists);
HXLINE( 307)		this->_widgets = null();
            	}


void FlxUICursor_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_311_update)
HXLINE( 313)		if (::hx::IsNull( this->get_gamepad() )) {
HXLINE( 315)			 ::flixel::input::gamepad::FlxGamepad g = this->getGamepad(false);
HXLINE( 316)			if (::hx::IsNotNull( g )) {
HXLINE( 318)				this->set_gamepad(g);
            			}
            		}
HXLINE( 324)		bool _hx_tmp;
HXDLIN( 324)		if ((this->lastMouseX == ::flixel::FlxG_obj::mouse->x)) {
HXLINE( 324)			_hx_tmp = (this->lastMouseY != ::flixel::FlxG_obj::mouse->y);
            		}
            		else {
HXLINE( 324)			_hx_tmp = true;
            		}
HXDLIN( 324)		if (_hx_tmp) {
HXLINE( 326)			bool oldVis = this->visible;
HXLINE( 327)			this->jumpToXY(( (Float)(::flixel::FlxG_obj::mouse->x) ),( (Float)(::flixel::FlxG_obj::mouse->y) ));
HXLINE( 328)			this->set_visible(oldVis);
HXLINE( 331)			this->lastMouseX = ( (Float)(::flixel::FlxG_obj::mouse->x) );
HXLINE( 332)			this->lastMouseY = ( (Float)(::flixel::FlxG_obj::mouse->y) );
            		}
HXLINE( 337)		this->_checkKeys();
HXLINE( 338)		 ::flixel::addons::ui::FlxUICursor _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 338)		_hx_tmp1->_clickTime = (_hx_tmp1->_clickTime + elapsed);
HXLINE( 339)		this->super::update(elapsed);
            	}


void FlxUICursor_obj::addWidgetsFromUI( ::flixel::addons::ui::FlxUI ui){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_344_addWidgetsFromUI)
HXDLIN( 344)		if (::hx::IsNotNull( ui->cursorLists )) {
HXLINE( 346)			{
HXLINE( 346)				int _g = 0;
HXDLIN( 346)				::Array< ::Dynamic> _g1 = ui->cursorLists;
HXDLIN( 346)				while((_g < _g1->length)){
HXLINE( 346)					::Array< ::Dynamic> list = _g1->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 346)					_g = (_g + 1);
HXLINE( 348)					this->addWidgetList(list);
            				}
            			}
HXLINE( 350)			this->_widgets = ( (::Array< ::Dynamic>)(this->_lists->__get(0)->__Field(HX_("widgets",2f,1c,67,28),::hx::paccDynamic)) );
HXLINE( 351)			this->set_location(0);
HXLINE( 352)			this->set_listIndex(0);
            		}
            		else {
HXLINE( 356)			int _g = 0;
HXDLIN( 356)			::Array< ::Dynamic> _g1 = ui->group->members;
HXDLIN( 356)			while((_g < _g1->length)){
HXLINE( 356)				 ::flixel::FlxSprite widget = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 356)				_g = (_g + 1);
HXLINE( 358)				bool _hx_tmp;
HXDLIN( 358)				if (!(::Std_obj::isOfType(widget,::hx::ClassOf< ::flixel::addons::ui::interfaces::ICursorPointable >()))) {
HXLINE( 358)					_hx_tmp = ::Std_obj::isOfType(widget,::hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >());
            				}
            				else {
HXLINE( 358)					_hx_tmp = true;
            				}
HXDLIN( 358)				if (_hx_tmp) {
HXLINE( 360)					this->addWidget(widget);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,addWidgetsFromUI,(void))

bool FlxUICursor_obj::jumpToXY(Float X,Float Y){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_405_jumpToXY)
HXLINE( 406)		int listi = 0;
HXLINE( 408)		Float bestd2 = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 409)		int bestli = -1;
HXLINE( 410)		int besti = -1;
HXLINE( 412)		if (::hx::IsNotNull( this->_lists )) {
HXLINE( 414)			{
HXLINE( 414)				int _g = 0;
HXDLIN( 414)				::Array< ::Dynamic> _g1 = this->_lists;
HXDLIN( 414)				while((_g < _g1->length)){
HXLINE( 414)					 ::Dynamic list = _g1->__get(_g);
HXDLIN( 414)					_g = (_g + 1);
HXLINE( 416)					{
HXLINE( 416)						int _g2 = 0;
HXDLIN( 416)						int _g3 = ( (::Array< ::Dynamic>)(list->__Field(HX_("widgets",2f,1c,67,28),::hx::paccDynamic)) )->length;
HXDLIN( 416)						while((_g2 < _g3)){
HXLINE( 416)							_g2 = (_g2 + 1);
HXDLIN( 416)							int i = (_g2 - 1);
HXLINE( 418)							::Dynamic w =  ::Dynamic(list->__Field(HX_("widgets",2f,1c,67,28),::hx::paccDynamic))->__GetItem(i);
HXLINE( 419)							bool _hx_tmp;
HXDLIN( 419)							bool _hx_tmp1;
HXDLIN( 419)							bool _hx_tmp2;
HXDLIN( 419)							bool _hx_tmp3;
HXDLIN( 419)							if (::hx::IsEq( w->__Field(HX_("visible",72,78,24,a3),::hx::paccDynamic),true )) {
HXLINE( 419)								_hx_tmp3 = ::hx::IsGreaterEq( X,w->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) );
            							}
            							else {
HXLINE( 419)								_hx_tmp3 = false;
            							}
HXDLIN( 419)							if (_hx_tmp3) {
HXLINE( 419)								_hx_tmp2 = ::hx::IsGreaterEq( Y,w->__Field(HX_("y",79,00,00,00),::hx::paccDynamic) );
            							}
            							else {
HXLINE( 419)								_hx_tmp2 = false;
            							}
HXDLIN( 419)							if (_hx_tmp2) {
HXLINE( 419)								Float w1 = ( (Float)(w->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 419)								_hx_tmp1 = (X <= (w1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(w)));
            							}
            							else {
HXLINE( 419)								_hx_tmp1 = false;
            							}
HXDLIN( 419)							if (_hx_tmp1) {
HXLINE( 419)								Float w1 = ( (Float)(w->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 419)								_hx_tmp = (Y <= (w1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(w)));
            							}
            							else {
HXLINE( 419)								_hx_tmp = false;
            							}
HXDLIN( 419)							if (_hx_tmp) {
HXLINE( 421)								Float w1 = ( (Float)(w->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 421)								Float dx = ((w1 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(w) / ( (Float)(2) ))) - X);
HXLINE( 422)								Float w2 = ( (Float)(w->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 422)								Float dy = ((w2 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(w) / ( (Float)(2) ))) - Y);
HXLINE( 423)								Float d2 = ((dx * dx) + (dy * dy));
HXLINE( 424)								if ((d2 < bestd2)) {
HXLINE( 426)									bestd2 = d2;
HXLINE( 427)									bestli = listi;
HXLINE( 428)									besti = i;
            								}
            							}
            						}
            					}
HXLINE( 432)					listi = (listi + 1);
            				}
            			}
HXLINE( 434)			bool _hx_tmp;
HXDLIN( 434)			if ((bestli != -1)) {
HXLINE( 434)				_hx_tmp = (besti != -1);
            			}
            			else {
HXLINE( 434)				_hx_tmp = false;
            			}
HXDLIN( 434)			if (_hx_tmp) {
HXLINE( 436)				this->set_listIndex(bestli);
HXLINE( 437)				this->set_location(besti);
HXLINE( 438)				return true;
            			}
            		}
            		else {
HXLINE( 443)			{
HXLINE( 443)				int _g = 0;
HXDLIN( 443)				int _g1 = this->_widgets->length;
HXDLIN( 443)				while((_g < _g1)){
HXLINE( 443)					_g = (_g + 1);
HXDLIN( 443)					int i = (_g - 1);
HXLINE( 445)					::Dynamic w = this->_widgets->__get(i);
HXLINE( 446)					bool _hx_tmp;
HXDLIN( 446)					bool _hx_tmp1;
HXDLIN( 446)					bool _hx_tmp2;
HXDLIN( 446)					bool _hx_tmp3;
HXDLIN( 446)					if (::hx::IsEq( w->__Field(HX_("visible",72,78,24,a3),::hx::paccDynamic),true )) {
HXLINE( 446)						_hx_tmp3 = ::hx::IsGreaterEq( X,w->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) );
            					}
            					else {
HXLINE( 446)						_hx_tmp3 = false;
            					}
HXDLIN( 446)					if (_hx_tmp3) {
HXLINE( 446)						_hx_tmp2 = ::hx::IsGreaterEq( Y,w->__Field(HX_("y",79,00,00,00),::hx::paccDynamic) );
            					}
            					else {
HXLINE( 446)						_hx_tmp2 = false;
            					}
HXDLIN( 446)					if (_hx_tmp2) {
HXLINE( 446)						Float w1 = ( (Float)(w->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 446)						_hx_tmp1 = (X <= (w1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(w)));
            					}
            					else {
HXLINE( 446)						_hx_tmp1 = false;
            					}
HXDLIN( 446)					if (_hx_tmp1) {
HXLINE( 446)						Float w1 = ( (Float)(w->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 446)						_hx_tmp = (Y <= (w1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(w)));
            					}
            					else {
HXLINE( 446)						_hx_tmp = false;
            					}
HXDLIN( 446)					if (_hx_tmp) {
HXLINE( 448)						Float w1 = ( (Float)(w->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 448)						Float dx = ((w1 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(w) / ( (Float)(2) ))) - X);
HXLINE( 449)						Float w2 = ( (Float)(w->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 449)						Float dy = ((w2 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(w) / ( (Float)(2) ))) - Y);
HXLINE( 450)						Float d2 = ((dx * dx) + (dy * dy));
HXLINE( 451)						if ((d2 < bestd2)) {
HXLINE( 453)							bestd2 = d2;
HXLINE( 454)							besti = i;
            						}
            					}
            				}
            			}
HXLINE( 458)			if ((besti != -1)) {
HXLINE( 460)				this->set_location(besti);
HXLINE( 461)				return true;
            			}
            		}
HXLINE( 464)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,jumpToXY,return )

void FlxUICursor_obj::addWidgetList(::Array< ::Dynamic> list){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_468_addWidgetList)
HXLINE( 469)		{
HXLINE( 469)			int _g = 0;
HXDLIN( 469)			::Array< ::Dynamic> _g1 = this->_lists;
HXDLIN( 469)			while((_g < _g1->length)){
HXLINE( 469)				 ::Dynamic l = _g1->__get(_g);
HXDLIN( 469)				_g = (_g + 1);
HXLINE( 471)				if (::flixel::util::FlxArrayUtil_obj::equals(( (::cpp::VirtualArray)(l->__Field(HX_("widgets",2f,1c,67,28),::hx::paccDynamic)) ),list)) {
HXLINE( 473)					return;
            				}
            			}
            		}
HXLINE( 477)		Float x1 = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 478)		Float y1 = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 479)		Float x2 = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 480)		Float y2 = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 482)		{
HXLINE( 482)			int _g2 = 0;
HXDLIN( 482)			while((_g2 < list->length)){
HXLINE( 482)				::Dynamic w = list->__get(_g2);
HXDLIN( 482)				_g2 = (_g2 + 1);
HXLINE( 484)				if (::hx::IsLess( w->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),x1 )) {
HXLINE( 485)					x1 = ( (Float)(w->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
            				}
HXLINE( 486)				if (::hx::IsLess( w->__Field(HX_("y",79,00,00,00),::hx::paccDynamic),y1 )) {
HXLINE( 487)					y1 = ( (Float)(w->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
            				}
HXLINE( 488)				Float w1 = ( (Float)(w->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 488)				if (((w1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(w)) > x2)) {
HXLINE( 489)					x2 = ( (Float)(w->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
            				}
HXLINE( 490)				Float w2 = ( (Float)(w->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 490)				if (((w2 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(w)) > y2)) {
HXLINE( 491)					y2 = ( (Float)(w->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
            				}
            			}
            		}
HXLINE( 494)		 ::Dynamic theList = null();
HXLINE( 495)		bool _hx_tmp;
HXDLIN( 495)		bool _hx_tmp1;
HXDLIN( 495)		if ((this->_lists->length == 1)) {
HXLINE( 495)			_hx_tmp1 = ::hx::IsNotNull( this->_lists->__get(0)->__Field(HX_("widgets",2f,1c,67,28),::hx::paccDynamic) );
            		}
            		else {
HXLINE( 495)			_hx_tmp1 = false;
            		}
HXDLIN( 495)		if (_hx_tmp1) {
HXLINE( 495)			_hx_tmp = (( (::Array< ::Dynamic>)(this->_lists->__get(0)->__Field(HX_("widgets",2f,1c,67,28),::hx::paccDynamic)) )->length == 0);
            		}
            		else {
HXLINE( 495)			_hx_tmp = false;
            		}
HXDLIN( 495)		if (_hx_tmp) {
HXLINE( 497)			this->_lists->__get(0)->__SetField(HX_("widgets",2f,1c,67,28),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
HXLINE( 498)			this->_lists->__get(0)->__SetField(HX_("x",78,00,00,00),::Std_obj::_hx_int(x1),::hx::paccDynamic);
HXLINE( 499)			this->_lists->__get(0)->__SetField(HX_("y",79,00,00,00),::Std_obj::_hx_int(y1),::hx::paccDynamic);
HXLINE( 500)			this->_lists->__get(0)->__SetField(HX_("width",06,b6,62,ca),::Std_obj::_hx_int((x2 - x1)),::hx::paccDynamic);
HXLINE( 501)			this->_lists->__get(0)->__SetField(HX_("height",e7,07,4c,02),::Std_obj::_hx_int((y2 - y1)),::hx::paccDynamic);
HXLINE( 502)			theList = this->_lists->__get(0);
            		}
            		else {
HXLINE( 506)			::Array< ::Dynamic> _hx_tmp = this->_lists;
HXLINE( 507)			int _hx_tmp1 = ::Std_obj::_hx_int(x1);
HXLINE( 508)			int _hx_tmp2 = ::Std_obj::_hx_int(y1);
HXLINE( 509)			int _hx_tmp3 = ::Std_obj::_hx_int((x2 - x1));
HXLINE( 506)			_hx_tmp->push( ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("width",06,b6,62,ca),_hx_tmp3)
            				->setFixed(1,HX_("x",78,00,00,00),_hx_tmp1)
            				->setFixed(2,HX_("y",79,00,00,00),_hx_tmp2)
            				->setFixed(3,HX_("height",e7,07,4c,02),::Std_obj::_hx_int((y2 - y1)))
            				->setFixed(4,HX_("widgets",2f,1c,67,28),::Array_obj< ::Dynamic>::__new(0))));
HXLINE( 513)			theList = this->_lists->__get((this->_lists->length - 1));
            		}
HXLINE( 516)		::Array< ::Dynamic> oldWidgets = this->_widgets;
HXLINE( 517)		this->_widgets = ( (::Array< ::Dynamic>)(theList->__Field(HX_("widgets",2f,1c,67,28),::hx::paccDynamic)) );
HXLINE( 518)		{
HXLINE( 518)			int _g3 = 0;
HXDLIN( 518)			while((_g3 < list->length)){
HXLINE( 518)				::Dynamic ifw = list->__get(_g3);
HXDLIN( 518)				_g3 = (_g3 + 1);
HXLINE( 520)				this->addWidget(ifw);
            			}
            		}
HXLINE( 522)		this->_widgets = oldWidgets;
HXLINE( 524)		this->_lists->sort(this->_sortXYWidgetList_dyn());
HXLINE( 525)		{
HXLINE( 525)			int _g4 = 0;
HXDLIN( 525)			::Array< ::Dynamic> _g5 = this->_lists;
HXDLIN( 525)			while((_g4 < _g5->length)){
HXLINE( 525)				 ::Dynamic widgetList = _g5->__get(_g4);
HXDLIN( 525)				_g4 = (_g4 + 1);
HXLINE( 527)				( (::Array< ::Dynamic>)(widgetList->__Field(HX_("widgets",2f,1c,67,28),::hx::paccDynamic)) )->sort(this->_sortXYVisible_dyn());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,addWidgetList,(void))

void FlxUICursor_obj::addWidget(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_532_addWidget)
HXLINE( 533)		if (::Std_obj::isOfType(widget,::hx::ClassOf< ::flixel::addons::ui::interfaces::ICursorPointable >())) {
HXLINE( 535)			this->_widgets->push(widget);
            		}
            		else {
HXLINE( 537)			if (::Std_obj::isOfType(widget,::hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >())) {
HXLINE( 539)				 ::flixel::addons::ui::FlxUIGroup g = ( ( ::flixel::addons::ui::FlxUIGroup)(widget) );
HXLINE( 540)				{
HXLINE( 540)					int _g = 0;
HXDLIN( 540)					::Array< ::Dynamic> _g1 = g->group->members;
HXDLIN( 540)					while((_g < _g1->length)){
HXLINE( 540)						 ::flixel::FlxSprite member = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 540)						_g = (_g + 1);
HXLINE( 542)						if (::Std_obj::isOfType(member,::hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIWidget >())) {
HXLINE( 544)							this->addWidget(member);
            						}
            					}
            				}
            			}
            		}
HXLINE( 548)		this->_widgets->sort(this->_sortXYVisible_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,addWidget,(void))

void FlxUICursor_obj::setDefaultKeys(int code){
            	HX_GC_STACKFRAME(&_hx_pos_7e07195111da0df5_595_setDefaultKeys)
HXLINE( 596)		this->_defaultCode = code;
HXLINE( 597)		this->_clearKeys();
HXLINE( 598)		this->_newKeys();
HXLINE( 599)		if (((code & 1) == 1)) {
HXLINE( 601)			::Array< ::Dynamic> _hx_tmp = this->keysRight;
HXDLIN( 601)			this->_addToKeys(_hx_tmp, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,9,null(),::Array_obj< int >::fromData( _hx_array_data_79a4790b_28,1)));
HXLINE( 602)			::Array< ::Dynamic> _hx_tmp1 = this->keysLeft;
HXDLIN( 602)			this->_addToKeys(_hx_tmp1, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,9,::Array_obj< int >::fromData( _hx_array_data_79a4790b_29,1),null()));
HXLINE( 603)			::Array< ::Dynamic> _hx_tmp2 = this->keysClick;
HXDLIN( 603)			this->_addToKeys(_hx_tmp2, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,13,null(),null()));
            		}
HXLINE( 605)		if (((code & 256) == 256)) {
HXLINE( 607)			::Array< ::Dynamic> _hx_tmp = this->keysRight;
HXDLIN( 607)			this->_addToKeys(_hx_tmp, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,39,null(),null()));
HXLINE( 608)			::Array< ::Dynamic> _hx_tmp1 = this->keysLeft;
HXDLIN( 608)			this->_addToKeys(_hx_tmp1, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,37,null(),null()));
HXLINE( 609)			::Array< ::Dynamic> _hx_tmp2 = this->keysDown;
HXDLIN( 609)			this->_addToKeys(_hx_tmp2, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,40,null(),null()));
HXLINE( 610)			::Array< ::Dynamic> _hx_tmp3 = this->keysUp;
HXDLIN( 610)			this->_addToKeys(_hx_tmp3, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,38,null(),null()));
HXLINE( 611)			::Array< ::Dynamic> _hx_tmp4 = this->keysClick;
HXDLIN( 611)			this->_addToKeys(_hx_tmp4, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,13,null(),null()));
            		}
HXLINE( 613)		if (((code & 16) == 16)) {
HXLINE( 615)			::Array< ::Dynamic> _hx_tmp = this->keysRight;
HXDLIN( 615)			this->_addToKeys(_hx_tmp, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,68,null(),null()));
HXLINE( 616)			::Array< ::Dynamic> _hx_tmp1 = this->keysLeft;
HXDLIN( 616)			this->_addToKeys(_hx_tmp1, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,65,null(),null()));
HXLINE( 617)			::Array< ::Dynamic> _hx_tmp2 = this->keysDown;
HXDLIN( 617)			this->_addToKeys(_hx_tmp2, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,83,null(),null()));
HXLINE( 618)			::Array< ::Dynamic> _hx_tmp3 = this->keysUp;
HXDLIN( 618)			this->_addToKeys(_hx_tmp3, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,87,null(),null()));
HXLINE( 619)			::Array< ::Dynamic> _hx_tmp4 = this->keysClick;
HXDLIN( 619)			this->_addToKeys(_hx_tmp4, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,13,null(),null()));
            		}
HXLINE( 621)		if (((code & 4096) == 4096)) {
HXLINE( 623)			::Array< ::Dynamic> _hx_tmp = this->keysRight;
HXDLIN( 623)			this->_addToKeys(_hx_tmp, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,102,null(),null()));
HXLINE( 624)			::Array< ::Dynamic> _hx_tmp1 = this->keysLeft;
HXDLIN( 624)			this->_addToKeys(_hx_tmp1, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,100,null(),null()));
HXLINE( 625)			::Array< ::Dynamic> _hx_tmp2 = this->keysDown;
HXDLIN( 625)			this->_addToKeys(_hx_tmp2, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,98,null(),null()));
HXLINE( 626)			::Array< ::Dynamic> _hx_tmp3 = this->keysUp;
HXDLIN( 626)			this->_addToKeys(_hx_tmp3, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,104,null(),null()));
HXLINE( 627)			::Array< ::Dynamic> _hx_tmp4 = this->keysClick;
HXDLIN( 627)			this->_addToKeys(_hx_tmp4, ::flixel::addons::ui::FlxMultiKey_obj::__alloc( HX_CTX ,13,null(),null()));
            		}
HXLINE( 631)		if (::hx::IsNull( this->get_gamepad() )) {
HXLINE( 633)			this->_gamepad = this->getGamepad(null());
            		}
HXLINE( 636)		if (((code & 65536) == 65536)) {
HXLINE( 638)			::Array< ::Dynamic> _hx_tmp = this->keysLeft;
HXDLIN( 638)			this->_addToKeys(_hx_tmp, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),13,null(),null()));
HXLINE( 639)			::Array< ::Dynamic> _hx_tmp1 = this->keysRight;
HXDLIN( 639)			this->_addToKeys(_hx_tmp1, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),14,null(),null()));
HXLINE( 640)			::Array< ::Dynamic> _hx_tmp2 = this->keysDown;
HXDLIN( 640)			this->_addToKeys(_hx_tmp2, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),12,null(),null()));
HXLINE( 641)			::Array< ::Dynamic> _hx_tmp3 = this->keysUp;
HXDLIN( 641)			this->_addToKeys(_hx_tmp3, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),11,null(),null()));
HXLINE( 642)			::Array< ::Dynamic> _hx_tmp4 = this->keysClick;
HXDLIN( 642)			this->_addToKeys(_hx_tmp4, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),0,null(),null()));
            		}
HXLINE( 644)		if (((code & 268435456) == 268435456)) {
HXLINE( 646)			::Array< ::Dynamic> _hx_tmp = this->keysLeft;
HXDLIN( 646)			this->_addToKeys(_hx_tmp, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),4,null(),null()));
HXLINE( 647)			::Array< ::Dynamic> _hx_tmp1 = this->keysRight;
HXDLIN( 647)			this->_addToKeys(_hx_tmp1, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),5,null(),null()));
HXLINE( 648)			::Array< ::Dynamic> _hx_tmp2 = this->keysClick;
HXDLIN( 648)			this->_addToKeys(_hx_tmp2, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),0,null(),null()));
            		}
HXLINE( 650)		if (((code & 1048576) == 1048576)) {
HXLINE( 652)			::Array< ::Dynamic> _hx_tmp = this->keysLeft;
HXDLIN( 652)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp1 = this->get_gamepad();
HXDLIN( 652)			this->_addToKeys(_hx_tmp, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp1, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),false)
            				->setFixed(1,HX_("id",db,5b,00,00),19)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::X_dyn())),null(),null()));
HXLINE( 653)			::Array< ::Dynamic> _hx_tmp2 = this->keysRight;
HXDLIN( 653)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp3 = this->get_gamepad();
HXDLIN( 653)			this->_addToKeys(_hx_tmp2, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp3, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),true)
            				->setFixed(1,HX_("id",db,5b,00,00),19)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::X_dyn())),null(),null()));
HXLINE( 654)			::Array< ::Dynamic> _hx_tmp4 = this->keysUp;
HXDLIN( 654)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp5 = this->get_gamepad();
HXDLIN( 654)			this->_addToKeys(_hx_tmp4, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp5, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),false)
            				->setFixed(1,HX_("id",db,5b,00,00),19)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::Y_dyn())),null(),null()));
HXLINE( 655)			::Array< ::Dynamic> _hx_tmp6 = this->keysDown;
HXDLIN( 655)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp7 = this->get_gamepad();
HXDLIN( 655)			this->_addToKeys(_hx_tmp6, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp7, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),true)
            				->setFixed(1,HX_("id",db,5b,00,00),19)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::Y_dyn())),null(),null()));
HXLINE( 656)			::Array< ::Dynamic> _hx_tmp8 = this->keysClick;
HXDLIN( 656)			this->_addToKeys(_hx_tmp8, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),0,null(),null()));
            		}
HXLINE( 658)		if (((code & 16777216) == 16777216)) {
HXLINE( 660)			::Array< ::Dynamic> _hx_tmp = this->keysLeft;
HXDLIN( 660)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp1 = this->get_gamepad();
HXDLIN( 660)			this->_addToKeys(_hx_tmp, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp1, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),false)
            				->setFixed(1,HX_("id",db,5b,00,00),20)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::X_dyn())),null(),null()));
HXLINE( 661)			::Array< ::Dynamic> _hx_tmp2 = this->keysRight;
HXDLIN( 661)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp3 = this->get_gamepad();
HXDLIN( 661)			this->_addToKeys(_hx_tmp2, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp3, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),true)
            				->setFixed(1,HX_("id",db,5b,00,00),20)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::X_dyn())),null(),null()));
HXLINE( 662)			::Array< ::Dynamic> _hx_tmp4 = this->keysUp;
HXDLIN( 662)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp5 = this->get_gamepad();
HXDLIN( 662)			this->_addToKeys(_hx_tmp4, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp5, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),false)
            				->setFixed(1,HX_("id",db,5b,00,00),20)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::Y_dyn())),null(),null()));
HXLINE( 663)			::Array< ::Dynamic> _hx_tmp6 = this->keysDown;
HXDLIN( 663)			 ::flixel::input::gamepad::FlxGamepad _hx_tmp7 = this->get_gamepad();
HXDLIN( 663)			this->_addToKeys(_hx_tmp6, ::flixel::addons::ui::FlxMultiGamepadAnalogStick_obj::__alloc( HX_CTX ,_hx_tmp7, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("positive",b9,a6,fa,ca),true)
            				->setFixed(1,HX_("id",db,5b,00,00),20)
            				->setFixed(2,HX_("axis",a1,1c,79,40),::flixel::addons::ui::XY_obj::Y_dyn())),null(),null()));
HXLINE( 664)			::Array< ::Dynamic> _hx_tmp8 = this->keysClick;
HXDLIN( 664)			this->_addToKeys(_hx_tmp8, ::flixel::addons::ui::FlxMultiGamepad_obj::__alloc( HX_CTX ,this->get_gamepad(),0,null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,setDefaultKeys,(void))

 ::flixel::input::gamepad::FlxGamepad FlxUICursor_obj::getGamepad(::hx::Null< bool >  __o_exhaustive){
            		bool exhaustive = __o_exhaustive.Default(true);
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_691_getGamepad)
HXLINE( 692)		 ::flixel::input::gamepad::FlxGamepad gamepad;
HXDLIN( 692)		 ::flixel::addons::ui::GamepadAutoConnectPreference _g = this->gamepadAutoConnect;
HXDLIN( 692)		switch((int)(_g->_hx_getIndex())){
            			case (int)0: {
HXLINE( 692)				gamepad = null();
            			}
            			break;
            			case (int)1: {
HXLINE( 692)				gamepad = ::flixel::FlxG_obj::gamepads->getFirstActiveGamepad();
            			}
            			break;
            			case (int)2: {
HXLINE( 692)				gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
            			}
            			break;
            			case (int)3: {
HXLINE( 697)				int i = _g->_hx_getInt(0);
HXLINE( 692)				gamepad = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(i).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
            			}
            			break;
            		}
HXLINE( 699)		bool _hx_tmp;
HXDLIN( 699)		if (::hx::IsNull( gamepad )) {
HXLINE( 699)			_hx_tmp = exhaustive;
            		}
            		else {
HXLINE( 699)			_hx_tmp = false;
            		}
HXDLIN( 699)		if (_hx_tmp) {
HXLINE( 701)			int _g = 0;
HXDLIN( 701)			int _g1 = ::flixel::FlxG_obj::gamepads->get_numActiveGamepads();
HXDLIN( 701)			while((_g < _g1)){
HXLINE( 701)				_g = (_g + 1);
HXDLIN( 701)				int i = (_g - 1);
HXLINE( 703)				gamepad = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(i).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 704)				if (::hx::IsNotNull( gamepad )) {
HXLINE( 706)					return gamepad;
            				}
            			}
            		}
HXLINE( 710)		return gamepad;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,getGamepad,return )

int FlxUICursor_obj::_sortXYWidgetList( ::Dynamic a, ::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_728__sortXYWidgetList)
HXLINE( 729)		if (::hx::IsLess( a->__Field(HX_("y",79,00,00,00),::hx::paccDynamic),b->__Field(HX_("y",79,00,00,00),::hx::paccDynamic) )) {
HXLINE( 730)			return -1;
            		}
HXLINE( 731)		if (::hx::IsGreater( a->__Field(HX_("y",79,00,00,00),::hx::paccDynamic),b->__Field(HX_("y",79,00,00,00),::hx::paccDynamic) )) {
HXLINE( 732)			return 1;
            		}
HXLINE( 733)		if (::hx::IsLess( a->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),b->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) )) {
HXLINE( 734)			return -1;
            		}
HXLINE( 735)		if (::hx::IsGreater( a->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),b->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) )) {
HXLINE( 736)			return 1;
            		}
HXLINE( 737)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,_sortXYWidgetList,return )

int FlxUICursor_obj::_sortXYVisible(::Dynamic a,::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_741__sortXYVisible)
HXLINE( 742)		bool _hx_tmp;
HXDLIN( 742)		if (( (bool)(a->__Field(HX_("visible",72,78,24,a3),::hx::paccDynamic)) )) {
HXLINE( 742)			_hx_tmp = !(( (bool)(b->__Field(HX_("visible",72,78,24,a3),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 742)			_hx_tmp = false;
            		}
HXDLIN( 742)		if (_hx_tmp) {
HXLINE( 743)			return -1;
            		}
HXLINE( 744)		bool _hx_tmp1;
HXDLIN( 744)		if (( (bool)(b->__Field(HX_("visible",72,78,24,a3),::hx::paccDynamic)) )) {
HXLINE( 744)			_hx_tmp1 = !(( (bool)(a->__Field(HX_("visible",72,78,24,a3),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 744)			_hx_tmp1 = false;
            		}
HXDLIN( 744)		if (_hx_tmp1) {
HXLINE( 745)			return 1;
            		}
HXLINE( 746)		if (::hx::IsLess( a->__Field(HX_("y",79,00,00,00),::hx::paccDynamic),b->__Field(HX_("y",79,00,00,00),::hx::paccDynamic) )) {
HXLINE( 747)			return -1;
            		}
HXLINE( 748)		if (::hx::IsGreater( a->__Field(HX_("y",79,00,00,00),::hx::paccDynamic),b->__Field(HX_("y",79,00,00,00),::hx::paccDynamic) )) {
HXLINE( 749)			return 1;
            		}
HXLINE( 750)		if (::hx::IsLess( a->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),b->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) )) {
HXLINE( 751)			return -1;
            		}
HXLINE( 752)		if (::hx::IsGreater( a->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),b->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) )) {
HXLINE( 753)			return 1;
            		}
HXLINE( 754)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,_sortXYVisible,return )

void FlxUICursor_obj::_addToKeys(::Array< ::Dynamic> keys, ::flixel::addons::ui::FlxBaseMultiInput m){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_758__addToKeys)
HXLINE( 759)		bool exists = false;
HXLINE( 760)		{
HXLINE( 760)			int _g = 0;
HXDLIN( 760)			while((_g < keys->length)){
HXLINE( 760)				 ::flixel::addons::ui::FlxBaseMultiInput mk = keys->__get(_g).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 760)				_g = (_g + 1);
HXLINE( 762)				if (m->equals(mk)) {
HXLINE( 764)					exists = true;
HXLINE( 765)					goto _hx_goto_34;
            				}
            			}
            			_hx_goto_34:;
            		}
HXLINE( 768)		if (!(exists)) {
HXLINE( 770)			keys->push(m);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,_addToKeys,(void))

void FlxUICursor_obj::_clearKeys(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_775__clearKeys)
HXLINE( 776)		::flixel::addons::ui::U_obj::clearArray(this->keysUp);
HXLINE( 777)		this->keysUp = null();
HXLINE( 778)		::flixel::addons::ui::U_obj::clearArray(this->keysDown);
HXLINE( 779)		this->keysDown = null();
HXLINE( 780)		::flixel::addons::ui::U_obj::clearArray(this->keysLeft);
HXLINE( 781)		this->keysLeft = null();
HXLINE( 782)		::flixel::addons::ui::U_obj::clearArray(this->keysRight);
HXLINE( 783)		this->keysRight = null();
HXLINE( 784)		::flixel::addons::ui::U_obj::clearArray(this->keysClick);
HXLINE( 785)		this->keysClick = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_clearKeys,(void))

void FlxUICursor_obj::_newKeys(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_789__newKeys)
HXLINE( 790)		this->keysUp = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 791)		this->keysDown = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 792)		this->keysLeft = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 793)		this->keysRight = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 794)		this->keysClick = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_newKeys,(void))

void FlxUICursor_obj::_checkKeys(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_798__checkKeys)
HXLINE( 799)		bool wasInvisible = (this->visible == false);
HXLINE( 800)		int lastLocation = this->location;
HXLINE( 802)		{
HXLINE( 802)			int _g = 0;
HXDLIN( 802)			::Array< ::Dynamic> _g1 = this->keysUp;
HXDLIN( 802)			while((_g < _g1->length)){
HXLINE( 802)				 ::flixel::addons::ui::FlxBaseMultiInput key = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 802)				_g = (_g + 1);
HXLINE( 804)				if (key->justPressed()) {
HXLINE( 806)					this->_doInput(0,-1,null());
HXLINE( 807)					goto _hx_goto_38;
            				}
            			}
            			_hx_goto_38:;
            		}
HXLINE( 810)		{
HXLINE( 810)			int _g2 = 0;
HXDLIN( 810)			::Array< ::Dynamic> _g3 = this->keysDown;
HXDLIN( 810)			while((_g2 < _g3->length)){
HXLINE( 810)				 ::flixel::addons::ui::FlxBaseMultiInput key = _g3->__get(_g2).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 810)				_g2 = (_g2 + 1);
HXLINE( 812)				if (key->justPressed()) {
HXLINE( 814)					this->_doInput(0,1,null());
HXLINE( 815)					goto _hx_goto_39;
            				}
            			}
            			_hx_goto_39:;
            		}
HXLINE( 818)		{
HXLINE( 818)			int _g4 = 0;
HXDLIN( 818)			::Array< ::Dynamic> _g5 = this->keysLeft;
HXDLIN( 818)			while((_g4 < _g5->length)){
HXLINE( 818)				 ::flixel::addons::ui::FlxBaseMultiInput key = _g5->__get(_g4).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 818)				_g4 = (_g4 + 1);
HXLINE( 820)				if (key->justPressed()) {
HXLINE( 822)					this->_doInput(-1,0,null());
HXLINE( 823)					goto _hx_goto_40;
            				}
            			}
            			_hx_goto_40:;
            		}
HXLINE( 826)		{
HXLINE( 826)			int _g6 = 0;
HXDLIN( 826)			::Array< ::Dynamic> _g7 = this->keysRight;
HXDLIN( 826)			while((_g6 < _g7->length)){
HXLINE( 826)				 ::flixel::addons::ui::FlxBaseMultiInput key = _g7->__get(_g6).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 826)				_g6 = (_g6 + 1);
HXLINE( 828)				if (key->justPressed()) {
HXLINE( 830)					this->_doInput(1,0,null());
HXLINE( 831)					goto _hx_goto_41;
            				}
            			}
            			_hx_goto_41:;
            		}
HXLINE( 835)		bool _hx_tmp;
HXDLIN( 835)		bool _hx_tmp1;
HXDLIN( 835)		if (wasInvisible) {
HXLINE( 835)			_hx_tmp1 = this->visible;
            		}
            		else {
HXLINE( 835)			_hx_tmp1 = false;
            		}
HXDLIN( 835)		if (_hx_tmp1) {
HXLINE( 835)			_hx_tmp = (lastLocation != -1);
            		}
            		else {
HXLINE( 835)			_hx_tmp = false;
            		}
HXDLIN( 835)		if (_hx_tmp) {
HXLINE( 837)			this->set_location(lastLocation);
            		}
HXLINE( 840)		if (this->_clickKeysJustPressed()) {
HXLINE( 842)			if (!(this->ignoreNextInput)) {
HXLINE( 844)				this->_clickPressed = true;
HXLINE( 845)				this->_clickTime = ( (Float)(0) );
HXLINE( 846)				this->_doPress(null());
            			}
            			else {
HXLINE( 850)				this->ignoreNextInput = false;
            			}
            		}
HXLINE( 854)		if (this->_clickKeysPressed()) {
HXLINE( 856)			this->_clickPressed = true;
HXLINE( 857)			this->_doMouseMove(null());
            		}
            		else {
HXLINE( 859)			if ((this->_clickTime > 0)) {
HXLINE( 861)				if (this->_clickPressed) {
HXLINE( 863)					this->_doRelease(null());
HXLINE( 864)					this->_clickPressed = false;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_checkKeys,(void))

bool FlxUICursor_obj::_clickKeysJustPressed(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_870__clickKeysJustPressed)
HXLINE( 871)		{
HXLINE( 871)			int _g = 0;
HXDLIN( 871)			::Array< ::Dynamic> _g1 = this->keysClick;
HXDLIN( 871)			while((_g < _g1->length)){
HXLINE( 871)				 ::flixel::addons::ui::FlxBaseMultiInput key = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 871)				_g = (_g + 1);
HXLINE( 873)				if (key->justPressed()) {
HXLINE( 875)					return true;
            				}
            			}
            		}
HXLINE( 878)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_clickKeysJustPressed,return )

bool FlxUICursor_obj::_clickKeysPressed(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_882__clickKeysPressed)
HXLINE( 883)		{
HXLINE( 883)			int _g = 0;
HXDLIN( 883)			::Array< ::Dynamic> _g1 = this->keysClick;
HXDLIN( 883)			while((_g < _g1->length)){
HXLINE( 883)				 ::flixel::addons::ui::FlxBaseMultiInput key = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxBaseMultiInput >();
HXDLIN( 883)				_g = (_g + 1);
HXLINE( 885)				if (key->pressed()) {
HXLINE( 887)					return true;
            				}
            			}
            		}
HXLINE( 890)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_clickKeysPressed,return )

 ::flixel::math::FlxPoint FlxUICursor_obj::_getWidgetPoint( ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_894__getWidgetPoint)
HXLINE( 895)		if (::hx::IsNull( Camera )) {
HXLINE( 896)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 899)		::Dynamic currWidget = this->_widgets->__get(this->location);
HXLINE( 900)		if (::hx::IsNull( currWidget )) {
HXLINE( 902)			return null();
            		}
HXLINE( 905)		 ::flixel::FlxObject fo;
HXLINE( 906)		 ::flixel::math::FlxPoint widgetPoint = null();
HXLINE( 909)		if (::Std_obj::isOfType(currWidget,::hx::ClassOf< ::flixel::FlxObject >())) {
HXLINE( 911)			fo = ( ( ::flixel::FlxObject)(currWidget) );
HXLINE( 913)			widgetPoint = fo->getScreenPosition(null(),null());
            		}
HXLINE( 916)		{
HXLINE( 916)			 ::flixel::math::FlxPoint _g = widgetPoint;
HXDLIN( 916)			_g->set_x((_g->x * Camera->totalScaleX));
            		}
HXLINE( 917)		{
HXLINE( 917)			 ::flixel::math::FlxPoint _g1 = widgetPoint;
HXDLIN( 917)			_g1->set_y((_g1->y * Camera->totalScaleY));
            		}
HXLINE( 919)		if (::hx::IsNull( widgetPoint )) {
HXLINE( 922)			Float X = ( (Float)(currWidget->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 922)			Float Y = ( (Float)(currWidget->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 922)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 922)			point->_inPool = false;
HXDLIN( 922)			widgetPoint = point;
            		}
HXLINE( 926)		{
HXLINE( 926)			 ::flixel::math::FlxPoint _g2 = widgetPoint;
HXDLIN( 926)			Float _g3 = _g2->x;
HXDLIN( 926)			_g2->set_x((_g3 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(currWidget) / ( (Float)(2) ))));
            		}
HXLINE( 927)		{
HXLINE( 927)			 ::flixel::math::FlxPoint _g4 = widgetPoint;
HXDLIN( 927)			Float _g5 = _g4->y;
HXDLIN( 927)			_g4->set_y((_g5 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(currWidget) / ( (Float)(2) ))));
            		}
HXLINE( 929)		return widgetPoint;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,_getWidgetPoint,return )

void FlxUICursor_obj::_doMouseMove( ::flixel::math::FlxPoint pt){
            	HX_GC_STACKFRAME(&_hx_pos_7e07195111da0df5_933__doMouseMove)
HXLINE( 934)		bool dispose = false;
HXLINE( 935)		if (::hx::IsNull( pt )) {
HXLINE( 937)			pt = this->_getWidgetPoint(null());
HXLINE( 938)			if (::hx::IsNull( pt )) {
HXLINE( 940)				return;
            			}
HXLINE( 942)			dispose = true;
            		}
HXLINE( 944)		if (this->dispatchEvents) {
HXLINE( 948)			{
HXLINE( 948)				 ::flixel::input::mouse::FlxMouse _this = ::flixel::FlxG_obj::mouse;
HXDLIN( 948)				Float newY = pt->y;
HXDLIN( 948)				_this->_globalScreenX = ::Std_obj::_hx_int((pt->x / ::flixel::FlxG_obj::scaleMode->scale->x));
HXDLIN( 948)				_this->_globalScreenY = ::Std_obj::_hx_int((newY / ::flixel::FlxG_obj::scaleMode->scale->y));
HXDLIN( 948)				_this->updatePositions();
            			}
HXLINE( 950)			if (::hx::IsNotNull( this->_newMouse )) {
HXLINE( 952)				this->_newMouse->updateGlobalScreenPosition = false;
            			}
HXLINE( 956)			 ::openfl::display::Stage _hx_tmp = ::openfl::Lib_obj::get_current()->stage;
HXDLIN( 956)			Float pt1 = pt->x;
HXDLIN( 956)			Float pt2 = pt->y;
HXDLIN( 956)			 ::openfl::display::Stage _hx_tmp1 = ::openfl::Lib_obj::get_current()->stage;
HXDLIN( 956)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 956)			bool _hx_tmp2 = _this1->keyManager->checkStatusUnsafe(17,_this1->status);
HXLINE( 957)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 957)			bool _hx_tmp3 = _this2->keyManager->checkStatusUnsafe(18,_this2->status);
HXDLIN( 957)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXLINE( 956)			_hx_tmp->dispatchEvent( ::openfl::events::MouseEvent_obj::__alloc( HX_CTX ,HX_("mouseMove",d6,9b,b5,f4),true,false,pt1,pt2,_hx_tmp1,_hx_tmp2,_hx_tmp3,_this3->keyManager->checkStatusUnsafe(16,_this3->status),null(),null(),null(),null()));
            		}
HXLINE( 961)		if (dispose) {
HXLINE( 963)			pt->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,_doMouseMove,(void))

void FlxUICursor_obj::_doPress( ::flixel::math::FlxPoint pt){
            	HX_GC_STACKFRAME(&_hx_pos_7e07195111da0df5_968__doPress)
HXLINE( 969)		::Dynamic currWidget = this->_widgets->__get(this->location);
HXLINE( 970)		if (::hx::IsNull( currWidget )) {
HXLINE( 972)			return;
            		}
HXLINE( 975)		bool dispose = false;
HXLINE( 976)		if (::hx::IsNull( pt )) {
HXLINE( 978)			pt = this->_getWidgetPoint(null());
HXLINE( 979)			if (::hx::IsNull( pt )) {
HXLINE( 981)				return;
            			}
HXLINE( 983)			dispose = true;
            		}
HXLINE( 987)		if (this->dispatchEvents) {
HXLINE( 989)			Float rawMouseX = (pt->x * ::flixel::FlxG_obj::camera->zoom);
HXLINE( 990)			Float rawMouseY = (pt->y * ::flixel::FlxG_obj::camera->zoom);
HXLINE( 992)			 ::openfl::display::Stage _hx_tmp = ::openfl::Lib_obj::get_current()->stage;
HXDLIN( 992)			 ::openfl::display::Stage _hx_tmp1 = ::openfl::Lib_obj::get_current()->stage;
HXDLIN( 992)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 992)			bool _hx_tmp2 = _this->keyManager->checkStatusUnsafe(17,_this->status);
HXLINE( 993)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 993)			bool _hx_tmp3 = _this1->keyManager->checkStatusUnsafe(18,_this1->status);
HXDLIN( 993)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXLINE( 992)			_hx_tmp->dispatchEvent( ::openfl::events::MouseEvent_obj::__alloc( HX_CTX ,HX_("mouseDown",27,b1,c2,ee),true,false,rawMouseX,rawMouseY,_hx_tmp1,_hx_tmp2,_hx_tmp3,_this2->keyManager->checkStatusUnsafe(16,_this2->status),null(),null(),null(),null()));
            		}
HXLINE(1000)		if (::hx::IsNotNull( this->callback )) {
HXLINE(1003)			this->callback(HX_("cursor_down",ab,fd,32,eb),currWidget);
            		}
HXLINE(1005)		if (dispose) {
HXLINE(1007)			pt->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,_doPress,(void))

void FlxUICursor_obj::_doRelease( ::flixel::math::FlxPoint pt){
            	HX_GC_STACKFRAME(&_hx_pos_7e07195111da0df5_1012__doRelease)
HXLINE(1013)		::Dynamic currWidget = this->_widgets->__get(this->location);
HXLINE(1014)		if (::hx::IsNull( currWidget )) {
HXLINE(1016)			return;
            		}
HXLINE(1019)		bool dispose = false;
HXLINE(1020)		if (::hx::IsNull( pt )) {
HXLINE(1022)			pt = this->_getWidgetPoint(null());
HXLINE(1023)			if (::hx::IsNull( pt )) {
HXLINE(1025)				return;
            			}
HXLINE(1027)			dispose = true;
            		}
HXLINE(1031)		Float rawMouseX = (pt->x * ::flixel::FlxG_obj::camera->zoom);
HXLINE(1032)		Float rawMouseY = (pt->y * ::flixel::FlxG_obj::camera->zoom);
HXLINE(1034)		if (this->dispatchEvents) {
HXLINE(1038)			 ::openfl::display::Stage _hx_tmp = ::openfl::Lib_obj::get_current()->stage;
HXDLIN(1038)			 ::openfl::display::Stage _hx_tmp1 = ::openfl::Lib_obj::get_current()->stage;
HXDLIN(1038)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1038)			bool _hx_tmp2 = _this->keyManager->checkStatusUnsafe(17,_this->status);
HXLINE(1039)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1039)			bool _hx_tmp3 = _this1->keyManager->checkStatusUnsafe(18,_this1->status);
HXDLIN(1039)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXLINE(1038)			_hx_tmp->dispatchEvent( ::openfl::events::MouseEvent_obj::__alloc( HX_CTX ,HX_("mouseUp",e0,f3,72,c0),true,false,rawMouseX,rawMouseY,_hx_tmp1,_hx_tmp2,_hx_tmp3,_this2->keyManager->checkStatusUnsafe(16,_this2->status),null(),null(),null(),null()));
HXLINE(1040)			if (this->_clickPressed) {
HXLINE(1041)				 ::openfl::display::Stage _hx_tmp = ::openfl::Lib_obj::get_current()->stage;
HXDLIN(1041)				 ::openfl::display::Stage _hx_tmp1 = ::openfl::Lib_obj::get_current()->stage;
HXDLIN(1041)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1041)				bool _hx_tmp2 = _this->keyManager->checkStatusUnsafe(17,_this->status);
HXLINE(1042)				 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1042)				bool _hx_tmp3 = _this1->keyManager->checkStatusUnsafe(18,_this1->status);
HXDLIN(1042)				 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXLINE(1041)				_hx_tmp->dispatchEvent( ::openfl::events::MouseEvent_obj::__alloc( HX_CTX ,HX_("click",48,7c,5e,48),true,false,rawMouseX,rawMouseY,_hx_tmp1,_hx_tmp2,_hx_tmp3,_this2->keyManager->checkStatusUnsafe(16,_this2->status),null(),null(),null(),null()));
            			}
            		}
HXLINE(1051)		if (::hx::IsNotNull( this->callback )) {
HXLINE(1054)			this->callback(HX_("cursor_click",df,16,fe,4b),currWidget);
            		}
HXLINE(1056)		if (dispose) {
HXLINE(1058)			pt->put();
            		}
HXLINE(1062)		if (::hx::IsNotNull( this->_newMouse )) {
HXLINE(1064)			this->_newMouse->updateGlobalScreenPosition = true;
HXLINE(1065)			{
HXLINE(1065)				 ::flixel::addons::ui::FlxUIMouse _this = this->_newMouse;
HXDLIN(1065)				Float newX = ( (Float)(::Std_obj::_hx_int(::flixel::FlxG_obj::game->get_mouseX())) );
HXDLIN(1065)				Float newY = ( (Float)(::Std_obj::_hx_int(::flixel::FlxG_obj::game->get_mouseY())) );
HXDLIN(1065)				_this->_globalScreenX = ::Std_obj::_hx_int((newX / ::flixel::FlxG_obj::scaleMode->scale->x));
HXDLIN(1065)				_this->_globalScreenY = ::Std_obj::_hx_int((newY / ::flixel::FlxG_obj::scaleMode->scale->y));
HXDLIN(1065)				_this->updatePositions();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUICursor_obj,_doRelease,(void))

int FlxUICursor_obj::_findNextY(int Y,int indexValue,::Array< ::Dynamic> listWidget,::Array< ::Dynamic> listLists){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1071__findNextY)
HXLINE(1072)		int currX = 0;
HXLINE(1073)		int currY = 0;
HXLINE(1074)		int length = 0;
HXLINE(1076)		if (::hx::IsNotNull( listWidget )) {
HXLINE(1078)			currX = ::Std_obj::_hx_int(( (Float)(listWidget->__get(indexValue)->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) ));
HXLINE(1079)			currY = ::Std_obj::_hx_int(( (Float)(listWidget->__get(indexValue)->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ));
HXLINE(1080)			length = listWidget->length;
            		}
            		else {
HXLINE(1082)			if (::hx::IsNotNull( listLists )) {
HXLINE(1084)				currX = ( (int)(listLists->__get(indexValue)->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXLINE(1085)				currY = ( (int)(listLists->__get(indexValue)->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXLINE(1086)				length = listLists->length;
            			}
            		}
HXLINE(1089)		int nextX = 0;
HXLINE(1090)		int nextY = 0;
HXLINE(1092)		Float dx = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1093)		Float dy = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1095)		Float bestdx = dx;
HXLINE(1096)		Float bestdy = dy;
HXLINE(1098)		int besti = -1;
HXLINE(1103)		{
HXLINE(1103)			int _g = 0;
HXDLIN(1103)			int _g1 = length;
HXDLIN(1103)			while((_g < _g1)){
HXLINE(1103)				_g = (_g + 1);
HXDLIN(1103)				int i = (_g - 1);
HXLINE(1105)				if ((i != indexValue)) {
HXLINE(1107)					if (::hx::IsNotNull( listWidget )) {
HXLINE(1109)						nextX = ::Std_obj::_hx_int(( (Float)(listWidget->__get(i)->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) ));
HXLINE(1110)						nextY = ::Std_obj::_hx_int(( (Float)(listWidget->__get(i)->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ));
            					}
            					else {
HXLINE(1112)						if (::hx::IsNotNull( listLists )) {
HXLINE(1114)							nextX = ( (int)(listLists->__get(i)->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXLINE(1115)							nextY = ( (int)(listLists->__get(i)->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
            						}
            					}
HXLINE(1118)					dy = ( (Float)((nextY - currY)) );
HXLINE(1119)					bool _hx_tmp;
HXDLIN(1119)					int _hx_tmp1;
HXDLIN(1119)					if ((dy < 0)) {
HXLINE(1119)						_hx_tmp1 = -1;
            					}
            					else {
HXLINE(1119)						_hx_tmp1 = 1;
            					}
HXDLIN(1119)					int _hx_tmp2;
HXDLIN(1119)					if ((Y < 0)) {
HXLINE(1119)						_hx_tmp2 = -1;
            					}
            					else {
HXLINE(1119)						_hx_tmp2 = 1;
            					}
HXDLIN(1119)					if ((_hx_tmp1 == _hx_tmp2)) {
HXLINE(1119)						_hx_tmp = (dy != 0);
            					}
            					else {
HXLINE(1119)						_hx_tmp = false;
            					}
HXDLIN(1119)					if (_hx_tmp) {
HXLINE(1121)						dy = ::Math_obj::abs(dy);
HXLINE(1122)						if ((dy < bestdy)) {
HXLINE(1124)							bestdy = dy;
HXLINE(1125)							bestdx = ::Math_obj::abs(( (Float)((currX - nextX)) ));
HXLINE(1126)							besti = i;
            						}
            						else {
HXLINE(1128)							if ((dy == bestdy)) {
HXLINE(1130)								dx = ::Math_obj::abs(( (Float)((currX - nextX)) ));
HXLINE(1131)								if ((dx < bestdx)) {
HXLINE(1133)									bestdx = dx;
HXLINE(1134)									besti = i;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1140)		return besti;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUICursor_obj,_findNextY,return )

int FlxUICursor_obj::_wrapX(int X,int indexValue,int listLength){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1144__wrapX)
HXLINE(1145)		if (((indexValue + X) < 0)) {
HXLINE(1147)			indexValue = ((indexValue + X) + listLength);
            		}
            		else {
HXLINE(1149)			if (((indexValue + X) >= listLength)) {
HXLINE(1151)				indexValue = ((indexValue + X) - listLength);
            			}
            		}
HXLINE(1153)		return indexValue;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUICursor_obj,_wrapX,return )

int FlxUICursor_obj::_wrapY(int Y,int indexValue,::Array< ::Dynamic> listWidget,::Array< ::Dynamic> listLists){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1157__wrapY)
HXLINE(1158)		Float dx = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1159)		Float dy = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1161)		Float bestdx = dx;
HXLINE(1162)		Float bestdy = dy;
HXLINE(1164)		int besti = -1;
HXLINE(1166)		bestdx = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1167)		bestdy = ( (Float)(0) );
HXLINE(1169)		int length = 0;
HXLINE(1170)		int currX = 0;
HXLINE(1171)		int currY = 0;
HXLINE(1173)		if (::hx::IsNotNull( listWidget )) {
HXLINE(1175)			length = listWidget->length;
HXLINE(1176)			currX = ::Std_obj::_hx_int(( (Float)(listWidget->__get(indexValue)->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) ));
HXLINE(1177)			currY = ::Std_obj::_hx_int(( (Float)(listWidget->__get(indexValue)->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ));
            		}
HXLINE(1179)		if (::hx::IsNotNull( listLists )) {
HXLINE(1181)			length = listLists->length;
HXLINE(1182)			currX = ( (int)(listLists->__get(indexValue)->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXLINE(1183)			currY = ( (int)(listLists->__get(indexValue)->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
            		}
HXLINE(1186)		{
HXLINE(1186)			int _g = 0;
HXDLIN(1186)			int _g1 = length;
HXDLIN(1186)			while((_g < _g1)){
HXLINE(1186)				_g = (_g + 1);
HXDLIN(1186)				int i = (_g - 1);
HXLINE(1188)				if ((i != this->location)) {
HXLINE(1190)					int xx = 0;
HXLINE(1191)					int yy = 0;
HXLINE(1192)					if (::hx::IsNotNull( listWidget )) {
HXLINE(1194)						xx = ::Std_obj::_hx_int(( (Float)(listWidget->__get(i)->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) ));
HXLINE(1195)						yy = ::Std_obj::_hx_int(( (Float)(listWidget->__get(i)->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ));
            					}
            					else {
HXLINE(1197)						if (::hx::IsNotNull( listLists )) {
HXLINE(1199)							xx = ::Std_obj::_hx_int(( (Float)(listLists->__get(i)->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) ));
HXLINE(1200)							yy = ::Std_obj::_hx_int(( (Float)(listLists->__get(i)->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ));
            						}
            					}
HXLINE(1203)					dy = ( (Float)((yy - currY)) );
HXLINE(1205)					bool _hx_tmp;
HXDLIN(1205)					int _hx_tmp1;
HXDLIN(1205)					if ((dy < 0)) {
HXLINE(1205)						_hx_tmp1 = -1;
            					}
            					else {
HXLINE(1205)						_hx_tmp1 = 1;
            					}
HXDLIN(1205)					int _hx_tmp2;
HXDLIN(1205)					if ((Y < 0)) {
HXLINE(1205)						_hx_tmp2 = -1;
            					}
            					else {
HXLINE(1205)						_hx_tmp2 = 1;
            					}
HXDLIN(1205)					if (((_hx_tmp1 == _hx_tmp2) == false)) {
HXLINE(1205)						_hx_tmp = (dy != 0);
            					}
            					else {
HXLINE(1205)						_hx_tmp = false;
            					}
HXDLIN(1205)					if (_hx_tmp) {
HXLINE(1207)						dy = ::Math_obj::abs(dy);
HXLINE(1208)						if ((dy > bestdy)) {
HXLINE(1210)							bestdy = dy;
HXLINE(1211)							bestdx = ::Math_obj::abs(( (Float)((currX - xx)) ));
HXLINE(1212)							besti = i;
            						}
            						else {
HXLINE(1214)							if ((dy == bestdy)) {
HXLINE(1216)								dx = ::Math_obj::abs(( (Float)((currX - xx)) ));
HXLINE(1217)								if ((dx < bestdx)) {
HXLINE(1219)									bestdx = dx;
HXLINE(1220)									besti = i;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1226)		if ((besti != -1)) {
HXLINE(1228)			indexValue = besti;
            		}
HXLINE(1230)		return indexValue;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUICursor_obj,_wrapY,return )

void FlxUICursor_obj::_doInput(int X,int Y,::hx::Null< int >  __o_recursion){
            		int recursion = __o_recursion.Default(0);
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1234__doInput)
HXLINE(1235)		if (this->ignoreNextInput) {
HXLINE(1237)			this->ignoreNextInput = false;
HXLINE(1238)			return;
            		}
HXLINE(1240)		::Dynamic currWidget = null();
HXLINE(1242)		if ((Y == 0)) {
HXLINE(1246)			bool _hx_tmp;
HXDLIN(1246)			if (((this->location + X) >= 0)) {
HXLINE(1246)				_hx_tmp = ((this->location + X) < this->_widgets->length);
            			}
            			else {
HXLINE(1246)				_hx_tmp = false;
            			}
HXDLIN(1246)			if (_hx_tmp) {
HXLINE(1248)				this->set_location((this->location + X));
            			}
            			else {
HXLINE(1252)				if (this->wrap) {
HXLINE(1254)					if ((this->_lists->length == 1)) {
HXLINE(1256)						this->set_location(this->_wrapX(X,this->location,this->_widgets->length));
            					}
            					else {
HXLINE(1260)						bool _hx_tmp;
HXDLIN(1260)						if (((this->listIndex + X) >= 0)) {
HXLINE(1260)							_hx_tmp = ((this->listIndex + X) < this->_lists->length);
            						}
            						else {
HXLINE(1260)							_hx_tmp = false;
            						}
HXDLIN(1260)						if (_hx_tmp) {
HXLINE(1262)							this->set_listIndex((this->listIndex + X));
            						}
            						else {
HXLINE(1266)							this->set_listIndex(this->_wrapX(X,this->listIndex,this->_lists->length));
            						}
HXLINE(1268)						if ((X == -1)) {
HXLINE(1270)							this->set_location((this->_widgets->length - 1));
            						}
            					}
            				}
            			}
HXLINE(1275)			currWidget = this->_widgets->__get(this->location);
            		}
            		else {
HXLINE(1280)			int nextY = this->_findNextY(Y,this->location,this->_widgets,null());
HXLINE(1282)			if ((nextY != -1)) {
HXLINE(1284)				this->set_location(nextY);
HXLINE(1285)				currWidget = this->_widgets->__get(this->location);
            			}
            			else {
HXLINE(1289)				if (this->wrap) {
HXLINE(1291)					if ((this->_lists->length == 1)) {
HXLINE(1293)						this->set_location(this->_wrapY(Y,this->location,this->_widgets,null()));
HXLINE(1294)						currWidget = this->_widgets->__get(this->location);
            					}
            					else {
HXLINE(1298)						int nextListY = this->_findNextY(Y,this->listIndex,null(),this->_lists);
HXLINE(1299)						if ((nextListY != -1)) {
HXLINE(1301)							this->set_listIndex(nextListY);
HXLINE(1302)							currWidget = this->_widgets->__get(this->location);
            						}
            						else {
HXLINE(1306)							this->set_listIndex(this->_wrapY(Y,this->listIndex,null(),this->_lists));
            						}
HXLINE(1308)						if ((Y == -1)) {
HXLINE(1310)							this->set_location((this->_widgets->length - 1));
            						}
            					}
HXLINE(1313)					currWidget = this->_widgets->__get(this->location);
            				}
            			}
            		}
HXLINE(1318)		bool _hx_tmp;
HXDLIN(1318)		if (::hx::IsNotNull( currWidget )) {
HXLINE(1318)			_hx_tmp = ::hx::IsNotNull( this->_widgets );
            		}
            		else {
HXLINE(1318)			_hx_tmp = false;
            		}
HXDLIN(1318)		if (_hx_tmp) {
HXLINE(1320)			bool _hx_tmp;
HXDLIN(1320)			if (::hx::IsEq( currWidget->__Field(HX_("visible",72,78,24,a3),::hx::paccDynamic),false )) {
HXLINE(1320)				_hx_tmp = (recursion < this->_widgets->length);
            			}
            			else {
HXLINE(1320)				_hx_tmp = false;
            			}
HXDLIN(1320)			if (_hx_tmp) {
HXLINE(1322)				this->_doInput(X,Y,(recursion + 1));
HXLINE(1323)				return;
            			}
            		}
HXLINE(1327)		if (::hx::IsNotNull( this->callback )) {
HXLINE(1330)			this->callback(HX_("cursor_jump",37,ca,2e,ef),currWidget);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUICursor_obj,_doInput,(void))

void FlxUICursor_obj::_updateCursor(){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1335__updateCursor)
HXLINE(1336)		this->_widgets = ( (::Array< ::Dynamic>)(this->_lists->__get(this->listIndex)->__Field(HX_("widgets",2f,1c,67,28),::hx::paccDynamic)) );
HXLINE(1338)		bool _hx_tmp;
HXDLIN(1338)		bool _hx_tmp1;
HXDLIN(1338)		if ((this->location >= 0)) {
HXLINE(1338)			_hx_tmp1 = ::hx::IsNull( this->_lists );
            		}
            		else {
HXLINE(1338)			_hx_tmp1 = true;
            		}
HXDLIN(1338)		if (!(_hx_tmp1)) {
HXLINE(1338)			_hx_tmp = ::hx::IsNull( this->_widgets );
            		}
            		else {
HXLINE(1338)			_hx_tmp = true;
            		}
HXDLIN(1338)		if (_hx_tmp) {
HXLINE(1340)			this->set_visible(false);
HXLINE(1341)			return;
            		}
HXLINE(1344)		this->set_visible(this->set_active(true));
HXLINE(1346)		::Dynamic currWidget = this->_widgets->__get(this->location);
HXLINE(1347)		bool flippedX = false;
HXLINE(1348)		bool flippedY = false;
HXLINE(1350)		if (::hx::IsNotNull( currWidget )) {
HXLINE(1352)			 ::flixel::FlxObject target = ( ( ::flixel::FlxObject)(currWidget) );
HXLINE(1354)			if (::Std_obj::isOfType(target,::hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE(1356)				 ::flixel::FlxSprite fs = ( ( ::flixel::FlxSprite)(target) );
HXLINE(1357)				bool _hx_tmp;
HXDLIN(1357)				if (::hx::IsNotNull( fs )) {
HXLINE(1357)					_hx_tmp = ::hx::IsNotNull( fs->scrollFactor );
            				}
            				else {
HXLINE(1357)					_hx_tmp = false;
            				}
HXDLIN(1357)				if (_hx_tmp) {
HXLINE(1359)					this->scrollFactor->set(fs->scrollFactor->x,fs->scrollFactor->y);
            				}
            			}
HXLINE(1363)			if (::Std_obj::isOfType(currWidget,::hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >())) {
HXLINE(1365)				 ::flixel::addons::ui::FlxUICheckBox check = ( ( ::flixel::addons::ui::FlxUICheckBox)(target) );
HXLINE(1366)				target = check->box;
            			}
HXLINE(1369)			this->anchor->anchorThing(::hx::ObjectPtr<OBJ_>(this),target);
HXLINE(1370)			if ((this->x < 0)) {
HXLINE(1372)				this->_flipAnchor(HX_("left",07,08,b0,47),target);
HXLINE(1373)				flippedX = true;
            			}
            			else {
HXLINE(1375)				Float _hx_tmp = this->x;
HXDLIN(1375)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(1375)				if ((_hx_tmp > (_hx_tmp1 + this->get_width()))) {
HXLINE(1377)					this->_flipAnchor(HX_("right",dc,0b,64,e9),target);
HXLINE(1378)					flippedX = true;
            				}
            			}
HXLINE(1380)			if ((this->y < 0)) {
HXLINE(1382)				this->_flipAnchor(HX_("top",95,66,58,00),target);
HXLINE(1383)				flippedY = true;
            			}
            			else {
HXLINE(1385)				Float _hx_tmp = this->y;
HXDLIN(1385)				int _hx_tmp1 = ::flixel::FlxG_obj::height;
HXDLIN(1385)				if ((_hx_tmp > (_hx_tmp1 + this->get_height()))) {
HXLINE(1387)					this->_flipAnchor(HX_("bottom",eb,e6,78,65),target);
HXLINE(1388)					flippedY = true;
            				}
            			}
HXLINE(1390)			this->set_flipX(flippedX);
HXLINE(1391)			this->set_flipY(flippedY);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUICursor_obj,_updateCursor,(void))

void FlxUICursor_obj::_flipAnchor(::String AnchorDir, ::flixel::FlxObject destination){
            	HX_STACKFRAME(&_hx_pos_7e07195111da0df5_1396__flipAnchor)
HXLINE(1397)		 ::flixel::addons::ui::Anchor theAnchor = null();
HXLINE(1398)		::String _hx_switch_0 = AnchorDir;
            		if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ){
HXLINE(1419)			if ((this->anchor->y->side == HX_("bottom",eb,e6,78,65))) {
HXLINE(1421)				this->_bottomAnchor = this->anchor->getFlipped(true,false,this->_bottomAnchor);
HXLINE(1422)				theAnchor = this->_bottomAnchor;
            			}
HXLINE(1419)			goto _hx_goto_58;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(1401)			if ((this->anchor->x->side == HX_("left",07,08,b0,47))) {
HXLINE(1403)				this->_leftAnchor = this->anchor->getFlipped(true,false,this->_leftAnchor);
HXLINE(1404)				theAnchor = this->_leftAnchor;
            			}
HXLINE(1401)			goto _hx_goto_58;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(1407)			if ((this->anchor->x->side == HX_("right",dc,0b,64,e9))) {
HXLINE(1409)				this->_topAnchor = this->anchor->getFlipped(true,false,this->_rightAnchor);
HXLINE(1410)				theAnchor = this->_rightAnchor;
            			}
HXLINE(1407)			goto _hx_goto_58;
            		}
            		if (  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE(1413)			if ((this->anchor->y->side == HX_("top",95,66,58,00))) {
HXLINE(1415)				this->_topAnchor = this->anchor->getFlipped(true,false,this->_topAnchor);
HXLINE(1416)				theAnchor = this->_topAnchor;
            			}
HXLINE(1413)			goto _hx_goto_58;
            		}
            		_hx_goto_58:;
HXLINE(1425)		if (::hx::IsNotNull( theAnchor )) {
HXLINE(1427)			theAnchor->anchorThing(::hx::ObjectPtr<OBJ_>(this),destination);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUICursor_obj,_flipAnchor,(void))


::hx::ObjectPtr< FlxUICursor_obj > FlxUICursor_obj::__new( ::Dynamic Callback,::hx::Null< int >  __o_InputMethod,::hx::Null< int >  __o_DefaultKeys, ::Dynamic Asset) {
	::hx::ObjectPtr< FlxUICursor_obj > __this = new FlxUICursor_obj();
	__this->__construct(Callback,__o_InputMethod,__o_DefaultKeys,Asset);
	return __this;
}

::hx::ObjectPtr< FlxUICursor_obj > FlxUICursor_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic Callback,::hx::Null< int >  __o_InputMethod,::hx::Null< int >  __o_DefaultKeys, ::Dynamic Asset) {
	FlxUICursor_obj *__this = (FlxUICursor_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxUICursor_obj), true, "flixel.addons.ui.FlxUICursor"));
	*(void **)__this = FlxUICursor_obj::_hx_vtable;
	__this->__construct(Callback,__o_InputMethod,__o_DefaultKeys,Asset);
	return __this;
}

FlxUICursor_obj::FlxUICursor_obj()
{
}

void FlxUICursor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUICursor);
	HX_MARK_MEMBER_NAME(callback,"callback");
	HX_MARK_MEMBER_NAME(wrap,"wrap");
	HX_MARK_MEMBER_NAME(location,"location");
	HX_MARK_MEMBER_NAME(listIndex,"listIndex");
	HX_MARK_MEMBER_NAME(ignoreNextInput,"ignoreNextInput");
	HX_MARK_MEMBER_NAME(gamepadAutoConnect,"gamepadAutoConnect");
	HX_MARK_MEMBER_NAME(_gamepad,"_gamepad");
	HX_MARK_MEMBER_NAME(keysUp,"keysUp");
	HX_MARK_MEMBER_NAME(keysDown,"keysDown");
	HX_MARK_MEMBER_NAME(keysLeft,"keysLeft");
	HX_MARK_MEMBER_NAME(keysRight,"keysRight");
	HX_MARK_MEMBER_NAME(keysClick,"keysClick");
	HX_MARK_MEMBER_NAME(anchor,"anchor");
	HX_MARK_MEMBER_NAME(dispatchEvents,"dispatchEvents");
	HX_MARK_MEMBER_NAME(inputMethod,"inputMethod");
	HX_MARK_MEMBER_NAME(_lists,"_lists");
	HX_MARK_MEMBER_NAME(_widgets,"_widgets");
	HX_MARK_MEMBER_NAME(_newMouse,"_newMouse");
	HX_MARK_MEMBER_NAME(lastMouseX,"lastMouseX");
	HX_MARK_MEMBER_NAME(lastMouseY,"lastMouseY");
	HX_MARK_MEMBER_NAME(_clickPressed,"_clickPressed");
	HX_MARK_MEMBER_NAME(_defaultCode,"_defaultCode");
	HX_MARK_MEMBER_NAME(_rightAnchor,"_rightAnchor");
	HX_MARK_MEMBER_NAME(_topAnchor,"_topAnchor");
	HX_MARK_MEMBER_NAME(_leftAnchor,"_leftAnchor");
	HX_MARK_MEMBER_NAME(_bottomAnchor,"_bottomAnchor");
	HX_MARK_MEMBER_NAME(_clickTime,"_clickTime");
	 ::flixel::addons::ui::FlxUISprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUICursor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(callback,"callback");
	HX_VISIT_MEMBER_NAME(wrap,"wrap");
	HX_VISIT_MEMBER_NAME(location,"location");
	HX_VISIT_MEMBER_NAME(listIndex,"listIndex");
	HX_VISIT_MEMBER_NAME(ignoreNextInput,"ignoreNextInput");
	HX_VISIT_MEMBER_NAME(gamepadAutoConnect,"gamepadAutoConnect");
	HX_VISIT_MEMBER_NAME(_gamepad,"_gamepad");
	HX_VISIT_MEMBER_NAME(keysUp,"keysUp");
	HX_VISIT_MEMBER_NAME(keysDown,"keysDown");
	HX_VISIT_MEMBER_NAME(keysLeft,"keysLeft");
	HX_VISIT_MEMBER_NAME(keysRight,"keysRight");
	HX_VISIT_MEMBER_NAME(keysClick,"keysClick");
	HX_VISIT_MEMBER_NAME(anchor,"anchor");
	HX_VISIT_MEMBER_NAME(dispatchEvents,"dispatchEvents");
	HX_VISIT_MEMBER_NAME(inputMethod,"inputMethod");
	HX_VISIT_MEMBER_NAME(_lists,"_lists");
	HX_VISIT_MEMBER_NAME(_widgets,"_widgets");
	HX_VISIT_MEMBER_NAME(_newMouse,"_newMouse");
	HX_VISIT_MEMBER_NAME(lastMouseX,"lastMouseX");
	HX_VISIT_MEMBER_NAME(lastMouseY,"lastMouseY");
	HX_VISIT_MEMBER_NAME(_clickPressed,"_clickPressed");
	HX_VISIT_MEMBER_NAME(_defaultCode,"_defaultCode");
	HX_VISIT_MEMBER_NAME(_rightAnchor,"_rightAnchor");
	HX_VISIT_MEMBER_NAME(_topAnchor,"_topAnchor");
	HX_VISIT_MEMBER_NAME(_leftAnchor,"_leftAnchor");
	HX_VISIT_MEMBER_NAME(_bottomAnchor,"_bottomAnchor");
	HX_VISIT_MEMBER_NAME(_clickTime,"_clickTime");
	 ::flixel::addons::ui::FlxUISprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxUICursor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"wrap") ) { return ::hx::Val( wrap ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"keysUp") ) { return ::hx::Val( keysUp ); }
		if (HX_FIELD_EQ(inName,"anchor") ) { return ::hx::Val( anchor ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"_lists") ) { return ::hx::Val( _lists ); }
		if (HX_FIELD_EQ(inName,"_wrapX") ) { return ::hx::Val( _wrapX_dyn() ); }
		if (HX_FIELD_EQ(inName,"_wrapY") ) { return ::hx::Val( _wrapY_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_gamepad() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { return ::hx::Val( callback ); }
		if (HX_FIELD_EQ(inName,"location") ) { return ::hx::Val( location ); }
		if (HX_FIELD_EQ(inName,"_gamepad") ) { return ::hx::Val( _gamepad ); }
		if (HX_FIELD_EQ(inName,"keysDown") ) { return ::hx::Val( keysDown ); }
		if (HX_FIELD_EQ(inName,"keysLeft") ) { return ::hx::Val( keysLeft ); }
		if (HX_FIELD_EQ(inName,"jumpToXY") ) { return ::hx::Val( jumpToXY_dyn() ); }
		if (HX_FIELD_EQ(inName,"_widgets") ) { return ::hx::Val( _widgets ); }
		if (HX_FIELD_EQ(inName,"_newKeys") ) { return ::hx::Val( _newKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"_doPress") ) { return ::hx::Val( _doPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"_doInput") ) { return ::hx::Val( _doInput_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listIndex") ) { return ::hx::Val( listIndex ); }
		if (HX_FIELD_EQ(inName,"keysRight") ) { return ::hx::Val( keysRight ); }
		if (HX_FIELD_EQ(inName,"keysClick") ) { return ::hx::Val( keysClick ); }
		if (HX_FIELD_EQ(inName,"addWidget") ) { return ::hx::Val( addWidget_dyn() ); }
		if (HX_FIELD_EQ(inName,"_newMouse") ) { return ::hx::Val( _newMouse ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastMouseX") ) { return ::hx::Val( lastMouseX ); }
		if (HX_FIELD_EQ(inName,"lastMouseY") ) { return ::hx::Val( lastMouseY ); }
		if (HX_FIELD_EQ(inName,"_topAnchor") ) { return ::hx::Val( _topAnchor ); }
		if (HX_FIELD_EQ(inName,"_clickTime") ) { return ::hx::Val( _clickTime ); }
		if (HX_FIELD_EQ(inName,"getGamepad") ) { return ::hx::Val( getGamepad_dyn() ); }
		if (HX_FIELD_EQ(inName,"_addToKeys") ) { return ::hx::Val( _addToKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"_clearKeys") ) { return ::hx::Val( _clearKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"_checkKeys") ) { return ::hx::Val( _checkKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"_doRelease") ) { return ::hx::Val( _doRelease_dyn() ); }
		if (HX_FIELD_EQ(inName,"_findNextY") ) { return ::hx::Val( _findNextY_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_visible") ) { return ::hx::Val( set_visible_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gamepad") ) { return ::hx::Val( set_gamepad_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gamepad") ) { return ::hx::Val( get_gamepad_dyn() ); }
		if (HX_FIELD_EQ(inName,"inputMethod") ) { return ::hx::Val( inputMethod ); }
		if (HX_FIELD_EQ(inName,"_leftAnchor") ) { return ::hx::Val( _leftAnchor ); }
		if (HX_FIELD_EQ(inName,"_flipAnchor") ) { return ::hx::Val( _flipAnchor_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_location") ) { return ::hx::Val( set_location_dyn() ); }
		if (HX_FIELD_EQ(inName,"_defaultCode") ) { return ::hx::Val( _defaultCode ); }
		if (HX_FIELD_EQ(inName,"_rightAnchor") ) { return ::hx::Val( _rightAnchor ); }
		if (HX_FIELD_EQ(inName,"_doMouseMove") ) { return ::hx::Val( _doMouseMove_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_listIndex") ) { return ::hx::Val( set_listIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"addWidgetList") ) { return ::hx::Val( addWidgetList_dyn() ); }
		if (HX_FIELD_EQ(inName,"_clickPressed") ) { return ::hx::Val( _clickPressed ); }
		if (HX_FIELD_EQ(inName,"_bottomAnchor") ) { return ::hx::Val( _bottomAnchor ); }
		if (HX_FIELD_EQ(inName,"_updateCursor") ) { return ::hx::Val( _updateCursor_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dispatchEvents") ) { return ::hx::Val( dispatchEvents ); }
		if (HX_FIELD_EQ(inName,"setDefaultKeys") ) { return ::hx::Val( setDefaultKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"_sortXYVisible") ) { return ::hx::Val( _sortXYVisible_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"ignoreNextInput") ) { return ::hx::Val( ignoreNextInput ); }
		if (HX_FIELD_EQ(inName,"_getWidgetPoint") ) { return ::hx::Val( _getWidgetPoint_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"addWidgetsFromUI") ) { return ::hx::Val( addWidgetsFromUI_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_sortXYWidgetList") ) { return ::hx::Val( _sortXYWidgetList_dyn() ); }
		if (HX_FIELD_EQ(inName,"_clickKeysPressed") ) { return ::hx::Val( _clickKeysPressed_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gamepadAutoConnect") ) { return ::hx::Val( gamepadAutoConnect ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"findVisibleLocation") ) { return ::hx::Val( findVisibleLocation_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_clickKeysJustPressed") ) { return ::hx::Val( _clickKeysJustPressed_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxUICursor_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"wrap") ) { wrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"keysUp") ) { keysUp=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"anchor") ) { anchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lists") ) { _lists=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gamepad") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_gamepad(inValue.Cast<  ::flixel::input::gamepad::FlxGamepad >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { callback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"location") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_location(inValue.Cast< int >()) );location=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_gamepad") ) { _gamepad=inValue.Cast<  ::flixel::input::gamepad::FlxGamepad >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysDown") ) { keysDown=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysLeft") ) { keysLeft=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_widgets") ) { _widgets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_listIndex(inValue.Cast< int >()) );listIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysRight") ) { keysRight=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysClick") ) { keysClick=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_newMouse") ) { _newMouse=inValue.Cast<  ::flixel::addons::ui::FlxUIMouse >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastMouseX") ) { lastMouseX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastMouseY") ) { lastMouseY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_topAnchor") ) { _topAnchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_clickTime") ) { _clickTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inputMethod") ) { inputMethod=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftAnchor") ) { _leftAnchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_defaultCode") ) { _defaultCode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rightAnchor") ) { _rightAnchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_clickPressed") ) { _clickPressed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bottomAnchor") ) { _bottomAnchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dispatchEvents") ) { dispatchEvents=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"ignoreNextInput") ) { ignoreNextInput=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gamepadAutoConnect") ) { gamepadAutoConnect=inValue.Cast<  ::flixel::addons::ui::GamepadAutoConnectPreference >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUICursor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("wrap",ca,39,ff,4e));
	outFields->push(HX_("location",35,6e,46,e5));
	outFields->push(HX_("listIndex",d4,59,55,d4));
	outFields->push(HX_("ignoreNextInput",a5,52,4a,31));
	outFields->push(HX_("gamepadAutoConnect",1a,89,80,c3));
	outFields->push(HX_("gamepad",a1,e0,85,89));
	outFields->push(HX_("_gamepad",22,3a,3e,c3));
	outFields->push(HX_("keysUp",6f,91,fa,3f));
	outFields->push(HX_("keysDown",76,10,98,15));
	outFields->push(HX_("keysLeft",1b,20,da,1a));
	outFields->push(HX_("keysRight",48,05,0f,db));
	outFields->push(HX_("keysClick",b4,75,09,3a));
	outFields->push(HX_("anchor",75,3a,71,60));
	outFields->push(HX_("dispatchEvents",73,59,c9,d1));
	outFields->push(HX_("inputMethod",8b,d2,8e,fe));
	outFields->push(HX_("_lists",96,fd,ec,70));
	outFields->push(HX_("_widgets",b0,75,1f,62));
	outFields->push(HX_("_newMouse",04,51,45,77));
	outFields->push(HX_("lastMouseX",89,2d,e9,96));
	outFields->push(HX_("lastMouseY",8a,2d,e9,96));
	outFields->push(HX_("_clickPressed",19,aa,7f,0e));
	outFields->push(HX_("_defaultCode",8f,58,8d,79));
	outFields->push(HX_("_rightAnchor",72,b5,ff,2f));
	outFields->push(HX_("_topAnchor",ab,2e,4f,84));
	outFields->push(HX_("_leftAnchor",fb,c2,0b,62));
	outFields->push(HX_("_bottomAnchor",9f,aa,d1,bb));
	outFields->push(HX_("_clickTime",36,b4,9e,87));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxUICursor_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxUICursor_obj,callback),HX_("callback",c5,99,06,7f)},
	{::hx::fsBool,(int)offsetof(FlxUICursor_obj,wrap),HX_("wrap",ca,39,ff,4e)},
	{::hx::fsInt,(int)offsetof(FlxUICursor_obj,location),HX_("location",35,6e,46,e5)},
	{::hx::fsInt,(int)offsetof(FlxUICursor_obj,listIndex),HX_("listIndex",d4,59,55,d4)},
	{::hx::fsBool,(int)offsetof(FlxUICursor_obj,ignoreNextInput),HX_("ignoreNextInput",a5,52,4a,31)},
	{::hx::fsObject /*  ::flixel::addons::ui::GamepadAutoConnectPreference */ ,(int)offsetof(FlxUICursor_obj,gamepadAutoConnect),HX_("gamepadAutoConnect",1a,89,80,c3)},
	{::hx::fsObject /*  ::flixel::input::gamepad::FlxGamepad */ ,(int)offsetof(FlxUICursor_obj,_gamepad),HX_("_gamepad",22,3a,3e,c3)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxUICursor_obj,keysUp),HX_("keysUp",6f,91,fa,3f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxUICursor_obj,keysDown),HX_("keysDown",76,10,98,15)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxUICursor_obj,keysLeft),HX_("keysLeft",1b,20,da,1a)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxUICursor_obj,keysRight),HX_("keysRight",48,05,0f,db)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxUICursor_obj,keysClick),HX_("keysClick",b4,75,09,3a)},
	{::hx::fsObject /*  ::flixel::addons::ui::Anchor */ ,(int)offsetof(FlxUICursor_obj,anchor),HX_("anchor",75,3a,71,60)},
	{::hx::fsBool,(int)offsetof(FlxUICursor_obj,dispatchEvents),HX_("dispatchEvents",73,59,c9,d1)},
	{::hx::fsInt,(int)offsetof(FlxUICursor_obj,inputMethod),HX_("inputMethod",8b,d2,8e,fe)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxUICursor_obj,_lists),HX_("_lists",96,fd,ec,70)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxUICursor_obj,_widgets),HX_("_widgets",b0,75,1f,62)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIMouse */ ,(int)offsetof(FlxUICursor_obj,_newMouse),HX_("_newMouse",04,51,45,77)},
	{::hx::fsFloat,(int)offsetof(FlxUICursor_obj,lastMouseX),HX_("lastMouseX",89,2d,e9,96)},
	{::hx::fsFloat,(int)offsetof(FlxUICursor_obj,lastMouseY),HX_("lastMouseY",8a,2d,e9,96)},
	{::hx::fsBool,(int)offsetof(FlxUICursor_obj,_clickPressed),HX_("_clickPressed",19,aa,7f,0e)},
	{::hx::fsInt,(int)offsetof(FlxUICursor_obj,_defaultCode),HX_("_defaultCode",8f,58,8d,79)},
	{::hx::fsObject /*  ::flixel::addons::ui::Anchor */ ,(int)offsetof(FlxUICursor_obj,_rightAnchor),HX_("_rightAnchor",72,b5,ff,2f)},
	{::hx::fsObject /*  ::flixel::addons::ui::Anchor */ ,(int)offsetof(FlxUICursor_obj,_topAnchor),HX_("_topAnchor",ab,2e,4f,84)},
	{::hx::fsObject /*  ::flixel::addons::ui::Anchor */ ,(int)offsetof(FlxUICursor_obj,_leftAnchor),HX_("_leftAnchor",fb,c2,0b,62)},
	{::hx::fsObject /*  ::flixel::addons::ui::Anchor */ ,(int)offsetof(FlxUICursor_obj,_bottomAnchor),HX_("_bottomAnchor",9f,aa,d1,bb)},
	{::hx::fsFloat,(int)offsetof(FlxUICursor_obj,_clickTime),HX_("_clickTime",36,b4,9e,87)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxUICursor_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxUICursor_obj_sMemberFields[] = {
	HX_("callback",c5,99,06,7f),
	HX_("wrap",ca,39,ff,4e),
	HX_("location",35,6e,46,e5),
	HX_("listIndex",d4,59,55,d4),
	HX_("ignoreNextInput",a5,52,4a,31),
	HX_("findVisibleLocation",8e,c4,28,41),
	HX_("set_listIndex",b7,0f,bf,da),
	HX_("set_visible",95,df,8b,33),
	HX_("set_location",b2,45,59,af),
	HX_("gamepadAutoConnect",1a,89,80,c3),
	HX_("set_gamepad",c4,47,ed,19),
	HX_("get_gamepad",b8,40,80,0f),
	HX_("_gamepad",22,3a,3e,c3),
	HX_("keysUp",6f,91,fa,3f),
	HX_("keysDown",76,10,98,15),
	HX_("keysLeft",1b,20,da,1a),
	HX_("keysRight",48,05,0f,db),
	HX_("keysClick",b4,75,09,3a),
	HX_("anchor",75,3a,71,60),
	HX_("dispatchEvents",73,59,c9,d1),
	HX_("inputMethod",8b,d2,8e,fe),
	HX_("destroy",fa,2c,86,24),
	HX_("update",09,86,05,87),
	HX_("addWidgetsFromUI",ec,d8,9e,d4),
	HX_("jumpToXY",4a,47,d4,f9),
	HX_("addWidgetList",c3,73,d5,c3),
	HX_("addWidget",c5,e4,16,04),
	HX_("setDefaultKeys",d3,16,84,c0),
	HX_("_lists",96,fd,ec,70),
	HX_("_widgets",b0,75,1f,62),
	HX_("_newMouse",04,51,45,77),
	HX_("lastMouseX",89,2d,e9,96),
	HX_("lastMouseY",8a,2d,e9,96),
	HX_("_clickPressed",19,aa,7f,0e),
	HX_("_defaultCode",8f,58,8d,79),
	HX_("_rightAnchor",72,b5,ff,2f),
	HX_("_topAnchor",ab,2e,4f,84),
	HX_("_leftAnchor",fb,c2,0b,62),
	HX_("_bottomAnchor",9f,aa,d1,bb),
	HX_("_clickTime",36,b4,9e,87),
	HX_("getGamepad",ab,66,e7,d8),
	HX_("_sortXYWidgetList",60,d1,fd,af),
	HX_("_sortXYVisible",94,52,90,70),
	HX_("_addToKeys",d1,fd,86,90),
	HX_("_clearKeys",e2,45,6a,16),
	HX_("_newKeys",f5,e7,8b,30),
	HX_("_checkKeys",9d,26,89,f6),
	HX_("_clickKeysJustPressed",b9,86,60,65),
	HX_("_clickKeysPressed",05,5e,53,d3),
	HX_("_getWidgetPoint",95,69,a1,23),
	HX_("_doMouseMove",cc,08,be,b3),
	HX_("_doPress",79,8d,6d,35),
	HX_("_doRelease",3d,a9,0d,b5),
	HX_("_findNextY",ce,7c,cb,e3),
	HX_("_wrapX",8f,9e,3a,cc),
	HX_("_wrapY",90,9e,3a,cc),
	HX_("_doInput",00,fe,02,2b),
	HX_("_updateCursor",9e,c8,1a,21),
	HX_("_flipAnchor",21,4e,28,aa),
	::String(null()) };

::hx::Class FlxUICursor_obj::__mClass;

void FlxUICursor_obj::__register()
{
	FlxUICursor_obj _hx_dummy;
	FlxUICursor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.ui.FlxUICursor",0b,79,a4,79);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxUICursor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxUICursor_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUICursor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUICursor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
