// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Anchor
#include <flixel/addons/ui/Anchor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_BorderDef
#include <flixel/addons/ui/BorderDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_ButtonLabelStyle
#include <flixel/addons/ui/ButtonLabelStyle.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_CheckStyle
#include <flixel/addons/ui/CheckStyle.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIBar
#include <flixel/addons/ui/FlxUIBar.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUILine
#include <flixel/addons/ui/FlxUILine.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIRadioGroup
#include <flixel/addons/ui/FlxUIRadioGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIRegion
#include <flixel/addons/ui/FlxUIRegion.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISpriteButton
#include <flixel/addons/ui/FlxUISpriteButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITileTest
#include <flixel/addons/ui/FlxUITileTest.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITooltipManager
#include <flixel/addons/ui/FlxUITooltipManager.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FontDef
#include <flixel/addons/ui/FontDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_LineAxis
#include <flixel/addons/ui/LineAxis.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Rounding
#include <flixel/addons/ui/Rounding.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_U
#include <flixel/addons/ui/U.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_text__FlxText_FlxTextAlign_Impl_
#include <flixel/text/_FlxText/FlxTextAlign_Impl_.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Printer
#include <haxe/xml/Printer.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_AttribAccess_Impl_
#include <haxe/xml/_Access/AttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_HasAttribAccess_Impl_
#include <haxe/xml/_Access/HasAttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_HasNodeAccess_Impl_
#include <haxe/xml/_Access/HasNodeAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_NodeAccess_Impl_
#include <haxe/xml/_Access/NodeAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_NodeListAccess_Impl_
#include <haxe/xml/_Access/NodeListAccess_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4aef2a6d9057251f_59_new,"flixel.addons.ui.FlxUI","new",0x89fff7c7,"flixel.addons.ui.FlxUI.new","flixel/addons/ui/FlxUI.hx",59,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_102_set_focus,"flixel.addons.ui.FlxUI","set_focus",0xbe69d6e2,"flixel.addons.ui.FlxUI.set_focus","flixel/addons/ui/FlxUI.hx",102,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_300_getEvent,"flixel.addons.ui.FlxUI","getEvent",0xd6447add,"flixel.addons.ui.FlxUI.getEvent","flixel/addons/ui/FlxUI.hx",300,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_320_getRequest,"flixel.addons.ui.FlxUI","getRequest",0x8a6908d2,"flixel.addons.ui.FlxUI.getRequest","flixel/addons/ui/FlxUI.hx",320,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_373_onFocus,"flixel.addons.ui.FlxUI","onFocus",0x59586520,"flixel.addons.ui.FlxUI.onFocus","flixel/addons/ui/FlxUI.hx",373,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_385_setWidgetSuppression,"flixel.addons.ui.FlxUI","setWidgetSuppression",0x343faf06,"flixel.addons.ui.FlxUI.setWidgetSuppression","flixel/addons/ui/FlxUI.hx",385,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_418_onFocusLost,"flixel.addons.ui.FlxUI","onFocusLost",0xfd524b24,"flixel.addons.ui.FlxUI.onFocusLost","flixel/addons/ui/FlxUI.hx",418,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_436_setSuperIndex,"flixel.addons.ui.FlxUI","setSuperIndex",0x53bc1800,"flixel.addons.ui.FlxUI.setSuperIndex","flixel/addons/ui/FlxUI.hx",436,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_440_update,"flixel.addons.ui.FlxUI","update",0x5c40b902,"flixel.addons.ui.FlxUI.update","flixel/addons/ui/FlxUI.hx",440,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_540_addAsset,"flixel.addons.ui.FlxUI","addAsset",0xa03f3348,"flixel.addons.ui.FlxUI.addAsset","flixel/addons/ui/FlxUI.hx",540,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_625_destroy,"flixel.addons.ui.FlxUI","destroy",0xe31793e1,"flixel.addons.ui.FlxUI.destroy","flixel/addons/ui/FlxUI.hx",625,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_703_load,"flixel.addons.ui.FlxUI","load",0x34adecdf,"flixel.addons.ui.FlxUI.load","flixel/addons/ui/FlxUI.hx",703,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_984_unparentXML,"flixel.addons.ui.FlxUI","unparentXML",0xc0cc07bb,"flixel.addons.ui.FlxUI.unparentXML","flixel/addons/ui/FlxUI.hx",984,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_988__loadPointSize,"flixel.addons.ui.FlxUI","_loadPointSize",0x3df8fe65,"flixel.addons.ui.FlxUI._loadPointSize","flixel/addons/ui/FlxUI.hx",988,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1011__loadSub,"flixel.addons.ui.FlxUI","_loadSub",0x43431fb4,"flixel.addons.ui.FlxUI._loadSub","flixel/addons/ui/FlxUI.hx",1011,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1084__addTags,"flixel.addons.ui.FlxUI","_addTags",0xc394f454,"flixel.addons.ui.FlxUI._addTags","flixel/addons/ui/FlxUI.hx",1084,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1101__loadGlobals,"flixel.addons.ui.FlxUI","_loadGlobals",0xe1eda5e4,"flixel.addons.ui.FlxUI._loadGlobals","flixel/addons/ui/FlxUI.hx",1101,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1120__postLoad,"flixel.addons.ui.FlxUI","_postLoad",0xe07320ac,"flixel.addons.ui.FlxUI._postLoad","flixel/addons/ui/FlxUI.hx",1120,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1163__sendTo,"flixel.addons.ui.FlxUI","_sendTo",0x988d3169,"flixel.addons.ui.FlxUI._sendTo","flixel/addons/ui/FlxUI.hx",1163,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1235_setMode,"flixel.addons.ui.FlxUI","setMode",0xcc767b0c,"flixel.addons.ui.FlxUI.setMode","flixel/addons/ui/FlxUI.hx",1235,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1300_showThing,"flixel.addons.ui.FlxUI","showThing",0xd0d41c58,"flixel.addons.ui.FlxUI.showThing","flixel/addons/ui/FlxUI.hx",1300,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1369_getGroup,"flixel.addons.ui.FlxUI","getGroup",0xfa746602,"flixel.addons.ui.FlxUI.getGroup","flixel/addons/ui/FlxUI.hx",1369,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1412_hasAsset,"flixel.addons.ui.FlxUI","hasAsset",0xb33a576f,"flixel.addons.ui.FlxUI.hasAsset","flixel/addons/ui/FlxUI.hx",1412,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1425_getAsset,"flixel.addons.ui.FlxUI","getAsset",0x86b91cb3,"flixel.addons.ui.FlxUI.getAsset","flixel/addons/ui/FlxUI.hx",1425,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1462_getAssetGroup,"flixel.addons.ui.FlxUI","getAssetGroup",0x37c51d8c,"flixel.addons.ui.FlxUI.getAssetGroup","flixel/addons/ui/FlxUI.hx",1462,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1483_getMode,"flixel.addons.ui.FlxUI","getMode",0xd974ea00,"flixel.addons.ui.FlxUI.getMode","flixel/addons/ui/FlxUI.hx",1483,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1524_checkVariable,"flixel.addons.ui.FlxUI","checkVariable",0xe5e77d4b,"flixel.addons.ui.FlxUI.checkVariable","flixel/addons/ui/FlxUI.hx",1524,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1538_setVariable,"flixel.addons.ui.FlxUI","setVariable",0x553a4265,"flixel.addons.ui.FlxUI.setVariable","flixel/addons/ui/FlxUI.hx",1538,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1542_getVariable,"flixel.addons.ui.FlxUI","getVariable",0x4acd3b59,"flixel.addons.ui.FlxUI.getVariable","flixel/addons/ui/FlxUI.hx",1542,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1552_getDefinition,"flixel.addons.ui.FlxUI","getDefinition",0xdd003ff0,"flixel.addons.ui.FlxUI.getDefinition","flixel/addons/ui/FlxUI.hx",1552,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1602_screenWidth,"flixel.addons.ui.FlxUI","screenWidth",0x3db46961,"flixel.addons.ui.FlxUI.screenWidth","flixel/addons/ui/FlxUI.hx",1602,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1611_screenHeight,"flixel.addons.ui.FlxUI","screenHeight",0x7677442c,"flixel.addons.ui.FlxUI.screenHeight","flixel/addons/ui/FlxUI.hx",1611,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1716_applyNodeConditionals,"flixel.addons.ui.FlxUI","applyNodeConditionals",0x57bfbe44,"flixel.addons.ui.FlxUI.applyNodeConditionals","flixel/addons/ui/FlxUI.hx",1716,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1745_applyNodeChanges,"flixel.addons.ui.FlxUI","applyNodeChanges",0x1f7e448c,"flixel.addons.ui.FlxUI.applyNodeChanges","flixel/addons/ui/FlxUI.hx",1745,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1817__loadThingGetInfo,"flixel.addons.ui.FlxUI","_loadThingGetInfo",0x7a50a522,"flixel.addons.ui.FlxUI._loadThingGetInfo","flixel/addons/ui/FlxUI.hx",1817,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1855__loadTooltip,"flixel.addons.ui.FlxUI","_loadTooltip",0x38414d37,"flixel.addons.ui.FlxUI._loadTooltip","flixel/addons/ui/FlxUI.hx",1855,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1873__loadTooltipData,"flixel.addons.ui.FlxUI","_loadTooltipData",0x9fb23701,"flixel.addons.ui.FlxUI._loadTooltipData","flixel/addons/ui/FlxUI.hx",1873,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1941__loadTooltipStyle,"flixel.addons.ui.FlxUI","_loadTooltipStyle",0xcbd3807a,"flixel.addons.ui.FlxUI._loadTooltipStyle","flixel/addons/ui/FlxUI.hx",1941,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_1966__loadTooltipText,"flixel.addons.ui.FlxUI","_loadTooltipText",0xaa48ad84,"flixel.addons.ui.FlxUI._loadTooltipText","flixel/addons/ui/FlxUI.hx",1966,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2015__loadAnchor,"flixel.addons.ui.FlxUI","_loadAnchor",0xa3f29cc1,"flixel.addons.ui.FlxUI._loadAnchor","flixel/addons/ui/FlxUI.hx",2015,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2030__loadThing,"flixel.addons.ui.FlxUI","_loadThing",0x7ce5f322,"flixel.addons.ui.FlxUI._loadThing","flixel/addons/ui/FlxUI.hx",2030,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2122__loadScale,"flixel.addons.ui.FlxUI","_loadScale",0xe62b39be,"flixel.addons.ui.FlxUI._loadScale","flixel/addons/ui/FlxUI.hx",2122,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2127__loadScaleX,"flixel.addons.ui.FlxUI","_loadScaleX",0x7fa74cda,"flixel.addons.ui.FlxUI._loadScaleX","flixel/addons/ui/FlxUI.hx",2127,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2132__loadScaleY,"flixel.addons.ui.FlxUI","_loadScaleY",0x7fa74cdb,"flixel.addons.ui.FlxUI._loadScaleY","flixel/addons/ui/FlxUI.hx",2132,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2136__loadWidth,"flixel.addons.ui.FlxUI","_loadWidth",0x37bf213a,"flixel.addons.ui.FlxUI._loadWidth","flixel/addons/ui/FlxUI.hx",2136,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2143__loadHeight,"flixel.addons.ui.FlxUI","_loadHeight",0x45cd6a33,"flixel.addons.ui.FlxUI._loadHeight","flixel/addons/ui/FlxUI.hx",2143,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2150__loadCompass,"flixel.addons.ui.FlxUI","_loadCompass",0x511db9c6,"flixel.addons.ui.FlxUI._loadCompass","flixel/addons/ui/FlxUI.hx",2150,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2205__changeThing,"flixel.addons.ui.FlxUI","_changeThing",0x32661218,"flixel.addons.ui.FlxUI._changeThing","flixel/addons/ui/FlxUI.hx",2205,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2277__alignThing,"flixel.addons.ui.FlxUI","_alignThing",0x37322a6f,"flixel.addons.ui.FlxUI._alignThing","flixel/addons/ui/FlxUI.hx",2277,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2369__doAlign,"flixel.addons.ui.FlxUI","_doAlign",0x8f1f33f4,"flixel.addons.ui.FlxUI._doAlign","flixel/addons/ui/FlxUI.hx",2369,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2492__checkFailure,"flixel.addons.ui.FlxUI","_checkFailure",0x7b6fc968,"flixel.addons.ui.FlxUI._checkFailure","flixel/addons/ui/FlxUI.hx",2492,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2586__resizeThing,"flixel.addons.ui.FlxUI","_resizeThing",0x4ba3eb14,"flixel.addons.ui.FlxUI._resizeThing","flixel/addons/ui/FlxUI.hx",2586,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2620__postLoadThing,"flixel.addons.ui.FlxUI","_postLoadThing",0x7251e7a2,"flixel.addons.ui.FlxUI._postLoadThing","flixel/addons/ui/FlxUI.hx",2620,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2759__loadTileTest,"flixel.addons.ui.FlxUI","_loadTileTest",0xb7577bec,"flixel.addons.ui.FlxUI._loadTileTest","flixel/addons/ui/FlxUI.hx",2759,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2836__loadString,"flixel.addons.ui.FlxUI","_loadString",0x54b18b1d,"flixel.addons.ui.FlxUI._loadString","flixel/addons/ui/FlxUI.hx",2836,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2845__loadText,"flixel.addons.ui.FlxUI","_loadText",0x9815c3f9,"flixel.addons.ui.FlxUI._loadText","flixel/addons/ui/FlxUI.hx",2845,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_2904__loadInputText,"flixel.addons.ui.FlxUI","_loadInputText",0x30689f0b,"flixel.addons.ui.FlxUI._loadInputText","flixel/addons/ui/FlxUI.hx",2904,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3069__loadRadioGroup,"flixel.addons.ui.FlxUI","_loadRadioGroup",0x22b21c90,"flixel.addons.ui.FlxUI._loadRadioGroup","flixel/addons/ui/FlxUI.hx",3069,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3235__loadCheckBox,"flixel.addons.ui.FlxUI","_loadCheckBox",0xdd35176f,"flixel.addons.ui.FlxUI._loadCheckBox","flixel/addons/ui/FlxUI.hx",3235,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3319__loadDropDownMenu,"flixel.addons.ui.FlxUI","_loadDropDownMenu",0xfcc3a1bc,"flixel.addons.ui.FlxUI._loadDropDownMenu","flixel/addons/ui/FlxUI.hx",3319,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3455__loadTest,"flixel.addons.ui.FlxUI","_loadTest",0x9815bf9e,"flixel.addons.ui.FlxUI._loadTest","flixel/addons/ui/FlxUI.hx",3455,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3505__loadTestSub,"flixel.addons.ui.FlxUI","_loadTestSub",0x8b7ab882,"flixel.addons.ui.FlxUI._loadTestSub","flixel/addons/ui/FlxUI.hx",3505,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3606_parseVarValue,"flixel.addons.ui.FlxUI","parseVarValue",0x5226f084,"flixel.addons.ui.FlxUI.parseVarValue","flixel/addons/ui/FlxUI.hx",3606,0xf354486a)
static const ::String _hx_array_data_e9110855_142[] = {
	HX_("==",60,35,00,00),HX_("=",3d,00,00,00),HX_("!=",fc,1c,00,00),HX_("!==",c1,3f,19,00),HX_("<",3c,00,00,00),HX_(">",3e,00,00,00),HX_("<=",81,34,00,00),HX_(">=",3f,36,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3624__loadLayout,"flixel.addons.ui.FlxUI","_loadLayout",0x9c3a10f6,"flixel.addons.ui.FlxUI._loadLayout","flixel/addons/ui/FlxUI.hx",3624,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3636_addToCleanup,"flixel.addons.ui.FlxUI","addToCleanup",0x71379941,"flixel.addons.ui.FlxUI.addToCleanup","flixel/addons/ui/FlxUI.hx",3636,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3647_addToScaledAssets,"flixel.addons.ui.FlxUI","addToScaledAssets",0xf5176080,"flixel.addons.ui.FlxUI.addToScaledAssets","flixel/addons/ui/FlxUI.hx",3647,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3654_cleanup,"flixel.addons.ui.FlxUI","cleanup",0x69d3730b,"flixel.addons.ui.FlxUI.cleanup","flixel/addons/ui/FlxUI.hx",3654,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3665_createUI,"flixel.addons.ui.FlxUI","createUI",0x2c9d0b89,"flixel.addons.ui.FlxUI.createUI","flixel/addons/ui/FlxUI.hx",3665,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3669__loadTabMenu,"flixel.addons.ui.FlxUI","_loadTabMenu",0x0e83bac8,"flixel.addons.ui.FlxUI._loadTabMenu","flixel/addons/ui/FlxUI.hx",3669,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3813__loadNumericStepper,"flixel.addons.ui.FlxUI","_loadNumericStepper",0x27747c10,"flixel.addons.ui.FlxUI._loadNumericStepper","flixel/addons/ui/FlxUI.hx",3813,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3878_getResizeRatio,"flixel.addons.ui.FlxUI","getResizeRatio",0x06525d7a,"flixel.addons.ui.FlxUI.getResizeRatio","flixel/addons/ui/FlxUI.hx",3878,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3907__loadButton,"flixel.addons.ui.FlxUI","_loadButton",0x1d61c43e,"flixel.addons.ui.FlxUI._loadButton","flixel/addons/ui/FlxUI.hx",3907,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4333__loadRegion,"flixel.addons.ui.FlxUI","_loadRegion",0x440e2340,"flixel.addons.ui.FlxUI._loadRegion","flixel/addons/ui/FlxUI.hx",4333,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4353__load9SliceSprite,"flixel.addons.ui.FlxUI","_load9SliceSprite",0xb0d2f56a,"flixel.addons.ui.FlxUI._load9SliceSprite","flixel/addons/ui/FlxUI.hx",4353,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4454_load9SliceSprite_scaleSub,"flixel.addons.ui.FlxUI","load9SliceSprite_scaleSub",0x6f4e4338,"flixel.addons.ui.FlxUI.load9SliceSprite_scaleSub","flixel/addons/ui/FlxUI.hx",4454,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4510__loadBox,"flixel.addons.ui.FlxUI","_loadBox",0x4336343f,"flixel.addons.ui.FlxUI._loadBox","flixel/addons/ui/FlxUI.hx",4510,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4580__loadLine,"flixel.addons.ui.FlxUI","_loadLine",0x92cf0f40,"flixel.addons.ui.FlxUI._loadLine","flixel/addons/ui/FlxUI.hx",4580,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4651__loadBar,"flixel.addons.ui.FlxUI","_loadBar",0x43362807,"flixel.addons.ui.FlxUI._loadBar","flixel/addons/ui/FlxUI.hx",4651,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4762__loadSprite,"flixel.addons.ui.FlxUI","_loadSprite",0x07173e51,"flixel.addons.ui.FlxUI._loadSprite","flixel/addons/ui/FlxUI.hx",4762,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4864_loadSmooth,"flixel.addons.ui.FlxUI","loadSmooth",0xb318da6d,"flixel.addons.ui.FlxUI.loadSmooth","flixel/addons/ui/FlxUI.hx",4864,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4880_loadScaledSrc,"flixel.addons.ui.FlxUI","loadScaledSrc",0x51d86f8b,"flixel.addons.ui.FlxUI.loadScaledSrc","flixel/addons/ui/FlxUI.hx",4880,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_4999__getAnchorPos,"flixel.addons.ui.FlxUI","_getAnchorPos",0xe6674faf,"flixel.addons.ui.FlxUI._getAnchorPos","flixel/addons/ui/FlxUI.hx",4999,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5058_getRound,"flixel.addons.ui.FlxUI","getRound",0x4de5ab11,"flixel.addons.ui.FlxUI.getRound","flixel/addons/ui/FlxUI.hx",5058,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5074_doRound,"flixel.addons.ui.FlxUI","doRound",0xdf243faa,"flixel.addons.ui.FlxUI.doRound","flixel/addons/ui/FlxUI.hx",5074,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5089_calcMaxMinSize,"flixel.addons.ui.FlxUI","calcMaxMinSize",0x437b661d,"flixel.addons.ui.FlxUI.calcMaxMinSize","flixel/addons/ui/FlxUI.hx",5089,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5201__getDataSize,"flixel.addons.ui.FlxUI","_getDataSize",0xaed2247b,"flixel.addons.ui.FlxUI._getDataSize","flixel/addons/ui/FlxUI.hx",5201,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5283__getOperation,"flixel.addons.ui.FlxUI","_getOperation",0x2685c1b7,"flixel.addons.ui.FlxUI._getOperation","flixel/addons/ui/FlxUI.hx",5283,0xf354486a)
static const ::String _hx_array_data_e9110855_200[] = {
	HX_("+",2b,00,00,00),HX_("-",2d,00,00,00),HX_("*",2a,00,00,00),HX_("/",2f,00,00,00),HX_("^",5e,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5350__doOperation,"flixel.addons.ui.FlxUI","_doOperation",0xf65624d6,"flixel.addons.ui.FlxUI._doOperation","flixel/addons/ui/FlxUI.hx",5350,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5368__getStretch,"flixel.addons.ui.FlxUI","_getStretch",0xd40af795,"flixel.addons.ui.FlxUI._getStretch","flixel/addons/ui/FlxUI.hx",5368,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5409_getAssetProperty,"flixel.addons.ui.FlxUI","getAssetProperty",0xd3eb8c28,"flixel.addons.ui.FlxUI.getAssetProperty","flixel/addons/ui/FlxUI.hx",5409,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5526__loadCursor,"flixel.addons.ui.FlxUI","_loadCursor",0x8269f122,"flixel.addons.ui.FlxUI._loadCursor","flixel/addons/ui/FlxUI.hx",5526,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5554__loadPosition,"flixel.addons.ui.FlxUI","_loadPosition",0xfb522df5,"flixel.addons.ui.FlxUI._loadPosition","flixel/addons/ui/FlxUI.hx",5554,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5662__loadBorder,"flixel.addons.ui.FlxUI","_loadBorder",0xa79baf38,"flixel.addons.ui.FlxUI._loadBorder","flixel/addons/ui/FlxUI.hx",5662,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5675__loadColor,"flixel.addons.ui.FlxUI","_loadColor",0xb7b8dc97,"flixel.addons.ui.FlxUI._loadColor","flixel/addons/ui/FlxUI.hx",5675,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5690__loadFontDef,"flixel.addons.ui.FlxUI","_loadFontDef",0x63d37f6a,"flixel.addons.ui.FlxUI._loadFontDef","flixel/addons/ui/FlxUI.hx",5690,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5699__loadFontFace,"flixel.addons.ui.FlxUI","_loadFontFace",0xf68b5f58,"flixel.addons.ui.FlxUI._loadFontFace","flixel/addons/ui/FlxUI.hx",5699,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5712__onFinishLoad,"flixel.addons.ui.FlxUI","_onFinishLoad",0x23246f1e,"flixel.addons.ui.FlxUI._onFinishLoad","flixel/addons/ui/FlxUI.hx",5712,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5720_getText,"flixel.addons.ui.FlxUI","getText",0xde0de34a,"flixel.addons.ui.FlxUI.getText","flixel/addons/ui/FlxUI.hx",5720,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5737_formatFromCode,"flixel.addons.ui.FlxUI","formatFromCode",0x3be1ae07,"flixel.addons.ui.FlxUI.formatFromCode","flixel/addons/ui/FlxUI.hx",5737,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5822_formatButtonText,"flixel.addons.ui.FlxUI","formatButtonText",0xeca59e0f,"flixel.addons.ui.FlxUI.formatButtonText","flixel/addons/ui/FlxUI.hx",5822,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_159_event,"flixel.addons.ui.FlxUI","event",0xe056d741,"flixel.addons.ui.FlxUI.event","flixel/addons/ui/FlxUI.hx",159,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_197_fontSize,"flixel.addons.ui.FlxUI","fontSize",0xcf7a6169,"flixel.addons.ui.FlxUI.fontSize","flixel/addons/ui/FlxUI.hx",197,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_215_font,"flixel.addons.ui.FlxUI","font",0x30b6b088,"flixel.addons.ui.FlxUI.font","flixel/addons/ui/FlxUI.hx",215,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_242_forceFocus,"flixel.addons.ui.FlxUI","forceFocus",0x91e0ed66,"flixel.addons.ui.FlxUI.forceFocus","flixel/addons/ui/FlxUI.hx",242,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_255_getLeafUIState,"flixel.addons.ui.FlxUI","getLeafUIState",0xebda1e42,"flixel.addons.ui.FlxUI.getLeafUIState","flixel/addons/ui/FlxUI.hx",255,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_3001_consolidateData,"flixel.addons.ui.FlxUI","consolidateData",0x9bb7ebba,"flixel.addons.ui.FlxUI.consolidateData","flixel/addons/ui/FlxUI.hx",3001,0xf354486a)
HX_LOCAL_STACK_FRAME(_hx_pos_4aef2a6d9057251f_5813_sortParams,"flixel.addons.ui.FlxUI","sortParams",0x40e314bd,"flixel.addons.ui.FlxUI.sortParams","flixel/addons/ui/FlxUI.hx",5813,0xf354486a)
namespace flixel{
namespace addons{
namespace ui{

void FlxUI_obj::__construct( ::Xml data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_, ::haxe::ds::StringMap uiVars_){
            		::String liveFilePath_ = __o_liveFilePath_;
            		if (::hx::IsNull(__o_liveFilePath_)) liveFilePath_ = HX_("",00,00,00,00);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_59_new)
HXLINE(1643)		this->_scaledAssets = ::Array_obj< ::String >::__new(0);
HXLINE(1642)		this->_assetsToCleanUp = ::Array_obj< ::String >::__new(0);
HXLINE(1638)		this->_safe_input_delay_elapsed = ((Float)0.0);
HXLINE(1633)		this->_curr_mode = HX_("",00,00,00,00);
HXLINE(1624)		this->_pointY = ((Float)1);
HXLINE(1623)		this->_pointX = ((Float)1);
HXLINE(1621)		this->_postLoaded = false;
HXLINE( 125)		this->cursorLists = null();
HXLINE( 116)		this->getTextFallback = null();
HXLINE(  66)		this->failed_by = ((Float)0);
HXLINE(  65)		this->failed = false;
HXLINE(  63)		this->safe_input_delay_time = ((Float)0.01);
HXLINE(  62)		this->do_safe_input_delay = true;
HXLINE( 340)		super::__construct(null(),null());
HXLINE( 341)		this->_ptr_tongue = tongue_;
HXLINE( 349)		this->_ptr = ptr;
HXLINE( 350)		if (::hx::IsNotNull( superIndex_ )) {
HXLINE( 352)			this->setSuperIndex(superIndex_);
            		}
HXLINE( 356)		if (::hx::IsNotNull( uiVars_ )) {
HXLINE( 358)			this->_variable_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 359)			{
HXLINE( 359)				 ::Dynamic key = uiVars_->keys();
HXDLIN( 359)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 359)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 361)					::Dynamic this1 = this->_variable_index;
HXDLIN( 361)					( ( ::haxe::ds::StringMap)(this1) )->set(key1,uiVars_->get_string(key1));
            				}
            			}
            		}
HXLINE( 365)		if (::hx::IsNotNull( data )) {
HXLINE( 367)			this->load(data);
            		}
            	}

Dynamic FlxUI_obj::__CreateEmpty() { return new FlxUI_obj; }

void *FlxUI_obj::_hx_vtable = 0;

Dynamic FlxUI_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxUI_obj > _hx_result = new FlxUI_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool FlxUI_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x398eb8dc) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x288ce903) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x288ce903;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x398eb8dc;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x39f54363 || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7dab0655;
		}
	}
}

static ::flixel::addons::ui::interfaces::IEventGetter_obj _hx_flixel_addons_ui_FlxUI__hx_flixel_addons_ui_interfaces_IEventGetter= {
	( void (::hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUI_obj::getEvent,
	(  ::Dynamic (::hx::Object::*)(::String,::Dynamic, ::Dynamic,::cpp::VirtualArray))&::flixel::addons::ui::FlxUI_obj::getRequest,
};

void *FlxUI_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xdcf9e4f9: return &_hx_flixel_addons_ui_FlxUI__hx_flixel_addons_ui_interfaces_IEventGetter;
	}
	return super::_hx_getInterface(inHash);
}

::Dynamic FlxUI_obj::set_focus(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_102_set_focus)
HXLINE( 103)		if (::hx::IsNotNull( this->focus )) {
HXLINE( 105)			this->onFocusLost(this->focus);
            		}
HXLINE( 107)		this->focus = widget;
HXLINE( 108)		if (::hx::IsNotNull( this->focus )) {
HXLINE( 110)			this->onFocus(this->focus);
            		}
HXLINE( 112)		return widget;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,set_focus,return )

void FlxUI_obj::getEvent(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_300_getEvent)
HXDLIN( 300)		if (::hx::IsNotNull( this->_ptr )) {
HXLINE( 302)			::flixel::addons::ui::interfaces::IEventGetter_obj::getEvent(this->_ptr,name,sender,data,params);
HXLINE( 303)			if ((name == HX_("post_load",a5,55,d0,20))) {
HXLINE( 306)				 ::Dynamic key = this->_asset_index->keys();
HXDLIN( 306)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 306)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 308)					::Dynamic thing = this->_asset_index->get(key1);
HXLINE( 309)					if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::FlxUI >())) {
HXLINE( 311)						 ::flixel::addons::ui::FlxUI fui = ( ( ::flixel::addons::ui::FlxUI)(thing) );
HXLINE( 312)						fui->getEvent(HX_("post_load",a5,55,d0,20),sender,data,null());
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,getEvent,(void))

 ::Dynamic FlxUI_obj::getRequest(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_320_getRequest)
HXLINE( 321)		if (::hx::IsNotNull( this->_ptr )) {
HXLINE( 323)			return ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(this->_ptr,name,sender,data,params);
            		}
HXLINE( 325)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,getRequest,return )

void FlxUI_obj::onFocus(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_373_onFocus)
HXDLIN( 373)		if (::Std_obj::isOfType(widget,::hx::ClassOf< ::flixel::addons::ui::FlxUIDropDownMenu >())) {
HXLINE( 376)			int _g = 0;
HXDLIN( 376)			::Array< ::Dynamic> _g1 = this->group->members;
HXDLIN( 376)			while((_g < _g1->length)){
HXLINE( 376)				 ::flixel::FlxSprite asset = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 376)				_g = (_g + 1);
HXLINE( 378)				this->setWidgetSuppression(asset,widget,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,onFocus,(void))

void FlxUI_obj::setWidgetSuppression( ::flixel::FlxSprite asset,::Dynamic butNotThisOne,::hx::Null< bool >  __o_suppressed){
            		bool suppressed = __o_suppressed.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_385_setWidgetSuppression)
HXDLIN( 385)		if (::Std_obj::isOfType(asset,::hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIClickable >())) {
HXLINE( 387)			bool skip = false;
HXLINE( 388)			if (::Std_obj::isOfType(asset,::hx::ClassOf< ::flixel::addons::ui::FlxUIDropDownMenu >())) {
HXLINE( 390)				 ::flixel::addons::ui::FlxUIDropDownMenu ddasset = ( ( ::flixel::addons::ui::FlxUIDropDownMenu)(asset) );
HXLINE( 391)				if (::hx::IsEq( ddasset,butNotThisOne )) {
HXLINE( 393)					skip = true;
            				}
            			}
HXLINE( 396)			if (!(skip)) {
HXLINE( 398)				::Dynamic ibtn = asset;
HXLINE( 399)				::flixel::addons::ui::interfaces::IFlxUIClickable_obj::set_skipButtonUpdate(ibtn,suppressed);
            			}
            		}
            		else {
HXLINE( 402)			if (::Std_obj::isOfType(asset,::hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >())) {
HXLINE( 404)				 ::flixel::addons::ui::FlxUIGroup g = ( ( ::flixel::addons::ui::FlxUIGroup)(asset) );
HXLINE( 405)				{
HXLINE( 405)					int _g = 0;
HXDLIN( 405)					::Array< ::Dynamic> _g1 = g->group->members;
HXDLIN( 405)					while((_g < _g1->length)){
HXLINE( 405)						 ::flixel::FlxSprite groupAsset = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 405)						_g = (_g + 1);
HXLINE( 407)						this->setWidgetSuppression(groupAsset,butNotThisOne,suppressed);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,setWidgetSuppression,(void))

void FlxUI_obj::onFocusLost(::Dynamic widget){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_418_onFocusLost)
HXDLIN( 418)		if (::Std_obj::isOfType(widget,::hx::ClassOf< ::flixel::addons::ui::FlxUIDropDownMenu >())) {
HXLINE( 423)			int _g = 0;
HXDLIN( 423)			::Array< ::Dynamic> _g1 = this->group->members;
HXDLIN( 423)			while((_g < _g1->length)){
HXLINE( 423)				 ::flixel::FlxSprite asset = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 423)				_g = (_g + 1);
HXLINE( 425)				this->setWidgetSuppression(asset,null(),false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,onFocusLost,(void))

void FlxUI_obj::setSuperIndex( ::flixel::addons::ui::FlxUI flxUI){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_436_setSuperIndex)
HXDLIN( 436)		this->_superIndexUI = flxUI;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,setSuperIndex,(void))

void FlxUI_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_440_update)
HXLINE( 441)		if (this->do_safe_input_delay) {
HXLINE( 443)			 ::flixel::addons::ui::FlxUI _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 443)			_hx_tmp->_safe_input_delay_elapsed = (_hx_tmp->_safe_input_delay_elapsed + ::flixel::FlxG_obj::elapsed);
HXLINE( 444)			if ((this->_safe_input_delay_elapsed > this->safe_input_delay_time)) {
HXLINE( 446)				this->do_safe_input_delay = false;
            			}
            			else {
HXLINE( 450)				return;
            			}
            		}
HXLINE( 453)		this->super::update(elapsed);
            	}


bool FlxUI_obj::addAsset(::Dynamic asset,::String key,::String __o_group_name,::hx::Null< bool >  __o_recursive){
            		::String group_name = __o_group_name;
            		if (::hx::IsNull(__o_group_name)) group_name = HX_("",00,00,00,00);
            		bool recursive = __o_recursive.Default(false);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_540_addAsset)
HXLINE( 541)		if (this->_asset_index->exists(key)) {
HXLINE( 543)			bool _hx_tmp = (key == HX_("screen",6c,3b,5d,47));
HXLINE( 551)			return false;
            		}
HXLINE( 554)		 ::flixel::addons::ui::FlxUIGroup g = this->getGroup(group_name,recursive);
HXLINE( 555)		if (::hx::IsNotNull( g )) {
HXLINE( 557)			g->add(( ( ::flixel::FlxSprite)(asset) )).StaticCast<  ::flixel::FlxSprite >();
            		}
            		else {
HXLINE( 561)			this->add(( ( ::flixel::FlxSprite)(asset) ));
            		}
HXLINE( 564)		this->_asset_index->set(key,asset);
HXLINE( 566)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,addAsset,return )

void FlxUI_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_625_destroy)
HXLINE( 626)		if (::hx::IsNotNull( this->_group_index )) {
HXLINE( 628)			{
HXLINE( 628)				 ::Dynamic key = this->_group_index->keys();
HXDLIN( 628)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 628)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 630)					this->_group_index->remove(key1);
            				}
            			}
HXLINE( 632)			this->_group_index = null();
            		}
HXLINE( 634)		if (::hx::IsNotNull( this->_asset_index )) {
HXLINE( 636)			{
HXLINE( 636)				 ::Dynamic key = this->_asset_index->keys();
HXDLIN( 636)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 636)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 638)					this->_asset_index->remove(key1);
            				}
            			}
HXLINE( 640)			this->_asset_index = null();
            		}
HXLINE( 642)		if (::hx::IsNotNull( this->_tag_index )) {
HXLINE( 644)			{
HXLINE( 644)				 ::Dynamic key = this->_tag_index->keys();
HXDLIN( 644)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 644)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 646)					::flixel::util::FlxArrayUtil_obj::clearArray(( (::cpp::VirtualArray)(this->_tag_index->get(key1)) ),null());
HXLINE( 647)					this->_tag_index->remove(key1);
            				}
            			}
HXLINE( 649)			this->_tag_index = null();
            		}
HXLINE( 651)		if (::hx::IsNotNull( this->_definition_index )) {
HXLINE( 653)			{
HXLINE( 653)				 ::Dynamic key = this->_definition_index->keys();
HXDLIN( 653)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 653)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 655)					this->_definition_index->remove(key1);
            				}
            			}
HXLINE( 657)			this->_definition_index = null();
            		}
HXLINE( 659)		if (::hx::IsNotNull( this->_variable_index )) {
HXLINE( 661)			{
HXLINE( 661)				 ::Dynamic key = this->_variable_index->keys();
HXDLIN( 661)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 661)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 663)					this->_variable_index->remove(key1);
            				}
            			}
HXLINE( 665)			this->_variable_index = null();
            		}
HXLINE( 667)		if (::hx::IsNotNull( this->_mode_index )) {
HXLINE( 669)			{
HXLINE( 669)				 ::Dynamic key = this->_mode_index->keys();
HXDLIN( 669)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 669)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 671)					this->_mode_index->remove(key1);
            				}
            			}
HXLINE( 673)			this->_mode_index = null();
            		}
HXLINE( 675)		this->_ptr = null();
HXLINE( 676)		this->_superIndexUI = null();
HXLINE( 677)		this->_ptr_tongue = null();
HXLINE( 678)		if (::hx::IsNotNull( this->cursorLists )) {
HXLINE( 680)			{
HXLINE( 680)				int _g = 0;
HXDLIN( 680)				::Array< ::Dynamic> _g1 = this->cursorLists;
HXDLIN( 680)				while((_g < _g1->length)){
HXLINE( 680)					::Array< ::Dynamic> arr = _g1->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 680)					_g = (_g + 1);
HXLINE( 682)					::flixel::util::FlxArrayUtil_obj::clearArray(arr,null());
            				}
            			}
HXLINE( 684)			::flixel::util::FlxArrayUtil_obj::clearArray(this->cursorLists,null());
            		}
HXLINE( 686)		this->cursorLists = null();
HXLINE( 687)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_failure_checks,null());
HXLINE( 688)		this->_failure_checks = null();
HXLINE( 689)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_assetsToCleanUp,null());
HXLINE( 690)		this->_assetsToCleanUp = null();
HXLINE( 691)		::flixel::util::FlxArrayUtil_obj::clearArray(this->_scaledAssets,null());
HXLINE( 692)		this->_scaledAssets = null();
HXLINE( 693)		this->super::destroy();
            	}


void FlxUI_obj::load( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_703_load)
HXLINE( 704)		this->_group_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 705)		this->_asset_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 706)		this->_tag_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 707)		this->_definition_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 708)		if (::hx::IsNull( this->_variable_index )) {
HXLINE( 710)			this->_variable_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 712)		this->_mode_index =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 714)		if (::hx::IsNotNull( data )) {
HXLINE( 716)			if (::hx::IsNull( this->_superIndexUI )) {
HXLINE( 719)				 ::flixel::addons::ui::FlxUIRegion screenRegion =  ::flixel::addons::ui::FlxUIRegion_obj::__alloc( HX_CTX ,0,0,::flixel::FlxG_obj::width,::flixel::FlxG_obj::height);
HXLINE( 720)				screenRegion->name = HX_("screen",6c,3b,5d,47);
HXLINE( 721)				this->addAsset(screenRegion,HX_("screen",6c,3b,5d,47),null(),null());
HXLINE( 723)				if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("screen_override",bf,10,cc,3e))) {
HXLINE( 725)					if (this->_loadTest(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("screen_override",bf,10,cc,3e)))) {
HXLINE( 727)						 ::Xml screenNode = ::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("screen_override",bf,10,cc,3e));
HXLINE( 728)						this->_loadPosition(screenNode,screenRegion);
HXLINE( 729)						screenRegion->set_width(this->_loadWidth(screenNode,::flixel::FlxG_obj::width,null(),null()));
HXLINE( 730)						screenRegion->set_height(this->_loadHeight(screenNode,::flixel::FlxG_obj::height,null(),null()));
            					}
            				}
            			}
HXLINE( 735)			this->_data = data;
HXLINE( 737)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("inject",91,4a,ea,97))) {
HXLINE( 739)				while(::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("inject",91,4a,ea,97))){
HXLINE( 741)					 ::Xml inj_data = ::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("inject",91,4a,ea,97));
HXLINE( 742)					::String inj_name = ::flixel::addons::ui::U_obj::xml_name(inj_data);
HXLINE( 743)					 ::Xml payload = ( ( ::Xml)(::flixel::addons::ui::U_obj::xml(inj_name,HX_("xml",d7,6d,5b,00),false,null())) );
HXLINE( 744)					if (::hx::IsNotNull( payload )) {
HXLINE( 746)						 ::Xml parent = inj_data->parent;
HXLINE( 747)						int i = 0;
HXLINE( 748)						{
HXLINE( 748)							int _g = 0;
HXDLIN( 748)							::Array< ::Dynamic> _g1 = parent->children;
HXDLIN( 748)							while((_g < _g1->length)){
HXLINE( 748)								 ::Xml child = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 748)								_g = (_g + 1);
HXLINE( 750)								if (::hx::IsEq( child,inj_data )) {
HXLINE( 752)									goto _hx_goto_24;
            								}
HXLINE( 754)								i = (i + 1);
            							}
            							_hx_goto_24:;
            						}
HXLINE( 757)						if (parent->removeChild(inj_data)) {
HXLINE( 759)							int j = 0;
HXLINE( 760)							{
HXLINE( 760)								 ::Dynamic e = payload->elements();
HXDLIN( 760)								while(( (bool)(e->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 760)									 ::Xml e1 = ( ( ::Xml)(e->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 762)									parent->insertChild(e1,(i + j));
HXLINE( 763)									j = (j + 1);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 771)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("include",28,fe,f6,51))) {
HXLINE( 773)				int _g = 0;
HXDLIN( 773)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("include",28,fe,f6,51));
HXDLIN( 773)				while((_g < _g1->length)){
HXLINE( 773)					 ::Xml inc_data = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 773)					_g = (_g + 1);
HXLINE( 775)					::String inc_name = ::flixel::addons::ui::U_obj::xml_name(inc_data);
HXLINE( 777)					 ::Xml liveFile = null();
HXLINE( 794)					 ::Xml inc_xml = null();
HXLINE( 795)					if (::hx::IsNull( liveFile )) {
HXLINE( 797)						inc_xml = ( ( ::Xml)(::flixel::addons::ui::U_obj::xml(inc_name,null(),null(),null())) );
            					}
            					else {
HXLINE( 801)						inc_xml = liveFile;
            					}
HXLINE( 804)					if (::hx::IsNotNull( inc_xml )) {
HXLINE( 806)						{
HXLINE( 806)							int _g = 0;
HXDLIN( 806)							::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(inc_xml,HX_("definition",93,d5,0d,ec));
HXDLIN( 806)							while((_g < _g1->length)){
HXLINE( 806)								 ::Xml def_data = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 806)								_g = (_g + 1);
HXLINE( 809)								::String def_name = (HX_("include:",12,65,27,66) + ::flixel::addons::ui::U_obj::xml_name(def_data));
HXLINE( 811)								this->unparentXML(def_data);
HXLINE( 813)								this->_definition_index->set(def_name,def_data);
            							}
            						}
HXLINE( 819)						if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(inc_xml,HX_("point_size",50,66,f5,4b))) {
HXLINE( 821)							this->_loadPointSize(inc_xml);
            						}
HXLINE( 824)						if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(inc_xml,HX_("default",c1,d8,c3,9b))) {
HXLINE( 826)							int _g = 0;
HXDLIN( 826)							::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(inc_xml,HX_("default",c1,d8,c3,9b));
HXDLIN( 826)							while((_g < _g1->length)){
HXLINE( 826)								 ::Xml defaultNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 826)								_g = (_g + 1);
HXLINE( 828)								if (this->_loadTest(defaultNode)) {
HXLINE( 830)									::String defaultName = ::flixel::addons::ui::U_obj::xml_name(defaultNode);
HXLINE( 832)									this->unparentXML(defaultNode);
HXLINE( 834)									this->_definition_index->set((HX_("default:",59,d0,99,af) + defaultName),defaultNode);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 844)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("point_size",50,66,f5,4b))) {
HXLINE( 846)				this->_loadPointSize(data);
            			}
HXLINE( 850)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("definition",93,d5,0d,ec))) {
HXLINE( 852)				int _g = 0;
HXDLIN( 852)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("definition",93,d5,0d,ec));
HXDLIN( 852)				while((_g < _g1->length)){
HXLINE( 852)					 ::Xml def_data = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 852)					_g = (_g + 1);
HXLINE( 854)					if (this->_loadTest(def_data)) {
HXLINE( 856)						::String def_name = ::flixel::addons::ui::U_obj::xml_name(def_data);
HXLINE( 857)						::String error = HX_("",00,00,00,00);
HXLINE( 858)						if ((def_name.indexOf(HX_("default:",59,d0,99,af),null()) != -1)) {
HXLINE( 860)							error = HX_("'default:'",a7,c0,54,42);
            						}
HXLINE( 862)						if ((def_name.indexOf(HX_("include:",12,65,27,66),null()) != -1)) {
HXLINE( 864)							error = HX_("'include:'",ce,4d,a9,47);
            						}
HXLINE( 866)						if ((error == HX_("",00,00,00,00))) {
HXLINE( 872)							this->unparentXML(def_data);
HXLINE( 874)							this->_definition_index->set(def_name,def_data);
            						}
            					}
            				}
            			}
HXLINE( 880)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("default",c1,d8,c3,9b))) {
HXLINE( 882)				int _g = 0;
HXDLIN( 882)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("default",c1,d8,c3,9b));
HXDLIN( 882)				while((_g < _g1->length)){
HXLINE( 882)					 ::Xml defaultNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 882)					_g = (_g + 1);
HXLINE( 884)					if (this->_loadTest(defaultNode)) {
HXLINE( 886)						::String defaultName = ::flixel::addons::ui::U_obj::xml_name(defaultNode);
HXLINE( 888)						this->unparentXML(defaultNode);
HXLINE( 890)						this->_definition_index->set((HX_("default:",59,d0,99,af) + defaultName),defaultNode);
            					}
            				}
            			}
HXLINE( 896)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("variable",3c,12,0d,69))) {
HXLINE( 898)				int _g = 0;
HXDLIN( 898)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("variable",3c,12,0d,69));
HXDLIN( 898)				while((_g < _g1->length)){
HXLINE( 898)					 ::Xml var_data = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 898)					_g = (_g + 1);
HXLINE( 900)					if (this->_loadTest(var_data)) {
HXLINE( 902)						::String var_name = ::flixel::addons::ui::U_obj::xml_name(var_data);
HXLINE( 903)						::String var_value = ::flixel::addons::ui::U_obj::xml_str(var_data,HX_("value",71,7f,b8,31),null(),null());
HXLINE( 904)						if ((var_name != HX_("",00,00,00,00))) {
HXLINE( 906)							this->_variable_index->set(var_name,var_value);
            						}
            					}
            				}
            			}
HXLINE( 913)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("mode",63,d3,60,48))) {
HXLINE( 915)				int _g = 0;
HXDLIN( 915)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("mode",63,d3,60,48));
HXDLIN( 915)				while((_g < _g1->length)){
HXLINE( 915)					 ::Xml mode_data = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 915)					_g = (_g + 1);
HXLINE( 917)					if (this->_loadTest(mode_data)) {
HXLINE( 919)						 ::Xml mode_data2 = this->applyNodeConditionals(mode_data);
HXLINE( 920)						::String mode_name = ::flixel::addons::ui::U_obj::xml_name(mode_data);
HXLINE( 923)						this->unparentXML(mode_data2);
HXLINE( 925)						this->_mode_index->set(mode_name,mode_data2);
            					}
            				}
            			}
HXLINE( 931)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("group",3f,b3,f4,99))) {
HXLINE( 933)				int _g = 0;
HXDLIN( 933)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("group",3f,b3,f4,99));
HXDLIN( 933)				while((_g < _g1->length)){
HXLINE( 933)					 ::Xml group_data = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 933)					_g = (_g + 1);
HXLINE( 935)					if (this->_loadTest(group_data)) {
HXLINE( 938)						::String name = ::flixel::addons::ui::U_obj::xml_name(group_data);
HXLINE( 939)						::String custom = ::flixel::addons::ui::U_obj::xml_str(group_data,HX_("custom",b1,87,92,3f),null(),null());
HXLINE( 941)						 ::flixel::addons::ui::FlxUIGroup tempGroup = null();
HXLINE( 944)						if ((custom != HX_("",00,00,00,00))) {
HXLINE( 946)							 ::Dynamic result = ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(this->_ptr,HX_("ui_get_group:",2f,b3,b6,b7),::hx::ObjectPtr<OBJ_>(this),custom,null());
HXLINE( 947)							bool _hx_tmp;
HXDLIN( 947)							if (::hx::IsNotNull( result )) {
HXLINE( 947)								_hx_tmp = ::Std_obj::isOfType(result,::hx::ClassOf< ::flixel::addons::ui::FlxUIGroup >());
            							}
            							else {
HXLINE( 947)								_hx_tmp = false;
            							}
HXDLIN( 947)							if (_hx_tmp) {
HXLINE( 949)								tempGroup = ( ( ::flixel::addons::ui::FlxUIGroup)(result) );
            							}
            						}
HXLINE( 953)						if (::hx::IsNull( tempGroup )) {
HXLINE( 955)							tempGroup =  ::flixel::addons::ui::FlxUIGroup_obj::__alloc( HX_CTX ,null(),null());
            						}
HXLINE( 958)						tempGroup->name = name;
HXLINE( 959)						this->_group_index->set(name,tempGroup);
HXLINE( 960)						this->add(tempGroup);
            					}
            				}
            			}
HXLINE( 965)			if (::hx::IsNotNull( data->firstElement() )) {
HXLINE( 968)				 ::Dynamic node = data->elements();
HXDLIN( 968)				while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 968)					 ::Xml node1 = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 970)					this->_loadSub(node1,null());
            				}
            			}
HXLINE( 974)			this->_postLoad(data);
            		}
            		else {
HXLINE( 978)			this->_onFinishLoad();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,load,(void))

 ::Xml FlxUI_obj::unparentXML( ::Xml f){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_984_unparentXML)
HXDLIN( 984)		return ::flixel::addons::ui::U_obj::unparentXML(f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,unparentXML,return )

void FlxUI_obj::_loadPointSize( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_988__loadPointSize)
HXLINE( 989)		Float ptx = this->_loadWidth(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("point_size",50,66,f5,4b)),((Float)-1.0),HX_("x",78,00,00,00),null());
HXLINE( 990)		Float pty = this->_loadHeight(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("point_size",50,66,f5,4b)),((Float)-1.0),HX_("y",79,00,00,00),null());
HXLINE( 993)		bool _hx_tmp;
HXDLIN( 993)		if ((pty < 1)) {
HXLINE( 993)			_hx_tmp = (ptx < 1);
            		}
            		else {
HXLINE( 993)			_hx_tmp = false;
            		}
HXDLIN( 993)		if (_hx_tmp) {
HXLINE( 995)			pty = this->_loadHeight(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("point_size",50,66,f5,4b)),-1,HX_("value",71,7f,b8,31),null());
HXLINE( 996)			ptx = pty;
            		}
HXLINE(1000)		if ((pty > 0)) {
HXLINE(1002)			this->_pointX = ptx;
            		}
HXLINE(1004)		if ((ptx > 0)) {
HXLINE(1006)			this->_pointY = pty;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadPointSize,(void))

void FlxUI_obj::_loadSub( ::Xml node,::hx::Null< int >  __o_iteration){
            		int iteration = __o_iteration.Default(0);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1011__loadSub)
HXLINE(1012)		if ((node->nodeType != ::Xml_obj::Element)) {
HXLINE(1012)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(node->nodeType))));
            		}
HXDLIN(1012)		::String type = node->nodeName;
HXLINE(1013)		type.toLowerCase();
HXLINE(1014)		bool _hx_tmp;
HXDLIN(1014)		if ((node->nodeType != ::Xml_obj::Document)) {
HXLINE(1014)			_hx_tmp = (node->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE(1014)			_hx_tmp = false;
            		}
HXDLIN(1014)		if (_hx_tmp) {
HXLINE(1014)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(node->nodeType))));
            		}
HXDLIN(1014)		 ::Xml this1 = node;
HXDLIN(1014)		 ::Xml obj = this1;
HXLINE(1018)		if ((type == HX_("load_if",96,33,eb,08))) {
HXLINE(1020)			if (this->_loadTest(obj)) {
HXLINE(1022)				if (::hx::IsNotNull( node->firstElement() )) {
HXLINE(1024)					 ::Dynamic subNode = node->elements();
HXDLIN(1024)					while(( (bool)(subNode->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1024)						 ::Xml subNode1 = ( ( ::Xml)(subNode->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1026)						this->_loadSub(subNode1,(iteration + 1));
            					}
            				}
            			}
HXLINE(1031)			return;
            		}
HXLINE(1034)		::String group_name = HX_("",00,00,00,00);
HXLINE(1035)		 ::flixel::addons::ui::FlxUIGroup tempGroup = null();
HXLINE(1037)		::String thing_name = ::flixel::addons::ui::U_obj::xml_name(obj);
HXLINE(1039)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(obj,HX_("group",3f,b3,f4,99))) {
HXLINE(1041)			group_name = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(obj,HX_("group",3f,b3,f4,99));
HXLINE(1042)			tempGroup = this->getGroup(group_name,null());
            		}
HXLINE(1046)		::Dynamic thing = this->_loadThing(type,obj);
HXLINE(1048)		if (::hx::IsNotNull( thing )) {
HXLINE(1050)			this->_loadGlobals(obj,thing);
HXLINE(1052)			bool _hx_tmp;
HXDLIN(1052)			if (::hx::IsNotNull( thing_name )) {
HXLINE(1052)				_hx_tmp = (thing_name != HX_("",00,00,00,00));
            			}
            			else {
HXLINE(1052)				_hx_tmp = false;
            			}
HXDLIN(1052)			if (_hx_tmp) {
HXLINE(1054)				this->_asset_index->set(thing_name,thing);
HXLINE(1057)				thing->__SetField(HX_("name",4b,72,ff,48),thing_name,::hx::paccDynamic);
HXLINE(1059)				::String thing_tags = ::flixel::addons::ui::U_obj::xml_str(obj,HX_("tags",d9,b4,f6,4c),null(),null());
HXLINE(1060)				if ((thing_tags != HX_("",00,00,00,00))) {
HXLINE(1062)					::Array< ::String > tagArr = thing_tags.split(HX_(",",2c,00,00,00));
HXLINE(1063)					this->_addTags(tagArr,thing_name);
            				}
            			}
HXLINE(1067)			this->_loadTooltip(thing,obj);
HXLINE(1069)			if (::hx::IsNotNull( tempGroup )) {
HXLINE(1071)				tempGroup->add(( ( ::flixel::FlxSprite)(thing) )).StaticCast<  ::flixel::FlxSprite >();
            			}
            			else {
HXLINE(1075)				this->add(( ( ::flixel::FlxSprite)(thing) ));
            			}
HXLINE(1078)			this->_loadPosition(obj,thing);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadSub,(void))

void FlxUI_obj::_addTags(::Array< ::String > arr,::String thingName){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1084__addTags)
HXDLIN(1084)		int _g = 0;
HXDLIN(1084)		while((_g < arr->length)){
HXDLIN(1084)			::String tag = arr->__get(_g);
HXDLIN(1084)			_g = (_g + 1);
HXLINE(1086)			::Array< ::String > list = null();
HXLINE(1087)			if (!(this->_tag_index->exists(tag))) {
HXLINE(1089)				this->_tag_index->set(tag,::Array_obj< ::String >::__new(0));
            			}
HXLINE(1091)			list = ( (::Array< ::String >)(this->_tag_index->get(tag)) );
HXLINE(1092)			if ((list->indexOf(thingName,null()) == -1)) {
HXLINE(1094)				list->push(thingName);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_addTags,(void))

void FlxUI_obj::_loadGlobals( ::Xml data, ::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1101__loadGlobals)
HXDLIN(1101)		if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::FlxBasic >())) {
HXLINE(1103)			bool isVis = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("visible",72,78,24,a3),true);
HXLINE(1104)			bool isActive = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("active",c6,41,46,16),true);
HXLINE(1105)			int numID = ::flixel::addons::ui::U_obj::xml_i(data,HX_("num_id",74,43,78,a1),null());
HXLINE(1107)			thing->__SetField(HX_("visible",72,78,24,a3),isVis,::hx::paccDynamic);
HXLINE(1108)			thing->__SetField(HX_("active",c6,41,46,16),isActive,::hx::paccDynamic);
HXLINE(1109)			thing->__SetField(HX_("ID",db,3f,00,00),numID,::hx::paccDynamic);
HXLINE(1110)			if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE(1112)				Float alpha = ::flixel::addons::ui::U_obj::xml_f(data,HX_("alpha",5e,a7,96,21),((Float)1.0));
HXLINE(1113)				 ::flixel::FlxSprite s = ( ( ::flixel::FlxSprite)(thing) );
HXLINE(1114)				s->set_alpha(alpha);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadGlobals,(void))

void FlxUI_obj::_postLoad( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1120__postLoad)
HXLINE(1121)		this->_postLoaded = true;
HXLINE(1122)		if (::hx::IsNotNull( data->firstElement() )) {
HXLINE(1125)			 ::Dynamic node = data->elements();
HXDLIN(1125)			while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1125)				 ::Xml node1 = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1127)				if ((node1->nodeType != ::Xml_obj::Element)) {
HXLINE(1127)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(node1->nodeType))));
            				}
HXDLIN(1127)				::String _hx_tmp = node1->nodeName.toLowerCase();
HXDLIN(1127)				bool _hx_tmp1;
HXDLIN(1127)				if ((node1->nodeType != ::Xml_obj::Document)) {
HXLINE(1127)					_hx_tmp1 = (node1->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE(1127)					_hx_tmp1 = false;
            				}
HXDLIN(1127)				if (_hx_tmp1) {
HXLINE(1127)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(node1->nodeType))));
            				}
HXDLIN(1127)				 ::Xml this1 = node1;
HXDLIN(1127)				this->_postLoadThing(_hx_tmp,this1);
            			}
            		}
HXLINE(1131)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("mode",63,d3,60,48))) {
HXLINE(1133)			int _g = 0;
HXDLIN(1133)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("mode",63,d3,60,48));
HXDLIN(1133)			while((_g < _g1->length)){
HXLINE(1133)				 ::Xml mode_node = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(1133)				_g = (_g + 1);
HXLINE(1135)				bool is_default = ::flixel::addons::ui::U_obj::xml_bool(mode_node,HX_("is_default",2c,88,79,76),null());
HXLINE(1136)				if (is_default) {
HXLINE(1138)					::String mode_name = ::flixel::addons::ui::U_obj::xml_name(mode_node);
HXLINE(1139)					this->setMode(mode_name,null());
HXLINE(1140)					goto _hx_goto_44;
            				}
            			}
            			_hx_goto_44:;
            		}
HXLINE(1145)		if (::hx::IsNotNull( this->_failure_checks )) {
HXLINE(1147)			{
HXLINE(1147)				int _g = 0;
HXDLIN(1147)				::Array< ::Dynamic> _g1 = this->_failure_checks;
HXDLIN(1147)				while((_g < _g1->length)){
HXLINE(1147)					 ::Xml data = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(1147)					_g = (_g + 1);
HXLINE(1149)					if (this->_checkFailure(data)) {
HXLINE(1151)						this->failed = true;
HXLINE(1152)						goto _hx_goto_45;
            					}
            				}
            				_hx_goto_45:;
            			}
HXLINE(1155)			::flixel::addons::ui::U_obj::clearArraySoft(this->_failure_checks);
HXLINE(1156)			this->_failure_checks = null();
            		}
HXLINE(1159)		this->_onFinishLoad();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_postLoad,(void))

void FlxUI_obj::_sendTo(::Dynamic thing,int dir){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1163__sendTo)
HXLINE(1164)		 ::flixel::addons::ui::FlxUIGroup group = this->getAssetGroup(null(),thing);
HXLINE(1165)		if (::hx::IsNull( group )) {
HXLINE(1167)			if ((this->group->members->indexOf(( ( ::flixel::FlxSprite)(thing) ),null()) != -1)) {
HXLINE(1169)				group = ::hx::ObjectPtr<OBJ_>(this);
            			}
            			else {
HXLINE(1173)				return;
            			}
            		}
HXLINE(1176)		bool _hx_tmp;
HXDLIN(1176)		if ((dir != -1)) {
HXLINE(1176)			_hx_tmp = (dir != 1);
            		}
            		else {
HXLINE(1176)			_hx_tmp = false;
            		}
HXDLIN(1176)		if (_hx_tmp) {
HXLINE(1178)			return;
            		}
HXLINE(1181)		group->group->members->remove(( ( ::flixel::FlxSprite)(thing) ));
HXLINE(1183)		switch((int)(dir)){
            			case (int)-1: {
HXLINE(1186)				group->group->members->insert(0,( ( ::flixel::FlxSprite)(thing) ));
            			}
            			break;
            			case (int)1: {
HXLINE(1188)				group->group->members->push(( ( ::flixel::FlxSprite)(thing) ));
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_sendTo,(void))

void FlxUI_obj::setMode(::String mode_name,::String __o_target_name){
            		::String target_name = __o_target_name;
            		if (::hx::IsNull(__o_target_name)) target_name = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1235_setMode)
HXLINE(1236)		if ((this->_curr_mode == mode_name)) {
HXLINE(1238)			return;
            		}
HXLINE(1240)		 ::Xml mode = this->getMode(mode_name,null());
HXLINE(1241)		this->_curr_mode = mode_name;
HXLINE(1242)		::String name = HX_("",00,00,00,00);
HXLINE(1243)		::Dynamic thing;
HXLINE(1244)		if ((target_name == HX_("",00,00,00,00))) {
HXLINE(1246)			if (::hx::IsNotNull( mode )) {
HXLINE(1248)				 ::Xml xml;
HXLINE(1249)				{
HXLINE(1249)					 ::Dynamic node = mode->elements();
HXDLIN(1249)					while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1249)						 ::Xml node1 = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1251)						 ::Xml node2 = this->applyNodeConditionals(node1);
HXLINE(1252)						xml = node2;
HXLINE(1254)						if ((xml->nodeType != ::Xml_obj::Element)) {
HXLINE(1254)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType))));
            						}
HXDLIN(1254)						::String nodeName = xml->nodeName;
HXLINE(1257)						 ::Dynamic activeStatus;
HXDLIN(1257)						if ((::flixel::addons::ui::U_obj::xml_str(xml,HX_("active",c6,41,46,16),null(),null()) == HX_("",00,00,00,00))) {
HXLINE(1257)							activeStatus = null();
            						}
            						else {
HXLINE(1257)							activeStatus = true;
            						}
HXLINE(1258)						if (::hx::IsNotNull( activeStatus )) {
HXLINE(1260)							activeStatus = ::flixel::addons::ui::U_obj::xml_bool(xml,HX_("active",c6,41,46,16),null());
            						}
HXLINE(1263)						if (this->_loadTest(node2)) {
HXLINE(1265)							::String _hx_switch_0 = nodeName;
            							if (  (_hx_switch_0==HX_("align",c5,56,91,21)) ){
HXLINE(1272)								this->_alignThing(node2,null());
HXDLIN(1272)								goto _hx_goto_49;
            							}
            							if (  (_hx_switch_0==HX_("change",70,91,72,b7)) ){
HXLINE(1274)								this->_changeThing(node2);
HXDLIN(1274)								goto _hx_goto_49;
            							}
            							if (  (_hx_switch_0==HX_("hide",c2,34,0e,45)) ){
HXLINE(1270)								this->showThing(::flixel::addons::ui::U_obj::xml_name(xml),false,activeStatus);
HXDLIN(1270)								goto _hx_goto_49;
            							}
            							if (  (_hx_switch_0==HX_("position",a9,a0,fa,ca)) ){
HXLINE(1276)								name = ::flixel::addons::ui::U_obj::xml_name(xml);
HXLINE(1277)								thing = this->getAsset(name,null());
HXLINE(1278)								if (::hx::IsNotNull( thing )) {
HXLINE(1280)									this->_loadPosition(node2,thing);
            								}
HXLINE(1275)								goto _hx_goto_49;
            							}
            							if (  (_hx_switch_0==HX_("show",fd,d4,52,4c)) ){
HXLINE(1268)								this->showThing(::flixel::addons::ui::U_obj::xml_name(xml),true,activeStatus);
HXDLIN(1268)								goto _hx_goto_49;
            							}
            							_hx_goto_49:;
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1289)			::Dynamic target = this->getAsset(target_name,null());
HXLINE(1290)			bool _hx_tmp;
HXDLIN(1290)			if (::hx::IsNotNull( target )) {
HXLINE(1290)				_hx_tmp = ::Std_obj::isOfType(target,::hx::ClassOf< ::flixel::addons::ui::FlxUI >());
            			}
            			else {
HXLINE(1290)				_hx_tmp = false;
            			}
HXDLIN(1290)			if (_hx_tmp) {
HXLINE(1292)				 ::flixel::addons::ui::FlxUI targetUI = ::hx::TCast<  ::flixel::addons::ui::FlxUI >::cast(target);
HXLINE(1293)				targetUI->setMode(mode_name,HX_("",00,00,00,00));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,setMode,(void))

void FlxUI_obj::showThing(::String name,::hx::Null< bool >  __o_visibleStatus, ::Dynamic activeStatus){
            		bool visibleStatus = __o_visibleStatus.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1300_showThing)
HXDLIN(1300)		if ((name.indexOf(HX_(",",2c,00,00,00),null()) != -1)) {
HXLINE(1302)			::Array< ::String > names = name.split(HX_(",",2c,00,00,00));
HXLINE(1303)			{
HXLINE(1303)				int _g = 0;
HXDLIN(1303)				while((_g < names->length)){
HXLINE(1303)					::String each_name = names->__get(_g);
HXDLIN(1303)					_g = (_g + 1);
HXLINE(1305)					::Dynamic thing = this->getAsset(each_name,null());
HXLINE(1306)					if (::hx::IsNotNull( thing )) {
HXLINE(1308)						::flixel::IFlxBasic_obj::set_visible(thing,visibleStatus);
HXLINE(1309)						if (::hx::IsNotNull( activeStatus )) {
HXLINE(1311)							::flixel::IFlxBasic_obj::set_active(thing,activeStatus);
            						}
            					}
            					else {
HXLINE(1316)						 ::flixel::addons::ui::FlxUIGroup group = this->getGroup(each_name,null());
HXLINE(1317)						if (::hx::IsNotNull( group )) {
HXLINE(1319)							group->set_visible(visibleStatus);
HXLINE(1320)							if (::hx::IsNotNull( activeStatus )) {
HXLINE(1322)								group->set_active(( (bool)(activeStatus) ));
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1330)			if ((name != HX_("*",2a,00,00,00))) {
HXLINE(1332)				::Dynamic thing = this->getAsset(name,null());
HXLINE(1333)				if (::hx::IsNotNull( thing )) {
HXLINE(1335)					::flixel::IFlxBasic_obj::set_visible(thing,visibleStatus);
HXLINE(1336)					if (::hx::IsNotNull( activeStatus )) {
HXLINE(1338)						::flixel::IFlxBasic_obj::set_active(thing,activeStatus);
            					}
            				}
            				else {
HXLINE(1343)					 ::flixel::addons::ui::FlxUIGroup group = this->getGroup(name,null());
HXLINE(1344)					if (::hx::IsNotNull( group )) {
HXLINE(1346)						group->set_visible(visibleStatus);
HXLINE(1347)						if (::hx::IsNotNull( activeStatus )) {
HXLINE(1349)							group->set_active(( (bool)(activeStatus) ));
            						}
            					}
            				}
            			}
            			else {
HXLINE(1356)				 ::Dynamic asset_name = this->_asset_index->keys();
HXDLIN(1356)				while(( (bool)(asset_name->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1356)					::String asset_name1 = ( (::String)(asset_name->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1358)					if ((asset_name1 != HX_("*",2a,00,00,00))) {
HXLINE(1360)						this->showThing(asset_name1,visibleStatus,activeStatus);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,showThing,(void))

 ::flixel::addons::ui::FlxUIGroup FlxUI_obj::getGroup(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1369_getGroup)
HXLINE(1370)		 ::flixel::addons::ui::FlxUIGroup tempGroup = ( ( ::flixel::addons::ui::FlxUIGroup)(this->_group_index->get(key)) );
HXLINE(1371)		bool _hx_tmp;
HXDLIN(1371)		bool _hx_tmp1;
HXDLIN(1371)		if (::hx::IsNull( tempGroup )) {
HXLINE(1371)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1371)			_hx_tmp1 = false;
            		}
HXDLIN(1371)		if (_hx_tmp1) {
HXLINE(1371)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1371)			_hx_tmp = false;
            		}
HXDLIN(1371)		if (_hx_tmp) {
HXLINE(1373)			return this->_superIndexUI->getGroup(key,recursive);
            		}
HXLINE(1375)		return tempGroup;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getGroup,return )

bool FlxUI_obj::hasAsset(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1412_hasAsset)
HXLINE(1413)		if (this->_asset_index->exists(key)) {
HXLINE(1415)			return true;
            		}
HXLINE(1417)		bool _hx_tmp;
HXDLIN(1417)		if (recursive) {
HXLINE(1417)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1417)			_hx_tmp = false;
            		}
HXDLIN(1417)		if (_hx_tmp) {
HXLINE(1419)			return this->_superIndexUI->hasAsset(key,recursive);
            		}
HXLINE(1421)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,hasAsset,return )

::Dynamic FlxUI_obj::getAsset(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1425_getAsset)
HXLINE(1426)		::Dynamic asset = this->_asset_index->get(key);
HXLINE(1427)		bool _hx_tmp;
HXDLIN(1427)		bool _hx_tmp1;
HXDLIN(1427)		if (::hx::IsNull( asset )) {
HXLINE(1427)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1427)			_hx_tmp1 = false;
            		}
HXDLIN(1427)		if (_hx_tmp1) {
HXLINE(1427)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1427)			_hx_tmp = false;
            		}
HXDLIN(1427)		if (_hx_tmp) {
HXLINE(1429)			return this->_superIndexUI->getAsset(key,recursive);
            		}
HXLINE(1431)		return asset;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getAsset,return )

 ::flixel::addons::ui::FlxUIGroup FlxUI_obj::getAssetGroup(::String key,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1462_getAssetGroup)
HXLINE(1463)		bool _hx_tmp;
HXDLIN(1463)		if (::hx::IsNull( thing )) {
HXLINE(1463)			if (::hx::IsNotNull( key )) {
HXLINE(1463)				_hx_tmp = (key == HX_("",00,00,00,00));
            			}
            			else {
HXLINE(1463)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(1463)			_hx_tmp = false;
            		}
HXDLIN(1463)		if (_hx_tmp) {
HXLINE(1464)			return null();
            		}
HXLINE(1465)		if (::hx::IsNull( thing )) {
HXLINE(1466)			thing = this->getAsset(key,null());
            		}
HXLINE(1467)		if (::hx::IsNull( thing )) {
HXLINE(1468)			return null();
            		}
HXLINE(1470)		{
HXLINE(1470)			 ::Dynamic key1 = this->_group_index->keys();
HXDLIN(1470)			while(( (bool)(key1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1470)				::String key = ( (::String)(key1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1472)				 ::flixel::addons::ui::FlxUIGroup g = ( ( ::flixel::addons::ui::FlxUIGroup)(this->_group_index->get(key)) );
HXLINE(1473)				if ((g->group->members->indexOf(( ( ::flixel::FlxSprite)(thing) ),null()) != -1)) {
HXLINE(1475)					return g;
            				}
            			}
            		}
HXLINE(1479)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getAssetGroup,return )

 ::Xml FlxUI_obj::getMode(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1483_getMode)
HXLINE(1484)		 ::Xml mode = ( ( ::Xml)(this->_mode_index->get(key)) );
HXLINE(1485)		bool _hx_tmp;
HXDLIN(1485)		bool _hx_tmp1;
HXDLIN(1485)		if (::hx::IsNull( mode )) {
HXLINE(1485)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1485)			_hx_tmp1 = false;
            		}
HXDLIN(1485)		if (_hx_tmp1) {
HXLINE(1485)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1485)			_hx_tmp = false;
            		}
HXDLIN(1485)		if (_hx_tmp) {
HXLINE(1487)			return this->_superIndexUI->getMode(key,recursive);
            		}
HXLINE(1489)		return mode;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getMode,return )

bool FlxUI_obj::checkVariable(::String key,::String otherValue,::String type,::String __o_op,::hx::Null< bool >  __o_recursive){
            		::String op = __o_op;
            		if (::hx::IsNull(__o_op)) op = HX_("==",60,35,00,00);
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1524_checkVariable)
HXLINE(1525)		::String variable = this->getVariable(key,recursive);
HXLINE(1526)		if (::hx::IsNotNull( variable )) {
HXLINE(1528)			return ::flixel::addons::ui::U_obj::compareStringVars(variable,otherValue,type,op);
            		}
            		else {
HXLINE(1532)			return ::flixel::addons::ui::U_obj::compareStringVars(HX_("",00,00,00,00),otherValue,type,op);
            		}
HXLINE(1526)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUI_obj,checkVariable,return )

void FlxUI_obj::setVariable(::String key,::String value){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1538_setVariable)
HXDLIN(1538)		this->_variable_index->set(key,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,setVariable,(void))

::String FlxUI_obj::getVariable(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1542_getVariable)
HXLINE(1543)		::String variable = this->_variable_index->get_string(key);
HXLINE(1544)		bool _hx_tmp;
HXDLIN(1544)		bool _hx_tmp1;
HXDLIN(1544)		if (::hx::IsNull( variable )) {
HXLINE(1544)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1544)			_hx_tmp1 = false;
            		}
HXDLIN(1544)		if (_hx_tmp1) {
HXLINE(1544)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1544)			_hx_tmp = false;
            		}
HXDLIN(1544)		if (_hx_tmp) {
HXLINE(1546)			variable = this->_superIndexUI->getVariable(key,recursive);
            		}
HXLINE(1548)		return variable;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getVariable,return )

 ::Xml FlxUI_obj::getDefinition(::String key,::hx::Null< bool >  __o_recursive){
            		bool recursive = __o_recursive.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1552_getDefinition)
HXLINE(1553)		 ::Xml definition = ( ( ::Xml)(this->_definition_index->get(key)) );
HXLINE(1554)		bool _hx_tmp;
HXDLIN(1554)		bool _hx_tmp1;
HXDLIN(1554)		if (::hx::IsNull( definition )) {
HXLINE(1554)			_hx_tmp1 = recursive;
            		}
            		else {
HXLINE(1554)			_hx_tmp1 = false;
            		}
HXDLIN(1554)		if (_hx_tmp1) {
HXLINE(1554)			_hx_tmp = ::hx::IsNotNull( this->_superIndexUI );
            		}
            		else {
HXLINE(1554)			_hx_tmp = false;
            		}
HXDLIN(1554)		if (_hx_tmp) {
HXLINE(1556)			definition = this->_superIndexUI->getDefinition(key,recursive);
            		}
HXLINE(1558)		if (::hx::IsNull( definition )) {
HXLINE(1560)			if ((key.indexOf(HX_("include:",12,65,27,66),null()) == -1)) {
HXLINE(1564)				definition = this->getDefinition((HX_("include:",12,65,27,66) + key),recursive);
            			}
            		}
HXLINE(1568)		return definition;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getDefinition,return )

int FlxUI_obj::screenWidth(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1602_screenWidth)
HXLINE(1603)		if (this->hasAsset(HX_("screen",6c,3b,5d,47),null())) {
HXLINE(1605)			return ::Std_obj::_hx_int(::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(this->getAsset(HX_("screen",6c,3b,5d,47),null())));
            		}
HXLINE(1607)		return ::flixel::FlxG_obj::width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,screenWidth,return )

Float FlxUI_obj::screenHeight(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1611_screenHeight)
HXLINE(1612)		if (this->hasAsset(HX_("height",e7,07,4c,02),null())) {
HXLINE(1614)			return ( (Float)(::Std_obj::_hx_int(::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(this->getAsset(HX_("screen",6c,3b,5d,47),null())))) );
            		}
HXLINE(1616)		return ( (Float)(::flixel::FlxG_obj::height) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,screenHeight,return )

 ::Xml FlxUI_obj::applyNodeConditionals( ::Xml info){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1716_applyNodeConditionals)
HXLINE(1717)		bool _hx_tmp;
HXDLIN(1717)		if (!(::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(info,HX_("locale",9a,74,bf,59)))) {
HXLINE(1717)			_hx_tmp = ::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(info,HX_("haxedef",5f,a1,7a,08));
            		}
            		else {
HXLINE(1717)			_hx_tmp = true;
            		}
HXDLIN(1717)		if (_hx_tmp) {
HXLINE(1719)			 ::Xml x = ::Xml_obj::parse(::haxe::xml::Printer_obj::print(info,null()))->firstElement();
HXDLIN(1719)			bool info1;
HXDLIN(1719)			if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE(1719)				info1 = (x->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(1719)				info1 = false;
            			}
HXDLIN(1719)			if (info1) {
HXLINE(1719)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType))));
            			}
HXDLIN(1719)			 ::Xml this1 = x;
HXDLIN(1719)			info = this1;
HXLINE(1721)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(info,HX_("locale",9a,74,bf,59))) {
HXLINE(1723)				info = this->applyNodeChanges(info,HX_("locale",9a,74,bf,59));
            			}
HXLINE(1726)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(info,HX_("haxedef",5f,a1,7a,08))) {
HXLINE(1728)				info = this->applyNodeChanges(info,HX_("haxedef",5f,a1,7a,08));
            			}
HXLINE(1731)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(info,HX_("window",f0,93,8c,52))) {
HXLINE(1733)				info = this->applyNodeChanges(info,HX_("window",f0,93,8c,52));
            			}
            		}
HXLINE(1736)		return info;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,applyNodeConditionals,return )

 ::Xml FlxUI_obj::applyNodeChanges( ::Xml data,::String nodeName){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1745_applyNodeChanges)
HXLINE(1748)		::String nodeValue = HX_("",00,00,00,00);
HXLINE(1751)		if ((nodeName == HX_("locale",9a,74,bf,59))) {
HXLINE(1753)			if (::hx::IsNull( this->_ptr_tongue )) {
HXLINE(1755)				return data;
            			}
HXLINE(1757)			nodeValue = ( (::String)(this->_ptr_tongue->__Field(HX_("locale",9a,74,bf,59),::hx::paccDynamic)) ).toLowerCase();
            		}
HXLINE(1761)		bool haxedef = false;
HXLINE(1762)		if ((nodeName == HX_("haxedef",5f,a1,7a,08))) {
HXLINE(1764)			haxedef = true;
            		}
HXLINE(1768)		if ((nodeName == HX_("window",f0,93,8c,52))) {
HXLINE(1770)			nodeValue = ((::flixel::FlxG_obj::width + HX_(",",2c,00,00,00)) + ::flixel::FlxG_obj::height);
            		}
HXLINE(1773)		{
HXLINE(1773)			int _g = 0;
HXDLIN(1773)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,nodeName);
HXDLIN(1773)			while((_g < _g1->length)){
HXLINE(1773)				 ::Xml cNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(1773)				_g = (_g + 1);
HXLINE(1775)				::String cname = ::flixel::addons::ui::U_obj::xml_name(cNode);
HXLINE(1777)				if (haxedef) {
HXLINE(1779)					nodeValue = HX_("",00,00,00,00);
HXLINE(1780)					if (::flixel::addons::ui::U_obj::checkHaxedef(cname)) {
HXLINE(1782)						nodeValue = cname;
            					}
            				}
HXLINE(1786)				if ((cname == nodeValue)) {
HXLINE(1788)					if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(cNode,HX_("change",70,91,72,b7))) {
HXLINE(1790)						int _g = 0;
HXDLIN(1790)						::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(cNode,HX_("change",70,91,72,b7));
HXDLIN(1790)						while((_g < _g1->length)){
HXLINE(1790)							 ::Xml change = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(1790)							_g = (_g + 1);
HXLINE(1792)							{
HXLINE(1792)								 ::Dynamic att = change->attributes();
HXDLIN(1792)								while(( (bool)(att->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1792)									::String att1 = ( (::String)(att->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1794)									::String value = change->get(att1);
HXLINE(1795)									data->set(att1,value);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1802)		return data;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,applyNodeChanges,return )

 ::Xml FlxUI_obj::_loadThingGetInfo( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1817__loadThingGetInfo)
HXLINE(1818)		 ::Xml _this = data;
HXDLIN(1818)		if ((_this->nodeType != ::Xml_obj::Element)) {
HXLINE(1818)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType))));
            		}
HXDLIN(1818)		::String nodeName = _this->nodeName;
HXLINE(1819)		 ::Xml defaultDef = this->getDefinition((HX_("default:",59,d0,99,af) + nodeName),null());
HXLINE(1824)		 ::Xml info = null();
HXLINE(1825)		if (::hx::IsNotNull( defaultDef )) {
HXLINE(1827)			info = ::flixel::addons::ui::FlxUI_obj::consolidateData(data,defaultDef,true);
            		}
HXLINE(1830)		if (::hx::IsNull( info )) {
HXLINE(1832)			info = data;
            		}
HXLINE(1835)		::String use_def = ::flixel::addons::ui::U_obj::xml_str(info,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(1836)		 ::Xml definition = null();
HXLINE(1837)		if ((use_def != HX_("",00,00,00,00))) {
HXLINE(1839)			definition = this->getDefinition(use_def,null());
            		}
HXLINE(1842)		info = ::flixel::addons::ui::FlxUI_obj::consolidateData(info,definition,null());
HXLINE(1843)		info = this->applyNodeConditionals(info);
HXLINE(1845)		if ((this->_loadTest(info) == false)) {
HXLINE(1847)			return null();
            		}
HXLINE(1850)		return info;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadThingGetInfo,return )

void FlxUI_obj::_loadTooltip(::Dynamic thing, ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1855__loadTooltip)
HXDLIN(1855)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("tooltip",03,ad,8c,6a))) {
HXLINE(1857)			 ::Dynamic tt = this->_loadTooltipData(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("tooltip",03,ad,8c,6a)));
HXLINE(1858)			::Dynamic state = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE(1860)			if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >())) {
HXLINE(1862)				 ::flixel::addons::ui::FlxUICheckBox check = ( ( ::flixel::addons::ui::FlxUICheckBox)(thing) );
HXLINE(1863)				( ( ::flixel::addons::ui::FlxUITooltipManager)(state->__Field(HX_("tooltips",10,b6,8a,d0),::hx::paccDynamic)) )->add(check->button,tt);
            			}
            			else {
HXLINE(1867)				( ( ::flixel::addons::ui::FlxUITooltipManager)(state->__Field(HX_("tooltips",10,b6,8a,d0),::hx::paccDynamic)) )->add(( ( ::flixel::FlxObject)(thing) ),tt);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadTooltip,(void))

 ::Dynamic FlxUI_obj::_loadTooltipData( ::Xml tNode){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1873__loadTooltipData)
HXLINE(1874)		 ::Dynamic tt =  ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("style",31,a5,1d,84), ::Dynamic(::hx::Anon_obj::Create(18)
            				->setFixed(0,HX_("bodyWidth",04,e0,6a,8a),-1)
            				->setFixed(1,HX_("titleFormat",ef,5a,1a,94),null())
            				->setFixed(2,HX_("autoSizeHorizontal",d4,74,ce,9f),null())
            				->setFixed(3,HX_("bodyOffset",d5,2b,5c,a7),null())
            				->setFixed(4,HX_("bodyBorder",2e,e1,36,ab),null())
            				->setFixed(5,HX_("rightPadding",55,e9,2b,bb),-1)
            				->setFixed(6,HX_("leftPadding",8a,98,10,d0),-1)
            				->setFixed(7,HX_("borderColor",d7,3c,d5,d6),null())
            				->setFixed(8,HX_("titleWidth",4e,c9,47,dc),-1)
            				->setFixed(9,HX_("titleOffset",4b,63,cb,f6),null())
            				->setFixed(10,HX_("titleBorder",a4,18,a6,fa),null())
            				->setFixed(11,HX_("borderSize",cd,ff,ed,06),-1)
            				->setFixed(12,HX_("arrow",c9,79,8f,25),null())
            				->setFixed(13,HX_("background",ee,93,1d,26),null())
            				->setFixed(14,HX_("bottomPadding",26,1e,2d,2b),-1)
            				->setFixed(15,HX_("topPadding",bc,47,4b,3c),-1)
            				->setFixed(16,HX_("bodyFormat",79,23,ab,44),null())
            				->setFixed(17,HX_("autoSizeVertical",66,58,0d,52),null())))
            			->setFixed(1,HX_("title",98,15,3b,10),HX_("",00,00,00,00))
            			->setFixed(2,HX_("body",a2,7a,1b,41),HX_("",00,00,00,00))
            			->setFixed(3,HX_("anchor",75,3a,71,60),null()));
HXLINE(1903)		 ::Xml defaultDef = this->getDefinition(HX_("default:tooltip",ca,89,56,af),null());
HXLINE(1904)		if (::hx::IsNotNull( defaultDef )) {
HXLINE(1906)			tNode = ::flixel::addons::ui::FlxUI_obj::consolidateData(tNode,defaultDef,true);
            		}
HXLINE(1909)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(tNode,HX_("use_def",8d,da,e9,62))) {
HXLINE(1911)			::String defStr = ::flixel::addons::ui::U_obj::xml_str(tNode,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(1912)			 ::Xml def = this->getDefinition(defStr,null());
HXLINE(1913)			if (::hx::IsNotNull( def )) {
HXLINE(1915)				tNode = ::flixel::addons::ui::FlxUI_obj::consolidateData(tNode,def,true);
            			}
            		}
HXLINE(1919)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(tNode,HX_("text",ad,cc,f9,4c))) {
HXLINE(1921)			this->_loadTooltipText(tNode,HX_("text",ad,cc,f9,4c),tt);
            		}
HXLINE(1924)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(tNode,HX_("title",98,15,3b,10))) {
HXLINE(1926)			this->_loadTooltipText(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(tNode,HX_("title",98,15,3b,10)),HX_("text",ad,cc,f9,4c),tt);
            		}
HXLINE(1928)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(tNode,HX_("body",a2,7a,1b,41))) {
HXLINE(1930)			this->_loadTooltipText(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(tNode,HX_("body",a2,7a,1b,41)),HX_("text",ad,cc,f9,4c),tt);
            		}
HXLINE(1933)		tt->__SetField(HX_("anchor",75,3a,71,60),this->_loadAnchor(tNode),::hx::paccDynamic);
HXLINE(1935)		this->_loadTooltipStyle(tNode,tt);
HXLINE(1937)		return tt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTooltipData,return )

void FlxUI_obj::_loadTooltipStyle( ::Xml node, ::Dynamic tt){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1941__loadTooltipStyle)
HXLINE(1942)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("background",ee,93,1d,26),::flixel::addons::ui::U_obj::xml_color(node,HX_("background",ee,93,1d,26),null(),null()),::hx::paccDynamic);
HXLINE(1943)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("borderSize",cd,ff,ed,06),::flixel::addons::ui::U_obj::xml_i(node,HX_("border",ec,4c,1a,64),-1),::hx::paccDynamic);
HXLINE(1944)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("borderColor",d7,3c,d5,d6),::flixel::addons::ui::U_obj::xml_color(node,HX_("border_color",90,7e,e8,6e),null(),null()),::hx::paccDynamic);
HXLINE(1946)		 ::Dynamic _hx_tmp;
HXDLIN(1946)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(node,HX_("arrow",c9,79,8f,25))) {
HXLINE(1946)			 ::Xml data = node;
HXDLIN(1946)			::String str = HX_("",00,00,00,00);
HXDLIN(1946)			if (::hx::IsNotNull( data->get(HX_("arrow",c9,79,8f,25)) )) {
HXLINE(1946)				str = data->get(HX_("arrow",c9,79,8f,25));
HXDLIN(1946)				bool _hx_tmp;
HXDLIN(1946)				if ((str != HX_("",00,00,00,00))) {
HXLINE(1946)					_hx_tmp = ::hx::IsNull( str );
            				}
            				else {
HXLINE(1946)					_hx_tmp = true;
            				}
HXDLIN(1946)				if (_hx_tmp) {
HXLINE(1946)					str = HX_("",00,00,00,00);
            				}
            				else {
HXLINE(1946)					str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(1946)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1946)						if (!(::openfl::utils::Assets_obj::exists(str,HX_("IMAGE",3b,57,57,3b)))) {
HXLINE(1946)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(((HX_("couldn't load bmp \"",73,a2,6e,30) + HX_("arrow",c9,79,8f,25)) + HX_("\"",22,00,00,00))));
            						}
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g = _hx_e;
HXLINE(   1)							{
HXLINE(   1)								null();
            							}
HXLINE(1946)							if (!(::Std_obj::isOfType(::haxe::Exception_obj::caught(_g)->unwrap(),::hx::ClassOf< ::String >()))) {
HXLINE(1946)								HX_STACK_DO_THROW(_g);
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
HXDLIN(1946)			_hx_tmp = str;
            		}
            		else {
HXLINE(1946)			_hx_tmp = null();
            		}
HXDLIN(1946)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("arrow",c9,79,8f,25),_hx_tmp,::hx::paccDynamic);
HXLINE(1948)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("autoSizeHorizontal",d4,74,ce,9f),::flixel::addons::ui::U_obj::xml_bool(node,HX_("auto_size_horizontal",d2,fe,ab,ff),true),::hx::paccDynamic);
HXLINE(1949)		 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("autoSizeVertical",66,58,0d,52),::flixel::addons::ui::U_obj::xml_bool(node,HX_("auto_size_vertical",e4,c6,93,30),true),::hx::paccDynamic);
HXLINE(1951)		int padAll = ::Std_obj::_hx_int(this->_loadHeight(node,-1,HX_("pad_all",f5,34,29,cd),null()));
HXLINE(1952)		if ((padAll != -1)) {
HXLINE(1954)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("leftPadding",8a,98,10,d0),( ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("rightPadding",55,e9,2b,bb),( ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("topPadding",bc,47,4b,3c),( ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bottomPadding",26,1e,2d,2b),padAll,::hx::paccDynamic)),::hx::paccDynamic)),::hx::paccDynamic)),::hx::paccDynamic);
            		}
            		else {
HXLINE(1958)			Float _hx_tmp = this->_loadWidth(node,0,HX_("pad_left",b3,25,25,be),null());
HXDLIN(1958)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("leftPadding",8a,98,10,d0),::Std_obj::_hx_int(_hx_tmp),::hx::paccDynamic);
HXLINE(1959)			Float _hx_tmp1 = this->_loadWidth(node,0,HX_("pad_right",b0,e4,68,19),null());
HXDLIN(1959)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("rightPadding",55,e9,2b,bb),::Std_obj::_hx_int(_hx_tmp1),::hx::paccDynamic);
HXLINE(1960)			Float _hx_tmp2 = this->_loadHeight(node,0,HX_("pad_top",69,a2,37,cd),null());
HXDLIN(1960)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("topPadding",bc,47,4b,3c),::Std_obj::_hx_int(_hx_tmp2),::hx::paccDynamic);
HXLINE(1961)			Float _hx_tmp3 = this->_loadHeight(node,0,HX_("pad_bottom",97,c7,b1,39),null());
HXDLIN(1961)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bottomPadding",26,1e,2d,2b),::Std_obj::_hx_int(_hx_tmp3),::hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadTooltipStyle,(void))

void FlxUI_obj::_loadTooltipText( ::Xml node,::String fieldName, ::Dynamic tt){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_1966__loadTooltipText)
HXLINE(1967)		::String nodeName;
HXDLIN(1967)		if ((node->nodeType == ::Xml_obj::Document)) {
HXLINE(1967)			nodeName = HX_("Document",3b,ab,c4,74);
            		}
            		else {
HXLINE(1967)			if ((node->nodeType != ::Xml_obj::Element)) {
HXLINE(1967)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(node->nodeType))));
            			}
HXDLIN(1967)			nodeName = node->nodeName;
            		}
HXLINE(1968)		::String text = this->_loadString(node,fieldName);
HXLINE(1970)		Float offset = this->_loadWidth(node,( (Float)(0) ),HX_("x",78,00,00,00),null());
HXDLIN(1970)		 ::flixel::math::FlxPoint offset1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,offset,this->_loadHeight(node,( (Float)(0) ),HX_("y",79,00,00,00),null()));
HXLINE(1972)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(node,HX_("use_def",8d,da,e9,62))) {
HXLINE(1974)			::String use_def = ::flixel::addons::ui::U_obj::xml_str(node,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(1975)			 ::Xml the_def = this->getDefinition(use_def,null());
HXLINE(1976)			if (::hx::IsNotNull( the_def )) {
HXLINE(1978)				node = ::flixel::addons::ui::FlxUI_obj::consolidateData(node,the_def,null());
            			}
            		}
HXLINE(1982)		 ::flixel::addons::ui::BorderDef border = this->_loadBorder(node);
HXLINE(1983)		 ::flixel::addons::ui::FontDef format = this->_loadFontDef(node);
HXLINE(1984)		 ::Dynamic color = ::flixel::addons::ui::U_obj::xml_color(node,HX_("color",63,71,5c,4a),true,-16777216);
HXLINE(1985)		format->format->color = color;
HXLINE(1987)		int W = ::Std_obj::_hx_int(this->_loadWidth(node,-1,HX_("width",06,b6,62,ca),null()));
HXLINE(1989)		::String _hx_switch_0 = nodeName;
            		if (  (_hx_switch_0==HX_("body",a2,7a,1b,41)) ){
HXLINE(2001)			if ((text != HX_("",00,00,00,00))) {
HXLINE(2003)				tt->__SetField(HX_("body",a2,7a,1b,41),text,::hx::paccDynamic);
            			}
HXLINE(2005)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bodyOffset",d5,2b,5c,a7),offset1,::hx::paccDynamic);
HXLINE(2006)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bodyFormat",79,23,ab,44),format,::hx::paccDynamic);
HXLINE(2007)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bodyWidth",04,e0,6a,8a),W,::hx::paccDynamic);
HXLINE(2008)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("bodyBorder",2e,e1,36,ab),border,::hx::paccDynamic);
HXLINE(2000)			goto _hx_goto_75;
            		}
            		if (  (_hx_switch_0==HX_("title",98,15,3b,10)) ||  (_hx_switch_0==HX_("tooltip",03,ad,8c,6a)) ){
HXLINE(1992)			if ((text != HX_("",00,00,00,00))) {
HXLINE(1994)				tt->__SetField(HX_("title",98,15,3b,10),text,::hx::paccDynamic);
            			}
HXLINE(1996)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("titleOffset",4b,63,cb,f6),offset1,::hx::paccDynamic);
HXLINE(1997)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("titleFormat",ef,5a,1a,94),format,::hx::paccDynamic);
HXLINE(1998)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("titleWidth",4e,c9,47,dc),W,::hx::paccDynamic);
HXLINE(1999)			 ::Dynamic(tt->__Field(HX_("style",31,a5,1d,84),::hx::paccDynamic))->__SetField(HX_("titleBorder",a4,18,a6,fa),border,::hx::paccDynamic);
HXLINE(1991)			goto _hx_goto_75;
            		}
            		/* default */{
            		}
            		_hx_goto_75:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_loadTooltipText,(void))

 ::flixel::addons::ui::Anchor FlxUI_obj::_loadAnchor( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2015__loadAnchor)
HXLINE(2016)		Float xOff = this->_loadWidth(data,( (Float)(0) ),HX_("x",78,00,00,00),null());
HXLINE(2017)		Float yOff = this->_loadHeight(data,( (Float)(0) ),HX_("y",79,00,00,00),null());
HXLINE(2018)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60))) {
HXLINE(2020)			::String xSide = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("x",78,00,00,00),true,HX_("right",dc,0b,64,e9));
HXLINE(2021)			::String ySide = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("y",79,00,00,00),true,HX_("top",95,66,58,00));
HXLINE(2022)			::String xFlush = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("x-flush",ef,49,ba,7e),true,HX_("left",07,08,b0,47));
HXLINE(2023)			::String yFlush = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("y-flush",b0,c0,4f,a8),true,HX_("top",95,66,58,00));
HXLINE(2024)			return  ::flixel::addons::ui::Anchor_obj::__alloc( HX_CTX ,xOff,yOff,xSide,ySide,xFlush,yFlush);
            		}
HXLINE(2026)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadAnchor,return )

::Dynamic FlxUI_obj::_loadThing(::String type, ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2030__loadThing)
HXLINE(2031)		 ::Xml info = this->_loadThingGetInfo(data);
HXLINE(2032)		if (::hx::IsNull( info )) {
HXLINE(2034)			return null();
            		}
HXLINE(2037)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("align",c5,56,91,21)) ){
HXLINE(2085)			this->_alignThing(info,true);
HXLINE(2086)			return null();
HXLINE(2084)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("bar",d3,b1,4a,00)) ){
HXLINE(2052)			return this->_loadBar(info);
HXDLIN(2052)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("box",0b,be,4a,00)) ){
HXLINE(2048)			return this->_loadBox(info);
HXDLIN(2048)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("button",f2,61,e0,d9)) ){
HXLINE(2060)			return this->_loadButton(info,null(),null(),null());
HXDLIN(2060)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("button_toggle",81,71,c8,4e)) ){
HXLINE(2062)			return this->_loadButton(info,true,true,null());
HXDLIN(2062)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("change",70,91,72,b7)) ){
HXLINE(2090)			this->_changeThing(info);
HXLINE(2091)			return null();
HXLINE(2089)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("checkbox",43,d2,f5,ac)) ){
HXLINE(2071)			return this->_loadCheckBox(info);
HXDLIN(2071)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("failure",4a,70,fa,16)) ){
HXLINE(2077)			if (::hx::IsNull( this->_failure_checks )) {
HXLINE(2079)				this->_failure_checks = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE(2081)			this->unparentXML(info);
HXLINE(2082)			this->_failure_checks->push(info);
HXLINE(2083)			return null();
HXLINE(2076)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("input_text",42,40,18,eb)) ){
HXLINE(2056)			return this->_loadInputText(info);
HXDLIN(2056)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("line",f4,17,b3,47)) ){
HXLINE(2046)			return this->_loadLine(info);
HXDLIN(2046)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("default",c1,d8,c3,9b)) ||  (_hx_switch_0==HX_("group",3f,b3,f4,99)) ||  (_hx_switch_0==HX_("include",28,fe,f6,51)) ||  (_hx_switch_0==HX_("inject",91,4a,ea,97)) ||  (_hx_switch_0==HX_("load_if",96,33,eb,08)) ||  (_hx_switch_0==HX_("mode",63,d3,60,48)) ){
HXLINE(2088)			return null();
HXDLIN(2088)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("chrome",7a,f9,af,c2)) ||  (_hx_switch_0==HX_("nine_slice",45,82,57,9b)) ||  (_hx_switch_0==HX_("nine_slice_sprite",ff,6d,22,c8)) ||  (_hx_switch_0==HX_("nineslice",e0,29,78,d8)) ||  (_hx_switch_0==HX_("nineslicesprite",e5,ad,da,98)) ){
HXLINE(2042)			return this->_load9SliceSprite(info,null());
HXDLIN(2042)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("num_stepper",d8,f2,7c,cd)) ||  (_hx_switch_0==HX_("numeric_stepper",5f,56,dc,30)) ||  (_hx_switch_0==HX_("numstepper",8b,1b,2f,e4)) ){
HXLINE(2058)			return this->_loadNumericStepper(info,null());
HXDLIN(2058)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("position",a9,a0,fa,ca)) ){
HXLINE(2093)			this->name = ::flixel::addons::ui::U_obj::xml_name(info);
HXLINE(2094)			::Dynamic thing = this->getAsset(this->name,null());
HXLINE(2095)			if (::hx::IsNotNull( thing )) {
HXLINE(2097)				this->_loadPosition(info,thing);
            			}
HXLINE(2099)			return null();
HXLINE(2092)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("dropdown",11,74,2f,fd)) ||  (_hx_switch_0==HX_("dropdown_menu",cd,8f,c7,05)) ||  (_hx_switch_0==HX_("pulldown",a7,ca,a0,a7)) ||  (_hx_switch_0==HX_("pulldown_menu",77,99,46,8c)) ){
HXLINE(2068)			return this->_loadDropDownMenu(info);
HXDLIN(2068)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("radio_group",bb,79,eb,b8)) ){
HXLINE(2073)			return this->_loadRadioGroup(info);
HXDLIN(2073)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("region",f4,c0,8c,00)) ){
HXLINE(2040)			return this->_loadRegion(info);
HXDLIN(2040)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("sprite",05,dc,95,c3)) ){
HXLINE(2050)			return this->_loadSprite(info);
HXDLIN(2050)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("tab_menu",09,73,e1,d6)) ){
HXLINE(2065)			return this->_loadTabMenu(info);
HXDLIN(2065)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("text",ad,cc,f9,4c)) ){
HXLINE(2054)			return this->_loadText(info);
HXDLIN(2054)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("tile_test",43,d2,38,f8)) ){
HXLINE(2044)			return this->_loadTileTest(info);
HXDLIN(2044)			goto _hx_goto_78;
            		}
            		if (  (_hx_switch_0==HX_("layout",aa,ae,b8,58)) ||  (_hx_switch_0==HX_("ui",54,66,00,00)) ){
HXLINE(2075)			return this->_loadLayout(info);
HXDLIN(2075)			goto _hx_goto_78;
            		}
            		/* default */{
HXLINE(2103)			::Dynamic result = ::flixel::addons::ui::interfaces::IEventGetter_obj::getRequest(this->_ptr,(HX_("ui_get:",ef,47,3b,f4) + type),::hx::ObjectPtr<OBJ_>(this),info,::cpp::VirtualArray_obj::__new(1)->init(0,data));
HXLINE(2104)			return result;
            		}
            		_hx_goto_78:;
HXLINE(2037)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadThing,return )

Float FlxUI_obj::_loadScale( ::Xml data,::hx::Null< Float >  __o_default_,::String __o_str){
            		Float default_ = __o_default_.Default(((Float)1.0));
            		::String str = __o_str;
            		if (::hx::IsNull(__o_str)) str = HX_("scale",8a,ce,ce,78);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2122__loadScale)
HXDLIN(2122)		return this->_loadHeight(data,default_,str,HX_("none",b8,12,0a,49));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_loadScale,return )

Float FlxUI_obj::_loadScaleX( ::Xml data,::hx::Null< Float >  __o_default_){
            		Float default_ = __o_default_.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2127__loadScaleX)
HXDLIN(2127)		return this->_loadWidth(data,default_,HX_("scale_x",43,58,07,65),HX_("none",b8,12,0a,49));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadScaleX,return )

Float FlxUI_obj::_loadScaleY( ::Xml data,::hx::Null< Float >  __o_default_){
            		Float default_ = __o_default_.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2132__loadScaleY)
HXDLIN(2132)		return this->_loadHeight(data,default_,HX_("scale_y",44,58,07,65),HX_("none",b8,12,0a,49));
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadScaleY,return )

Float FlxUI_obj::_loadWidth( ::Xml data,::hx::Null< Float >  __o_default_,::String __o_str,::String __o_defaultRound){
            		Float default_ = __o_default_.Default(10);
            		::String str = __o_str;
            		if (::hx::IsNull(__o_str)) str = HX_("width",06,b6,62,ca);
            		::String defaultRound = __o_defaultRound;
            		if (::hx::IsNull(__o_defaultRound)) defaultRound = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2136__loadWidth)
HXLINE(2137)		::String ws = ::flixel::addons::ui::U_obj::xml_str(data,str,true,::Std_obj::string(default_));
HXLINE(2138)		 ::flixel::addons::ui::Rounding round = this->getRound(data,defaultRound);
HXLINE(2139)		return this->doRound(this->_getDataSize(HX_("w",77,00,00,00),ws,default_),round);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,_loadWidth,return )

Float FlxUI_obj::_loadHeight( ::Xml data,::hx::Null< Float >  __o_default_,::String __o_str,::String __o_defaultRound){
            		Float default_ = __o_default_.Default(10);
            		::String str = __o_str;
            		if (::hx::IsNull(__o_str)) str = HX_("height",e7,07,4c,02);
            		::String defaultRound = __o_defaultRound;
            		if (::hx::IsNull(__o_defaultRound)) defaultRound = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2143__loadHeight)
HXLINE(2144)		::String hs = ::flixel::addons::ui::U_obj::xml_str(data,str,true,::Std_obj::string(default_));
HXLINE(2145)		 ::flixel::addons::ui::Rounding round = this->getRound(data,defaultRound);
HXLINE(2146)		return this->doRound(this->_getDataSize(HX_("h",68,00,00,00),hs,default_),round);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,_loadHeight,return )

 ::flixel::math::FlxPoint FlxUI_obj::_loadCompass( ::Xml data,::String __o_str){
            		::String str = __o_str;
            		if (::hx::IsNull(__o_str)) str = HX_("resize_point",85,44,f0,71);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2150__loadCompass)
HXLINE(2151)		::String cs = ::flixel::addons::ui::U_obj::xml_str(data,str,true,HX_("nw",49,60,00,00));
HXLINE(2152)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(2152)		point->_inPool = false;
HXDLIN(2152)		 ::flixel::math::FlxPoint fp = point;
HXLINE(2153)		::String _hx_switch_0 = cs;
            		if (  (_hx_switch_0==HX_("c",63,00,00,00)) ||  (_hx_switch_0==HX_("center",d5,25,db,05)) ||  (_hx_switch_0==HX_("m",6d,00,00,00)) ||  (_hx_switch_0==HX_("mid",88,11,53,00)) ){
HXLINE(2180)			fp->set_x(((Float)0.5));
HXLINE(2181)			fp->set_y(((Float)0.5));
HXLINE(2179)			goto _hx_goto_85;
            		}
            		if (  (_hx_switch_0==HX_("ll",80,5e,00,00)) ||  (_hx_switch_0==HX_("sw",a4,64,00,00)) ){
HXLINE(2174)			fp->set_x(( (Float)(0) ));
HXLINE(2175)			fp->set_y(( (Float)(1) ));
HXLINE(2173)			goto _hx_goto_85;
            		}
            		if (  (_hx_switch_0==HX_("n",6e,00,00,00)) ||  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(2159)			fp->set_x(((Float)0.5));
HXLINE(2160)			fp->set_y(( (Float)(0) ));
HXLINE(2158)			goto _hx_goto_85;
            		}
            		if (  (_hx_switch_0==HX_("nw",49,60,00,00)) ||  (_hx_switch_0==HX_("ul",57,66,00,00)) ){
HXLINE(2156)			fp->set_x(( (Float)(0) ));
HXLINE(2157)			fp->set_y(( (Float)(0) ));
HXLINE(2155)			goto _hx_goto_85;
            		}
            		if (  (_hx_switch_0==HX_("e",65,00,00,00)) ||  (_hx_switch_0==HX_("r",72,00,00,00)) ){
HXLINE(2165)			fp->set_x(( (Float)(1) ));
HXLINE(2166)			fp->set_y(((Float)0.5));
HXLINE(2164)			goto _hx_goto_85;
            		}
            		if (  (_hx_switch_0==HX_("s",73,00,00,00)) ){
HXLINE(2171)			fp->set_x(((Float)0.5));
HXLINE(2172)			fp->set_y(( (Float)(1) ));
HXLINE(2170)			goto _hx_goto_85;
            		}
            		if (  (_hx_switch_0==HX_("lr",86,5e,00,00)) ||  (_hx_switch_0==HX_("se",92,64,00,00)) ){
HXLINE(2168)			fp->set_x(( (Float)(1) ));
HXLINE(2169)			fp->set_y(( (Float)(1) ));
HXLINE(2167)			goto _hx_goto_85;
            		}
            		if (  (_hx_switch_0==HX_("ne",37,60,00,00)) ||  (_hx_switch_0==HX_("ur",5d,66,00,00)) ){
HXLINE(2162)			fp->set_x(( (Float)(1) ));
HXLINE(2163)			fp->set_y(( (Float)(0) ));
HXLINE(2161)			goto _hx_goto_85;
            		}
            		if (  (_hx_switch_0==HX_("w",77,00,00,00)) ){
HXLINE(2177)			fp->set_x(((Float)0.5));
HXLINE(2178)			fp->set_y(( (Float)(0) ));
HXLINE(2176)			goto _hx_goto_85;
            		}
            		_hx_goto_85:;
HXLINE(2183)		return fp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadCompass,return )

void FlxUI_obj::_changeThing( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2205__changeThing)
HXLINE(2206)		::String name = ::flixel::addons::ui::U_obj::xml_name(data);
HXLINE(2207)		::Dynamic thing = this->getAsset(name,null());
HXLINE(2208)		if (::hx::IsNull( thing )) {
HXLINE(2210)			return;
            		}
HXLINE(2213)		Float new_width = ( (Float)(-1) );
HXLINE(2214)		Float new_height = ( (Float)(-1) );
HXLINE(2216)		::String context = HX_("",00,00,00,00);
HXLINE(2217)		::String code = HX_("",00,00,00,00);
HXLINE(2219)		{
HXLINE(2219)			 ::Dynamic attribute = data->attributes();
HXDLIN(2219)			while(( (bool)(attribute->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2219)				::String attribute1 = ( (::String)(attribute->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2221)				::String _hx_switch_0 = attribute1;
            				if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(2245)					new_height = this->_loadHeight(data,null(),null(),null());
HXDLIN(2245)					goto _hx_goto_88;
            				}
            				if (  (_hx_switch_0==HX_("label",f4,0d,af,6f)) ){
HXLINE(2233)					::String label = ::flixel::addons::ui::U_obj::xml_str(data,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(2234)					context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2235)					code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2236)					label = this->getText(label,context,true,code);
HXLINE(2237)					if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::interfaces::ILabeled >())) {
HXLINE(2239)						::Dynamic b = thing;
HXLINE(2240)						::flixel::addons::ui::interfaces::ILabeled_obj::getLabel(b)->set_text(label);
            					}
HXLINE(2232)					goto _hx_goto_88;
            				}
            				if (  (_hx_switch_0==HX_("text",ad,cc,f9,4c)) ){
HXLINE(2224)					if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(2226)						::String text = ::flixel::addons::ui::U_obj::xml_str(data,HX_("text",ad,cc,f9,4c),null(),null());
HXLINE(2227)						context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2228)						 ::flixel::addons::ui::FlxUIText t = ( ( ::flixel::addons::ui::FlxUIText)(thing) );
HXLINE(2229)						code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2230)						t->set_text(this->getText(text,context,true,code));
            					}
HXLINE(2224)					goto _hx_goto_88;
            				}
            				if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(2243)					new_width = this->_loadWidth(data,null(),null(),null());
HXDLIN(2243)					goto _hx_goto_88;
            				}
            				_hx_goto_88:;
            			}
            		}
HXLINE(2248)		if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2250)			::Dynamic ir = thing;
HXLINE(2251)			bool _hx_tmp;
HXDLIN(2251)			if ((new_width == -1)) {
HXLINE(2251)				_hx_tmp = (new_height != -1);
            			}
            			else {
HXLINE(2251)				_hx_tmp = true;
            			}
HXDLIN(2251)			if (_hx_tmp) {
HXLINE(2253)				if ((new_width == -1)) {
HXLINE(2255)					new_width = ::flixel::addons::ui::interfaces::IResizable_obj::get_width(ir);
            				}
HXLINE(2257)				if ((new_height == -1)) {
HXLINE(2259)					new_height = ::flixel::addons::ui::interfaces::IResizable_obj::get_height(ir);
            				}
HXLINE(2261)				::flixel::addons::ui::interfaces::IResizable_obj::resize(ir,new_width,new_height);
            			}
            		}
HXLINE(2265)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2267)			if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::interfaces::IHasParams >())) {
HXLINE(2269)				::Dynamic ihp = thing;
HXLINE(2270)				::cpp::VirtualArray params = null();
HXDLIN(2270)				if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2270)					params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2270)					{
HXLINE(2270)						int _g = 0;
HXDLIN(2270)						::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(2270)						while((_g < _g1->length)){
HXLINE(2270)							 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2270)							_g = (_g + 1);
HXDLIN(2270)							bool _hx_tmp;
HXDLIN(2270)							if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(2270)								_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            							}
            							else {
HXLINE(2270)								_hx_tmp = false;
            							}
HXDLIN(2270)							if (_hx_tmp) {
HXLINE(2270)								::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(2270)								type = type.toLowerCase();
HXDLIN(2270)								::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(2270)								 ::Dynamic value = valueStr;
HXDLIN(2270)								int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(2270)								::String _hx_switch_1 = type;
            								if (  (_hx_switch_1==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_1==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2270)									::String str = ::String(valueStr);
HXDLIN(2270)									str = str.toLowerCase();
HXDLIN(2270)									bool _hx_tmp;
HXDLIN(2270)									if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2270)										_hx_tmp = (str == HX_("1",31,00,00,00));
            									}
            									else {
HXLINE(2270)										_hx_tmp = true;
            									}
HXDLIN(2270)									if (_hx_tmp) {
HXLINE(2270)										value = true;
            									}
            									else {
HXLINE(2270)										value = false;
            									}
HXDLIN(2270)									goto _hx_goto_90;
            								}
            								if (  (_hx_switch_1==HX_("color",63,71,5c,4a)) ||  (_hx_switch_1==HX_("hex",db,42,4f,00)) ){
HXLINE(2270)									 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2270)									if (::hx::IsNull( return_val )) {
HXLINE(2270)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr)));
            									}
HXDLIN(2270)									value = return_val;
HXDLIN(2270)									goto _hx_goto_90;
            								}
            								if (  (_hx_switch_1==HX_("float",9c,c5,96,02)) ){
HXLINE(2270)									value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2270)									goto _hx_goto_90;
            								}
            								if (  (_hx_switch_1==HX_("int",ef,0c,50,00)) ){
HXLINE(2270)									value = ::Std_obj::parseInt(valueStr);
HXDLIN(2270)									goto _hx_goto_90;
            								}
            								if (  (_hx_switch_1==HX_("string",d1,28,30,11)) ){
HXLINE(2270)									value = ::String(valueStr);
HXDLIN(2270)									goto _hx_goto_90;
            								}
            								_hx_goto_90:;
HXDLIN(2270)								params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("value",71,7f,b8,31),value)
            									->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            							}
            						}
            					}
HXDLIN(2270)					params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2270)					{
HXLINE(2270)						int _g2 = 0;
HXDLIN(2270)						int _g3 = params->get_length();
HXDLIN(2270)						while((_g2 < _g3)){
HXLINE(2270)							_g2 = (_g2 + 1);
HXDLIN(2270)							int i = (_g2 - 1);
HXDLIN(2270)							params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            						}
            					}
            				}
HXDLIN(2270)				::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_changeThing,(void))

void FlxUI_obj::_alignThing( ::Xml data,::hx::Null< bool >  __o_suppressError){
            		bool suppressError = __o_suppressError.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2277__alignThing)
HXDLIN(2277)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("objects",d4,68,4f,82))) {
HXLINE(2279)			int _g = 0;
HXDLIN(2279)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("objects",d4,68,4f,82));
HXDLIN(2279)			while((_g < _g1->length)){
HXLINE(2279)				 ::Xml objectNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2279)				_g = (_g + 1);
HXLINE(2281)				::Array< ::String > objects = ::flixel::addons::ui::U_obj::xml_str(objectNode,HX_("value",71,7f,b8,31),true,HX_("",00,00,00,00)).split(HX_(",",2c,00,00,00));
HXLINE(2283)				::String axis = ::flixel::addons::ui::U_obj::xml_str(data,HX_("axis",a1,1c,79,40),true,null());
HXLINE(2284)				bool _hx_tmp;
HXDLIN(2284)				if ((axis != HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2284)					_hx_tmp = (axis != HX_("vertical",76,bc,15,6a));
            				}
            				else {
HXLINE(2284)					_hx_tmp = false;
            				}
HXDLIN(2284)				if (_hx_tmp) {
HXLINE(2286)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._alignThing(): axis must be \"horizontal\" or \"vertical\"!",a0,ea,67,82),null())));
            				}
HXLINE(2290)				Float spacing = ( (Float)(-1) );
HXLINE(2291)				if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2293)					spacing = this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(data,HX_("spacing",83,33,bb,91),true,null()),-1);
            				}
            				else {
HXLINE(2297)					spacing = this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data,HX_("spacing",83,33,bb,91),true,null()),-1);
            				}
HXLINE(2300)				bool resize = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("resize",f4,59,7b,08),null());
HXLINE(2302)				bool grow = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("grow",13,dc,6b,44),true);
HXLINE(2303)				bool shrink = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("shrink",c9,32,61,28),true);
HXLINE(2305)				 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(-1,-1);
HXDLIN(2305)				point->_inPool = false;
HXDLIN(2305)				 ::flixel::math::FlxPoint bounds = point;
HXLINE(2307)				::String boundsError = HX_("",00,00,00,00);
HXLINE(2309)				if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("bounds",75,86,1d,66))) {
HXLINE(2311)					if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2313)						bounds->set_x(this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("bounds",75,86,1d,66)),HX_("left",07,08,b0,47),null(),null()),-1));
HXLINE(2314)						bounds->set_y(this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("bounds",75,86,1d,66)),HX_("right",dc,0b,64,e9),null(),null()),-1));
            					}
            					else {
HXLINE(2316)						if ((axis == HX_("vertical",76,bc,15,6a))) {
HXLINE(2318)							bounds->set_x(this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("bounds",75,86,1d,66)),HX_("top",95,66,58,00),null(),null()),-1));
HXLINE(2319)							bounds->set_y(this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("bounds",75,86,1d,66)),HX_("bottom",eb,e6,78,65),null(),null()),-1));
            						}
            					}
            				}
HXLINE(2323)				bool _hx_tmp1;
HXDLIN(2323)				if ((bounds->x != -1)) {
HXLINE(2323)					_hx_tmp1 = (bounds->y != -1);
            				}
            				else {
HXLINE(2323)					_hx_tmp1 = false;
            				}
HXDLIN(2323)				if (_hx_tmp1) {
HXLINE(2325)					if ((bounds->y <= bounds->x)) {
HXLINE(2327)						boundsError = ((((HX_("bounds max must be > bounds min! (max=",4c,8b,2f,26) + bounds->y) + HX_(" min=",8b,de,2e,b5)) + bounds->x) + HX_(")",29,00,00,00));
            					}
            				}
            				else {
HXLINE(2332)					boundsError = HX_("missing bound!",9d,f7,06,0b);
            				}
HXLINE(2335)				if ((boundsError == HX_("",00,00,00,00))) {
HXLINE(2337)					this->_doAlign(objects,axis,spacing,resize,bounds,grow,shrink);
            				}
HXLINE(2340)				bool _hx_tmp2;
HXDLIN(2340)				bool _hx_tmp3;
HXDLIN(2340)				if (!(::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)))) {
HXLINE(2340)					_hx_tmp3 = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(data,HX_("x",78,00,00,00));
            				}
            				else {
HXLINE(2340)					_hx_tmp3 = true;
            				}
HXDLIN(2340)				if (!(_hx_tmp3)) {
HXLINE(2340)					_hx_tmp2 = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(data,HX_("y",79,00,00,00));
            				}
            				else {
HXLINE(2340)					_hx_tmp2 = true;
            				}
HXDLIN(2340)				if (_hx_tmp2) {
HXLINE(2342)					int _g = 0;
HXDLIN(2342)					while((_g < objects->length)){
HXLINE(2342)						::String object = objects->__get(_g);
HXDLIN(2342)						_g = (_g + 1);
HXLINE(2344)						::Dynamic thing = this->getAsset(object,null());
HXLINE(2345)						this->_loadPosition(data,thing);
            					}
            				}
            				else {
HXLINE(2350)					bool _hx_tmp = (boundsError != HX_("",00,00,00,00));
            				}
            			}
            		}
            		else {
HXLINE(2362)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._alignThing(): <objects> node not found!",e9,2b,f0,7a),null())));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_alignThing,(void))

void FlxUI_obj::_doAlign(::Array< ::String > objects,::String axis,Float spacing,bool resize, ::flixel::math::FlxPoint bounds,::hx::Null< bool >  __o_allowGrow,::hx::Null< bool >  __o_allowShrink){
            		bool allowGrow = __o_allowGrow.Default(true);
            		bool allowShrink = __o_allowShrink.Default(true);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2369__doAlign)
HXLINE(2370)		Float total_spacing = ( (Float)(0) );
HXLINE(2371)		Float total_size = ( (Float)(0) );
HXLINE(2373)		Float bound_range = (bounds->y - bounds->x);
HXLINE(2375)		Float spaces = ( (Float)((objects->length - 1)) );
HXLINE(2376)		Float space_size = ( (Float)(0) );
HXLINE(2377)		Float object_size = ( (Float)(0) );
HXLINE(2379)		::String size_prop = HX_("width",06,b6,62,ca);
HXLINE(2380)		::String pos_prop = HX_("x",78,00,00,00);
HXLINE(2381)		if ((axis == HX_("vertical",76,bc,15,6a))) {
HXLINE(2383)			size_prop = HX_("height",e7,07,4c,02);
HXLINE(2384)			pos_prop = HX_("y",79,00,00,00);
            		}
HXLINE(2388)		{
HXLINE(2388)			int _g = 0;
HXDLIN(2388)			while((_g < objects->length)){
HXLINE(2388)				::String nameStr = objects->__get(_g);
HXDLIN(2388)				_g = (_g + 1);
HXLINE(2390)				::Dynamic widget = this->getAsset(nameStr,null());
HXLINE(2391)				if (::hx::IsNotNull( widget )) {
HXLINE(2393)					Float theval = ( (Float)(0) );
HXLINE(2394)					::String _hx_switch_0 = size_prop;
            					if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(2399)						theval = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(widget);
HXDLIN(2399)						goto _hx_goto_97;
            					}
            					if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(2397)						theval = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(widget);
HXDLIN(2397)						goto _hx_goto_97;
            					}
            					_hx_goto_97:;
HXLINE(2402)					total_size = (total_size + theval);
            				}
            			}
            		}
HXLINE(2406)		if ((resize == false)) {
HXLINE(2408)			total_spacing = (bound_range - total_size);
HXLINE(2409)			space_size = (total_spacing / spaces);
            		}
            		else {
HXLINE(2413)			space_size = spacing;
HXLINE(2414)			total_spacing = (spacing * spaces);
HXLINE(2415)			object_size = ((bound_range - total_spacing) / ( (Float)(objects->length) ));
            		}
HXLINE(2418)		object_size = ( (Float)(::Std_obj::_hx_int(object_size)) );
HXLINE(2419)		space_size = ( (Float)(::Std_obj::_hx_int(space_size)) );
HXLINE(2421)		Float last_pos = bounds->x;
HXLINE(2422)		{
HXLINE(2422)			int _g1 = 0;
HXDLIN(2422)			while((_g1 < objects->length)){
HXLINE(2422)				::String nameStr = objects->__get(_g1);
HXDLIN(2422)				_g1 = (_g1 + 1);
HXLINE(2424)				::Dynamic widget = this->getAsset(nameStr,null());
HXLINE(2425)				if (::hx::IsNotNull( widget )) {
HXLINE(2427)					Float pos = last_pos;
HXLINE(2428)					if (!(resize)) {
HXLINE(2430)						::String _hx_switch_1 = size_prop;
            						if (  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(2435)							object_size = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(widget);
HXDLIN(2435)							goto _hx_goto_99;
            						}
            						if (  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(2433)							object_size = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(widget);
HXDLIN(2433)							goto _hx_goto_99;
            						}
            						_hx_goto_99:;
            					}
            					else {
HXLINE(2441)						if (::Std_obj::isOfType(widget,::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2443)							bool allow = true;
HXLINE(2444)							::Dynamic widgetr = widget;
HXLINE(2445)							if ((axis == HX_("vertical",76,bc,15,6a))) {
HXLINE(2447)								if ((object_size > ::flixel::addons::ui::interfaces::IResizable_obj::get_width(widgetr))) {
HXLINE(2449)									allow = allowGrow;
            								}
            								else {
HXLINE(2451)									if ((object_size < ::flixel::addons::ui::interfaces::IResizable_obj::get_width(widgetr))) {
HXLINE(2453)										allow = allowShrink;
            									}
            								}
HXLINE(2455)								if (allow) {
HXLINE(2457)									::flixel::addons::ui::interfaces::IResizable_obj::resize(widgetr,::flixel::addons::ui::interfaces::IResizable_obj::get_width(widgetr),object_size);
            								}
            							}
            							else {
HXLINE(2460)								if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(2462)									if ((object_size > ::flixel::addons::ui::interfaces::IResizable_obj::get_height(widgetr))) {
HXLINE(2464)										allow = allowGrow;
            									}
            									else {
HXLINE(2466)										if ((object_size < ::flixel::addons::ui::interfaces::IResizable_obj::get_height(widgetr))) {
HXLINE(2468)											allow = allowShrink;
            										}
            									}
HXLINE(2470)									if (allow) {
HXLINE(2472)										::flixel::addons::ui::interfaces::IResizable_obj::resize(widgetr,object_size,::flixel::addons::ui::interfaces::IResizable_obj::get_height(widgetr));
            									}
            								}
            							}
            						}
            					}
HXLINE(2478)					last_pos = ((pos + object_size) + space_size);
HXLINE(2480)					::String _hx_switch_2 = pos_prop;
            					if (  (_hx_switch_2==HX_("x",78,00,00,00)) ){
HXLINE(2483)						::flixel::IFlxSprite_obj::set_x(widget,pos);
HXDLIN(2483)						goto _hx_goto_100;
            					}
            					if (  (_hx_switch_2==HX_("y",79,00,00,00)) ){
HXLINE(2485)						::flixel::IFlxSprite_obj::set_y(widget,pos);
HXDLIN(2485)						goto _hx_goto_100;
            					}
            					_hx_goto_100:;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxUI_obj,_doAlign,(void))

bool FlxUI_obj::_checkFailure( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2492__checkFailure)
HXLINE(2493)		::String target = ::flixel::addons::ui::U_obj::xml_str(data,HX_("target",51,f3,ec,86),true,null());
HXLINE(2494)		::String property = ::flixel::addons::ui::U_obj::xml_str(data,HX_("property",55,48,38,ac),true,null());
HXLINE(2495)		::String compare = ::flixel::addons::ui::U_obj::xml_str(data,HX_("compare",a5,18,69,83),true,null());
HXLINE(2496)		::String value = ::flixel::addons::ui::U_obj::xml_str(data,HX_("value",71,7f,b8,31),true,null());
HXLINE(2498)		::Dynamic thing = this->getAsset(target,null());
HXLINE(2500)		if (::hx::IsNull( thing )) {
HXLINE(2502)			return false;
            		}
HXLINE(2505)		Float prop_f = ( (Float)(0) );
HXLINE(2506)		Float val_f = ( (Float)(0) );
HXLINE(2508)		Float p = ::flixel::addons::ui::U_obj::perc_to_float(value);
HXLINE(2510)		::String _hx_switch_0 = property;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(2515)			prop_f = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing);
HXDLIN(2515)			goto _hx_goto_102;
            		}
            		if (  (_hx_switch_0==HX_("w",77,00,00,00)) ||  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(2513)			prop_f = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing);
HXDLIN(2513)			goto _hx_goto_102;
            		}
            		_hx_goto_102:;
HXLINE(2518)		if (::Math_obj::isNaN(p)) {
HXLINE(2520)			if (::flixel::addons::ui::U_obj::isStrNum(value)) {
HXLINE(2522)				val_f = ::Std_obj::parseFloat(value);
            			}
            			else {
HXLINE(2526)				return false;
            			}
            		}
            		else {
HXLINE(2531)			::String _hx_switch_1 = property;
            			if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(2536)				val_f = (p * this->screenHeight());
HXDLIN(2536)				goto _hx_goto_103;
            			}
            			if (  (_hx_switch_1==HX_("w",77,00,00,00)) ||  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(2534)				val_f = (p * ( (Float)(this->screenWidth()) ));
HXDLIN(2534)				goto _hx_goto_103;
            			}
            			_hx_goto_103:;
            		}
HXLINE(2540)		bool return_val = false;
HXLINE(2542)		::String _hx_switch_2 = compare;
            		if (  (_hx_switch_2==HX_("<",3c,00,00,00)) ){
HXLINE(2545)			if ((prop_f < val_f)) {
HXLINE(2547)				this->failed_by = (val_f - prop_f);
HXLINE(2548)				return_val = true;
            			}
HXLINE(2545)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_2==HX_("<=",81,34,00,00)) ){
HXLINE(2563)			if ((prop_f <= val_f)) {
HXLINE(2565)				this->failed_by = (val_f - prop_f);
HXLINE(2566)				return_val = true;
            			}
HXLINE(2563)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_2==HX_("=",3d,00,00,00)) ||  (_hx_switch_2==HX_("==",60,35,00,00)) ){
HXLINE(2557)			if ((prop_f == val_f)) {
HXLINE(2559)				this->failed_by = ::Math_obj::abs((prop_f - val_f));
HXLINE(2560)				return_val = true;
            			}
HXLINE(2557)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_2==HX_(">",3e,00,00,00)) ){
HXLINE(2551)			if ((prop_f > val_f)) {
HXLINE(2553)				this->failed_by = (prop_f - val_f);
HXLINE(2554)				return_val = true;
            			}
HXLINE(2551)			goto _hx_goto_104;
            		}
            		if (  (_hx_switch_2==HX_(">=",3f,36,00,00)) ){
HXLINE(2569)			if ((prop_f >= val_f)) {
HXLINE(2571)				this->failed_by = (prop_f - val_f);
HXLINE(2572)				return_val = true;
            			}
HXLINE(2569)			goto _hx_goto_104;
            		}
            		_hx_goto_104:;
HXLINE(2576)		return return_val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_checkFailure,return )

void FlxUI_obj::_resizeThing(::Dynamic fo_r, ::Dynamic bounds){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2586__resizeThing)
HXLINE(2587)		bool do_resize = false;
HXLINE(2588)		Float ww = ::flixel::addons::ui::interfaces::IResizable_obj::get_width(fo_r);
HXLINE(2589)		Float hh = ::flixel::addons::ui::interfaces::IResizable_obj::get_height(fo_r);
HXLINE(2591)		if (::hx::IsLess( ww,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(2593)			do_resize = true;
HXLINE(2594)			ww = ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2596)			if (::hx::IsGreater( ww,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(2598)				do_resize = true;
HXLINE(2599)				ww = ( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) );
            			}
            		}
HXLINE(2602)		if (::hx::IsLess( hh,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(2604)			do_resize = true;
HXLINE(2605)			hh = ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2607)			if (::hx::IsGreater( hh,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(2609)				do_resize = true;
HXLINE(2610)				hh = ( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) );
            			}
            		}
HXLINE(2613)		if (do_resize) {
HXLINE(2615)			::flixel::addons::ui::interfaces::IResizable_obj::resize(fo_r,ww,hh);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_resizeThing,(void))

void FlxUI_obj::_postLoadThing(::String type, ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2620__postLoadThing)
HXLINE(2621)		if ((type == HX_("load_if",96,33,eb,08))) {
HXLINE(2623)			if (this->_loadTest(data)) {
HXLINE(2625)				if (::hx::IsNotNull( data->firstElement() )) {
HXLINE(2627)					 ::Dynamic subNode = data->elements();
HXDLIN(2627)					while(( (bool)(subNode->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2627)						 ::Xml subNode1 = ( ( ::Xml)(subNode->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2629)						if ((subNode1->nodeType != ::Xml_obj::Element)) {
HXLINE(2629)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(subNode1->nodeType))));
            						}
HXDLIN(2629)						::String nodeType = subNode1->nodeName.toLowerCase();
HXLINE(2630)						bool _hx_tmp;
HXDLIN(2630)						if ((subNode1->nodeType != ::Xml_obj::Document)) {
HXLINE(2630)							_hx_tmp = (subNode1->nodeType != ::Xml_obj::Element);
            						}
            						else {
HXLINE(2630)							_hx_tmp = false;
            						}
HXDLIN(2630)						if (_hx_tmp) {
HXLINE(2630)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(subNode1->nodeType))));
            						}
HXDLIN(2630)						 ::Xml this1 = subNode1;
HXDLIN(2630)						this->_postLoadThing(nodeType,this1);
            					}
            				}
            			}
HXLINE(2634)			return;
            		}
HXLINE(2637)		if ((this->_loadTest(data) == false)) {
HXLINE(2639)			return;
            		}
HXLINE(2642)		::String name = ::flixel::addons::ui::U_obj::xml_name(data);
HXLINE(2644)		::Dynamic thing = this->getAsset(name,null());
HXLINE(2645)		bool isGroup = (type == HX_("group",3f,b3,f4,99));
HXLINE(2646)		if (isGroup) {
HXLINE(2648)			thing = this->getGroup(name,null());
            		}
HXLINE(2651)		if ((type == HX_("align",c5,56,91,21))) {
HXLINE(2653)			this->_alignThing(data,null());
            		}
HXLINE(2656)		if ((type == HX_("change",70,91,72,b7))) {
HXLINE(2658)			this->_changeThing(data);
            		}
HXLINE(2661)		if ((type == HX_("position",a9,a0,fa,ca))) {
HXLINE(2663)			this->_loadPosition(data,thing);
HXLINE(2664)			return;
            		}
HXLINE(2667)		if ((type == HX_("cursor",d6,8e,e8,3e))) {
HXLINE(2669)			this->_loadCursor(data);
            		}
HXLINE(2672)		bool _hx_tmp;
HXDLIN(2672)		if (::hx::IsNull( thing )) {
HXLINE(2672)			_hx_tmp = !(isGroup);
            		}
            		else {
HXLINE(2672)			_hx_tmp = false;
            		}
HXDLIN(2672)		if (_hx_tmp) {
HXLINE(2674)			return;
            		}
HXLINE(2677)		if (!(isGroup)) {
HXLINE(2679)			::String use_def = ::flixel::addons::ui::U_obj::xml_str(data,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(2680)			 ::Xml definition = null();
HXLINE(2681)			if ((use_def != HX_("",00,00,00,00))) {
HXLINE(2683)				definition = this->getDefinition(use_def,null());
            			}
HXLINE(2686)			if (::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2688)				 ::Dynamic ww = this->_getDataSize(HX_("w",77,00,00,00),::flixel::addons::ui::U_obj::xml_str(data,HX_("width",06,b6,62,ca),null(),null()),null());
HXLINE(2689)				 ::Dynamic hh = this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data,HX_("height",e7,07,4c,02),null(),null()),null());
HXLINE(2690)				bool _hx_tmp;
HXDLIN(2690)				if (::hx::IsNotEq( ww,0 )) {
HXLINE(2690)					_hx_tmp = ::hx::IsEq( ww,::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing) );
            				}
            				else {
HXLINE(2690)					_hx_tmp = true;
            				}
HXDLIN(2690)				if (_hx_tmp) {
HXLINE(2692)					ww = null();
            				}
HXLINE(2694)				bool _hx_tmp1;
HXDLIN(2694)				if (::hx::IsNotEq( hh,0 )) {
HXLINE(2694)					_hx_tmp1 = ::hx::IsEq( hh,::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing) );
            				}
            				else {
HXLINE(2694)					_hx_tmp1 = true;
            				}
HXDLIN(2694)				if (_hx_tmp1) {
HXLINE(2696)					hh = null();
            				}
HXLINE(2699)				 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(2701)				if (::hx::IsNotNull( bounds )) {
HXLINE(2703)					if (::hx::IsNotNull( ww )) {
HXLINE(2705)						if (::hx::IsLess( ww,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(2707)							ww = bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic);
            						}
HXLINE(2709)						if (::hx::IsGreater( ww,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(2711)							ww = bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic);
            						}
HXLINE(2713)						bounds->__SetField(HX_("min_width",59,88,fd,ea),(bounds->__SetField(HX_("max_width",eb,9a,40,c1),ww,::hx::paccDynamic)),::hx::paccDynamic);
            					}
HXLINE(2715)					if (::hx::IsNotNull( hh )) {
HXLINE(2717)						if (::hx::IsLess( hh,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(2719)							hh = bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic);
            						}
HXLINE(2721)						if (::hx::IsGreater( hh,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(2723)							hh = bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic);
            						}
HXLINE(2725)						bounds->__SetField(HX_("min_height",34,3e,29,69),(bounds->__SetField(HX_("max_height",62,6b,96,0d),hh,::hx::paccDynamic)),::hx::paccDynamic);
            					}
HXLINE(2728)					this->_resizeThing(thing,bounds);
            				}
            			}
HXLINE(2732)			{
HXLINE(2732)				Float Y = -(( (Float)(thing->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) ));
HXDLIN(2732)				{
HXLINE(2732)					::Dynamic _g = thing;
HXDLIN(2732)					::flixel::IFlxSprite_obj::set_x(_g, ::Dynamic((_g->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) + -(( (Float)(thing->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) )))));
            				}
HXDLIN(2732)				{
HXLINE(2732)					::Dynamic _g1 = thing;
HXDLIN(2732)					::flixel::IFlxSprite_obj::set_y(_g1, ::Dynamic((_g1->__Field(HX_("y",79,00,00,00),::hx::paccDynamic) + Y)));
            				}
            			}
HXLINE(2733)			this->_loadPosition(data,thing);
            		}
HXLINE(2736)		::String send_to = ::flixel::addons::ui::U_obj::xml_str(data,HX_("send_to",52,6b,a5,a8),true,HX_("",00,00,00,00));
HXLINE(2737)		if ((send_to != HX_("",00,00,00,00))) {
HXLINE(2739)			::String _hx_switch_0 = send_to;
            			if (  (_hx_switch_0==HX_("back",27,da,10,41)) ||  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ){
HXLINE(2742)				this->_sendTo(thing,-1);
HXDLIN(2742)				goto _hx_goto_108;
            			}
            			if (  (_hx_switch_0==HX_("front",a9,18,8e,06)) ||  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE(2744)				this->_sendTo(thing,1);
HXDLIN(2744)				goto _hx_goto_108;
            			}
            			_hx_goto_108:;
            		}
HXLINE(2748)		bool _hx_tmp1;
HXDLIN(2748)		if (!(isGroup)) {
HXLINE(2748)			_hx_tmp1 = ::Std_obj::isOfType(thing,::hx::ClassOf< ::flixel::addons::ui::FlxUI >());
            		}
            		else {
HXLINE(2748)			_hx_tmp1 = false;
            		}
HXDLIN(2748)		if (_hx_tmp1) {
HXLINE(2750)			 ::flixel::addons::ui::FlxUI fui_thing = ( ( ::flixel::addons::ui::FlxUI)(thing) );
HXLINE(2751)			if ((fui_thing->_postLoaded == false)) {
HXLINE(2753)				fui_thing->getEvent(HX_("post_load",a5,55,d0,20),::hx::ObjectPtr<OBJ_>(this),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_postLoadThing,(void))

 ::flixel::addons::ui::FlxUITileTest FlxUI_obj::_loadTileTest( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2759__loadTileTest)
HXLINE(2760)		int tiles_w = ::flixel::addons::ui::U_obj::xml_i(data,HX_("tiles_w",fd,7b,93,45),2);
HXLINE(2761)		int tiles_h = ::flixel::addons::ui::U_obj::xml_i(data,HX_("tiles_h",ee,7b,93,45),2);
HXLINE(2762)		Float w = this->_loadWidth(data,null(),null(),null());
HXLINE(2763)		Float h = this->_loadHeight(data,null(),null(),null());
HXLINE(2765)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(2773)		if (::hx::IsLess( w,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(2775)			w = ( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) );
            		}
HXLINE(2777)		if (::hx::IsLess( h,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(2779)			h = ( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic)) );
            		}
HXLINE(2782)		int tileWidth = ::Std_obj::_hx_int((w / ( (Float)(tiles_w) )));
HXLINE(2783)		int tileHeight = ::Std_obj::_hx_int((h / ( (Float)(tiles_h) )));
HXLINE(2785)		if ((tileWidth < tileHeight)) {
HXLINE(2787)			tileHeight = tileWidth;
            		}
            		else {
HXLINE(2789)			if ((tileHeight < tileWidth)) {
HXLINE(2791)				tileWidth = tileHeight;
            			}
            		}
HXLINE(2794)		Float totalw = ( (Float)((tileWidth * tiles_w)) );
HXLINE(2795)		Float totalh = ( (Float)((tileHeight * tiles_h)) );
HXLINE(2797)		if (::hx::IsGreater( totalw,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(2799)			tileWidth = ::Std_obj::_hx_int((( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) ) / ( (Float)(tiles_w) )));
            		}
HXLINE(2801)		if (::hx::IsGreater( totalh,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(2803)			tileHeight = ::Std_obj::_hx_int((( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ) / ( (Float)(tiles_h) )));
            		}
HXLINE(2806)		if ((tileWidth < tileHeight)) {
HXLINE(2808)			tileHeight = tileWidth;
            		}
            		else {
HXLINE(2810)			if ((tileHeight < tileWidth)) {
HXLINE(2812)				tileWidth = tileHeight;
            			}
            		}
HXLINE(2815)		if ((tileWidth < 2)) {
HXLINE(2817)			tileWidth = 2;
            		}
HXLINE(2819)		if ((tileHeight < 2)) {
HXLINE(2821)			tileHeight = 2;
            		}
HXLINE(2824)		int color1 = ( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(::flixel::addons::ui::U_obj::xml_str(data,HX_("color1",6e,c5,86,c6),true,HX_("0x808080",30,ad,e5,63)))) );
HXLINE(2825)		int color2 = ( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(::flixel::addons::ui::U_obj::xml_str(data,HX_("color2",6f,c5,86,c6),true,HX_("0xc4c4c4",5b,de,47,ff)))) );
HXLINE(2827)		int baseTileSize = ::flixel::addons::ui::U_obj::xml_i(data,HX_("base_tile_size",c4,2d,3d,a8),-1);
HXLINE(2828)		bool floorToEven = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("floor_to_even",eb,3e,ec,20),false);
HXLINE(2830)		 ::flixel::addons::ui::FlxUITileTest ftt =  ::flixel::addons::ui::FlxUITileTest_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),tileWidth,tileHeight,tiles_w,tiles_h,color1,color2,floorToEven);
HXLINE(2831)		ftt->baseTileSize = baseTileSize;
HXLINE(2832)		return ftt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTileTest,return )

::String FlxUI_obj::_loadString( ::Xml data,::String attributeName){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2836__loadString)
HXLINE(2837)		::String string = ::flixel::addons::ui::U_obj::xml_str(data,attributeName,null(),null());
HXLINE(2838)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2839)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2840)		string = this->getText(string,context,true,code);
HXLINE(2841)		return string;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadString,return )

::Dynamic FlxUI_obj::_loadText( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2845__loadText)
HXLINE(2846)		::String text = ::flixel::addons::ui::U_obj::xml_str(data,HX_("text",ad,cc,f9,4c),null(),null());
HXLINE(2847)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2848)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2849)		text = this->getText(text,context,true,code);
HXLINE(2851)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,100,null(),null()));
HXLINE(2852)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,-1,null(),null()));
HXLINE(2854)		::String the_font = this->_loadFontFace(data);
HXLINE(2856)		bool input = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("input",0a,c4,1d,be),null());
HXLINE(2857)		if (input) {
HXLINE(2859)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._loadText(): <text> with input has been deprecated. Use <input_text> instead.",96,71,67,6a),null())));
            		}
HXLINE(2862)		::String align = ::flixel::addons::ui::U_obj::xml_str(data,HX_("align",c5,56,91,21),null(),null());
HXLINE(2863)		if ((align == HX_("",00,00,00,00))) {
HXLINE(2865)			align = null();
            		}
HXLINE(2867)		int size = ::Std_obj::_hx_int(this->_loadHeight(data,8,HX_("size",c1,a0,53,4c),HX_("floor",cc,d1,96,02)));
HXLINE(2869)		int color = this->_loadColor(data,null(),null());
HXLINE(2871)		 ::flixel::addons::ui::BorderDef border = this->_loadBorder(data);
HXLINE(2874)		 ::flixel::addons::ui::FlxUIText ftu =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,0,0,W,text,size,null());
HXLINE(2875)		ftu->setFormat(the_font,size,color,align,null(),null(),null());
HXLINE(2876)		border->apply(ftu);
HXLINE(2877)		ftu->drawFrame(null());
HXLINE(2873)		::Dynamic ft = ftu;
HXLINE(2880)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2882)			::cpp::VirtualArray params = null();
HXDLIN(2882)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2882)				params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2882)				{
HXLINE(2882)					int _g = 0;
HXDLIN(2882)					::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(2882)					while((_g < _g1->length)){
HXLINE(2882)						 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2882)						_g = (_g + 1);
HXDLIN(2882)						bool _hx_tmp;
HXDLIN(2882)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(2882)							_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            						}
            						else {
HXLINE(2882)							_hx_tmp = false;
            						}
HXDLIN(2882)						if (_hx_tmp) {
HXLINE(2882)							::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(2882)							type = type.toLowerCase();
HXDLIN(2882)							::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(2882)							 ::Dynamic value = valueStr;
HXDLIN(2882)							int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(2882)							::String _hx_switch_0 = type;
            							if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2882)								::String str = ::String(valueStr);
HXDLIN(2882)								str = str.toLowerCase();
HXDLIN(2882)								bool _hx_tmp;
HXDLIN(2882)								if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2882)									_hx_tmp = (str == HX_("1",31,00,00,00));
            								}
            								else {
HXLINE(2882)									_hx_tmp = true;
            								}
HXDLIN(2882)								if (_hx_tmp) {
HXLINE(2882)									value = true;
            								}
            								else {
HXLINE(2882)									value = false;
            								}
HXDLIN(2882)								goto _hx_goto_113;
            							}
            							if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(2882)								 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2882)								if (::hx::IsNull( return_val )) {
HXLINE(2882)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr)));
            								}
HXDLIN(2882)								value = return_val;
HXDLIN(2882)								goto _hx_goto_113;
            							}
            							if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(2882)								value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2882)								goto _hx_goto_113;
            							}
            							if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(2882)								value = ::Std_obj::parseInt(valueStr);
HXDLIN(2882)								goto _hx_goto_113;
            							}
            							if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(2882)								value = ::String(valueStr);
HXDLIN(2882)								goto _hx_goto_113;
            							}
            							_hx_goto_113:;
HXDLIN(2882)							params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value",71,7f,b8,31),value)
            								->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            						}
            					}
            				}
HXDLIN(2882)				params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2882)				{
HXLINE(2882)					int _g2 = 0;
HXDLIN(2882)					int _g3 = params->get_length();
HXDLIN(2882)					while((_g2 < _g3)){
HXLINE(2882)						_g2 = (_g2 + 1);
HXDLIN(2882)						int i = (_g2 - 1);
HXDLIN(2882)						params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            					}
            				}
            			}
HXDLIN(2882)			::cpp::VirtualArray params1 = params;
HXLINE(2883)			::Dynamic ihp = ft;
HXLINE(2884)			::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params1);
            		}
HXLINE(2887)		bool _hx_tmp;
HXDLIN(2887)		if ((H > 0)) {
HXLINE(2887)			_hx_tmp = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(ft) != H);
            		}
            		else {
HXLINE(2887)			_hx_tmp = false;
            		}
HXDLIN(2887)		if (_hx_tmp) {
HXLINE(2889)			if (::Std_obj::isOfType(ft,::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2891)				::Dynamic r = ft;
HXLINE(2892)				::flixel::addons::ui::interfaces::IResizable_obj::resize(r,::flixel::addons::ui::interfaces::IResizable_obj::get_width(r),H);
            			}
            		}
HXLINE(2897)		ftu->set_text(HX_(" ",20,00,00,00));
HXLINE(2898)		ftu->set_text(text);
HXLINE(2900)		return ft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadText,return )

::Dynamic FlxUI_obj::_loadInputText( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_2904__loadInputText)
HXLINE(2905)		::String text = ::flixel::addons::ui::U_obj::xml_str(data,HX_("text",ad,cc,f9,4c),null(),null());
HXLINE(2906)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(2907)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(2908)		text = this->getText(text,context,true,code);
HXLINE(2910)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,100,null(),null()));
HXLINE(2911)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,-1,null(),null()));
HXLINE(2913)		::String the_font = this->_loadFontFace(data);
HXLINE(2915)		::String align = ::flixel::addons::ui::U_obj::xml_str(data,HX_("align",c5,56,91,21),null(),null());
HXLINE(2916)		if ((align == HX_("",00,00,00,00))) {
HXLINE(2918)			align = null();
            		}
HXLINE(2920)		int size = ::Std_obj::_hx_int(this->_loadHeight(data,8,HX_("size",c1,a0,53,4c),null()));
HXLINE(2921)		int color = this->_loadColor(data,null(),null());
HXLINE(2923)		 ::flixel::addons::ui::BorderDef border = this->_loadBorder(data);
HXLINE(2925)		::String str = ::flixel::addons::ui::U_obj::xml_str(data,HX_("background",ee,93,1d,26),true,HX_("0x00000000",48,5a,d7,68));
HXDLIN(2925)		 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(str);
HXDLIN(2925)		if (::hx::IsNull( return_val )) {
HXLINE(2925)			return_val = 0;
            		}
HXDLIN(2925)		int backgroundColor = ( (int)(return_val) );
HXLINE(2926)		bool passwordMode = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("password_mode",47,aa,e5,09),null());
HXLINE(2929)		 ::flixel::addons::ui::FlxUIInputText fti =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,0,0,W,text,size,color,backgroundColor,null());
HXLINE(2930)		fti->set_passwordMode(passwordMode);
HXLINE(2932)		::String force_case = ::flixel::addons::ui::U_obj::xml_str(data,HX_("force_case",c4,b4,72,f8),true,HX_("",00,00,00,00));
HXLINE(2933)		int forceCase;
HXLINE(2934)		::String _hx_switch_0 = force_case;
            		if (  (_hx_switch_0==HX_("lower",01,fa,ff,78)) ||  (_hx_switch_0==HX_("lower_case",ee,5c,fc,1d)) ||  (_hx_switch_0==HX_("lowercase",31,ad,a5,66)) ){
HXLINE(2939)			forceCase = 2;
HXDLIN(2939)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("l",6c,00,00,00)) ||  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(2941)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._loadInputText(): 1 letter values have been deprecated (force_case attribute).",30,f9,74,27),null())));
HXDLIN(2941)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("upper",62,19,3f,a8)) ||  (_hx_switch_0==HX_("upper_case",ed,dd,2a,23)) ||  (_hx_switch_0==HX_("uppercase",12,91,3e,e7)) ){
HXLINE(2937)			forceCase = 1;
HXDLIN(2937)			goto _hx_goto_116;
            		}
            		/* default */{
HXLINE(2943)			forceCase = 0;
            		}
            		_hx_goto_116:;
HXLINE(2946)		::String filter = ::flixel::addons::ui::U_obj::xml_str(data,HX_("filter",b8,1f,35,85),true,HX_("",00,00,00,00));
HXLINE(2947)		int filterMode;
HXLINE(2948)		while((filter.indexOf(HX_("_",5f,00,00,00),null()) != -1)){
HXLINE(2950)			filter = ::StringTools_obj::replace(filter,HX_("_",5f,00,00,00),HX_("",00,00,00,00));
            		}
HXLINE(2953)		::String _hx_switch_1 = filter;
            		if (  (_hx_switch_1==HX_("a",61,00,00,00)) ||  (_hx_switch_1==HX_("an",ed,54,00,00)) ||  (_hx_switch_1==HX_("n",6e,00,00,00)) ){
HXLINE(2962)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("FlxUI._loadInputText(): 1 letter values have been deprecated (filter attribute).",a4,a0,22,50),null())));
HXDLIN(2962)			goto _hx_goto_118;
            		}
            		if (  (_hx_switch_1==HX_("alpha",5e,a7,96,21)) ||  (_hx_switch_1==HX_("onlyalpha",72,fa,2c,18)) ){
HXLINE(2956)			filterMode = 1;
HXDLIN(2956)			goto _hx_goto_118;
            		}
            		if (  (_hx_switch_1==HX_("alphanum",a8,a5,41,21)) ||  (_hx_switch_1==HX_("alphanumeric",2f,03,e3,71)) ||  (_hx_switch_1==HX_("onlyalphanumeric",9b,fa,fd,ec)) ){
HXLINE(2960)			filterMode = 3;
HXDLIN(2960)			goto _hx_goto_118;
            		}
            		if (  (_hx_switch_1==HX_("num",46,de,53,00)) ||  (_hx_switch_1==HX_("numeric",cd,e2,c0,ab)) ||  (_hx_switch_1==HX_("onlynumeric",e1,22,e1,32)) ){
HXLINE(2958)			filterMode = 2;
HXDLIN(2958)			goto _hx_goto_118;
            		}
            		/* default */{
HXLINE(2964)			filterMode = 0;
            		}
            		_hx_goto_118:;
HXLINE(2967)		fti->setFormat(the_font,size,color,align,null(),null(),null());
HXLINE(2968)		fti->set_forceCase(forceCase);
HXLINE(2969)		fti->set_filterMode(filterMode);
HXLINE(2970)		border->apply(fti);
HXLINE(2971)		fti->drawFrame(null());
HXLINE(2928)		::Dynamic ft = fti;
HXLINE(2974)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2976)			::cpp::VirtualArray params = null();
HXDLIN(2976)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(2976)				params = ::cpp::VirtualArray_obj::__new();
HXDLIN(2976)				{
HXLINE(2976)					int _g = 0;
HXDLIN(2976)					::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(2976)					while((_g < _g1->length)){
HXLINE(2976)						 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(2976)						_g = (_g + 1);
HXDLIN(2976)						bool _hx_tmp;
HXDLIN(2976)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(2976)							_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            						}
            						else {
HXLINE(2976)							_hx_tmp = false;
            						}
HXDLIN(2976)						if (_hx_tmp) {
HXLINE(2976)							::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(2976)							type = type.toLowerCase();
HXDLIN(2976)							::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(2976)							 ::Dynamic value = valueStr;
HXDLIN(2976)							int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(2976)							::String _hx_switch_2 = type;
            							if (  (_hx_switch_2==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_2==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(2976)								::String str = ::String(valueStr);
HXDLIN(2976)								str = str.toLowerCase();
HXDLIN(2976)								bool _hx_tmp;
HXDLIN(2976)								if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(2976)									_hx_tmp = (str == HX_("1",31,00,00,00));
            								}
            								else {
HXLINE(2976)									_hx_tmp = true;
            								}
HXDLIN(2976)								if (_hx_tmp) {
HXLINE(2976)									value = true;
            								}
            								else {
HXLINE(2976)									value = false;
            								}
HXDLIN(2976)								goto _hx_goto_120;
            							}
            							if (  (_hx_switch_2==HX_("color",63,71,5c,4a)) ||  (_hx_switch_2==HX_("hex",db,42,4f,00)) ){
HXLINE(2976)								 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(2976)								if (::hx::IsNull( return_val )) {
HXLINE(2976)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr)));
            								}
HXDLIN(2976)								value = return_val;
HXDLIN(2976)								goto _hx_goto_120;
            							}
            							if (  (_hx_switch_2==HX_("float",9c,c5,96,02)) ){
HXLINE(2976)								value = ::Std_obj::parseFloat(valueStr);
HXDLIN(2976)								goto _hx_goto_120;
            							}
            							if (  (_hx_switch_2==HX_("int",ef,0c,50,00)) ){
HXLINE(2976)								value = ::Std_obj::parseInt(valueStr);
HXDLIN(2976)								goto _hx_goto_120;
            							}
            							if (  (_hx_switch_2==HX_("string",d1,28,30,11)) ){
HXLINE(2976)								value = ::String(valueStr);
HXDLIN(2976)								goto _hx_goto_120;
            							}
            							_hx_goto_120:;
HXDLIN(2976)							params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value",71,7f,b8,31),value)
            								->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            						}
            					}
            				}
HXDLIN(2976)				params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(2976)				{
HXLINE(2976)					int _g2 = 0;
HXDLIN(2976)					int _g3 = params->get_length();
HXDLIN(2976)					while((_g2 < _g3)){
HXLINE(2976)						_g2 = (_g2 + 1);
HXDLIN(2976)						int i = (_g2 - 1);
HXDLIN(2976)						params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            					}
            				}
            			}
HXDLIN(2976)			::cpp::VirtualArray params1 = params;
HXLINE(2977)			::Dynamic ihp = ft;
HXLINE(2978)			::flixel::addons::ui::interfaces::IHasParams_obj::set_params(ihp,params1);
            		}
HXLINE(2981)		bool _hx_tmp;
HXDLIN(2981)		if ((H > 0)) {
HXLINE(2981)			_hx_tmp = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(ft) != H);
            		}
            		else {
HXLINE(2981)			_hx_tmp = false;
            		}
HXDLIN(2981)		if (_hx_tmp) {
HXLINE(2983)			if (::Std_obj::isOfType(ft,::hx::ClassOf< ::flixel::addons::ui::interfaces::IResizable >())) {
HXLINE(2985)				::Dynamic r = ft;
HXLINE(2986)				::flixel::addons::ui::interfaces::IResizable_obj::resize(r,::flixel::addons::ui::interfaces::IResizable_obj::get_width(r),H);
            			}
            		}
HXLINE(2990)		return ft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadInputText,return )

 ::flixel::addons::ui::FlxUIRadioGroup FlxUI_obj::_loadRadioGroup( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3069__loadRadioGroup)
HXLINE(3070)		 ::flixel::addons::ui::FlxUIRadioGroup frg = null();
HXLINE(3072)		::String dot_src = ::flixel::addons::ui::U_obj::xml_str(data,HX_("dot_src",ee,a6,9d,a9),true,null());
HXLINE(3073)		::String radio_src = ::flixel::addons::ui::U_obj::xml_str(data,HX_("radio_src",60,96,16,fe),true,null());
HXLINE(3075)		::Array< ::String > labels = ::Array_obj< ::String >::__new();
HXLINE(3076)		::Array< ::String > names = ::Array_obj< ::String >::__new();
HXLINE(3078)		int W = ( (int)(this->_loadWidth(data,11,HX_("radio_width",82,7c,59,e9),null())) );
HXLINE(3079)		int H = ( (int)(this->_loadHeight(data,11,HX_("radio_height",eb,ed,42,fb),null())) );
HXLINE(3081)		int scrollH = ( (int)(this->_loadHeight(data,0,HX_("height",e7,07,4c,02),null())) );
HXLINE(3082)		int scrollW = ( (int)(this->_loadHeight(data,0,HX_("width",06,b6,62,ca),null())) );
HXLINE(3084)		int labelW = ( (int)(this->_loadWidth(data,100,HX_("label_width",3b,fa,b5,dc),null())) );
HXLINE(3086)		{
HXLINE(3086)			int _g = 0;
HXDLIN(3086)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("radio",fb,10,18,e4));
HXDLIN(3086)			while((_g < _g1->length)){
HXLINE(3086)				 ::Xml radioNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3086)				_g = (_g + 1);
HXLINE(3088)				::String name = ::flixel::addons::ui::U_obj::xml_name(radioNode);
HXLINE(3089)				::String label = ::flixel::addons::ui::U_obj::xml_str(radioNode,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3091)				::String context = ::flixel::addons::ui::U_obj::xml_str(radioNode,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3092)				::String code = ::flixel::addons::ui::U_obj::xml_str(radioNode,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3093)				label = this->getText(label,context,true,code);
HXLINE(3095)				names->push(name);
HXLINE(3096)				labels->push(label);
            			}
            		}
HXLINE(3099)		names->reverse();
HXLINE(3100)		labels->reverse();
HXLINE(3102)		Float y_space = this->_loadHeight(data,25,HX_("y_space",40,f5,f2,24),null());
HXLINE(3104)		::cpp::VirtualArray params = null();
HXDLIN(3104)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(3104)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(3104)			{
HXLINE(3104)				int _g = 0;
HXDLIN(3104)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(3104)				while((_g < _g1->length)){
HXLINE(3104)					 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3104)					_g = (_g + 1);
HXDLIN(3104)					bool _hx_tmp;
HXDLIN(3104)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(3104)						_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(3104)						_hx_tmp = false;
            					}
HXDLIN(3104)					if (_hx_tmp) {
HXLINE(3104)						::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(3104)						type = type.toLowerCase();
HXDLIN(3104)						::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(3104)						 ::Dynamic value = valueStr;
HXDLIN(3104)						int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(3104)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(3104)							::String str = ::String(valueStr);
HXDLIN(3104)							str = str.toLowerCase();
HXDLIN(3104)							bool _hx_tmp;
HXDLIN(3104)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(3104)								_hx_tmp = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(3104)								_hx_tmp = true;
            							}
HXDLIN(3104)							if (_hx_tmp) {
HXLINE(3104)								value = true;
            							}
            							else {
HXLINE(3104)								value = false;
            							}
HXDLIN(3104)							goto _hx_goto_125;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(3104)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(3104)							if (::hx::IsNull( return_val )) {
HXLINE(3104)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr)));
            							}
HXDLIN(3104)							value = return_val;
HXDLIN(3104)							goto _hx_goto_125;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(3104)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(3104)							goto _hx_goto_125;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(3104)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(3104)							goto _hx_goto_125;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(3104)							value = ::String(valueStr);
HXDLIN(3104)							goto _hx_goto_125;
            						}
            						_hx_goto_125:;
HXDLIN(3104)						params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(3104)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(3104)			{
HXLINE(3104)				int _g2 = 0;
HXDLIN(3104)				int _g3 = params->get_length();
HXDLIN(3104)				while((_g2 < _g3)){
HXLINE(3104)					_g2 = (_g2 + 1);
HXDLIN(3104)					int i = (_g2 - 1);
HXDLIN(3104)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(3104)		::cpp::VirtualArray params1 = params;
HXLINE(3112)		 ::Dynamic radio_asset = null();
HXLINE(3113)		if ((radio_src != HX_("",00,00,00,00))) {
HXLINE(3115)			radio_asset = ::flixel::addons::ui::U_obj::gfx(radio_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(3117)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00))) {
HXLINE(3120)				if ((::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)),HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(3123)					radio_asset = this->_load9SliceSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)),null());
            				}
            				else {
HXLINE(3128)					radio_asset = this->_loadSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)));
            				}
            			}
            		}
HXLINE(3132)		 ::Dynamic dot_asset = null();
HXLINE(3133)		if ((dot_src != HX_("",00,00,00,00))) {
HXLINE(3135)			dot_asset = ::flixel::addons::ui::U_obj::gfx(dot_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(3137)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("dot",89,42,4c,00))) {
HXLINE(3140)				if ((::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("dot",89,42,4c,00)),HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(3143)					dot_asset = this->_load9SliceSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("dot",89,42,4c,00)),null());
            				}
            				else {
HXLINE(3148)					dot_asset = this->_loadSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("dot",89,42,4c,00)));
            				}
            			}
            		}
HXLINE(3155)		 ::flixel::math::FlxPoint prevOffset = null();
HXLINE(3156)		 ::flixel::math::FlxPoint nextOffset = null();
HXLINE(3158)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("button",f2,61,e0,d9))) {
HXLINE(3160)			int _g = 0;
HXDLIN(3160)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("button",f2,61,e0,d9));
HXDLIN(3160)			while((_g < _g1->length)){
HXLINE(3160)				 ::Xml btnNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3160)				_g = (_g + 1);
HXLINE(3162)				::String name = ::flixel::addons::ui::U_obj::xml_name(btnNode);
HXLINE(3163)				bool _hx_tmp;
HXDLIN(3163)				if ((name != HX_("previous",37,bc,b0,23))) {
HXLINE(3163)					_hx_tmp = (name == HX_("prev",f3,be,5e,4a));
            				}
            				else {
HXLINE(3163)					_hx_tmp = true;
            				}
HXDLIN(3163)				if (_hx_tmp) {
HXLINE(3165)					Float X = ::flixel::addons::ui::U_obj::xml_f(btnNode,HX_("x",78,00,00,00),null());
HXDLIN(3165)					Float Y = ::flixel::addons::ui::U_obj::xml_f(btnNode,HX_("y",79,00,00,00),null());
HXDLIN(3165)					 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN(3165)					point->_inPool = false;
HXDLIN(3165)					prevOffset = point;
            				}
            				else {
HXLINE(3167)					if ((name == HX_("next",f3,84,02,49))) {
HXLINE(3169)						Float X = ::flixel::addons::ui::U_obj::xml_f(btnNode,HX_("x",78,00,00,00),null());
HXDLIN(3169)						Float Y = ::flixel::addons::ui::U_obj::xml_f(btnNode,HX_("y",79,00,00,00),null());
HXDLIN(3169)						 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN(3169)						point->_inPool = false;
HXDLIN(3169)						nextOffset = point;
            					}
            				}
            			}
            		}
HXLINE(3174)		frg =  ::flixel::addons::ui::FlxUIRadioGroup_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),names,labels,null(),y_space,W,H,labelW,null(),prevOffset,nextOffset,null(),null());
HXLINE(3175)		frg->set_params(params1);
HXLINE(3177)		bool _hx_tmp;
HXDLIN(3177)		if (::hx::IsNotEq( radio_asset,HX_("",00,00,00,00) )) {
HXLINE(3177)			_hx_tmp = ::hx::IsNotNull( radio_asset );
            		}
            		else {
HXLINE(3177)			_hx_tmp = false;
            		}
HXDLIN(3177)		if (_hx_tmp) {
HXLINE(3179)			frg->loadGraphics(radio_asset,dot_asset);
            		}
HXLINE(3182)		int text_x = ::Std_obj::_hx_int(this->_loadWidth(data,0,HX_("text_x",26,65,88,d8),null()));
HXLINE(3183)		int text_y = ::Std_obj::_hx_int(this->_loadHeight(data,0,HX_("text_y",27,65,88,d8),null()));
HXLINE(3185)		::Array< ::Dynamic> radios = frg->getRadios();
HXLINE(3186)		int i = 0;
HXLINE(3187)		bool styleSet = false;
HXLINE(3189)		 ::Dynamic radioList = data->elementsNamed(HX_("radio",fb,10,18,e4));
HXLINE(3190)		 ::Xml radioNode = null();
HXLINE(3192)		{
HXLINE(3192)			int _g2 = 0;
HXDLIN(3192)			int _g3 = radios->length;
HXDLIN(3192)			while((_g2 < _g3)){
HXLINE(3192)				_g2 = (_g2 + 1);
HXDLIN(3192)				int k = (_g2 - 1);
HXLINE(3194)				 ::flixel::addons::ui::FlxUICheckBox fo = radios->__get(((radios->length - 1) - k)).StaticCast<  ::flixel::addons::ui::FlxUICheckBox >();
HXLINE(3195)				if (( (bool)(radioList->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )) {
HXLINE(3195)					radioNode = ( ( ::Xml)(radioList->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
            				}
            				else {
HXLINE(3195)					radioNode = null();
            				}
HXLINE(3196)				if (::hx::IsNotNull( fo )) {
HXLINE(3198)					if (::Std_obj::isOfType(fo,::hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >())) {
HXLINE(3200)						 ::flixel::addons::ui::FlxUICheckBox fc = fo;
HXLINE(3201)						 ::flixel::text::FlxText t = this->formatButtonText(data,fc);
HXLINE(3202)						bool _hx_tmp;
HXDLIN(3202)						if (::hx::IsNotNull( t )) {
HXLINE(3202)							_hx_tmp = (styleSet == false);
            						}
            						else {
HXLINE(3202)							_hx_tmp = false;
            						}
HXDLIN(3202)						if (_hx_tmp) {
HXLINE(3204)							 ::flixel::addons::ui::FontDef fd = ::flixel::addons::ui::FontDef_obj::copyFromFlxText(t);
HXLINE(3205)							 ::flixel::addons::ui::BorderDef bd =  ::flixel::addons::ui::BorderDef_obj::__alloc( HX_CTX ,t->borderStyle,t->borderColor,t->borderSize,t->borderQuality);
HXLINE(3206)							::String _hx_tmp = ::flixel::text::_FlxText::FlxTextAlign_Impl__obj::fromOpenFL(t->_defaultFormat->align);
HXDLIN(3206)							frg->set_activeStyle( ::flixel::addons::ui::CheckStyle_obj::__alloc( HX_CTX ,16777215,fd,_hx_tmp,t->color,bd));
HXLINE(3207)							styleSet = true;
            						}
HXLINE(3209)						fc->set_textX(( (Float)(text_x) ));
HXLINE(3210)						fc->set_textY(( (Float)(text_y) ));
HXLINE(3211)						i = (i + 1);
HXLINE(3212)						if (::hx::IsNotNull( radioNode )) {
HXLINE(3214)							bool _hx_tmp;
HXDLIN(3214)							if ((radioNode->nodeType != ::Xml_obj::Document)) {
HXLINE(3214)								_hx_tmp = (radioNode->nodeType != ::Xml_obj::Element);
            							}
            							else {
HXLINE(3214)								_hx_tmp = false;
            							}
HXDLIN(3214)							if (_hx_tmp) {
HXLINE(3214)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(radioNode->nodeType))));
            							}
HXDLIN(3214)							 ::Xml this1 = radioNode;
HXDLIN(3214)							this->_loadTooltip(fc,this1);
            						}
            					}
            				}
            			}
            		}
HXLINE(3220)		if ((scrollW != 0)) {
HXLINE(3222)			frg->fixedSize = true;
HXLINE(3223)			frg->set_width(( (Float)(scrollW) ));
            		}
HXLINE(3225)		if ((scrollH != 0)) {
HXLINE(3227)			frg->fixedSize = true;
HXLINE(3228)			frg->set_height(( (Float)(scrollH) ));
            		}
HXLINE(3231)		return frg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadRadioGroup,return )

 ::flixel::addons::ui::FlxUICheckBox FlxUI_obj::_loadCheckBox( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3235__loadCheckBox)
HXLINE(3236)		 ::flixel::addons::ui::FlxUICheckBox fc = null();
HXLINE(3238)		::String label = ::flixel::addons::ui::U_obj::xml_str(data,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3239)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3240)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3242)		bool checked = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("checked",27,b3,24,13),false);
HXLINE(3244)		label = this->getText(label,context,true,code);
HXLINE(3246)		int labelW = ( (int)(this->_loadWidth(data,100,HX_("label_width",3b,fa,b5,dc),null())) );
HXLINE(3248)		::String check_src = ::flixel::addons::ui::U_obj::xml_str(data,HX_("check_src",ad,88,29,a8),true,null());
HXLINE(3249)		::String box_src = ::flixel::addons::ui::U_obj::xml_str(data,HX_("box_src",70,0b,0d,a4),true,null());
HXLINE(3251)		::cpp::VirtualArray params = null();
HXDLIN(3251)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(3251)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(3251)			{
HXLINE(3251)				int _g = 0;
HXDLIN(3251)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(3251)				while((_g < _g1->length)){
HXLINE(3251)					 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3251)					_g = (_g + 1);
HXDLIN(3251)					bool _hx_tmp;
HXDLIN(3251)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(3251)						_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(3251)						_hx_tmp = false;
            					}
HXDLIN(3251)					if (_hx_tmp) {
HXLINE(3251)						::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(3251)						type = type.toLowerCase();
HXDLIN(3251)						::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(3251)						 ::Dynamic value = valueStr;
HXDLIN(3251)						int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(3251)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(3251)							::String str = ::String(valueStr);
HXDLIN(3251)							str = str.toLowerCase();
HXDLIN(3251)							bool _hx_tmp;
HXDLIN(3251)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(3251)								_hx_tmp = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(3251)								_hx_tmp = true;
            							}
HXDLIN(3251)							if (_hx_tmp) {
HXLINE(3251)								value = true;
            							}
            							else {
HXLINE(3251)								value = false;
            							}
HXDLIN(3251)							goto _hx_goto_131;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(3251)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(3251)							if (::hx::IsNull( return_val )) {
HXLINE(3251)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr)));
            							}
HXDLIN(3251)							value = return_val;
HXDLIN(3251)							goto _hx_goto_131;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(3251)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(3251)							goto _hx_goto_131;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(3251)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(3251)							goto _hx_goto_131;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(3251)							value = ::String(valueStr);
HXDLIN(3251)							goto _hx_goto_131;
            						}
            						_hx_goto_131:;
HXDLIN(3251)						params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(3251)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(3251)			{
HXLINE(3251)				int _g2 = 0;
HXDLIN(3251)				int _g3 = params->get_length();
HXDLIN(3251)				while((_g2 < _g3)){
HXLINE(3251)					_g2 = (_g2 + 1);
HXDLIN(3251)					int i = (_g2 - 1);
HXDLIN(3251)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(3251)		::cpp::VirtualArray params1 = params;
HXLINE(3253)		 ::Dynamic box_asset = null();
HXLINE(3254)		 ::Dynamic check_asset = null();
HXLINE(3262)		if ((box_src != HX_("",00,00,00,00))) {
HXLINE(3265)			box_asset = ::flixel::addons::ui::U_obj::gfx(box_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(3267)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00))) {
HXLINE(3270)				if ((::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)),HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(3273)					box_asset = this->_load9SliceSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)),null());
            				}
            				else {
HXLINE(3278)					box_asset = this->_loadSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("box",0b,be,4a,00)));
            				}
            			}
            		}
HXLINE(3282)		if ((check_src != HX_("",00,00,00,00))) {
HXLINE(3285)			check_asset = ::flixel::addons::ui::U_obj::gfx(check_src,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(3287)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("check",c8,98,b6,45))) {
HXLINE(3290)				if ((::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("check",c8,98,b6,45)),HX_("slice9",a7,03,04,70),null(),null()) != HX_("",00,00,00,00))) {
HXLINE(3293)					check_asset = this->_load9SliceSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("check",c8,98,b6,45)),null());
            				}
            				else {
HXLINE(3298)					check_asset = this->_loadSprite(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("check",c8,98,b6,45)));
            				}
            			}
            		}
HXLINE(3302)		fc =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,0,0,box_asset,check_asset,label,labelW,params1,null());
HXLINE(3303)		this->formatButtonText(data,fc);
HXLINE(3305)		int text_x = ::Std_obj::_hx_int(this->_loadWidth(data,0,HX_("text_x",26,65,88,d8),null()));
HXLINE(3306)		int text_y = ::Std_obj::_hx_int(this->_loadHeight(data,0,HX_("text_y",27,65,88,d8),null()));
HXLINE(3308)		fc->set_textX(( (Float)(text_x) ));
HXLINE(3309)		fc->set_textY(( (Float)(text_y) ));
HXLINE(3311)		fc->set_text(label);
HXLINE(3313)		fc->set_checked(checked);
HXLINE(3315)		return fc;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadCheckBox,return )

 ::flixel::addons::ui::FlxUIDropDownMenu FlxUI_obj::_loadDropDownMenu( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3319__loadDropDownMenu)
HXLINE(3343)		 ::flixel::addons::ui::FlxUIDropDownMenu fud = null();
HXLINE(3345)		::String label = ::flixel::addons::ui::U_obj::xml_str(data,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3346)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3347)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3348)		label = this->getText(label,context,true,code);
HXLINE(3350)		::String back_def = ::flixel::addons::ui::U_obj::xml_str(data,HX_("back_def",6d,f8,3d,17),true,null());
HXLINE(3351)		::String panel_def = ::flixel::addons::ui::U_obj::xml_str(data,HX_("panel_def",ca,cb,5d,a4),true,null());
HXLINE(3352)		::String button_def = ::flixel::addons::ui::U_obj::xml_str(data,HX_("button_def",b8,c1,34,be),true,null());
HXLINE(3353)		::String label_def = ::flixel::addons::ui::U_obj::xml_str(data,HX_("label_def",ba,96,96,65),true,null());
HXLINE(3355)		 ::flixel::FlxSprite back_asset = null();
HXLINE(3356)		 ::flixel::addons::ui::FlxUI9SliceSprite panel_asset = null();
HXLINE(3357)		 ::flixel::addons::ui::FlxUISpriteButton button_asset = null();
HXLINE(3358)		 ::flixel::addons::ui::FlxUIText label_asset = null();
HXLINE(3360)		if ((back_def != HX_("",00,00,00,00))) {
HXLINE(3362)			back_asset = this->_loadSprite(this->getDefinition(back_def,null()));
            		}
HXLINE(3365)		if ((panel_def != HX_("",00,00,00,00))) {
HXLINE(3367)			panel_asset = this->_load9SliceSprite(this->getDefinition(panel_def,null()),null());
            		}
HXLINE(3370)		if ((button_def != HX_("",00,00,00,00))) {
HXLINE(3372)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(3374)				button_asset = ( ( ::flixel::addons::ui::FlxUISpriteButton)(this->_loadButton(this->getDefinition(button_def,null()),false,false,null())) );
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE(   1)					{
HXLINE(   1)						null();
            					}
HXLINE(3372)					if (::Std_obj::isOfType(::haxe::Exception_obj::caught(_g)->unwrap(),::hx::ClassOf< ::openfl::errors::Error >())) {
HXLINE(3379)						button_asset = null();
            					}
            					else {
HXLINE(3372)						HX_STACK_DO_THROW(_g);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE(3383)		if ((label_def != HX_("",00,00,00,00))) {
HXLINE(3385)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(3387)				label_asset = ( ( ::flixel::addons::ui::FlxUIText)(this->_loadText(this->getDefinition(label_def,null()))) );
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE(   1)					{
HXLINE(   1)						null();
            					}
HXLINE(3385)					if (::Std_obj::isOfType(::haxe::Exception_obj::caught(_g)->unwrap(),::hx::ClassOf< ::openfl::errors::Error >())) {
HXLINE(3392)						label_asset = null();
            					}
            					else {
HXLINE(3385)						HX_STACK_DO_THROW(_g);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(3394)			bool _hx_tmp;
HXDLIN(3394)			if (::hx::IsNotNull( label_asset )) {
HXLINE(3394)				_hx_tmp = (label != HX_("",00,00,00,00));
            			}
            			else {
HXLINE(3394)				_hx_tmp = false;
            			}
HXDLIN(3394)			if (_hx_tmp) {
HXLINE(3396)				label_asset->set_text(label);
            			}
            		}
HXLINE(3400)		::Array< ::Dynamic> asset_list = null();
HXLINE(3401)		::Array< ::Dynamic> data_list = null();
HXLINE(3403)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("data",2a,56,63,42))) {
HXLINE(3405)			int _g = 0;
HXDLIN(3405)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("data",2a,56,63,42));
HXDLIN(3405)			while((_g < _g1->length)){
HXLINE(3405)				 ::Xml dataNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3405)				_g = (_g + 1);
HXLINE(3407)				if (::hx::IsNull( data_list )) {
HXLINE(3409)					data_list = ::Array_obj< ::Dynamic>::__new();
            				}
HXLINE(3411)				::String namel = ::flixel::addons::ui::U_obj::xml_str(dataNode,HX_("name",4b,72,ff,48),true,null());
HXDLIN(3411)				 ::flixel::addons::ui::StrNameLabel namel1 =  ::flixel::addons::ui::StrNameLabel_obj::__alloc( HX_CTX ,namel,::flixel::addons::ui::U_obj::xml_str(dataNode,HX_("label",f4,0d,af,6f),null(),null()));
HXLINE(3412)				data_list->push(namel1);
            			}
            		}
            		else {
HXLINE(3415)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("asset",f0,69,39,26))) {
HXLINE(3417)				int _g = 0;
HXDLIN(3417)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("asset",f0,69,39,26));
HXDLIN(3417)				while((_g < _g1->length)){
HXLINE(3417)					 ::Xml assetNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3417)					_g = (_g + 1);
HXLINE(3419)					if (::hx::IsNull( asset_list )) {
HXLINE(3421)						asset_list = ::Array_obj< ::Dynamic>::__new();
            					}
HXLINE(3423)					::String def_name = ::flixel::addons::ui::U_obj::xml_str(assetNode,HX_("def",c5,39,4c,00),true,null());
HXLINE(3424)					::String name = ::flixel::addons::ui::U_obj::xml_name(assetNode);
HXLINE(3425)					 ::flixel::addons::ui::FlxUIButton asset = null();
HXLINE(3427)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(3429)						asset = ( ( ::flixel::addons::ui::FlxUIButton)(this->_loadButton(this->getDefinition(def_name,null()),false,null(),null())) );
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g = _hx_e;
HXLINE(   1)							{
HXLINE(   1)								null();
            							}
HXLINE(3427)							if (!(::Std_obj::isOfType(::haxe::Exception_obj::caught(_g)->unwrap(),::hx::ClassOf< ::openfl::errors::Error >()))) {
HXLINE(3427)								HX_STACK_DO_THROW(_g);
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE(3436)					if (::hx::IsNotNull( asset )) {
HXLINE(3438)						asset->name = name;
HXLINE(3439)						if (::hx::IsNull( asset_list )) {
HXLINE(3441)							asset_list = ::Array_obj< ::Dynamic>::__new();
            						}
HXLINE(3443)						asset_list->push(asset);
            					}
            				}
            			}
            		}
HXLINE(3448)		 ::flixel::addons::ui::FlxUIDropDownHeader header =  ::flixel::addons::ui::FlxUIDropDownHeader_obj::__alloc( HX_CTX ,120,back_asset,label_asset,button_asset);
HXLINE(3449)		fud =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,0,0,data_list,null(),header,panel_asset,asset_list,null());
HXLINE(3451)		return fud;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadDropDownMenu,return )

bool FlxUI_obj::_loadTest( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3455__loadTest)
HXLINE(3456)		bool result = true;
HXLINE(3459)		::String _hx_tmp;
HXDLIN(3459)		if ((data->nodeType == ::Xml_obj::Document)) {
HXLINE(3459)			_hx_tmp = HX_("Document",3b,ab,c4,74);
            		}
            		else {
HXLINE(3459)			if ((data->nodeType != ::Xml_obj::Element)) {
HXLINE(3459)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(data->nodeType))));
            			}
HXDLIN(3459)			_hx_tmp = data->nodeName;
            		}
HXDLIN(3459)		if ((_hx_tmp == HX_("load_if",96,33,eb,08))) {
HXLINE(3461)			result = this->_loadTestSub(data);
HXLINE(3462)			if ((result == false)) {
HXLINE(3464)				return false;
            			}
            		}
HXLINE(3469)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("load_if",96,33,eb,08))) {
HXLINE(3489)			int _g = 0;
HXDLIN(3489)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("load_if",96,33,eb,08));
HXDLIN(3489)			while((_g < _g1->length)){
HXLINE(3489)				 ::Xml node = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3489)				_g = (_g + 1);
HXLINE(3491)				 ::Xml _this = node;
HXDLIN(3491)				bool _hx_tmp;
HXDLIN(3491)				if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(3491)					_hx_tmp = (_this->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE(3491)					_hx_tmp = false;
            				}
HXDLIN(3491)				if (_hx_tmp) {
HXLINE(3491)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType))));
            				}
HXDLIN(3491)				if (::hx::IsNull( _this->children->__get(0).StaticCast<  ::Xml >() )) {
HXLINE(3493)					result = this->_loadTestSub(node);
HXLINE(3494)					if ((result == false)) {
HXLINE(3496)						return false;
            					}
            				}
            			}
            		}
HXLINE(3501)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTest,return )

bool FlxUI_obj::_loadTestSub( ::Xml node){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3505__loadTestSub)
HXLINE(3506)		bool matchValue = ::flixel::addons::ui::U_obj::xml_bool(node,HX_("is",ea,5b,00,00),true);
HXLINE(3507)		bool match = matchValue;
HXLINE(3510)		Float aspect_ratio = ::flixel::addons::ui::U_obj::xml_f(node,HX_("aspect_ratio",24,04,8d,fd),-1);
HXLINE(3511)		if ((aspect_ratio != -1)) {
HXLINE(3513)			match = true;
HXLINE(3514)			Float screen_ratio = (::hx::TCast< Float >::cast(::flixel::FlxG_obj::width) / ::hx::TCast< Float >::cast(::flixel::FlxG_obj::height));
HXLINE(3515)			Float diff = ::Math_obj::abs((screen_ratio - aspect_ratio));
HXLINE(3516)			if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(node,HX_("tolerance",0d,3d,7c,33))) {
HXLINE(3518)				Float tolerance = ::flixel::addons::ui::U_obj::xml_f(node,HX_("tolerance",0d,3d,7c,33),((Float)0.1));
HXLINE(3519)				if ((diff > tolerance)) {
HXLINE(3521)					match = false;
            				}
            			}
            			else {
HXLINE(3524)				bool _hx_tmp;
HXDLIN(3524)				if (!(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(node,HX_("tolerance_plus",0c,af,15,a0)))) {
HXLINE(3524)					_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(node,HX_("tolerance_minus",7e,cc,ae,b6));
            				}
            				else {
HXLINE(3524)					_hx_tmp = true;
            				}
HXDLIN(3524)				if (_hx_tmp) {
HXLINE(3526)					Float tolerance_minus = ::flixel::addons::ui::U_obj::xml_f(node,HX_("tolerance_minus",7e,cc,ae,b6),-1);
HXLINE(3527)					Float tolerance_plus = ::flixel::addons::ui::U_obj::xml_f(node,HX_("tolerance_plus",0c,af,15,a0),-1);
HXLINE(3528)					bool _hx_tmp;
HXDLIN(3528)					if ((screen_ratio > aspect_ratio)) {
HXLINE(3528)						_hx_tmp = (tolerance_plus != -1);
            					}
            					else {
HXLINE(3528)						_hx_tmp = false;
            					}
HXDLIN(3528)					if (_hx_tmp) {
HXLINE(3530)						if ((diff > tolerance_plus)) {
HXLINE(3532)							match = false;
            						}
            					}
HXLINE(3535)					bool _hx_tmp1;
HXDLIN(3535)					if ((screen_ratio < aspect_ratio)) {
HXLINE(3535)						_hx_tmp1 = (tolerance_minus != -1);
            					}
            					else {
HXLINE(3535)						_hx_tmp1 = false;
            					}
HXDLIN(3535)					if (_hx_tmp1) {
HXLINE(3537)						if ((diff > tolerance_minus)) {
HXLINE(3539)							match = false;
            						}
            					}
            				}
            			}
HXLINE(3543)			if ((match != matchValue)) {
HXLINE(3545)				return false;
            			}
            		}
HXLINE(3550)		 ::flixel::math::FlxPoint resolution = ::flixel::addons::ui::U_obj::xml_pt(node,HX_("resolution",2c,35,49,6d),null());
HXLINE(3551)		if (::hx::IsNotNull( resolution )) {
HXLINE(3553)			match = true;
HXLINE(3554)			 ::flixel::math::FlxPoint toleranceRes = ::flixel::addons::ui::U_obj::xml_pt(node,HX_("tolerance",0d,3d,7c,33),null());
HXLINE(3555)			if (::hx::IsNull( toleranceRes )) {
HXLINE(3557)				toleranceRes =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,0,0);
            			}
HXLINE(3559)			Float diffX = ::Math_obj::abs((resolution->x - ( (Float)(::flixel::FlxG_obj::width) )));
HXLINE(3560)			Float diffY = ::Math_obj::abs((resolution->y - ( (Float)(::flixel::FlxG_obj::height) )));
HXLINE(3561)			bool _hx_tmp;
HXDLIN(3561)			if (!((diffX > toleranceRes->x))) {
HXLINE(3561)				_hx_tmp = (diffY > toleranceRes->y);
            			}
            			else {
HXLINE(3561)				_hx_tmp = true;
            			}
HXDLIN(3561)			if (_hx_tmp) {
HXLINE(3563)				match = false;
            			}
HXLINE(3565)			if ((match != matchValue)) {
HXLINE(3567)				return false;
            			}
            		}
HXLINE(3572)		::String haxeDef = ::flixel::addons::ui::U_obj::xml_str(node,HX_("haxedef",5f,a1,7a,08),true,HX_("",00,00,00,00));
HXLINE(3573)		bool haxeVal = ::flixel::addons::ui::U_obj::xml_bool(node,HX_("value",71,7f,b8,31),true);
HXLINE(3575)		if ((haxeDef != HX_("",00,00,00,00))) {
HXLINE(3577)			match = true;
HXLINE(3578)			bool defValue = ::flixel::addons::ui::U_obj::checkHaxedef(haxeDef);
HXLINE(3579)			match = (defValue == haxeVal);
HXLINE(3580)			if ((match != matchValue)) {
HXLINE(3582)				return false;
            			}
            		}
HXLINE(3587)		::String variable = ::flixel::addons::ui::U_obj::xml_str(node,HX_("variable",3c,12,0d,69),false,HX_("",00,00,00,00));
HXLINE(3588)		::String variableType = ::flixel::addons::ui::U_obj::xml_str(node,HX_("type",ba,f2,08,4d),true,HX_("string",d1,28,30,11));
HXLINE(3589)		if ((variable != HX_("",00,00,00,00))) {
HXLINE(3591)			match = true;
HXLINE(3592)			 ::Dynamic varData = this->parseVarValue(variable);
HXLINE(3593)			if (::hx::IsNotNull( varData )) {
HXLINE(3595)				match = this->checkVariable(( (::String)(varData->__Field(HX_("variable",3c,12,0d,69),::hx::paccDynamic)) ),( (::String)(varData->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) ),variableType,( (::String)(varData->__Field(HX_("op",21,61,00,00),::hx::paccDynamic)) ),null());
            			}
HXLINE(3597)			if ((match != matchValue)) {
HXLINE(3599)				return false;
            			}
            		}
HXLINE(3602)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTestSub,return )

 ::Dynamic FlxUI_obj::parseVarValue(::String varString){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3606_parseVarValue)
HXLINE(3607)		::Array< ::String > arr = ::Array_obj< ::String >::fromData( _hx_array_data_e9110855_142,8);
HXLINE(3608)		::Array< ::String > temp;
HXLINE(3609)		{
HXLINE(3609)			int _g = 0;
HXDLIN(3609)			while((_g < arr->length)){
HXLINE(3609)				::String op = arr->__get(_g);
HXDLIN(3609)				_g = (_g + 1);
HXLINE(3611)				if ((varString.indexOf(op,null()) != -1)) {
HXLINE(3613)					temp = varString.split(op);
HXLINE(3614)					bool _hx_tmp;
HXDLIN(3614)					if (::hx::IsNotNull( temp )) {
HXLINE(3614)						_hx_tmp = (temp->length == 2);
            					}
            					else {
HXLINE(3614)						_hx_tmp = false;
            					}
HXDLIN(3614)					if (_hx_tmp) {
HXLINE(3616)						return  ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("op",21,61,00,00),op)
            							->setFixed(1,HX_("value",71,7f,b8,31),temp->__get(1))
            							->setFixed(2,HX_("variable",3c,12,0d,69),temp->__get(0)));
            					}
            				}
            			}
            		}
HXLINE(3620)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,parseVarValue,return )

 ::flixel::addons::ui::FlxUI FlxUI_obj::_loadLayout( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3624__loadLayout)
HXLINE(3625)		::String name = ::flixel::addons::ui::U_obj::xml_str(data,HX_("name",4b,72,ff,48),true,null());
HXLINE(3626)		Float X = this->_loadWidth(data,( (Float)(0) ),HX_("x",78,00,00,00),null());
HXLINE(3627)		Float Y = this->_loadHeight(data,( (Float)(0) ),HX_("y",79,00,00,00),null());
HXLINE(3628)		 ::flixel::addons::ui::FlxUI _ui = this->createUI(data);
HXLINE(3629)		_ui->set_x(X);
HXLINE(3630)		_ui->set_y(Y);
HXLINE(3631)		_ui->name = name;
HXLINE(3632)		return _ui;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadLayout,return )

void FlxUI_obj::addToCleanup(::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3636_addToCleanup)
HXLINE(3637)		if (::hx::IsNull( this->_assetsToCleanUp )) {
HXLINE(3638)			return;
            		}
HXLINE(3639)		if ((this->_assetsToCleanUp->indexOf(str,null()) == -1)) {
HXLINE(3641)			this->_assetsToCleanUp->push(str);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,addToCleanup,(void))

void FlxUI_obj::addToScaledAssets(::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3647_addToScaledAssets)
HXDLIN(3647)		bool _hx_tmp;
HXDLIN(3647)		if (::hx::IsNotNull( this->_scaledAssets )) {
HXDLIN(3647)			_hx_tmp = (this->_scaledAssets->indexOf(str,null()) == -1);
            		}
            		else {
HXDLIN(3647)			_hx_tmp = false;
            		}
HXDLIN(3647)		if (_hx_tmp) {
HXLINE(3649)			this->_scaledAssets->push(str);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,addToScaledAssets,(void))

void FlxUI_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3654_cleanup)
HXLINE(3655)		{
HXLINE(3655)			int _g = 0;
HXDLIN(3655)			::Array< ::String > _g1 = this->_assetsToCleanUp;
HXDLIN(3655)			while((_g < _g1->length)){
HXLINE(3655)				::String key = _g1->__get(_g);
HXDLIN(3655)				_g = (_g + 1);
HXLINE(3657)				::flixel::FlxG_obj::bitmap->removeByKey(key);
            			}
            		}
HXLINE(3659)		this->_assetsToCleanUp = null();
HXLINE(3660)		this->_scaledAssets = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,cleanup,(void))

 ::flixel::addons::ui::FlxUI FlxUI_obj::createUI( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3665_createUI)
HXDLIN(3665)		return  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,data,::hx::ObjectPtr<OBJ_>(this),::hx::ObjectPtr<OBJ_>(this),this->_ptr_tongue,this->liveFilePath,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,createUI,return )

 ::flixel::addons::ui::FlxUITabMenu FlxUI_obj::_loadTabMenu( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3669__loadTabMenu)
HXLINE(3670)		::String back_def_str = ::flixel::addons::ui::U_obj::xml_str(data,HX_("back_def",6d,f8,3d,17),null(),null());
HXLINE(3671)		 ::Xml back_def = this->getDefinition(back_def_str,null());
HXLINE(3672)		if (::hx::IsNull( back_def )) {
HXLINE(3674)			back_def = data;
            		}
HXLINE(3676)		back_def = ::flixel::addons::ui::FlxUI_obj::consolidateData(back_def,data,null());
HXLINE(3678)		::String back_type = ::flixel::addons::ui::U_obj::xml_str(data,HX_("back_type",12,07,9e,49),true,HX_("chrome",7a,f9,af,c2));
HXLINE(3680)		 ::flixel::FlxSprite backSprite;
HXDLIN(3680)		::String _hx_switch_0 = back_type;
            		if (  (_hx_switch_0==HX_("region",f4,c0,8c,00)) ){
HXLINE(3680)			backSprite =  ::flixel::addons::ui::FlxUIRegion_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN(3680)			goto _hx_goto_149;
            		}
            		if (  (_hx_switch_0==HX_("sprite",05,dc,95,c3)) ){
HXLINE(3680)			backSprite = this->_loadSprite(back_def);
HXDLIN(3680)			goto _hx_goto_149;
            		}
            		/* default */{
HXLINE(3680)			backSprite = this->_load9SliceSprite(back_def,HX_("tab_menu",09,73,e1,d6));
            		}
            		_hx_goto_149:;
HXLINE(3687)		 ::Xml tab_def = null();
HXLINE(3689)		bool stretch_tabs = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("stretch_tabs",38,9c,fc,5c),false);
HXLINE(3691)		::String stackToggled = HX_("front",a9,18,8e,06);
HXLINE(3692)		::String stackUntoggled = HX_("back",27,da,10,41);
HXLINE(3694)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("stacking",9a,62,b6,99))) {
HXLINE(3696)			stackToggled = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("stacking",9a,62,b6,99)),HX_("toggled",50,e2,03,cc),true,HX_("front",a9,18,8e,06));
HXLINE(3697)			stackUntoggled = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("stacking",9a,62,b6,99)),HX_("untoggled",17,e9,05,c8),true,HX_("back",27,da,10,41));
            		}
HXLINE(3700)		::String tab_spacing_str = ::flixel::addons::ui::U_obj::xml_str(data,HX_("spacing",83,33,bb,91),true,HX_("",00,00,00,00));
HXLINE(3701)		 ::Dynamic tab_spacing = null();
HXLINE(3702)		if ((tab_spacing_str != HX_("",00,00,00,00))) {
HXLINE(3704)			tab_spacing = this->_loadWidth(data,0,HX_("spacing",83,33,bb,91),null());
            		}
HXLINE(3708)		Float tab_x = this->_loadWidth(data,0,HX_("tab_x",ce,ac,e3,0a),null());
HXLINE(3709)		Float tab_y = this->_loadHeight(data,0,HX_("tab_y",cf,ac,e3,0a),null());
HXLINE(3710)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(tab_x,tab_y);
HXDLIN(3710)		point->_inPool = false;
HXDLIN(3710)		 ::flixel::math::FlxPoint tab_offset = point;
HXLINE(3712)		::String tab_def_str = HX_("",00,00,00,00);
HXLINE(3714)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("tab",55,5a,58,00))) {
HXLINE(3716)			{
HXLINE(3716)				int _g = 0;
HXDLIN(3716)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("tab",55,5a,58,00));
HXDLIN(3716)				while((_g < _g1->length)){
HXLINE(3716)					 ::Xml tabNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3716)					_g = (_g + 1);
HXLINE(3718)					::String temp = ::flixel::addons::ui::U_obj::xml_str(tabNode,HX_("use_def",8d,da,e9,62),null(),null());
HXLINE(3719)					if ((temp != HX_("",00,00,00,00))) {
HXLINE(3721)						tab_def_str = temp;
            					}
            				}
            			}
HXLINE(3724)			if ((tab_def_str != HX_("",00,00,00,00))) {
HXLINE(3726)				tab_def = this->getDefinition(tab_def_str,null());
            			}
            			else {
HXLINE(3730)				tab_def = ::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("tab",55,5a,58,00));
            			}
            		}
HXLINE(3734)		::Array< ::Dynamic> list_tabs = ::Array_obj< ::Dynamic>::__new();
HXLINE(3736)		::String name = HX_("",00,00,00,00);
HXLINE(3738)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("tab",55,5a,58,00))) {
HXLINE(3740)			int _g = 0;
HXDLIN(3740)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("tab",55,5a,58,00));
HXDLIN(3740)			while((_g < _g1->length)){
HXLINE(3740)				 ::Xml tab_node = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3740)				_g = (_g + 1);
HXLINE(3742)				name = ::flixel::addons::ui::U_obj::xml_name(tab_node);
HXLINE(3744)				if ((name != HX_("",00,00,00,00))) {
HXLINE(3746)					::String label = ::flixel::addons::ui::U_obj::xml_str(tab_node,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3747)					::String context = ::flixel::addons::ui::U_obj::xml_str(tab_node,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3748)					::String code = ::flixel::addons::ui::U_obj::xml_str(tab_node,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3749)					label = this->getText(label,context,true,code);
HXLINE(3751)					label = this->getText(label,context,true,code);
HXLINE(3753)					 ::Xml tab_info = ::flixel::addons::ui::FlxUI_obj::consolidateData(tab_node,tab_def,null());
HXLINE(3754)					::Dynamic tab = this->_loadButton(tab_info,true,true,HX_("tab_menu",09,73,e1,d6));
HXLINE(3755)					tab->__SetField(HX_("name",4b,72,ff,48),name,::hx::paccDynamic);
HXLINE(3756)					list_tabs->push(tab);
HXLINE(3757)					this->_loadTooltip(tab,tab_info);
            				}
            			}
            		}
HXLINE(3762)		if ((list_tabs->length > 0)) {
HXLINE(3764)			bool _hx_tmp;
HXDLIN(3764)			if (::hx::IsNotNull( tab_def )) {
HXLINE(3764)				_hx_tmp = !(::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(tab_def,HX_("text",ad,cc,f9,4c)));
            			}
            			else {
HXLINE(3764)				_hx_tmp = true;
            			}
HXDLIN(3764)			if (_hx_tmp) {
HXLINE(3766)				int _g = 0;
HXDLIN(3766)				while((_g < list_tabs->length)){
HXLINE(3766)					::Dynamic t = list_tabs->__get(_g);
HXDLIN(3766)					_g = (_g + 1);
HXLINE(3768)					if (::Std_obj::isOfType(t,::hx::ClassOf< ::flixel::addons::ui::FlxUITypedButton >())) {
HXLINE(3770)						 ::flixel::addons::ui::FlxUITypedButton tb = ( ( ::flixel::addons::ui::FlxUITypedButton)(t) );
HXLINE(3771)						( ( ::flixel::FlxSprite)(tb->label) )->set_color(16777215);
HXLINE(3772)						if (::Std_obj::isOfType(tb->label,::hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(3774)							 ::flixel::addons::ui::FlxUIText labelText = ( ( ::flixel::addons::ui::FlxUIText)(tb->label) );
HXLINE(3775)							{
HXLINE(3775)								labelText->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(3775)								labelText->set_borderColor(0);
HXDLIN(3775)								labelText->set_borderSize(( (Float)(1) ));
HXDLIN(3775)								labelText->set_borderQuality(( (Float)(1) ));
            							}
            						}
            					}
            				}
            			}
HXLINE(3781)			bool _hx_tmp1;
HXDLIN(3781)			if (::hx::IsNotNull( tab_def )) {
HXLINE(3781)				_hx_tmp1 = !(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(tab_def,HX_("width",06,b6,62,ca)));
            			}
            			else {
HXLINE(3781)				_hx_tmp1 = true;
            			}
HXDLIN(3781)			if (_hx_tmp1) {
HXLINE(3783)				stretch_tabs = true;
            			}
            		}
HXLINE(3788)		::Array< ::String > tab_stacking = ::Array_obj< ::String >::__new(2)->init(0,stackToggled)->init(1,stackUntoggled);
HXLINE(3790)		 ::flixel::addons::ui::FlxUITabMenu fg =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,backSprite,list_tabs,null(),tab_offset,stretch_tabs,tab_spacing,tab_stacking);
HXLINE(3792)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("group",3f,b3,f4,99))) {
HXLINE(3794)			int _g = 0;
HXDLIN(3794)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("group",3f,b3,f4,99));
HXDLIN(3794)			while((_g < _g1->length)){
HXLINE(3794)				 ::Xml group_node = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3794)				_g = (_g + 1);
HXLINE(3796)				name = ::flixel::addons::ui::U_obj::xml_name(group_node);
HXLINE(3797)				 ::flixel::addons::ui::FlxUI _ui =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,group_node,fg,::hx::ObjectPtr<OBJ_>(this),this->_ptr_tongue,null(),null());
HXLINE(3798)				bool _hx_tmp;
HXDLIN(3798)				if (::hx::IsNotNull( list_tabs )) {
HXLINE(3798)					_hx_tmp = (list_tabs->length > 0);
            				}
            				else {
HXLINE(3798)					_hx_tmp = false;
            				}
HXDLIN(3798)				if (_hx_tmp) {
HXLINE(3800)					 ::flixel::addons::ui::FlxUI _g = _ui;
HXDLIN(3800)					Float _g1 = _g->y;
HXDLIN(3800)					_g->set_y((_g1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(list_tabs->__get(0))));
            				}
HXLINE(3802)				_ui->name = name;
HXLINE(3803)				fg->addGroup(_ui);
            			}
            		}
HXLINE(3809)		return fg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadTabMenu,return )

::Dynamic FlxUI_obj::_loadNumericStepper( ::Xml data,::hx::Null< bool >  __o_setCallback){
            		bool setCallback = __o_setCallback.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3813__loadNumericStepper)
HXLINE(3824)		Float stepSize = ::flixel::addons::ui::U_obj::xml_f(data,HX_("step",4c,e7,5b,4c),1);
HXLINE(3825)		Float defaultValue = ::flixel::addons::ui::U_obj::xml_f(data,HX_("value",71,7f,b8,31),0);
HXLINE(3826)		Float min = ::flixel::addons::ui::U_obj::xml_f(data,HX_("min",92,11,53,00),0);
HXLINE(3827)		Float max = ::flixel::addons::ui::U_obj::xml_f(data,HX_("max",a4,0a,53,00),10);
HXLINE(3828)		int decimals = ::flixel::addons::ui::U_obj::xml_i(data,HX_("decimals",c2,4a,6a,12),0);
HXLINE(3829)		bool percent = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("percent",c5,aa,da,78),null());
HXLINE(3830)		::String stack = ::flixel::addons::ui::U_obj::xml_str(data,HX_("stack",48,67,0b,84),true,HX_("",00,00,00,00));
HXLINE(3831)		if ((stack == HX_("",00,00,00,00))) {
HXLINE(3833)			stack = ::flixel::addons::ui::U_obj::xml_str(data,HX_("stacking",9a,62,b6,99),true,HX_("",00,00,00,00));
            		}
HXLINE(3835)		stack = stack.toLowerCase();
HXLINE(3836)		int stacking;
HXLINE(3838)		::String _hx_switch_0 = stack;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ||  (_hx_switch_0==HX_("horz",8f,ce,12,45)) ){
HXLINE(3841)			stacking = 1;
HXDLIN(3841)			goto _hx_goto_155;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vert",b1,34,4c,4e)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(3843)			stacking = 0;
HXDLIN(3843)			goto _hx_goto_155;
            		}
            		/* default */{
HXLINE(3845)			stacking = 1;
            		}
            		_hx_goto_155:;
HXLINE(3848)		 ::flixel::text::FlxText theText = null();
HXLINE(3849)		 ::flixel::addons::ui::FlxUITypedButton buttPlus = null();
HXLINE(3850)		 ::flixel::addons::ui::FlxUITypedButton buttMinus = null();
HXLINE(3852)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c))) {
HXLINE(3854)			theText = ( ( ::flixel::text::FlxText)(this->_loadThing(HX_("text",ad,cc,f9,4c),::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c)))) );
            		}
HXLINE(3856)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("plus",5a,3f,5a,4a))) {
HXLINE(3858)			buttPlus = ( ( ::flixel::addons::ui::FlxUITypedButton)(this->_loadThing(HX_("button",f2,61,e0,d9),::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("plus",5a,3f,5a,4a)))) );
            		}
HXLINE(3860)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("minus",70,80,68,08))) {
HXLINE(3862)			buttMinus = ( ( ::flixel::addons::ui::FlxUITypedButton)(this->_loadThing(HX_("button",f2,61,e0,d9),::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("minus",70,80,68,08)))) );
            		}
HXLINE(3865)		 ::flixel::addons::ui::FlxUINumericStepper ns =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,0,0,stepSize,defaultValue,min,max,decimals,stacking,theText,buttPlus,buttMinus,percent);
HXLINE(3868)		if (setCallback) {
HXLINE(3870)			::cpp::VirtualArray params = null();
HXDLIN(3870)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(3870)				params = ::cpp::VirtualArray_obj::__new();
HXDLIN(3870)				{
HXLINE(3870)					int _g = 0;
HXDLIN(3870)					::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(3870)					while((_g < _g1->length)){
HXLINE(3870)						 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3870)						_g = (_g + 1);
HXDLIN(3870)						bool _hx_tmp;
HXDLIN(3870)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(3870)							_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            						}
            						else {
HXLINE(3870)							_hx_tmp = false;
            						}
HXDLIN(3870)						if (_hx_tmp) {
HXLINE(3870)							::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(3870)							type = type.toLowerCase();
HXDLIN(3870)							::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(3870)							 ::Dynamic value = valueStr;
HXDLIN(3870)							int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(3870)							::String _hx_switch_1 = type;
            							if (  (_hx_switch_1==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_1==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(3870)								::String str = ::String(valueStr);
HXDLIN(3870)								str = str.toLowerCase();
HXDLIN(3870)								bool _hx_tmp;
HXDLIN(3870)								if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(3870)									_hx_tmp = (str == HX_("1",31,00,00,00));
            								}
            								else {
HXLINE(3870)									_hx_tmp = true;
            								}
HXDLIN(3870)								if (_hx_tmp) {
HXLINE(3870)									value = true;
            								}
            								else {
HXLINE(3870)									value = false;
            								}
HXDLIN(3870)								goto _hx_goto_157;
            							}
            							if (  (_hx_switch_1==HX_("color",63,71,5c,4a)) ||  (_hx_switch_1==HX_("hex",db,42,4f,00)) ){
HXLINE(3870)								 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(3870)								if (::hx::IsNull( return_val )) {
HXLINE(3870)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr)));
            								}
HXDLIN(3870)								value = return_val;
HXDLIN(3870)								goto _hx_goto_157;
            							}
            							if (  (_hx_switch_1==HX_("float",9c,c5,96,02)) ){
HXLINE(3870)								value = ::Std_obj::parseFloat(valueStr);
HXDLIN(3870)								goto _hx_goto_157;
            							}
            							if (  (_hx_switch_1==HX_("int",ef,0c,50,00)) ){
HXLINE(3870)								value = ::Std_obj::parseInt(valueStr);
HXDLIN(3870)								goto _hx_goto_157;
            							}
            							if (  (_hx_switch_1==HX_("string",d1,28,30,11)) ){
HXLINE(3870)								value = ::String(valueStr);
HXDLIN(3870)								goto _hx_goto_157;
            							}
            							_hx_goto_157:;
HXDLIN(3870)							params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value",71,7f,b8,31),value)
            								->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            						}
            					}
            				}
HXDLIN(3870)				params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(3870)				{
HXLINE(3870)					int _g2 = 0;
HXDLIN(3870)					int _g3 = params->get_length();
HXDLIN(3870)					while((_g2 < _g3)){
HXLINE(3870)						_g2 = (_g2 + 1);
HXDLIN(3870)						int i = (_g2 - 1);
HXDLIN(3870)						params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            					}
            				}
            			}
HXDLIN(3870)			::cpp::VirtualArray params1 = params;
HXLINE(3871)			ns->set_params(params1);
            		}
HXLINE(3874)		return ns;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadNumericStepper,return )

 ::flixel::math::FlxPoint FlxUI_obj::getResizeRatio( ::Xml data,::hx::Null< int >  __o_defaultAxis){
            		int defaultAxis = __o_defaultAxis.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3878_getResizeRatio)
HXLINE(3879)		::String str = ::flixel::addons::ui::U_obj::xml_str(data,HX_("resize_ratio_x",79,e8,30,0e),true,null());
HXLINE(3880)		if ((str == HX_("",00,00,00,00))) {
HXLINE(3882)			str = ::flixel::addons::ui::U_obj::xml_str(data,HX_("resize_ratio_y",7a,e8,30,0e),true,null());
HXLINE(3883)			if ((str == HX_("",00,00,00,00))) {
HXLINE(3886)				Float resize_ratio = ::flixel::addons::ui::U_obj::xml_f(data,HX_("resize_ratio",40,c5,84,8f),-1);
HXLINE(3887)				return  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,resize_ratio,defaultAxis);
            			}
            			else {
HXLINE(3892)				return  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,::Std_obj::parseFloat(str),1);
            			}
            		}
            		else {
HXLINE(3898)			return  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,::Std_obj::parseFloat(str),0);
            		}
HXLINE(3880)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getResizeRatio,return )

::Dynamic FlxUI_obj::_loadButton( ::Xml data,::hx::Null< bool >  __o_setCallback,::hx::Null< bool >  __o_isToggle,::String __o_load_code){
            		bool setCallback = __o_setCallback.Default(true);
            		bool isToggle = __o_isToggle.Default(false);
            		::String load_code = __o_load_code;
            		if (::hx::IsNull(__o_load_code)) load_code = HX_("",00,00,00,00);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3907__loadButton)
HXLINE(3908)		::Dynamic fb = null();
HXLINE(3909)		int color = this->_loadColor(data,null(),null());
HXLINE(3910)		Float resize_ratio = ::flixel::addons::ui::U_obj::xml_f(data,HX_("resize_ratio",40,c5,84,8f),-1);
HXLINE(3911)		 ::flixel::math::FlxPoint resize_point = this->_loadCompass(data,HX_("resize_point",85,44,f0,71));
HXLINE(3912)		bool resize_label = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("resize_label",29,9e,0f,1b),false);
HXLINE(3914)		::String label = ::flixel::addons::ui::U_obj::xml_str(data,HX_("label",f4,0d,af,6f),null(),null());
HXLINE(3916)		 ::flixel::addons::ui::FlxUISprite sprite = null();
HXLINE(3917)		 ::flixel::addons::ui::FlxUISprite toggleSprite = null();
HXLINE(3918)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("sprite",05,dc,95,c3))) {
HXLINE(3920)			int _g = 0;
HXDLIN(3920)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("sprite",05,dc,95,c3));
HXDLIN(3920)			while((_g < _g1->length)){
HXLINE(3920)				 ::Xml spriteNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3920)				_g = (_g + 1);
HXLINE(3922)				bool forToggle;
HXDLIN(3922)				if (isToggle) {
HXLINE(3922)					forToggle = ::flixel::addons::ui::U_obj::xml_bool(spriteNode,HX_("toggle",94,bf,43,8f),null());
            				}
            				else {
HXLINE(3922)					forToggle = false;
            				}
HXLINE(3923)				if (forToggle) {
HXLINE(3925)					toggleSprite = ( ( ::flixel::addons::ui::FlxUISprite)(this->_loadThing(HX_("sprite",05,dc,95,c3),spriteNode)) );
            				}
            				else {
HXLINE(3929)					sprite = ( ( ::flixel::addons::ui::FlxUISprite)(this->_loadThing(HX_("sprite",05,dc,95,c3),spriteNode)) );
            				}
            			}
            		}
HXLINE(3934)		::String context = ::flixel::addons::ui::U_obj::xml_str(data,HX_("context",ef,95,77,19),true,HX_("ui",54,66,00,00));
HXLINE(3935)		::String code = ::flixel::addons::ui::U_obj::xml_str(data,HX_("code",2d,b1,c4,41),true,HX_("",00,00,00,00));
HXLINE(3937)		label = this->getText(label,context,true,code);
HXLINE(3939)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,0,HX_("width",06,b6,62,ca),null()));
HXLINE(3940)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,0,HX_("height",e7,07,4c,02),null()));
HXLINE(3942)		::cpp::VirtualArray params = null();
HXDLIN(3942)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd))) {
HXLINE(3942)			params = ::cpp::VirtualArray_obj::__new();
HXDLIN(3942)			{
HXLINE(3942)				int _g = 0;
HXDLIN(3942)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("param",8d,80,55,bd));
HXDLIN(3942)				while((_g < _g1->length)){
HXLINE(3942)					 ::Xml param = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(3942)					_g = (_g + 1);
HXDLIN(3942)					bool _hx_tmp;
HXDLIN(3942)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d))) {
HXLINE(3942)						_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
            					}
            					else {
HXLINE(3942)						_hx_tmp = false;
            					}
HXDLIN(3942)					if (_hx_tmp) {
HXLINE(3942)						::String type = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("type",ba,f2,08,4d));
HXDLIN(3942)						type = type.toLowerCase();
HXDLIN(3942)						::String valueStr = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(param,HX_("value",71,7f,b8,31));
HXDLIN(3942)						 ::Dynamic value = valueStr;
HXDLIN(3942)						int sort = ::flixel::addons::ui::U_obj::xml_i(param,HX_("sort",5e,27,58,4c),-1);
HXDLIN(3942)						::String _hx_switch_0 = type;
            						if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ||  (_hx_switch_0==HX_("boolean",a8,ea,fe,7d)) ){
HXLINE(3942)							::String str = ::String(valueStr);
HXDLIN(3942)							str = str.toLowerCase();
HXDLIN(3942)							bool _hx_tmp;
HXDLIN(3942)							if ((str != HX_("true",4e,a7,03,4d))) {
HXLINE(3942)								_hx_tmp = (str == HX_("1",31,00,00,00));
            							}
            							else {
HXLINE(3942)								_hx_tmp = true;
            							}
HXDLIN(3942)							if (_hx_tmp) {
HXLINE(3942)								value = true;
            							}
            							else {
HXLINE(3942)								value = false;
            							}
HXDLIN(3942)							goto _hx_goto_163;
            						}
            						if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ||  (_hx_switch_0==HX_("hex",db,42,4f,00)) ){
HXLINE(3942)							 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(valueStr);
HXDLIN(3942)							if (::hx::IsNull( return_val )) {
HXLINE(3942)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + valueStr)));
            							}
HXDLIN(3942)							value = return_val;
HXDLIN(3942)							goto _hx_goto_163;
            						}
            						if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE(3942)							value = ::Std_obj::parseFloat(valueStr);
HXDLIN(3942)							goto _hx_goto_163;
            						}
            						if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ){
HXLINE(3942)							value = ::Std_obj::parseInt(valueStr);
HXDLIN(3942)							goto _hx_goto_163;
            						}
            						if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE(3942)							value = ::String(valueStr);
HXDLIN(3942)							goto _hx_goto_163;
            						}
            						_hx_goto_163:;
HXDLIN(3942)						params->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("value",71,7f,b8,31),value)
            							->setFixed(1,HX_("sort",5e,27,58,4c),sort)));
            					}
            				}
            			}
HXDLIN(3942)			params->sort(::flixel::addons::ui::FlxUI_obj::sortParams_dyn());
HXDLIN(3942)			{
HXLINE(3942)				int _g2 = 0;
HXDLIN(3942)				int _g3 = params->get_length();
HXDLIN(3942)				while((_g2 < _g3)){
HXLINE(3942)					_g2 = (_g2 + 1);
HXDLIN(3942)					int i = (_g2 - 1);
HXDLIN(3942)					params->set(i, ::Dynamic(params->__get(i)->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            				}
            			}
            		}
HXDLIN(3942)		::cpp::VirtualArray params1 = params;
HXLINE(3944)		if (::hx::IsNull( sprite )) {
HXLINE(3946)			bool useDefaultGraphic = (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)) == false);
HXLINE(3947)			fb =  ::flixel::addons::ui::FlxUIButton_obj::__alloc( HX_CTX ,0,0,label,null(),useDefaultGraphic,false,color);
HXLINE(3948)			 ::flixel::addons::ui::FlxUIButton fuib = ( ( ::flixel::addons::ui::FlxUIButton)(fb) );
HXLINE(3949)			fuib->_autoCleanup = false;
            		}
            		else {
HXLINE(3953)			 ::flixel::group::FlxTypedSpriteGroup tempGroup = null();
HXLINE(3954)			if ((label != HX_("",00,00,00,00))) {
HXLINE(3958)				 ::flixel::addons::ui::FlxUIText labelTxt =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,0,0,80,label,8,null());
HXLINE(3960)				labelTxt->setFormat(null(),8,3355443,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(3962)				tempGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(3964)				tempGroup->add(sprite).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3965)				tempGroup->add(labelTxt).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3967)				fb =  ::flixel::addons::ui::FlxUISpriteButton_obj::__alloc( HX_CTX ,0,0,tempGroup,null());
            			}
            			else {
HXLINE(3971)				fb =  ::flixel::addons::ui::FlxUISpriteButton_obj::__alloc( HX_CTX ,0,0,sprite,null());
            			}
            		}
HXLINE(3974)		fb->__SetField(HX_("resize_ratio",40,c5,84,8f),resize_ratio,::hx::paccDynamic);
HXLINE(3975)		fb->__SetField(HX_("resize_point",85,44,f0,71),resize_point,::hx::paccDynamic);
HXLINE(3976)		fb->__SetField(HX_("autoResizeLabel",31,30,ad,1c),resize_label,::hx::paccDynamic);
HXLINE(3978)		if (setCallback) {
HXLINE(3980)			::flixel::addons::ui::interfaces::IHasParams_obj::set_params(fb,params1);
            		}
HXLINE(3985)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74))) {
HXLINE(3987)			bool blank = ::flixel::addons::ui::U_obj::xml_bool(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)),HX_("blank",54,df,f1,b4),null());
HXLINE(3989)			if (blank) {
HXLINE(3995)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00)),W,H,null(),0,resize_ratio,null(),null(),null(),null());
            			}
            			else {
HXLINE(4000)				::cpp::VirtualArray graphic_names = null();
HXLINE(4001)				::Array< ::Dynamic> slice9_names = null();
HXLINE(4002)				::Array< int > frames = null();
HXLINE(4004)				if (isToggle) {
HXLINE(4006)					graphic_names = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00))->init(3,HX_("",00,00,00,00))->init(4,HX_("",00,00,00,00))->init(5,HX_("",00,00,00,00));
HXLINE(4007)					slice9_names = ::Array_obj< ::Dynamic>::__new(6)->init(0,null())->init(1,null())->init(2,null())->init(3,null())->init(4,null())->init(5,null());
            				}
            				else {
HXLINE(4011)					graphic_names = ::cpp::VirtualArray_obj::__new(3)->init(0,HX_("",00,00,00,00))->init(1,HX_("",00,00,00,00))->init(2,HX_("",00,00,00,00));
HXLINE(4012)					slice9_names = ::Array_obj< ::Dynamic>::__new(3)->init(0,null())->init(1,null())->init(2,null());
            				}
HXLINE(4016)				int src_w = ::flixel::addons::ui::U_obj::xml_i(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)),HX_("src_w",1c,7b,ba,82),0);
HXLINE(4017)				int src_h = ::flixel::addons::ui::U_obj::xml_i(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)),HX_("src_h",0d,7b,ba,82),0);
HXLINE(4018)				::String tileStr = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)),HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
HXDLIN(4018)				int tile = 0;
HXDLIN(4018)				::String _hx_switch_1 = tileStr;
            				if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(4018)					tile = 16;
HXDLIN(4018)					goto _hx_goto_165;
            				}
            				if (  (_hx_switch_1==HX_("v",76,00,00,00)) ||  (_hx_switch_1==HX_("vertical",76,bc,15,6a)) ){
HXLINE(4018)					tile = 1;
HXDLIN(4018)					goto _hx_goto_165;
            				}
            				if (  (_hx_switch_1==HX_("all",21,f9,49,00)) ||  (_hx_switch_1==HX_("both",81,88,1b,41)) ||  (_hx_switch_1==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_1==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_1==HX_("vh",32,67,00,00)) ){
HXLINE(4018)					tile = 17;
HXDLIN(4018)					goto _hx_goto_165;
            				}
            				_hx_goto_165:;
HXDLIN(4018)				int tile1 = tile;
HXLINE(4021)				::String frame_str = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74)),HX_("frames",a6,af,85,ac),true,null());
HXLINE(4022)				if ((frame_str != HX_("",00,00,00,00))) {
HXLINE(4024)					frames = ::Array_obj< int >::__new();
HXLINE(4025)					::Array< ::String > arr = frame_str.split(HX_(",",2c,00,00,00));
HXLINE(4026)					{
HXLINE(4026)						int _g = 0;
HXDLIN(4026)						while((_g < arr->length)){
HXLINE(4026)							::String numstr = arr->__get(_g);
HXDLIN(4026)							_g = (_g + 1);
HXLINE(4028)							frames->push(::Std_obj::parseInt(numstr));
            						}
            					}
            				}
HXLINE(4032)				{
HXLINE(4032)					int _g = 0;
HXDLIN(4032)					::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("graphic",a8,5a,07,74));
HXDLIN(4032)					while((_g < _g1->length)){
HXLINE(4032)						 ::Xml graphicNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(4032)						_g = (_g + 1);
HXLINE(4034)						::String graphic_name = ::flixel::addons::ui::U_obj::xml_name(graphicNode);
HXLINE(4035)						::String image = ::flixel::addons::ui::U_obj::xml_str(graphicNode,HX_("image",5b,1f,69,bd),null(),null());
HXLINE(4036)						::Array< int > slice9 = ::flixel::util::FlxStringUtil_obj::toIntArray(::flixel::addons::ui::U_obj::xml_str(graphicNode,HX_("slice9",a7,03,04,70),null(),null()));
HXLINE(4037)						::String tileStr = ::flixel::addons::ui::U_obj::xml_str(graphicNode,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
HXDLIN(4037)						int tile = 0;
HXDLIN(4037)						::String _hx_switch_2 = tileStr;
            						if (  (_hx_switch_2==HX_("h",68,00,00,00)) ||  (_hx_switch_2==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(4037)							tile = 16;
HXDLIN(4037)							goto _hx_goto_168;
            						}
            						if (  (_hx_switch_2==HX_("v",76,00,00,00)) ||  (_hx_switch_2==HX_("vertical",76,bc,15,6a)) ){
HXLINE(4037)							tile = 1;
HXDLIN(4037)							goto _hx_goto_168;
            						}
            						if (  (_hx_switch_2==HX_("all",21,f9,49,00)) ||  (_hx_switch_2==HX_("both",81,88,1b,41)) ||  (_hx_switch_2==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_2==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_2==HX_("vh",32,67,00,00)) ){
HXLINE(4037)							tile = 17;
HXDLIN(4037)							goto _hx_goto_168;
            						}
            						_hx_goto_168:;
HXDLIN(4037)						tile1 = tile;
HXLINE(4039)						bool toggleState = ::flixel::addons::ui::U_obj::xml_bool(graphicNode,HX_("toggle",94,bf,43,8f),null());
HXLINE(4040)						if (toggleState) {
HXLINE(4040)							toggleState = isToggle;
            						}
            						else {
HXLINE(4040)							toggleState = false;
            						}
HXLINE(4042)						::String igfx = ::flixel::addons::ui::U_obj::gfx(image,null(),null(),null(),null(),null());
HXLINE(4044)						::String _hx_switch_3 = graphic_name;
            						if (  (_hx_switch_3==HX_("all",21,f9,49,00)) ){
HXLINE(4107)							int tilesTall;
HXDLIN(4107)							if (isToggle) {
HXLINE(4107)								tilesTall = 6;
            							}
            							else {
HXLINE(4107)								tilesTall = 3;
            							}
HXLINE(4109)							 ::openfl::display::BitmapData temp = null();
HXLINE(4112)							if ((src_h != 0)) {
HXLINE(4114)								 ::openfl::display::BitmapData temp = ::flixel::addons::ui::U_obj::getBmp(igfx);
HXLINE(4115)								tilesTall = ::Std_obj::_hx_int((( (Float)(temp->height) ) / ( (Float)(src_h) )));
            							}
HXLINE(4118)							if ((image != HX_("",00,00,00,00))) {
HXLINE(4120)								graphic_names = ::cpp::VirtualArray_obj::__new(1)->init(0,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),1,tilesTall));
            							}
HXLINE(4123)							slice9_names = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(0)) ),HX_("image",5b,1f,69,bd)));
HXLINE(4126)							temp = ::flixel::addons::ui::U_obj::getBmp(graphic_names->__get(0));
HXLINE(4127)							src_w = temp->width;
HXLINE(4128)							src_h = ::Std_obj::_hx_int((( (Float)(temp->height) ) / ( (Float)(tilesTall) )));
HXLINE(4106)							goto _hx_goto_169;
            						}
            						if (  (_hx_switch_3==HX_("active",c6,41,46,16)) ||  (_hx_switch_3==HX_("highlight",34,56,00,ed)) ||  (_hx_switch_3==HX_("hilight",35,b2,2d,55)) ||  (_hx_switch_3==HX_("hover",bc,e5,64,2b)) ||  (_hx_switch_3==HX_("over",54,91,b8,49)) ){
HXLINE(4067)							if ((image != HX_("",00,00,00,00))) {
HXLINE(4069)								if (!(toggleState)) {
HXLINE(4071)									graphic_names->set(1,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            								else {
HXLINE(4075)									graphic_names->set(4,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            							}
HXLINE(4078)							if (!(toggleState)) {
HXLINE(4080)								slice9_names[1] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(1)) ),HX_("image",5b,1f,69,bd));
            							}
            							else {
HXLINE(4084)								slice9_names[4] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(4)) ),HX_("image",5b,1f,69,bd));
            							}
HXLINE(4066)							goto _hx_goto_169;
            						}
            						if (  (_hx_switch_3==HX_("down",62,f8,6d,42)) ||  (_hx_switch_3==HX_("pressed",a2,d2,e6,39)) ||  (_hx_switch_3==HX_("pushed",b9,14,2d,72)) ){
HXLINE(4087)							if ((image != HX_("",00,00,00,00))) {
HXLINE(4089)								if (!(toggleState)) {
HXLINE(4091)									graphic_names->set(2,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            								else {
HXLINE(4095)									graphic_names->set(5,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            							}
HXLINE(4098)							if (!(toggleState)) {
HXLINE(4100)								slice9_names[2] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(2)) ),HX_("image",5b,1f,69,bd));
            							}
            							else {
HXLINE(4104)								slice9_names[5] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(5)) ),HX_("image",5b,1f,69,bd));
            							}
HXLINE(4086)							goto _hx_goto_169;
            						}
            						if (  (_hx_switch_3==HX_("",00,00,00,00)) ||  (_hx_switch_3==HX_("inactive",6b,17,30,6a)) ||  (_hx_switch_3==HX_("normal",27,72,69,30)) ||  (_hx_switch_3==HX_("up",5b,66,00,00)) ){
HXLINE(4047)							if ((image != HX_("",00,00,00,00))) {
HXLINE(4049)								if (!(toggleState)) {
HXLINE(4051)									graphic_names->set(0,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            								else {
HXLINE(4055)									graphic_names->set(3,this->loadScaledSrc(graphicNode,HX_("image",5b,1f,69,bd),HX_("scale_src",6f,c7,bc,37),null(),null()));
            								}
            							}
HXLINE(4058)							if (!(toggleState)) {
HXLINE(4060)								slice9_names[0] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(0)) ),HX_("image",5b,1f,69,bd));
            							}
            							else {
HXLINE(4064)								slice9_names[3] = this->load9SliceSprite_scaleSub(slice9,graphicNode,( (::String)(graphic_names->__get(3)) ),HX_("image",5b,1f,69,bd));
            							}
HXLINE(4046)							goto _hx_goto_169;
            						}
            						_hx_goto_169:;
HXLINE(4131)						if (::hx::IsNotEq( graphic_names->__get(0),HX_("",00,00,00,00) )) {
HXLINE(4133)							if ((graphic_names->get_length() >= 3)) {
HXLINE(4135)								if (::hx::IsEq( graphic_names->__get(1),HX_("",00,00,00,00) )) {
HXLINE(4137)									graphic_names->set(1,graphic_names->__get(0));
            								}
HXLINE(4139)								if (::hx::IsEq( graphic_names->__get(2),HX_("",00,00,00,00) )) {
HXLINE(4141)									graphic_names->set(2,graphic_names->__get(1));
            								}
HXLINE(4143)								if ((graphic_names->get_length() >= 6)) {
HXLINE(4145)									if (::hx::IsEq( graphic_names->__get(3),HX_("",00,00,00,00) )) {
HXLINE(4147)										graphic_names->set(3,graphic_names->__get(0));
            									}
HXLINE(4149)									if (::hx::IsEq( graphic_names->__get(4),HX_("",00,00,00,00) )) {
HXLINE(4151)										graphic_names->set(4,graphic_names->__get(1));
            									}
HXLINE(4153)									if (::hx::IsEq( graphic_names->__get(5),HX_("",00,00,00,00) )) {
HXLINE(4155)										graphic_names->set(5,graphic_names->__get(2));
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE(4163)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,graphic_names,W,H,slice9_names,tile1,resize_ratio,isToggle,src_w,src_h,frames);
            			}
            		}
            		else {
HXLINE(4168)			if ((load_code == HX_("tab_menu",09,73,e1,d6))) {
HXLINE(4171)				::cpp::VirtualArray graphic_names = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(1,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(2,HX_("flixel/flixel-ui/img/tab_back.png",d5,c5,cd,aa))->init(3,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04))->init(4,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04))->init(5,HX_("flixel/flixel-ui/img/tab.png",27,2e,82,04));
HXLINE(4179)				::Array< int > slice9_tab = ::flixel::util::FlxStringUtil_obj::toIntArray(HX_("6,6,11,11",c0,1f,fa,07));
HXLINE(4180)				::Array< ::Dynamic> slice9_names = ::Array_obj< ::Dynamic>::__new(6)->init(0,slice9_tab)->init(1,slice9_tab)->init(2,slice9_tab)->init(3,slice9_tab)->init(4,slice9_tab)->init(5,slice9_tab);
HXLINE(4183)				if (::Std_obj::isOfType(fb,::hx::ClassOf< ::flixel::addons::ui::FlxUIButton >())) {
HXLINE(4185)					 ::flixel::addons::ui::FlxUIButton fbui = ( ( ::flixel::addons::ui::FlxUIButton)(fb) );
HXLINE(4186)					fbui->loadGraphicSlice9(graphic_names,W,H,slice9_names,0,resize_ratio,isToggle,null(),null(),null());
            				}
            				else {
HXLINE(4188)					if (::Std_obj::isOfType(fb,::hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >())) {
HXLINE(4190)						 ::flixel::addons::ui::FlxUISpriteButton fbuis = ( ( ::flixel::addons::ui::FlxUISpriteButton)(fb) );
HXLINE(4191)						fbuis->loadGraphicSlice9(graphic_names,W,H,slice9_names,0,resize_ratio,isToggle,null(),null(),null());
            					}
            					else {
HXLINE(4195)						::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,graphic_names,W,H,slice9_names,0,resize_ratio,isToggle,null(),null(),null());
            					}
            				}
            			}
            			else {
HXLINE(4201)				if ((W <= 0)) {
HXLINE(4202)					W = 80;
            				}
HXLINE(4203)				if ((H <= 0)) {
HXLINE(4204)					H = 20;
            				}
HXLINE(4205)				::flixel::addons::ui::interfaces::IFlxUIButton_obj::loadGraphicSlice9(fb,null(),W,H,null(),0,resize_ratio,isToggle,null(),null(),null());
            			}
            		}
HXLINE(4211)		if (::hx::IsNull( sprite )) {
HXLINE(4213)			bool _hx_tmp;
HXDLIN(4213)			if (::hx::IsNotNull( data )) {
HXLINE(4213)				_hx_tmp = ::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c));
            			}
            			else {
HXLINE(4213)				_hx_tmp = false;
            			}
HXDLIN(4213)			if (_hx_tmp) {
HXLINE(4215)				this->formatButtonText(data,fb);
            			}
            			else {
HXLINE(4219)				if ((load_code == HX_("tab_menu",09,73,e1,d6))) {
HXLINE(4221)					fb->__SetField(HX_("up_color",3f,d5,b5,9b),16777215,::hx::paccDynamic);
HXLINE(4222)					fb->__SetField(HX_("down_color",86,26,b3,4e),16777215,::hx::paccDynamic);
HXLINE(4223)					fb->__SetField(HX_("over_color",f8,00,4a,f7),16777215,::hx::paccDynamic);
HXLINE(4224)					fb->__SetField(HX_("up_toggle_color",dc,6e,0c,dd),16777215,::hx::paccDynamic);
HXLINE(4225)					fb->__SetField(HX_("down_toggle_color",75,e4,c8,06),16777215,::hx::paccDynamic);
HXLINE(4226)					fb->__SetField(HX_("over_toggle_color",43,1c,98,aa),16777215,::hx::paccDynamic);
            				}
            				else {
HXLINE(4231)					::flixel::addons::ui::interfaces::IFlxUIButton_obj::autoCenterLabel(fb);
            				}
            			}
            		}
            		else {
HXLINE(4237)			::flixel::addons::ui::interfaces::IFlxUIButton_obj::autoCenterLabel(fb);
            		}
HXLINE(4240)		bool _hx_tmp;
HXDLIN(4240)		if (::hx::IsNotNull( sprite )) {
HXLINE(4240)			_hx_tmp = (label != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(4240)			_hx_tmp = false;
            		}
HXDLIN(4240)		if (_hx_tmp) {
HXLINE(4242)			bool _hx_tmp;
HXDLIN(4242)			if (::hx::IsNotNull( data )) {
HXLINE(4242)				_hx_tmp = ::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c));
            			}
            			else {
HXLINE(4242)				_hx_tmp = false;
            			}
HXDLIN(4242)			if (_hx_tmp) {
HXLINE(4244)				this->formatButtonText(data,fb);
            			}
            		}
HXLINE(4248)		int text_x = 0;
HXLINE(4249)		int text_y = 0;
HXLINE(4250)		if (::hx::IsNotNull( data->get(HX_("text_x",26,65,88,d8)) )) {
HXLINE(4252)			text_x = ::Std_obj::_hx_int(this->_loadWidth(data,0,HX_("text_x",26,65,88,d8),null()));
            		}
            		else {
HXLINE(4254)			if (::hx::IsNotNull( data->get(HX_("label_x",2d,c6,05,04)) )) {
HXLINE(4256)				text_x = ::Std_obj::_hx_int(this->_loadWidth(data,0,HX_("label_x",2d,c6,05,04),null()));
            			}
            		}
HXLINE(4258)		if (::hx::IsNotNull( data->get(HX_("text_y",27,65,88,d8)) )) {
HXLINE(4260)			text_y = ::Std_obj::_hx_int(this->_loadHeight(data,0,HX_("text_y",27,65,88,d8),null()));
            		}
            		else {
HXLINE(4262)			if (::hx::IsNotNull( data->get(HX_("label_y",2e,c6,05,04)) )) {
HXLINE(4264)				text_y = ::Std_obj::_hx_int(this->_loadHeight(data,0,HX_("label_y",2e,c6,05,04),null()));
            			}
            		}
HXLINE(4267)		if (::Std_obj::isOfType(fb,::hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >())) {
HXLINE(4269)			 ::flixel::addons::ui::FlxUISpriteButton fbs = ( ( ::flixel::addons::ui::FlxUISpriteButton)(fb) );
HXLINE(4270)			if (::Std_obj::isOfType(fbs->label,::hx::ClassOf< ::flixel::group::FlxTypedSpriteGroup >())) {
HXLINE(4272)				 ::flixel::group::FlxTypedSpriteGroup g = ( ( ::flixel::group::FlxTypedSpriteGroup)(fbs->label) );
HXLINE(4273)				{
HXLINE(4273)					int _g = 0;
HXDLIN(4273)					::Array< ::Dynamic> _g1 = g->group->members;
HXDLIN(4273)					while((_g < _g1->length)){
HXLINE(4273)						 ::flixel::FlxSprite sprite = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(4273)						_g = (_g + 1);
HXLINE(4275)						if (::Std_obj::isOfType(sprite,::hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(4278)							{
HXLINE(4278)								 ::flixel::math::FlxPoint _g = sprite->offset;
HXDLIN(4278)								_g->set_x((_g->x - ( (Float)(text_x) )));
            							}
HXLINE(4279)							{
HXLINE(4279)								 ::flixel::math::FlxPoint _g1 = sprite->offset;
HXDLIN(4279)								_g1->set_y((_g1->y - ( (Float)(text_y) )));
            							}
HXLINE(4280)							goto _hx_goto_170;
            						}
            					}
            					_hx_goto_170:;
            				}
            			}
            			else {
HXLINE(4286)				{
HXLINE(4286)					 ::flixel::math::FlxPoint _g = ( ( ::flixel::FlxSprite)(fbs->label) )->offset;
HXDLIN(4286)					_g->set_x((_g->x - ( (Float)(text_x) )));
            				}
HXLINE(4287)				{
HXLINE(4287)					 ::flixel::math::FlxPoint _g1 = ( ( ::flixel::FlxSprite)(fbs->label) )->offset;
HXDLIN(4287)					_g1->set_y((_g1->y - ( (Float)(text_y) )));
            				}
HXLINE(4288)				if (::hx::IsNotNull( toggleSprite )) {
HXLINE(4290)					{
HXLINE(4290)						 ::flixel::math::FlxPoint _g = toggleSprite->offset;
HXDLIN(4290)						_g->set_x((_g->x - ( (Float)(text_x) )));
            					}
HXLINE(4291)					{
HXLINE(4291)						 ::flixel::math::FlxPoint _g1 = toggleSprite->offset;
HXDLIN(4291)						_g1->set_y((_g1->y - ( (Float)(text_y) )));
            					}
            				}
            			}
            		}
            		else {
HXLINE(4297)			 ::flixel::addons::ui::FlxUIButton fbu = ( ( ::flixel::addons::ui::FlxUIButton)(fb) );
HXLINE(4299)			{
HXLINE(4299)				 ::flixel::math::FlxPoint _g = ( ( ::flixel::FlxSprite)(fbu->label) )->offset;
HXDLIN(4299)				_g->set_x((_g->x - ( (Float)(text_x) )));
            			}
HXLINE(4300)			{
HXLINE(4300)				 ::flixel::math::FlxPoint _g1 = ( ( ::flixel::FlxSprite)(fbu->label) )->offset;
HXDLIN(4300)				_g1->set_y((_g1->y - ( (Float)(text_y) )));
            			}
            		}
HXLINE(4303)		bool _hx_tmp1;
HXDLIN(4303)		if (::hx::IsNotNull( sprite )) {
HXLINE(4303)			_hx_tmp1 = ::hx::IsNotNull( toggleSprite );
            		}
            		else {
HXLINE(4303)			_hx_tmp1 = false;
            		}
HXDLIN(4303)		if (_hx_tmp1) {
HXLINE(4305)			::flixel::addons::ui::interfaces::IFlxUIButton_obj::set_toggle_label(fb,toggleSprite);
            		}
HXLINE(4308)		if (::Std_obj::isOfType(fb,::hx::ClassOf< ::flixel::addons::ui::FlxUITypedButton >())) {
HXLINE(4310)			 ::flixel::addons::ui::FlxUITypedButton fuitb = ( ( ::flixel::addons::ui::FlxUITypedButton)(fb) );
HXLINE(4311)			if (::hx::IsNotNull( fuitb->_assetsToCleanup )) {
HXLINE(4313)				int _g = 0;
HXDLIN(4313)				::Array< ::String > _g1 = fuitb->_assetsToCleanup;
HXDLIN(4313)				while((_g < _g1->length)){
HXLINE(4313)					::String key = _g1->__get(_g);
HXDLIN(4313)					_g = (_g + 1);
HXLINE(4315)					this->addToCleanup(key);
            				}
            			}
            		}
HXLINE(4320)		return fb;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,_loadButton,return )

 ::flixel::addons::ui::FlxUIRegion FlxUI_obj::_loadRegion( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4333__loadRegion)
HXLINE(4334)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4336)		int w = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(4337)		int h = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(4339)		if (::hx::IsNotNull( bounds )) {
HXLINE(4341)			 ::openfl::geom::Point pt = ::flixel::addons::ui::U_obj::conformToBounds( ::openfl::geom::Point_obj::__alloc( HX_CTX ,w,h),bounds);
HXLINE(4342)			w = ::Std_obj::_hx_int(pt->x);
HXLINE(4343)			h = ::Std_obj::_hx_int(pt->y);
            		}
HXLINE(4346)		bool vis = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("visible",72,78,24,a3),true);
HXLINE(4347)		 ::flixel::addons::ui::FlxUIRegion reg =  ::flixel::addons::ui::FlxUIRegion_obj::__alloc( HX_CTX ,0,0,w,h);
HXLINE(4348)		reg->set_visible(vis);
HXLINE(4349)		return reg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadRegion,return )

 ::flixel::addons::ui::FlxUI9SliceSprite FlxUI_obj::_load9SliceSprite( ::Xml data,::String __o_load_code){
            		::String load_code = __o_load_code;
            		if (::hx::IsNull(__o_load_code)) load_code = HX_("",00,00,00,00);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4353__load9SliceSprite)
HXLINE(4354)		::String src = HX_("",00,00,00,00);
HXLINE(4355)		 ::flixel::addons::ui::FlxUI9SliceSprite f9s = null();
HXLINE(4357)		 ::flixel::math::FlxPoint resize = this->getResizeRatio(data,null());
HXLINE(4358)		int color = this->_loadColor(data,null(),null());
HXLINE(4359)		Float resize_ratio = resize->x;
HXLINE(4360)		 ::flixel::math::FlxPoint resize_point = this->_loadCompass(data,HX_("resize_point",85,44,f0,71));
HXLINE(4361)		int resize_ratio_axis = ::Std_obj::_hx_int(resize->y);
HXLINE(4363)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4371)		 ::Xml data1 = data;
HXDLIN(4371)		::String str = HX_("",00,00,00,00);
HXDLIN(4371)		if (::hx::IsNotNull( data1->get(HX_("src",e4,a6,57,00)) )) {
HXLINE(4371)			str = data1->get(HX_("src",e4,a6,57,00));
HXDLIN(4371)			bool src;
HXDLIN(4371)			if ((str != HX_("",00,00,00,00))) {
HXLINE(4371)				src = ::hx::IsNull( str );
            			}
            			else {
HXLINE(4371)				src = true;
            			}
HXDLIN(4371)			if (src) {
HXLINE(4371)				str = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(4371)				str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(4371)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(4371)					if (!(::openfl::utils::Assets_obj::exists(str,HX_("IMAGE",3b,57,57,3b)))) {
HXLINE(4371)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(((HX_("couldn't load bmp \"",73,a2,6e,30) + HX_("src",e4,a6,57,00)) + HX_("\"",22,00,00,00))));
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE(   1)						{
HXLINE(   1)							null();
            						}
HXLINE(4371)						if (!(::Std_obj::isOfType(::haxe::Exception_obj::caught(_g)->unwrap(),::hx::ClassOf< ::String >()))) {
HXLINE(4371)							HX_STACK_DO_THROW(_g);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXDLIN(4371)		src = str;
HXLINE(4373)		bool hasScaledSrc = ::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("scale_src",6f,c7,bc,37));
HXLINE(4374)		if (hasScaledSrc) {
HXLINE(4378)			::String origSrc = src;
HXLINE(4380)			src = this->loadScaledSrc(data,HX_("src",e4,a6,57,00),HX_("scale_src",6f,c7,bc,37),null(),null());
HXLINE(4382)			if ((src != origSrc)) {
HXLINE(4384)				this->addToCleanup(origSrc);
            			}
            		}
HXLINE(4388)		if ((src == HX_("",00,00,00,00))) {
HXLINE(4390)			src = null();
            		}
HXLINE(4393)		if (::hx::IsNull( src )) {
HXLINE(4395)			if ((load_code == HX_("tab_menu",09,73,e1,d6))) {
HXLINE(4397)				src = HX_("flixel/flixel-ui/img/chrome_flat.png",30,cf,0a,80);
            			}
            		}
HXLINE(4401)		int rect_w = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(4402)		int rect_h = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(4404)		if (::hx::IsNotNull( bounds )) {
HXLINE(4406)			if (::hx::IsLess( rect_w,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(4408)				rect_w = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4410)				if (::hx::IsGreater( rect_w,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(4412)					rect_w = ( (int)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) );
            				}
            			}
HXLINE(4415)			if (::hx::IsLess( rect_h,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(4417)				rect_h = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4419)				if (::hx::IsGreater( rect_h,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(4421)					rect_h = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4424)		bool _hx_tmp;
HXDLIN(4424)		if ((rect_w != 0)) {
HXLINE(4424)			_hx_tmp = (rect_h == 0);
            		}
            		else {
HXLINE(4424)			_hx_tmp = true;
            		}
HXDLIN(4424)		if (_hx_tmp) {
HXLINE(4426)			return null();
            		}
HXLINE(4429)		 ::openfl::geom::Rectangle rc =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,rect_w,rect_h);
HXLINE(4431)		::Array< int > slice9 = ::flixel::util::FlxStringUtil_obj::toIntArray(::flixel::addons::ui::U_obj::xml_str(data,HX_("slice9",a7,03,04,70),null(),null()));
HXLINE(4433)		::String srcId = HX_("",00,00,00,00);
HXLINE(4434)		 ::Dynamic srcGraphic = src;
HXLINE(4436)		if (hasScaledSrc) {
HXLINE(4438)			slice9 = this->load9SliceSprite_scaleSub(slice9,data,src,null());
HXLINE(4440)			srcId = src;
HXLINE(4441)			srcGraphic = ::flixel::FlxG_obj::bitmap->_cache->get(src);
            		}
HXLINE(4444)		bool smooth = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("smooth",2e,08,6b,07),false);
HXLINE(4446)		::String tileStr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("tile",2e,cb,fc,4c),true,HX_("",00,00,00,00));
HXDLIN(4446)		int tile = 0;
HXDLIN(4446)		::String _hx_switch_0 = tileStr;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ){
HXLINE(4446)			tile = 16;
HXDLIN(4446)			goto _hx_goto_174;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(4446)			tile = 1;
HXDLIN(4446)			goto _hx_goto_174;
            		}
            		if (  (_hx_switch_0==HX_("all",21,f9,49,00)) ||  (_hx_switch_0==HX_("both",81,88,1b,41)) ||  (_hx_switch_0==HX_("hv",0e,5b,00,00)) ||  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ||  (_hx_switch_0==HX_("vh",32,67,00,00)) ){
HXLINE(4446)			tile = 17;
HXDLIN(4446)			goto _hx_goto_174;
            		}
            		_hx_goto_174:;
HXDLIN(4446)		int tile1 = tile;
HXLINE(4448)		f9s =  ::flixel::addons::ui::FlxUI9SliceSprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),srcGraphic,rc,slice9,tile1,smooth,srcId,resize_ratio,resize_point,resize_ratio_axis,false,color);
HXLINE(4450)		return f9s;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_load9SliceSprite,return )

::Array< int > FlxUI_obj::load9SliceSprite_scaleSub(::Array< int > slice9, ::Xml data,::String src,::String __o_srcString){
            		::String srcString = __o_srcString;
            		if (::hx::IsNull(__o_srcString)) srcString = HX_("src",e4,a6,57,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4454_load9SliceSprite_scaleSub)
HXLINE(4456)		 ::Xml data1 = data;
HXDLIN(4456)		::String str = HX_("",00,00,00,00);
HXDLIN(4456)		if (::hx::IsNotNull( data1->get(srcString) )) {
HXLINE(4456)			str = data1->get(srcString);
HXDLIN(4456)			bool _hx_tmp;
HXDLIN(4456)			if ((str != HX_("",00,00,00,00))) {
HXLINE(4456)				_hx_tmp = ::hx::IsNull( str );
            			}
            			else {
HXLINE(4456)				_hx_tmp = true;
            			}
HXDLIN(4456)			if (_hx_tmp) {
HXLINE(4456)				str = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(4456)				str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(4456)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(4456)					if (!(::openfl::utils::Assets_obj::exists(str,HX_("IMAGE",3b,57,57,3b)))) {
HXLINE(4456)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(((HX_("couldn't load bmp \"",73,a2,6e,30) + srcString) + HX_("\"",22,00,00,00))));
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE(   1)						{
HXLINE(   1)							null();
            						}
HXLINE(4456)						if (!(::Std_obj::isOfType(::haxe::Exception_obj::caught(_g)->unwrap(),::hx::ClassOf< ::String >()))) {
HXLINE(4456)							HX_STACK_DO_THROW(_g);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXDLIN(4456)		::String origSrc = str;
HXLINE(4458)		if ((src == origSrc)) {
HXLINE(4459)			return slice9;
            		}
HXLINE(4461)		 ::openfl::display::BitmapData srcAsset;
HXDLIN(4461)		if (::hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(src)) ) )) {
HXLINE(4461)			srcAsset = ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(src)) )->bitmap;
            		}
            		else {
HXLINE(4461)			srcAsset = null();
            		}
HXLINE(4463)		if (::hx::IsNull( srcAsset )) {
HXLINE(4464)			srcAsset = ::openfl::utils::Assets_obj::getBitmapData(origSrc,null());
            		}
HXLINE(4466)		 ::openfl::display::BitmapData origAsset = ::openfl::utils::Assets_obj::getBitmapData(origSrc,false);
HXLINE(4467)		Float srcScaleFactorX = (( (Float)(srcAsset->width) ) / ( (Float)(origAsset->width) ));
HXLINE(4468)		Float srcScaleFactorY = (( (Float)(srcAsset->height) ) / ( (Float)(origAsset->height) ));
HXLINE(4470)		bool _hx_tmp;
HXDLIN(4470)		if ((::Math_obj::abs((((Float)1.0) - srcScaleFactorX)) <= ((Float)0.001))) {
HXLINE(4470)			_hx_tmp = (::Math_obj::abs((((Float)1.0) - srcScaleFactorY)) <= ((Float)0.001));
            		}
            		else {
HXLINE(4470)			_hx_tmp = false;
            		}
HXDLIN(4470)		if (_hx_tmp) {
HXLINE(4472)			return slice9;
            		}
HXLINE(4475)		if (::hx::IsNotNull( slice9 )) {
HXLINE(4478)			slice9[0] = ::Std_obj::_hx_int((( (Float)(slice9->__get(0)) ) * srcScaleFactorX));
HXLINE(4479)			slice9[1] = ::Std_obj::_hx_int((( (Float)(slice9->__get(1)) ) * srcScaleFactorY));
HXLINE(4481)			int widthDiff = (origAsset->width - slice9->__get(2));
HXLINE(4482)			int heightDiff = (origAsset->height - slice9->__get(3));
HXLINE(4484)			widthDiff = ::Std_obj::_hx_int((( (Float)(widthDiff) ) * srcScaleFactorX));
HXLINE(4485)			heightDiff = ::Std_obj::_hx_int((( (Float)(heightDiff) ) * srcScaleFactorY));
HXLINE(4487)			slice9[2] = ::Std_obj::_hx_int(( (Float)((srcAsset->width - widthDiff)) ));
HXLINE(4488)			slice9[3] = ::Std_obj::_hx_int(( (Float)((srcAsset->height - heightDiff)) ));
            		}
HXLINE(4490)		return slice9;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,load9SliceSprite_scaleSub,return )

 ::flixel::addons::ui::FlxUISprite FlxUI_obj::_loadBox( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4510__loadBox)
HXLINE(4511)		 ::flixel::addons::ui::FlxUISprite fs = null();
HXLINE(4513)		int thickness = ::Std_obj::_hx_int(this->_loadWidth(data,1,HX_("thickness",74,f1,66,5a),null()));
HXLINE(4515)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4523)		if (::hx::IsNull( bounds )) {
HXLINE(4525)			bounds =  ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("max_width",eb,9a,40,c1),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(1,HX_("min_width",59,88,fd,ea),::Math_obj::NEGATIVE_INFINITY)
            				->setFixed(2,HX_("max_height",62,6b,96,0d),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(3,HX_("min_height",34,3e,29,69),::Math_obj::NEGATIVE_INFINITY));
            		}
HXLINE(4533)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(4534)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(4536)		if (::hx::IsNotNull( bounds )) {
HXLINE(4538)			if (::hx::IsLess( W,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(4540)				W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4542)				if (::hx::IsGreater( W,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(4544)					W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) ));
            				}
            			}
HXLINE(4546)			if (::hx::IsLess( H,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(4548)				H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4550)				if (::hx::IsGreater( H,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(4552)					H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4556)		::String cstr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("color",63,71,5c,4a),true,HX_("0xff000000",88,79,02,3f));
HXLINE(4557)		int C = 0;
HXLINE(4558)		if ((cstr != HX_("",00,00,00,00))) {
HXLINE(4560)			 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(cstr);
HXDLIN(4560)			if (::hx::IsNull( return_val )) {
HXLINE(4560)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + cstr)));
            			}
HXDLIN(4560)			C = ( (int)(return_val) );
            		}
HXLINE(4562)		fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(4563)		::String key = ((((((W + HX_("x",78,00,00,00)) + H) + HX_(":",3a,00,00,00)) + C) + HX_(":",3a,00,00,00)) + thickness);
HXLINE(4565)		if (::hx::IsNotNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(key)) ) )) {
HXLINE(4567)			fs->loadGraphic(key,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(4571)			fs->makeGraphic(W,H,C,false,key);
HXLINE(4572)			 ::openfl::geom::Rectangle r =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,thickness,thickness,(W - (thickness * 2)),(H - (thickness * 2)));
HXLINE(4573)			fs->graphic->bitmap->fillRect(r,0);
            		}
HXLINE(4576)		return fs;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadBox,return )

 ::flixel::addons::ui::FlxUILine FlxUI_obj::_loadLine( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4580__loadLine)
HXLINE(4581)		::String axis = ::flixel::addons::ui::U_obj::xml_str(data,HX_("axis",a1,1c,79,40),true,HX_("horizontal",e4,fc,c3,15));
HXLINE(4582)		int thickness = ::Std_obj::_hx_int(this->_loadWidth(data,-1,HX_("thickness",74,f1,66,5a),null()));
HXLINE(4584)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4592)		if (::hx::IsNull( bounds )) {
HXLINE(4594)			bounds =  ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("max_width",eb,9a,40,c1),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(1,HX_("min_width",59,88,fd,ea),( (Float)(1) ))
            				->setFixed(2,HX_("max_height",62,6b,96,0d),::Math_obj::POSITIVE_INFINITY)
            				->setFixed(3,HX_("min_height",34,3e,29,69),( (Float)(1) )));
            		}
HXLINE(4601)		::String _hx_switch_0 = axis;
            		if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("horizontal",e4,fc,c3,15)) ||  (_hx_switch_0==HX_("horz",8f,ce,12,45)) ){
HXLINE(4604)			bounds->__SetField(HX_("max_height",62,6b,96,0d),thickness,::hx::paccDynamic);
HXLINE(4605)			bounds->__SetField(HX_("min_height",34,3e,29,69),thickness,::hx::paccDynamic);
HXLINE(4603)			goto _hx_goto_178;
            		}
            		if (  (_hx_switch_0==HX_("v",76,00,00,00)) ||  (_hx_switch_0==HX_("vert",b1,34,4c,4e)) ||  (_hx_switch_0==HX_("vertical",76,bc,15,6a)) ){
HXLINE(4607)			bounds->__SetField(HX_("max_width",eb,9a,40,c1),thickness,::hx::paccDynamic);
HXLINE(4608)			bounds->__SetField(HX_("min_width",59,88,fd,ea),thickness,::hx::paccDynamic);
HXLINE(4606)			goto _hx_goto_178;
            		}
            		_hx_goto_178:;
HXLINE(4611)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,null(),null(),null()));
HXLINE(4612)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,null(),null(),null()));
HXLINE(4614)		if (::hx::IsNotNull( bounds )) {
HXLINE(4616)			if (::hx::IsLess( W,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(4618)				W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4620)				if (::hx::IsGreater( W,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(4622)					W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) ));
            				}
            			}
HXLINE(4624)			if (::hx::IsLess( H,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(4626)				H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4628)				if (::hx::IsGreater( H,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(4630)					H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4634)		::String cstr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("color",63,71,5c,4a),true,HX_("0xff000000",88,79,02,3f));
HXLINE(4635)		int C = 0;
HXLINE(4636)		if ((cstr != HX_("",00,00,00,00))) {
HXLINE(4638)			 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(cstr);
HXDLIN(4638)			if (::hx::IsNull( return_val )) {
HXLINE(4638)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + cstr)));
            			}
HXDLIN(4638)			C = ( (int)(return_val) );
            		}
HXLINE(4641)		 ::flixel::addons::ui::LineAxis lineAxis;
HXDLIN(4641)		if ((axis == HX_("horizontal",e4,fc,c3,15))) {
HXLINE(4641)			lineAxis = ::flixel::addons::ui::LineAxis_obj::HORIZONTAL_dyn();
            		}
            		else {
HXLINE(4641)			lineAxis = ::flixel::addons::ui::LineAxis_obj::VERTICAL_dyn();
            		}
HXLINE(4642)		Float lineLength;
HXDLIN(4642)		if (::hx::IsEq( lineAxis,::flixel::addons::ui::LineAxis_obj::HORIZONTAL_dyn() )) {
HXLINE(4642)			lineLength = ( (Float)(W) );
            		}
            		else {
HXLINE(4642)			lineLength = ( (Float)(H) );
            		}
HXLINE(4643)		Float lineThickness;
HXDLIN(4643)		if ((thickness != -1)) {
HXLINE(4643)			lineThickness = ( (Float)(thickness) );
            		}
            		else {
HXLINE(4643)			if (::hx::IsEq( lineAxis,::flixel::addons::ui::LineAxis_obj::HORIZONTAL_dyn() )) {
HXLINE(4643)				lineThickness = ( (Float)(H) );
            			}
            			else {
HXLINE(4643)				lineThickness = ( (Float)(W) );
            			}
            		}
HXLINE(4645)		 ::flixel::addons::ui::FlxUILine fl =  ::flixel::addons::ui::FlxUILine_obj::__alloc( HX_CTX ,0,0,lineAxis,lineLength,lineThickness,C);
HXLINE(4647)		return fl;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadLine,return )

 ::flixel::addons::ui::FlxUIBar FlxUI_obj::_loadBar( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4651__loadBar)
HXLINE(4652)		 ::flixel::addons::ui::FlxUIBar fb = null();
HXLINE(4654)		 ::Dynamic style =  ::Dynamic(::hx::Anon_obj::Create(9)
            			->setFixed(0,HX_("emptyColors",1d,5c,af,8e),null())
            			->setFixed(1,HX_("filledColor",61,28,7c,97),null())
            			->setFixed(2,HX_("chunkSize",ce,cd,77,9f),null())
            			->setFixed(3,HX_("emptyImgSrc",0e,0d,a3,ca),HX_("",00,00,00,00))
            			->setFixed(4,HX_("emptyColor",96,47,af,ca),null())
            			->setFixed(5,HX_("borderColor",d7,3c,d5,d6),null())
            			->setFixed(6,HX_("filledColors",f2,2c,27,f5),null())
            			->setFixed(7,HX_("gradRotation",2c,47,cd,fb),null())
            			->setFixed(8,HX_("filledImgSrc",e3,dd,1a,31),HX_("",00,00,00,00)));
HXLINE(4669)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,-1,null(),null()));
HXLINE(4670)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,-1,null(),null()));
HXLINE(4672)		::String direction = ::flixel::addons::ui::U_obj::xml_str(data,HX_("fill_direction",43,0e,7d,b3),true,null());
HXLINE(4673)		 ::flixel::ui::FlxBarFillDirection fillDir = ::flixel::ui::FlxBarFillDirection_obj::TOP_TO_BOTTOM_dyn();
HXLINE(4675)		::String _hx_switch_0 = direction;
            		if (  (_hx_switch_0==HX_("bottom_to_top",a5,98,d9,85)) ){
HXLINE(4684)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::BOTTOM_TO_TOP_dyn();
HXDLIN(4684)			goto _hx_goto_180;
            		}
            		if (  (_hx_switch_0==HX_("horizontal_inside_out",46,c6,92,00)) ){
HXLINE(4686)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::HORIZONTAL_INSIDE_OUT_dyn();
HXDLIN(4686)			goto _hx_goto_180;
            		}
            		if (  (_hx_switch_0==HX_("horizontal_outside_in",ba,dc,41,90)) ){
HXLINE(4688)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::HORIZONTAL_OUTSIDE_IN_dyn();
HXDLIN(4688)			goto _hx_goto_180;
            		}
            		if (  (_hx_switch_0==HX_("left_to_right",50,bd,a3,f7)) ){
HXLINE(4678)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn();
HXDLIN(4678)			goto _hx_goto_180;
            		}
            		if (  (_hx_switch_0==HX_("right_to_left",e8,a1,2d,02)) ){
HXLINE(4680)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn();
HXDLIN(4680)			goto _hx_goto_180;
            		}
            		if (  (_hx_switch_0==HX_("top_to_bottom",05,d7,5d,10)) ){
HXLINE(4682)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::TOP_TO_BOTTOM_dyn();
HXDLIN(4682)			goto _hx_goto_180;
            		}
            		if (  (_hx_switch_0==HX_("vertical_inside_out",f4,eb,d7,2d)) ){
HXLINE(4690)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::VERTICAL_INSIDE_OUT_dyn();
HXDLIN(4690)			goto _hx_goto_180;
            		}
            		if (  (_hx_switch_0==HX_("vertical_outside_in",68,02,87,bd)) ){
HXLINE(4692)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::VERTICAL_OUTSIDE_IN_dyn();
HXDLIN(4692)			goto _hx_goto_180;
            		}
            		/* default */{
HXLINE(4694)			fillDir = ::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn();
            		}
            		_hx_goto_180:;
HXLINE(4697)		::String parentRefStr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("parent_ref",7e,00,5b,f3),true,null());
HXLINE(4698)		::Dynamic parentRef;
HXDLIN(4698)		if ((parentRefStr != HX_("",00,00,00,00))) {
HXLINE(4698)			parentRef = this->getAsset(parentRefStr,null());
            		}
            		else {
HXLINE(4698)			parentRef = null();
            		}
HXLINE(4699)		::String variableName = ::flixel::addons::ui::U_obj::xml_str(data,HX_("variable",3c,12,0d,69),null(),null());
HXLINE(4701)		Float value = ::flixel::addons::ui::U_obj::xml_f(data,HX_("value",71,7f,b8,31),-1);
HXLINE(4703)		Float min = ::flixel::addons::ui::U_obj::xml_f(data,HX_("min",92,11,53,00),0);
HXLINE(4704)		Float max = ::flixel::addons::ui::U_obj::xml_f(data,HX_("max",a4,0a,53,00),100);
HXLINE(4706)		if ((value == -1)) {
HXLINE(4708)			value = max;
            		}
HXLINE(4711)		style->__SetField(HX_("borderColor",d7,3c,d5,d6),::flixel::addons::ui::U_obj::xml_color(data,HX_("border_color",90,7e,e8,6e),null(),null()),::hx::paccDynamic);
HXLINE(4712)		bool showBorder = ::hx::IsNotNull( style->__Field(HX_("borderColor",d7,3c,d5,d6),::hx::paccDynamic) );
HXLINE(4714)		style->__SetField(HX_("filledColor",61,28,7c,97),::flixel::addons::ui::U_obj::xml_color(data,HX_("filled_color",c6,ab,4f,40),null(),null()),::hx::paccDynamic);
HXLINE(4715)		if (::hx::IsNull( style->__Field(HX_("filledColor",61,28,7c,97),::hx::paccDynamic) )) {
HXLINE(4717)			style->__SetField(HX_("filledColor",61,28,7c,97),::flixel::addons::ui::U_obj::xml_color(data,HX_("color",63,71,5c,4a),null(),null()),::hx::paccDynamic);
            		}
HXLINE(4720)		style->__SetField(HX_("emptyColor",96,47,af,ca),::flixel::addons::ui::U_obj::xml_color(data,HX_("empty_color",f1,da,d7,d9),null(),null()),::hx::paccDynamic);
HXLINE(4722)		style->__SetField(HX_("filledColors",f2,2c,27,f5),::flixel::addons::ui::U_obj::xml_colorArray(data,HX_("filled_colors",ed,a1,66,05),null()),::hx::paccDynamic);
HXLINE(4723)		style->__SetField(HX_("emptyColors",1d,5c,af,8e),::flixel::addons::ui::U_obj::xml_colorArray(data,HX_("empty_colors",62,b8,07,c3),null()),::hx::paccDynamic);
HXLINE(4724)		if (::hx::IsNull( style->__Field(HX_("filledColors",f2,2c,27,f5),::hx::paccDynamic) )) {
HXLINE(4726)			style->__SetField(HX_("filledColors",f2,2c,27,f5),::flixel::addons::ui::U_obj::xml_colorArray(data,HX_("colors",b0,c5,86,c6),null()),::hx::paccDynamic);
            		}
HXLINE(4729)		style->__SetField(HX_("filledImgSrc",e3,dd,1a,31),this->loadScaledSrc(data,HX_("src_filled",dd,dc,1c,63),null(),null(),null()),::hx::paccDynamic);
HXLINE(4730)		style->__SetField(HX_("emptyImgSrc",0e,0d,a3,ca),this->loadScaledSrc(data,HX_("src_empty",b2,6b,77,bb),null(),null(),null()),::hx::paccDynamic);
HXLINE(4731)		if (::hx::IsEq( style->__Field(HX_("filledImgSrc",e3,dd,1a,31),::hx::paccDynamic),HX_("",00,00,00,00) )) {
HXLINE(4733)			style->__SetField(HX_("filledImgSrc",e3,dd,1a,31),this->loadScaledSrc(data,HX_("src",e4,a6,57,00),null(),null(),null()),::hx::paccDynamic);
            		}
HXLINE(4736)		style->__SetField(HX_("chunkSize",ce,cd,77,9f),::flixel::addons::ui::U_obj::xml_i(data,HX_("chunk_size",13,8b,ba,d8),1),::hx::paccDynamic);
HXLINE(4737)		style->__SetField(HX_("gradRotation",2c,47,cd,fb),::flixel::addons::ui::U_obj::xml_i(data,HX_("rotation",3e,3d,86,08),90),::hx::paccDynamic);
HXLINE(4739)		bool _hx_tmp;
HXDLIN(4739)		bool _hx_tmp1;
HXDLIN(4739)		if (::hx::IsEq( style->__Field(HX_("filledImgSrc",e3,dd,1a,31),::hx::paccDynamic),HX_("",00,00,00,00) )) {
HXLINE(4739)			_hx_tmp1 = ::hx::IsNull( style->__Field(HX_("filledColor",61,28,7c,97),::hx::paccDynamic) );
            		}
            		else {
HXLINE(4739)			_hx_tmp1 = false;
            		}
HXDLIN(4739)		if (_hx_tmp1) {
HXLINE(4739)			_hx_tmp = ::hx::IsNull( style->__Field(HX_("filledColors",f2,2c,27,f5),::hx::paccDynamic) );
            		}
            		else {
HXLINE(4739)			_hx_tmp = false;
            		}
HXDLIN(4739)		if (_hx_tmp) {
HXLINE(4741)			style->__SetField(HX_("filledColor",61,28,7c,97),-65536,::hx::paccDynamic);
            		}
HXLINE(4744)		bool _hx_tmp2;
HXDLIN(4744)		if ((W == -1)) {
HXLINE(4744)			_hx_tmp2 = (H == -1);
            		}
            		else {
HXLINE(4744)			_hx_tmp2 = false;
            		}
HXDLIN(4744)		if (_hx_tmp2) {
HXLINE(4746)			fb =  ::flixel::addons::ui::FlxUIBar_obj::__alloc( HX_CTX ,0,0,fillDir,100,10,parentRef,variableName,min,max,showBorder);
            		}
            		else {
HXLINE(4750)			fb =  ::flixel::addons::ui::FlxUIBar_obj::__alloc( HX_CTX ,0,0,fillDir,W,H,parentRef,variableName,min,max,showBorder);
            		}
HXLINE(4753)		fb->set_style(style);
HXLINE(4754)		fb->resize(( (Float)(fb->barWidth) ),( (Float)(fb->barHeight) ));
HXLINE(4756)		fb->set_value(value);
HXLINE(4758)		return fb;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadBar,return )

 ::flixel::addons::ui::FlxUISprite FlxUI_obj::_loadSprite( ::Xml data){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4762__loadSprite)
HXLINE(4763)		::String src = HX_("",00,00,00,00);
HXLINE(4764)		 ::flixel::addons::ui::FlxUISprite fs = null();
HXLINE(4766)		src = this->loadScaledSrc(data,null(),null(),null(),null());
HXLINE(4768)		 ::Dynamic bounds = this->calcMaxMinSize(data,null(),null());
HXLINE(4776)		 ::flixel::math::FlxPoint resize = this->getResizeRatio(data,-1);
HXLINE(4778)		Float resize_ratio = resize->x;
HXLINE(4779)		int resize_ratio_axis = ::Std_obj::_hx_int(resize->y);
HXLINE(4780)		 ::flixel::math::FlxPoint resize_point = this->_loadCompass(data,HX_("resize_point",85,44,f0,71));
HXLINE(4782)		int W = ::Std_obj::_hx_int(this->_loadWidth(data,-1,null(),null()));
HXLINE(4783)		int H = ::Std_obj::_hx_int(this->_loadHeight(data,-1,null(),null()));
HXLINE(4785)		if (::hx::IsNotNull( bounds )) {
HXLINE(4787)			if (::hx::IsLess( W,bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic) )) {
HXLINE(4789)				W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("min_width",59,88,fd,ea),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4791)				if (::hx::IsGreater( W,bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic) )) {
HXLINE(4793)					W = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_width",eb,9a,40,c1),::hx::paccDynamic)) ));
            				}
            			}
HXLINE(4795)			if (::hx::IsLess( H,bounds->__Field(HX_("min_height",34,3e,29,69),::hx::paccDynamic) )) {
HXLINE(4797)				H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(4799)				if (::hx::IsGreater( H,bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic) )) {
HXLINE(4801)					H = ::Std_obj::_hx_int(( (Float)(bounds->__Field(HX_("max_height",62,6b,96,0d),::hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE(4805)		if ((src != HX_("",00,00,00,00))) {
HXLINE(4807)			bool _hx_tmp;
HXDLIN(4807)			if ((W == -1)) {
HXLINE(4807)				_hx_tmp = (H == -1);
            			}
            			else {
HXLINE(4807)				_hx_tmp = false;
            			}
HXDLIN(4807)			if (_hx_tmp) {
HXLINE(4809)				fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,0,0,src);
            			}
            			else {
HXLINE(4814)				bool _hx_tmp;
HXDLIN(4814)				if ((resize_ratio != -1)) {
HXLINE(4814)					if ((W != -1)) {
HXLINE(4814)						_hx_tmp = (H == -1);
            					}
            					else {
HXLINE(4814)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE(4814)					_hx_tmp = false;
            				}
HXDLIN(4814)				if (_hx_tmp) {
HXLINE(4817)					if ((resize_ratio_axis == -1)) {
HXLINE(4819)						if ((W == -1)) {
HXLINE(4821)							resize_ratio_axis = 0;
            						}
HXLINE(4823)						if ((H == -1)) {
HXLINE(4825)							resize_ratio_axis = 1;
            						}
            					}
HXLINE(4830)					if ((resize_ratio_axis == 1)) {
HXLINE(4832)						H = ( (int)((( (Float)(W) ) * (( (Float)(1) ) / resize_ratio))) );
            					}
            					else {
HXLINE(4834)						if ((resize_ratio_axis == 0)) {
HXLINE(4836)							W = ( (int)((( (Float)(H) ) * (( (Float)(1) ) / resize_ratio))) );
            						}
            					}
            				}
HXLINE(4840)				bool smooth = this->loadSmooth(data,true);
HXLINE(4841)				fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,0,0,::flixel::addons::ui::U_obj::loadScaledImage(::flixel::addons::ui::U_obj::xml_str(data,HX_("src",e4,a6,57,00),null(),null()),( (Float)(W) ),( (Float)(H) ),smooth));
            			}
            		}
            		else {
HXLINE(4846)			::String cstr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("color",63,71,5c,4a),null(),null());
HXLINE(4847)			int C = 0;
HXLINE(4848)			if ((cstr != HX_("",00,00,00,00))) {
HXLINE(4850)				 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(cstr);
HXDLIN(4850)				if (::hx::IsNull( return_val )) {
HXLINE(4850)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + cstr)));
            				}
HXDLIN(4850)				C = ( (int)(return_val) );
            			}
HXLINE(4852)			fs =  ::flixel::addons::ui::FlxUISprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(4853)			fs->makeGraphic(W,H,C,null(),null());
            		}
HXLINE(4856)		fs->set_resize_point(resize_point);
HXLINE(4857)		fs->set_resize_ratio(resize_ratio);
HXLINE(4858)		fs->resize_ratio_axis = resize_ratio_axis;
HXLINE(4860)		return fs;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadSprite,return )

bool FlxUI_obj::loadSmooth( ::Xml scaleNode,bool defaultValue){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4864_loadSmooth)
HXLINE(4865)		::String defaultStr;
HXDLIN(4865)		if (defaultValue) {
HXLINE(4865)			defaultStr = HX_("true",4e,a7,03,4d);
            		}
            		else {
HXLINE(4865)			defaultStr = HX_("false",a3,35,4f,fb);
            		}
HXLINE(4866)		::String smoothStr = ::flixel::addons::ui::U_obj::xml_str(scaleNode,HX_("smooth",2e,08,6b,07),true,defaultStr);
HXLINE(4867)		if ((smoothStr == HX_("",00,00,00,00))) {
HXLINE(4869)			smoothStr = ::flixel::addons::ui::U_obj::xml_str(scaleNode,HX_("antialias",ae,d6,e9,75),true,defaultStr);
            		}
HXLINE(4871)		return ::flixel::addons::ui::U_obj::boolify(smoothStr);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,loadSmooth,return )

::String FlxUI_obj::loadScaledSrc( ::Xml data,::String __o_attName,::String __o_scaleName,::hx::Null< int >  __o_tilesWide,::hx::Null< int >  __o_tilesTall){
            		::String attName = __o_attName;
            		if (::hx::IsNull(__o_attName)) attName = HX_("src",e4,a6,57,00);
            		::String scaleName = __o_scaleName;
            		if (::hx::IsNull(__o_scaleName)) scaleName = HX_("scale",8a,ce,ce,78);
            		int tilesWide = __o_tilesWide.Default(1);
            		int tilesTall = __o_tilesTall.Default(1);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4880_loadScaledSrc)
HXLINE(4881)		::String src = ::flixel::addons::ui::U_obj::xml_str(data,attName,null(),null());
HXLINE(4882)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,scaleName)) {
HXLINE(4884)			int _g = 0;
HXDLIN(4884)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,scaleName);
HXDLIN(4884)			while((_g < _g1->length)){
HXLINE(4884)				 ::Xml scaleNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(4884)				_g = (_g + 1);
HXLINE(4886)				Float ratio = ::flixel::addons::ui::U_obj::xml_f(scaleNode,HX_("screen_ratio",b8,10,95,88),-1);
HXLINE(4887)				Float tolerance = ::flixel::addons::ui::U_obj::xml_f(scaleNode,HX_("tolerance",0d,3d,7c,33),((Float)0.1));
HXLINE(4888)				Float actualRatio = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(::flixel::FlxG_obj::height) ));
HXLINE(4891)				bool _hx_tmp;
HXDLIN(4891)				if (!((ratio < 0))) {
HXLINE(4891)					if ((ratio > 0)) {
HXLINE(4891)						_hx_tmp = (::Math_obj::abs((ratio - actualRatio)) <= tolerance);
            					}
            					else {
HXLINE(4891)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(4891)					_hx_tmp = true;
            				}
HXDLIN(4891)				if (_hx_tmp) {
HXLINE(4893)					::String suffix = ::flixel::addons::ui::U_obj::xml_str(scaleNode,HX_("suffix",d1,e2,a5,9c),null(),null());
HXLINE(4894)					::String srcSuffix = (src + suffix);
HXLINE(4895)					 ::openfl::display::BitmapData testAsset = null();
HXLINE(4896)					Float scale_ = ( (Float)(-1) );
HXLINE(4897)					bool smooth = this->loadSmooth(scaleNode,true);
HXLINE(4899)					Float to_height = this->_loadHeight(scaleNode,-1,HX_("to_height",6b,29,06,d3),null());
HXLINE(4901)					if ((to_height != -1)) {
HXLINE(4903)						 ::openfl::display::BitmapData testAsset = ::flixel::addons::ui::U_obj::getBmp(::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null()));
HXLINE(4904)						if (::hx::IsNotNull( testAsset )) {
HXLINE(4906)							scale_ = (to_height / ( (Float)(testAsset->height) ));
            						}
            					}
            					else {
HXLINE(4911)						scale_ = this->_loadScale(scaleNode,-1,null());
HXLINE(4912)						if ((scale_ == -1)) {
HXLINE(4914)							scale_ = this->_loadScale(scaleNode,-1,HX_("value",71,7f,b8,31));
            						}
            					}
HXLINE(4918)					Float scale_x;
HXDLIN(4918)					if ((scale_ != -1)) {
HXLINE(4918)						scale_x = scale_;
            					}
            					else {
HXLINE(4918)						scale_x = this->_loadScaleX(scaleNode,-1);
            					}
HXLINE(4919)					Float scale_y;
HXDLIN(4919)					if ((scale_ != -1)) {
HXLINE(4919)						scale_y = scale_;
            					}
            					else {
HXLINE(4919)						scale_y = this->_loadScaleY(scaleNode,-1);
            					}
HXLINE(4921)					Float sw = ( (Float)(0) );
HXLINE(4922)					Float sh = ( (Float)(0) );
HXLINE(4924)					bool _hx_tmp;
HXDLIN(4924)					if ((scale_x > 0)) {
HXLINE(4924)						_hx_tmp = (scale_y > 0);
            					}
            					else {
HXLINE(4924)						_hx_tmp = false;
            					}
HXDLIN(4924)					if (_hx_tmp) {
HXLINE(4926)						if ((scale_x <= 0)) {
HXLINE(4927)							scale_x = ((Float)1.0);
            						}
HXLINE(4928)						if ((scale_y <= 0)) {
HXLINE(4929)							scale_y = ((Float)1.0);
            						}
HXLINE(4931)						sw = this->_loadWidth(scaleNode,-1,null(),null());
HXLINE(4932)						sh = this->_loadHeight(scaleNode,-1,null(),null());
HXLINE(4934)						bool _hx_tmp;
HXDLIN(4934)						if ((sw != -1)) {
HXLINE(4934)							_hx_tmp = (sh == -1);
            						}
            						else {
HXLINE(4934)							_hx_tmp = true;
            						}
HXDLIN(4934)						if (_hx_tmp) {
HXLINE(4936)							testAsset = ::openfl::utils::Assets_obj::getBitmapData(::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null()),null());
HXLINE(4937)							sw = ( (Float)(testAsset->width) );
HXLINE(4938)							sh = ( (Float)(testAsset->height) );
            						}
HXLINE(4941)						sw = (sw * scale_x);
HXLINE(4942)						sh = (sh * scale_y);
            					}
            					else {
HXLINE(4946)						sw = this->_loadWidth(scaleNode,-1,null(),null());
HXLINE(4947)						sh = this->_loadHeight(scaleNode,-1,null(),null());
            					}
HXLINE(4950)					bool _hx_tmp1;
HXDLIN(4950)					if ((sw != 0)) {
HXLINE(4950)						_hx_tmp1 = (sh != 0);
            					}
            					else {
HXLINE(4950)						_hx_tmp1 = false;
            					}
HXDLIN(4950)					if (_hx_tmp1) {
HXLINE(4952)						bool _hx_tmp;
HXDLIN(4952)						if ((tilesTall <= 1)) {
HXLINE(4952)							_hx_tmp = (tilesWide > 1);
            						}
            						else {
HXLINE(4952)							_hx_tmp = true;
            						}
HXDLIN(4952)						if (_hx_tmp) {
HXLINE(4954)							testAsset = ::openfl::utils::Assets_obj::getBitmapData(::flixel::addons::ui::U_obj::gfx(src,null(),null(),null(),null(),null()),null());
HXLINE(4955)							::String str = ::flixel::addons::ui::U_obj::gfx(srcSuffix,null(),null(),null(),null(),null());
HXDLIN(4955)							int str1 = ::Std_obj::_hx_int((( (Float)(testAsset->width) ) / ( (Float)(tilesWide) )));
HXLINE(4956)							int str2 = ::Std_obj::_hx_int((( (Float)(testAsset->height) ) / ( (Float)(tilesTall) )));
HXDLIN(4956)							int str3 = ::Std_obj::_hx_int(sw);
HXLINE(4955)							::String str4 = ::flixel::addons::ui::U_obj::scaleAndStoreTileset(str,scale_y,str1,str2,str3,::Std_obj::_hx_int((sh / ( (Float)(tilesTall) ))),smooth);
HXLINE(4957)							this->addToScaledAssets(str4);
HXLINE(4958)							return str4;
            						}
            						else {
HXLINE(4962)							::String str = ::flixel::addons::ui::U_obj::loadScaledImage(srcSuffix,sw,sh,smooth);
HXLINE(4963)							this->addToScaledAssets(str);
HXLINE(4964)							return str;
            						}
            					}
HXLINE(4967)					goto _hx_goto_184;
            				}
            			}
            			_hx_goto_184:;
            		}
HXLINE(4971)		 ::Xml data1 = data;
HXDLIN(4971)		::String str = HX_("",00,00,00,00);
HXDLIN(4971)		if (::hx::IsNotNull( data1->get(attName) )) {
HXLINE(4971)			str = data1->get(attName);
HXDLIN(4971)			bool _hx_tmp;
HXDLIN(4971)			if ((str != HX_("",00,00,00,00))) {
HXLINE(4971)				_hx_tmp = ::hx::IsNull( str );
            			}
            			else {
HXLINE(4971)				_hx_tmp = true;
            			}
HXDLIN(4971)			if (_hx_tmp) {
HXLINE(4971)				str = HX_("",00,00,00,00);
            			}
            			else {
HXLINE(4971)				str = ::flixel::addons::ui::U_obj::gfx(str,null(),null(),null(),null(),null());
HXDLIN(4971)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(4971)					if (!(::openfl::utils::Assets_obj::exists(str,HX_("IMAGE",3b,57,57,3b)))) {
HXLINE(4971)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(((HX_("couldn't load bmp \"",73,a2,6e,30) + attName) + HX_("\"",22,00,00,00))));
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE(   1)						{
HXLINE(   1)							null();
            						}
HXLINE(4971)						if (!(::Std_obj::isOfType(::haxe::Exception_obj::caught(_g)->unwrap(),::hx::ClassOf< ::String >()))) {
HXLINE(4971)							HX_STACK_DO_THROW(_g);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXDLIN(4971)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxUI_obj,loadScaledSrc,return )

Float FlxUI_obj::_getAnchorPos(::Dynamic thing,::String axis,::String str){
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_4999__getAnchorPos)
HXLINE(5000)		::String _hx_switch_0 = str;
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ){
HXLINE(5003)			return ( (Float)(0) );
HXDLIN(5003)			goto _hx_goto_186;
            		}
            		if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_0==HX_("down",62,f8,6d,42)) ){
HXLINE(5020)			return this->screenHeight();
HXDLIN(5020)			goto _hx_goto_186;
            		}
            		if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE(5009)			if ((axis == HX_("x",78,00,00,00))) {
HXLINE(5011)				return (( (Float)(this->screenWidth()) ) / ( (Float)(2) ));
            			}
            			else {
HXLINE(5013)				if ((axis == HX_("y",79,00,00,00))) {
HXLINE(5015)					return (this->screenHeight() / ( (Float)(2) ));
            				}
            			}
HXLINE(5009)			goto _hx_goto_186;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(5005)			return ( (Float)(0) );
HXDLIN(5005)			goto _hx_goto_186;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(5007)			return ( (Float)(this->screenWidth()) );
HXDLIN(5007)			goto _hx_goto_186;
            		}
            		if (  (_hx_switch_0==HX_("top",95,66,58,00)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(5018)			return ( (Float)(0) );
HXDLIN(5018)			goto _hx_goto_186;
            		}
            		/* default */{
HXLINE(5022)			Float perc = ::flixel::addons::ui::U_obj::perc_to_float(str);
HXLINE(5023)			if (!(::Math_obj::isNaN(perc))) {
HXLINE(5025)				if ((axis == HX_("x",78,00,00,00))) {
HXLINE(5027)					return (perc * ( (Float)(this->screenWidth()) ));
            				}
            				else {
HXLINE(5029)					if ((axis == HX_("y",79,00,00,00))) {
HXLINE(5031)						return (perc * this->screenHeight());
            					}
            				}
            			}
            			else {
HXLINE(5036)				 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\\w]+\\.[\\w]+",ee,da,86,47),HX_("",00,00,00,00));
HXLINE(5038)				if (r->match(str)) {
HXLINE(5040)					::String wh = HX_("",00,00,00,00);
HXLINE(5041)					if ((axis == HX_("x",78,00,00,00))) {
HXLINE(5043)						wh = HX_("w",77,00,00,00);
            					}
HXLINE(5045)					if ((axis == HX_("y",79,00,00,00))) {
HXLINE(5047)						wh = HX_("h",68,00,00,00);
            					}
HXLINE(5049)					Float assetValue = this->_getStretch(1,wh,str);
HXLINE(5050)					return assetValue;
            				}
            			}
            		}
            		_hx_goto_186:;
HXLINE(5054)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_getAnchorPos,return )

 ::flixel::addons::ui::Rounding FlxUI_obj::getRound( ::Xml node,::String __o_defaultStr){
            		::String defaultStr = __o_defaultStr;
            		if (::hx::IsNull(__o_defaultStr)) defaultStr = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5058_getRound)
HXLINE(5059)		::String roundStr = ::flixel::addons::ui::U_obj::xml_str(node,HX_("round",4e,f8,65,ed),true,defaultStr);
HXLINE(5060)		::String _hx_switch_0 = roundStr;
            		if (  (_hx_switch_0==HX_("-1",64,27,00,00)) ||  (_hx_switch_0==HX_("down",62,f8,6d,42)) ||  (_hx_switch_0==HX_("floor",cc,d1,96,02)) ){
HXLINE(5063)			return ::flixel::addons::ui::Rounding_obj::Floor_dyn();
HXDLIN(5063)			goto _hx_goto_188;
            		}
            		if (  (_hx_switch_0==HX_("1",31,00,00,00)) ||  (_hx_switch_0==HX_("ceil",05,1f,bd,41)) ||  (_hx_switch_0==HX_("ceiling",fd,5e,9e,33)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(5065)			return ::flixel::addons::ui::Rounding_obj::Ceil_dyn();
HXDLIN(5065)			goto _hx_goto_188;
            		}
            		if (  (_hx_switch_0==HX_("0",30,00,00,00)) ||  (_hx_switch_0==HX_("round",4e,f8,65,ed)) ||  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ){
HXLINE(5067)			return ::flixel::addons::ui::Rounding_obj::Round_dyn();
HXDLIN(5067)			goto _hx_goto_188;
            		}
            		_hx_goto_188:;
HXLINE(5069)		return ::flixel::addons::ui::Rounding_obj::None_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,getRound,return )

Float FlxUI_obj::doRound(Float f, ::flixel::addons::ui::Rounding round){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5074_doRound)
HXDLIN(5074)		switch((int)(round->_hx_getIndex())){
            			case (int)0: {
HXLINE(5079)				return ( (Float)(::Math_obj::floor(f)) );
            			}
            			break;
            			case (int)1: {
HXLINE(5083)				return ( (Float)(::Math_obj::ceil(f)) );
            			}
            			break;
            			case (int)2: {
HXLINE(5081)				return ( (Float)(::Math_obj::round(f)) );
            			}
            			break;
            			case (int)3: {
HXLINE(5077)				return f;
            			}
            			break;
            		}
HXLINE(5074)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,doRound,return )

 ::Dynamic FlxUI_obj::calcMaxMinSize( ::Xml data, ::Dynamic width, ::Dynamic height){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5089_calcMaxMinSize)
HXLINE(5090)		Float min_w = ( (Float)(0) );
HXLINE(5091)		Float min_h = ( (Float)(0) );
HXLINE(5092)		Float max_w = ::Math_obj::POSITIVE_INFINITY;
HXLINE(5093)		Float max_h = ::Math_obj::POSITIVE_INFINITY;
HXLINE(5094)		Float temp_min_w = ( (Float)(0) );
HXLINE(5095)		Float temp_min_h = ( (Float)(0) );
HXLINE(5096)		Float temp_max_w = ::Math_obj::POSITIVE_INFINITY;
HXLINE(5097)		Float temp_max_h = ::Math_obj::POSITIVE_INFINITY;
HXLINE(5099)		 ::flixel::addons::ui::Rounding round = ::flixel::addons::ui::Rounding_obj::None_dyn();
HXLINE(5101)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("exact_size",81,45,3f,e0))) {
HXLINE(5103)			int _g = 0;
HXDLIN(5103)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("exact_size",81,45,3f,e0));
HXDLIN(5103)			while((_g < _g1->length)){
HXLINE(5103)				 ::Xml exactNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(5103)				_g = (_g + 1);
HXLINE(5105)				::String exact_w_str = ::flixel::addons::ui::U_obj::xml_str(exactNode,HX_("width",06,b6,62,ca),null(),null());
HXLINE(5106)				::String exact_h_str = ::flixel::addons::ui::U_obj::xml_str(exactNode,HX_("height",e7,07,4c,02),null(),null());
HXLINE(5108)				round = this->getRound(exactNode,null());
HXLINE(5109)				min_w = this->doRound(this->_getDataSize(HX_("w",77,00,00,00),exact_w_str,0),round);
HXLINE(5110)				min_h = this->doRound(this->_getDataSize(HX_("h",68,00,00,00),exact_h_str,0),round);
HXLINE(5111)				max_w = this->doRound(min_w,round);
HXLINE(5112)				max_h = this->doRound(min_h,round);
            			}
            		}
            		else {
HXLINE(5115)			if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("min_size",ce,b9,6e,63))) {
HXLINE(5117)				int _g = 0;
HXDLIN(5117)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("min_size",ce,b9,6e,63));
HXDLIN(5117)				while((_g < _g1->length)){
HXLINE(5117)					 ::Xml minNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(5117)					_g = (_g + 1);
HXLINE(5119)					::String min_w_str = ::flixel::addons::ui::U_obj::xml_str(minNode,HX_("width",06,b6,62,ca),null(),null());
HXLINE(5120)					::String min_h_str = ::flixel::addons::ui::U_obj::xml_str(minNode,HX_("height",e7,07,4c,02),null(),null());
HXLINE(5121)					round = this->getRound(minNode,null());
HXLINE(5122)					temp_min_w = this->doRound(this->_getDataSize(HX_("w",77,00,00,00),min_w_str,0),round);
HXLINE(5123)					temp_min_h = this->doRound(this->_getDataSize(HX_("h",68,00,00,00),min_h_str,0),round);
HXLINE(5124)					if ((temp_min_w > min_w)) {
HXLINE(5126)						min_w = temp_min_w;
            					}
HXLINE(5128)					if ((temp_min_h > min_h)) {
HXLINE(5130)						min_h = temp_min_h;
            					}
            				}
            			}
            			else {
HXLINE(5134)				if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("max_size",7c,9f,54,16))) {
HXLINE(5136)					int _g = 0;
HXDLIN(5136)					::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("max_size",7c,9f,54,16));
HXDLIN(5136)					while((_g < _g1->length)){
HXLINE(5136)						 ::Xml maxNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(5136)						_g = (_g + 1);
HXLINE(5138)						::String max_w_str = ::flixel::addons::ui::U_obj::xml_str(maxNode,HX_("width",06,b6,62,ca),null(),null());
HXLINE(5139)						::String max_h_str = ::flixel::addons::ui::U_obj::xml_str(maxNode,HX_("height",e7,07,4c,02),null(),null());
HXLINE(5140)						round = this->getRound(maxNode,null());
HXLINE(5141)						temp_max_w = this->doRound(this->_getDataSize(HX_("w",77,00,00,00),max_w_str,::Math_obj::POSITIVE_INFINITY),round);
HXLINE(5142)						temp_max_h = this->doRound(this->_getDataSize(HX_("h",68,00,00,00),max_h_str,::Math_obj::POSITIVE_INFINITY),round);
HXLINE(5143)						if ((temp_max_w < max_w)) {
HXLINE(5145)							max_w = temp_max_w;
            						}
HXLINE(5147)						if ((temp_max_h < max_h)) {
HXLINE(5149)							max_h = temp_max_h;
            						}
            					}
            				}
            				else {
HXLINE(5155)					return null();
            				}
            			}
            		}
HXLINE(5158)		if (::hx::IsNotNull( width )) {
HXLINE(5160)			if (::hx::IsGreater( width,min_w )) {
HXLINE(5162)				min_w = ( (Float)(width) );
            			}
HXLINE(5164)			if (::hx::IsLess( width,max_w )) {
HXLINE(5166)				max_w = ( (Float)(width) );
            			}
            		}
HXLINE(5169)		if (::hx::IsNotNull( height )) {
HXLINE(5171)			if (::hx::IsGreater( height,min_h )) {
HXLINE(5173)				min_h = ( (Float)(height) );
            			}
HXLINE(5175)			if (::hx::IsLess( height,max_h )) {
HXLINE(5177)				max_h = ( (Float)(height) );
            			}
            		}
HXLINE(5183)		if ((max_w <= 0)) {
HXLINE(5185)			max_w = ::Math_obj::POSITIVE_INFINITY;
            		}
HXLINE(5187)		if ((max_h <= 0)) {
HXLINE(5189)			max_h = ::Math_obj::POSITIVE_INFINITY;
            		}
HXLINE(5192)		return  ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("max_width",eb,9a,40,c1),max_w)
            			->setFixed(1,HX_("min_width",59,88,fd,ea),min_w)
            			->setFixed(2,HX_("max_height",62,6b,96,0d),max_h)
            			->setFixed(3,HX_("min_height",34,3e,29,69),min_h));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,calcMaxMinSize,return )

Float FlxUI_obj::_getDataSize(::String target,::String str,::hx::Null< Float >  __o_default_){
            		Float default_ = __o_default_.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5201__getDataSize)
HXLINE(5202)		if (::flixel::addons::ui::U_obj::isStrNum(str)) {
HXLINE(5204)			return ::Std_obj::parseFloat(str);
            		}
HXLINE(5206)		Float percf = ::flixel::addons::ui::U_obj::perc_to_float(str);
HXLINE(5207)		if (!(::Math_obj::isNaN(percf))) {
HXLINE(5209)			::String _hx_switch_0 = target;
            			if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(5214)				return (this->screenHeight() * percf);
HXDLIN(5214)				goto _hx_goto_195;
            			}
            			if (  (_hx_switch_0==HX_("scale",8a,ce,ce,78)) ||  (_hx_switch_0==HX_("scale_x",43,58,07,65)) ||  (_hx_switch_0==HX_("scale_y",44,58,07,65)) ){
HXLINE(5216)				return percf;
HXDLIN(5216)				goto _hx_goto_195;
            			}
            			if (  (_hx_switch_0==HX_("w",77,00,00,00)) ||  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(5212)				return (( (Float)(this->screenWidth()) ) * percf);
HXDLIN(5212)				goto _hx_goto_195;
            			}
            			_hx_goto_195:;
            		}
            		else {
HXLINE(5221)			if ((str.indexOf(HX_("stretch:",95,06,83,92),null()) == 0)) {
HXLINE(5223)				str = ::StringTools_obj::replace(str,HX_("stretch:",95,06,83,92),HX_("",00,00,00,00));
HXLINE(5224)				::Array< ::String > arr = str.split(HX_(",",2c,00,00,00));
HXLINE(5225)				Float stretch_0 = this->_getStretch(0,target,arr->__get(0));
HXLINE(5226)				Float stretch_1 = this->_getStretch(1,target,arr->__get(1));
HXLINE(5227)				bool _hx_tmp;
HXDLIN(5227)				if ((stretch_0 != -1)) {
HXLINE(5227)					_hx_tmp = (stretch_1 != -1);
            				}
            				else {
HXLINE(5227)					_hx_tmp = false;
            				}
HXDLIN(5227)				if (_hx_tmp) {
HXLINE(5229)					return (stretch_1 - stretch_0);
            				}
            				else {
HXLINE(5233)					return default_;
            				}
            			}
            			else {
HXLINE(5236)				if ((str.indexOf(HX_("asset:",4a,48,03,4c),null()) == 0)) {
HXLINE(5238)					str = ::StringTools_obj::replace(str,HX_("asset:",4a,48,03,4c),HX_("",00,00,00,00));
HXLINE(5239)					Float assetValue = this->_getStretch(1,target,str);
HXLINE(5240)					return assetValue;
            				}
            				else {
HXLINE(5244)					 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\\w]+\\.[\\w]+",ee,da,86,47),HX_("",00,00,00,00));
HXLINE(5245)					if (r->match(str)) {
HXLINE(5247)						Float assetValue = this->_getStretch(1,target,str);
HXLINE(5248)						return assetValue;
            					}
            				}
            			}
HXLINE(5252)			::String ptStr = HX_("",00,00,00,00);
HXLINE(5254)			int _hx_tmp = str.indexOf(HX_("pt",04,62,00,00),null());
HXDLIN(5254)			if ((_hx_tmp == (str.length - 2))) {
HXLINE(5256)				ptStr = str.substr(0,(str.length - 2));
            			}
HXLINE(5259)			bool _hx_tmp1;
HXDLIN(5259)			if ((ptStr != HX_("",00,00,00,00))) {
HXLINE(5259)				_hx_tmp1 = ::flixel::addons::ui::U_obj::isStrNum(ptStr);
            			}
            			else {
HXLINE(5259)				_hx_tmp1 = false;
            			}
HXDLIN(5259)			if (_hx_tmp1) {
HXLINE(5261)				Float tempNum = ::Std_obj::parseFloat(ptStr);
HXLINE(5263)				::String _hx_switch_1 = target;
            				if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(5268)					return (this->_pointY * tempNum);
HXDLIN(5268)					goto _hx_goto_196;
            				}
            				if (  (_hx_switch_1==HX_("w",77,00,00,00)) ||  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(5266)					return (this->_pointX * tempNum);
HXDLIN(5266)					goto _hx_goto_196;
            				}
            				_hx_goto_196:;
            			}
            		}
HXLINE(5272)		return default_;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_getDataSize,return )

::cpp::VirtualArray FlxUI_obj::_getOperation(::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5283__getOperation)
HXLINE(5284)		::Array< ::String > list = ::Array_obj< ::String >::fromData( _hx_array_data_e9110855_200,5);
HXLINE(5286)		::String op = HX_("",00,00,00,00);
HXLINE(5287)		Float besti = ::Math_obj::POSITIVE_INFINITY;
HXLINE(5289)		{
HXLINE(5289)			int _g = 0;
HXDLIN(5289)			while((_g < list->length)){
HXLINE(5289)				::String item = list->__get(_g);
HXDLIN(5289)				_g = (_g + 1);
HXLINE(5291)				int i = str.indexOf(item,null());
HXLINE(5292)				if ((i != -1)) {
HXLINE(5294)					if ((i < besti)) {
HXLINE(5296)						besti = ( (Float)(i) );
HXLINE(5297)						op = item;
            					}
            				}
            			}
            		}
HXLINE(5302)		bool hasPoint = false;
HXLINE(5304)		if ((op != HX_("",00,00,00,00))) {
HXLINE(5306)			if ((str.indexOf(op,null()) != -1)) {
HXLINE(5308)				int opindex = str.indexOf(op,null());
HXLINE(5310)				if ((opindex != (str.length - 1))) {
HXLINE(5312)					::String firstBit = str.substr(0,opindex);
HXLINE(5313)					::String secondBit = str.substr((opindex + 1),(str.length - (opindex + 1)));
HXLINE(5315)					Float f = ( (Float)(0) );
HXLINE(5318)					int ptIndex = secondBit.indexOf(HX_("pt",04,62,00,00),null());
HXLINE(5319)					bool _hx_tmp;
HXDLIN(5319)					if ((ptIndex != -1)) {
HXLINE(5319)						_hx_tmp = (ptIndex == (secondBit.length - 2));
            					}
            					else {
HXLINE(5319)						_hx_tmp = false;
            					}
HXDLIN(5319)					if (_hx_tmp) {
HXLINE(5321)						::String sansPt = ::StringTools_obj::replace(secondBit,HX_("pt",04,62,00,00),HX_("",00,00,00,00));
HXLINE(5322)						f = ::Std_obj::parseFloat(sansPt);
HXLINE(5323)						hasPoint = true;
            					}
            					else {
HXLINE(5327)						f = ::Std_obj::parseFloat(secondBit);
            					}
HXLINE(5330)					if (::Math_obj::isNaN(f)) {
HXLINE(5332)						f = this->getAssetProperty(1,HX_("",00,00,00,00),secondBit);
            					}
HXLINE(5334)					bool _hx_tmp1;
HXDLIN(5334)					if ((f == 0)) {
HXLINE(5334)						_hx_tmp1 = (secondBit != HX_("0",30,00,00,00));
            					}
            					else {
HXLINE(5334)						_hx_tmp1 = false;
            					}
HXDLIN(5334)					if (_hx_tmp1) {
HXLINE(5336)						return null();
            					}
            					else {
HXLINE(5340)						return ::cpp::VirtualArray_obj::__new(4)->init(0,firstBit)->init(1,op)->init(2,f)->init(3,hasPoint);
            					}
            				}
            			}
            		}
HXLINE(5346)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_getOperation,return )

Float FlxUI_obj::_doOperation(Float value,::String op,Float operand){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5350__doOperation)
HXLINE(5351)		::String _hx_switch_0 = op;
            		if (  (_hx_switch_0==HX_("*",2a,00,00,00)) ){
HXLINE(5360)			return (value * operand);
HXDLIN(5360)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("+",2b,00,00,00)) ){
HXLINE(5354)			return (value + operand);
HXDLIN(5354)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("-",2d,00,00,00)) ){
HXLINE(5356)			return (value - operand);
HXDLIN(5356)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("/",2f,00,00,00)) ){
HXLINE(5358)			return (value / operand);
HXDLIN(5358)			goto _hx_goto_201;
            		}
            		if (  (_hx_switch_0==HX_("^",5e,00,00,00)) ){
HXLINE(5362)			return ::Math_obj::pow(value,operand);
HXDLIN(5362)			goto _hx_goto_201;
            		}
            		_hx_goto_201:;
HXLINE(5364)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_doOperation,return )

Float FlxUI_obj::_getStretch(int index,::String target,::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5368__getStretch)
HXLINE(5369)		::cpp::VirtualArray arr = null();
HXLINE(5371)		::String op = HX_("",00,00,00,00);
HXLINE(5372)		Float operand = ( (Float)(0) );
HXLINE(5373)		bool hasPoint = false;
HXLINE(5375)		arr = this->_getOperation(str);
HXLINE(5377)		if (::hx::IsNotNull( arr )) {
HXLINE(5379)			str = ( (::String)(arr->__get(0)) );
HXLINE(5380)			op = ( (::String)(arr->__get(1)) );
HXLINE(5381)			operand = ( (Float)(arr->__get(2)) );
HXLINE(5382)			hasPoint = ( (bool)(arr->__get(3)) );
HXLINE(5384)			if (hasPoint) {
HXLINE(5386)				::String _hx_switch_0 = target;
            				if (  (_hx_switch_0==HX_("h",68,00,00,00)) ||  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(5391)					operand = (operand * this->_pointY);
HXDLIN(5391)					goto _hx_goto_203;
            				}
            				if (  (_hx_switch_0==HX_("w",77,00,00,00)) ||  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(5389)					operand = (operand * this->_pointX);
HXDLIN(5389)					goto _hx_goto_203;
            				}
            				/* default */{
HXLINE(5393)					operand = (operand * this->_pointY);
            				}
            				_hx_goto_203:;
            			}
            		}
HXLINE(5398)		Float return_val = this->getAssetProperty(index,target,str);
HXLINE(5400)		bool _hx_tmp;
HXDLIN(5400)		if ((return_val != -1)) {
HXLINE(5400)			_hx_tmp = (op != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(5400)			_hx_tmp = false;
            		}
HXDLIN(5400)		if (_hx_tmp) {
HXLINE(5402)			return_val = this->_doOperation(return_val,op,operand);
            		}
HXLINE(5405)		return return_val;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_getStretch,return )

Float FlxUI_obj::getAssetProperty(int index,::String target,::String str){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5409_getAssetProperty)
HXLINE(5410)		::String prop = HX_("",00,00,00,00);
HXLINE(5412)		if ((str.indexOf(HX_(".",2e,00,00,00),null()) != -1)) {
HXLINE(5414)			::Array< ::String > arr = null();
HXLINE(5415)			arr = str.split(HX_(".",2e,00,00,00));
HXLINE(5416)			str = arr->__get(0);
HXLINE(5417)			prop = arr->__get(1);
            		}
HXLINE(5420)		::Dynamic other = this->getAsset(str,null());
HXLINE(5422)		Float return_val = ( (Float)(0) );
HXLINE(5424)		if (::hx::IsNull( other )) {
HXLINE(5426)			::String _hx_switch_0 = str;
            			if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_0==HX_("down",62,f8,6d,42)) ){
HXLINE(5431)				return_val = this->screenHeight();
HXDLIN(5431)				goto _hx_goto_205;
            			}
            			if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(5433)				return_val = ( (Float)(0) );
HXDLIN(5433)				goto _hx_goto_205;
            			}
            			if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(5435)				return_val = ( (Float)(this->screenWidth()) );
HXDLIN(5435)				goto _hx_goto_205;
            			}
            			if (  (_hx_switch_0==HX_("top",95,66,58,00)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(5429)				return_val = ( (Float)(0) );
HXDLIN(5429)				goto _hx_goto_205;
            			}
            			/* default */{
HXLINE(5437)				if (::flixel::addons::ui::U_obj::isStrNum(str)) {
HXLINE(5439)					return_val = ::Std_obj::parseFloat(str);
            				}
            				else {
HXLINE(5443)					return_val = ( (Float)(-1) );
            				}
            			}
            			_hx_goto_205:;
            		}
            		else {
HXLINE(5449)			::String _hx_switch_1 = target;
            			if (  (_hx_switch_1==HX_("h",68,00,00,00)) ||  (_hx_switch_1==HX_("height",e7,07,4c,02)) ){
HXLINE(5479)				if ((prop == HX_("",00,00,00,00))) {
HXLINE(5481)					if ((index == 0)) {
HXLINE(5483)						Float other1 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5483)						return_val = (other1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
            					}
HXLINE(5485)					if ((index == 1)) {
HXLINE(5487)						return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
            					}
            				}
            				else {
HXLINE(5492)					::String _hx_switch_2 = prop;
            					if (  (_hx_switch_2==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_2==HX_("down",62,f8,6d,42)) ){
HXLINE(5495)						Float other1 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5495)						return_val = (other1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
HXDLIN(5495)						goto _hx_goto_208;
            					}
            					if (  (_hx_switch_2==HX_("center",d5,25,db,05)) ){
HXLINE(5498)						Float other1 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5498)						return_val = (other1 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / ( (Float)(2) )));
HXDLIN(5498)						goto _hx_goto_208;
            					}
            					if (  (_hx_switch_2==HX_("halfheight",da,f9,da,c0)) ){
HXLINE(5501)						return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / ( (Float)(2) ));
HXDLIN(5501)						goto _hx_goto_208;
            					}
            					if (  (_hx_switch_2==HX_("halfwidth",73,83,07,7c)) ){
HXLINE(5502)						return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / ( (Float)(2) ));
HXDLIN(5502)						goto _hx_goto_208;
            					}
            					if (  (_hx_switch_2==HX_("height",e7,07,4c,02)) ){
HXLINE(5499)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other);
HXDLIN(5499)						goto _hx_goto_208;
            					}
            					if (  (_hx_switch_2==HX_("right",dc,0b,64,e9)) ){
HXLINE(5496)						Float other1 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5496)						return_val = (other1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
HXDLIN(5496)						goto _hx_goto_208;
            					}
            					if (  (_hx_switch_2==HX_("top",95,66,58,00)) ||  (_hx_switch_2==HX_("up",5b,66,00,00)) ||  (_hx_switch_2==HX_("y",79,00,00,00)) ){
HXLINE(5494)						return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5494)						goto _hx_goto_208;
            					}
            					if (  (_hx_switch_2==HX_("width",06,b6,62,ca)) ){
HXLINE(5500)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other);
HXDLIN(5500)						goto _hx_goto_208;
            					}
            					if (  (_hx_switch_2==HX_("left",07,08,b0,47)) ||  (_hx_switch_2==HX_("x",78,00,00,00)) ){
HXLINE(5497)						return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5497)						goto _hx_goto_208;
            					}
            					_hx_goto_208:;
            				}
HXLINE(5479)				goto _hx_goto_207;
            			}
            			if (  (_hx_switch_1==HX_("w",77,00,00,00)) ||  (_hx_switch_1==HX_("width",06,b6,62,ca)) ){
HXLINE(5452)				if ((prop == HX_("",00,00,00,00))) {
HXLINE(5454)					if ((index == 0)) {
HXLINE(5456)						Float other1 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5456)						return_val = (other1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
            					}
HXLINE(5458)					if ((index == 1)) {
HXLINE(5460)						return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
            					}
            				}
            				else {
HXLINE(5465)					::String _hx_switch_3 = prop;
            					if (  (_hx_switch_3==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_3==HX_("down",62,f8,6d,42)) ){
HXLINE(5468)						Float other1 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5468)						return_val = (other1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
HXDLIN(5468)						goto _hx_goto_209;
            					}
            					if (  (_hx_switch_3==HX_("center",d5,25,db,05)) ){
HXLINE(5471)						Float other1 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5471)						return_val = (other1 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / ( (Float)(2) )));
HXDLIN(5471)						goto _hx_goto_209;
            					}
            					if (  (_hx_switch_3==HX_("halfheight",da,f9,da,c0)) ){
HXLINE(5474)						return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / ( (Float)(2) ));
HXDLIN(5474)						goto _hx_goto_209;
            					}
            					if (  (_hx_switch_3==HX_("halfwidth",73,83,07,7c)) ){
HXLINE(5475)						return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / ( (Float)(2) ));
HXDLIN(5475)						goto _hx_goto_209;
            					}
            					if (  (_hx_switch_3==HX_("height",e7,07,4c,02)) ){
HXLINE(5473)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other);
HXDLIN(5473)						goto _hx_goto_209;
            					}
            					if (  (_hx_switch_3==HX_("right",dc,0b,64,e9)) ){
HXLINE(5469)						Float other1 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5469)						return_val = (other1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
HXDLIN(5469)						goto _hx_goto_209;
            					}
            					if (  (_hx_switch_3==HX_("top",95,66,58,00)) ||  (_hx_switch_3==HX_("up",5b,66,00,00)) ||  (_hx_switch_3==HX_("y",79,00,00,00)) ){
HXLINE(5467)						return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5467)						goto _hx_goto_209;
            					}
            					if (  (_hx_switch_3==HX_("width",06,b6,62,ca)) ){
HXLINE(5472)						return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other);
HXDLIN(5472)						goto _hx_goto_209;
            					}
            					if (  (_hx_switch_3==HX_("left",07,08,b0,47)) ||  (_hx_switch_3==HX_("x",78,00,00,00)) ){
HXLINE(5470)						return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5470)						goto _hx_goto_209;
            					}
            					_hx_goto_209:;
            				}
HXLINE(5452)				goto _hx_goto_207;
            			}
            			/* default */{
HXLINE(5506)				::String _hx_switch_4 = prop;
            				if (  (_hx_switch_4==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_4==HX_("down",62,f8,6d,42)) ){
HXLINE(5509)					Float other1 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5509)					return_val = (other1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other));
HXDLIN(5509)					goto _hx_goto_206;
            				}
            				if (  (_hx_switch_4==HX_("centerx",03,f5,e5,19)) ){
HXLINE(5513)					Float other1 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5513)					return_val = (other1 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / ( (Float)(2) )));
HXDLIN(5513)					goto _hx_goto_206;
            				}
            				if (  (_hx_switch_4==HX_("centery",04,f5,e5,19)) ){
HXLINE(5512)					Float other1 = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5512)					return_val = (other1 + (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / ( (Float)(2) )));
HXDLIN(5512)					goto _hx_goto_206;
            				}
            				if (  (_hx_switch_4==HX_("halfheight",da,f9,da,c0)) ){
HXLINE(5516)					return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other) / ( (Float)(2) ));
HXDLIN(5516)					goto _hx_goto_206;
            				}
            				if (  (_hx_switch_4==HX_("halfwidth",73,83,07,7c)) ){
HXLINE(5517)					return_val = (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other) / ( (Float)(2) ));
HXDLIN(5517)					goto _hx_goto_206;
            				}
            				if (  (_hx_switch_4==HX_("height",e7,07,4c,02)) ){
HXLINE(5514)					return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(other);
HXDLIN(5514)					goto _hx_goto_206;
            				}
            				if (  (_hx_switch_4==HX_("right",dc,0b,64,e9)) ){
HXLINE(5510)					Float other1 = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5510)					return_val = (other1 + ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other));
HXDLIN(5510)					goto _hx_goto_206;
            				}
            				if (  (_hx_switch_4==HX_("top",95,66,58,00)) ||  (_hx_switch_4==HX_("up",5b,66,00,00)) ||  (_hx_switch_4==HX_("y",79,00,00,00)) ){
HXLINE(5508)					return_val = ( (Float)(other->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN(5508)					goto _hx_goto_206;
            				}
            				if (  (_hx_switch_4==HX_("width",06,b6,62,ca)) ){
HXLINE(5515)					return_val = ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(other);
HXDLIN(5515)					goto _hx_goto_206;
            				}
            				if (  (_hx_switch_4==HX_("left",07,08,b0,47)) ||  (_hx_switch_4==HX_("x",78,00,00,00)) ){
HXLINE(5511)					return_val = ( (Float)(other->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN(5511)					goto _hx_goto_206;
            				}
            				_hx_goto_206:;
            			}
            			_hx_goto_207:;
            		}
HXLINE(5521)		return return_val;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,getAssetProperty,return )

void FlxUI_obj::_loadCursor( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5526__loadCursor)
HXDLIN(5526)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("list",5e,1c,b3,47))) {
HXLINE(5528)			if (::hx::IsNull( this->cursorLists )) {
HXLINE(5530)				this->cursorLists = ::Array_obj< ::Dynamic>::__new(0);
            			}
HXLINE(5532)			{
HXLINE(5532)				int _g = 0;
HXDLIN(5532)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("list",5e,1c,b3,47));
HXDLIN(5532)				while((_g < _g1->length)){
HXLINE(5532)					 ::Xml lNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(5532)					_g = (_g + 1);
HXLINE(5534)					::String ids = ::flixel::addons::ui::U_obj::xml_str(lNode,HX_("ids",38,04,50,00),null(),null());
HXLINE(5535)					::Array< ::String > arr = ids.split(HX_(",",2c,00,00,00));
HXLINE(5536)					bool _hx_tmp;
HXDLIN(5536)					if (::hx::IsNotNull( arr )) {
HXLINE(5536)						_hx_tmp = (arr->length > 0);
            					}
            					else {
HXLINE(5536)						_hx_tmp = false;
            					}
HXDLIN(5536)					if (_hx_tmp) {
HXLINE(5538)						::Array< ::Dynamic> list = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5539)						{
HXLINE(5539)							int _g = 0;
HXDLIN(5539)							while((_g < arr->length)){
HXLINE(5539)								::String str = arr->__get(_g);
HXDLIN(5539)								_g = (_g + 1);
HXLINE(5541)								::Dynamic widget = this->getAsset(str,null());
HXLINE(5542)								if (::hx::IsNotNull( widget )) {
HXLINE(5544)									list->push(widget);
            								}
            							}
            						}
HXLINE(5547)						this->cursorLists->push(list);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadCursor,(void))

void FlxUI_obj::_loadPosition( ::Xml data,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5554__loadPosition)
HXLINE(5555)		Float X = this->_loadWidth(data,( (Float)(0) ),HX_("x",78,00,00,00),null());
HXLINE(5556)		Float Y = this->_loadHeight(data,( (Float)(0) ),HX_("y",79,00,00,00),null());
HXLINE(5561)		bool ctrX = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("center_x",4e,58,50,8f),null());
HXLINE(5562)		bool ctrY = ::flixel::addons::ui::U_obj::xml_bool(data,HX_("center_y",4f,58,50,8f),null());
HXLINE(5564)		::String center_on = ::flixel::addons::ui::U_obj::xml_str(data,HX_("center_on",89,e4,fc,d6),null(),null());
HXLINE(5565)		::String center_on_x = ::flixel::addons::ui::U_obj::xml_str(data,HX_("center_on_x",02,2c,66,3b),null(),null());
HXLINE(5566)		::String center_on_y = ::flixel::addons::ui::U_obj::xml_str(data,HX_("center_on_y",03,2c,66,3b),null(),null());
HXLINE(5568)		::String anchor_x_str = HX_("",00,00,00,00);
HXLINE(5569)		::String anchor_y_str = HX_("",00,00,00,00);
HXLINE(5570)		Float anchor_x = ( (Float)(0) );
HXLINE(5571)		Float anchor_y = ( (Float)(0) );
HXLINE(5572)		::String anchor_x_flush = HX_("",00,00,00,00);
HXLINE(5573)		::String anchor_y_flush = HX_("",00,00,00,00);
HXLINE(5575)		if (::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60))) {
HXLINE(5577)			anchor_x_str = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("x",78,00,00,00),null(),null());
HXLINE(5578)			anchor_y_str = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("y",79,00,00,00),null(),null());
HXLINE(5580)			 ::flixel::addons::ui::Rounding rounding = this->getRound(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),null());
HXLINE(5582)			anchor_x = this->_getAnchorPos(thing,HX_("x",78,00,00,00),anchor_x_str);
HXLINE(5583)			anchor_y = this->_getAnchorPos(thing,HX_("y",79,00,00,00),anchor_y_str);
HXLINE(5585)			anchor_x = this->doRound(anchor_x,rounding);
HXLINE(5586)			anchor_y = this->doRound(anchor_y,rounding);
HXLINE(5588)			anchor_x_flush = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("x-flush",ef,49,ba,7e),true,null());
HXLINE(5589)			anchor_y_flush = ::flixel::addons::ui::U_obj::xml_str(::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("anchor",75,3a,71,60)),HX_("y-flush",b0,c0,4f,a8),true,null());
            		}
HXLINE(5593)		bool _hx_tmp;
HXDLIN(5593)		if ((anchor_x_str == HX_("",00,00,00,00))) {
HXLINE(5593)			_hx_tmp = (anchor_y_str != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(5593)			_hx_tmp = true;
            		}
HXDLIN(5593)		if (_hx_tmp) {
HXLINE(5595)			::String _hx_switch_0 = anchor_x_flush;
            			if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE(5601)				anchor_x = (anchor_x - (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing) / ( (Float)(2) )));
HXDLIN(5601)				goto _hx_goto_214;
            			}
            			if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(5597)				goto _hx_goto_214;
            			}
            			if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(5599)				anchor_x = (anchor_x - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing));
HXDLIN(5599)				goto _hx_goto_214;
            			}
            			_hx_goto_214:;
HXLINE(5603)			::String _hx_switch_1 = anchor_y_flush;
            			if (  (_hx_switch_1==HX_("bottom",eb,e6,78,65)) ||  (_hx_switch_1==HX_("down",62,f8,6d,42)) ){
HXLINE(5607)				anchor_y = (anchor_y - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing));
HXDLIN(5607)				goto _hx_goto_215;
            			}
            			if (  (_hx_switch_1==HX_("center",d5,25,db,05)) ){
HXLINE(5609)				anchor_y = (anchor_y - (::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing) / ( (Float)(2) )));
HXDLIN(5609)				goto _hx_goto_215;
            			}
            			if (  (_hx_switch_1==HX_("top",95,66,58,00)) ||  (_hx_switch_1==HX_("up",5b,66,00,00)) ){
HXLINE(5605)				goto _hx_goto_215;
            			}
            			_hx_goto_215:;
HXLINE(5612)			if ((anchor_x_str != HX_("",00,00,00,00))) {
HXLINE(5614)				::flixel::IFlxSprite_obj::set_x(thing,anchor_x);
            			}
HXLINE(5616)			if ((anchor_y_str != HX_("",00,00,00,00))) {
HXLINE(5618)				::flixel::IFlxSprite_obj::set_y(thing,anchor_y);
            			}
            		}
HXLINE(5623)		bool _hx_tmp1;
HXDLIN(5623)		if (!(ctrX)) {
HXLINE(5623)			_hx_tmp1 = ctrY;
            		}
            		else {
HXLINE(5623)			_hx_tmp1 = true;
            		}
HXDLIN(5623)		if (_hx_tmp1) {
HXLINE(5625)			if (ctrX) {
HXLINE(5625)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(5625)				::flixel::IFlxSprite_obj::set_x(thing,((( (Float)(_hx_tmp) ) - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_width(thing)) / ( (Float)(2) )));
            			}
HXDLIN(5625)			if (ctrY) {
HXLINE(5625)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(5625)				::flixel::IFlxSprite_obj::set_y(thing,((( (Float)(_hx_tmp) ) - ::flixel::addons::ui::interfaces::IFlxUIWidget_obj::get_height(thing)) / ( (Float)(2) )));
            			}
            		}
HXLINE(5629)		if ((center_on != HX_("",00,00,00,00))) {
HXLINE(5631)			::Dynamic other = this->getAsset(center_on,null());
HXLINE(5632)			if (::hx::IsNotNull( other )) {
HXLINE(5634)				 ::flixel::FlxObject fb1 = ::hx::TCast<  ::flixel::FlxObject >::cast(other);
HXDLIN(5634)				 ::flixel::FlxObject fb2 = ::hx::TCast<  ::flixel::FlxObject >::cast(thing);
HXDLIN(5634)				{
HXLINE(5634)					Float fb11 = fb1->x;
HXDLIN(5634)					Float _hx_tmp = fb1->get_width();
HXDLIN(5634)					fb2->set_x((fb11 + ((_hx_tmp - fb2->get_width()) / ( (Float)(2) ))));
            				}
HXDLIN(5634)				{
HXLINE(5634)					Float fb12 = fb1->y;
HXDLIN(5634)					Float _hx_tmp1 = fb1->get_height();
HXDLIN(5634)					fb2->set_y((fb12 + ((_hx_tmp1 - fb2->get_height()) / ( (Float)(2) ))));
            				}
            			}
            		}
            		else {
HXLINE(5639)			if ((center_on_x != HX_("",00,00,00,00))) {
HXLINE(5641)				::Dynamic other = this->getAsset(center_on_x,null());
HXLINE(5642)				if (::hx::IsNotNull( other )) {
HXLINE(5644)					 ::flixel::FlxObject fb1 = ::hx::TCast<  ::flixel::FlxObject >::cast(other);
HXDLIN(5644)					 ::flixel::FlxObject fb2 = ::hx::TCast<  ::flixel::FlxObject >::cast(thing);
HXDLIN(5644)					Float fb11 = fb1->x;
HXDLIN(5644)					Float _hx_tmp = fb1->get_width();
HXDLIN(5644)					fb2->set_x((fb11 + ((_hx_tmp - fb2->get_width()) / ( (Float)(2) ))));
            				}
            			}
HXLINE(5647)			if ((center_on_y != HX_("",00,00,00,00))) {
HXLINE(5649)				::Dynamic other = this->getAsset(center_on_y,null());
HXLINE(5650)				if (::hx::IsNotNull( other )) {
HXLINE(5652)					 ::flixel::FlxObject fb1 = ::hx::TCast<  ::flixel::FlxObject >::cast(other);
HXDLIN(5652)					 ::flixel::FlxObject fb2 = ::hx::TCast<  ::flixel::FlxObject >::cast(thing);
HXDLIN(5652)					Float fb11 = fb1->y;
HXDLIN(5652)					Float _hx_tmp = fb1->get_height();
HXDLIN(5652)					fb2->set_y((fb11 + ((_hx_tmp - fb2->get_height()) / ( (Float)(2) ))));
            				}
            			}
            		}
HXLINE(5658)		{
HXLINE(5658)			{
HXLINE(5658)				::Dynamic _g = thing;
HXDLIN(5658)				::flixel::IFlxSprite_obj::set_x(_g, ::Dynamic((_g->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) + X)));
            			}
HXDLIN(5658)			{
HXLINE(5658)				::Dynamic _g1 = thing;
HXDLIN(5658)				::flixel::IFlxSprite_obj::set_y(_g1, ::Dynamic((_g1->__Field(HX_("y",79,00,00,00),::hx::paccDynamic) + Y)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,_loadPosition,(void))

 ::flixel::addons::ui::BorderDef FlxUI_obj::_loadBorder( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5662__loadBorder)
HXLINE(5663)		 ::flixel::addons::ui::BorderDef borderDef = ::flixel::addons::ui::BorderDef_obj::fromXML(data);
HXLINE(5665)		 ::flixel::addons::ui::Rounding round = this->getRound(data,HX_("floor",cc,d1,96,02));
HXLINE(5666)		Float dataSize = this->_getDataSize(HX_("h",68,00,00,00),::flixel::addons::ui::U_obj::xml_str(data,HX_("border_size",34,18,b0,f8),null(),null()),1);
HXLINE(5667)		int border_size = ::Std_obj::_hx_int(this->doRound(dataSize,round));
HXLINE(5669)		borderDef->size = ( (Float)(border_size) );
HXLINE(5671)		return borderDef;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadBorder,return )

int FlxUI_obj::_loadColor( ::Xml data,::String __o_colorName,::hx::Null< int >  __o__default){
            		::String colorName = __o_colorName;
            		if (::hx::IsNull(__o_colorName)) colorName = HX_("color",63,71,5c,4a);
            		int _default = __o__default.Default(-1);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5675__loadColor)
HXLINE(5676)		::String colorStr = ::flixel::addons::ui::U_obj::xml_str(data,colorName,null(),null());
HXLINE(5677)		bool _hx_tmp;
HXDLIN(5677)		if ((colorStr == HX_("",00,00,00,00))) {
HXLINE(5677)			 ::Xml _this = data;
HXDLIN(5677)			if ((_this->nodeType != ::Xml_obj::Element)) {
HXLINE(5677)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(_this->nodeType))));
            			}
HXDLIN(5677)			_hx_tmp = (_this->nodeName == colorName);
            		}
            		else {
HXLINE(5677)			_hx_tmp = false;
            		}
HXDLIN(5677)		if (_hx_tmp) {
HXLINE(5679)			colorStr = ::flixel::addons::ui::U_obj::xml_str(data,HX_("value",71,7f,b8,31),null(),null());
            		}
HXLINE(5681)		int color = _default;
HXLINE(5682)		if ((colorStr != HX_("",00,00,00,00))) {
HXLINE(5684)			 ::Dynamic return_val = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(colorStr);
HXDLIN(5684)			if (::hx::IsNull( return_val )) {
HXLINE(5684)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("U.parseHex() unable to parse hex String ",07,7d,1f,93) + colorStr)));
            			}
HXDLIN(5684)			color = ( (int)(return_val) );
            		}
HXLINE(5686)		return color;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,_loadColor,return )

 ::flixel::addons::ui::FontDef FlxUI_obj::_loadFontDef( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5690__loadFontDef)
HXLINE(5691)		 ::flixel::addons::ui::FontDef fd = ::flixel::addons::ui::FontDef_obj::fromXML(data);
HXLINE(5692)		int fontSize = ::Std_obj::_hx_int(this->_loadHeight(data,8,HX_("size",c1,a0,53,4c),null()));
HXLINE(5693)		fd->format->size = ::flixel::addons::ui::FlxUI_obj::fontSize(fd->file,fontSize);
HXLINE(5694)		fd->set_size(fontSize);
HXLINE(5695)		return fd;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadFontDef,return )

::String FlxUI_obj::_loadFontFace( ::Xml data){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5699__loadFontFace)
HXLINE(5700)		::String fontFace = ::flixel::addons::ui::U_obj::xml_str(data,HX_("font",cf,5d,c0,43),null(),null());
HXLINE(5701)		::String fontStyle = ::flixel::addons::ui::U_obj::xml_str(data,HX_("style",31,a5,1d,84),null(),null());
HXLINE(5702)		::String the_font = null();
HXLINE(5703)		if ((fontFace != HX_("",00,00,00,00))) {
HXLINE(5705)			the_font = ::flixel::addons::ui::FlxUI_obj::font(fontFace,fontStyle,null());
            		}
HXLINE(5707)		return the_font;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUI_obj,_loadFontFace,return )

void FlxUI_obj::_onFinishLoad(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5712__onFinishLoad)
HXDLIN(5712)		if (::hx::IsNotNull( this->_ptr )) {
HXLINE(5714)			::flixel::addons::ui::interfaces::IEventGetter_obj::getEvent(this->_ptr,HX_("finish_load",d2,68,a0,8e),::hx::ObjectPtr<OBJ_>(this),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,_onFinishLoad,(void))

::String FlxUI_obj::getText(::String flag,::String __o_context,::hx::Null< bool >  __o_safe,::String __o_code){
            		::String context = __o_context;
            		if (::hx::IsNull(__o_context)) context = HX_("data",2a,56,63,42);
            		bool safe = __o_safe.Default(true);
            		::String code = __o_code;
            		if (::hx::IsNull(__o_code)) code = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5720_getText)
HXLINE(5721)		::String str = HX_("",00,00,00,00);
HXLINE(5722)		if (::hx::IsNotNull( this->_ptr_tongue )) {
HXLINE(5724)			str = ::flixel::addons::ui::interfaces::IFireTongue_obj::get(this->_ptr_tongue,flag,context,safe);
HXLINE(5725)			return this->formatFromCode(str,code);
            		}
            		else {
HXLINE(5727)			if (::hx::IsNotNull( this->getTextFallback )) {
HXLINE(5729)				str = ( (::String)(this->getTextFallback(flag,context,safe)) );
HXLINE(5730)				return this->formatFromCode(str,code);
            			}
            		}
HXLINE(5733)		return flag;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,getText,return )

::String FlxUI_obj::formatFromCode(::String str,::String code){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5737_formatFromCode)
HXLINE(5738)		::String _hx_switch_0 = code;
            		if (  (_hx_switch_0==HX_("fu",4f,59,00,00)) ){
HXLINE(5745)			return ::flixel::addons::ui::U_obj::FU(str);
HXDLIN(5745)			goto _hx_goto_223;
            		}
            		if (  (_hx_switch_0==HX_("fu_",30,cc,4d,00)) ){
HXLINE(5747)			return ::flixel::addons::ui::U_obj::FU_(str);
HXDLIN(5747)			goto _hx_goto_223;
            		}
            		if (  (_hx_switch_0==HX_("l",6c,00,00,00)) ){
HXLINE(5743)			return str.toLowerCase();
HXDLIN(5743)			goto _hx_goto_223;
            		}
            		if (  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(5741)			return str.toUpperCase();
HXDLIN(5741)			goto _hx_goto_223;
            		}
            		_hx_goto_223:;
HXLINE(5749)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,formatFromCode,return )

 ::flixel::text::FlxText FlxUI_obj::formatButtonText( ::Xml data, ::Dynamic button){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5822_formatButtonText)
HXLINE(5823)		bool _hx_tmp;
HXDLIN(5823)		if (::hx::IsNotNull( data )) {
HXLINE(5823)			_hx_tmp = ::haxe::xml::_Access::HasNodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c));
            		}
            		else {
HXLINE(5823)			_hx_tmp = false;
            		}
HXDLIN(5823)		if (_hx_tmp) {
HXLINE(5825)			 ::Xml textNode = ::haxe::xml::_Access::NodeAccess_Impl__obj::resolve(data,HX_("text",ad,cc,f9,4c));
HXLINE(5826)			::String use_def = ::flixel::addons::ui::U_obj::xml_str(textNode,HX_("use_def",8d,da,e9,62),true,null());
HXLINE(5827)			 ::Xml text_def = null();
HXLINE(5829)			if ((use_def != HX_("",00,00,00,00))) {
HXLINE(5831)				text_def = this->getDefinition(use_def,null());
            			}
HXLINE(5834)			 ::Xml info = ::flixel::addons::ui::FlxUI_obj::consolidateData(textNode,text_def,null());
HXLINE(5836)			::String the_font = this->_loadFontFace(info);
HXLINE(5837)			int size = ::Std_obj::_hx_int(this->_loadHeight(info,8,HX_("size",c1,a0,53,4c),HX_("floor",cc,d1,96,02)));
HXLINE(5838)			int color = this->_loadColor(info,null(),null());
HXLINE(5840)			Float labelWidth = ::flixel::addons::ui::U_obj::xml_f(info,HX_("width",06,b6,62,ca),null());
HXLINE(5842)			 ::flixel::addons::ui::BorderDef border = this->_loadBorder(info);
HXLINE(5844)			::String align = ::flixel::addons::ui::U_obj::xml_str(info,HX_("align",c5,56,91,21),true,null());
HXLINE(5845)			if ((align == HX_("",00,00,00,00))) {
HXLINE(5847)				align = null();
            			}
HXLINE(5850)			 ::flixel::text::FlxText the_label = null();
HXLINE(5851)			 ::flixel::addons::ui::FlxUIButton fb = null();
HXLINE(5852)			 ::flixel::addons::ui::FlxUISpriteButton fsb = null();
HXLINE(5853)			::Dynamic ifb = null();
HXLINE(5855)			if ((::Std_obj::isOfType(button,::hx::ClassOf< ::flixel::addons::ui::FlxUICheckBox >()) == false)) {
HXLINE(5857)				ifb = button;
HXLINE(5858)				bool _hx_tmp;
HXDLIN(5858)				if ((align != HX_("",00,00,00,00))) {
HXLINE(5858)					_hx_tmp = ::hx::IsNull( align );
            				}
            				else {
HXLINE(5858)					_hx_tmp = true;
            				}
HXDLIN(5858)				if (_hx_tmp) {
HXLINE(5860)					align = HX_("center",d5,25,db,05);
            				}
            			}
            			else {
HXLINE(5865)				 ::flixel::addons::ui::FlxUICheckBox cb = ( ( ::flixel::addons::ui::FlxUICheckBox)(button) );
HXLINE(5866)				ifb = cb->button;
HXLINE(5867)				align = HX_("left",07,08,b0,47);
            			}
HXLINE(5870)			if (::hx::IsNotNull( ifb )) {
HXLINE(5872)				if (::Std_obj::isOfType(ifb,::hx::ClassOf< ::flixel::addons::ui::FlxUIButton >())) {
HXLINE(5874)					fb = ( ( ::flixel::addons::ui::FlxUIButton)(ifb) );
HXLINE(5875)					the_label = ( ( ::flixel::text::FlxText)(fb->label) );
            				}
            				else {
HXLINE(5877)					if (::Std_obj::isOfType(ifb,::hx::ClassOf< ::flixel::addons::ui::FlxUISpriteButton >())) {
HXLINE(5879)						fsb = ( ( ::flixel::addons::ui::FlxUISpriteButton)(ifb) );
HXLINE(5880)						if (::Std_obj::isOfType(fsb->label,::hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE(5882)							the_label = ( ( ::flixel::text::FlxText)(fsb->label) );
            						}
            						else {
HXLINE(5884)							if (::Std_obj::isOfType(fsb->label,::hx::ClassOf< ::flixel::group::FlxTypedSpriteGroup >())) {
HXLINE(5886)								 ::flixel::group::FlxTypedSpriteGroup fsg = ( ( ::flixel::group::FlxTypedSpriteGroup)(fsb->label) );
HXLINE(5887)								{
HXLINE(5887)									int _g = 0;
HXDLIN(5887)									::Array< ::Dynamic> _g1 = fsg->group->members;
HXDLIN(5887)									while((_g < _g1->length)){
HXLINE(5887)										 ::flixel::FlxSprite fs = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(5887)										_g = (_g + 1);
HXLINE(5889)										if (::Std_obj::isOfType(fs,::hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE(5891)											the_label = ( ( ::flixel::text::FlxText)(fs) );
HXLINE(5892)											goto _hx_goto_225;
            										}
            									}
            									_hx_goto_225:;
            								}
            							}
            						}
            					}
            				}
HXLINE(5898)				ifb->__SetField(HX_("up_color",3f,d5,b5,9b),color,::hx::paccDynamic);
HXLINE(5899)				ifb->__SetField(HX_("down_color",86,26,b3,4e),0,::hx::paccDynamic);
HXLINE(5900)				ifb->__SetField(HX_("over_color",f8,00,4a,f7),0,::hx::paccDynamic);
            			}
HXLINE(5903)			if (::hx::IsNotNull( the_label )) {
HXLINE(5905)				if ((labelWidth != 0)) {
HXLINE(5907)					the_label->set_width(labelWidth);
HXLINE(5908)					the_label->resetHelpers();
            				}
HXLINE(5911)				if (::hx::IsNotNull( fb )) {
HXLINE(5913)					fb->setLabelFormat(the_font,size,color,align,null(),null(),null());
            				}
            				else {
HXLINE(5917)					the_label->setFormat(the_font,size,color,align,null(),null(),null());
            				}
HXLINE(5920)				the_label->set_borderStyle(border->style);
HXLINE(5921)				the_label->set_borderColor(border->color);
HXLINE(5922)				the_label->set_borderSize(border->size);
HXLINE(5923)				the_label->set_borderQuality(border->quality);
HXLINE(5925)				if (::Std_obj::isOfType(the_label,::hx::ClassOf< ::flixel::addons::ui::FlxUIText >())) {
HXLINE(5927)					 ::flixel::addons::ui::FlxUIText ftu = ( ( ::flixel::addons::ui::FlxUIText)(the_label) );
HXLINE(5928)					ftu->drawFrame(null());
            				}
HXLINE(5931)				if (::hx::IsNotNull( fb )) {
HXLINE(5933)					fb->autoCenterLabel();
            				}
HXLINE(5935)				if (::hx::IsNotNull( fsb )) {
HXLINE(5937)					fsb->autoCenterLabel();
            				}
            			}
HXLINE(5941)			{
HXLINE(5941)				int _g = 0;
HXDLIN(5941)				::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(info,HX_("color",63,71,5c,4a));
HXDLIN(5941)				while((_g < _g1->length)){
HXLINE(5941)					 ::Xml textColorNode = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN(5941)					_g = (_g + 1);
HXLINE(5943)					int color = this->_loadColor(textColorNode,null(),null());
HXLINE(5944)					bool vis = ::flixel::addons::ui::U_obj::xml_bool(textColorNode,HX_("visible",72,78,24,a3),true);
HXLINE(5945)					::String state_name = ::flixel::addons::ui::U_obj::xml_name(textColorNode);
HXLINE(5946)					bool toggle = ::flixel::addons::ui::U_obj::xml_bool(textColorNode,HX_("toggle",94,bf,43,8f),null());
HXLINE(5947)					::String _hx_switch_0 = state_name;
            					if (  (_hx_switch_0==HX_("active",c6,41,46,16)) ||  (_hx_switch_0==HX_("hilight",35,b2,2d,55)) ||  (_hx_switch_0==HX_("hover",bc,e5,64,2b)) ||  (_hx_switch_0==HX_("over",54,91,b8,49)) ){
HXLINE(5961)						if (!(toggle)) {
HXLINE(5963)							ifb->__SetField(HX_("over_color",f8,00,4a,f7),color,::hx::paccDynamic);
HXLINE(5964)							ifb->__SetField(HX_("over_visible",47,d7,44,92),vis,::hx::paccDynamic);
            						}
            						else {
HXLINE(5968)							ifb->__SetField(HX_("over_toggle_color",43,1c,98,aa),color,::hx::paccDynamic);
HXLINE(5969)							ifb->__SetField(HX_("over_toggle_visible",52,9b,c8,49),vis,::hx::paccDynamic);
            						}
HXLINE(5961)						goto _hx_goto_227;
            					}
            					if (  (_hx_switch_0==HX_("down",62,f8,6d,42)) ||  (_hx_switch_0==HX_("pressed",a2,d2,e6,39)) ||  (_hx_switch_0==HX_("pushed",b9,14,2d,72)) ){
HXLINE(5972)						if (!(toggle)) {
HXLINE(5974)							ifb->__SetField(HX_("down_color",86,26,b3,4e),color,::hx::paccDynamic);
HXLINE(5975)							ifb->__SetField(HX_("down_visible",55,fc,6c,72),vis,::hx::paccDynamic);
            						}
            						else {
HXLINE(5979)							ifb->__SetField(HX_("down_toggle_color",75,e4,c8,06),color,::hx::paccDynamic);
HXLINE(5980)							ifb->__SetField(HX_("down_toggle_visible",04,54,e1,a9),vis,::hx::paccDynamic);
            						}
HXLINE(5972)						goto _hx_goto_227;
            					}
            					if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("inactive",6b,17,30,6a)) ||  (_hx_switch_0==HX_("normal",27,72,69,30)) ||  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE(5950)						if (!(toggle)) {
HXLINE(5952)							ifb->__SetField(HX_("up_color",3f,d5,b5,9b),color,::hx::paccDynamic);
HXLINE(5953)							ifb->__SetField(HX_("up_visible",4e,8b,83,08),vis,::hx::paccDynamic);
            						}
            						else {
HXLINE(5957)							ifb->__SetField(HX_("up_toggle_color",dc,6e,0c,dd),color,::hx::paccDynamic);
HXLINE(5958)							ifb->__SetField(HX_("up_toggle_visible",2b,86,e9,3f),vis,::hx::paccDynamic);
            						}
HXLINE(5950)						goto _hx_goto_227;
            					}
            					_hx_goto_227:;
            				}
            			}
HXLINE(5985)			if (::hx::IsEq( ifb->__Field(HX_("over_color",f8,00,4a,f7),::hx::paccDynamic),0 )) {
HXLINE(5987)				ifb->__SetField(HX_("over_color",f8,00,4a,f7),ifb->__Field(HX_("up_color",3f,d5,b5,9b),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(5989)			if (::hx::IsEq( ifb->__Field(HX_("down_color",86,26,b3,4e),::hx::paccDynamic),0 )) {
HXLINE(5991)				ifb->__SetField(HX_("down_color",86,26,b3,4e),ifb->__Field(HX_("over_color",f8,00,4a,f7),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(5995)			if (::hx::IsEq( ifb->__Field(HX_("up_toggle_color",dc,6e,0c,dd),::hx::paccDynamic),0 )) {
HXLINE(5997)				ifb->__SetField(HX_("up_toggle_color",dc,6e,0c,dd),ifb->__Field(HX_("up_color",3f,d5,b5,9b),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(5999)			if (::hx::IsEq( ifb->__Field(HX_("over_toggle_color",43,1c,98,aa),::hx::paccDynamic),0 )) {
HXLINE(6001)				ifb->__SetField(HX_("over_toggle_color",43,1c,98,aa),ifb->__Field(HX_("over_color",f8,00,4a,f7),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(6003)			if (::hx::IsEq( ifb->__Field(HX_("down_toggle_color",75,e4,c8,06),::hx::paccDynamic),0 )) {
HXLINE(6005)				ifb->__SetField(HX_("down_toggle_color",75,e4,c8,06),ifb->__Field(HX_("down_color",86,26,b3,4e),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(6008)			if (::hx::IsNotNull( the_label )) {
HXLINE(6010)				the_label->set_visible(( (bool)(ifb->__Field(HX_("up_visible",4e,8b,83,08),::hx::paccDynamic)) ));
HXLINE(6011)				the_label->set_color(( (int)(ifb->__Field(HX_("up_color",3f,d5,b5,9b),::hx::paccDynamic)) ));
            			}
HXLINE(6013)			return the_label;
            		}
HXLINE(6015)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,formatButtonText,return )

void FlxUI_obj::event(::String name,::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_159_event)
HXLINE( 160)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 162)		if (::hx::IsNotNull( currState )) {
HXLINE( 164)			::flixel::addons::ui::interfaces::IEventGetter_obj::getEvent(currState,name,sender,data,params);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxUI_obj,event,(void))

int FlxUI_obj::fontSize(::String str,int size){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_197_fontSize)
HXLINE( 198)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXDLIN( 198)		::Dynamic tongue =  ::Dynamic(currState->__Field(HX_("_tongue",63,57,5b,02),::hx::paccDynamic));
HXDLIN( 198)		::Dynamic t;
HXDLIN( 198)		if (::hx::IsNotNull( tongue )) {
HXLINE( 198)			t = tongue;
            		}
            		else {
HXLINE( 198)			t = null();
            		}
HXDLIN( 198)		::Dynamic t1 = t;
HXLINE( 199)		if (::hx::IsNotNull( t1 )) {
HXLINE( 201)			size = ::flixel::addons::ui::interfaces::IFireTongue_obj::getFontSize(t1,str,size);
            		}
HXLINE( 203)		return size;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,fontSize,return )

::String FlxUI_obj::font(::String str,::String __o_style,::String __o_extension){
            		::String style = __o_style;
            		if (::hx::IsNull(__o_style)) style = HX_("",00,00,00,00);
            		::String extension = __o_extension;
            		if (::hx::IsNull(__o_extension)) extension = HX_(".ttf",78,3b,c0,1e);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_215_font)
HXLINE( 216)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXDLIN( 216)		::Dynamic tongue =  ::Dynamic(currState->__Field(HX_("_tongue",63,57,5b,02),::hx::paccDynamic));
HXDLIN( 216)		::Dynamic t;
HXDLIN( 216)		if (::hx::IsNotNull( tongue )) {
HXLINE( 216)			t = tongue;
            		}
            		else {
HXLINE( 216)			t = null();
            		}
HXDLIN( 216)		::Dynamic t1 = t;
HXLINE( 217)		if (::hx::IsNotNull( t1 )) {
HXLINE( 219)			str = ::flixel::addons::ui::interfaces::IFireTongue_obj::getFont(t1,str);
            		}
HXLINE( 221)		return ::flixel::addons::ui::U_obj::font(str,style,extension);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,font,return )

void FlxUI_obj::forceFocus(bool b,::Dynamic thing){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_242_forceFocus)
HXLINE( 243)		::Dynamic currState = ::flixel::addons::ui::FlxUI_obj::getLeafUIState();
HXLINE( 244)		if (::hx::IsNotNull( currState )) {
HXLINE( 246)			::flixel::addons::ui::interfaces::IFlxUIState_obj::forceFocus(currState,b,thing);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,forceFocus,(void))

::Dynamic FlxUI_obj::getLeafUIState(){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_255_getLeafUIState)
HXLINE( 256)		 ::flixel::FlxState state = ::flixel::FlxG_obj::game->_state;
HXLINE( 257)		if (::hx::IsNotNull( state )) {
HXLINE( 259)			while(::hx::IsNotNull( state->subState )){
HXLINE( 261)				state = state->subState;
            			}
            		}
HXLINE( 264)		if (::Std_obj::isOfType(state,::hx::ClassOf< ::flixel::addons::ui::interfaces::IFlxUIState >())) {
HXLINE( 266)			return state;
            		}
HXLINE( 268)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxUI_obj,getLeafUIState,return )

 ::Xml FlxUI_obj::consolidateData( ::Xml data, ::Xml definition,::hx::Null< bool >  __o_combineUniqueChildren){
            		bool combineUniqueChildren = __o_combineUniqueChildren.Default(false);
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_3001_consolidateData)
HXLINE(3002)		bool _hx_tmp;
HXDLIN(3002)		if (::hx::IsNull( data )) {
HXLINE(3002)			_hx_tmp = ::hx::IsNotNull( definition );
            		}
            		else {
HXLINE(3002)			_hx_tmp = false;
            		}
HXDLIN(3002)		if (_hx_tmp) {
HXLINE(3004)			return definition;
            		}
HXLINE(3006)		if (::hx::IsNull( definition )) {
HXLINE(3008)			return data;
            		}
            		else {
HXLINE(3015)			 ::Xml new_data = ::Xml_obj::parse(::haxe::xml::Printer_obj::print(definition,null()))->firstElement();
HXLINE(3017)			{
HXLINE(3017)				 ::Dynamic att = data->attributes();
HXDLIN(3017)				while(( (bool)(att->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(3017)					::String att1 = ( (::String)(att->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(3019)					::String val = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(data,att1);
HXLINE(3020)					new_data->set(att1,val);
            				}
            			}
HXLINE(3024)			{
HXLINE(3024)				::String v;
HXDLIN(3024)				if ((data->nodeType == ::Xml_obj::Document)) {
HXLINE(3024)					v = HX_("Document",3b,ab,c4,74);
            				}
            				else {
HXLINE(3024)					if ((data->nodeType != ::Xml_obj::Element)) {
HXLINE(3024)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(data->nodeType))));
            					}
HXDLIN(3024)					v = data->nodeName;
            				}
HXDLIN(3024)				if ((new_data->nodeType != ::Xml_obj::Element)) {
HXLINE(3024)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(new_data->nodeType))));
            				}
HXDLIN(3024)				new_data->nodeName = v;
            			}
HXLINE(3025)			bool _hx_tmp;
HXDLIN(3025)			if (!(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(data,HX_("name",4b,72,ff,48)))) {
HXLINE(3025)				_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(data,HX_("id",db,5b,00,00));
            			}
            			else {
HXLINE(3025)				_hx_tmp = true;
            			}
HXDLIN(3025)			if (_hx_tmp) {
HXLINE(3027)				new_data->set(HX_("name",4b,72,ff,48),::flixel::addons::ui::U_obj::xml_name(data));
            			}
            			else {
HXLINE(3031)				new_data->set(HX_("name",4b,72,ff,48),HX_("",00,00,00,00));
            			}
HXLINE(3034)			{
HXLINE(3034)				 ::Dynamic element = data->elements();
HXDLIN(3034)				while(( (bool)(element->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(3034)					 ::Xml element1 = ( ( ::Xml)(element->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(3036)					if ((element1->nodeType != ::Xml_obj::Element)) {
HXLINE(3036)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(element1->nodeType))));
            					}
HXDLIN(3036)					::String nodeName = element1->nodeName;
HXLINE(3037)					bool notCombine = !(combineUniqueChildren);
HXLINE(3038)					if (combineUniqueChildren) {
HXLINE(3040)						 ::Dynamic new_els = new_data->elementsNamed(nodeName);
HXLINE(3041)						 ::Xml new_el = ( ( ::Xml)(new_els->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(3044)						bool _hx_tmp;
HXDLIN(3044)						bool _hx_tmp1;
HXDLIN(3044)						if ((::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,nodeName)->length == 1)) {
HXLINE(3044)							_hx_tmp1 = ::hx::IsNotNull( new_el );
            						}
            						else {
HXLINE(3044)							_hx_tmp1 = false;
            						}
HXDLIN(3044)						if (_hx_tmp1) {
HXLINE(3044)							_hx_tmp = ::hx::IsEq( new_els->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)(),false );
            						}
            						else {
HXLINE(3044)							_hx_tmp = false;
            						}
HXDLIN(3044)						if (_hx_tmp) {
HXLINE(3047)							 ::Dynamic att = element1->attributes();
HXDLIN(3047)							while(( (bool)(att->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(3047)								::String att1 = ( (::String)(att->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(3049)								new_el->set(att1,element1->get(att1));
            							}
            						}
            						else {
HXLINE(3054)							notCombine = true;
            						}
            					}
HXLINE(3058)					if (notCombine) {
HXLINE(3060)						new_data->insertChild(::Xml_obj::parse(::haxe::xml::Printer_obj::print(element1,null()))->firstElement(),0);
            					}
            				}
            			}
HXLINE(3063)			bool _hx_tmp1;
HXDLIN(3063)			if ((new_data->nodeType != ::Xml_obj::Document)) {
HXLINE(3063)				_hx_tmp1 = (new_data->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(3063)				_hx_tmp1 = false;
            			}
HXDLIN(3063)			if (_hx_tmp1) {
HXLINE(3063)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(new_data->nodeType))));
            			}
HXDLIN(3063)			 ::Xml this1 = new_data;
HXDLIN(3063)			return this1;
            		}
HXLINE(3006)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxUI_obj,consolidateData,return )

int FlxUI_obj::sortParams( ::Dynamic a, ::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_4aef2a6d9057251f_5813_sortParams)
HXLINE(5814)		if (::hx::IsLess( a->__Field(HX_("sort",5e,27,58,4c),::hx::paccDynamic),b->__Field(HX_("sort",5e,27,58,4c),::hx::paccDynamic) )) {
HXLINE(5815)			return -1;
            		}
HXLINE(5816)		if (::hx::IsGreater( a->__Field(HX_("sort",5e,27,58,4c),::hx::paccDynamic),b->__Field(HX_("sort",5e,27,58,4c),::hx::paccDynamic) )) {
HXLINE(5817)			return 1;
            		}
HXLINE(5818)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUI_obj,sortParams,return )


::hx::ObjectPtr< FlxUI_obj > FlxUI_obj::__new( ::Xml data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_, ::haxe::ds::StringMap uiVars_) {
	::hx::ObjectPtr< FlxUI_obj > __this = new FlxUI_obj();
	__this->__construct(data,ptr,superIndex_,tongue_,__o_liveFilePath_,uiVars_);
	return __this;
}

::hx::ObjectPtr< FlxUI_obj > FlxUI_obj::__alloc(::hx::Ctx *_hx_ctx, ::Xml data,::Dynamic ptr, ::flixel::addons::ui::FlxUI superIndex_,::Dynamic tongue_,::String __o_liveFilePath_, ::haxe::ds::StringMap uiVars_) {
	FlxUI_obj *__this = (FlxUI_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxUI_obj), true, "flixel.addons.ui.FlxUI"));
	*(void **)__this = FlxUI_obj::_hx_vtable;
	__this->__construct(data,ptr,superIndex_,tongue_,__o_liveFilePath_,uiVars_);
	return __this;
}

FlxUI_obj::FlxUI_obj()
{
}

void FlxUI_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUI);
	HX_MARK_MEMBER_NAME(do_safe_input_delay,"do_safe_input_delay");
	HX_MARK_MEMBER_NAME(safe_input_delay_time,"safe_input_delay_time");
	HX_MARK_MEMBER_NAME(failed,"failed");
	HX_MARK_MEMBER_NAME(failed_by,"failed_by");
	HX_MARK_MEMBER_NAME(liveFilePath,"liveFilePath");
	HX_MARK_MEMBER_NAME(focus,"focus");
	HX_MARK_MEMBER_NAME(getTextFallback,"getTextFallback");
	HX_MARK_MEMBER_NAME(cursorLists,"cursorLists");
	HX_MARK_MEMBER_NAME(_ptr_tongue,"_ptr_tongue");
	HX_MARK_MEMBER_NAME(_data,"_data");
	HX_MARK_MEMBER_NAME(_postLoaded,"_postLoaded");
	HX_MARK_MEMBER_NAME(_pointX,"_pointX");
	HX_MARK_MEMBER_NAME(_pointY,"_pointY");
	HX_MARK_MEMBER_NAME(_group_index,"_group_index");
	HX_MARK_MEMBER_NAME(_asset_index,"_asset_index");
	HX_MARK_MEMBER_NAME(_tag_index,"_tag_index");
	HX_MARK_MEMBER_NAME(_definition_index,"_definition_index");
	HX_MARK_MEMBER_NAME(_variable_index,"_variable_index");
	HX_MARK_MEMBER_NAME(_mode_index,"_mode_index");
	HX_MARK_MEMBER_NAME(_curr_mode,"_curr_mode");
	HX_MARK_MEMBER_NAME(_ptr,"_ptr");
	HX_MARK_MEMBER_NAME(_superIndexUI,"_superIndexUI");
	HX_MARK_MEMBER_NAME(_safe_input_delay_elapsed,"_safe_input_delay_elapsed");
	HX_MARK_MEMBER_NAME(_failure_checks,"_failure_checks");
	HX_MARK_MEMBER_NAME(_assetsToCleanUp,"_assetsToCleanUp");
	HX_MARK_MEMBER_NAME(_scaledAssets,"_scaledAssets");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUI_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(do_safe_input_delay,"do_safe_input_delay");
	HX_VISIT_MEMBER_NAME(safe_input_delay_time,"safe_input_delay_time");
	HX_VISIT_MEMBER_NAME(failed,"failed");
	HX_VISIT_MEMBER_NAME(failed_by,"failed_by");
	HX_VISIT_MEMBER_NAME(liveFilePath,"liveFilePath");
	HX_VISIT_MEMBER_NAME(focus,"focus");
	HX_VISIT_MEMBER_NAME(getTextFallback,"getTextFallback");
	HX_VISIT_MEMBER_NAME(cursorLists,"cursorLists");
	HX_VISIT_MEMBER_NAME(_ptr_tongue,"_ptr_tongue");
	HX_VISIT_MEMBER_NAME(_data,"_data");
	HX_VISIT_MEMBER_NAME(_postLoaded,"_postLoaded");
	HX_VISIT_MEMBER_NAME(_pointX,"_pointX");
	HX_VISIT_MEMBER_NAME(_pointY,"_pointY");
	HX_VISIT_MEMBER_NAME(_group_index,"_group_index");
	HX_VISIT_MEMBER_NAME(_asset_index,"_asset_index");
	HX_VISIT_MEMBER_NAME(_tag_index,"_tag_index");
	HX_VISIT_MEMBER_NAME(_definition_index,"_definition_index");
	HX_VISIT_MEMBER_NAME(_variable_index,"_variable_index");
	HX_VISIT_MEMBER_NAME(_mode_index,"_mode_index");
	HX_VISIT_MEMBER_NAME(_curr_mode,"_curr_mode");
	HX_VISIT_MEMBER_NAME(_ptr,"_ptr");
	HX_VISIT_MEMBER_NAME(_superIndexUI,"_superIndexUI");
	HX_VISIT_MEMBER_NAME(_safe_input_delay_elapsed,"_safe_input_delay_elapsed");
	HX_VISIT_MEMBER_NAME(_failure_checks,"_failure_checks");
	HX_VISIT_MEMBER_NAME(_assetsToCleanUp,"_assetsToCleanUp");
	HX_VISIT_MEMBER_NAME(_scaledAssets,"_scaledAssets");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxUI_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return ::hx::Val( load_dyn() ); }
		if (HX_FIELD_EQ(inName,"_ptr") ) { return ::hx::Val( _ptr ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"focus") ) { return ::hx::Val( focus ); }
		if (HX_FIELD_EQ(inName,"_data") ) { return ::hx::Val( _data ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"failed") ) { return ::hx::Val( failed ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onFocus") ) { return ::hx::Val( onFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"_sendTo") ) { return ::hx::Val( _sendTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMode") ) { return ::hx::Val( setMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMode") ) { return ::hx::Val( getMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"_pointX") ) { return ::hx::Val( _pointX ); }
		if (HX_FIELD_EQ(inName,"_pointY") ) { return ::hx::Val( _pointY ); }
		if (HX_FIELD_EQ(inName,"cleanup") ) { return ::hx::Val( cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"doRound") ) { return ::hx::Val( doRound_dyn() ); }
		if (HX_FIELD_EQ(inName,"getText") ) { return ::hx::Val( getText_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"addAsset") ) { return ::hx::Val( addAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadSub") ) { return ::hx::Val( _loadSub_dyn() ); }
		if (HX_FIELD_EQ(inName,"_addTags") ) { return ::hx::Val( _addTags_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGroup") ) { return ::hx::Val( getGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasAsset") ) { return ::hx::Val( hasAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAsset") ) { return ::hx::Val( getAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"_doAlign") ) { return ::hx::Val( _doAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"createUI") ) { return ::hx::Val( createUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadBox") ) { return ::hx::Val( _loadBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadBar") ) { return ::hx::Val( _loadBar_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRound") ) { return ::hx::Val( getRound_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"failed_by") ) { return ::hx::Val( failed_by ); }
		if (HX_FIELD_EQ(inName,"set_focus") ) { return ::hx::Val( set_focus_dyn() ); }
		if (HX_FIELD_EQ(inName,"_postLoad") ) { return ::hx::Val( _postLoad_dyn() ); }
		if (HX_FIELD_EQ(inName,"showThing") ) { return ::hx::Val( showThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadText") ) { return ::hx::Val( _loadText_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTest") ) { return ::hx::Val( _loadTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadLine") ) { return ::hx::Val( _loadLine_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getRequest") ) { return ::hx::Val( getRequest_dyn() ); }
		if (HX_FIELD_EQ(inName,"_tag_index") ) { return ::hx::Val( _tag_index ); }
		if (HX_FIELD_EQ(inName,"_curr_mode") ) { return ::hx::Val( _curr_mode ); }
		if (HX_FIELD_EQ(inName,"_loadThing") ) { return ::hx::Val( _loadThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadScale") ) { return ::hx::Val( _loadScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadWidth") ) { return ::hx::Val( _loadWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadSmooth") ) { return ::hx::Val( loadSmooth_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadColor") ) { return ::hx::Val( _loadColor_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cursorLists") ) { return ::hx::Val( cursorLists ); }
		if (HX_FIELD_EQ(inName,"_ptr_tongue") ) { return ::hx::Val( _ptr_tongue ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return ::hx::Val( onFocusLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"unparentXML") ) { return ::hx::Val( unparentXML_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVariable") ) { return ::hx::Val( setVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVariable") ) { return ::hx::Val( getVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"screenWidth") ) { return ::hx::Val( screenWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"_postLoaded") ) { return ::hx::Val( _postLoaded ); }
		if (HX_FIELD_EQ(inName,"_mode_index") ) { return ::hx::Val( _mode_index ); }
		if (HX_FIELD_EQ(inName,"_loadAnchor") ) { return ::hx::Val( _loadAnchor_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadScaleX") ) { return ::hx::Val( _loadScaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadScaleY") ) { return ::hx::Val( _loadScaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadHeight") ) { return ::hx::Val( _loadHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_alignThing") ) { return ::hx::Val( _alignThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadString") ) { return ::hx::Val( _loadString_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadLayout") ) { return ::hx::Val( _loadLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadButton") ) { return ::hx::Val( _loadButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadRegion") ) { return ::hx::Val( _loadRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadSprite") ) { return ::hx::Val( _loadSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getStretch") ) { return ::hx::Val( _getStretch_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadCursor") ) { return ::hx::Val( _loadCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadBorder") ) { return ::hx::Val( _loadBorder_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"liveFilePath") ) { return ::hx::Val( liveFilePath ); }
		if (HX_FIELD_EQ(inName,"_loadGlobals") ) { return ::hx::Val( _loadGlobals_dyn() ); }
		if (HX_FIELD_EQ(inName,"screenHeight") ) { return ::hx::Val( screenHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_group_index") ) { return ::hx::Val( _group_index ); }
		if (HX_FIELD_EQ(inName,"_asset_index") ) { return ::hx::Val( _asset_index ); }
		if (HX_FIELD_EQ(inName,"_loadTooltip") ) { return ::hx::Val( _loadTooltip_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadCompass") ) { return ::hx::Val( _loadCompass_dyn() ); }
		if (HX_FIELD_EQ(inName,"_changeThing") ) { return ::hx::Val( _changeThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_resizeThing") ) { return ::hx::Val( _resizeThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTestSub") ) { return ::hx::Val( _loadTestSub_dyn() ); }
		if (HX_FIELD_EQ(inName,"addToCleanup") ) { return ::hx::Val( addToCleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTabMenu") ) { return ::hx::Val( _loadTabMenu_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getDataSize") ) { return ::hx::Val( _getDataSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"_doOperation") ) { return ::hx::Val( _doOperation_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadFontDef") ) { return ::hx::Val( _loadFontDef_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setSuperIndex") ) { return ::hx::Val( setSuperIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAssetGroup") ) { return ::hx::Val( getAssetGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkVariable") ) { return ::hx::Val( checkVariable_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDefinition") ) { return ::hx::Val( getDefinition_dyn() ); }
		if (HX_FIELD_EQ(inName,"_superIndexUI") ) { return ::hx::Val( _superIndexUI ); }
		if (HX_FIELD_EQ(inName,"_scaledAssets") ) { return ::hx::Val( _scaledAssets ); }
		if (HX_FIELD_EQ(inName,"_checkFailure") ) { return ::hx::Val( _checkFailure_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTileTest") ) { return ::hx::Val( _loadTileTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadCheckBox") ) { return ::hx::Val( _loadCheckBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseVarValue") ) { return ::hx::Val( parseVarValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadScaledSrc") ) { return ::hx::Val( loadScaledSrc_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getAnchorPos") ) { return ::hx::Val( _getAnchorPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"_getOperation") ) { return ::hx::Val( _getOperation_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadPosition") ) { return ::hx::Val( _loadPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadFontFace") ) { return ::hx::Val( _loadFontFace_dyn() ); }
		if (HX_FIELD_EQ(inName,"_onFinishLoad") ) { return ::hx::Val( _onFinishLoad_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_loadPointSize") ) { return ::hx::Val( _loadPointSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"_postLoadThing") ) { return ::hx::Val( _postLoadThing_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadInputText") ) { return ::hx::Val( _loadInputText_dyn() ); }
		if (HX_FIELD_EQ(inName,"getResizeRatio") ) { return ::hx::Val( getResizeRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"calcMaxMinSize") ) { return ::hx::Val( calcMaxMinSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"formatFromCode") ) { return ::hx::Val( formatFromCode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getTextFallback") ) { return ::hx::Val( getTextFallback ); }
		if (HX_FIELD_EQ(inName,"_variable_index") ) { return ::hx::Val( _variable_index ); }
		if (HX_FIELD_EQ(inName,"_failure_checks") ) { return ::hx::Val( _failure_checks ); }
		if (HX_FIELD_EQ(inName,"_loadRadioGroup") ) { return ::hx::Val( _loadRadioGroup_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_assetsToCleanUp") ) { return ::hx::Val( _assetsToCleanUp ); }
		if (HX_FIELD_EQ(inName,"applyNodeChanges") ) { return ::hx::Val( applyNodeChanges_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTooltipData") ) { return ::hx::Val( _loadTooltipData_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTooltipText") ) { return ::hx::Val( _loadTooltipText_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAssetProperty") ) { return ::hx::Val( getAssetProperty_dyn() ); }
		if (HX_FIELD_EQ(inName,"formatButtonText") ) { return ::hx::Val( formatButtonText_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_definition_index") ) { return ::hx::Val( _definition_index ); }
		if (HX_FIELD_EQ(inName,"_loadThingGetInfo") ) { return ::hx::Val( _loadThingGetInfo_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadTooltipStyle") ) { return ::hx::Val( _loadTooltipStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"_loadDropDownMenu") ) { return ::hx::Val( _loadDropDownMenu_dyn() ); }
		if (HX_FIELD_EQ(inName,"addToScaledAssets") ) { return ::hx::Val( addToScaledAssets_dyn() ); }
		if (HX_FIELD_EQ(inName,"_load9SliceSprite") ) { return ::hx::Val( _load9SliceSprite_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"do_safe_input_delay") ) { return ::hx::Val( do_safe_input_delay ); }
		if (HX_FIELD_EQ(inName,"_loadNumericStepper") ) { return ::hx::Val( _loadNumericStepper_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"setWidgetSuppression") ) { return ::hx::Val( setWidgetSuppression_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"safe_input_delay_time") ) { return ::hx::Val( safe_input_delay_time ); }
		if (HX_FIELD_EQ(inName,"applyNodeConditionals") ) { return ::hx::Val( applyNodeConditionals_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_safe_input_delay_elapsed") ) { return ::hx::Val( _safe_input_delay_elapsed ); }
		if (HX_FIELD_EQ(inName,"load9SliceSprite_scaleSub") ) { return ::hx::Val( load9SliceSprite_scaleSub_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxUI_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { outValue = font_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"event") ) { outValue = event_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fontSize") ) { outValue = fontSize_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"forceFocus") ) { outValue = forceFocus_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sortParams") ) { outValue = sortParams_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getLeafUIState") ) { outValue = getLeafUIState_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"consolidateData") ) { outValue = consolidateData_dyn(); return true; }
	}
	return false;
}

::hx::Val FlxUI_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_ptr") ) { _ptr=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_focus(inValue.Cast< ::Dynamic >()) );focus=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_data") ) { _data=inValue.Cast<  ::Xml >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"failed") ) { failed=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_pointX") ) { _pointX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pointY") ) { _pointY=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"failed_by") ) { failed_by=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_tag_index") ) { _tag_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_curr_mode") ) { _curr_mode=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cursorLists") ) { cursorLists=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ptr_tongue") ) { _ptr_tongue=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_postLoaded") ) { _postLoaded=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mode_index") ) { _mode_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"liveFilePath") ) { liveFilePath=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_group_index") ) { _group_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_asset_index") ) { _asset_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_superIndexUI") ) { _superIndexUI=inValue.Cast<  ::flixel::addons::ui::FlxUI >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scaledAssets") ) { _scaledAssets=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getTextFallback") ) { getTextFallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_variable_index") ) { _variable_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_failure_checks") ) { _failure_checks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_assetsToCleanUp") ) { _assetsToCleanUp=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_definition_index") ) { _definition_index=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"do_safe_input_delay") ) { do_safe_input_delay=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"safe_input_delay_time") ) { safe_input_delay_time=inValue.Cast< Float >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_safe_input_delay_elapsed") ) { _safe_input_delay_elapsed=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUI_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("do_safe_input_delay",90,5b,9d,88));
	outFields->push(HX_("safe_input_delay_time",50,71,b0,f4));
	outFields->push(HX_("failed",bd,c5,fe,e7));
	outFields->push(HX_("failed_by",59,1a,00,5f));
	outFields->push(HX_("liveFilePath",4d,75,d5,b0));
	outFields->push(HX_("focus",d8,5f,89,04));
	outFields->push(HX_("cursorLists",9f,0f,e7,fd));
	outFields->push(HX_("_ptr_tongue",54,fc,53,03));
	outFields->push(HX_("_data",09,72,74,f5));
	outFields->push(HX_("_postLoaded",a4,95,31,80));
	outFields->push(HX_("_pointX",a7,23,a5,65));
	outFields->push(HX_("_pointY",a8,23,a5,65));
	outFields->push(HX_("_group_index",d3,bc,ca,66));
	outFields->push(HX_("_asset_index",44,0e,d3,80));
	outFields->push(HX_("_tag_index",ee,f7,41,12));
	outFields->push(HX_("_definition_index",85,96,e5,82));
	outFields->push(HX_("_variable_index",2e,92,8a,75));
	outFields->push(HX_("_mode_index",15,af,93,a2));
	outFields->push(HX_("_curr_mode",d1,32,bc,27));
	outFields->push(HX_("_ptr",ef,a6,20,3f));
	outFields->push(HX_("_superIndexUI",8a,fc,6d,d1));
	outFields->push(HX_("_safe_input_delay_elapsed",38,44,1a,3b));
	outFields->push(HX_("_failure_checks",df,fd,ae,28));
	outFields->push(HX_("_assetsToCleanUp",87,59,f7,5a));
	outFields->push(HX_("_scaledAssets",9c,29,61,6b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxUI_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FlxUI_obj,do_safe_input_delay),HX_("do_safe_input_delay",90,5b,9d,88)},
	{::hx::fsFloat,(int)offsetof(FlxUI_obj,safe_input_delay_time),HX_("safe_input_delay_time",50,71,b0,f4)},
	{::hx::fsBool,(int)offsetof(FlxUI_obj,failed),HX_("failed",bd,c5,fe,e7)},
	{::hx::fsFloat,(int)offsetof(FlxUI_obj,failed_by),HX_("failed_by",59,1a,00,5f)},
	{::hx::fsString,(int)offsetof(FlxUI_obj,liveFilePath),HX_("liveFilePath",4d,75,d5,b0)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(FlxUI_obj,focus),HX_("focus",d8,5f,89,04)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxUI_obj,getTextFallback),HX_("getTextFallback",a5,c3,03,82)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxUI_obj,cursorLists),HX_("cursorLists",9f,0f,e7,fd)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(FlxUI_obj,_ptr_tongue),HX_("_ptr_tongue",54,fc,53,03)},
	{::hx::fsObject /*  ::Xml */ ,(int)offsetof(FlxUI_obj,_data),HX_("_data",09,72,74,f5)},
	{::hx::fsBool,(int)offsetof(FlxUI_obj,_postLoaded),HX_("_postLoaded",a4,95,31,80)},
	{::hx::fsFloat,(int)offsetof(FlxUI_obj,_pointX),HX_("_pointX",a7,23,a5,65)},
	{::hx::fsFloat,(int)offsetof(FlxUI_obj,_pointY),HX_("_pointY",a8,23,a5,65)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_group_index),HX_("_group_index",d3,bc,ca,66)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_asset_index),HX_("_asset_index",44,0e,d3,80)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_tag_index),HX_("_tag_index",ee,f7,41,12)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_definition_index),HX_("_definition_index",85,96,e5,82)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_variable_index),HX_("_variable_index",2e,92,8a,75)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxUI_obj,_mode_index),HX_("_mode_index",15,af,93,a2)},
	{::hx::fsString,(int)offsetof(FlxUI_obj,_curr_mode),HX_("_curr_mode",d1,32,bc,27)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(FlxUI_obj,_ptr),HX_("_ptr",ef,a6,20,3f)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUI */ ,(int)offsetof(FlxUI_obj,_superIndexUI),HX_("_superIndexUI",8a,fc,6d,d1)},
	{::hx::fsFloat,(int)offsetof(FlxUI_obj,_safe_input_delay_elapsed),HX_("_safe_input_delay_elapsed",38,44,1a,3b)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxUI_obj,_failure_checks),HX_("_failure_checks",df,fd,ae,28)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(FlxUI_obj,_assetsToCleanUp),HX_("_assetsToCleanUp",87,59,f7,5a)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(FlxUI_obj,_scaledAssets),HX_("_scaledAssets",9c,29,61,6b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxUI_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxUI_obj_sMemberFields[] = {
	HX_("do_safe_input_delay",90,5b,9d,88),
	HX_("safe_input_delay_time",50,71,b0,f4),
	HX_("failed",bd,c5,fe,e7),
	HX_("failed_by",59,1a,00,5f),
	HX_("liveFilePath",4d,75,d5,b0),
	HX_("focus",d8,5f,89,04),
	HX_("set_focus",3b,a8,83,2b),
	HX_("getTextFallback",a5,c3,03,82),
	HX_("cursorLists",9f,0f,e7,fd),
	HX_("_ptr_tongue",54,fc,53,03),
	HX_("_data",09,72,74,f5),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("getRequest",59,65,e6,93),
	HX_("onFocus",39,fe,c6,9a),
	HX_("setWidgetSuppression",4d,9a,d2,bf),
	HX_("onFocusLost",bd,e4,85,41),
	HX_("setSuperIndex",d9,09,3c,bf),
	HX_("update",09,86,05,87),
	HX_("addAsset",0f,90,96,9f),
	HX_("destroy",fa,2c,86,24),
	HX_("load",26,9a,b7,47),
	HX_("unparentXML",54,a1,ff,04),
	HX_("_loadPointSize",6c,aa,6c,e2),
	HX_("_loadSub",7b,7c,9a,42),
	HX_("_addTags",1b,51,ec,c2),
	HX_("_loadGlobals",2b,72,e0,4a),
	HX_("_postLoad",05,f2,8c,4d),
	HX_("_sendTo",82,ca,fb,d9),
	HX_("setMode",25,14,e5,0d),
	HX_("showThing",b1,ed,ed,3d),
	HX_("getGroup",c9,c2,cb,f9),
	HX_("hasAsset",36,b4,91,b2),
	HX_("getAsset",7a,79,10,86),
	HX_("getAssetGroup",65,0f,45,a3),
	HX_("getMode",19,83,e3,1a),
	HX_("checkVariable",24,6f,67,51),
	HX_("setVariable",fe,db,6d,99),
	HX_("getVariable",f2,d4,00,8f),
	HX_("getDefinition",c9,31,80,48),
	HX_("screenWidth",fa,02,e8,81),
	HX_("screenHeight",73,10,6a,df),
	HX_("_postLoaded",a4,95,31,80),
	HX_("_pointX",a7,23,a5,65),
	HX_("_pointY",a8,23,a5,65),
	HX_("_group_index",d3,bc,ca,66),
	HX_("_asset_index",44,0e,d3,80),
	HX_("_tag_index",ee,f7,41,12),
	HX_("_definition_index",85,96,e5,82),
	HX_("_variable_index",2e,92,8a,75),
	HX_("_mode_index",15,af,93,a2),
	HX_("_curr_mode",d1,32,bc,27),
	HX_("_ptr",ef,a6,20,3f),
	HX_("_superIndexUI",8a,fc,6d,d1),
	HX_("_safe_input_delay_elapsed",38,44,1a,3b),
	HX_("_failure_checks",df,fd,ae,28),
	HX_("_assetsToCleanUp",87,59,f7,5a),
	HX_("_scaledAssets",9c,29,61,6b),
	HX_("applyNodeConditionals",1d,b1,ba,ec),
	HX_("applyNodeChanges",53,40,3a,89),
	HX_("_loadThingGetInfo",7b,f7,10,95),
	HX_("_loadTooltip",7e,19,34,a1),
	HX_("_loadTooltipData",c8,32,6e,09),
	HX_("_loadTooltipStyle",d3,d2,93,e6),
	HX_("_loadTooltipText",4b,a9,04,14),
	HX_("_loadAnchor",5a,36,26,e8),
	HX_("_loadThing",a9,4f,63,86),
	HX_("_loadScale",45,96,a8,ef),
	HX_("_loadScaleX",73,e6,da,c3),
	HX_("_loadScaleY",74,e6,da,c3),
	HX_("_loadWidth",c1,7d,3c,41),
	HX_("_loadHeight",cc,03,01,8a),
	HX_("_loadCompass",0d,86,10,ba),
	HX_("_changeThing",5f,de,58,9b),
	HX_("_alignThing",08,c4,65,7b),
	HX_("_doAlign",bb,90,76,8e),
	HX_("_checkFailure",41,bb,ef,e6),
	HX_("_resizeThing",5b,b7,96,b4),
	HX_("_postLoadThing",a9,93,c5,16),
	HX_("_loadTileTest",c5,6d,d7,22),
	HX_("_loadString",b6,24,e5,98),
	HX_("_loadText",52,95,2f,05),
	HX_("_loadInputText",12,4b,dc,d4),
	HX_("_loadRadioGroup",a9,f6,74,63),
	HX_("_loadCheckBox",48,09,b5,48),
	HX_("_loadDropDownMenu",15,f4,83,17),
	HX_("_loadTest",f7,90,2f,05),
	HX_("_loadTestSub",c9,84,6d,f4),
	HX_("parseVarValue",5d,e2,a6,bd),
	HX_("_loadLayout",8f,aa,6d,e0),
	HX_("addToCleanup",88,65,2a,da),
	HX_("addToScaledAssets",d9,b2,d7,0f),
	HX_("cleanup",24,0c,42,ab),
	HX_("createUI",50,68,f4,2b),
	HX_("_loadTabMenu",0f,87,76,77),
	HX_("_loadNumericStepper",a9,d6,b0,b0),
	HX_("getResizeRatio",81,09,c6,aa),
	HX_("_loadButton",d7,5d,95,61),
	HX_("_loadRegion",d9,bc,41,88),
	HX_("_load9SliceSprite",c3,47,93,cb),
	HX_("load9SliceSprite_scaleSub",91,16,9e,f3),
	HX_("_loadBox",06,91,8d,42),
	HX_("_loadLine",99,e0,e8,ff),
	HX_("_loadBar",ce,84,8d,42),
	HX_("_loadSprite",ea,d7,4a,4b),
	HX_("loadSmooth",f4,36,96,bc),
	HX_("loadScaledSrc",64,61,58,bd),
	HX_("_getAnchorPos",88,41,e7,51),
	HX_("getRound",d8,07,3d,4d),
	HX_("doRound",c3,d8,92,20),
	HX_("calcMaxMinSize",24,12,ef,e7),
	HX_("_getDataSize",c2,f0,c4,17),
	HX_("_getOperation",90,b3,05,92),
	HX_("_doOperation",1d,f1,48,5f),
	HX_("_getStretch",2e,91,3e,18),
	HX_("getAssetProperty",ef,87,a7,3d),
	HX_("_loadCursor",bb,8a,9d,c6),
	HX_("_loadPosition",ce,1f,d2,66),
	HX_("_loadBorder",d1,48,cf,eb),
	HX_("_loadColor",1e,39,36,c1),
	HX_("_loadFontDef",b1,4b,c6,cc),
	HX_("_loadFontFace",31,51,0b,62),
	HX_("_onFinishLoad",f7,60,a4,8e),
	HX_("getText",63,7c,7c,1f),
	HX_("formatFromCode",0e,5a,55,e0),
	HX_("formatButtonText",d6,99,61,56),
	::String(null()) };

::hx::Class FlxUI_obj::__mClass;

static ::String FlxUI_obj_sStaticFields[] = {
	HX_("event",1a,c8,c4,75),
	HX_("fontSize",30,be,d1,ce),
	HX_("font",cf,5d,c0,43),
	HX_("forceFocus",ed,49,5e,9b),
	HX_("getLeafUIState",49,ca,4d,90),
	HX_("consolidateData",d3,c5,7a,dc),
	HX_("sortParams",44,71,60,4a),
	::String(null())
};

void FlxUI_obj::__register()
{
	FlxUI_obj _hx_dummy;
	FlxUI_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.ui.FlxUI",55,08,11,e9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxUI_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxUI_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxUI_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxUI_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUI_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUI_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
