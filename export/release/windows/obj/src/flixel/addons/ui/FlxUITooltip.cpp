// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_Anchor
#include <flixel/addons/ui/Anchor.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_AnchorPoint
#include <flixel/addons/ui/AnchorPoint.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_BorderDef
#include <flixel/addons/ui/BorderDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITooltip
#include <flixel/addons/ui/FlxUITooltip.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FontDef
#include <flixel/addons/ui/FontDef.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7b5caaba09e0a704_28_new,"flixel.addons.ui.FlxUITooltip","new",0x7e948120,"flixel.addons.ui.FlxUITooltip.new","flixel/addons/ui/FlxUITooltip.hx",28,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_44_show,"flixel.addons.ui.FlxUITooltip","show",0x46accc3d,"flixel.addons.ui.FlxUITooltip.show","flixel/addons/ui/FlxUITooltip.hx",44,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_229_get_height,"flixel.addons.ui.FlxUITooltip","get_height",0x50de5ef0,"flixel.addons.ui.FlxUITooltip.get_height","flixel/addons/ui/FlxUITooltip.hx",229,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_260_hide,"flixel.addons.ui.FlxUITooltip","hide",0x3f682c02,"flixel.addons.ui.FlxUITooltip.hide","flixel/addons/ui/FlxUITooltip.hx",260,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_267_set_anchor,"flixel.addons.ui.FlxUITooltip","set_anchor",0xb2812ff2,"flixel.addons.ui.FlxUITooltip.set_anchor","flixel/addons/ui/FlxUITooltip.hx",267,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_278_set_style,"flixel.addons.ui.FlxUITooltip","set_style",0x4b15ae54,"flixel.addons.ui.FlxUITooltip.set_style","flixel/addons/ui/FlxUITooltip.hx",278,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_305_refresh,"flixel.addons.ui.FlxUITooltip","refresh",0x9e68ea9b,"flixel.addons.ui.FlxUITooltip.refresh","flixel/addons/ui/FlxUITooltip.hx",305,0xb6bba58f)
static const int _hx_array_data_943db12e_8[] = {
	(int)0,
};
static const int _hx_array_data_943db12e_9[] = {
	(int)1,
};
static const int _hx_array_data_943db12e_10[] = {
	(int)2,
};
static const int _hx_array_data_943db12e_11[] = {
	(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_398_refreshBkg,"flixel.addons.ui.FlxUITooltip","refreshBkg",0x652bdaa3,"flixel.addons.ui.FlxUITooltip.refreshBkg","flixel/addons/ui/FlxUITooltip.hx",398,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_421_getStyleKey,"flixel.addons.ui.FlxUITooltip","getStyleKey",0x6e476464,"flixel.addons.ui.FlxUITooltip.getStyleKey","flixel/addons/ui/FlxUITooltip.hx",421,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_425_makeArrowBkg,"flixel.addons.ui.FlxUITooltip","makeArrowBkg",0x668c4783,"flixel.addons.ui.FlxUITooltip.makeArrowBkg","flixel/addons/ui/FlxUITooltip.hx",425,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_475_getArrowAnchor,"flixel.addons.ui.FlxUITooltip","getArrowAnchor",0x379dff68,"flixel.addons.ui.FlxUITooltip.getArrowAnchor","flixel/addons/ui/FlxUITooltip.hx",475,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_556_styleFix,"flixel.addons.ui.FlxUITooltip","styleFix",0xca970064,"flixel.addons.ui.FlxUITooltip.styleFix","flixel/addons/ui/FlxUITooltip.hx",556,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_763_cloneStyle,"flixel.addons.ui.FlxUITooltip","cloneStyle",0xdd1e97d4,"flixel.addons.ui.FlxUITooltip.cloneStyle","flixel/addons/ui/FlxUITooltip.hx",763,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_791_fillFontDefNulls,"flixel.addons.ui.FlxUITooltip","fillFontDefNulls",0x74a2ef59,"flixel.addons.ui.FlxUITooltip.fillFontDefNulls","flixel/addons/ui/FlxUITooltip.hx",791,0xb6bba58f)
HX_LOCAL_STACK_FRAME(_hx_pos_7b5caaba09e0a704_805_fillFormatNulls,"flixel.addons.ui.FlxUITooltip","fillFormatNulls",0x253ee452,"flixel.addons.ui.FlxUITooltip.fillFormatNulls","flixel/addons/ui/FlxUITooltip.hx",805,0xb6bba58f)
namespace flixel{
namespace addons{
namespace ui{

void FlxUITooltip_obj::__construct(int Width,int Height, ::flixel::addons::ui::Anchor Anchor_, ::Dynamic Style){
            	HX_GC_STACKFRAME(&_hx_pos_7b5caaba09e0a704_28_new)
HXLINE(  29)		super::__construct(0,0);
HXLINE(  31)		if (::hx::IsNull( Anchor_ )) {
HXLINE(  33)			Anchor_ =  ::flixel::addons::ui::Anchor_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("left",07,08,b0,47),HX_("top",95,66,58,00),HX_("right",dc,0b,64,e9),HX_("top",95,66,58,00));
            		}
HXLINE(  36)		Style = ::flixel::addons::ui::FlxUITooltip_obj::styleFix(Style,null());
HXLINE(  38)		this->refresh(Width,Height,HX_("",00,00,00,00),HX_("",00,00,00,00),Anchor_,Style);
HXLINE(  39)		this->setScrollFactor(( (Float)(0) ),( (Float)(0) ));
            	}

Dynamic FlxUITooltip_obj::__CreateEmpty() { return new FlxUITooltip_obj; }

void *FlxUITooltip_obj::_hx_vtable = 0;

Dynamic FlxUITooltip_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxUITooltip_obj > _hx_result = new FlxUITooltip_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxUITooltip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x288ce903) {
			if (inClassId<=(int)0x09e0f6a8) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x09e0f6a8;
			} else {
				return inClassId==(int)0x288ce903;
			}
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x398eb8dc || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7dab0655;
		}
	}
}

void FlxUITooltip_obj::show( ::flixel::FlxObject obj,::String __o_Title,::String __o_Body,::hx::Null< bool >  __o_AutoSizeVertical,::hx::Null< bool >  __o_AutoSizeHorizontal,::hx::Null< bool >  __o_ShowArrow){
            		::String Title = __o_Title;
            		if (::hx::IsNull(__o_Title)) Title = HX_("",00,00,00,00);
            		::String Body = __o_Body;
            		if (::hx::IsNull(__o_Body)) Body = HX_("",00,00,00,00);
            		bool AutoSizeVertical = __o_AutoSizeVertical.Default(true);
            		bool AutoSizeHorizontal = __o_AutoSizeHorizontal.Default(true);
            		bool ShowArrow = __o_ShowArrow.Default(true);
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_44_show)
HXLINE(  45)		this->set_visible(true);
HXLINE(  46)		this->set_active(true);
HXLINE(  49)		this->set_x(( (Float)(0) ));
HXLINE(  50)		this->set_y(( (Float)(0) ));
HXLINE(  51)		this->_bkg->set_x(( (Float)(0) ));
HXLINE(  52)		this->_bkg->set_y(( (Float)(0) ));
HXLINE(  53)		this->_arrow->set_x(( (Float)(0) ));
HXLINE(  54)		this->_arrow->set_y(( (Float)(0) ));
HXLINE(  55)		this->_arrowBkg->set_x(( (Float)(0) ));
HXLINE(  56)		this->_arrowBkg->set_y(( (Float)(0) ));
HXLINE(  58)		this->_arrowBkg = this->makeArrowBkg(this->_arrowBkg);
HXLINE(  59)		this->_arrow->set_color(( (int)(this->style->__Field(HX_("background",ee,93,1d,26),::hx::paccDynamic)) ));
HXLINE(  61)		 ::flixel::FlxSprite _hx_tmp = this->_arrow;
HXDLIN(  61)		_hx_tmp->set_visible(this->_arrowBkg->set_visible(ShowArrow));
HXLINE(  63)		if (::hx::IsGreater( this->style->__Field(HX_("titleWidth",4e,c9,47,dc),::hx::paccDynamic),0 )) {
HXLINE(  65)			 ::flixel::addons::ui::FlxUIText _hx_tmp = this->_titleText;
HXDLIN(  65)			_hx_tmp->set_width(( (Float)(::Std_obj::_hx_int(this->_titleText->textField->set_width(( (Float)(this->style->__Field(HX_("titleWidth",4e,c9,47,dc),::hx::paccDynamic)) )))) ));
            		}
HXLINE(  67)		if (::hx::IsGreater( this->style->__Field(HX_("bodyWidth",04,e0,6a,8a),::hx::paccDynamic),0 )) {
HXLINE(  69)			 ::flixel::addons::ui::FlxUIText _hx_tmp = this->_bodyText;
HXDLIN(  69)			_hx_tmp->set_width(( (Float)(::Std_obj::_hx_int(this->_bodyText->textField->set_width(( (Float)(this->style->__Field(HX_("bodyWidth",04,e0,6a,8a),::hx::paccDynamic)) )))) ));
            		}
HXLINE(  72)		if (::hx::IsNotNull( this->style->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic) )) {
HXLINE(  74)			( ( ::flixel::addons::ui::FontDef)(this->style->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic)) )->apply(null(),this->_titleText);
            		}
HXLINE(  76)		if (::hx::IsNotNull( this->style->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic) )) {
HXLINE(  78)			( ( ::flixel::addons::ui::FontDef)(this->style->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic)) )->apply(null(),this->_bodyText);
            		}
HXLINE(  81)		if (::hx::IsNotNull( this->style->__Field(HX_("titleBorder",a4,18,a6,fa),::hx::paccDynamic) )) {
HXLINE(  83)			( ( ::flixel::addons::ui::BorderDef)(this->style->__Field(HX_("titleBorder",a4,18,a6,fa),::hx::paccDynamic)) )->apply(this->_titleText);
            		}
HXLINE(  85)		if (::hx::IsNotNull( this->style->__Field(HX_("bodyBorder",2e,e1,36,ab),::hx::paccDynamic) )) {
HXLINE(  87)			( ( ::flixel::addons::ui::BorderDef)(this->style->__Field(HX_("bodyBorder",2e,e1,36,ab),::hx::paccDynamic)) )->apply(this->_bodyText);
            		}
HXLINE(  90)		this->_titleText->set_text(Title);
HXLINE(  91)		this->_bodyText->set_text(Body);
HXLINE(  93)		this->_titleText->update(( (Float)(0) ));
HXLINE(  94)		this->_bodyText->update(( (Float)(0) ));
HXLINE(  96)		int titleHeight = ::Std_obj::_hx_int((this->_titleText->textField->get_textHeight() + 4));
HXLINE(  98)		if (::hx::IsNotNull( this->style->__Field(HX_("titleOffset",4b,63,cb,f6),::hx::paccDynamic) )) {
HXLINE( 100)			 ::flixel::addons::ui::FlxUIText _hx_tmp = this->_titleText;
HXDLIN( 100)			_hx_tmp->set_x(( (Float)(::Std_obj::_hx_int(( ( ::flixel::math::FlxPoint)(this->style->__Field(HX_("titleOffset",4b,63,cb,f6),::hx::paccDynamic)) )->x)) ));
HXLINE( 101)			 ::flixel::addons::ui::FlxUIText _hx_tmp1 = this->_titleText;
HXDLIN( 101)			_hx_tmp1->set_y(( (Float)(::Std_obj::_hx_int(( ( ::flixel::math::FlxPoint)(this->style->__Field(HX_("titleOffset",4b,63,cb,f6),::hx::paccDynamic)) )->y)) ));
            		}
HXLINE( 103)		if (::hx::IsNotNull( this->style->__Field(HX_("bodyOffset",d5,2b,5c,a7),::hx::paccDynamic) )) {
HXLINE( 105)			 ::flixel::addons::ui::FlxUIText _hx_tmp = this->_bodyText;
HXDLIN( 105)			_hx_tmp->set_x(( (Float)(::Std_obj::_hx_int(( ( ::flixel::math::FlxPoint)(this->style->__Field(HX_("bodyOffset",d5,2b,5c,a7),::hx::paccDynamic)) )->x)) ));
HXLINE( 106)			 ::flixel::addons::ui::FlxUIText _hx_tmp1 = this->_bodyText;
HXDLIN( 106)			_hx_tmp1->set_y(( (Float)(::Std_obj::_hx_int(((this->_titleText->y + titleHeight) + ( ( ::flixel::math::FlxPoint)(this->style->__Field(HX_("bodyOffset",d5,2b,5c,a7),::hx::paccDynamic)) )->y))) ));
            		}
HXLINE( 109)		int W = ::Std_obj::_hx_int(this->_bkg->get_width());
HXLINE( 110)		int H = ::Std_obj::_hx_int(this->_bkg->get_height());
HXLINE( 112)		if (AutoSizeHorizontal) {
HXLINE( 114)			Float tw;
HXDLIN( 114)			if ((this->_titleText->text != HX_("",00,00,00,00))) {
HXLINE( 114)				Float tw1 = this->_titleText->x;
HXDLIN( 114)				tw = (tw1 + this->_titleText->get_width());
            			}
            			else {
HXLINE( 114)				tw = ( (Float)(0) );
            			}
HXLINE( 115)			Float bw;
HXDLIN( 115)			if ((this->_bodyText->text != HX_("",00,00,00,00))) {
HXLINE( 115)				Float bw1 = this->_bodyText->x;
HXDLIN( 115)				bw = (bw1 + this->_bodyText->get_width());
            			}
            			else {
HXLINE( 115)				bw = ( (Float)(0) );
            			}
HXLINE( 116)			W = ::Std_obj::_hx_int(::Math_obj::max(tw,bw));
            		}
HXLINE( 119)		if (AutoSizeVertical) {
HXLINE( 121)			Float th;
HXDLIN( 121)			if ((this->_titleText->text != HX_("",00,00,00,00))) {
HXLINE( 121)				Float th1 = this->_titleText->y;
HXDLIN( 121)				th = (th1 + this->_titleText->get_height());
            			}
            			else {
HXLINE( 121)				th = ( (Float)(0) );
            			}
HXLINE( 122)			Float bh;
HXDLIN( 122)			if ((this->_bodyText->text != HX_("",00,00,00,00))) {
HXLINE( 122)				Float bh1 = this->_bodyText->y;
HXDLIN( 122)				bh = (bh1 + this->_bodyText->get_height());
            			}
            			else {
HXLINE( 122)				bh = ( (Float)(0) );
            			}
HXLINE( 123)			H = ::Std_obj::_hx_int(::Math_obj::max(th,bh));
HXLINE( 124)			H = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(H) ),this->_arrowBkg->get_height()));
            		}
HXLINE( 127)		if (::hx::IsNull( this->style->__Field(HX_("leftPadding",8a,98,10,d0),::hx::paccDynamic) )) {
HXLINE( 128)			this->style->__SetField(HX_("leftPadding",8a,98,10,d0),0,::hx::paccDynamic);
            		}
HXLINE( 129)		if (::hx::IsNull( this->style->__Field(HX_("rightPadding",55,e9,2b,bb),::hx::paccDynamic) )) {
HXLINE( 130)			this->style->__SetField(HX_("rightPadding",55,e9,2b,bb),0,::hx::paccDynamic);
            		}
HXLINE( 131)		if (::hx::IsNull( this->style->__Field(HX_("topPadding",bc,47,4b,3c),::hx::paccDynamic) )) {
HXLINE( 132)			this->style->__SetField(HX_("topPadding",bc,47,4b,3c),0,::hx::paccDynamic);
            		}
HXLINE( 133)		if (::hx::IsNull( this->style->__Field(HX_("bottomPadding",26,1e,2d,2b),::hx::paccDynamic) )) {
HXLINE( 134)			this->style->__SetField(HX_("bottomPadding",26,1e,2d,2b),0,::hx::paccDynamic);
            		}
HXLINE( 137)		W = ( (int)((W + (this->style->__Field(HX_("leftPadding",8a,98,10,d0),::hx::paccDynamic) + this->style->__Field(HX_("rightPadding",55,e9,2b,bb),::hx::paccDynamic)))) );
HXLINE( 138)		H = ( (int)((H + (this->style->__Field(HX_("topPadding",bc,47,4b,3c),::hx::paccDynamic) + this->style->__Field(HX_("bottomPadding",26,1e,2d,2b),::hx::paccDynamic)))) );
HXLINE( 140)		W = ::Std_obj::_hx_int(( (Float)(W) ));
HXLINE( 141)		H = ::Std_obj::_hx_int(( (Float)(H) ));
HXLINE( 143)		this->refreshBkg(W,H,this->style);
HXLINE( 145)		int oldOffX = ::Std_obj::_hx_int(this->_anchorArrow->x->offset);
HXLINE( 146)		int oldOffY = ::Std_obj::_hx_int(this->_anchorArrow->y->offset);
HXLINE( 148)		 ::flixel::addons::ui::AnchorPoint _hx_tmp1 = this->_anchorArrow->x;
HXDLIN( 148)		_hx_tmp1->offset = (_hx_tmp1->offset - this->anchor->x->offset);
HXLINE( 149)		 ::flixel::addons::ui::AnchorPoint _hx_tmp2 = this->_anchorArrow->y;
HXDLIN( 149)		_hx_tmp2->offset = (_hx_tmp2->offset + this->anchor->y->offset);
HXLINE( 151)		this->_anchorArrow->x->offset = ( (Float)(::Std_obj::_hx_int(this->_anchorArrow->x->offset)) );
HXLINE( 152)		this->_anchorArrow->y->offset = ( (Float)(::Std_obj::_hx_int(this->_anchorArrow->y->offset)) );
HXLINE( 154)		this->_anchorArrow->anchorThing(this->_arrow,this->_bkg);
HXLINE( 156)		this->_anchorArrow->x->offset = ( (Float)(oldOffX) );
HXLINE( 157)		this->_anchorArrow->y->offset = ( (Float)(oldOffY) );
HXLINE( 159)		if ((this->_arrow->x < 0)) {
HXLINE( 161)			int xx = ::Std_obj::_hx_int(::Math_obj::abs(this->_arrow->x));
HXLINE( 162)			{
HXLINE( 162)				 ::flixel::FlxSprite _g = this->_bkg;
HXDLIN( 162)				_g->set_x((_g->x + xx));
            			}
HXLINE( 163)			{
HXLINE( 163)				 ::flixel::addons::ui::FlxUIText _g1 = this->_titleText;
HXDLIN( 163)				_g1->set_x((_g1->x + xx));
            			}
HXLINE( 164)			{
HXLINE( 164)				 ::flixel::addons::ui::FlxUIText _g2 = this->_bodyText;
HXDLIN( 164)				_g2->set_x((_g2->x + xx));
            			}
HXLINE( 165)			this->_arrow->set_x(( (Float)(0) ));
            		}
HXLINE( 167)		if ((this->_arrow->y < 0)) {
HXLINE( 169)			int yy = ::Std_obj::_hx_int(::Math_obj::abs(this->_arrow->y));
HXLINE( 170)			{
HXLINE( 170)				 ::flixel::FlxSprite _g = this->_bkg;
HXDLIN( 170)				_g->set_y((_g->y + yy));
            			}
HXLINE( 171)			{
HXLINE( 171)				 ::flixel::addons::ui::FlxUIText _g1 = this->_titleText;
HXDLIN( 171)				_g1->set_y((_g1->y + yy));
            			}
HXLINE( 172)			{
HXLINE( 172)				 ::flixel::addons::ui::FlxUIText _g2 = this->_bodyText;
HXDLIN( 172)				_g2->set_y((_g2->y + yy));
            			}
HXLINE( 173)			this->_arrow->set_y(( (Float)(0) ));
            		}
HXLINE( 176)		bool _hx_tmp3;
HXDLIN( 176)		if ((this->_titleText->text != HX_("",00,00,00,00))) {
HXLINE( 176)			_hx_tmp3 = (this->_bodyText->text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 176)			_hx_tmp3 = false;
            		}
HXDLIN( 176)		if (_hx_tmp3) {
HXLINE( 181)			int tempH = (H - ( (int)((this->style->__Field(HX_("topPadding",bc,47,4b,3c),::hx::paccDynamic) + this->style->__Field(HX_("bottomPadding",26,1e,2d,2b),::hx::paccDynamic))) ));
HXLINE( 182)			int titleOnlyOffset = ::Std_obj::_hx_int((( (Float)((tempH - titleHeight)) ) / ( (Float)(2) )));
HXLINE( 183)			{
HXLINE( 183)				 ::flixel::addons::ui::FlxUIText _g = this->_titleText;
HXDLIN( 183)				_g->set_y((_g->y + titleOnlyOffset));
            			}
            		}
HXLINE( 187)		{
HXLINE( 187)			 ::flixel::addons::ui::FlxUIText _g = this->_titleText;
HXDLIN( 187)			_g->set_x(( (Float)((_g->x + this->style->__Field(HX_("leftPadding",8a,98,10,d0),::hx::paccDynamic))) ));
            		}
HXLINE( 188)		{
HXLINE( 188)			 ::flixel::addons::ui::FlxUIText _g1 = this->_bodyText;
HXDLIN( 188)			_g1->set_x(( (Float)((_g1->x + this->style->__Field(HX_("leftPadding",8a,98,10,d0),::hx::paccDynamic))) ));
            		}
HXLINE( 190)		{
HXLINE( 190)			 ::flixel::addons::ui::FlxUIText _g2 = this->_titleText;
HXDLIN( 190)			_g2->set_y(( (Float)((_g2->y + this->style->__Field(HX_("topPadding",bc,47,4b,3c),::hx::paccDynamic))) ));
            		}
HXLINE( 191)		{
HXLINE( 191)			 ::flixel::addons::ui::FlxUIText _g3 = this->_bodyText;
HXDLIN( 191)			_g3->set_y(( (Float)((_g3->y + this->style->__Field(HX_("topPadding",bc,47,4b,3c),::hx::paccDynamic))) ));
            		}
HXLINE( 195)		if ((this->_titleText->text == HX_("",00,00,00,00))) {
HXLINE( 197)			this->_titleText->set_x(this->_bkg->x);
HXLINE( 198)			this->_titleText->set_y(this->_bkg->y);
HXLINE( 199)			 ::flixel::addons::ui::FlxUIText _hx_tmp = this->_titleText;
HXDLIN( 199)			_hx_tmp->set_width(this->_bkg->get_width());
            		}
HXLINE( 202)		if ((this->_bodyText->text == HX_("",00,00,00,00))) {
HXLINE( 204)			this->_bodyText->set_x(this->_bkg->x);
HXLINE( 205)			this->_bodyText->set_y(this->_bkg->y);
HXLINE( 206)			 ::flixel::addons::ui::FlxUIText _hx_tmp = this->_bodyText;
HXDLIN( 206)			_hx_tmp->set_width(this->_bkg->get_width());
            		}
HXLINE( 209)		this->anchor->anchorThing(::hx::ObjectPtr<OBJ_>(this),obj);
HXLINE( 211)		this->set_x(( (Float)(::Std_obj::_hx_int(this->x)) ));
HXLINE( 212)		this->set_y(( (Float)(::Std_obj::_hx_int(this->y)) ));
HXLINE( 214)		 ::flixel::FlxSprite _hx_tmp4 = this->_arrowBkg;
HXDLIN( 214)		_hx_tmp4->set_x(( (Float)(::Std_obj::_hx_int((this->_arrow->x - ( (Float)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) )))) ));
HXLINE( 215)		 ::flixel::FlxSprite _hx_tmp5 = this->_arrowBkg;
HXDLIN( 215)		_hx_tmp5->set_y(( (Float)(::Std_obj::_hx_int((this->_arrow->y - ( (Float)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) )))) ));
HXLINE( 217)		 ::flixel::addons::ui::FlxUIText _hx_tmp6 = this->_titleText;
HXDLIN( 217)		_hx_tmp6->set_x(( (Float)(::Std_obj::_hx_int(this->_titleText->x)) ));
HXLINE( 218)		 ::flixel::addons::ui::FlxUIText _hx_tmp7 = this->_bodyText;
HXDLIN( 218)		_hx_tmp7->set_x(( (Float)(::Std_obj::_hx_int(this->_bodyText->x)) ));
HXLINE( 219)		 ::flixel::FlxSprite _hx_tmp8 = this->_bkg;
HXDLIN( 219)		_hx_tmp8->set_x(( (Float)(::Std_obj::_hx_int(this->_bkg->x)) ));
HXLINE( 220)		 ::flixel::FlxSprite _hx_tmp9 = this->_bkg;
HXDLIN( 220)		_hx_tmp9->set_y(( (Float)(::Std_obj::_hx_int(this->_bkg->y)) ));
HXLINE( 221)		 ::flixel::FlxSprite _hx_tmp10 = this->_arrowBkg;
HXDLIN( 221)		_hx_tmp10->set_x(( (Float)(::Std_obj::_hx_int(this->_arrowBkg->x)) ));
HXLINE( 222)		 ::flixel::FlxSprite _hx_tmp11 = this->_arrowBkg;
HXDLIN( 222)		_hx_tmp11->set_y(( (Float)(::Std_obj::_hx_int(this->_arrowBkg->y)) ));
HXLINE( 223)		 ::flixel::FlxSprite _hx_tmp12 = this->_arrow;
HXDLIN( 223)		_hx_tmp12->set_x(( (Float)(::Std_obj::_hx_int(this->_arrow->x)) ));
HXLINE( 224)		 ::flixel::FlxSprite _hx_tmp13 = this->_arrow;
HXDLIN( 224)		_hx_tmp13->set_y(( (Float)(::Std_obj::_hx_int(this->_arrow->y)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxUITooltip_obj,show,(void))

Float FlxUITooltip_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_229_get_height)
HXLINE( 230)		if ((this->group->length == 0)) {
HXLINE( 232)			return ( (Float)(0) );
            		}
HXLINE( 235)		Float minY = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 236)		Float maxY = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 238)		{
HXLINE( 238)			int _g = 0;
HXDLIN( 238)			::Array< ::Dynamic> _g1 = this->_sprites;
HXDLIN( 238)			while((_g < _g1->length)){
HXLINE( 238)				 ::flixel::FlxSprite member = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 238)				_g = (_g + 1);
HXLINE( 240)				if (::hx::IsNull( member )) {
HXLINE( 241)					continue;
            				}
HXLINE( 242)				if (::Std_obj::isOfType(member,::hx::ClassOf< ::flixel::text::FlxText >())) {
HXLINE( 243)					continue;
            				}
HXLINE( 244)				Float minMemberY = member->y;
HXLINE( 245)				Float maxMemberY = (minMemberY + member->get_height());
HXLINE( 247)				if ((maxMemberY > maxY)) {
HXLINE( 249)					maxY = maxMemberY;
            				}
HXLINE( 251)				if ((minMemberY < minY)) {
HXLINE( 253)					minY = minMemberY;
            				}
            			}
            		}
HXLINE( 256)		return (maxY - minY);
            	}


void FlxUITooltip_obj::hide(){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_260_hide)
HXLINE( 261)		this->set_visible(false);
HXLINE( 262)		this->set_active(false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxUITooltip_obj,hide,(void))

 ::flixel::addons::ui::Anchor FlxUITooltip_obj::set_anchor( ::flixel::addons::ui::Anchor a){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_267_set_anchor)
HXLINE( 268)		this->anchor = a;
HXLINE( 269)		this->_anchorArrow = this->getArrowAnchor(a,this->_anchorArrow);
HXLINE( 270)		if (::hx::IsNotNull( this->_arrowBkg )) {
HXLINE( 272)			this->makeArrowBkg(this->_arrowBkg);
            		}
HXLINE( 274)		return a;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltip_obj,set_anchor,return )

 ::Dynamic FlxUITooltip_obj::set_style( ::Dynamic s){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_278_set_style)
HXLINE( 279)		this->style = s;
HXLINE( 280)		return s;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltip_obj,set_style,return )

void FlxUITooltip_obj::refresh(int Width,int Height,::String Title,::String Body, ::flixel::addons::ui::Anchor Anchor_, ::Dynamic Style){
            	HX_GC_STACKFRAME(&_hx_pos_7b5caaba09e0a704_305_refresh)
HXLINE( 307)		bool newBkg = ::hx::IsNull( this->_bkg );
HXLINE( 308)		bool newArrow = ::hx::IsNull( this->_arrow );
HXLINE( 309)		bool newTitle = ::hx::IsNull( this->_titleText );
HXLINE( 310)		bool newBody = ::hx::IsNull( this->_bodyText );
HXLINE( 311)		if (newBkg) {
HXLINE( 313)			this->_bkg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
            		}
HXLINE( 315)		if (newArrow) {
HXLINE( 317)			this->_arrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
            		}
HXLINE( 319)		if (newTitle) {
HXLINE( 321)			this->_titleText =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,0,0,Width,null(),null(),null());
HXLINE( 322)			if (::hx::IsNotNull( Style->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic) )) {
HXLINE( 324)				( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic)) )->apply(null(),this->_titleText);
            			}
HXLINE( 326)			if (::hx::IsNotNull( Style->__Field(HX_("titleBorder",a4,18,a6,fa),::hx::paccDynamic) )) {
HXLINE( 328)				( ( ::flixel::addons::ui::BorderDef)(Style->__Field(HX_("titleBorder",a4,18,a6,fa),::hx::paccDynamic)) )->apply(this->_titleText);
            			}
            		}
HXLINE( 331)		if (newBody) {
HXLINE( 333)			this->_bodyText =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,0,0,Width,null(),null(),null());
HXLINE( 334)			if (::hx::IsNotNull( Style->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic) )) {
HXLINE( 336)				( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic)) )->apply(null(),this->_bodyText);
            			}
HXLINE( 338)			if (::hx::IsNotNull( Style->__Field(HX_("bodyBorder",2e,e1,36,ab),::hx::paccDynamic) )) {
HXLINE( 340)				( ( ::flixel::addons::ui::BorderDef)(Style->__Field(HX_("bodyBorder",2e,e1,36,ab),::hx::paccDynamic)) )->apply(this->_bodyText);
            			}
            		}
HXLINE( 344)		this->_titleText->set_text(Title);
HXLINE( 345)		this->_bodyText->set_text(Body);
HXLINE( 348)		this->_arrow->set_color(( (int)(Style->__Field(HX_("background",ee,93,1d,26),::hx::paccDynamic)) ));
HXLINE( 349)		 ::flixel::graphics::FlxGraphic test = ::flixel::FlxG_obj::bitmap->add( ::Dynamic(Style->__Field(HX_("arrow",c9,79,8f,25),::hx::paccDynamic)),null(),null());
HXLINE( 350)		if (::hx::IsNull( Style->__Field(HX_("arrow",c9,79,8f,25),::hx::paccDynamic) )) {
HXLINE( 352)			Style->__SetField(HX_("arrow",c9,79,8f,25),HX_("flixel/flixel-ui/img/tooltip_arrow.png",df,64,ce,50),::hx::paccDynamic);
HXLINE( 353)			::flixel::FlxG_obj::bitmap->add( ::Dynamic(Style->__Field(HX_("arrow",c9,79,8f,25),::hx::paccDynamic)),null(),null());
            		}
HXLINE( 355)		this->_arrow->loadGraphic( ::Dynamic(Style->__Field(HX_("arrow",c9,79,8f,25),::hx::paccDynamic)),true,test->height,test->height,null(),null());
HXLINE( 357)		if (newArrow) {
HXLINE( 359)			this->_arrow->animation->add(HX_("right",dc,0b,64,e9),::Array_obj< int >::fromData( _hx_array_data_943db12e_8,1),0,false,null(),null());
HXLINE( 360)			this->_arrow->animation->add(HX_("down",62,f8,6d,42),::Array_obj< int >::fromData( _hx_array_data_943db12e_9,1),0,false,null(),null());
HXLINE( 361)			this->_arrow->animation->add(HX_("left",07,08,b0,47),::Array_obj< int >::fromData( _hx_array_data_943db12e_10,1),0,false,null(),null());
HXLINE( 362)			this->_arrow->animation->add(HX_("up",5b,66,00,00),::Array_obj< int >::fromData( _hx_array_data_943db12e_11,1),0,false,null(),null());
            		}
HXLINE( 365)		this->refreshBkg(Width,Height,Style);
HXLINE( 366)		this->set_style(Style);
HXLINE( 368)		bool _hx_tmp;
HXDLIN( 368)		if (newArrow) {
HXLINE( 368)			_hx_tmp = ::hx::IsGreater( Style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic),0 );
            		}
            		else {
HXLINE( 368)			_hx_tmp = false;
            		}
HXDLIN( 368)		if (_hx_tmp) {
HXLINE( 370)			this->_arrowBkg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 371)			this->add(this->_arrowBkg);
            		}
HXLINE( 374)		this->set_anchor(Anchor_);
HXLINE( 376)		if (newBkg) {
HXLINE( 378)			this->add(this->_bkg);
            		}
HXLINE( 381)		if (newArrow) {
HXLINE( 383)			this->add(this->_arrow);
            		}
HXLINE( 386)		if (newTitle) {
HXLINE( 388)			this->add(this->_titleText);
            		}
HXLINE( 391)		if (newBody) {
HXLINE( 393)			this->add(this->_bodyText);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxUITooltip_obj,refresh,(void))

void FlxUITooltip_obj::refreshBkg(int Width,int Height, ::Dynamic Style){
            	HX_GC_STACKFRAME(&_hx_pos_7b5caaba09e0a704_398_refreshBkg)
HXLINE( 400)		::String key = this->getStyleKey(Width,Height,Style);
HXLINE( 401)		if (::hx::IsNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(key)) ) )) {
HXLINE( 403)			 ::openfl::display::BitmapData pix = null();
HXLINE( 404)			if (::hx::IsGreater( Style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic),0 )) {
HXLINE( 406)				pix =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,Width,Height,false,Style->__Field(HX_("borderColor",d7,3c,d5,d6),::hx::paccDynamic));
HXLINE( 407)				pix->fillRect( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,Style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic),Style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic),(Width - (( (int)(Style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) ) * 2)),(Height - (( (int)(Style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) ) * 2))),( (int)(Style->__Field(HX_("background",ee,93,1d,26),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE( 412)				pix =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,Width,Height,false,Style->__Field(HX_("background",ee,93,1d,26),::hx::paccDynamic));
            			}
HXLINE( 414)			::flixel::FlxG_obj::bitmap->add(pix,true,key);
            		}
HXLINE( 416)		this->_bkg->loadGraphic(key,null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUITooltip_obj,refreshBkg,(void))

::String FlxUITooltip_obj::getStyleKey(int W,int H, ::Dynamic Style){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_421_getStyleKey)
HXDLIN( 421)		int this1 = ( (int)(Style->__Field(HX_("background",ee,93,1d,26),::hx::paccDynamic)) );
HXDLIN( 421)		::String _hx_tmp = HX_("0x",48,2a,00,00);
HXDLIN( 421)		::String _hx_tmp1 = ::StringTools_obj::hex(((this1 >> 24) & 255),2);
HXDLIN( 421)		::String _hx_tmp2 = ((_hx_tmp + _hx_tmp1) + ::StringTools_obj::hex(((this1 >> 16) & 255),2));
HXDLIN( 421)		::String _hx_tmp3 = (_hx_tmp2 + ::StringTools_obj::hex(((this1 >> 8) & 255),2));
HXDLIN( 421)		::String _hx_tmp4 = (((((W + HX_(",",2c,00,00,00)) + H) + HX_(",",2c,00,00,00)) + (_hx_tmp3 + ::StringTools_obj::hex((this1 & 255),2))) + HX_(",",2c,00,00,00));
HXDLIN( 421)		::String _hx_tmp5 = ( (::String)(((_hx_tmp4 + Style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) + HX_(",",2c,00,00,00))) );
HXDLIN( 421)		int this2 = ( (int)(Style->__Field(HX_("borderColor",d7,3c,d5,d6),::hx::paccDynamic)) );
HXDLIN( 421)		::String _hx_tmp6 = HX_("0x",48,2a,00,00);
HXDLIN( 421)		::String _hx_tmp7 = ::StringTools_obj::hex(((this2 >> 24) & 255),2);
HXDLIN( 421)		::String _hx_tmp8 = ((_hx_tmp6 + _hx_tmp7) + ::StringTools_obj::hex(((this2 >> 16) & 255),2));
HXDLIN( 421)		::String _hx_tmp9 = (_hx_tmp8 + ::StringTools_obj::hex(((this2 >> 8) & 255),2));
HXDLIN( 421)		return (_hx_tmp5 + (_hx_tmp9 + ::StringTools_obj::hex((this2 & 255),2)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxUITooltip_obj,getStyleKey,return )

 ::flixel::FlxSprite FlxUITooltip_obj::makeArrowBkg( ::flixel::FlxSprite b){
            	HX_GC_STACKFRAME(&_hx_pos_7b5caaba09e0a704_425_makeArrowBkg)
HXLINE( 426)		if (::hx::IsNull( b )) {
HXLINE( 428)			b =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
            		}
HXLINE( 430)		::String animName;
HXDLIN( 430)		if (::hx::IsNull( this->_arrow )) {
HXLINE( 430)			animName = HX_("null",87,9e,0e,49);
            		}
            		else {
HXLINE( 430)			if (::hx::IsNull( this->_arrow->animation->_curAnim )) {
HXLINE( 430)				animName = HX_("null",87,9e,0e,49);
            			}
            			else {
HXLINE( 430)				animName = this->_arrow->animation->_curAnim->name;
            			}
            		}
HXLINE( 432)		::String key = ( (::String)((((((((HX_("arrowBkg:",65,32,bc,fc) + this->style->__Field(HX_("background",ee,93,1d,26),::hx::paccDynamic)) + HX_(",",2c,00,00,00)) + this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) + HX_(",",2c,00,00,00)) + this->style->__Field(HX_("borderColor",d7,3c,d5,d6),::hx::paccDynamic)) + HX_(",",2c,00,00,00)) + animName)) );
HXLINE( 434)		if (::hx::IsNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(key)) ) )) {
HXLINE( 436)			 ::Dynamic bs = this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic);
HXLINE( 437)			bool _hx_tmp;
HXDLIN( 437)			if (::hx::IsGreaterEq( bs,0 )) {
HXLINE( 437)				_hx_tmp = ::hx::IsNull( bs );
            			}
            			else {
HXLINE( 437)				_hx_tmp = true;
            			}
HXDLIN( 437)			if (_hx_tmp) {
HXLINE( 439)				bs = 0;
            			}
HXLINE( 442)			int W = ::Std_obj::_hx_int((this->_arrow->get_width() + bs));
HXLINE( 443)			int H = ::Std_obj::_hx_int((this->_arrow->get_height() + bs));
HXLINE( 445)			 ::openfl::display::BitmapData bd =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,W,H,true,0);
HXLINE( 446)			::flixel::FlxG_obj::bitmap->add(bd,false,key);
HXLINE( 447)			b->loadGraphic(key,null(),null(),null(),null(),null());
HXLINE( 449)			int oldColor = this->_arrow->color;
HXLINE( 451)			this->_arrow->set_color(( (int)(this->style->__Field(HX_("borderColor",d7,3c,d5,d6),::hx::paccDynamic)) ));
HXLINE( 453)			 ::openfl::geom::Matrix m =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 454)			m->identity();
HXLINE( 455)			{
HXLINE( 457)				{
HXLINE( 461)					b->stamp(this->_arrow,(0 * ( (int)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) )),(0 * ( (int)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) )));
HXDLIN( 461)					b->stamp(this->_arrow,this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic),(0 * ( (int)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) )));
HXDLIN( 461)					b->stamp(this->_arrow,(2 * ( (int)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) )),(0 * ( (int)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) )));
            				}
HXLINE( 457)				{
HXLINE( 461)					b->stamp(this->_arrow,(0 * ( (int)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) )),this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic));
HXDLIN( 461)					b->stamp(this->_arrow,(2 * ( (int)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) )),this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic));
            				}
HXLINE( 457)				{
HXLINE( 461)					b->stamp(this->_arrow,(0 * ( (int)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) )),(2 * ( (int)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) )));
HXDLIN( 461)					b->stamp(this->_arrow,this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic),(2 * ( (int)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) )));
HXDLIN( 461)					b->stamp(this->_arrow,(2 * ( (int)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) )),(2 * ( (int)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) )));
            				}
            			}
HXLINE( 466)			this->_arrow->set_color(oldColor);
            		}
HXLINE( 469)		b->loadGraphic(key,null(),null(),null(),null(),null());
HXLINE( 471)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltip_obj,makeArrowBkg,return )

 ::flixel::addons::ui::Anchor FlxUITooltip_obj::getArrowAnchor( ::flixel::addons::ui::Anchor a, ::flixel::addons::ui::Anchor result){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_475_getArrowAnchor)
HXLINE( 477)		bool touchHorz;
HXDLIN( 477)		bool touchHorz1;
HXDLIN( 477)		if ((a->x->side == HX_("left",07,08,b0,47))) {
HXLINE( 477)			touchHorz1 = (a->x->flush == HX_("right",dc,0b,64,e9));
            		}
            		else {
HXLINE( 477)			touchHorz1 = false;
            		}
HXDLIN( 477)		if (!(touchHorz1)) {
HXLINE( 477)			if ((a->x->side == HX_("right",dc,0b,64,e9))) {
HXLINE( 477)				touchHorz = (a->x->flush == HX_("left",07,08,b0,47));
            			}
            			else {
HXLINE( 477)				touchHorz = false;
            			}
            		}
            		else {
HXLINE( 477)			touchHorz = true;
            		}
HXLINE( 478)		bool touchVert;
HXDLIN( 478)		bool touchVert1;
HXDLIN( 478)		if ((a->y->side == HX_("top",95,66,58,00))) {
HXLINE( 478)			touchVert1 = (a->y->flush == HX_("bottom",eb,e6,78,65));
            		}
            		else {
HXLINE( 478)			touchVert1 = false;
            		}
HXDLIN( 478)		if (!(touchVert1)) {
HXLINE( 478)			if ((a->y->side == HX_("bottom",eb,e6,78,65))) {
HXLINE( 478)				touchVert = (a->y->flush == HX_("top",95,66,58,00));
            			}
            			else {
HXLINE( 478)				touchVert = false;
            			}
            		}
            		else {
HXLINE( 478)			touchVert = true;
            		}
HXLINE( 480)		bool matchHorz;
HXDLIN( 480)		bool matchHorz1;
HXDLIN( 480)		if ((a->x->side == HX_("left",07,08,b0,47))) {
HXLINE( 480)			matchHorz1 = (a->x->flush == HX_("left",07,08,b0,47));
            		}
            		else {
HXLINE( 480)			matchHorz1 = false;
            		}
HXDLIN( 480)		if (!(matchHorz1)) {
HXLINE( 480)			if ((a->x->side == HX_("right",dc,0b,64,e9))) {
HXLINE( 480)				matchHorz = (a->x->flush == HX_("right",dc,0b,64,e9));
            			}
            			else {
HXLINE( 480)				matchHorz = false;
            			}
            		}
            		else {
HXLINE( 480)			matchHorz = true;
            		}
HXLINE( 481)		bool matchVert;
HXDLIN( 481)		bool matchVert1;
HXDLIN( 481)		if ((a->y->side == HX_("top",95,66,58,00))) {
HXLINE( 481)			matchVert1 = (a->y->flush == HX_("top",95,66,58,00));
            		}
            		else {
HXLINE( 481)			matchVert1 = false;
            		}
HXDLIN( 481)		if (!(matchVert1)) {
HXLINE( 481)			if ((a->y->side == HX_("bottom",eb,e6,78,65))) {
HXLINE( 481)				matchVert = (a->y->flush == HX_("bottom",eb,e6,78,65));
            			}
            			else {
HXLINE( 481)				matchVert = false;
            			}
            		}
            		else {
HXLINE( 481)			matchVert = true;
            		}
HXLINE( 483)		bool touchBoth;
HXDLIN( 483)		if (touchHorz) {
HXLINE( 483)			touchBoth = touchVert;
            		}
            		else {
HXLINE( 483)			touchBoth = false;
            		}
HXLINE( 484)		bool matchBoth;
HXDLIN( 484)		if (matchHorz) {
HXLINE( 484)			matchBoth = matchVert;
            		}
            		else {
HXLINE( 484)			matchBoth = false;
            		}
HXLINE( 486)		int off = ( (int)(this->style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic)) );
HXLINE( 488)		if (!(touchBoth)) {
HXLINE( 490)			if (touchHorz) {
HXLINE( 492)				result = a->getFlipped(true,false,result);
HXLINE( 493)				if ((result->x->flush == HX_("left",07,08,b0,47))) {
HXLINE( 495)					 ::flixel::addons::ui::AnchorPoint result1 = result->x;
HXDLIN( 495)					result1->offset = (result1->offset - ( (Float)(off) ));
HXLINE( 496)					this->_arrow->animation->play(HX_("right",dc,0b,64,e9),null(),null(),null());
            				}
HXLINE( 498)				if ((result->x->flush == HX_("right",dc,0b,64,e9))) {
HXLINE( 500)					 ::flixel::addons::ui::AnchorPoint result1 = result->x;
HXDLIN( 500)					result1->offset = (result1->offset + off);
HXLINE( 501)					this->_arrow->animation->play(HX_("left",07,08,b0,47),null(),null(),null());
            				}
            			}
HXLINE( 504)			if (touchVert) {
HXLINE( 506)				result = a->getFlipped(false,true,result);
HXLINE( 507)				if ((result->y->flush == HX_("top",95,66,58,00))) {
HXLINE( 509)					 ::flixel::addons::ui::AnchorPoint result1 = result->y;
HXDLIN( 509)					result1->offset = (result1->offset - ( (Float)(off) ));
HXLINE( 510)					this->_arrow->animation->play(HX_("down",62,f8,6d,42),null(),null(),null());
            				}
HXLINE( 512)				if ((result->y->flush == HX_("bottom",eb,e6,78,65))) {
HXLINE( 514)					 ::flixel::addons::ui::AnchorPoint result1 = result->y;
HXDLIN( 514)					result1->offset = (result1->offset + off);
HXLINE( 515)					this->_arrow->animation->play(HX_("up",5b,66,00,00),null(),null(),null());
            				}
            			}
            		}
HXLINE( 520)		if (!(matchBoth)) {
HXLINE( 522)			if (matchHorz) {
HXLINE( 524)				if ((result->x->flush == HX_("left",07,08,b0,47))) {
HXLINE( 526)					 ::flixel::addons::ui::AnchorPoint result1 = result->x;
HXDLIN( 526)					result1->offset = (result1->offset + off);
            				}
HXLINE( 528)				if ((result->x->flush == HX_("right",dc,0b,64,e9))) {
HXLINE( 530)					 ::flixel::addons::ui::AnchorPoint result1 = result->x;
HXDLIN( 530)					result1->offset = (result1->offset - ( (Float)(off) ));
            				}
            			}
HXLINE( 533)			if (matchVert) {
HXLINE( 535)				if ((result->y->flush == HX_("top",95,66,58,00))) {
HXLINE( 537)					 ::flixel::addons::ui::AnchorPoint result1 = result->y;
HXDLIN( 537)					result1->offset = (result1->offset + off);
            				}
HXLINE( 539)				if ((result->y->flush == HX_("bottom",eb,e6,78,65))) {
HXLINE( 541)					 ::flixel::addons::ui::AnchorPoint result1 = result->y;
HXDLIN( 541)					result1->offset = (result1->offset - ( (Float)(off) ));
            				}
            			}
            		}
HXLINE( 546)		if (::hx::IsNotNull( result )) {
HXLINE( 548)			return result;
            		}
HXLINE( 551)		return a;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxUITooltip_obj,getArrowAnchor,return )

 ::Dynamic FlxUITooltip_obj::styleFix( ::Dynamic Style, ::Dynamic DefaultStyle){
            	HX_GC_STACKFRAME(&_hx_pos_7b5caaba09e0a704_556_styleFix)
HXLINE( 557)		if (::hx::IsNull( Style )) {
HXLINE( 559)			Style =  ::Dynamic(::hx::Anon_obj::Create(18)
            				->setFixed(0,HX_("bodyWidth",04,e0,6a,8a),-1)
            				->setFixed(1,HX_("titleFormat",ef,5a,1a,94),null())
            				->setFixed(2,HX_("autoSizeHorizontal",d4,74,ce,9f),null())
            				->setFixed(3,HX_("bodyOffset",d5,2b,5c,a7),null())
            				->setFixed(4,HX_("bodyBorder",2e,e1,36,ab),null())
            				->setFixed(5,HX_("rightPadding",55,e9,2b,bb),-1)
            				->setFixed(6,HX_("leftPadding",8a,98,10,d0),-1)
            				->setFixed(7,HX_("borderColor",d7,3c,d5,d6),null())
            				->setFixed(8,HX_("titleWidth",4e,c9,47,dc),-1)
            				->setFixed(9,HX_("titleOffset",4b,63,cb,f6),null())
            				->setFixed(10,HX_("titleBorder",a4,18,a6,fa),null())
            				->setFixed(11,HX_("borderSize",cd,ff,ed,06),-1)
            				->setFixed(12,HX_("arrow",c9,79,8f,25),null())
            				->setFixed(13,HX_("background",ee,93,1d,26),null())
            				->setFixed(14,HX_("bottomPadding",26,1e,2d,2b),-1)
            				->setFixed(15,HX_("topPadding",bc,47,4b,3c),-1)
            				->setFixed(16,HX_("bodyFormat",79,23,ab,44),null())
            				->setFixed(17,HX_("autoSizeVertical",66,58,0d,52),null()));
            		}
HXLINE( 583)		if (::hx::IsNotNull( DefaultStyle )) {
HXLINE( 585)			if (::hx::IsNull( Style->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic) )) {
HXLINE( 587)				Style->__SetField(HX_("titleFormat",ef,5a,1a,94),DefaultStyle->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 589)			if (::hx::IsNull( Style->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic) )) {
HXLINE( 591)				Style->__SetField(HX_("bodyFormat",79,23,ab,44),DefaultStyle->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 593)			if (::hx::IsNull( Style->__Field(HX_("titleBorder",a4,18,a6,fa),::hx::paccDynamic) )) {
HXLINE( 595)				Style->__SetField(HX_("titleBorder",a4,18,a6,fa),DefaultStyle->__Field(HX_("titleBorder",a4,18,a6,fa),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 597)			if (::hx::IsNull( Style->__Field(HX_("bodyBorder",2e,e1,36,ab),::hx::paccDynamic) )) {
HXLINE( 599)				Style->__SetField(HX_("bodyBorder",2e,e1,36,ab),DefaultStyle->__Field(HX_("bodyBorder",2e,e1,36,ab),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 601)			if (::hx::IsNull( Style->__Field(HX_("titleOffset",4b,63,cb,f6),::hx::paccDynamic) )) {
HXLINE( 603)				Style->__SetField(HX_("titleOffset",4b,63,cb,f6),DefaultStyle->__Field(HX_("titleOffset",4b,63,cb,f6),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 605)			if (::hx::IsNull( Style->__Field(HX_("bodyOffset",d5,2b,5c,a7),::hx::paccDynamic) )) {
HXLINE( 607)				Style->__SetField(HX_("bodyOffset",d5,2b,5c,a7),DefaultStyle->__Field(HX_("bodyOffset",d5,2b,5c,a7),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 609)			if (::hx::IsNull( Style->__Field(HX_("background",ee,93,1d,26),::hx::paccDynamic) )) {
HXLINE( 611)				Style->__SetField(HX_("background",ee,93,1d,26),DefaultStyle->__Field(HX_("background",ee,93,1d,26),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 613)			if (::hx::IsNull( Style->__Field(HX_("borderColor",d7,3c,d5,d6),::hx::paccDynamic) )) {
HXLINE( 615)				Style->__SetField(HX_("borderColor",d7,3c,d5,d6),DefaultStyle->__Field(HX_("borderColor",d7,3c,d5,d6),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 617)			if (::hx::IsNull( Style->__Field(HX_("arrow",c9,79,8f,25),::hx::paccDynamic) )) {
HXLINE( 619)				Style->__SetField(HX_("arrow",c9,79,8f,25),DefaultStyle->__Field(HX_("arrow",c9,79,8f,25),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 622)			bool _hx_tmp;
HXDLIN( 622)			if (::hx::IsNotNull( Style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic) )) {
HXLINE( 622)				_hx_tmp = ::hx::IsLess( Style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic),0 );
            			}
            			else {
HXLINE( 622)				_hx_tmp = true;
            			}
HXDLIN( 622)			if (_hx_tmp) {
HXLINE( 624)				Style->__SetField(HX_("borderSize",cd,ff,ed,06),DefaultStyle->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 626)			bool _hx_tmp1;
HXDLIN( 626)			if (::hx::IsNotNull( Style->__Field(HX_("titleWidth",4e,c9,47,dc),::hx::paccDynamic) )) {
HXLINE( 626)				_hx_tmp1 = ::hx::IsLess( Style->__Field(HX_("titleWidth",4e,c9,47,dc),::hx::paccDynamic),0 );
            			}
            			else {
HXLINE( 626)				_hx_tmp1 = true;
            			}
HXDLIN( 626)			if (_hx_tmp1) {
HXLINE( 628)				Style->__SetField(HX_("titleWidth",4e,c9,47,dc),DefaultStyle->__Field(HX_("titleWidth",4e,c9,47,dc),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 630)			bool _hx_tmp2;
HXDLIN( 630)			if (::hx::IsNotNull( Style->__Field(HX_("bodyWidth",04,e0,6a,8a),::hx::paccDynamic) )) {
HXLINE( 630)				_hx_tmp2 = ::hx::IsLess( Style->__Field(HX_("bodyWidth",04,e0,6a,8a),::hx::paccDynamic),0 );
            			}
            			else {
HXLINE( 630)				_hx_tmp2 = true;
            			}
HXDLIN( 630)			if (_hx_tmp2) {
HXLINE( 632)				Style->__SetField(HX_("bodyWidth",04,e0,6a,8a),DefaultStyle->__Field(HX_("bodyWidth",04,e0,6a,8a),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 634)			if (::hx::IsNull( Style->__Field(HX_("autoSizeHorizontal",d4,74,ce,9f),::hx::paccDynamic) )) {
HXLINE( 636)				Style->__SetField(HX_("autoSizeHorizontal",d4,74,ce,9f),DefaultStyle->__Field(HX_("autoSizeHorizontal",d4,74,ce,9f),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 638)			if (::hx::IsNull( Style->__Field(HX_("autoSizeVertical",66,58,0d,52),::hx::paccDynamic) )) {
HXLINE( 640)				Style->__SetField(HX_("autoSizeVertical",66,58,0d,52),DefaultStyle->__Field(HX_("autoSizeVertical",66,58,0d,52),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 643)			bool _hx_tmp3;
HXDLIN( 643)			if (::hx::IsNotNull( Style->__Field(HX_("leftPadding",8a,98,10,d0),::hx::paccDynamic) )) {
HXLINE( 643)				_hx_tmp3 = ::hx::IsLess( Style->__Field(HX_("leftPadding",8a,98,10,d0),::hx::paccDynamic),0 );
            			}
            			else {
HXLINE( 643)				_hx_tmp3 = true;
            			}
HXDLIN( 643)			if (_hx_tmp3) {
HXLINE( 645)				Style->__SetField(HX_("leftPadding",8a,98,10,d0),DefaultStyle->__Field(HX_("leftPadding",8a,98,10,d0),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 647)			bool _hx_tmp4;
HXDLIN( 647)			if (::hx::IsNotNull( Style->__Field(HX_("rightPadding",55,e9,2b,bb),::hx::paccDynamic) )) {
HXLINE( 647)				_hx_tmp4 = ::hx::IsLess( Style->__Field(HX_("rightPadding",55,e9,2b,bb),::hx::paccDynamic),0 );
            			}
            			else {
HXLINE( 647)				_hx_tmp4 = true;
            			}
HXDLIN( 647)			if (_hx_tmp4) {
HXLINE( 649)				Style->__SetField(HX_("rightPadding",55,e9,2b,bb),DefaultStyle->__Field(HX_("rightPadding",55,e9,2b,bb),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 651)			bool _hx_tmp5;
HXDLIN( 651)			if (::hx::IsNotNull( Style->__Field(HX_("topPadding",bc,47,4b,3c),::hx::paccDynamic) )) {
HXLINE( 651)				_hx_tmp5 = ::hx::IsLess( Style->__Field(HX_("topPadding",bc,47,4b,3c),::hx::paccDynamic),0 );
            			}
            			else {
HXLINE( 651)				_hx_tmp5 = true;
            			}
HXDLIN( 651)			if (_hx_tmp5) {
HXLINE( 653)				Style->__SetField(HX_("topPadding",bc,47,4b,3c),DefaultStyle->__Field(HX_("topPadding",bc,47,4b,3c),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE( 655)			bool _hx_tmp6;
HXDLIN( 655)			if (::hx::IsNotNull( Style->__Field(HX_("leftPadding",8a,98,10,d0),::hx::paccDynamic) )) {
HXLINE( 655)				_hx_tmp6 = ::hx::IsLess( Style->__Field(HX_("bottomPadding",26,1e,2d,2b),::hx::paccDynamic),0 );
            			}
            			else {
HXLINE( 655)				_hx_tmp6 = true;
            			}
HXDLIN( 655)			if (_hx_tmp6) {
HXLINE( 657)				Style->__SetField(HX_("bottomPadding",26,1e,2d,2b),DefaultStyle->__Field(HX_("bottomPadding",26,1e,2d,2b),::hx::paccDynamic),::hx::paccDynamic);
            			}
            		}
HXLINE( 662)		if (::hx::IsNotNull( DefaultStyle )) {
HXLINE( 664)			if (::hx::IsNotNull( Style->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic) )) {
HXLINE( 666)				::flixel::addons::ui::FlxUITooltip_obj::fillFontDefNulls(( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic)) ),( ( ::flixel::addons::ui::FontDef)(DefaultStyle->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic)) ));
HXLINE( 667)				bool _hx_tmp;
HXDLIN( 667)				if (::hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic)) )->format )) {
HXLINE( 667)					_hx_tmp = ::hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(DefaultStyle->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic)) )->format );
            				}
            				else {
HXLINE( 667)					_hx_tmp = false;
            				}
HXDLIN( 667)				if (_hx_tmp) {
HXLINE( 669)					::flixel::addons::ui::FlxUITooltip_obj::fillFormatNulls(( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic)) )->format,( ( ::flixel::addons::ui::FontDef)(DefaultStyle->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic)) )->format);
            				}
            			}
HXLINE( 672)			if (::hx::IsNotNull( Style->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic) )) {
HXLINE( 674)				::flixel::addons::ui::FlxUITooltip_obj::fillFontDefNulls(( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic)) ),( ( ::flixel::addons::ui::FontDef)(DefaultStyle->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic)) ));
HXLINE( 675)				bool _hx_tmp;
HXDLIN( 675)				if (::hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic)) )->format )) {
HXLINE( 675)					_hx_tmp = ::hx::IsNotNull( ( ( ::flixel::addons::ui::FontDef)(DefaultStyle->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic)) )->format );
            				}
            				else {
HXLINE( 675)					_hx_tmp = false;
            				}
HXDLIN( 675)				if (_hx_tmp) {
HXLINE( 677)					::flixel::addons::ui::FlxUITooltip_obj::fillFormatNulls(( ( ::flixel::addons::ui::FontDef)(Style->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic)) )->format,( ( ::flixel::addons::ui::FontDef)(DefaultStyle->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic)) )->format);
            				}
            			}
            		}
HXLINE( 683)		if (::hx::IsNull( Style->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic) )) {
HXLINE( 685)			Style->__SetField(HX_("titleFormat",ef,5a,1a,94), ::flixel::addons::ui::FontDef_obj::__alloc( HX_CTX ,null(),null(),null(), ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),8,-16777216,null(),null(),null(),null(),null(),null(),null(),null(),null(),null()),null()),::hx::paccDynamic);
            		}
HXLINE( 687)		if (::hx::IsNull( Style->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic) )) {
HXLINE( 689)			Style->__SetField(HX_("bodyFormat",79,23,ab,44), ::flixel::addons::ui::FontDef_obj::__alloc( HX_CTX ,null(),null(),null(), ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),8,-16777216,null(),null(),null(),null(),null(),null(),null(),null(),null(),null()),null()),::hx::paccDynamic);
            		}
HXLINE( 692)		if (::hx::IsNull( Style->__Field(HX_("titleBorder",a4,18,a6,fa),::hx::paccDynamic) )) {
HXLINE( 694)			Style->__SetField(HX_("titleBorder",a4,18,a6,fa), ::flixel::addons::ui::BorderDef_obj::__alloc( HX_CTX ,::flixel::text::FlxTextBorderStyle_obj::NONE_dyn(),0,0,1),::hx::paccDynamic);
            		}
HXLINE( 696)		if (::hx::IsNull( Style->__Field(HX_("bodyBorder",2e,e1,36,ab),::hx::paccDynamic) )) {
HXLINE( 698)			Style->__SetField(HX_("bodyBorder",2e,e1,36,ab), ::flixel::addons::ui::BorderDef_obj::__alloc( HX_CTX ,::flixel::text::FlxTextBorderStyle_obj::NONE_dyn(),0,0,1),::hx::paccDynamic);
            		}
HXLINE( 700)		if (::hx::IsNull( Style->__Field(HX_("titleOffset",4b,63,cb,f6),::hx::paccDynamic) )) {
HXLINE( 702)			Style->__SetField(HX_("titleOffset",4b,63,cb,f6), ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,0,0),::hx::paccDynamic);
            		}
HXLINE( 704)		if (::hx::IsNull( Style->__Field(HX_("bodyOffset",d5,2b,5c,a7),::hx::paccDynamic) )) {
HXLINE( 706)			Style->__SetField(HX_("bodyOffset",d5,2b,5c,a7), ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,0,0),::hx::paccDynamic);
            		}
HXLINE( 708)		if (::hx::IsNull( Style->__Field(HX_("background",ee,93,1d,26),::hx::paccDynamic) )) {
HXLINE( 710)			Style->__SetField(HX_("background",ee,93,1d,26),16777162,::hx::paccDynamic);
            		}
HXLINE( 712)		if (::hx::IsNull( Style->__Field(HX_("borderColor",d7,3c,d5,d6),::hx::paccDynamic) )) {
HXLINE( 714)			Style->__SetField(HX_("borderColor",d7,3c,d5,d6),-16777216,::hx::paccDynamic);
            		}
HXLINE( 716)		if (::hx::IsNull( Style->__Field(HX_("arrow",c9,79,8f,25),::hx::paccDynamic) )) {
HXLINE( 718)			Style->__SetField(HX_("arrow",c9,79,8f,25),HX_("flixel/flixel-ui/img/tooltip_arrow.png",df,64,ce,50),::hx::paccDynamic);
            		}
HXLINE( 721)		bool _hx_tmp;
HXDLIN( 721)		if (::hx::IsNotNull( Style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic) )) {
HXLINE( 721)			_hx_tmp = ::hx::IsLess( Style->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic),0 );
            		}
            		else {
HXLINE( 721)			_hx_tmp = true;
            		}
HXDLIN( 721)		if (_hx_tmp) {
HXLINE( 723)			Style->__SetField(HX_("borderSize",cd,ff,ed,06),1,::hx::paccDynamic);
            		}
HXLINE( 725)		bool _hx_tmp1;
HXDLIN( 725)		if (::hx::IsNotNull( Style->__Field(HX_("titleWidth",4e,c9,47,dc),::hx::paccDynamic) )) {
HXLINE( 725)			_hx_tmp1 = ::hx::IsLess( Style->__Field(HX_("titleWidth",4e,c9,47,dc),::hx::paccDynamic),0 );
            		}
            		else {
HXLINE( 725)			_hx_tmp1 = true;
            		}
HXDLIN( 725)		if (_hx_tmp1) {
HXLINE( 727)			Style->__SetField(HX_("titleWidth",4e,c9,47,dc),100,::hx::paccDynamic);
            		}
HXLINE( 729)		bool _hx_tmp2;
HXDLIN( 729)		if (::hx::IsNotNull( Style->__Field(HX_("bodyWidth",04,e0,6a,8a),::hx::paccDynamic) )) {
HXLINE( 729)			_hx_tmp2 = ::hx::IsLess( Style->__Field(HX_("bodyWidth",04,e0,6a,8a),::hx::paccDynamic),0 );
            		}
            		else {
HXLINE( 729)			_hx_tmp2 = true;
            		}
HXDLIN( 729)		if (_hx_tmp2) {
HXLINE( 731)			Style->__SetField(HX_("bodyWidth",04,e0,6a,8a),100,::hx::paccDynamic);
            		}
HXLINE( 733)		if (::hx::IsNull( Style->__Field(HX_("autoSizeHorizontal",d4,74,ce,9f),::hx::paccDynamic) )) {
HXLINE( 735)			Style->__SetField(HX_("autoSizeHorizontal",d4,74,ce,9f),true,::hx::paccDynamic);
            		}
HXLINE( 737)		if (::hx::IsNull( Style->__Field(HX_("autoSizeVertical",66,58,0d,52),::hx::paccDynamic) )) {
HXLINE( 739)			Style->__SetField(HX_("autoSizeVertical",66,58,0d,52),true,::hx::paccDynamic);
            		}
HXLINE( 742)		bool _hx_tmp3;
HXDLIN( 742)		if (::hx::IsNotNull( Style->__Field(HX_("leftPadding",8a,98,10,d0),::hx::paccDynamic) )) {
HXLINE( 742)			_hx_tmp3 = ::hx::IsLess( Style->__Field(HX_("leftPadding",8a,98,10,d0),::hx::paccDynamic),0 );
            		}
            		else {
HXLINE( 742)			_hx_tmp3 = true;
            		}
HXDLIN( 742)		if (_hx_tmp3) {
HXLINE( 744)			Style->__SetField(HX_("leftPadding",8a,98,10,d0),0,::hx::paccDynamic);
            		}
HXLINE( 746)		bool _hx_tmp4;
HXDLIN( 746)		if (::hx::IsNotNull( Style->__Field(HX_("rightPadding",55,e9,2b,bb),::hx::paccDynamic) )) {
HXLINE( 746)			_hx_tmp4 = ::hx::IsLess( Style->__Field(HX_("rightPadding",55,e9,2b,bb),::hx::paccDynamic),0 );
            		}
            		else {
HXLINE( 746)			_hx_tmp4 = true;
            		}
HXDLIN( 746)		if (_hx_tmp4) {
HXLINE( 748)			Style->__SetField(HX_("rightPadding",55,e9,2b,bb),0,::hx::paccDynamic);
            		}
HXLINE( 750)		bool _hx_tmp5;
HXDLIN( 750)		if (::hx::IsNotNull( Style->__Field(HX_("topPadding",bc,47,4b,3c),::hx::paccDynamic) )) {
HXLINE( 750)			_hx_tmp5 = ::hx::IsLess( Style->__Field(HX_("topPadding",bc,47,4b,3c),::hx::paccDynamic),0 );
            		}
            		else {
HXLINE( 750)			_hx_tmp5 = true;
            		}
HXDLIN( 750)		if (_hx_tmp5) {
HXLINE( 752)			Style->__SetField(HX_("topPadding",bc,47,4b,3c),0,::hx::paccDynamic);
            		}
HXLINE( 754)		bool _hx_tmp6;
HXDLIN( 754)		if (::hx::IsNotNull( Style->__Field(HX_("leftPadding",8a,98,10,d0),::hx::paccDynamic) )) {
HXLINE( 754)			_hx_tmp6 = ::hx::IsLess( Style->__Field(HX_("bottomPadding",26,1e,2d,2b),::hx::paccDynamic),0 );
            		}
            		else {
HXLINE( 754)			_hx_tmp6 = true;
            		}
HXDLIN( 754)		if (_hx_tmp6) {
HXLINE( 756)			Style->__SetField(HX_("bottomPadding",26,1e,2d,2b),0,::hx::paccDynamic);
            		}
HXLINE( 759)		return Style;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUITooltip_obj,styleFix,return )

 ::Dynamic FlxUITooltip_obj::cloneStyle( ::Dynamic s){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_763_cloneStyle)
HXLINE( 764)		 ::flixel::addons::ui::FontDef tf;
HXDLIN( 764)		if (::hx::IsNotNull( s->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic) )) {
HXLINE( 764)			tf = ( ( ::flixel::addons::ui::FontDef)(s->__Field(HX_("titleFormat",ef,5a,1a,94),::hx::paccDynamic)) )->clone();
            		}
            		else {
HXLINE( 764)			tf = null();
            		}
HXLINE( 765)		 ::flixel::addons::ui::FontDef bf;
HXDLIN( 765)		if (::hx::IsNotNull( s->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic) )) {
HXLINE( 765)			bf = ( ( ::flixel::addons::ui::FontDef)(s->__Field(HX_("bodyFormat",79,23,ab,44),::hx::paccDynamic)) )->clone();
            		}
            		else {
HXLINE( 765)			bf = null();
            		}
HXLINE( 770)		 ::Dynamic s1 = s->__Field(HX_("borderSize",cd,ff,ed,06),::hx::paccDynamic);
HXLINE( 771)		 ::Dynamic s2 = s->__Field(HX_("titleWidth",4e,c9,47,dc),::hx::paccDynamic);
HXLINE( 772)		 ::Dynamic s3 = s->__Field(HX_("bodyWidth",04,e0,6a,8a),::hx::paccDynamic);
HXLINE( 773)		 ::Dynamic s4 = s->__Field(HX_("background",ee,93,1d,26),::hx::paccDynamic);
HXLINE( 774)		 ::Dynamic s5 = s->__Field(HX_("borderColor",d7,3c,d5,d6),::hx::paccDynamic);
HXLINE( 775)		 ::Dynamic s6 =  ::Dynamic(s->__Field(HX_("arrow",c9,79,8f,25),::hx::paccDynamic));
HXLINE( 776)		 ::flixel::math::FlxPoint obj = ( ( ::flixel::math::FlxPoint)(s->__Field(HX_("titleOffset",4b,63,cb,f6),::hx::paccDynamic)) )->copyTo(null());
HXLINE( 777)		 ::flixel::math::FlxPoint obj1 = ( ( ::flixel::math::FlxPoint)(s->__Field(HX_("bodyOffset",d5,2b,5c,a7),::hx::paccDynamic)) )->copyTo(null());
HXLINE( 778)		 ::flixel::addons::ui::BorderDef obj2 = ( ( ::flixel::addons::ui::BorderDef)(s->__Field(HX_("titleBorder",a4,18,a6,fa),::hx::paccDynamic)) )->clone();
HXLINE( 779)		 ::flixel::addons::ui::BorderDef obj3 = ( ( ::flixel::addons::ui::BorderDef)(s->__Field(HX_("bodyBorder",2e,e1,36,ab),::hx::paccDynamic)) )->clone();
HXLINE( 767)		 ::Dynamic obj4 =  ::Dynamic(::hx::Anon_obj::Create(18)
            			->setFixed(0,HX_("bodyWidth",04,e0,6a,8a),s3)
            			->setFixed(1,HX_("titleFormat",ef,5a,1a,94),tf)
            			->setFixed(2,HX_("autoSizeHorizontal",d4,74,ce,9f), ::Dynamic(s->__Field(HX_("autoSizeHorizontal",d4,74,ce,9f),::hx::paccDynamic)))
            			->setFixed(3,HX_("bodyOffset",d5,2b,5c,a7),obj1)
            			->setFixed(4,HX_("bodyBorder",2e,e1,36,ab),obj3)
            			->setFixed(5,HX_("rightPadding",55,e9,2b,bb), ::Dynamic(s->__Field(HX_("rightPadding",55,e9,2b,bb),::hx::paccDynamic)))
            			->setFixed(6,HX_("leftPadding",8a,98,10,d0), ::Dynamic(s->__Field(HX_("leftPadding",8a,98,10,d0),::hx::paccDynamic)))
            			->setFixed(7,HX_("borderColor",d7,3c,d5,d6),s5)
            			->setFixed(8,HX_("titleWidth",4e,c9,47,dc),s2)
            			->setFixed(9,HX_("titleOffset",4b,63,cb,f6),obj)
            			->setFixed(10,HX_("titleBorder",a4,18,a6,fa),obj2)
            			->setFixed(11,HX_("borderSize",cd,ff,ed,06),s1)
            			->setFixed(12,HX_("arrow",c9,79,8f,25),s6)
            			->setFixed(13,HX_("background",ee,93,1d,26),s4)
            			->setFixed(14,HX_("bottomPadding",26,1e,2d,2b), ::Dynamic(s->__Field(HX_("bottomPadding",26,1e,2d,2b),::hx::paccDynamic)))
            			->setFixed(15,HX_("topPadding",bc,47,4b,3c), ::Dynamic(s->__Field(HX_("topPadding",bc,47,4b,3c),::hx::paccDynamic)))
            			->setFixed(16,HX_("bodyFormat",79,23,ab,44),bf)
            			->setFixed(17,HX_("autoSizeVertical",66,58,0d,52), ::Dynamic(s->__Field(HX_("autoSizeVertical",66,58,0d,52),::hx::paccDynamic))));
HXLINE( 787)		return obj4;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxUITooltip_obj,cloneStyle,return )

void FlxUITooltip_obj::fillFontDefNulls( ::flixel::addons::ui::FontDef a, ::flixel::addons::ui::FontDef b){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_791_fillFontDefNulls)
HXLINE( 792)		if ((a->get_size() == 0)) {
HXLINE( 793)			a->set_size(b->get_size());
            		}
HXLINE( 794)		bool _hx_tmp;
HXDLIN( 794)		if (::hx::IsNotNull( a->name )) {
HXLINE( 794)			_hx_tmp = (a->name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 794)			_hx_tmp = true;
            		}
HXDLIN( 794)		if (_hx_tmp) {
HXLINE( 795)			a->name = b->name;
            		}
HXLINE( 796)		bool _hx_tmp1;
HXDLIN( 796)		if (::hx::IsNotNull( a->file )) {
HXLINE( 796)			_hx_tmp1 = (a->file == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 796)			_hx_tmp1 = true;
            		}
HXDLIN( 796)		if (_hx_tmp1) {
HXLINE( 797)			a->file = b->file;
            		}
HXLINE( 798)		bool _hx_tmp2;
HXDLIN( 798)		if (::hx::IsNotNull( a->extension )) {
HXLINE( 798)			_hx_tmp2 = (a->extension == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 798)			_hx_tmp2 = true;
            		}
HXDLIN( 798)		if (_hx_tmp2) {
HXLINE( 799)			a->extension = b->extension;
            		}
HXLINE( 800)		if (::hx::IsNull( a->border )) {
HXLINE( 801)			 ::flixel::addons::ui::BorderDef _hx_tmp;
HXDLIN( 801)			if (::hx::IsNotNull( b->border )) {
HXLINE( 801)				_hx_tmp = b->border->clone();
            			}
            			else {
HXLINE( 801)				_hx_tmp = null();
            			}
HXDLIN( 801)			a->border = _hx_tmp;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUITooltip_obj,fillFontDefNulls,(void))

void FlxUITooltip_obj::fillFormatNulls( ::openfl::text::TextFormat a, ::openfl::text::TextFormat b){
            	HX_STACKFRAME(&_hx_pos_7b5caaba09e0a704_805_fillFormatNulls)
HXLINE( 806)		if (::hx::IsNull( a->align )) {
HXLINE( 807)			a->align = b->align;
            		}
HXLINE( 808)		if (::hx::IsNull( a->blockIndent )) {
HXLINE( 809)			a->blockIndent = b->blockIndent;
            		}
HXLINE( 810)		if (::hx::IsNull( a->bold )) {
HXLINE( 811)			a->bold = b->bold;
            		}
HXLINE( 812)		if (::hx::IsNull( a->bullet )) {
HXLINE( 813)			a->bullet = b->bullet;
            		}
HXLINE( 814)		if (::hx::IsNull( a->color )) {
HXLINE( 815)			a->color = b->color;
            		}
HXLINE( 816)		if (::hx::IsNull( a->font )) {
HXLINE( 817)			a->font = b->font;
            		}
HXLINE( 818)		if (::hx::IsNull( a->indent )) {
HXLINE( 819)			a->indent = b->indent;
            		}
HXLINE( 820)		if (::hx::IsNull( a->italic )) {
HXLINE( 821)			a->italic = b->italic;
            		}
HXLINE( 822)		if (::hx::IsNull( a->kerning )) {
HXLINE( 823)			a->kerning = b->kerning;
            		}
HXLINE( 824)		if (::hx::IsNull( a->leading )) {
HXLINE( 825)			a->leading = b->leading;
            		}
HXLINE( 826)		if (::hx::IsNull( a->leftMargin )) {
HXLINE( 827)			a->leftMargin = b->leftMargin;
            		}
HXLINE( 828)		if (::hx::IsNull( a->letterSpacing )) {
HXLINE( 829)			a->letterSpacing = b->letterSpacing;
            		}
HXLINE( 830)		if (::hx::IsNull( a->rightMargin )) {
HXLINE( 831)			a->rightMargin = b->rightMargin;
            		}
HXLINE( 832)		if (::hx::IsNull( a->size )) {
HXLINE( 833)			a->size = b->size;
            		}
HXLINE( 834)		if (::hx::IsNull( a->tabStops )) {
HXLINE( 835)			a->tabStops = b->tabStops;
            		}
HXLINE( 836)		if (::hx::IsNull( a->target )) {
HXLINE( 837)			a->target = b->target;
            		}
HXLINE( 838)		if (::hx::IsNull( a->underline )) {
HXLINE( 839)			a->underline = b->underline;
            		}
HXLINE( 840)		if (::hx::IsNull( a->url )) {
HXLINE( 841)			a->url = b->url;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxUITooltip_obj,fillFormatNulls,(void))


::hx::ObjectPtr< FlxUITooltip_obj > FlxUITooltip_obj::__new(int Width,int Height, ::flixel::addons::ui::Anchor Anchor_, ::Dynamic Style) {
	::hx::ObjectPtr< FlxUITooltip_obj > __this = new FlxUITooltip_obj();
	__this->__construct(Width,Height,Anchor_,Style);
	return __this;
}

::hx::ObjectPtr< FlxUITooltip_obj > FlxUITooltip_obj::__alloc(::hx::Ctx *_hx_ctx,int Width,int Height, ::flixel::addons::ui::Anchor Anchor_, ::Dynamic Style) {
	FlxUITooltip_obj *__this = (FlxUITooltip_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxUITooltip_obj), true, "flixel.addons.ui.FlxUITooltip"));
	*(void **)__this = FlxUITooltip_obj::_hx_vtable;
	__this->__construct(Width,Height,Anchor_,Style);
	return __this;
}

FlxUITooltip_obj::FlxUITooltip_obj()
{
}

void FlxUITooltip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxUITooltip);
	HX_MARK_MEMBER_NAME(style,"style");
	HX_MARK_MEMBER_NAME(anchor,"anchor");
	HX_MARK_MEMBER_NAME(_bkg,"_bkg");
	HX_MARK_MEMBER_NAME(_titleText,"_titleText");
	HX_MARK_MEMBER_NAME(_bodyText,"_bodyText");
	HX_MARK_MEMBER_NAME(_arrow,"_arrow");
	HX_MARK_MEMBER_NAME(_arrowBkg,"_arrowBkg");
	HX_MARK_MEMBER_NAME(_anchorArrow,"_anchorArrow");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxUITooltip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(style,"style");
	HX_VISIT_MEMBER_NAME(anchor,"anchor");
	HX_VISIT_MEMBER_NAME(_bkg,"_bkg");
	HX_VISIT_MEMBER_NAME(_titleText,"_titleText");
	HX_VISIT_MEMBER_NAME(_bodyText,"_bodyText");
	HX_VISIT_MEMBER_NAME(_arrow,"_arrow");
	HX_VISIT_MEMBER_NAME(_arrowBkg,"_arrowBkg");
	HX_VISIT_MEMBER_NAME(_anchorArrow,"_anchorArrow");
	 ::flixel::addons::ui::FlxUIGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxUITooltip_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"show") ) { return ::hx::Val( show_dyn() ); }
		if (HX_FIELD_EQ(inName,"hide") ) { return ::hx::Val( hide_dyn() ); }
		if (HX_FIELD_EQ(inName,"_bkg") ) { return ::hx::Val( _bkg ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { return ::hx::Val( style ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"anchor") ) { return ::hx::Val( anchor ); }
		if (HX_FIELD_EQ(inName,"_arrow") ) { return ::hx::Val( _arrow ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"refresh") ) { return ::hx::Val( refresh_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_style") ) { return ::hx::Val( set_style_dyn() ); }
		if (HX_FIELD_EQ(inName,"_bodyText") ) { return ::hx::Val( _bodyText ); }
		if (HX_FIELD_EQ(inName,"_arrowBkg") ) { return ::hx::Val( _arrowBkg ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_height") ) { return ::hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_anchor") ) { return ::hx::Val( set_anchor_dyn() ); }
		if (HX_FIELD_EQ(inName,"_titleText") ) { return ::hx::Val( _titleText ); }
		if (HX_FIELD_EQ(inName,"refreshBkg") ) { return ::hx::Val( refreshBkg_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getStyleKey") ) { return ::hx::Val( getStyleKey_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_anchorArrow") ) { return ::hx::Val( _anchorArrow ); }
		if (HX_FIELD_EQ(inName,"makeArrowBkg") ) { return ::hx::Val( makeArrowBkg_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getArrowAnchor") ) { return ::hx::Val( getArrowAnchor_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxUITooltip_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"styleFix") ) { outValue = styleFix_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cloneStyle") ) { outValue = cloneStyle_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"fillFormatNulls") ) { outValue = fillFormatNulls_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fillFontDefNulls") ) { outValue = fillFontDefNulls_dyn(); return true; }
	}
	return false;
}

::hx::Val FlxUITooltip_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_bkg") ) { _bkg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"style") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_style(inValue.Cast<  ::Dynamic >()) );style=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"anchor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_anchor(inValue.Cast<  ::flixel::addons::ui::Anchor >()) );anchor=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_arrow") ) { _arrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_bodyText") ) { _bodyText=inValue.Cast<  ::flixel::addons::ui::FlxUIText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_arrowBkg") ) { _arrowBkg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_titleText") ) { _titleText=inValue.Cast<  ::flixel::addons::ui::FlxUIText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_anchorArrow") ) { _anchorArrow=inValue.Cast<  ::flixel::addons::ui::Anchor >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxUITooltip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("style",31,a5,1d,84));
	outFields->push(HX_("anchor",75,3a,71,60));
	outFields->push(HX_("_bkg",7f,ff,15,3f));
	outFields->push(HX_("_titleText",26,36,47,cc));
	outFields->push(HX_("_bodyText",ce,63,b3,13));
	outFields->push(HX_("_arrow",0a,c1,76,21));
	outFields->push(HX_("_arrowBkg",94,73,46,45));
	outFields->push(HX_("_anchorArrow",15,55,64,ff));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxUITooltip_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxUITooltip_obj,style),HX_("style",31,a5,1d,84)},
	{::hx::fsObject /*  ::flixel::addons::ui::Anchor */ ,(int)offsetof(FlxUITooltip_obj,anchor),HX_("anchor",75,3a,71,60)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FlxUITooltip_obj,_bkg),HX_("_bkg",7f,ff,15,3f)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIText */ ,(int)offsetof(FlxUITooltip_obj,_titleText),HX_("_titleText",26,36,47,cc)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIText */ ,(int)offsetof(FlxUITooltip_obj,_bodyText),HX_("_bodyText",ce,63,b3,13)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FlxUITooltip_obj,_arrow),HX_("_arrow",0a,c1,76,21)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FlxUITooltip_obj,_arrowBkg),HX_("_arrowBkg",94,73,46,45)},
	{::hx::fsObject /*  ::flixel::addons::ui::Anchor */ ,(int)offsetof(FlxUITooltip_obj,_anchorArrow),HX_("_anchorArrow",15,55,64,ff)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxUITooltip_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxUITooltip_obj_sMemberFields[] = {
	HX_("style",31,a5,1d,84),
	HX_("anchor",75,3a,71,60),
	HX_("show",fd,d4,52,4c),
	HX_("get_height",b0,77,d3,f2),
	HX_("hide",c2,34,0e,45),
	HX_("set_anchor",b2,48,76,54),
	HX_("set_style",94,ed,17,ab),
	HX_("_bkg",7f,ff,15,3f),
	HX_("_titleText",26,36,47,cc),
	HX_("_bodyText",ce,63,b3,13),
	HX_("_arrow",0a,c1,76,21),
	HX_("_arrowBkg",94,73,46,45),
	HX_("_anchorArrow",15,55,64,ff),
	HX_("refresh",db,d9,20,ed),
	HX_("refreshBkg",63,f3,20,07),
	HX_("getStyleKey",a4,f3,c7,82),
	HX_("makeArrowBkg",43,10,89,42),
	HX_("getArrowAnchor",28,78,ee,a2),
	::String(null()) };

::hx::Class FlxUITooltip_obj::__mClass;

static ::String FlxUITooltip_obj_sStaticFields[] = {
	HX_("styleFix",24,69,d0,5c),
	HX_("cloneStyle",94,b0,13,7f),
	HX_("fillFontDefNulls",19,18,93,af),
	HX_("fillFormatNulls",92,13,58,a0),
	::String(null())
};

void FlxUITooltip_obj::__register()
{
	FlxUITooltip_obj _hx_dummy;
	FlxUITooltip_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.ui.FlxUITooltip",2e,b1,3d,94);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxUITooltip_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxUITooltip_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxUITooltip_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxUITooltip_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxUITooltip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxUITooltip_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace ui
