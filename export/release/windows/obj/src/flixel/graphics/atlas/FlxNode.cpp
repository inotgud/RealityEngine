// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_graphics_atlas_FlxAtlas
#include <flixel/graphics/atlas/FlxAtlas.h>
#endif
#ifndef INCLUDED_flixel_graphics_atlas_FlxNode
#include <flixel/graphics/atlas/FlxNode.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_95af95d3889446aa_84_new,"flixel.graphics.atlas.FlxNode","new",0xeedfd332,"flixel.graphics.atlas.FlxNode.new","flixel/graphics/atlas/FlxNode.hx",84,0x6d18bb9f)
HX_LOCAL_STACK_FRAME(_hx_pos_95af95d3889446aa_95_destroy,"flixel.graphics.atlas.FlxNode","destroy",0x006100cc,"flixel.graphics.atlas.FlxNode.destroy","flixel/graphics/atlas/FlxNode.hx",95,0x6d18bb9f)
namespace flixel{
namespace graphics{
namespace atlas{

void FlxNode_obj::__construct( ::flixel::math::FlxRect rect, ::flixel::graphics::atlas::FlxAtlas atlas,::hx::Null< bool >  __o_filled,::String __o_key,::hx::Null< bool >  __o_rotated){
            		bool filled = __o_filled.Default(false);
            		::String key = __o_key;
            		if (::hx::IsNull(__o_key)) key = HX_("",00,00,00,00);
            		bool rotated = __o_rotated.Default(false);
            	HX_STACKFRAME(&_hx_pos_95af95d3889446aa_84_new)
HXLINE(  85)		this->filled = filled;
HXLINE(  86)		this->left = null();
HXLINE(  87)		this->right = null();
HXLINE(  88)		this->rect = rect;
HXLINE(  89)		this->key = key;
HXLINE(  90)		this->atlas = atlas;
HXLINE(  91)		this->rotated = rotated;
            	}

Dynamic FlxNode_obj::__CreateEmpty() { return new FlxNode_obj; }

void *FlxNode_obj::_hx_vtable = 0;

Dynamic FlxNode_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxNode_obj > _hx_result = new FlxNode_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool FlxNode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4e838670;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_graphics_atlas_FlxNode__hx_flixel_util_IFlxDestroyable= {
	( void (::hx::Object::*)())&::flixel::graphics::atlas::FlxNode_obj::destroy,
};

void *FlxNode_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_graphics_atlas_FlxNode__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxNode_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_95af95d3889446aa_95_destroy)
HXLINE(  96)		this->key = null();
HXLINE(  97)		this->left = null();
HXLINE(  98)		this->right = null();
HXLINE(  99)		this->rect = null();
HXLINE( 100)		this->atlas = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxNode_obj,destroy,(void))


::hx::ObjectPtr< FlxNode_obj > FlxNode_obj::__new( ::flixel::math::FlxRect rect, ::flixel::graphics::atlas::FlxAtlas atlas,::hx::Null< bool >  __o_filled,::String __o_key,::hx::Null< bool >  __o_rotated) {
	::hx::ObjectPtr< FlxNode_obj > __this = new FlxNode_obj();
	__this->__construct(rect,atlas,__o_filled,__o_key,__o_rotated);
	return __this;
}

::hx::ObjectPtr< FlxNode_obj > FlxNode_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::math::FlxRect rect, ::flixel::graphics::atlas::FlxAtlas atlas,::hx::Null< bool >  __o_filled,::String __o_key,::hx::Null< bool >  __o_rotated) {
	FlxNode_obj *__this = (FlxNode_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxNode_obj), true, "flixel.graphics.atlas.FlxNode"));
	*(void **)__this = FlxNode_obj::_hx_vtable;
	__this->__construct(rect,atlas,__o_filled,__o_key,__o_rotated);
	return __this;
}

FlxNode_obj::FlxNode_obj()
{
}

void FlxNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxNode);
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(right,"right");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(key,"key");
	HX_MARK_MEMBER_NAME(filled,"filled");
	HX_MARK_MEMBER_NAME(atlas,"atlas");
	HX_MARK_MEMBER_NAME(rotated,"rotated");
	HX_MARK_END_CLASS();
}

void FlxNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(right,"right");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(key,"key");
	HX_VISIT_MEMBER_NAME(filled,"filled");
	HX_VISIT_MEMBER_NAME(atlas,"atlas");
	HX_VISIT_MEMBER_NAME(rotated,"rotated");
}

::hx::Val FlxNode_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { return ::hx::Val( key ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left ); }
		if (HX_FIELD_EQ(inName,"rect") ) { return ::hx::Val( rect ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right ); }
		if (HX_FIELD_EQ(inName,"atlas") ) { return ::hx::Val( atlas ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"filled") ) { return ::hx::Val( filled ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rotated") ) { return ::hx::Val( rotated ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxNode_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { key=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast<  ::flixel::graphics::atlas::FlxNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { right=inValue.Cast<  ::flixel::graphics::atlas::FlxNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"atlas") ) { atlas=inValue.Cast<  ::flixel::graphics::atlas::FlxAtlas >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"filled") ) { filled=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rotated") ) { rotated=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("right",dc,0b,64,e9));
	outFields->push(HX_("rect",24,4d,a7,4b));
	outFields->push(HX_("key",9f,89,51,00));
	outFields->push(HX_("filled",a2,0d,2f,85));
	outFields->push(HX_("atlas",4b,4d,dd,26));
	outFields->push(HX_("rotated",a9,49,1d,f1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxNode_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::graphics::atlas::FlxNode */ ,(int)offsetof(FlxNode_obj,left),HX_("left",07,08,b0,47)},
	{::hx::fsObject /*  ::flixel::graphics::atlas::FlxNode */ ,(int)offsetof(FlxNode_obj,right),HX_("right",dc,0b,64,e9)},
	{::hx::fsObject /*  ::flixel::math::FlxRect */ ,(int)offsetof(FlxNode_obj,rect),HX_("rect",24,4d,a7,4b)},
	{::hx::fsString,(int)offsetof(FlxNode_obj,key),HX_("key",9f,89,51,00)},
	{::hx::fsBool,(int)offsetof(FlxNode_obj,filled),HX_("filled",a2,0d,2f,85)},
	{::hx::fsObject /*  ::flixel::graphics::atlas::FlxAtlas */ ,(int)offsetof(FlxNode_obj,atlas),HX_("atlas",4b,4d,dd,26)},
	{::hx::fsBool,(int)offsetof(FlxNode_obj,rotated),HX_("rotated",a9,49,1d,f1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxNode_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxNode_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("right",dc,0b,64,e9),
	HX_("rect",24,4d,a7,4b),
	HX_("key",9f,89,51,00),
	HX_("filled",a2,0d,2f,85),
	HX_("atlas",4b,4d,dd,26),
	HX_("rotated",a9,49,1d,f1),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class FlxNode_obj::__mClass;

void FlxNode_obj::__register()
{
	FlxNode_obj _hx_dummy;
	FlxNode_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.graphics.atlas.FlxNode",40,12,0e,21);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxNode_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxNode_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxNode_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace graphics
} // end namespace atlas
