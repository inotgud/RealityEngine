// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrameCollectionType
#include <flixel/graphics/frames/FlxFrameCollectionType.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxTileFrames
#include <flixel/graphics/frames/FlxTileFrames.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_43be537ea661b39f_17_new,"flixel.graphics.frames.FlxTileFrames","new",0xee264501,"flixel.graphics.frames.FlxTileFrames.new","flixel/graphics/frames/FlxTileFrames.hx",17,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_488_equals,"flixel.graphics.frames.FlxTileFrames","equals",0xd88c543e,"flixel.graphics.frames.FlxTileFrames.equals","flixel/graphics/frames/FlxTileFrames.hx",488,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_541_destroy,"flixel.graphics.frames.FlxTileFrames","destroy",0x9226061b,"flixel.graphics.frames.FlxTileFrames.destroy","flixel/graphics/frames/FlxTileFrames.hx",541,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_261_fromGraphic,"flixel.graphics.frames.FlxTileFrames","fromGraphic",0x29813bff,"flixel.graphics.frames.FlxTileFrames.fromGraphic","flixel/graphics/frames/FlxTileFrames.hx",261,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_472_findFrame,"flixel.graphics.frames.FlxTileFrames","findFrame",0xed9bcc95,"flixel.graphics.frames.FlxTileFrames.findFrame","flixel/graphics/frames/FlxTileFrames.hx",472,0x562d6bb0)
namespace flixel{
namespace graphics{
namespace frames{

void FlxTileFrames_obj::__construct( ::flixel::graphics::FlxGraphic parent, ::flixel::math::FlxPoint border){
            	HX_STACKFRAME(&_hx_pos_43be537ea661b39f_17_new)
HXLINE(  42)		this->numCols = 0;
HXLINE(  40)		this->numRows = 0;
HXLINE(  46)		super::__construct(parent,::flixel::graphics::frames::FlxFrameCollectionType_obj::TILES_dyn(),border);
            	}

Dynamic FlxTileFrames_obj::__CreateEmpty() { return new FlxTileFrames_obj; }

void *FlxTileFrames_obj::_hx_vtable = 0;

Dynamic FlxTileFrames_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxTileFrames_obj > _hx_result = new FlxTileFrames_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxTileFrames_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x05e81255) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x05e81255;
	} else {
		return inClassId==(int)0x7907b929;
	}
}

bool FlxTileFrames_obj::equals( ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxRect region, ::flixel::graphics::frames::FlxFrame atlasFrame, ::flixel::math::FlxPoint tileSpacing, ::flixel::math::FlxPoint border){
            	HX_STACKFRAME(&_hx_pos_43be537ea661b39f_488_equals)
HXLINE( 489)		bool _hx_tmp;
HXDLIN( 489)		if (::hx::IsNull( this->region )) {
HXLINE( 489)			_hx_tmp = ::hx::IsNull( this->atlasFrame );
            		}
            		else {
HXLINE( 489)			_hx_tmp = false;
            		}
HXDLIN( 489)		if (_hx_tmp) {
HXLINE( 491)			return false;
            		}
HXLINE( 494)		if (::hx::IsNotNull( atlasFrame )) {
HXLINE( 496)			region = atlasFrame->frame;
            		}
HXLINE( 499)		if (::hx::IsNull( region )) {
HXLINE( 500)			Float Width = ( (Float)(this->parent->width) );
HXDLIN( 500)			Float Height = ( (Float)(this->parent->height) );
HXDLIN( 500)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 500)			_this->x = ( (Float)(0) );
HXDLIN( 500)			_this->y = ( (Float)(0) );
HXDLIN( 500)			_this->width = Width;
HXDLIN( 500)			_this->height = Height;
HXDLIN( 500)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 500)			rect->_inPool = false;
HXDLIN( 500)			 ::flixel::math::FlxRect rect1 = rect;
HXDLIN( 500)			rect1->_weak = true;
HXDLIN( 500)			region = rect1;
            		}
HXLINE( 502)		if (::hx::IsNull( tileSpacing )) {
HXLINE( 503)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 503)			point->_inPool = false;
HXDLIN( 503)			 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 503)			point1->_weak = true;
HXDLIN( 503)			tileSpacing = point1;
            		}
HXLINE( 505)		if (::hx::IsNull( border )) {
HXLINE( 506)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 506)			point->_inPool = false;
HXDLIN( 506)			 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 506)			point1->_weak = true;
HXDLIN( 506)			border = point1;
            		}
HXLINE( 508)		bool _hx_tmp1;
HXDLIN( 508)		bool _hx_tmp2;
HXDLIN( 508)		bool _hx_tmp3;
HXDLIN( 508)		if (::hx::IsEq( this->atlasFrame,atlasFrame )) {
HXLINE( 509)			 ::flixel::math::FlxRect _this = this->region;
HXDLIN( 509)			bool result;
HXDLIN( 509)			bool result1;
HXDLIN( 509)			bool result2;
HXDLIN( 509)			if ((::Math_obj::abs((_this->x - region->x)) <= ((Float)0.0000001))) {
HXLINE( 509)				result2 = (::Math_obj::abs((_this->y - region->y)) <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 509)				result2 = false;
            			}
HXDLIN( 509)			if (result2) {
HXLINE( 509)				result1 = (::Math_obj::abs((_this->width - region->width)) <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 509)				result1 = false;
            			}
HXDLIN( 509)			if (result1) {
HXLINE( 509)				result = (::Math_obj::abs((_this->height - region->height)) <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 509)				result = false;
            			}
HXDLIN( 509)			if (region->_weak) {
HXLINE( 509)				if (!(region->_inPool)) {
HXLINE( 509)					region->_inPool = true;
HXDLIN( 509)					region->_weak = false;
HXDLIN( 509)					::flixel::math::FlxRect_obj::_pool->putUnsafe(region);
            				}
            			}
HXLINE( 508)			_hx_tmp3 = result;
            		}
            		else {
HXLINE( 508)			_hx_tmp3 = false;
            		}
HXDLIN( 508)		if (_hx_tmp3) {
HXLINE( 510)			 ::flixel::math::FlxPoint _this = this->tileSize;
HXDLIN( 510)			bool result;
HXDLIN( 510)			if ((::Math_obj::abs((_this->x - tileSize->x)) <= ((Float)0.0000001))) {
HXLINE( 510)				result = (::Math_obj::abs((_this->y - tileSize->y)) <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 510)				result = false;
            			}
HXDLIN( 510)			if (tileSize->_weak) {
HXLINE( 510)				tileSize->put();
            			}
HXLINE( 508)			_hx_tmp2 = result;
            		}
            		else {
HXLINE( 508)			_hx_tmp2 = false;
            		}
HXDLIN( 508)		if (_hx_tmp2) {
HXLINE( 511)			 ::flixel::math::FlxPoint _this = this->tileSpacing;
HXDLIN( 511)			bool result;
HXDLIN( 511)			if ((::Math_obj::abs((_this->x - tileSpacing->x)) <= ((Float)0.0000001))) {
HXLINE( 511)				result = (::Math_obj::abs((_this->y - tileSpacing->y)) <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 511)				result = false;
            			}
HXDLIN( 511)			if (tileSpacing->_weak) {
HXLINE( 511)				tileSpacing->put();
            			}
HXLINE( 508)			_hx_tmp1 = result;
            		}
            		else {
HXLINE( 508)			_hx_tmp1 = false;
            		}
HXDLIN( 508)		if (_hx_tmp1) {
HXLINE( 512)			 ::flixel::math::FlxPoint _this = this->border;
HXDLIN( 512)			bool result;
HXDLIN( 512)			if ((::Math_obj::abs((_this->x - border->x)) <= ((Float)0.0000001))) {
HXLINE( 512)				result = (::Math_obj::abs((_this->y - border->y)) <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 512)				result = false;
            			}
HXDLIN( 512)			if (border->_weak) {
HXLINE( 512)				border->put();
            			}
HXDLIN( 512)			return result;
            		}
            		else {
HXLINE( 508)			return false;
            		}
HXDLIN( 508)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxTileFrames_obj,equals,return )

void FlxTileFrames_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_43be537ea661b39f_541_destroy)
HXLINE( 542)		this->super::destroy();
HXLINE( 543)		this->atlasFrame = null();
HXLINE( 544)		this->region = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->region)) );
HXLINE( 545)		this->tileSize = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->tileSize)) );
HXLINE( 546)		this->tileSpacing = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->tileSpacing)) );
            	}


 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::fromGraphic( ::flixel::graphics::FlxGraphic graphic, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxRect region, ::flixel::math::FlxPoint tileSpacing){
            	HX_GC_STACKFRAME(&_hx_pos_43be537ea661b39f_261_fromGraphic)
HXLINE( 263)		 ::flixel::graphics::frames::FlxTileFrames tileFrames = ::flixel::graphics::frames::FlxTileFrames_obj::findFrame(graphic,tileSize,region,null(),tileSpacing,null());
HXLINE( 264)		if (::hx::IsNotNull( tileFrames )) {
HXLINE( 265)			return tileFrames;
            		}
HXLINE( 268)		if (::hx::IsNull( region )) {
HXLINE( 270)			Float Width = ( (Float)(graphic->width) );
HXDLIN( 270)			Float Height = ( (Float)(graphic->height) );
HXDLIN( 270)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 270)			_this->x = ( (Float)(0) );
HXDLIN( 270)			_this->y = ( (Float)(0) );
HXDLIN( 270)			_this->width = Width;
HXDLIN( 270)			_this->height = Height;
HXDLIN( 270)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 270)			rect->_inPool = false;
HXDLIN( 270)			region = rect;
            		}
            		else {
HXLINE( 274)			if ((region->width == 0)) {
HXLINE( 275)				region->width = (( (Float)(graphic->width) ) - region->x);
            			}
HXLINE( 277)			if ((region->height == 0)) {
HXLINE( 278)				region->height = (( (Float)(graphic->height) ) - region->y);
            			}
            		}
HXLINE( 281)		if (::hx::IsNull( tileSpacing )) {
HXLINE( 281)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(0,0);
HXDLIN( 281)			point->_inPool = false;
HXDLIN( 281)			tileSpacing = point;
            		}
HXLINE( 283)		tileFrames =  ::flixel::graphics::frames::FlxTileFrames_obj::__alloc( HX_CTX ,graphic,null());
HXLINE( 284)		tileFrames->region = region;
HXLINE( 285)		tileFrames->atlasFrame = null();
HXLINE( 286)		tileFrames->tileSize = tileSize;
HXLINE( 287)		tileFrames->tileSpacing = tileSpacing;
HXLINE( 289)		{
HXLINE( 289)			region->x = ( (Float)(::Math_obj::floor(region->x)) );
HXDLIN( 289)			region->y = ( (Float)(::Math_obj::floor(region->y)) );
HXDLIN( 289)			region->width = ( (Float)(::Math_obj::floor(region->width)) );
HXDLIN( 289)			region->height = ( (Float)(::Math_obj::floor(region->height)) );
            		}
HXLINE( 290)		{
HXLINE( 290)			tileSpacing->set_x(( (Float)(::Math_obj::floor(tileSpacing->x)) ));
HXDLIN( 290)			tileSpacing->set_y(( (Float)(::Math_obj::floor(tileSpacing->y)) ));
            		}
HXLINE( 291)		{
HXLINE( 291)			tileSize->set_x(( (Float)(::Math_obj::floor(tileSize->x)) ));
HXDLIN( 291)			tileSize->set_y(( (Float)(::Math_obj::floor(tileSize->y)) ));
            		}
HXLINE( 293)		Float spacedWidth = (tileSize->x + tileSpacing->x);
HXLINE( 294)		Float spacedHeight = (tileSize->y + tileSpacing->y);
HXLINE( 296)		int numRows;
HXDLIN( 296)		if ((tileSize->y == 0)) {
HXLINE( 296)			numRows = 1;
            		}
            		else {
HXLINE( 296)			numRows = ::Std_obj::_hx_int(((region->height + tileSpacing->y) / spacedHeight));
            		}
HXLINE( 297)		int numCols;
HXDLIN( 297)		if ((tileSize->x == 0)) {
HXLINE( 297)			numCols = 1;
            		}
            		else {
HXLINE( 297)			numCols = ::Std_obj::_hx_int(((region->width + tileSpacing->x) / spacedWidth));
            		}
HXLINE( 299)		 ::flixel::math::FlxRect tileRect;
HXLINE( 301)		{
HXLINE( 301)			int _g = 0;
HXDLIN( 301)			int _g1 = numRows;
HXDLIN( 301)			while((_g < _g1)){
HXLINE( 301)				_g = (_g + 1);
HXDLIN( 301)				int j = (_g - 1);
HXLINE( 303)				{
HXLINE( 303)					int _g1 = 0;
HXDLIN( 303)					int _g2 = numCols;
HXDLIN( 303)					while((_g1 < _g2)){
HXLINE( 303)						_g1 = (_g1 + 1);
HXDLIN( 303)						int i = (_g1 - 1);
HXLINE( 305)						Float X = (region->x + (( (Float)(i) ) * spacedWidth));
HXDLIN( 305)						Float Y = (region->y + (( (Float)(j) ) * spacedHeight));
HXDLIN( 305)						Float Width = tileSize->x;
HXDLIN( 305)						Float Height = tileSize->y;
HXDLIN( 305)						 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 305)						_this->x = X;
HXDLIN( 305)						_this->y = Y;
HXDLIN( 305)						_this->width = Width;
HXDLIN( 305)						_this->height = Height;
HXDLIN( 305)						 ::flixel::math::FlxRect rect = _this;
HXDLIN( 305)						rect->_inPool = false;
HXDLIN( 305)						tileRect = rect;
HXLINE( 306)						tileFrames->addSpriteSheetFrame(tileRect);
            					}
            				}
            			}
            		}
HXLINE( 310)		tileFrames->numCols = numCols;
HXLINE( 311)		tileFrames->numRows = numRows;
HXLINE( 312)		return tileFrames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxTileFrames_obj,fromGraphic,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::findFrame( ::flixel::graphics::FlxGraphic graphic, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxRect region, ::flixel::graphics::frames::FlxFrame atlasFrame, ::flixel::math::FlxPoint tileSpacing, ::flixel::math::FlxPoint border){
            	HX_STACKFRAME(&_hx_pos_43be537ea661b39f_472_findFrame)
HXLINE( 473)		 ::flixel::graphics::frames::FlxFrameCollectionType type = ::flixel::graphics::frames::FlxFrameCollectionType_obj::TILES_dyn();
HXDLIN( 473)		::cpp::VirtualArray collections = ( (::cpp::VirtualArray)(graphic->frameCollections->get(type)) );
HXDLIN( 473)		if (::hx::IsNull( collections )) {
HXLINE( 473)			collections = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 473)			graphic->frameCollections->set(type,collections);
            		}
HXDLIN( 473)		::Array< ::Dynamic> tileFrames = collections;
HXLINE( 475)		{
HXLINE( 475)			int _g = 0;
HXDLIN( 475)			while((_g < tileFrames->length)){
HXLINE( 475)				 ::flixel::graphics::frames::FlxTileFrames sheet = tileFrames->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxTileFrames >();
HXDLIN( 475)				_g = (_g + 1);
HXLINE( 477)				if (sheet->equals(tileSize,region,null(),tileSpacing,border)) {
HXLINE( 478)					return sheet;
            				}
            			}
            		}
HXLINE( 481)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FlxTileFrames_obj,findFrame,return )


::hx::ObjectPtr< FlxTileFrames_obj > FlxTileFrames_obj::__new( ::flixel::graphics::FlxGraphic parent, ::flixel::math::FlxPoint border) {
	::hx::ObjectPtr< FlxTileFrames_obj > __this = new FlxTileFrames_obj();
	__this->__construct(parent,border);
	return __this;
}

::hx::ObjectPtr< FlxTileFrames_obj > FlxTileFrames_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::graphics::FlxGraphic parent, ::flixel::math::FlxPoint border) {
	FlxTileFrames_obj *__this = (FlxTileFrames_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxTileFrames_obj), true, "flixel.graphics.frames.FlxTileFrames"));
	*(void **)__this = FlxTileFrames_obj::_hx_vtable;
	__this->__construct(parent,border);
	return __this;
}

FlxTileFrames_obj::FlxTileFrames_obj()
{
}

void FlxTileFrames_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTileFrames);
	HX_MARK_MEMBER_NAME(atlasFrame,"atlasFrame");
	HX_MARK_MEMBER_NAME(region,"region");
	HX_MARK_MEMBER_NAME(tileSize,"tileSize");
	HX_MARK_MEMBER_NAME(tileSpacing,"tileSpacing");
	HX_MARK_MEMBER_NAME(numRows,"numRows");
	HX_MARK_MEMBER_NAME(numCols,"numCols");
	 ::flixel::graphics::frames::FlxFramesCollection_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTileFrames_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(atlasFrame,"atlasFrame");
	HX_VISIT_MEMBER_NAME(region,"region");
	HX_VISIT_MEMBER_NAME(tileSize,"tileSize");
	HX_VISIT_MEMBER_NAME(tileSpacing,"tileSpacing");
	HX_VISIT_MEMBER_NAME(numRows,"numRows");
	HX_VISIT_MEMBER_NAME(numCols,"numCols");
	 ::flixel::graphics::frames::FlxFramesCollection_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxTileFrames_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"region") ) { return ::hx::Val( region ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return ::hx::Val( equals_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"numRows") ) { return ::hx::Val( numRows ); }
		if (HX_FIELD_EQ(inName,"numCols") ) { return ::hx::Val( numCols ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tileSize") ) { return ::hx::Val( tileSize ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"atlasFrame") ) { return ::hx::Val( atlasFrame ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"tileSpacing") ) { return ::hx::Val( tileSpacing ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxTileFrames_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"findFrame") ) { outValue = findFrame_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromGraphic") ) { outValue = fromGraphic_dyn(); return true; }
	}
	return false;
}

::hx::Val FlxTileFrames_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"region") ) { region=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"numRows") ) { numRows=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numCols") ) { numCols=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tileSize") ) { tileSize=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"atlasFrame") ) { atlasFrame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"tileSpacing") ) { tileSpacing=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTileFrames_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("atlasFrame",e2,8a,40,e9));
	outFields->push(HX_("region",f4,c0,8c,00));
	outFields->push(HX_("tileSize",0f,c7,59,86));
	outFields->push(HX_("tileSpacing",f5,71,1f,31));
	outFields->push(HX_("numRows",7f,9a,2f,9f));
	outFields->push(HX_("numCols",99,5d,45,95));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxTileFrames_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::graphics::frames::FlxFrame */ ,(int)offsetof(FlxTileFrames_obj,atlasFrame),HX_("atlasFrame",e2,8a,40,e9)},
	{::hx::fsObject /*  ::flixel::math::FlxRect */ ,(int)offsetof(FlxTileFrames_obj,region),HX_("region",f4,c0,8c,00)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(FlxTileFrames_obj,tileSize),HX_("tileSize",0f,c7,59,86)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(FlxTileFrames_obj,tileSpacing),HX_("tileSpacing",f5,71,1f,31)},
	{::hx::fsInt,(int)offsetof(FlxTileFrames_obj,numRows),HX_("numRows",7f,9a,2f,9f)},
	{::hx::fsInt,(int)offsetof(FlxTileFrames_obj,numCols),HX_("numCols",99,5d,45,95)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxTileFrames_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTileFrames_obj_sMemberFields[] = {
	HX_("atlasFrame",e2,8a,40,e9),
	HX_("region",f4,c0,8c,00),
	HX_("tileSize",0f,c7,59,86),
	HX_("tileSpacing",f5,71,1f,31),
	HX_("numRows",7f,9a,2f,9f),
	HX_("numCols",99,5d,45,95),
	HX_("equals",3f,ee,f2,bf),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class FlxTileFrames_obj::__mClass;

static ::String FlxTileFrames_obj_sStaticFields[] = {
	HX_("fromGraphic",5e,be,47,0c),
	HX_("findFrame",34,a9,7a,f5),
	::String(null())
};

void FlxTileFrames_obj::__register()
{
	FlxTileFrames_obj _hx_dummy;
	FlxTileFrames_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.graphics.frames.FlxTileFrames",8f,b0,85,cc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxTileFrames_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxTileFrames_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxTileFrames_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxTileFrames_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTileFrames_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTileFrames_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace graphics
} // end namespace frames
