// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_AnimationDebug
#include <AnimationDebug.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_iterators_MapKeyValueIterator
#include <haxe/iterators/MapKeyValueIterator.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_30_new,"AnimationDebug","new",0xa1e22d41,"AnimationDebug.new","AnimationDebug.hx",30,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_62_create,"AnimationDebug","create",0x2b9b8cbb,"AnimationDebug.create","AnimationDebug.hx",62,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_152_addOffsetUI,"AnimationDebug","addOffsetUI",0xd9d709c9,"AnimationDebug.addOffsetUI","AnimationDebug.hx",152,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_150_addOffsetUI,"AnimationDebug","addOffsetUI",0xd9d709c9,"AnimationDebug.addOffsetUI","AnimationDebug.hx",150,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_199_genBoyOffsets,"AnimationDebug","genBoyOffsets",0xa90e05a5,"AnimationDebug.genBoyOffsets","AnimationDebug.hx",199,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_221_saveBoyOffsets,"AnimationDebug","saveBoyOffsets",0x210ce730,"AnimationDebug.saveBoyOffsets","AnimationDebug.hx",221,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_244_onSaveComplete,"AnimationDebug","onSaveComplete",0x1e162994,"AnimationDebug.onSaveComplete","AnimationDebug.hx",244,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_256_onSaveCancel,"AnimationDebug","onSaveCancel",0x5a6a9995,"AnimationDebug.onSaveCancel","AnimationDebug.hx",256,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_267_onSaveError,"AnimationDebug","onSaveError",0x2b915c0d,"AnimationDebug.onSaveError","AnimationDebug.hx",267,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_281_updateTexts,"AnimationDebug","updateTexts",0xfaa95a3e,"AnimationDebug.updateTexts","AnimationDebug.hx",281,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_276_updateTexts,"AnimationDebug","updateTexts",0xfaa95a3e,"AnimationDebug.updateTexts","AnimationDebug.hx",276,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_290_addHelpText,"AnimationDebug","addHelpText",0xc088fd30,"AnimationDebug.addHelpText","AnimationDebug.hx",290,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_303_getEvent,"AnimationDebug","getEvent",0x9ccc2b23,"AnimationDebug.getEvent","AnimationDebug.hx",303,0x57f8f54f)
HX_LOCAL_STACK_FRAME(_hx_pos_5489bc77b33b3e4d_324_update,"AnimationDebug","update",0x3691abc8,"AnimationDebug.update","AnimationDebug.hx",324,0x57f8f54f)
static const int _hx_array_data_919878cf_17[] = {
	(int)38,
};
static const int _hx_array_data_919878cf_18[] = {
	(int)39,
};
static const int _hx_array_data_919878cf_19[] = {
	(int)40,
};
static const int _hx_array_data_919878cf_20[] = {
	(int)37,
};

void AnimationDebug_obj::__construct(::String __o_daAnim){
            		::String daAnim = __o_daAnim;
            		if (::hx::IsNull(__o_daAnim)) daAnim = HX_("bf",c4,55,00,00);
            	HX_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_30_new)
HXLINE(  41)		this->daAnim = HX_("spooky",eb,bd,9e,c1);
HXLINE(  40)		this->isDad = true;
HXLINE(  39)		this->curAnim = 0;
HXLINE(  38)		this->animList = ::Array_obj< ::String >::__new(0);
HXLINE(  57)		super::__construct(null(),null());
HXLINE(  58)		this->daAnim = daAnim;
            	}

Dynamic AnimationDebug_obj::__CreateEmpty() { return new AnimationDebug_obj; }

void *AnimationDebug_obj::_hx_vtable = 0;

Dynamic AnimationDebug_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AnimationDebug_obj > _hx_result = new AnimationDebug_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AnimationDebug_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x7383fb8f || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void AnimationDebug_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_62_create)
HXLINE(  69)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  71)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,-525,null());
HXDLIN(  71)		this->background = _hx_tmp->loadGraphic(::Paths_obj::loadImage(HX_("stageback",e5,7b,3b,06),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE(  72)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,325,null());
HXDLIN(  72)		this->front = _hx_tmp1->loadGraphic(::Paths_obj::loadImage(HX_("stagefront",2b,fd,b0,c6),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE(  73)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-625,null());
HXDLIN(  73)		this->curt = _hx_tmp2->loadGraphic(::Paths_obj::loadImage(HX_("stagecurtains",df,ec,1a,4b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE(  74)		this->background->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  75)		this->front->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  76)		this->curt->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  78)		{
HXLINE(  78)			 ::flixel::FlxSprite _this = this->background;
HXDLIN(  78)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN(  78)			if (::hx::IsNull( axes )) {
HXLINE(  78)				axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN(  78)			bool _hx_tmp3;
HXDLIN(  78)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  78)					_hx_tmp3 = true;
            				}
            				break;
            				default:{
HXLINE(  78)					_hx_tmp3 = false;
            				}
            			}
HXDLIN(  78)			if (_hx_tmp3) {
HXLINE(  78)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  78)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  78)			bool _hx_tmp4;
HXDLIN(  78)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  78)					_hx_tmp4 = true;
            				}
            				break;
            				default:{
HXLINE(  78)					_hx_tmp4 = false;
            				}
            			}
HXDLIN(  78)			if (_hx_tmp4) {
HXLINE(  78)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  78)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  79)		this->background->scale->set(((Float)0.7),((Float)0.7));
HXLINE(  80)		{
HXLINE(  80)			 ::flixel::FlxSprite _this1 = this->front;
HXDLIN(  80)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN(  80)			if (::hx::IsNull( axes1 )) {
HXLINE(  80)				axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN(  80)			bool _hx_tmp5;
HXDLIN(  80)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  80)					_hx_tmp5 = true;
            				}
            				break;
            				default:{
HXLINE(  80)					_hx_tmp5 = false;
            				}
            			}
HXDLIN(  80)			if (_hx_tmp5) {
HXLINE(  80)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  80)				_this1->set_x(((( (Float)(_hx_tmp) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  80)			bool _hx_tmp6;
HXDLIN(  80)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  80)					_hx_tmp6 = true;
            				}
            				break;
            				default:{
HXLINE(  80)					_hx_tmp6 = false;
            				}
            			}
HXDLIN(  80)			if (_hx_tmp6) {
HXLINE(  80)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  80)				_this1->set_y(((( (Float)(_hx_tmp) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  81)		this->front->scale->set(((Float)0.7),((Float)0.7));
HXLINE(  82)		{
HXLINE(  82)			 ::flixel::FlxSprite _this2 = this->curt;
HXDLIN(  82)			 ::flixel::util::FlxAxes axes2 = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN(  82)			if (::hx::IsNull( axes2 )) {
HXLINE(  82)				axes2 = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN(  82)			bool _hx_tmp7;
HXDLIN(  82)			switch((int)(axes2->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  82)					_hx_tmp7 = true;
            				}
            				break;
            				default:{
HXLINE(  82)					_hx_tmp7 = false;
            				}
            			}
HXDLIN(  82)			if (_hx_tmp7) {
HXLINE(  82)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  82)				_this2->set_x(((( (Float)(_hx_tmp) ) - _this2->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  82)			bool _hx_tmp8;
HXDLIN(  82)			switch((int)(axes2->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  82)					_hx_tmp8 = true;
            				}
            				break;
            				default:{
HXLINE(  82)					_hx_tmp8 = false;
            				}
            			}
HXDLIN(  82)			if (_hx_tmp8) {
HXLINE(  82)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  82)				_this2->set_y(((( (Float)(_hx_tmp) ) - _this2->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  83)		this->curt->scale->set(((Float)0.7),((Float)0.7));
HXLINE(  85)		this->background->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE(  86)		this->curt->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE(  87)		this->front->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE(  89)		this->add(this->background);
HXLINE(  90)		this->add(this->front);
HXLINE(  91)		this->add(this->curt);
HXLINE(  93)		this->dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),this->daAnim,null());
HXLINE(  94)		{
HXLINE(  94)			 ::Character _this3 = this->dad;
HXDLIN(  94)			 ::flixel::util::FlxAxes axes3 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  94)			bool _hx_tmp9;
HXDLIN(  94)			switch((int)(axes3->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  94)					_hx_tmp9 = true;
            				}
            				break;
            				default:{
HXLINE(  94)					_hx_tmp9 = false;
            				}
            			}
HXDLIN(  94)			if (_hx_tmp9) {
HXLINE(  94)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  94)				_this3->set_x(((( (Float)(_hx_tmp) ) - _this3->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  94)			bool _hx_tmp10;
HXDLIN(  94)			switch((int)(axes3->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  94)					_hx_tmp10 = true;
            				}
            				break;
            				default:{
HXLINE(  94)					_hx_tmp10 = false;
            				}
            			}
HXDLIN(  94)			if (_hx_tmp10) {
HXLINE(  94)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  94)				_this3->set_y(((( (Float)(_hx_tmp) ) - _this3->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  95)		this->dad->debugMode = true;
HXLINE(  96)		this->add(this->dad);
HXLINE(  98)		this->_hx_char = this->dad;
HXLINE(  99)		this->dad->set_flipX(false);
HXLINE( 101)		this->dumbTexts =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 102)		this->add(this->dumbTexts);
HXLINE( 104)		this->textAnim =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,300,16,null(),null(),null(),null());
HXLINE( 105)		this->textAnim->set_size(26);
HXLINE( 106)		{
HXLINE( 106)			 ::flixel::text::FlxText _this4 = this->textAnim;
HXDLIN( 106)			_this4->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 106)			_this4->set_borderColor(-16777216);
HXDLIN( 106)			_this4->set_borderSize(( (Float)(2) ));
HXDLIN( 106)			_this4->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 107)		this->textAnim->scrollFactor->set(null(),null());
HXLINE( 108)		this->add(this->textAnim);
HXLINE( 110)		this->genBoyOffsets(null(),null());
HXLINE( 112)		this->addHelpText();
HXLINE( 114)		::String library = null();
HXDLIN( 114)		this->characters = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/characterList",c2,06,08,81) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 116)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Offsets",60,31,b6,a4))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Offset menu",2c,81,b1,9e))));
HXLINE( 118)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE( 120)		this->UI_box->scrollFactor->set(null(),null());
HXLINE( 121)		this->UI_box->resize(( (Float)(150) ),( (Float)(200) ));
HXLINE( 122)		 ::flixel::addons::ui::FlxUITabMenu _hx_tmp11 = this->UI_box;
HXDLIN( 122)		int _hx_tmp12 = ::flixel::FlxG_obj::width;
HXDLIN( 122)		_hx_tmp11->set_x(((( (Float)(_hx_tmp12) ) - this->UI_box->get_width()) - ( (Float)(20) )));
HXLINE( 123)		this->UI_box->set_y(( (Float)(20) ));
HXLINE( 136)		this->add(this->UI_box);
HXLINE( 138)		this->addOffsetUI();
HXLINE( 140)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,2,2);
HXLINE( 141)		{
HXLINE( 141)			 ::flixel::FlxObject _this5 = this->camFollow;
HXDLIN( 141)			 ::flixel::util::FlxAxes axes4 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 141)			bool _hx_tmp13;
HXDLIN( 141)			switch((int)(axes4->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 141)					_hx_tmp13 = true;
            				}
            				break;
            				default:{
HXLINE( 141)					_hx_tmp13 = false;
            				}
            			}
HXDLIN( 141)			if (_hx_tmp13) {
HXLINE( 141)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 141)				_this5->set_x(((( (Float)(_hx_tmp) ) - _this5->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 141)			bool _hx_tmp14;
HXDLIN( 141)			switch((int)(axes4->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 141)					_hx_tmp14 = true;
            				}
            				break;
            				default:{
HXLINE( 141)					_hx_tmp14 = false;
            				}
            			}
HXDLIN( 141)			if (_hx_tmp14) {
HXLINE( 141)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 141)				_this5->set_y(((( (Float)(_hx_tmp) ) - _this5->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 142)		this->add(this->camFollow);
HXLINE( 144)		::flixel::FlxG_obj::camera->follow(this->camFollow,null(),null());
HXLINE( 146)		this->super::create();
            	}


void AnimationDebug_obj::addOffsetUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::AnimationDebug,_gthis) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_152_addOffsetUI)
HXLINE( 153)			_gthis->remove(_gthis->dad,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 154)			::String _gthis1 = _gthis->characters->__get(( (int)(::Std_obj::parseInt(character)) ));
HXDLIN( 154)			_gthis->dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),_gthis1,null());
HXLINE( 155)			{
HXLINE( 155)				 ::Character _this = _gthis->dad;
HXDLIN( 155)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 155)				bool player1DropDown;
HXDLIN( 155)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE( 155)						player1DropDown = true;
            					}
            					break;
            					default:{
HXLINE( 155)						player1DropDown = false;
            					}
            				}
HXDLIN( 155)				if (player1DropDown) {
HXLINE( 155)					int player1DropDown = ::flixel::FlxG_obj::width;
HXDLIN( 155)					_this->set_x(((( (Float)(player1DropDown) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 155)				bool player1DropDown1;
HXDLIN( 155)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE( 155)						player1DropDown1 = true;
            					}
            					break;
            					default:{
HXLINE( 155)						player1DropDown1 = false;
            					}
            				}
HXDLIN( 155)				if (player1DropDown1) {
HXLINE( 155)					int player1DropDown = ::flixel::FlxG_obj::height;
HXDLIN( 155)					_this->set_y(((( (Float)(player1DropDown) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 156)			_gthis->dad->debugMode = true;
HXLINE( 157)			_gthis->dad->set_flipX(false);
HXLINE( 158)			_gthis->add(_gthis->dad).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 160)			_gthis->replace(_gthis->_hx_char,_gthis->dad).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 161)			_gthis->_hx_char = _gthis->dad;
HXLINE( 163)			_gthis->dumbTexts->clear();
HXLINE( 164)			_gthis->genBoyOffsets(true,true);
HXLINE( 165)			_gthis->updateTexts();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_150_addOffsetUI)
HXLINE( 149)		 ::AnimationDebug _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 151)		 ::flixel::addons::ui::FlxUIDropDownMenu player1DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,10,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(this->characters,true), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null(),null());
HXLINE( 168)		player1DropDown->set_selectedLabel(this->_hx_char->curCharacter);
HXLINE( 170)		 ::flixel::text::FlxText offsetX_label =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,50,null(),HX_("X Offset",7b,1e,da,70),null(),null());
HXLINE( 172)		Float offsetX_label1 = offsetX_label->y;
HXDLIN( 172)		Float UI_offsetX = ((offsetX_label1 + offsetX_label->get_height()) + 10);
HXDLIN( 172)		 ::flixel::addons::ui::FlxUINumericStepper UI_offsetX1 =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,UI_offsetX,1,this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))->__GetItem(0),((Float)-500.0),((Float)500.0),0,null(),null(),null(),null(),null());
HXLINE( 174)		UI_offsetX1->set_value(( (Float)(this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))->__GetItem(0)) ));
HXLINE( 175)		UI_offsetX1->name = HX_("offset_x",8c,35,03,a1);
HXLINE( 176)		this->offsetX = UI_offsetX1;
HXLINE( 178)		Float UI_offsetX2 = UI_offsetX1->y;
HXDLIN( 178)		 ::flixel::text::FlxText offsetY_label =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,((UI_offsetX2 + UI_offsetX1->get_height()) + 10),null(),HX_("Y Offset",9a,90,0c,aa),null(),null());
HXLINE( 180)		Float offsetY_label1 = offsetY_label->y;
HXDLIN( 180)		Float UI_offsetY = ((offsetY_label1 + offsetY_label->get_height()) + 10);
HXDLIN( 180)		 ::flixel::addons::ui::FlxUINumericStepper UI_offsetY1 =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,UI_offsetY,1,this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))->__GetItem(0),((Float)-500.0),((Float)500.0),0,null(),null(),null(),null(),null());
HXLINE( 182)		UI_offsetY1->set_value(( (Float)(this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))->__GetItem(1)) ));
HXLINE( 183)		UI_offsetY1->name = HX_("offset_y",8d,35,03,a1);
HXLINE( 184)		this->offsetY = UI_offsetY1;
HXLINE( 186)		 ::flixel::addons::ui::FlxUI tab_group_offsets =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 187)		tab_group_offsets->name = HX_("Offsets",60,31,b6,a4);
HXLINE( 189)		tab_group_offsets->add(offsetX_label).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 190)		tab_group_offsets->add(offsetY_label).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 191)		tab_group_offsets->add(UI_offsetX1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 192)		tab_group_offsets->add(UI_offsetY1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 193)		tab_group_offsets->add(player1DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 195)		this->UI_box->addGroup(tab_group_offsets);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimationDebug_obj,addOffsetUI,(void))

void AnimationDebug_obj::genBoyOffsets(::hx::Null< bool >  __o_pushList, ::Dynamic __o_cleanArray){
            		bool pushList = __o_pushList.Default(true);
            		 ::Dynamic cleanArray = __o_cleanArray;
            		if (::hx::IsNull(__o_cleanArray)) cleanArray = false;
            	HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_199_genBoyOffsets)
HXLINE( 200)		if (( (bool)(cleanArray) )) {
HXLINE( 201)			this->animList->removeRange(0,this->animList->length);
            		}
HXLINE( 203)		int daLoop = 0;
HXLINE( 205)		{
HXLINE( 205)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,this->_hx_char->animOffsets);
HXDLIN( 205)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 205)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 205)				::String anim = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN( 205)				::cpp::VirtualArray offsets = ( (::cpp::VirtualArray)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE( 206)				{
HXLINE( 207)					 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(20 + (18 * daLoop)),0,((anim + HX_(": ",a6,32,00,00)) + ::Std_obj::string(offsets)),15,null());
HXLINE( 208)					text->scrollFactor->set(null(),null());
HXLINE( 209)					{
HXLINE( 209)						text->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 209)						text->set_borderColor(-16777216);
HXDLIN( 209)						text->set_borderSize(( (Float)(2) ));
HXDLIN( 209)						text->set_borderQuality(( (Float)(1) ));
            					}
HXLINE( 210)					text->set_color(-1);
HXLINE( 211)					this->dumbTexts->add(text).StaticCast<  ::flixel::text::FlxText >();
HXLINE( 213)					if (pushList) {
HXLINE( 214)						this->animList->push(anim);
            					}
HXLINE( 216)					daLoop = (daLoop + 1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(AnimationDebug_obj,genBoyOffsets,(void))

void AnimationDebug_obj::saveBoyOffsets(){
            	HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_221_saveBoyOffsets)
HXLINE( 222)		::String result = HX_("",00,00,00,00);
HXLINE( 224)		{
HXLINE( 224)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,this->_hx_char->animOffsets);
HXDLIN( 224)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 224)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 224)				::String anim = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN( 224)				::cpp::VirtualArray offsets = ( (::cpp::VirtualArray)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE( 225)				{
HXLINE( 226)					::String text = ((anim + HX_(" ",20,00,00,00)) + offsets->join(HX_(" ",20,00,00,00)));
HXLINE( 227)					result = (result + (text + HX_("\n",0a,00,00,00)));
            				}
            			}
            		}
HXLINE( 230)		bool _hx_tmp;
HXDLIN( 230)		if (::hx::IsNotNull( result )) {
HXLINE( 230)			_hx_tmp = (result.length > 0);
            		}
            		else {
HXLINE( 230)			_hx_tmp = false;
            		}
HXDLIN( 230)		if (_hx_tmp) {
HXLINE( 232)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE( 233)			this->_file->addEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE( 234)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE( 235)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE( 236)			 ::openfl::net::FileReference _hx_tmp = this->_file;
HXDLIN( 236)			::String _hx_tmp1 = ::StringTools_obj::trim(result);
HXDLIN( 236)			_hx_tmp->save(_hx_tmp1,(this->daAnim + HX_("Offsets.txt",62,a0,5a,3f)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimationDebug_obj,saveBoyOffsets,(void))

void AnimationDebug_obj::onSaveComplete( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_244_onSaveComplete)
HXLINE( 245)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE( 246)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE( 247)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE( 248)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimationDebug_obj,onSaveComplete,(void))

void AnimationDebug_obj::onSaveCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_256_onSaveCancel)
HXLINE( 257)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE( 258)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE( 259)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE( 260)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimationDebug_obj,onSaveCancel,(void))

void AnimationDebug_obj::onSaveError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_267_onSaveError)
HXLINE( 268)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE( 269)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE( 270)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE( 271)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimationDebug_obj,onSaveError,(void))

void AnimationDebug_obj::updateTexts(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::AnimationDebug,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::text::FlxText text){
            			HX_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_281_updateTexts)
HXLINE( 282)			text->kill();
HXLINE( 283)			_gthis->dumbTexts->remove(text,true).StaticCast<  ::flixel::text::FlxText >();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_276_updateTexts)
HXLINE( 275)		 ::AnimationDebug _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 277)		 ::flixel::addons::ui::FlxUINumericStepper _hx_tmp = this->offsetX;
HXDLIN( 277)		_hx_tmp->set_value(( (Float)(this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))->__GetItem(0)) ));
HXLINE( 278)		 ::flixel::addons::ui::FlxUINumericStepper _hx_tmp1 = this->offsetY;
HXDLIN( 278)		_hx_tmp1->set_value(( (Float)(this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))->__GetItem(1)) ));
HXLINE( 280)		this->dumbTexts->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimationDebug_obj,updateTexts,(void))

void AnimationDebug_obj::addHelpText(){
            	HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_290_addHelpText)
HXLINE( 291)		::String helpTextValue = HX_("Help:\nQ/E : Zoom in and out\nF : Flip\nI/J/K/L : Pan Camera\nW/S : Cycle Animation\nArrows : Offset Animation\nShift-Arrows : Offset Animation x10\nSpace : Replay Animation\nCTRL-S : Save Offsets to File\nEnter/ESC : Exit\nPress F1 to hide/show this!\n",44,87,61,f7);
HXLINE( 292)		this->helpText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,940,20,0,helpTextValue,15,null());
HXLINE( 293)		this->helpText->scrollFactor->set(null(),null());
HXLINE( 294)		 ::flixel::text::FlxText _hx_tmp = this->helpText;
HXDLIN( 294)		int _hx_tmp1 = ::flixel::FlxG_obj::height;
HXDLIN( 294)		_hx_tmp->set_y(((( (Float)(_hx_tmp1) ) - this->helpText->get_height()) - ( (Float)(20) )));
HXLINE( 295)		{
HXLINE( 295)			 ::flixel::text::FlxText _this = this->helpText;
HXDLIN( 295)			_this->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 295)			_this->set_borderColor(-16777216);
HXDLIN( 295)			_this->set_borderSize(( (Float)(2) ));
HXDLIN( 295)			_this->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 296)		this->helpText->set_color(-1);
HXLINE( 298)		this->add(this->helpText);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimationDebug_obj,addHelpText,(void))

void AnimationDebug_obj::getEvent(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_303_getEvent)
HXDLIN( 303)		bool _hx_tmp;
HXDLIN( 303)		if ((id == HX_("change_numeric_stepper",50,0a,cc,bb))) {
HXDLIN( 303)			_hx_tmp = ::Std_obj::isOfType(sender,::hx::ClassOf< ::flixel::addons::ui::FlxUINumericStepper >());
            		}
            		else {
HXDLIN( 303)			_hx_tmp = false;
            		}
HXDLIN( 303)		if (_hx_tmp) {
HXLINE( 305)			 ::flixel::addons::ui::FlxUINumericStepper offset = ( ( ::flixel::addons::ui::FlxUINumericStepper)(sender) );
HXLINE( 306)			::String offsetName = offset->name;
HXLINE( 307)			::String _hx_switch_0 = offsetName;
            			if (  (_hx_switch_0==HX_("offset_x",8c,35,03,a1)) ){
HXLINE( 310)				this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))->__SetItem(0,offset->value);
HXLINE( 311)				this->updateTexts();
HXLINE( 312)				this->genBoyOffsets(false,null());
HXLINE( 313)				this->_hx_char->playAnim(this->animList->__get(this->curAnim),null(),null(),null());
HXLINE( 309)				goto _hx_goto_14;
            			}
            			if (  (_hx_switch_0==HX_("offset_y",8d,35,03,a1)) ){
HXLINE( 315)				this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))->__SetItem(1,offset->value);
HXLINE( 316)				this->updateTexts();
HXLINE( 317)				this->genBoyOffsets(false,null());
HXLINE( 318)				this->_hx_char->playAnim(this->animList->__get(this->curAnim),null(),null(),null());
HXLINE( 314)				goto _hx_goto_14;
            			}
            			_hx_goto_14:;
            		}
            	}


void AnimationDebug_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_5489bc77b33b3e4d_324_update)
HXLINE( 325)		this->textAnim->set_text(this->_hx_char->animation->_curAnim->name);
HXLINE( 327)		bool _hx_tmp;
HXDLIN( 327)		if (::flixel::FlxG_obj::mouse->overlaps(this->_hx_char,null())) {
HXLINE( 327)			 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 327)			if ((_this->current != 1)) {
HXLINE( 327)				_hx_tmp = (_this->current == 2);
            			}
            			else {
HXLINE( 327)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 327)			_hx_tmp = false;
            		}
HXDLIN( 327)		if (_hx_tmp) {
HXLINE( 330)			this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))->__SetItem(0,-(::Math_obj::round((( (Float)(::flixel::FlxG_obj::mouse->x) ) - (( (Float)(this->_hx_char->frameWidth) ) * ((Float)1.5))))));
HXLINE( 331)			this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))->__SetItem(1,-(::Math_obj::round((( (Float)(::flixel::FlxG_obj::mouse->y) ) - (( (Float)(this->_hx_char->frameHeight) ) / ( (Float)(2) ))))));
HXLINE( 333)			this->updateTexts();
HXLINE( 334)			this->genBoyOffsets(false,null());
HXLINE( 335)			this->_hx_char->playAnim(this->animList->__get(this->curAnim),null(),null(),null());
            		}
HXLINE( 339)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 339)		if (_this->keyManager->checkStatusUnsafe(27,_this->status)) {
HXLINE( 341)			::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 342)			{
HXLINE( 342)				 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 342)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 342)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE( 345)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 345)		if (_this1->keyManager->checkStatusUnsafe(69,_this1->status)) {
HXLINE( 346)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 346)			_g->set_zoom((_g->zoom + ((Float)0.25)));
            		}
HXLINE( 347)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 347)		if (_this2->keyManager->checkStatusUnsafe(81,_this2->status)) {
HXLINE( 348)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 348)			_g->set_zoom((_g->zoom - ((Float)0.25)));
            		}
HXLINE( 350)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 350)		if (_this3->keyManager->checkStatusUnsafe(70,_this3->status)) {
HXLINE( 351)			this->_hx_char->set_flipX(!(this->_hx_char->flipX));
            		}
HXLINE( 353)		bool _hx_tmp1;
HXDLIN( 353)		bool _hx_tmp2;
HXDLIN( 353)		bool _hx_tmp3;
HXDLIN( 353)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 353)		if (!(_this4->keyManager->checkStatusUnsafe(73,_this4->status))) {
HXLINE( 353)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 353)			_hx_tmp3 = _this->keyManager->checkStatusUnsafe(74,_this->status);
            		}
            		else {
HXLINE( 353)			_hx_tmp3 = true;
            		}
HXDLIN( 353)		if (!(_hx_tmp3)) {
HXLINE( 353)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 353)			_hx_tmp2 = _this->keyManager->checkStatusUnsafe(75,_this->status);
            		}
            		else {
HXLINE( 353)			_hx_tmp2 = true;
            		}
HXDLIN( 353)		if (!(_hx_tmp2)) {
HXLINE( 353)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 353)			_hx_tmp1 = _this->keyManager->checkStatusUnsafe(76,_this->status);
            		}
            		else {
HXLINE( 353)			_hx_tmp1 = true;
            		}
HXDLIN( 353)		if (_hx_tmp1) {
HXLINE( 355)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 355)			if (_this->keyManager->checkStatusUnsafe(73,_this->status)) {
HXLINE( 356)				this->camFollow->velocity->set_y(( (Float)(-90) ));
            			}
            			else {
HXLINE( 357)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 357)				if (_this->keyManager->checkStatusUnsafe(75,_this->status)) {
HXLINE( 358)					this->camFollow->velocity->set_y(( (Float)(90) ));
            				}
            				else {
HXLINE( 360)					this->camFollow->velocity->set_y(( (Float)(0) ));
            				}
            			}
HXLINE( 362)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 362)			if (_this1->keyManager->checkStatusUnsafe(74,_this1->status)) {
HXLINE( 363)				this->camFollow->velocity->set_x(( (Float)(-90) ));
            			}
            			else {
HXLINE( 364)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 364)				if (_this->keyManager->checkStatusUnsafe(76,_this->status)) {
HXLINE( 365)					this->camFollow->velocity->set_x(( (Float)(90) ));
            				}
            				else {
HXLINE( 367)					this->camFollow->velocity->set_x(( (Float)(0) ));
            				}
            			}
            		}
            		else {
HXLINE( 371)			this->camFollow->velocity->set(null(),null());
            		}
HXLINE( 374)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 374)		if (_this5->keyManager->checkStatusUnsafe(87,_this5->status)) {
HXLINE( 376)			 ::AnimationDebug _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 376)			_hx_tmp->curAnim = (_hx_tmp->curAnim - 1);
            		}
HXLINE( 379)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 379)		if (_this6->keyManager->checkStatusUnsafe(83,_this6->status)) {
HXLINE( 381)			 ::AnimationDebug _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 381)			_hx_tmp->curAnim = (_hx_tmp->curAnim + 1);
            		}
HXLINE( 384)		if ((this->curAnim < 0)) {
HXLINE( 385)			this->curAnim = (this->animList->length - 1);
            		}
HXLINE( 387)		if ((this->curAnim >= this->animList->length)) {
HXLINE( 388)			this->curAnim = 0;
            		}
HXLINE( 390)		bool _hx_tmp4;
HXDLIN( 390)		bool _hx_tmp5;
HXDLIN( 390)		 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 390)		if (!(_this7->keyManager->checkStatusUnsafe(83,_this7->status))) {
HXLINE( 390)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 390)			_hx_tmp5 = _this->keyManager->checkStatusUnsafe(87,_this->status);
            		}
            		else {
HXLINE( 390)			_hx_tmp5 = true;
            		}
HXDLIN( 390)		if (!(_hx_tmp5)) {
HXLINE( 390)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 390)			_hx_tmp4 = _this->keyManager->checkStatusUnsafe(32,_this->status);
            		}
            		else {
HXLINE( 390)			_hx_tmp4 = true;
            		}
HXDLIN( 390)		if (_hx_tmp4) {
HXLINE( 392)			this->_hx_char->playAnim(this->animList->__get(this->curAnim),null(),null(),null());
HXLINE( 394)			this->updateTexts();
HXLINE( 395)			this->genBoyOffsets(false,null());
            		}
HXLINE( 398)		bool upP = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_919878cf_17,1),2);
HXLINE( 399)		bool rightP = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_919878cf_18,1),2);
HXLINE( 400)		bool downP = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_919878cf_19,1),2);
HXLINE( 401)		bool leftP = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_919878cf_20,1),2);
HXLINE( 403)		 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 403)		bool holdShift = _this8->keyManager->checkStatusUnsafe(16,_this8->status);
HXLINE( 404)		int multiplier = 1;
HXLINE( 405)		if (holdShift) {
HXLINE( 406)			multiplier = 10;
            		}
HXLINE( 408)		bool _hx_tmp6;
HXDLIN( 408)		bool _hx_tmp7;
HXDLIN( 408)		bool _hx_tmp8;
HXDLIN( 408)		if (!(upP)) {
HXLINE( 408)			_hx_tmp8 = rightP;
            		}
            		else {
HXLINE( 408)			_hx_tmp8 = true;
            		}
HXDLIN( 408)		if (!(_hx_tmp8)) {
HXLINE( 408)			_hx_tmp7 = downP;
            		}
            		else {
HXLINE( 408)			_hx_tmp7 = true;
            		}
HXDLIN( 408)		if (!(_hx_tmp7)) {
HXLINE( 408)			_hx_tmp6 = leftP;
            		}
            		else {
HXLINE( 408)			_hx_tmp6 = true;
            		}
HXDLIN( 408)		if (_hx_tmp6) {
HXLINE( 410)			this->updateTexts();
HXLINE( 411)			if (upP) {
HXLINE( 412)				::cpp::VirtualArray _hx_tmp = ( (::cpp::VirtualArray)(this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))) );
HXDLIN( 412)				int _hx_tmp1 = 1;
HXDLIN( 412)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) + multiplier));
            			}
HXLINE( 413)			if (downP) {
HXLINE( 414)				::cpp::VirtualArray _hx_tmp = ( (::cpp::VirtualArray)(this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))) );
HXDLIN( 414)				int _hx_tmp1 = 1;
HXDLIN( 414)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) - multiplier));
            			}
HXLINE( 415)			if (leftP) {
HXLINE( 416)				::cpp::VirtualArray _hx_tmp = ( (::cpp::VirtualArray)(this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))) );
HXDLIN( 416)				int _hx_tmp1 = 0;
HXDLIN( 416)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) + multiplier));
            			}
HXLINE( 417)			if (rightP) {
HXLINE( 418)				::cpp::VirtualArray _hx_tmp = ( (::cpp::VirtualArray)(this->_hx_char->animOffsets->get(this->animList->__get(this->curAnim))) );
HXDLIN( 418)				int _hx_tmp1 = 0;
HXDLIN( 418)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) - multiplier));
            			}
HXLINE( 420)			this->updateTexts();
HXLINE( 421)			this->genBoyOffsets(false,null());
HXLINE( 422)			this->_hx_char->playAnim(this->animList->__get(this->curAnim),null(),null(),null());
            		}
HXLINE( 425)		bool _hx_tmp9;
HXDLIN( 425)		 ::flixel::input::keyboard::FlxKeyList _this9 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 425)		if (_this9->keyManager->checkStatusUnsafe(17,_this9->status)) {
HXLINE( 425)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 425)			_hx_tmp9 = _this->keyManager->checkStatusUnsafe(83,_this->status);
            		}
            		else {
HXLINE( 425)			_hx_tmp9 = false;
            		}
HXDLIN( 425)		if (_hx_tmp9) {
HXLINE( 426)			this->saveBoyOffsets();
            		}
HXLINE( 428)		 ::flixel::input::keyboard::FlxKeyList _this10 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 428)		if (_this10->keyManager->checkStatusUnsafe(112,_this10->status)) {
HXLINE( 429)			::flixel::FlxG_obj::save->data->__SetField(HX_("showHelp",5e,f6,91,ac),!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("showHelp",5e,f6,91,ac),::hx::paccDynamic)) )),::hx::paccDynamic);
            		}
HXLINE( 431)		this->helpText->set_visible(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("showHelp",5e,f6,91,ac),::hx::paccDynamic)) ));
HXLINE( 433)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< AnimationDebug_obj > AnimationDebug_obj::__new(::String __o_daAnim) {
	::hx::ObjectPtr< AnimationDebug_obj > __this = new AnimationDebug_obj();
	__this->__construct(__o_daAnim);
	return __this;
}

::hx::ObjectPtr< AnimationDebug_obj > AnimationDebug_obj::__alloc(::hx::Ctx *_hx_ctx,::String __o_daAnim) {
	AnimationDebug_obj *__this = (AnimationDebug_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AnimationDebug_obj), true, "AnimationDebug"));
	*(void **)__this = AnimationDebug_obj::_hx_vtable;
	__this->__construct(__o_daAnim);
	return __this;
}

AnimationDebug_obj::AnimationDebug_obj()
{
}

void AnimationDebug_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AnimationDebug);
	HX_MARK_MEMBER_NAME(_file,"_file");
	HX_MARK_MEMBER_NAME(bf,"bf");
	HX_MARK_MEMBER_NAME(dad,"dad");
	HX_MARK_MEMBER_NAME(_hx_char,"char");
	HX_MARK_MEMBER_NAME(textAnim,"textAnim");
	HX_MARK_MEMBER_NAME(dumbTexts,"dumbTexts");
	HX_MARK_MEMBER_NAME(animList,"animList");
	HX_MARK_MEMBER_NAME(curAnim,"curAnim");
	HX_MARK_MEMBER_NAME(isDad,"isDad");
	HX_MARK_MEMBER_NAME(daAnim,"daAnim");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(curt,"curt");
	HX_MARK_MEMBER_NAME(front,"front");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(UI_options,"UI_options");
	HX_MARK_MEMBER_NAME(offsetX,"offsetX");
	HX_MARK_MEMBER_NAME(offsetY,"offsetY");
	HX_MARK_MEMBER_NAME(characters,"characters");
	HX_MARK_MEMBER_NAME(helpText,"helpText");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AnimationDebug_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_file,"_file");
	HX_VISIT_MEMBER_NAME(bf,"bf");
	HX_VISIT_MEMBER_NAME(dad,"dad");
	HX_VISIT_MEMBER_NAME(_hx_char,"char");
	HX_VISIT_MEMBER_NAME(textAnim,"textAnim");
	HX_VISIT_MEMBER_NAME(dumbTexts,"dumbTexts");
	HX_VISIT_MEMBER_NAME(animList,"animList");
	HX_VISIT_MEMBER_NAME(curAnim,"curAnim");
	HX_VISIT_MEMBER_NAME(isDad,"isDad");
	HX_VISIT_MEMBER_NAME(daAnim,"daAnim");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(curt,"curt");
	HX_VISIT_MEMBER_NAME(front,"front");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(UI_options,"UI_options");
	HX_VISIT_MEMBER_NAME(offsetX,"offsetX");
	HX_VISIT_MEMBER_NAME(offsetY,"offsetY");
	HX_VISIT_MEMBER_NAME(characters,"characters");
	HX_VISIT_MEMBER_NAME(helpText,"helpText");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val AnimationDebug_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bf") ) { return ::hx::Val( bf ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { return ::hx::Val( dad ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"char") ) { return ::hx::Val( _hx_char ); }
		if (HX_FIELD_EQ(inName,"curt") ) { return ::hx::Val( curt ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { return ::hx::Val( _file ); }
		if (HX_FIELD_EQ(inName,"isDad") ) { return ::hx::Val( isDad ); }
		if (HX_FIELD_EQ(inName,"front") ) { return ::hx::Val( front ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"daAnim") ) { return ::hx::Val( daAnim ); }
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curAnim") ) { return ::hx::Val( curAnim ); }
		if (HX_FIELD_EQ(inName,"offsetX") ) { return ::hx::Val( offsetX ); }
		if (HX_FIELD_EQ(inName,"offsetY") ) { return ::hx::Val( offsetY ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textAnim") ) { return ::hx::Val( textAnim ); }
		if (HX_FIELD_EQ(inName,"animList") ) { return ::hx::Val( animList ); }
		if (HX_FIELD_EQ(inName,"helpText") ) { return ::hx::Val( helpText ); }
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dumbTexts") ) { return ::hx::Val( dumbTexts ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return ::hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"UI_options") ) { return ::hx::Val( UI_options ); }
		if (HX_FIELD_EQ(inName,"characters") ) { return ::hx::Val( characters ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"addOffsetUI") ) { return ::hx::Val( addOffsetUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return ::hx::Val( onSaveError_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTexts") ) { return ::hx::Val( updateTexts_dyn() ); }
		if (HX_FIELD_EQ(inName,"addHelpText") ) { return ::hx::Val( addHelpText_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return ::hx::Val( onSaveCancel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"genBoyOffsets") ) { return ::hx::Val( genBoyOffsets_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"saveBoyOffsets") ) { return ::hx::Val( saveBoyOffsets_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return ::hx::Val( onSaveComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AnimationDebug_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bf") ) { bf=inValue.Cast<  ::Boyfriend >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { dad=inValue.Cast<  ::Character >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"char") ) { _hx_char=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curt") ) { curt=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { _file=inValue.Cast<  ::openfl::net::FileReference >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isDad") ) { isDad=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"front") ) { front=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"daAnim") ) { daAnim=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curAnim") ) { curAnim=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetX") ) { offsetX=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetY") ) { offsetY=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textAnim") ) { textAnim=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animList") ) { animList=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"helpText") ) { helpText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dumbTexts") ) { dumbTexts=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UI_options") ) { UI_options=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"characters") ) { characters=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AnimationDebug_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_file",5b,ea,cc,f6));
	outFields->push(HX_("bf",c4,55,00,00));
	outFields->push(HX_("dad",47,36,4c,00));
	outFields->push(HX_("char",d6,5e,bf,41));
	outFields->push(HX_("textAnim",5e,d9,6c,43));
	outFields->push(HX_("dumbTexts",20,d4,be,0e));
	outFields->push(HX_("animList",0f,ab,08,7b));
	outFields->push(HX_("curAnim",b1,f7,86,ab));
	outFields->push(HX_("isDad",7d,60,4a,c1));
	outFields->push(HX_("daAnim",2e,0c,d9,00));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("curt",f4,4a,c9,41));
	outFields->push(HX_("front",a9,18,8e,06));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("UI_options",33,4b,47,19));
	outFields->push(HX_("offsetX",65,09,65,d7));
	outFields->push(HX_("offsetY",66,09,65,d7));
	outFields->push(HX_("characters",aa,58,ce,55));
	outFields->push(HX_("helpText",0e,20,b5,87));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AnimationDebug_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(int)offsetof(AnimationDebug_obj,_file),HX_("_file",5b,ea,cc,f6)},
	{::hx::fsObject /*  ::Boyfriend */ ,(int)offsetof(AnimationDebug_obj,bf),HX_("bf",c4,55,00,00)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(AnimationDebug_obj,dad),HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(AnimationDebug_obj,_hx_char),HX_("char",d6,5e,bf,41)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(AnimationDebug_obj,textAnim),HX_("textAnim",5e,d9,6c,43)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(AnimationDebug_obj,dumbTexts),HX_("dumbTexts",20,d4,be,0e)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(AnimationDebug_obj,animList),HX_("animList",0f,ab,08,7b)},
	{::hx::fsInt,(int)offsetof(AnimationDebug_obj,curAnim),HX_("curAnim",b1,f7,86,ab)},
	{::hx::fsBool,(int)offsetof(AnimationDebug_obj,isDad),HX_("isDad",7d,60,4a,c1)},
	{::hx::fsString,(int)offsetof(AnimationDebug_obj,daAnim),HX_("daAnim",2e,0c,d9,00)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(AnimationDebug_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(AnimationDebug_obj,background),HX_("background",ee,93,1d,26)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(AnimationDebug_obj,curt),HX_("curt",f4,4a,c9,41)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(AnimationDebug_obj,front),HX_("front",a9,18,8e,06)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(AnimationDebug_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(AnimationDebug_obj,UI_options),HX_("UI_options",33,4b,47,19)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(AnimationDebug_obj,offsetX),HX_("offsetX",65,09,65,d7)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(AnimationDebug_obj,offsetY),HX_("offsetY",66,09,65,d7)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(AnimationDebug_obj,characters),HX_("characters",aa,58,ce,55)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(AnimationDebug_obj,helpText),HX_("helpText",0e,20,b5,87)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AnimationDebug_obj_sStaticStorageInfo = 0;
#endif

static ::String AnimationDebug_obj_sMemberFields[] = {
	HX_("_file",5b,ea,cc,f6),
	HX_("bf",c4,55,00,00),
	HX_("dad",47,36,4c,00),
	HX_("char",d6,5e,bf,41),
	HX_("textAnim",5e,d9,6c,43),
	HX_("dumbTexts",20,d4,be,0e),
	HX_("animList",0f,ab,08,7b),
	HX_("curAnim",b1,f7,86,ab),
	HX_("isDad",7d,60,4a,c1),
	HX_("daAnim",2e,0c,d9,00),
	HX_("camFollow",e0,6e,47,22),
	HX_("background",ee,93,1d,26),
	HX_("curt",f4,4a,c9,41),
	HX_("front",a9,18,8e,06),
	HX_("UI_box",60,07,ac,43),
	HX_("UI_options",33,4b,47,19),
	HX_("offsetX",65,09,65,d7),
	HX_("offsetY",66,09,65,d7),
	HX_("characters",aa,58,ce,55),
	HX_("create",fc,66,0f,7c),
	HX_("addOffsetUI",e8,63,5f,d2),
	HX_("genBoyOffsets",84,65,f8,17),
	HX_("saveBoyOffsets",71,6a,36,bf),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	HX_("updateTexts",5d,b4,31,f3),
	HX_("helpText",0e,20,b5,87),
	HX_("addHelpText",4f,57,11,b9),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class AnimationDebug_obj::__mClass;

void AnimationDebug_obj::__register()
{
	AnimationDebug_obj _hx_dummy;
	AnimationDebug_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("AnimationDebug",cf,78,98,91);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AnimationDebug_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AnimationDebug_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AnimationDebug_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AnimationDebug_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

