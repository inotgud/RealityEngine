// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_llua_Convert
#include <llua/Convert.h>
#endif
#ifndef INCLUDED_llua_Lua_helper
#include <llua/Lua_helper.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_176a1fae691a892a_565_callback_handler,"llua.Lua_helper","callback_handler",0xc7862d87,"llua.Lua_helper.callback_handler","llua/Lua.hx",565,0x35651a49)
HX_LOCAL_STACK_FRAME(_hx_pos_176a1fae691a892a_547_boot,"llua.Lua_helper","boot",0x226c2b29,"llua.Lua_helper.boot","llua/Lua.hx",547,0x35651a49)
namespace llua{

void Lua_helper_obj::__construct() { }

Dynamic Lua_helper_obj::__CreateEmpty() { return new Lua_helper_obj; }

void *Lua_helper_obj::_hx_vtable = 0;

Dynamic Lua_helper_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Lua_helper_obj > _hx_result = new Lua_helper_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Lua_helper_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7b0276d5;
}

 ::haxe::ds::StringMap Lua_helper_obj::callbacks;

int Lua_helper_obj::callback_handler( cpp::Reference<lua_State> l,::String fname){
            	HX_STACKFRAME(&_hx_pos_176a1fae691a892a_565_callback_handler)
HXLINE( 567)		 ::Dynamic cbf = ::llua::Lua_helper_obj::callbacks->get(fname);
HXLINE( 569)		if (::hx::IsNull( cbf )) {
HXLINE( 570)			return 0;
            		}
HXLINE( 573)		int nparams = lua_gettop(l);
HXLINE( 574)		::cpp::VirtualArray args = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 576)		{
HXLINE( 576)			int _g = 0;
HXDLIN( 576)			int _g1 = nparams;
HXDLIN( 576)			while((_g < _g1)){
HXLINE( 576)				_g = (_g + 1);
HXDLIN( 576)				int i = (_g - 1);
HXLINE( 577)				int v = (i + 1);
HXDLIN( 577)				 ::Dynamic ret = null();
HXDLIN( 577)				switch((int)(lua_type(l,v))){
            					case (int)0: {
HXLINE( 577)						ret = null();
            					}
            					break;
            					case (int)1: {
HXLINE( 577)						ret = (lua_toboolean(l,v) != 0);
            					}
            					break;
            					case (int)3: {
HXLINE( 577)						ret = lua_tonumber(l,v);
            					}
            					break;
            					case (int)4: {
HXLINE( 577)						ret = linc::lua::tostring(l,v);
            					}
            					break;
            					case (int)5: {
HXLINE( 577)						ret = ::llua::Convert_obj::toHaxeObj(l,v);
            					}
            					break;
            					default:{
HXLINE( 577)						ret = null();
            					}
            				}
HXDLIN( 577)				args->set(i,ret);
            			}
            		}
HXLINE( 580)		 ::Dynamic ret = null();
HXLINE( 582)		switch((int)(nparams)){
            			case (int)0: {
HXLINE( 584)				ret = cbf();
            			}
            			break;
            			case (int)1: {
HXLINE( 586)				ret = cbf(args->__get(0));
            			}
            			break;
            			case (int)2: {
HXLINE( 588)				ret = cbf(args->__get(0),args->__get(1));
            			}
            			break;
            			case (int)3: {
HXLINE( 590)				ret = cbf(args->__get(0),args->__get(1),args->__get(2));
            			}
            			break;
            			case (int)4: {
HXLINE( 592)				ret = cbf(args->__get(0),args->__get(1),args->__get(2),args->__get(3));
            			}
            			break;
            			case (int)5: {
HXLINE( 594)				ret = cbf(args->__get(0),args->__get(1),args->__get(2),args->__get(3),args->__get(4));
            			}
            			break;
            			default:{
HXLINE( 596)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("> 5 arguments is not supported",62,23,e5,68)));
            			}
            		}
HXLINE( 599)		if (::hx::IsNotNull( ret )) {
HXLINE( 600)			::llua::Convert_obj::toLua(l,ret);
            		}
HXLINE( 604)		return 1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lua_helper_obj,callback_handler,return )


Lua_helper_obj::Lua_helper_obj()
{
}

bool Lua_helper_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"callbacks") ) { outValue = ( callbacks ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"callback_handler") ) { outValue = callback_handler_dyn(); return true; }
	}
	return false;
}

bool Lua_helper_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"callbacks") ) { callbacks=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Lua_helper_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Lua_helper_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Lua_helper_obj::callbacks,HX_("callbacks",0e,f3,bf,a6)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Lua_helper_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Lua_helper_obj::callbacks,"callbacks");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Lua_helper_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Lua_helper_obj::callbacks,"callbacks");
};

#endif

::hx::Class Lua_helper_obj::__mClass;

static ::String Lua_helper_obj_sStaticFields[] = {
	HX_("callbacks",0e,f3,bf,a6),
	HX_("callback_handler",10,70,1b,10),
	::String(null())
};

void Lua_helper_obj::__register()
{
	Lua_helper_obj _hx_dummy;
	Lua_helper_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("llua.Lua_helper",d7,1c,13,8b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Lua_helper_obj::__GetStatic;
	__mClass->mSetStaticField = &Lua_helper_obj::__SetStatic;
	__mClass->mMarkFunc = Lua_helper_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Lua_helper_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Lua_helper_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Lua_helper_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Lua_helper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Lua_helper_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Lua_helper_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_176a1fae691a892a_547_boot)
HXDLIN( 547)		callbacks =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace llua
