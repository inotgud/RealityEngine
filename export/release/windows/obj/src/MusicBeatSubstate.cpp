// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_Debug
#include <Debug.h>
#endif
#ifndef INCLUDED_KeyBinds
#include <KeyBinds.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_81b525467515cd1c_11_new,"MusicBeatSubstate","new",0x9b0dd73e,"MusicBeatSubstate.new","MusicBeatSubstate.hx",11,0x55a559f2)
HX_LOCAL_STACK_FRAME(_hx_pos_81b525467515cd1c_19_destroy,"MusicBeatSubstate","destroy",0xdeaffad8,"MusicBeatSubstate.destroy","MusicBeatSubstate.hx",19,0x55a559f2)
HX_LOCAL_STACK_FRAME(_hx_pos_81b525467515cd1c_26_create,"MusicBeatSubstate","create",0x5b9a7ede,"MusicBeatSubstate.create","MusicBeatSubstate.hx",26,0x55a559f2)
HX_LOCAL_STACK_FRAME(_hx_pos_81b525467515cd1c_40_get_controls,"MusicBeatSubstate","get_controls",0xaa3f67e1,"MusicBeatSubstate.get_controls","MusicBeatSubstate.hx",40,0x55a559f2)
HX_LOCAL_STACK_FRAME(_hx_pos_81b525467515cd1c_43_update,"MusicBeatSubstate","update",0x66909deb,"MusicBeatSubstate.update","MusicBeatSubstate.hx",43,0x55a559f2)
HX_LOCAL_STACK_FRAME(_hx_pos_81b525467515cd1c_77_updateBeat,"MusicBeatSubstate","updateBeat",0x52ba7d01,"MusicBeatSubstate.updateBeat","MusicBeatSubstate.hx",77,0x55a559f2)
HX_LOCAL_STACK_FRAME(_hx_pos_81b525467515cd1c_83_updateCurStep,"MusicBeatSubstate","updateCurStep",0x817e4641,"MusicBeatSubstate.updateCurStep","MusicBeatSubstate.hx",83,0x55a559f2)
HX_LOCAL_STACK_FRAME(_hx_pos_81b525467515cd1c_100_stepHit,"MusicBeatSubstate","stepHit",0x3b6b7c45,"MusicBeatSubstate.stepHit","MusicBeatSubstate.hx",100,0x55a559f2)
HX_LOCAL_STACK_FRAME(_hx_pos_81b525467515cd1c_105_beatHit,"MusicBeatSubstate","beatHit",0x2e2eb85b,"MusicBeatSubstate.beatHit","MusicBeatSubstate.hx",105,0x55a559f2)
HX_LOCAL_STACK_FRAME(_hx_pos_81b525467515cd1c_111_onWindowFocusOut,"MusicBeatSubstate","onWindowFocusOut",0xb2d8c387,"MusicBeatSubstate.onWindowFocusOut","MusicBeatSubstate.hx",111,0x55a559f2)
HX_LOCAL_STACK_FRAME(_hx_pos_81b525467515cd1c_130_onWindowFocusIn,"MusicBeatSubstate","onWindowFocusIn",0x4db77b0c,"MusicBeatSubstate.onWindowFocusIn","MusicBeatSubstate.hx",130,0x55a559f2)

void MusicBeatSubstate_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_81b525467515cd1c_11_new)
HXLINE(  36)		this->curBeat = 0;
HXLINE(  35)		this->curStep = 0;
HXLINE(  33)		this->lastStep = ((Float)0);
HXLINE(  32)		this->lastBeat = ((Float)0);
HXLINE(  15)		super::__construct(null());
            	}

Dynamic MusicBeatSubstate_obj::__CreateEmpty() { return new MusicBeatSubstate_obj; }

void *MusicBeatSubstate_obj::_hx_vtable = 0;

Dynamic MusicBeatSubstate_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MusicBeatSubstate_obj > _hx_result = new MusicBeatSubstate_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MusicBeatSubstate_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7c795c9f) {
		if (inClassId<=(int)0x62817b24) {
			if (inClassId<=(int)0x5661ffbf) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x5661ffbf;
			} else {
				return inClassId==(int)0x62817b24;
			}
		} else {
			return inClassId==(int)0x7c795c9f;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7fce3ab0;
	}
}

void MusicBeatSubstate_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_81b525467515cd1c_19_destroy)
HXLINE(  20)		::lime::app::Application_obj::current->_hx___window->onFocusIn->remove(this->onWindowFocusOut_dyn());
HXLINE(  21)		::lime::app::Application_obj::current->_hx___window->onFocusIn->remove(this->onWindowFocusIn_dyn());
HXLINE(  22)		this->super::destroy();
            	}


void MusicBeatSubstate_obj::create(){
            	HX_STACKFRAME(&_hx_pos_81b525467515cd1c_26_create)
HXLINE(  27)		this->super::create();
HXLINE(  28)		::lime::app::Application_obj::current->_hx___window->onFocusIn->add(this->onWindowFocusIn_dyn(),null(),null());
HXLINE(  29)		::lime::app::Application_obj::current->_hx___window->onFocusOut->add(this->onWindowFocusOut_dyn(),null(),null());
            	}


 ::Controls MusicBeatSubstate_obj::get_controls(){
            	HX_STACKFRAME(&_hx_pos_81b525467515cd1c_40_get_controls)
HXDLIN(  40)		return ::PlayerSettings_obj::player1->controls;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatSubstate_obj,get_controls,return )

void MusicBeatSubstate_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_81b525467515cd1c_43_update)
HXLINE(  45)		int nextStep = this->updateCurStep();
HXLINE(  47)		if ((nextStep >= 0)) {
HXLINE(  49)			if ((nextStep > this->curStep)) {
HXLINE(  51)				int _g = this->curStep;
HXDLIN(  51)				int _g1 = nextStep;
HXDLIN(  51)				while((_g < _g1)){
HXLINE(  51)					_g = (_g + 1);
HXDLIN(  51)					int i = (_g - 1);
HXLINE(  53)					this->curStep++;
HXLINE(  54)					this->updateBeat();
HXLINE(  55)					this->stepHit();
            				}
            			}
            			else {
HXLINE(  58)				if ((nextStep < this->curStep)) {
HXLINE(  61)					this->curStep = nextStep;
HXLINE(  62)					this->updateBeat();
HXLINE(  63)					this->stepHit();
            				}
            			}
            		}
HXLINE(  67)		 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
HXLINE(  68)		if (::hx::IsNotNull( gamepad )) {
HXLINE(  69)			::KeyBinds_obj::gamepad = true;
            		}
            		else {
HXLINE(  71)			::KeyBinds_obj::gamepad = false;
            		}
HXLINE(  73)		this->super::update(elapsed);
            	}


void MusicBeatSubstate_obj::updateBeat(){
            	HX_STACKFRAME(&_hx_pos_81b525467515cd1c_77_updateBeat)
HXLINE(  78)		this->lastBeat = ( (Float)(this->curBeat) );
HXLINE(  79)		this->curBeat = ::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(4) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatSubstate_obj,updateBeat,(void))

int MusicBeatSubstate_obj::updateCurStep(){
            	HX_STACKFRAME(&_hx_pos_81b525467515cd1c_83_updateCurStep)
HXLINE(  84)		 ::Dynamic lastChange =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("stepTime",79,75,25,a0),0)
            			->setFixed(1,HX_("bpm",df,be,4a,00),( (Float)(0) ))
            			->setFixed(2,HX_("songTime",82,2a,d5,3a),( (Float)(0) )));
HXLINE(  89)		{
HXLINE(  89)			int _g = 0;
HXDLIN(  89)			int _g1 = ::Conductor_obj::bpmChangeMap->length;
HXDLIN(  89)			while((_g < _g1)){
HXLINE(  89)				_g = (_g + 1);
HXDLIN(  89)				int i = (_g - 1);
HXLINE(  91)				if (::hx::IsGreater( ::Conductor_obj::songPosition,::Conductor_obj::bpmChangeMap->__get(i)->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic) )) {
HXLINE(  92)					lastChange = ::Conductor_obj::bpmChangeMap->__get(i);
            				}
            			}
            		}
HXLINE(  95)		return ( (int)((lastChange->__Field(HX_("stepTime",79,75,25,a0),::hx::paccDynamic) + ::Math_obj::floor(((::Conductor_obj::songPosition - ( (Float)(lastChange->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic)) )) / ::Conductor_obj::stepCrochet)))) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatSubstate_obj,updateCurStep,return )

void MusicBeatSubstate_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_81b525467515cd1c_100_stepHit)
HXDLIN( 100)		if ((::hx::Mod(this->curStep,4) == 0)) {
HXLINE( 101)			this->beatHit();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatSubstate_obj,stepHit,(void))

void MusicBeatSubstate_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_81b525467515cd1c_105_beatHit)
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatSubstate_obj,beatHit,(void))

void MusicBeatSubstate_obj::onWindowFocusOut(){
            	HX_GC_STACKFRAME(&_hx_pos_81b525467515cd1c_111_onWindowFocusOut)
HXDLIN( 111)		if (::PlayState_obj::inDaPlay) {
HXLINE( 113)			bool _hx_tmp;
HXDLIN( 113)			bool _hx_tmp1;
HXDLIN( 113)			if (!(::PlayState_obj::instance->paused)) {
HXLINE( 113)				_hx_tmp1 = !(::PlayState_obj::instance->endingSong);
            			}
            			else {
HXLINE( 113)				_hx_tmp1 = false;
            			}
HXDLIN( 113)			if (_hx_tmp1) {
HXLINE( 113)				_hx_tmp = ::PlayState_obj::instance->songStarted;
            			}
            			else {
HXLINE( 113)				_hx_tmp = false;
            			}
HXDLIN( 113)			if (_hx_tmp) {
HXLINE( 115)				::Debug_obj::logTrace(HX_("Lost Focus",9c,8c,4d,79),::hx::SourceInfo(HX_("source/MusicBeatSubstate.hx",e6,1a,67,80),115,HX_("MusicBeatSubstate",4c,20,4e,a8),HX_("onWindowFocusOut",25,3d,90,17)));
HXLINE( 116)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN( 116)				_hx_tmp->openSubState( ::PauseSubState_obj::__alloc( HX_CTX ));
HXLINE( 117)				::PlayState_obj::boyfriend->stunned = true;
HXLINE( 119)				::PlayState_obj::instance->persistentUpdate = false;
HXLINE( 120)				::PlayState_obj::instance->persistentDraw = true;
HXLINE( 121)				::PlayState_obj::instance->paused = true;
HXLINE( 123)				{
HXLINE( 123)					 ::flixel::_hx_system::FlxSound _this = ::PlayState_obj::instance->vocals;
HXDLIN( 123)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE( 124)				{
HXLINE( 124)					 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN( 124)					_this1->cleanup(_this1->autoDestroy,true);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatSubstate_obj,onWindowFocusOut,(void))

void MusicBeatSubstate_obj::onWindowFocusIn(){
            	HX_STACKFRAME(&_hx_pos_81b525467515cd1c_130_onWindowFocusIn)
HXLINE( 131)		::Debug_obj::logTrace(HX_("IM BACK!!!",3e,1f,67,e9),::hx::SourceInfo(HX_("source/MusicBeatSubstate.hx",e6,1a,67,80),131,HX_("MusicBeatSubstate",4c,20,4e,a8),HX_("onWindowFocusIn",2e,9f,1f,84)));
HXLINE( 132)		::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->setFPSCap(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicBeatSubstate_obj,onWindowFocusIn,(void))


::hx::ObjectPtr< MusicBeatSubstate_obj > MusicBeatSubstate_obj::__new() {
	::hx::ObjectPtr< MusicBeatSubstate_obj > __this = new MusicBeatSubstate_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MusicBeatSubstate_obj > MusicBeatSubstate_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MusicBeatSubstate_obj *__this = (MusicBeatSubstate_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MusicBeatSubstate_obj), true, "MusicBeatSubstate"));
	*(void **)__this = MusicBeatSubstate_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MusicBeatSubstate_obj::MusicBeatSubstate_obj()
{
}

::hx::Val MusicBeatSubstate_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"curStep") ) { return ::hx::Val( curStep ); }
		if (HX_FIELD_EQ(inName,"curBeat") ) { return ::hx::Val( curBeat ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastBeat") ) { return ::hx::Val( lastBeat ); }
		if (HX_FIELD_EQ(inName,"lastStep") ) { return ::hx::Val( lastStep ); }
		if (HX_FIELD_EQ(inName,"controls") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_controls() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"updateBeat") ) { return ::hx::Val( updateBeat_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_controls") ) { return ::hx::Val( get_controls_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateCurStep") ) { return ::hx::Val( updateCurStep_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onWindowFocusIn") ) { return ::hx::Val( onWindowFocusIn_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"onWindowFocusOut") ) { return ::hx::Val( onWindowFocusOut_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MusicBeatSubstate_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"curStep") ) { curStep=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curBeat") ) { curBeat=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lastBeat") ) { lastBeat=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastStep") ) { lastStep=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MusicBeatSubstate_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("lastBeat",ec,fa,5c,d4));
	outFields->push(HX_("lastStep",c2,00,a5,df));
	outFields->push(HX_("curStep",ec,58,71,b7));
	outFields->push(HX_("curBeat",16,53,29,ac));
	outFields->push(HX_("controls",76,86,bc,37));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MusicBeatSubstate_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(MusicBeatSubstate_obj,lastBeat),HX_("lastBeat",ec,fa,5c,d4)},
	{::hx::fsFloat,(int)offsetof(MusicBeatSubstate_obj,lastStep),HX_("lastStep",c2,00,a5,df)},
	{::hx::fsInt,(int)offsetof(MusicBeatSubstate_obj,curStep),HX_("curStep",ec,58,71,b7)},
	{::hx::fsInt,(int)offsetof(MusicBeatSubstate_obj,curBeat),HX_("curBeat",16,53,29,ac)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MusicBeatSubstate_obj_sStaticStorageInfo = 0;
#endif

static ::String MusicBeatSubstate_obj_sMemberFields[] = {
	HX_("destroy",fa,2c,86,24),
	HX_("create",fc,66,0f,7c),
	HX_("lastBeat",ec,fa,5c,d4),
	HX_("lastStep",c2,00,a5,df),
	HX_("curStep",ec,58,71,b7),
	HX_("curBeat",16,53,29,ac),
	HX_("get_controls",7f,3a,d6,ec),
	HX_("update",09,86,05,87),
	HX_("updateBeat",1f,cc,c8,f9),
	HX_("updateCurStep",e3,bd,df,82),
	HX_("stepHit",67,ae,41,81),
	HX_("beatHit",7d,ea,04,74),
	HX_("onWindowFocusOut",25,3d,90,17),
	HX_("onWindowFocusIn",2e,9f,1f,84),
	::String(null()) };

::hx::Class MusicBeatSubstate_obj::__mClass;

void MusicBeatSubstate_obj::__register()
{
	MusicBeatSubstate_obj _hx_dummy;
	MusicBeatSubstate_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MusicBeatSubstate",4c,20,4e,a8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MusicBeatSubstate_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MusicBeatSubstate_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MusicBeatSubstate_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MusicBeatSubstate_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

