// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_media_vorbis_VorbisFile
#include <lime/media/vorbis/VorbisFile.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_media_ID3Info
#include <openfl/media/ID3Info.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_openfl_media_SoundMixer
#include <openfl/media/SoundMixer.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5a9f676c476e7e7b_268_new,"openfl.media.Sound","new",0xfdfd1c39,"openfl.media.Sound.new","openfl/media/Sound.hx",268,0x46a01619)
HX_LOCAL_STACK_FRAME(_hx_pos_5a9f676c476e7e7b_458_load,"openfl.media.Sound","load",0x3e30ac2d,"openfl.media.Sound.load","openfl/media/Sound.hx",458,0x46a01619)
HX_LOCAL_STACK_FRAME(_hx_pos_5a9f676c476e7e7b_437_load,"openfl.media.Sound","load",0x3e30ac2d,"openfl.media.Sound.load","openfl/media/Sound.hx",437,0x46a01619)
HX_LOCAL_STACK_FRAME(_hx_pos_5a9f676c476e7e7b_474_loadCompressedDataFromByteArray,"openfl.media.Sound","loadCompressedDataFromByteArray",0x8f237f2f,"openfl.media.Sound.loadCompressedDataFromByteArray","openfl/media/Sound.hx",474,0x46a01619)
HX_LOCAL_STACK_FRAME(_hx_pos_5a9f676c476e7e7b_621_play,"openfl.media.Sound","play",0x40d33ffb,"openfl.media.Sound.play","openfl/media/Sound.hx",621,0x46a01619)
HX_LOCAL_STACK_FRAME(_hx_pos_5a9f676c476e7e7b_664_get_id3,"openfl.media.Sound","get_id3",0xac6378e8,"openfl.media.Sound.get_id3","openfl/media/Sound.hx",664,0x46a01619)
HX_LOCAL_STACK_FRAME(_hx_pos_5a9f676c476e7e7b_668_get_length,"openfl.media.Sound","get_length",0xcc37d5f6,"openfl.media.Sound.get_length","openfl/media/Sound.hx",668,0x46a01619)
HX_LOCAL_STACK_FRAME(_hx_pos_5a9f676c476e7e7b_700_AudioBuffer_onURLLoad,"openfl.media.Sound","AudioBuffer_onURLLoad",0x80e63186,"openfl.media.Sound.AudioBuffer_onURLLoad","openfl/media/Sound.hx",700,0x46a01619)
HX_LOCAL_STACK_FRAME(_hx_pos_5a9f676c476e7e7b_334_fromAudioBuffer,"openfl.media.Sound","fromAudioBuffer",0xa9f89285,"openfl.media.Sound.fromAudioBuffer","openfl/media/Sound.hx",334,0x46a01619)
namespace openfl{
namespace media{

void Sound_obj::__construct( ::openfl::net::URLRequest stream, ::openfl::media::SoundLoaderContext context){
            	HX_STACKFRAME(&_hx_pos_5a9f676c476e7e7b_268_new)
HXLINE( 269)		super::__construct(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 271)		this->bytesLoaded = 0;
HXLINE( 272)		this->bytesTotal = 0;
HXLINE( 273)		this->isBuffering = false;
HXLINE( 274)		this->url = null();
HXLINE( 276)		if (::hx::IsNotNull( stream )) {
HXLINE( 278)			this->load(stream,context);
            		}
            	}

Dynamic Sound_obj::__CreateEmpty() { return new Sound_obj; }

void *Sound_obj::_hx_vtable = 0;

Dynamic Sound_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Sound_obj > _hx_result = new Sound_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Sound_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
	} else {
		return inClassId==(int)0x0ce018c7;
	}
}

void Sound_obj::load( ::openfl::net::URLRequest stream, ::openfl::media::SoundLoaderContext context){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::openfl::media::Sound,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic _){
            			HX_STACKFRAME(&_hx_pos_5a9f676c476e7e7b_458_load)
HXLINE( 458)			_gthis->AudioBuffer_onURLLoad(null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_5a9f676c476e7e7b_437_load)
HXLINE( 436)		 ::openfl::media::Sound _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 438)		this->url = stream->url;
HXLINE( 456)		::lime::media::AudioBuffer_obj::loadFromFile(this->url)->onComplete(this->AudioBuffer_onURLLoad_dyn())->onError( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Sound_obj,load,(void))

void Sound_obj::loadCompressedDataFromByteArray( ::openfl::utils::ByteArrayData bytes,int bytesLength){
            	HX_GC_STACKFRAME(&_hx_pos_5a9f676c476e7e7b_474_loadCompressedDataFromByteArray)
HXLINE( 475)		bool _hx_tmp;
HXDLIN( 475)		if (::hx::IsNotNull( bytes )) {
HXLINE( 475)			_hx_tmp = (bytesLength <= 0);
            		}
            		else {
HXLINE( 475)			_hx_tmp = true;
            		}
HXDLIN( 475)		if (_hx_tmp) {
HXLINE( 477)			this->dispatchEvent( ::openfl::events::IOErrorEvent_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),null(),null(),null(),null()));
HXLINE( 478)			return;
            		}
HXLINE( 481)		bool _hx_tmp1;
HXDLIN( 481)		int a = bytes->position;
HXDLIN( 481)		bool aNeg = (a < 0);
HXDLIN( 481)		bool bNeg = (0 < 0);
HXDLIN( 481)		bool _hx_tmp2;
HXDLIN( 481)		if ((aNeg != bNeg)) {
HXLINE( 481)			_hx_tmp2 = aNeg;
            		}
            		else {
HXLINE( 481)			_hx_tmp2 = (a > 0);
            		}
HXDLIN( 481)		if (!(_hx_tmp2)) {
HXLINE( 481)			int a = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(bytes);
HXDLIN( 481)			bool aNeg = (a < 0);
HXDLIN( 481)			bool bNeg = (bytesLength < 0);
HXDLIN( 481)			if ((aNeg != bNeg)) {
HXLINE( 481)				_hx_tmp1 = aNeg;
            			}
            			else {
HXLINE( 481)				_hx_tmp1 = (a > bytesLength);
            			}
            		}
            		else {
HXLINE( 481)			_hx_tmp1 = true;
            		}
HXDLIN( 481)		if (_hx_tmp1) {
HXLINE( 483)			 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,bytesLength);
HXDLIN( 483)			 ::openfl::utils::ByteArrayData copy = this1;
HXLINE( 484)			copy->writeBytes(bytes,bytes->position,bytesLength);
HXLINE( 485)			bytes = copy;
            		}
HXLINE( 489)		this->_hx___buffer = ::lime::media::AudioBuffer_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes));
HXLINE( 491)		if (::hx::IsNull( this->_hx___buffer )) {
HXLINE( 493)			this->dispatchEvent( ::openfl::events::IOErrorEvent_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),null(),null(),null(),null()));
            		}
            		else {
HXLINE( 497)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("complete",b9,00,c8,7f),null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Sound_obj,loadCompressedDataFromByteArray,(void))

 ::openfl::media::SoundChannel Sound_obj::play(::hx::Null< Float >  __o_startTime,::hx::Null< int >  __o_loops, ::openfl::media::SoundTransform sndTransform){
            		Float startTime = __o_startTime.Default(((Float)0.0));
            		int loops = __o_loops.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_5a9f676c476e7e7b_621_play)
HXLINE( 623)		bool _hx_tmp;
HXDLIN( 623)		if (::hx::IsNotNull( this->_hx___buffer )) {
HXLINE( 623)			_hx_tmp = (::openfl::media::SoundMixer_obj::_hx___soundChannels->length >= 32);
            		}
            		else {
HXLINE( 623)			_hx_tmp = true;
            		}
HXDLIN( 623)		if (_hx_tmp) {
HXLINE( 625)			return null();
            		}
HXLINE( 628)		if (::hx::IsNull( sndTransform )) {
HXLINE( 630)			sndTransform =  ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,null(),null());
            		}
            		else {
HXLINE( 634)			sndTransform = sndTransform->clone();
            		}
HXLINE( 637)		Float pan = (::openfl::media::SoundMixer_obj::_hx___soundTransform->pan + sndTransform->pan);
HXLINE( 639)		if ((pan > 1)) {
HXLINE( 639)			pan = ( (Float)(1) );
            		}
HXLINE( 640)		if ((pan < -1)) {
HXLINE( 640)			pan = ( (Float)(-1) );
            		}
HXLINE( 642)		Float volume = (::openfl::media::SoundMixer_obj::_hx___soundTransform->volume * sndTransform->volume);
HXLINE( 644)		 ::lime::media::AudioSource source =  ::lime::media::AudioSource_obj::__alloc( HX_CTX ,this->_hx___buffer,null(),null(),null());
HXLINE( 645)		source->offset = ::Std_obj::_hx_int(startTime);
HXLINE( 646)		if ((loops > 1)) {
HXLINE( 646)			source->set_loops((loops - 1));
            		}
HXLINE( 648)		source->set_gain(volume);
HXLINE( 650)		 ::lime::math::Vector4 position = source->get_position();
HXLINE( 651)		position->x = pan;
HXLINE( 652)		position->z = (( (Float)(-1) ) * ::Math_obj::sqrt((( (Float)(1) ) - ::Math_obj::pow(pan,( (Float)(2) )))));
HXLINE( 653)		source->set_position(position);
HXLINE( 655)		return  ::openfl::media::SoundChannel_obj::__alloc( HX_CTX ,source,sndTransform);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Sound_obj,play,return )

 ::openfl::media::ID3Info Sound_obj::get_id3(){
            	HX_GC_STACKFRAME(&_hx_pos_5a9f676c476e7e7b_664_get_id3)
HXDLIN( 664)		return  ::openfl::media::ID3Info_obj::__alloc( HX_CTX );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,get_id3,return )

int Sound_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_5a9f676c476e7e7b_668_get_length)
HXLINE( 670)		if (::hx::IsNotNull( this->_hx___buffer )) {
HXLINE( 675)			if (::hx::IsNotNull( this->_hx___buffer->data )) {
HXLINE( 677)				Float samples = (( (Float)((this->_hx___buffer->data->length * 8)) ) / ( (Float)((this->_hx___buffer->channels * this->_hx___buffer->bitsPerSample)) ));
HXLINE( 678)				return ::Std_obj::_hx_int(((samples / ( (Float)(this->_hx___buffer->sampleRate) )) * ( (Float)(1000) )));
            			}
            			else {
HXLINE( 680)				if (::hx::IsNotNull( this->_hx___buffer->_hx___srcVorbisFile )) {
HXLINE( 682)					 cpp::Int64Struct x = this->_hx___buffer->_hx___srcVorbisFile->pcmTotal(null());
HXDLIN( 682)					int _hx_tmp = _hx_int64_high(x);
HXDLIN( 682)					if ((_hx_tmp != (_hx_int64_low(x) >> 31))) {
HXLINE( 682)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Overflow",62,9f,ed,1a)));
            					}
HXDLIN( 682)					int samples = _hx_int64_low(x);
HXLINE( 683)					return ::Std_obj::_hx_int(((( (Float)(samples) ) / ( (Float)(this->_hx___buffer->sampleRate) )) * ( (Float)(1000) )));
            				}
            				else {
HXLINE( 687)					return 0;
            				}
            			}
            		}
HXLINE( 693)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,get_length,return )

void Sound_obj::AudioBuffer_onURLLoad( ::lime::media::AudioBuffer buffer){
            	HX_GC_STACKFRAME(&_hx_pos_5a9f676c476e7e7b_700_AudioBuffer_onURLLoad)
HXDLIN( 700)		if (::hx::IsNull( buffer )) {
HXLINE( 702)			this->dispatchEvent( ::openfl::events::IOErrorEvent_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),null(),null(),null(),null()));
            		}
            		else {
HXLINE( 706)			this->_hx___buffer = buffer;
HXLINE( 707)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("complete",b9,00,c8,7f),null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sound_obj,AudioBuffer_onURLLoad,(void))

 ::openfl::media::Sound Sound_obj::fromAudioBuffer( ::lime::media::AudioBuffer buffer){
            	HX_GC_STACKFRAME(&_hx_pos_5a9f676c476e7e7b_334_fromAudioBuffer)
HXLINE( 335)		 ::openfl::media::Sound sound =  ::openfl::media::Sound_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 336)		sound->_hx___buffer = buffer;
HXLINE( 337)		return sound;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sound_obj,fromAudioBuffer,return )


::hx::ObjectPtr< Sound_obj > Sound_obj::__new( ::openfl::net::URLRequest stream, ::openfl::media::SoundLoaderContext context) {
	::hx::ObjectPtr< Sound_obj > __this = new Sound_obj();
	__this->__construct(stream,context);
	return __this;
}

::hx::ObjectPtr< Sound_obj > Sound_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::net::URLRequest stream, ::openfl::media::SoundLoaderContext context) {
	Sound_obj *__this = (Sound_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Sound_obj), true, "openfl.media.Sound"));
	*(void **)__this = Sound_obj::_hx_vtable;
	__this->__construct(stream,context);
	return __this;
}

Sound_obj::Sound_obj()
{
}

void Sound_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Sound);
	HX_MARK_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_MARK_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_MARK_MEMBER_NAME(isBuffering,"isBuffering");
	HX_MARK_MEMBER_NAME(url,"url");
	HX_MARK_MEMBER_NAME(_hx___buffer,"__buffer");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Sound_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_VISIT_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_VISIT_MEMBER_NAME(isBuffering,"isBuffering");
	HX_VISIT_MEMBER_NAME(url,"url");
	HX_VISIT_MEMBER_NAME(_hx___buffer,"__buffer");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Sound_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"id3") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_id3() ); }
		if (HX_FIELD_EQ(inName,"url") ) { return ::hx::Val( url ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return ::hx::Val( load_dyn() ); }
		if (HX_FIELD_EQ(inName,"play") ) { return ::hx::Val( play_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_length() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_id3") ) { return ::hx::Val( get_id3_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__buffer") ) { return ::hx::Val( _hx___buffer ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { return ::hx::Val( bytesTotal ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { return ::hx::Val( bytesLoaded ); }
		if (HX_FIELD_EQ(inName,"isBuffering") ) { return ::hx::Val( isBuffering ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"AudioBuffer_onURLLoad") ) { return ::hx::Val( AudioBuffer_onURLLoad_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"loadCompressedDataFromByteArray") ) { return ::hx::Val( loadCompressedDataFromByteArray_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Sound_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"fromAudioBuffer") ) { outValue = fromAudioBuffer_dyn(); return true; }
	}
	return false;
}

::hx::Val Sound_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { url=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__buffer") ) { _hx___buffer=inValue.Cast<  ::lime::media::AudioBuffer >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { bytesTotal=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { bytesLoaded=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isBuffering") ) { isBuffering=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Sound_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bytesLoaded",d0,66,ca,99));
	outFields->push(HX_("bytesTotal",59,57,da,45));
	outFields->push(HX_("id3",f8,03,50,00));
	outFields->push(HX_("isBuffering",98,26,10,90));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("url",6f,2b,59,00));
	outFields->push(HX_("__buffer",20,28,c4,78));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Sound_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Sound_obj,bytesLoaded),HX_("bytesLoaded",d0,66,ca,99)},
	{::hx::fsInt,(int)offsetof(Sound_obj,bytesTotal),HX_("bytesTotal",59,57,da,45)},
	{::hx::fsBool,(int)offsetof(Sound_obj,isBuffering),HX_("isBuffering",98,26,10,90)},
	{::hx::fsString,(int)offsetof(Sound_obj,url),HX_("url",6f,2b,59,00)},
	{::hx::fsObject /*  ::lime::media::AudioBuffer */ ,(int)offsetof(Sound_obj,_hx___buffer),HX_("__buffer",20,28,c4,78)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Sound_obj_sStaticStorageInfo = 0;
#endif

static ::String Sound_obj_sMemberFields[] = {
	HX_("bytesLoaded",d0,66,ca,99),
	HX_("bytesTotal",59,57,da,45),
	HX_("isBuffering",98,26,10,90),
	HX_("url",6f,2b,59,00),
	HX_("__buffer",20,28,c4,78),
	HX_("load",26,9a,b7,47),
	HX_("loadCompressedDataFromByteArray",d6,4f,5d,a0),
	HX_("play",f4,2d,5a,4a),
	HX_("get_id3",8f,cc,c4,26),
	HX_("get_length",af,04,8f,8f),
	HX_("AudioBuffer_onURLLoad",6d,fb,f7,c7),
	::String(null()) };

::hx::Class Sound_obj::__mClass;

static ::String Sound_obj_sStaticFields[] = {
	HX_("fromAudioBuffer",2c,65,e0,cd),
	::String(null())
};

void Sound_obj::__register()
{
	Sound_obj _hx_dummy;
	Sound_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.media.Sound",c7,8b,e2,7e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Sound_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Sound_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Sound_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Sound_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sound_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sound_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace media
