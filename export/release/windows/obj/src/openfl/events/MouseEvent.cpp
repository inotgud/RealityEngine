// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_93a9f8214e96e0e7_630_new,"openfl.events.MouseEvent","new",0x5c6da59e,"openfl.events.MouseEvent.new","openfl/events/MouseEvent.hx",630,0xd3783172)
HX_LOCAL_STACK_FRAME(_hx_pos_93a9f8214e96e0e7_676___create,"openfl.events.MouseEvent","__create",0x1b813c1e,"openfl.events.MouseEvent.__create","openfl/events/MouseEvent.hx",676,0xd3783172)
namespace openfl{
namespace events{

void MouseEvent_obj::__construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< Float >  __o_localX,::hx::Null< Float >  __o_localY, ::openfl::display::InteractiveObject relatedObject,::hx::Null< bool >  __o_ctrlKey,::hx::Null< bool >  __o_altKey,::hx::Null< bool >  __o_shiftKey,::hx::Null< bool >  __o_buttonDown,::hx::Null< int >  __o_delta,::hx::Null< bool >  __o_commandKey,::hx::Null< int >  __o_clickCount){
            		bool bubbles = __o_bubbles.Default(true);
            		bool cancelable = __o_cancelable.Default(false);
            		Float localX = __o_localX.Default(0);
            		Float localY = __o_localY.Default(0);
            		bool ctrlKey = __o_ctrlKey.Default(false);
            		bool altKey = __o_altKey.Default(false);
            		bool shiftKey = __o_shiftKey.Default(false);
            		bool buttonDown = __o_buttonDown.Default(false);
            		int delta = __o_delta.Default(0);
            		bool commandKey = __o_commandKey.Default(false);
            		int clickCount = __o_clickCount.Default(0);
            	HX_STACKFRAME(&_hx_pos_93a9f8214e96e0e7_630_new)
HXLINE( 631)		super::__construct(type,bubbles,cancelable);
HXLINE( 633)		this->shiftKey = shiftKey;
HXLINE( 634)		this->altKey = altKey;
HXLINE( 635)		this->ctrlKey = ctrlKey;
HXLINE( 636)		this->bubbles = bubbles;
HXLINE( 637)		this->relatedObject = relatedObject;
HXLINE( 638)		this->delta = delta;
HXLINE( 639)		this->localX = localX;
HXLINE( 640)		this->localY = localY;
HXLINE( 641)		this->buttonDown = buttonDown;
HXLINE( 642)		this->commandKey = commandKey;
HXLINE( 643)		this->clickCount = clickCount;
HXLINE( 645)		this->isRelatedObjectInaccessible = false;
HXLINE( 646)		this->stageX = ::Math_obj::NaN;
HXLINE( 647)		this->stageY = ::Math_obj::NaN;
            	}

Dynamic MouseEvent_obj::__CreateEmpty() { return new MouseEvent_obj; }

void *MouseEvent_obj::_hx_vtable = 0;

Dynamic MouseEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MouseEvent_obj > _hx_result = new MouseEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12]);
	return _hx_result;
}

bool MouseEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x08ec4c31) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x08ec4c31;
	} else {
		return inClassId==(int)0x1f972106;
	}
}

bool MouseEvent_obj::_hx___altKey;

bool MouseEvent_obj::_hx___buttonDown;

bool MouseEvent_obj::_hx___commandKey;

bool MouseEvent_obj::_hx___ctrlKey;

bool MouseEvent_obj::_hx___shiftKey;

 ::openfl::events::MouseEvent MouseEvent_obj::_hx___create(::String type,int button,Float stageX,Float stageY, ::openfl::geom::Point local, ::openfl::display::InteractiveObject target,::hx::Null< int >  __o_delta){
            		int delta = __o_delta.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_93a9f8214e96e0e7_676___create)
HXLINE( 677)		 ::openfl::events::MouseEvent event =  ::openfl::events::MouseEvent_obj::__alloc( HX_CTX ,type,true,false,local->x,local->y,null(),::openfl::events::MouseEvent_obj::_hx___ctrlKey,::openfl::events::MouseEvent_obj::_hx___altKey,::openfl::events::MouseEvent_obj::_hx___shiftKey,::openfl::events::MouseEvent_obj::_hx___buttonDown,delta,::openfl::events::MouseEvent_obj::_hx___commandKey,null());
HXLINE( 678)		event->stageX = stageX;
HXLINE( 679)		event->stageY = stageY;
HXLINE( 680)		event->target = target;
HXLINE( 682)		return event;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(MouseEvent_obj,_hx___create,return )


::hx::ObjectPtr< MouseEvent_obj > MouseEvent_obj::__new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< Float >  __o_localX,::hx::Null< Float >  __o_localY, ::openfl::display::InteractiveObject relatedObject,::hx::Null< bool >  __o_ctrlKey,::hx::Null< bool >  __o_altKey,::hx::Null< bool >  __o_shiftKey,::hx::Null< bool >  __o_buttonDown,::hx::Null< int >  __o_delta,::hx::Null< bool >  __o_commandKey,::hx::Null< int >  __o_clickCount) {
	::hx::ObjectPtr< MouseEvent_obj > __this = new MouseEvent_obj();
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_localX,__o_localY,relatedObject,__o_ctrlKey,__o_altKey,__o_shiftKey,__o_buttonDown,__o_delta,__o_commandKey,__o_clickCount);
	return __this;
}

::hx::ObjectPtr< MouseEvent_obj > MouseEvent_obj::__alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< Float >  __o_localX,::hx::Null< Float >  __o_localY, ::openfl::display::InteractiveObject relatedObject,::hx::Null< bool >  __o_ctrlKey,::hx::Null< bool >  __o_altKey,::hx::Null< bool >  __o_shiftKey,::hx::Null< bool >  __o_buttonDown,::hx::Null< int >  __o_delta,::hx::Null< bool >  __o_commandKey,::hx::Null< int >  __o_clickCount) {
	MouseEvent_obj *__this = (MouseEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MouseEvent_obj), true, "openfl.events.MouseEvent"));
	*(void **)__this = MouseEvent_obj::_hx_vtable;
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_localX,__o_localY,relatedObject,__o_ctrlKey,__o_altKey,__o_shiftKey,__o_buttonDown,__o_delta,__o_commandKey,__o_clickCount);
	return __this;
}

MouseEvent_obj::MouseEvent_obj()
{
}

void MouseEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MouseEvent);
	HX_MARK_MEMBER_NAME(altKey,"altKey");
	HX_MARK_MEMBER_NAME(buttonDown,"buttonDown");
	HX_MARK_MEMBER_NAME(commandKey,"commandKey");
	HX_MARK_MEMBER_NAME(clickCount,"clickCount");
	HX_MARK_MEMBER_NAME(ctrlKey,"ctrlKey");
	HX_MARK_MEMBER_NAME(delta,"delta");
	HX_MARK_MEMBER_NAME(isRelatedObjectInaccessible,"isRelatedObjectInaccessible");
	HX_MARK_MEMBER_NAME(localX,"localX");
	HX_MARK_MEMBER_NAME(localY,"localY");
	HX_MARK_MEMBER_NAME(relatedObject,"relatedObject");
	HX_MARK_MEMBER_NAME(shiftKey,"shiftKey");
	HX_MARK_MEMBER_NAME(stageX,"stageX");
	HX_MARK_MEMBER_NAME(stageY,"stageY");
	 ::openfl::events::Event_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MouseEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(altKey,"altKey");
	HX_VISIT_MEMBER_NAME(buttonDown,"buttonDown");
	HX_VISIT_MEMBER_NAME(commandKey,"commandKey");
	HX_VISIT_MEMBER_NAME(clickCount,"clickCount");
	HX_VISIT_MEMBER_NAME(ctrlKey,"ctrlKey");
	HX_VISIT_MEMBER_NAME(delta,"delta");
	HX_VISIT_MEMBER_NAME(isRelatedObjectInaccessible,"isRelatedObjectInaccessible");
	HX_VISIT_MEMBER_NAME(localX,"localX");
	HX_VISIT_MEMBER_NAME(localY,"localY");
	HX_VISIT_MEMBER_NAME(relatedObject,"relatedObject");
	HX_VISIT_MEMBER_NAME(shiftKey,"shiftKey");
	HX_VISIT_MEMBER_NAME(stageX,"stageX");
	HX_VISIT_MEMBER_NAME(stageY,"stageY");
	 ::openfl::events::Event_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MouseEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delta") ) { return ::hx::Val( delta ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"altKey") ) { return ::hx::Val( altKey ); }
		if (HX_FIELD_EQ(inName,"localX") ) { return ::hx::Val( localX ); }
		if (HX_FIELD_EQ(inName,"localY") ) { return ::hx::Val( localY ); }
		if (HX_FIELD_EQ(inName,"stageX") ) { return ::hx::Val( stageX ); }
		if (HX_FIELD_EQ(inName,"stageY") ) { return ::hx::Val( stageY ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ctrlKey") ) { return ::hx::Val( ctrlKey ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shiftKey") ) { return ::hx::Val( shiftKey ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"buttonDown") ) { return ::hx::Val( buttonDown ); }
		if (HX_FIELD_EQ(inName,"commandKey") ) { return ::hx::Val( commandKey ); }
		if (HX_FIELD_EQ(inName,"clickCount") ) { return ::hx::Val( clickCount ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"relatedObject") ) { return ::hx::Val( relatedObject ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"isRelatedObjectInaccessible") ) { return ::hx::Val( isRelatedObjectInaccessible ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MouseEvent_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__altKey") ) { outValue = ( _hx___altKey ); return true; }
		if (HX_FIELD_EQ(inName,"__create") ) { outValue = _hx___create_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__ctrlKey") ) { outValue = ( _hx___ctrlKey ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__shiftKey") ) { outValue = ( _hx___shiftKey ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__buttonDown") ) { outValue = ( _hx___buttonDown ); return true; }
		if (HX_FIELD_EQ(inName,"__commandKey") ) { outValue = ( _hx___commandKey ); return true; }
	}
	return false;
}

::hx::Val MouseEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delta") ) { delta=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"altKey") ) { altKey=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"localX") ) { localX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"localY") ) { localY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageX") ) { stageX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageY") ) { stageY=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ctrlKey") ) { ctrlKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shiftKey") ) { shiftKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"buttonDown") ) { buttonDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"commandKey") ) { commandKey=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clickCount") ) { clickCount=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"relatedObject") ) { relatedObject=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"isRelatedObjectInaccessible") ) { isRelatedObjectInaccessible=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MouseEvent_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__altKey") ) { _hx___altKey=ioValue.Cast< bool >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__ctrlKey") ) { _hx___ctrlKey=ioValue.Cast< bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__shiftKey") ) { _hx___shiftKey=ioValue.Cast< bool >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__buttonDown") ) { _hx___buttonDown=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"__commandKey") ) { _hx___commandKey=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void MouseEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("altKey",f6,a7,ca,44));
	outFields->push(HX_("buttonDown",74,67,64,ac));
	outFields->push(HX_("commandKey",14,71,9b,43));
	outFields->push(HX_("clickCount",67,b3,e2,8a));
	outFields->push(HX_("ctrlKey",b4,35,7d,61));
	outFields->push(HX_("delta",f8,e7,26,d7));
	outFields->push(HX_("isRelatedObjectInaccessible",3b,db,9d,a0));
	outFields->push(HX_("localX",8d,74,bf,59));
	outFields->push(HX_("localY",8e,74,bf,59));
	outFields->push(HX_("relatedObject",0a,bf,cb,e8));
	outFields->push(HX_("shiftKey",3d,92,9f,99));
	outFields->push(HX_("stageX",da,fb,f1,05));
	outFields->push(HX_("stageY",db,fb,f1,05));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MouseEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(MouseEvent_obj,altKey),HX_("altKey",f6,a7,ca,44)},
	{::hx::fsBool,(int)offsetof(MouseEvent_obj,buttonDown),HX_("buttonDown",74,67,64,ac)},
	{::hx::fsBool,(int)offsetof(MouseEvent_obj,commandKey),HX_("commandKey",14,71,9b,43)},
	{::hx::fsInt,(int)offsetof(MouseEvent_obj,clickCount),HX_("clickCount",67,b3,e2,8a)},
	{::hx::fsBool,(int)offsetof(MouseEvent_obj,ctrlKey),HX_("ctrlKey",b4,35,7d,61)},
	{::hx::fsInt,(int)offsetof(MouseEvent_obj,delta),HX_("delta",f8,e7,26,d7)},
	{::hx::fsBool,(int)offsetof(MouseEvent_obj,isRelatedObjectInaccessible),HX_("isRelatedObjectInaccessible",3b,db,9d,a0)},
	{::hx::fsFloat,(int)offsetof(MouseEvent_obj,localX),HX_("localX",8d,74,bf,59)},
	{::hx::fsFloat,(int)offsetof(MouseEvent_obj,localY),HX_("localY",8e,74,bf,59)},
	{::hx::fsObject /*  ::openfl::display::InteractiveObject */ ,(int)offsetof(MouseEvent_obj,relatedObject),HX_("relatedObject",0a,bf,cb,e8)},
	{::hx::fsBool,(int)offsetof(MouseEvent_obj,shiftKey),HX_("shiftKey",3d,92,9f,99)},
	{::hx::fsFloat,(int)offsetof(MouseEvent_obj,stageX),HX_("stageX",da,fb,f1,05)},
	{::hx::fsFloat,(int)offsetof(MouseEvent_obj,stageY),HX_("stageY",db,fb,f1,05)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MouseEvent_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &MouseEvent_obj::_hx___altKey,HX_("__altKey",16,13,fa,ec)},
	{::hx::fsBool,(void *) &MouseEvent_obj::_hx___buttonDown,HX_("__buttonDown",94,e2,f7,e4)},
	{::hx::fsBool,(void *) &MouseEvent_obj::_hx___commandKey,HX_("__commandKey",34,ec,2e,7c)},
	{::hx::fsBool,(void *) &MouseEvent_obj::_hx___ctrlKey,HX_("__ctrlKey",94,86,cb,e2)},
	{::hx::fsBool,(void *) &MouseEvent_obj::_hx___shiftKey,HX_("__shiftKey",5d,05,d8,3c)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MouseEvent_obj_sMemberFields[] = {
	HX_("altKey",f6,a7,ca,44),
	HX_("buttonDown",74,67,64,ac),
	HX_("commandKey",14,71,9b,43),
	HX_("clickCount",67,b3,e2,8a),
	HX_("ctrlKey",b4,35,7d,61),
	HX_("delta",f8,e7,26,d7),
	HX_("isRelatedObjectInaccessible",3b,db,9d,a0),
	HX_("localX",8d,74,bf,59),
	HX_("localY",8e,74,bf,59),
	HX_("relatedObject",0a,bf,cb,e8),
	HX_("shiftKey",3d,92,9f,99),
	HX_("stageX",da,fb,f1,05),
	HX_("stageY",db,fb,f1,05),
	::String(null()) };

static void MouseEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MouseEvent_obj::_hx___altKey,"__altKey");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::_hx___buttonDown,"__buttonDown");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::_hx___commandKey,"__commandKey");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::_hx___ctrlKey,"__ctrlKey");
	HX_MARK_MEMBER_NAME(MouseEvent_obj::_hx___shiftKey,"__shiftKey");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MouseEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::_hx___altKey,"__altKey");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::_hx___buttonDown,"__buttonDown");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::_hx___commandKey,"__commandKey");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::_hx___ctrlKey,"__ctrlKey");
	HX_VISIT_MEMBER_NAME(MouseEvent_obj::_hx___shiftKey,"__shiftKey");
};

#endif

::hx::Class MouseEvent_obj::__mClass;

static ::String MouseEvent_obj_sStaticFields[] = {
	HX_("__altKey",16,13,fa,ec),
	HX_("__buttonDown",94,e2,f7,e4),
	HX_("__commandKey",34,ec,2e,7c),
	HX_("__ctrlKey",94,86,cb,e2),
	HX_("__shiftKey",5d,05,d8,3c),
	HX_("__create",1c,d2,3e,24),
	::String(null())
};

void MouseEvent_obj::__register()
{
	MouseEvent_obj _hx_dummy;
	MouseEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.events.MouseEvent",ac,3e,4f,09);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MouseEvent_obj::__GetStatic;
	__mClass->mSetStaticField = &MouseEvent_obj::__SetStatic;
	__mClass->mMarkFunc = MouseEvent_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MouseEvent_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MouseEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MouseEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MouseEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MouseEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MouseEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace events
