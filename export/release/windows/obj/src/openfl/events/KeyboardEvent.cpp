// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c70c2341539e31f3_169_new,"openfl.events.KeyboardEvent","new",0xa9982e4e,"openfl.events.KeyboardEvent.new","openfl/events/KeyboardEvent.hx",169,0xce5f4702)
namespace openfl{
namespace events{

void KeyboardEvent_obj::__construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_charCodeValue,::hx::Null< int >  __o_keyCodeValue, ::Dynamic keyLocationValue,::hx::Null< bool >  __o_ctrlKeyValue,::hx::Null< bool >  __o_altKeyValue,::hx::Null< bool >  __o_shiftKeyValue,::hx::Null< bool >  __o_controlKeyValue,::hx::Null< bool >  __o_commandKeyValue){
            		bool bubbles = __o_bubbles.Default(false);
            		bool cancelable = __o_cancelable.Default(false);
            		int charCodeValue = __o_charCodeValue.Default(0);
            		int keyCodeValue = __o_keyCodeValue.Default(0);
            		bool ctrlKeyValue = __o_ctrlKeyValue.Default(false);
            		bool altKeyValue = __o_altKeyValue.Default(false);
            		bool shiftKeyValue = __o_shiftKeyValue.Default(false);
            		bool controlKeyValue = __o_controlKeyValue.Default(false);
            		bool commandKeyValue = __o_commandKeyValue.Default(false);
            	HX_STACKFRAME(&_hx_pos_c70c2341539e31f3_169_new)
HXLINE( 170)		super::__construct(type,bubbles,cancelable);
HXLINE( 172)		this->charCode = charCodeValue;
HXLINE( 173)		this->keyCode = keyCodeValue;
HXLINE( 174)		int _hx_tmp;
HXDLIN( 174)		if (::hx::IsNotNull( keyLocationValue )) {
HXLINE( 174)			_hx_tmp = ( (int)(keyLocationValue) );
            		}
            		else {
HXLINE( 174)			_hx_tmp = 0;
            		}
HXDLIN( 174)		this->keyLocation = _hx_tmp;
HXLINE( 175)		this->ctrlKey = ctrlKeyValue;
HXLINE( 176)		this->altKey = altKeyValue;
HXLINE( 177)		this->shiftKey = shiftKeyValue;
HXLINE( 180)		this->controlKey = controlKeyValue;
HXLINE( 181)		this->commandKey = commandKeyValue;
            	}

Dynamic KeyboardEvent_obj::__CreateEmpty() { return new KeyboardEvent_obj; }

void *KeyboardEvent_obj::_hx_vtable = 0;

Dynamic KeyboardEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KeyboardEvent_obj > _hx_result = new KeyboardEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

bool KeyboardEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x08ec4c31) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x08ec4c31;
	} else {
		return inClassId==(int)0x4994310a;
	}
}


KeyboardEvent_obj::KeyboardEvent_obj()
{
}

::hx::Val KeyboardEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"altKey") ) { return ::hx::Val( altKey ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ctrlKey") ) { return ::hx::Val( ctrlKey ); }
		if (HX_FIELD_EQ(inName,"keyCode") ) { return ::hx::Val( keyCode ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"charCode") ) { return ::hx::Val( charCode ); }
		if (HX_FIELD_EQ(inName,"shiftKey") ) { return ::hx::Val( shiftKey ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"commandKey") ) { return ::hx::Val( commandKey ); }
		if (HX_FIELD_EQ(inName,"controlKey") ) { return ::hx::Val( controlKey ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"keyLocation") ) { return ::hx::Val( keyLocation ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val KeyboardEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"altKey") ) { altKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ctrlKey") ) { ctrlKey=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keyCode") ) { keyCode=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"charCode") ) { charCode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shiftKey") ) { shiftKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"commandKey") ) { commandKey=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"controlKey") ) { controlKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"keyLocation") ) { keyLocation=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void KeyboardEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("altKey",f6,a7,ca,44));
	outFields->push(HX_("charCode",23,5f,24,9c));
	outFields->push(HX_("commandKey",14,71,9b,43));
	outFields->push(HX_("controlKey",42,8e,a5,04));
	outFields->push(HX_("ctrlKey",b4,35,7d,61));
	outFields->push(HX_("keyCode",6c,22,9e,9b));
	outFields->push(HX_("keyLocation",f4,ea,6a,2d));
	outFields->push(HX_("shiftKey",3d,92,9f,99));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo KeyboardEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(KeyboardEvent_obj,altKey),HX_("altKey",f6,a7,ca,44)},
	{::hx::fsInt,(int)offsetof(KeyboardEvent_obj,charCode),HX_("charCode",23,5f,24,9c)},
	{::hx::fsBool,(int)offsetof(KeyboardEvent_obj,commandKey),HX_("commandKey",14,71,9b,43)},
	{::hx::fsBool,(int)offsetof(KeyboardEvent_obj,controlKey),HX_("controlKey",42,8e,a5,04)},
	{::hx::fsBool,(int)offsetof(KeyboardEvent_obj,ctrlKey),HX_("ctrlKey",b4,35,7d,61)},
	{::hx::fsInt,(int)offsetof(KeyboardEvent_obj,keyCode),HX_("keyCode",6c,22,9e,9b)},
	{::hx::fsInt,(int)offsetof(KeyboardEvent_obj,keyLocation),HX_("keyLocation",f4,ea,6a,2d)},
	{::hx::fsBool,(int)offsetof(KeyboardEvent_obj,shiftKey),HX_("shiftKey",3d,92,9f,99)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *KeyboardEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String KeyboardEvent_obj_sMemberFields[] = {
	HX_("altKey",f6,a7,ca,44),
	HX_("charCode",23,5f,24,9c),
	HX_("commandKey",14,71,9b,43),
	HX_("controlKey",42,8e,a5,04),
	HX_("ctrlKey",b4,35,7d,61),
	HX_("keyCode",6c,22,9e,9b),
	HX_("keyLocation",f4,ea,6a,2d),
	HX_("shiftKey",3d,92,9f,99),
	::String(null()) };

::hx::Class KeyboardEvent_obj::__mClass;

void KeyboardEvent_obj::__register()
{
	KeyboardEvent_obj _hx_dummy;
	KeyboardEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.events.KeyboardEvent",5c,af,fb,d8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(KeyboardEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< KeyboardEvent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyboardEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyboardEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace events
