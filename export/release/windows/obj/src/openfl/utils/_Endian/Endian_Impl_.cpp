// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_openfl_utils__Endian_Endian_Impl_
#include <openfl/utils/_Endian/Endian_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f2873c031a8a146e_87_toLimeEndian,"openfl.utils._Endian.Endian_Impl_","toLimeEndian",0x6c00922f,"openfl.utils._Endian.Endian_Impl_.toLimeEndian","openfl/utils/Endian.hx",87,0xb1ee6086)
namespace openfl{
namespace utils{
namespace _Endian{

void Endian_Impl__obj::__construct() { }

Dynamic Endian_Impl__obj::__CreateEmpty() { return new Endian_Impl__obj; }

void *Endian_Impl__obj::_hx_vtable = 0;

Dynamic Endian_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Endian_Impl__obj > _hx_result = new Endian_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Endian_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x60d4f874;
}

 ::lime::_hx_system::Endian Endian_Impl__obj::toLimeEndian( ::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_f2873c031a8a146e_87_toLimeEndian)
HXDLIN(  87)		 ::Dynamic _hx_switch_0 = this1;
            		if (  (_hx_switch_0==0) ){
HXLINE(  89)			return ::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn();
HXDLIN(  89)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE(  90)			return ::lime::_hx_system::Endian_obj::_hx_LITTLE_ENDIAN_dyn();
HXDLIN(  90)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE(  91)			return null();
            		}
            		_hx_goto_0:;
HXLINE(  87)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Endian_Impl__obj,toLimeEndian,return )


Endian_Impl__obj::Endian_Impl__obj()
{
}

bool Endian_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"toLimeEndian") ) { outValue = toLimeEndian_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Endian_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Endian_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Endian_Impl__obj::__mClass;

static ::String Endian_Impl__obj_sStaticFields[] = {
	HX_("toLimeEndian",eb,52,dd,37),
	::String(null())
};

void Endian_Impl__obj::__register()
{
	Endian_Impl__obj _hx_dummy;
	Endian_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.utils._Endian.Endian_Impl_",aa,cb,09,1b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Endian_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Endian_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Endian_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Endian_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Endian_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace utils
} // end namespace _Endian
