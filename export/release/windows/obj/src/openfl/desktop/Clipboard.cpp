// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_openfl_desktop_Clipboard
#include <openfl/desktop/Clipboard.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_43f0cb7422aa030e_135_new,"openfl.desktop.Clipboard","new",0x2618b038,"openfl.desktop.Clipboard.new","openfl/desktop/Clipboard.hx",135,0x374e223a)
HX_LOCAL_STACK_FRAME(_hx_pos_43f0cb7422aa030e_251_getData,"openfl.desktop.Clipboard","getData",0x2693b1b8,"openfl.desktop.Clipboard.getData","openfl/desktop/Clipboard.hx",251,0x374e223a)
HX_LOCAL_STACK_FRAME(_hx_pos_43f0cb7422aa030e_525_get_generalClipboard,"openfl.desktop.Clipboard","get_generalClipboard",0x033867bf,"openfl.desktop.Clipboard.get_generalClipboard","openfl/desktop/Clipboard.hx",525,0x374e223a)
namespace openfl{
namespace desktop{

void Clipboard_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_43f0cb7422aa030e_135_new)
            	}

Dynamic Clipboard_obj::__CreateEmpty() { return new Clipboard_obj; }

void *Clipboard_obj::_hx_vtable = 0;

Dynamic Clipboard_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Clipboard_obj > _hx_result = new Clipboard_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Clipboard_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x32577872;
}

 ::Dynamic Clipboard_obj::getData( ::Dynamic format, ::Dynamic transferMode){
            	HX_STACKFRAME(&_hx_pos_43f0cb7422aa030e_251_getData)
HXLINE( 252)		if (::hx::IsNull( transferMode )) {
HXLINE( 254)			transferMode = 3;
            		}
HXLINE( 258)		if (this->_hx___systemClipboard) {
HXLINE( 260)			 ::Dynamic _hx_switch_0 = format;
            			if (  (_hx_switch_0==0) ||  (_hx_switch_0==1) ||  (_hx_switch_0==2) ){
HXLINE( 262)				return ::lime::_hx_system::Clipboard_obj::get_text();
HXDLIN( 262)				goto _hx_goto_1;
            			}
            			/* default */{
HXLINE( 263)				return null();
            			}
            			_hx_goto_1:;
            		}
HXLINE( 268)		 ::Dynamic _hx_switch_1 = format;
            		if (  (_hx_switch_1==0) ){
HXLINE( 270)			return this->_hx___htmlText;
HXDLIN( 270)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_1==1) ){
HXLINE( 271)			return this->_hx___richText;
HXDLIN( 271)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_1==2) ){
HXLINE( 272)			return this->_hx___text;
HXDLIN( 272)			goto _hx_goto_2;
            		}
            		/* default */{
HXLINE( 273)			return null();
            		}
            		_hx_goto_2:;
HXLINE( 268)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Clipboard_obj,getData,return )

 ::openfl::desktop::Clipboard Clipboard_obj::_hx___generalClipboard;

 ::openfl::desktop::Clipboard Clipboard_obj::get_generalClipboard(){
            	HX_GC_STACKFRAME(&_hx_pos_43f0cb7422aa030e_525_get_generalClipboard)
HXLINE( 526)		if (::hx::IsNull( ::openfl::desktop::Clipboard_obj::_hx___generalClipboard )) {
HXLINE( 528)			::openfl::desktop::Clipboard_obj::_hx___generalClipboard =  ::openfl::desktop::Clipboard_obj::__alloc( HX_CTX );
HXLINE( 529)			::openfl::desktop::Clipboard_obj::_hx___generalClipboard->_hx___systemClipboard = true;
            		}
HXLINE( 532)		return ::openfl::desktop::Clipboard_obj::_hx___generalClipboard;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Clipboard_obj,get_generalClipboard,return )


::hx::ObjectPtr< Clipboard_obj > Clipboard_obj::__new() {
	::hx::ObjectPtr< Clipboard_obj > __this = new Clipboard_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Clipboard_obj > Clipboard_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Clipboard_obj *__this = (Clipboard_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Clipboard_obj), true, "openfl.desktop.Clipboard"));
	*(void **)__this = Clipboard_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Clipboard_obj::Clipboard_obj()
{
}

void Clipboard_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Clipboard);
	HX_MARK_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_MARK_MEMBER_NAME(_hx___richText,"__richText");
	HX_MARK_MEMBER_NAME(_hx___systemClipboard,"__systemClipboard");
	HX_MARK_MEMBER_NAME(_hx___text,"__text");
	HX_MARK_END_CLASS();
}

void Clipboard_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_VISIT_MEMBER_NAME(_hx___richText,"__richText");
	HX_VISIT_MEMBER_NAME(_hx___systemClipboard,"__systemClipboard");
	HX_VISIT_MEMBER_NAME(_hx___text,"__text");
}

::hx::Val Clipboard_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__text") ) { return ::hx::Val( _hx___text ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getData") ) { return ::hx::Val( getData_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__htmlText") ) { return ::hx::Val( _hx___htmlText ); }
		if (HX_FIELD_EQ(inName,"__richText") ) { return ::hx::Val( _hx___richText ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__systemClipboard") ) { return ::hx::Val( _hx___systemClipboard ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Clipboard_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"generalClipboard") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_generalClipboard() ); return true; } }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__generalClipboard") ) { outValue = ( _hx___generalClipboard ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_generalClipboard") ) { outValue = get_generalClipboard_dyn(); return true; }
	}
	return false;
}

::hx::Val Clipboard_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__text") ) { _hx___text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__htmlText") ) { _hx___htmlText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__richText") ) { _hx___richText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__systemClipboard") ) { _hx___systemClipboard=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Clipboard_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"__generalClipboard") ) { _hx___generalClipboard=ioValue.Cast<  ::openfl::desktop::Clipboard >(); return true; }
	}
	return false;
}

void Clipboard_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("__htmlText",d8,92,70,b3));
	outFields->push(HX_("__richText",09,00,d1,d8));
	outFields->push(HX_("__systemClipboard",c7,09,a5,2f));
	outFields->push(HX_("__text",cd,2f,f2,fb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Clipboard_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Clipboard_obj,_hx___htmlText),HX_("__htmlText",d8,92,70,b3)},
	{::hx::fsString,(int)offsetof(Clipboard_obj,_hx___richText),HX_("__richText",09,00,d1,d8)},
	{::hx::fsBool,(int)offsetof(Clipboard_obj,_hx___systemClipboard),HX_("__systemClipboard",c7,09,a5,2f)},
	{::hx::fsString,(int)offsetof(Clipboard_obj,_hx___text),HX_("__text",cd,2f,f2,fb)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Clipboard_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::desktop::Clipboard */ ,(void *) &Clipboard_obj::_hx___generalClipboard,HX_("__generalClipboard",ae,c8,3c,a1)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Clipboard_obj_sMemberFields[] = {
	HX_("__htmlText",d8,92,70,b3),
	HX_("__richText",09,00,d1,d8),
	HX_("__systemClipboard",c7,09,a5,2f),
	HX_("__text",cd,2f,f2,fb),
	HX_("getData",e0,05,e6,14),
	::String(null()) };

static void Clipboard_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Clipboard_obj::_hx___generalClipboard,"__generalClipboard");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Clipboard_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Clipboard_obj::_hx___generalClipboard,"__generalClipboard");
};

#endif

::hx::Class Clipboard_obj::__mClass;

static ::String Clipboard_obj_sStaticFields[] = {
	HX_("__generalClipboard",ae,c8,3c,a1),
	HX_("get_generalClipboard",97,9a,16,54),
	::String(null())
};

void Clipboard_obj::__register()
{
	Clipboard_obj _hx_dummy;
	Clipboard_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.desktop.Clipboard",46,74,06,43);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Clipboard_obj::__GetStatic;
	__mClass->mSetStaticField = &Clipboard_obj::__SetStatic;
	__mClass->mMarkFunc = Clipboard_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Clipboard_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Clipboard_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Clipboard_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Clipboard_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Clipboard_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Clipboard_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace desktop
