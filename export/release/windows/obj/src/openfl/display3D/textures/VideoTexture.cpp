// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_VideoTexture
#include <openfl/display3D/textures/VideoTexture.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8bd748bb3c8a0c13_61_new,"openfl.display3D.textures.VideoTexture","new",0x6f95260f,"openfl.display3D.textures.VideoTexture.new","openfl/display3D/textures/VideoTexture.hx",61,0x1fe25aa2)
HX_LOCAL_STACK_FRAME(_hx_pos_8bd748bb3c8a0c13_130_dispose,"openfl.display3D.textures.VideoTexture","dispose",0x317bd9ce,"openfl.display3D.textures.VideoTexture.dispose","openfl/display3D/textures/VideoTexture.hx",130,0x1fe25aa2)
HX_LOCAL_STACK_FRAME(_hx_pos_8bd748bb3c8a0c13_162___getTexture,"openfl.display3D.textures.VideoTexture","__getTexture",0x7429c676,"openfl.display3D.textures.VideoTexture.__getTexture","openfl/display3D/textures/VideoTexture.hx",162,0x1fe25aa2)
namespace openfl{
namespace display3D{
namespace textures{

void VideoTexture_obj::__construct( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_8bd748bb3c8a0c13_61_new)
HXLINE(  62)		super::__construct(context);
HXLINE(  64)		this->_hx___textureTarget = this->_hx___context->gl->TEXTURE_2D;
            	}

Dynamic VideoTexture_obj::__CreateEmpty() { return new VideoTexture_obj; }

void *VideoTexture_obj::_hx_vtable = 0;

Dynamic VideoTexture_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VideoTexture_obj > _hx_result = new VideoTexture_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool VideoTexture_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3247d979) {
		if (inClassId<=(int)0x0c89e854) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
		} else {
			return inClassId==(int)0x3247d979;
		}
	} else {
		return inClassId==(int)0x3f050bf7;
	}
}

void VideoTexture_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_8bd748bb3c8a0c13_130_dispose)
HXDLIN( 130)		this->super::dispose();
            	}


 ::lime::graphics::opengl::GLObject VideoTexture_obj::_hx___getTexture(){
            	HX_STACKFRAME(&_hx_pos_8bd748bb3c8a0c13_162___getTexture)
HXDLIN( 162)		return this->_hx___textureID;
            	}



::hx::ObjectPtr< VideoTexture_obj > VideoTexture_obj::__new( ::openfl::display3D::Context3D context) {
	::hx::ObjectPtr< VideoTexture_obj > __this = new VideoTexture_obj();
	__this->__construct(context);
	return __this;
}

::hx::ObjectPtr< VideoTexture_obj > VideoTexture_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::display3D::Context3D context) {
	VideoTexture_obj *__this = (VideoTexture_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VideoTexture_obj), true, "openfl.display3D.textures.VideoTexture"));
	*(void **)__this = VideoTexture_obj::_hx_vtable;
	__this->__construct(context);
	return __this;
}

VideoTexture_obj::VideoTexture_obj()
{
}

::hx::Val VideoTexture_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return ::hx::Val( dispose_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__getTexture") ) { return ::hx::Val( _hx___getTexture_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *VideoTexture_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *VideoTexture_obj_sStaticStorageInfo = 0;
#endif

static ::String VideoTexture_obj_sMemberFields[] = {
	HX_("dispose",9f,80,4c,bb),
	HX_("__getTexture",05,ca,d5,26),
	::String(null()) };

::hx::Class VideoTexture_obj::__mClass;

void VideoTexture_obj::__register()
{
	VideoTexture_obj _hx_dummy;
	VideoTexture_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.display3D.textures.VideoTexture",9d,72,4f,e9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VideoTexture_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VideoTexture_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VideoTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VideoTexture_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display3D
} // end namespace textures
