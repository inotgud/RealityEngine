// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_math__Matrix4_Matrix4_Impl_
#include <lime/math/_Matrix4/Matrix4_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectShader
#include <openfl/display/DisplayObjectShader.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_ITileContainer
#include <openfl/display/ITileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Bool
#include <openfl/display/ShaderParameter_Bool.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_SimpleButton
#include <openfl/display/SimpleButton.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DBitmap
#include <openfl/display/_internal/Context3DBitmap.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DBitmapData
#include <openfl/display/_internal/Context3DBitmapData.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DDisplayObject
#include <openfl/display/_internal/Context3DDisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DDisplayObjectContainer
#include <openfl/display/_internal/Context3DDisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DMaskShader
#include <openfl/display/_internal/Context3DMaskShader.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DSimpleButton
#include <openfl/display/_internal/Context3DSimpleButton.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DTextField
#include <openfl/display/_internal/Context3DTextField.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DTilemap
#include <openfl/display/_internal/Context3DTilemap.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DVideo
#include <openfl/display/_internal/Context3DVideo.h>
#endif
#ifndef INCLUDED_openfl_display__internal_ShaderBuffer
#include <openfl/display/_internal/ShaderBuffer.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__internal_Context3DState
#include <openfl/display3D/_internal/Context3DState.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_Video
#include <openfl/media/Video.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2f59d7e567bca573_168_new,"openfl.display.OpenGLRenderer","new",0x318619ae,"openfl.display.OpenGLRenderer.new","openfl/display/OpenGLRenderer.hx",168,0x89bd8a40)
HX_DEFINE_STACK_FRAME(_hx_pos_2f59d7e567bca573_107_new,"openfl.display.OpenGLRenderer","new",0x318619ae,"openfl.display.OpenGLRenderer.new","openfl/display/OpenGLRenderer.hx",107,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_176_applyAlpha,"openfl.display.OpenGLRenderer","applyAlpha",0xd5dfbf82,"openfl.display.OpenGLRenderer.applyAlpha","openfl/display/OpenGLRenderer.hx",176,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_195_applyBitmapData,"openfl.display.OpenGLRenderer","applyBitmapData",0x4c599b15,"openfl.display.OpenGLRenderer.applyBitmapData","openfl/display/OpenGLRenderer.hx",195,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_245_applyColorTransform,"openfl.display.OpenGLRenderer","applyColorTransform",0xad8c9ae5,"openfl.display.OpenGLRenderer.applyColorTransform","openfl/display/OpenGLRenderer.hx",245,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_284_applyHasColorTransform,"openfl.display.OpenGLRenderer","applyHasColorTransform",0x4989d2a7,"openfl.display.OpenGLRenderer.applyHasColorTransform","openfl/display/OpenGLRenderer.hx",284,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_302_applyMatrix,"openfl.display.OpenGLRenderer","applyMatrix",0xc7743d9d,"openfl.display.OpenGLRenderer.applyMatrix","openfl/display/OpenGLRenderer.hx",302,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_350_setShader,"openfl.display.OpenGLRenderer","setShader",0xe9e16c35,"openfl.display.OpenGLRenderer.setShader","openfl/display/OpenGLRenderer.hx",350,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_385_setViewport,"openfl.display.OpenGLRenderer","setViewport",0x9cb75d76,"openfl.display.OpenGLRenderer.setViewport","openfl/display/OpenGLRenderer.hx",385,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_395_updateShader,"openfl.display.OpenGLRenderer","updateShader",0x08518300,"openfl.display.OpenGLRenderer.updateShader","openfl/display/OpenGLRenderer.hx",395,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_412_useAlphaArray,"openfl.display.OpenGLRenderer","useAlphaArray",0x92a9e750,"openfl.display.OpenGLRenderer.useAlphaArray","openfl/display/OpenGLRenderer.hx",412,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_424_useColorTransformArray,"openfl.display.OpenGLRenderer","useColorTransformArray",0xf01908bb,"openfl.display.OpenGLRenderer.useColorTransformArray","openfl/display/OpenGLRenderer.hx",424,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_448___clear,"openfl.display.OpenGLRenderer","__clear",0x8e85d2bb,"openfl.display.OpenGLRenderer.__clear","openfl/display/OpenGLRenderer.hx",448,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_463___clearShader,"openfl.display.OpenGLRenderer","__clearShader",0x0d924440,"openfl.display.OpenGLRenderer.__clearShader","openfl/display/OpenGLRenderer.hx",463,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_484___copyShader,"openfl.display.OpenGLRenderer","__copyShader",0xf6e5bccc,"openfl.display.OpenGLRenderer.__copyShader","openfl/display/OpenGLRenderer.hx",484,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_494___getMatrix,"openfl.display.OpenGLRenderer","__getMatrix",0x35fc4fa5,"openfl.display.OpenGLRenderer.__getMatrix","openfl/display/OpenGLRenderer.hx",494,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_530___initShader,"openfl.display.OpenGLRenderer","__initShader",0x4566b267,"openfl.display.OpenGLRenderer.__initShader","openfl/display/OpenGLRenderer.hx",530,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_549___initDisplayShader,"openfl.display.OpenGLRenderer","__initDisplayShader",0x1a335405,"openfl.display.OpenGLRenderer.__initDisplayShader","openfl/display/OpenGLRenderer.hx",549,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_568___initGraphicsShader,"openfl.display.OpenGLRenderer","__initGraphicsShader",0x6e1a5b92,"openfl.display.OpenGLRenderer.__initGraphicsShader","openfl/display/OpenGLRenderer.hx",568,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_587___initShaderBuffer,"openfl.display.OpenGLRenderer","__initShaderBuffer",0x02c42ac7,"openfl.display.OpenGLRenderer.__initShaderBuffer","openfl/display/OpenGLRenderer.hx",587,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_597___popMask,"openfl.display.OpenGLRenderer","__popMask",0x3178efcb,"openfl.display.OpenGLRenderer.__popMask","openfl/display/OpenGLRenderer.hx",597,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_624___popMaskObject,"openfl.display.OpenGLRenderer","__popMaskObject",0x68af4cea,"openfl.display.OpenGLRenderer.__popMaskObject","openfl/display/OpenGLRenderer.hx",624,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_646___popMaskRect,"openfl.display.OpenGLRenderer","__popMaskRect",0x2af4aa8f,"openfl.display.OpenGLRenderer.__popMaskRect","openfl/display/OpenGLRenderer.hx",646,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_662___pushMask,"openfl.display.OpenGLRenderer","__pushMask",0xc3778378,"openfl.display.OpenGLRenderer.__pushMask","openfl/display/OpenGLRenderer.hx",662,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_683___pushMaskObject,"openfl.display.OpenGLRenderer","__pushMaskObject",0x7a5f6057,"openfl.display.OpenGLRenderer.__pushMaskObject","openfl/display/OpenGLRenderer.hx",683,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_708___pushMaskRect,"openfl.display.OpenGLRenderer","__pushMaskRect",0x178b18bc,"openfl.display.OpenGLRenderer.__pushMaskRect","openfl/display/OpenGLRenderer.hx",708,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_746___render,"openfl.display.OpenGLRenderer","__render",0x24141268,"openfl.display.OpenGLRenderer.__render","openfl/display/OpenGLRenderer.hx",746,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_842___renderDrawable,"openfl.display.OpenGLRenderer","__renderDrawable",0x47336226,"openfl.display.OpenGLRenderer.__renderDrawable","openfl/display/OpenGLRenderer.hx",842,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_868___renderDrawableMask,"openfl.display.OpenGLRenderer","__renderDrawableMask",0xb5f5da32,"openfl.display.OpenGLRenderer.__renderDrawableMask","openfl/display/OpenGLRenderer.hx",868,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_894___renderFilterPass,"openfl.display.OpenGLRenderer","__renderFilterPass",0xd0419531,"openfl.display.OpenGLRenderer.__renderFilterPass","openfl/display/OpenGLRenderer.hx",894,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_937___resize,"openfl.display.OpenGLRenderer","__resize",0x27660106,"openfl.display.OpenGLRenderer.__resize","openfl/display/OpenGLRenderer.hx",937,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_954___resumeClipAndMask,"openfl.display.OpenGLRenderer","__resumeClipAndMask",0x7bcaa3f4,"openfl.display.OpenGLRenderer.__resumeClipAndMask","openfl/display/OpenGLRenderer.hx",954,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_978___scissorRect,"openfl.display.OpenGLRenderer","__scissorRect",0xbdd8570e,"openfl.display.OpenGLRenderer.__scissorRect","openfl/display/OpenGLRenderer.hx",978,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_999___setBlendMode,"openfl.display.OpenGLRenderer","__setBlendMode",0xc7ebe4e4,"openfl.display.OpenGLRenderer.__setBlendMode","openfl/display/OpenGLRenderer.hx",999,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_1036___setRenderTarget,"openfl.display.OpenGLRenderer","__setRenderTarget",0xe23db0b7,"openfl.display.OpenGLRenderer.__setRenderTarget","openfl/display/OpenGLRenderer.hx",1036,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_1047___setShaderBuffer,"openfl.display.OpenGLRenderer","__setShaderBuffer",0x2c781375,"openfl.display.OpenGLRenderer.__setShaderBuffer","openfl/display/OpenGLRenderer.hx",1047,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_1053___suspendClipAndMask,"openfl.display.OpenGLRenderer","__suspendClipAndMask",0x40692e69,"openfl.display.OpenGLRenderer.__suspendClipAndMask","openfl/display/OpenGLRenderer.hx",1053,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_1068___updateShaderBuffer,"openfl.display.OpenGLRenderer","__updateShaderBuffer",0x07dc8fc0,"openfl.display.OpenGLRenderer.__updateShaderBuffer","openfl/display/OpenGLRenderer.hx",1068,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_55_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",55,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_57_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",57,0x89bd8a40)
static const Float _hx_array_data_fdf86abc_41[] = {
	(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_58_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",58,0x89bd8a40)
static const Float _hx_array_data_fdf86abc_43[] = {
	(Float)0,(Float)0,(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_59_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",59,0x89bd8a40)
static const Float _hx_array_data_fdf86abc_45[] = {
	(Float)0,(Float)0,(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_61_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",61,0x89bd8a40)
static const Float _hx_array_data_fdf86abc_47[] = {
	(Float)0,(Float)0,(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_63_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",63,0x89bd8a40)
static const bool _hx_array_data_fdf86abc_49[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_64_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",64,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_65_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",65,0x89bd8a40)
static const Float _hx_array_data_fdf86abc_52[] = {
	(Float)0,(Float)0,
};
namespace openfl{
namespace display{

void OpenGLRenderer_obj::__construct( ::openfl::display3D::Context3D context, ::openfl::display::BitmapData defaultRenderTarget){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::openfl::display::Shape _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_2f59d7e567bca573_168_new)
HXLINE( 168)			return  ::openfl::display::Shape_obj::__alloc( HX_CTX );
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_2f59d7e567bca573_107_new)
HXLINE( 108)		super::__construct();
HXLINE( 110)		this->_hx___context3D = context;
HXLINE( 111)		this->_hx___context = context->_hx___context;
HXLINE( 113)		this->gl = context->_hx___context->webgl;
HXLINE( 114)		this->_hx___gl = this->gl;
HXLINE( 116)		this->_hx___defaultRenderTarget = defaultRenderTarget;
HXLINE( 117)		this->_hx___flipped = ::hx::IsNull( this->_hx___defaultRenderTarget );
HXLINE( 119)		if (::hx::IsNull( ::openfl::display::Graphics_obj::maxTextureWidth )) {
HXLINE( 121)			::openfl::display::Graphics_obj::maxTextureWidth = (::openfl::display::Graphics_obj::maxTextureHeight = this->_hx___gl->getParameter(this->_hx___gl->MAX_TEXTURE_SIZE));
            		}
HXLINE( 125)		this->_hx___matrix = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 128)		this->_hx___values = ::Array_obj< Float >::__new();
HXLINE( 142)		this->_hx___softwareRenderer =  ::openfl::display::CairoRenderer_obj::__alloc( HX_CTX ,null());
HXLINE( 146)		this->_hx___type = HX_("opengl",6f,64,94,21);
HXLINE( 149)		this->_hx___setBlendMode(10);
HXLINE( 150)		this->_hx___context3D->_hx___setGLBlend(true);
HXLINE( 152)		this->_hx___clipRects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 153)		this->_hx___maskObjects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 154)		this->_hx___numClipRects = 0;
HXLINE( 156)		this->_hx___projection = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 157)		this->_hx___projectionFlipped = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 159)		this->_hx___stencilReference = 0;
HXLINE( 160)		this->_hx___tempRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 162)		this->_hx___defaultDisplayShader =  ::openfl::display::DisplayObjectShader_obj::__alloc( HX_CTX ,null());
HXLINE( 163)		this->_hx___defaultGraphicsShader =  ::openfl::display::GraphicsShader_obj::__alloc( HX_CTX ,null());
HXLINE( 164)		this->_hx___defaultShader = this->_hx___defaultDisplayShader;
HXLINE( 166)		this->_hx___initShader(this->_hx___defaultShader);
HXLINE( 168)		this->_hx___scrollRectMasks =  ::lime::utils::ObjectPool_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0()),null(),null());
HXLINE( 169)		this->_hx___maskShader =  ::openfl::display::_internal::Context3DMaskShader_obj::__alloc( HX_CTX );
            	}

Dynamic OpenGLRenderer_obj::__CreateEmpty() { return new OpenGLRenderer_obj; }

void *OpenGLRenderer_obj::_hx_vtable = 0;

Dynamic OpenGLRenderer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OpenGLRenderer_obj > _hx_result = new OpenGLRenderer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool OpenGLRenderer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x08dfcae4) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x08dfcae4;
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		return inClassId==(int)0x49529132;
	}
}

void OpenGLRenderer_obj::applyAlpha(Float alpha){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_176_applyAlpha)
HXLINE( 177)		::openfl::display::OpenGLRenderer_obj::_hx___alphaValue[0] = (alpha * this->_hx___worldAlpha);
HXLINE( 179)		if (::hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 181)			this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_Alpha",0f,ce,3e,6a),::openfl::display::OpenGLRenderer_obj::_hx___alphaValue);
            		}
            		else {
HXLINE( 183)			if (::hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 185)				if (::hx::IsNotNull( this->_hx___currentShader->_hx___alpha )) {
HXLINE( 185)					this->_hx___currentShader->_hx___alpha->value = ::openfl::display::OpenGLRenderer_obj::_hx___alphaValue;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,applyAlpha,(void))

void OpenGLRenderer_obj::applyBitmapData( ::openfl::display::BitmapData bitmapData,bool smooth,::hx::Null< bool >  __o_repeat){
            		bool repeat = __o_repeat.Default(false);
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_195_applyBitmapData)
HXDLIN( 195)		if (::hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 197)			if (::hx::IsNotNull( bitmapData )) {
HXLINE( 199)				::openfl::display::OpenGLRenderer_obj::_hx___textureSizeValue[0] = ( (Float)(bitmapData->_hx___textureWidth) );
HXLINE( 200)				::openfl::display::OpenGLRenderer_obj::_hx___textureSizeValue[1] = ( (Float)(bitmapData->_hx___textureHeight) );
HXLINE( 202)				this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_TextureSize",ad,60,72,29),::openfl::display::OpenGLRenderer_obj::_hx___textureSizeValue);
            			}
            		}
            		else {
HXLINE( 205)			if (::hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 207)				if (::hx::IsNotNull( this->_hx___currentShader->_hx___bitmap )) {
HXLINE( 209)					this->_hx___currentShader->_hx___bitmap->input = bitmapData;
HXLINE( 210)					 ::Dynamic _hx_tmp;
HXDLIN( 210)					bool _hx_tmp1;
HXDLIN( 210)					if (smooth) {
HXLINE( 210)						_hx_tmp1 = this->_hx___allowSmoothing;
            					}
            					else {
HXLINE( 210)						_hx_tmp1 = false;
            					}
HXDLIN( 210)					if (_hx_tmp1) {
HXLINE( 210)						_hx_tmp = 4;
            					}
            					else {
HXLINE( 210)						_hx_tmp = 5;
            					}
HXDLIN( 210)					this->_hx___currentShader->_hx___bitmap->filter = _hx_tmp;
HXLINE( 211)					this->_hx___currentShader->_hx___bitmap->mipFilter = 2;
HXLINE( 212)					 ::Dynamic _hx_tmp2;
HXDLIN( 212)					if (repeat) {
HXLINE( 212)						_hx_tmp2 = 2;
            					}
            					else {
HXLINE( 212)						_hx_tmp2 = 0;
            					}
HXDLIN( 212)					this->_hx___currentShader->_hx___bitmap->wrap = _hx_tmp2;
            				}
HXLINE( 215)				if (::hx::IsNotNull( this->_hx___currentShader->_hx___texture )) {
HXLINE( 217)					this->_hx___currentShader->_hx___texture->input = bitmapData;
HXLINE( 218)					 ::Dynamic _hx_tmp;
HXDLIN( 218)					bool _hx_tmp1;
HXDLIN( 218)					if (smooth) {
HXLINE( 218)						_hx_tmp1 = this->_hx___allowSmoothing;
            					}
            					else {
HXLINE( 218)						_hx_tmp1 = false;
            					}
HXDLIN( 218)					if (_hx_tmp1) {
HXLINE( 218)						_hx_tmp = 4;
            					}
            					else {
HXLINE( 218)						_hx_tmp = 5;
            					}
HXDLIN( 218)					this->_hx___currentShader->_hx___texture->filter = _hx_tmp;
HXLINE( 219)					this->_hx___currentShader->_hx___texture->mipFilter = 2;
HXLINE( 220)					 ::Dynamic _hx_tmp2;
HXDLIN( 220)					if (repeat) {
HXLINE( 220)						_hx_tmp2 = 2;
            					}
            					else {
HXLINE( 220)						_hx_tmp2 = 0;
            					}
HXDLIN( 220)					this->_hx___currentShader->_hx___texture->wrap = _hx_tmp2;
            				}
HXLINE( 223)				if (::hx::IsNotNull( this->_hx___currentShader->_hx___textureSize )) {
HXLINE( 225)					if (::hx::IsNotNull( bitmapData )) {
HXLINE( 227)						::openfl::display::OpenGLRenderer_obj::_hx___textureSizeValue[0] = ( (Float)(bitmapData->_hx___textureWidth) );
HXLINE( 228)						::openfl::display::OpenGLRenderer_obj::_hx___textureSizeValue[1] = ( (Float)(bitmapData->_hx___textureHeight) );
HXLINE( 230)						this->_hx___currentShader->_hx___textureSize->value = ::openfl::display::OpenGLRenderer_obj::_hx___textureSizeValue;
            					}
            					else {
HXLINE( 234)						this->_hx___currentShader->_hx___textureSize->value = null();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(OpenGLRenderer_obj,applyBitmapData,(void))

void OpenGLRenderer_obj::applyColorTransform( ::openfl::geom::ColorTransform colorTransform){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_245_applyColorTransform)
HXLINE( 246)		bool enabled;
HXDLIN( 246)		if (::hx::IsNotNull( colorTransform )) {
HXLINE( 246)			enabled = !(colorTransform->_hx___isDefault(true));
            		}
            		else {
HXLINE( 246)			enabled = false;
            		}
HXLINE( 247)		this->applyHasColorTransform(enabled);
HXLINE( 249)		if (enabled) {
HXLINE( 251)			colorTransform->_hx___setArrays(::openfl::display::OpenGLRenderer_obj::_hx___colorMultipliersValue,::openfl::display::OpenGLRenderer_obj::_hx___colorOffsetsValue);
HXLINE( 253)			if (::hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 255)				this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_ColorMultiplier",b5,e4,dc,18),::openfl::display::OpenGLRenderer_obj::_hx___colorMultipliersValue);
HXLINE( 256)				this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_ColorOffset",c7,ea,07,41),::openfl::display::OpenGLRenderer_obj::_hx___colorOffsetsValue);
            			}
            			else {
HXLINE( 258)				if (::hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 260)					if (::hx::IsNotNull( this->_hx___currentShader->_hx___colorMultiplier )) {
HXLINE( 260)						this->_hx___currentShader->_hx___colorMultiplier->value = ::openfl::display::OpenGLRenderer_obj::_hx___colorMultipliersValue;
            					}
HXLINE( 261)					if (::hx::IsNotNull( this->_hx___currentShader->_hx___colorOffset )) {
HXLINE( 261)						this->_hx___currentShader->_hx___colorOffset->value = ::openfl::display::OpenGLRenderer_obj::_hx___colorOffsetsValue;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 266)			if (::hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 268)				this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_ColorMultiplier",b5,e4,dc,18),::openfl::display::OpenGLRenderer_obj::_hx___emptyColorValue);
HXLINE( 269)				this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_ColorOffset",c7,ea,07,41),::openfl::display::OpenGLRenderer_obj::_hx___emptyColorValue);
            			}
            			else {
HXLINE( 271)				if (::hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 273)					if (::hx::IsNotNull( this->_hx___currentShader->_hx___colorMultiplier )) {
HXLINE( 273)						this->_hx___currentShader->_hx___colorMultiplier->value = ::openfl::display::OpenGLRenderer_obj::_hx___emptyColorValue;
            					}
HXLINE( 274)					if (::hx::IsNotNull( this->_hx___currentShader->_hx___colorOffset )) {
HXLINE( 274)						this->_hx___currentShader->_hx___colorOffset->value = ::openfl::display::OpenGLRenderer_obj::_hx___emptyColorValue;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,applyColorTransform,(void))

void OpenGLRenderer_obj::applyHasColorTransform(bool enabled){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_284_applyHasColorTransform)
HXLINE( 285)		::openfl::display::OpenGLRenderer_obj::_hx___hasColorTransformValue[0] = enabled;
HXLINE( 287)		if (::hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 289)			this->_hx___currentShaderBuffer->addBoolOverride(HX_("openfl_HasColorTransform",b4,00,4b,62),::openfl::display::OpenGLRenderer_obj::_hx___hasColorTransformValue);
            		}
            		else {
HXLINE( 291)			if (::hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 293)				if (::hx::IsNotNull( this->_hx___currentShader->_hx___hasColorTransform )) {
HXLINE( 293)					this->_hx___currentShader->_hx___hasColorTransform->value = ::openfl::display::OpenGLRenderer_obj::_hx___hasColorTransformValue;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,applyHasColorTransform,(void))

void OpenGLRenderer_obj::applyMatrix(::Array< Float > matrix){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_302_applyMatrix)
HXDLIN( 302)		if (::hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 304)			this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_Matrix",70,ea,41,06),matrix);
            		}
            		else {
HXLINE( 306)			if (::hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 308)				if (::hx::IsNotNull( this->_hx___currentShader->_hx___matrix )) {
HXLINE( 308)					this->_hx___currentShader->_hx___matrix->value = matrix;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,applyMatrix,(void))

void OpenGLRenderer_obj::setShader( ::openfl::display::Shader shader){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_350_setShader)
HXLINE( 351)		this->_hx___currentShaderBuffer = null();
HXLINE( 353)		if (::hx::IsEq( this->_hx___currentShader,shader )) {
HXLINE( 353)			return;
            		}
HXLINE( 355)		bool _hx_tmp = ::hx::IsNotNull( this->_hx___currentShader );
HXLINE( 361)		if (::hx::IsNull( shader )) {
HXLINE( 363)			this->_hx___currentShader = null();
HXLINE( 364)			this->_hx___context3D->setProgram(null());
HXLINE( 366)			return;
            		}
            		else {
HXLINE( 370)			this->_hx___currentShader = shader;
HXLINE( 371)			this->_hx___initShader(shader);
HXLINE( 372)			this->_hx___context3D->setProgram(shader->program);
HXLINE( 373)			this->_hx___context3D->_hx___flushGLProgram();
HXLINE( 375)			this->_hx___currentShader->_hx___enable();
HXLINE( 376)			this->_hx___context3D->_hx___state->shader = shader;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,setShader,(void))

void OpenGLRenderer_obj::setViewport(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_385_setViewport)
HXDLIN( 385)		this->_hx___gl->viewport(this->_hx___offsetX,this->_hx___offsetY,this->_hx___displayWidth,this->_hx___displayHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC0(OpenGLRenderer_obj,setViewport,(void))

void OpenGLRenderer_obj::updateShader(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_395_updateShader)
HXDLIN( 395)		if (::hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 397)			if (::hx::IsNotNull( this->_hx___currentShader->_hx___position )) {
HXLINE( 397)				this->_hx___currentShader->_hx___position->_hx___useArray = true;
            			}
HXLINE( 398)			if (::hx::IsNotNull( this->_hx___currentShader->_hx___textureCoord )) {
HXLINE( 398)				this->_hx___currentShader->_hx___textureCoord->_hx___useArray = true;
            			}
HXLINE( 399)			this->_hx___context3D->setProgram(this->_hx___currentShader->program);
HXLINE( 400)			this->_hx___context3D->_hx___flushGLProgram();
HXLINE( 401)			this->_hx___context3D->_hx___flushGLTextures();
HXLINE( 402)			this->_hx___currentShader->_hx___update();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OpenGLRenderer_obj,updateShader,(void))

void OpenGLRenderer_obj::useAlphaArray(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_412_useAlphaArray)
HXDLIN( 412)		if (::hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 414)			if (::hx::IsNotNull( this->_hx___currentShader->_hx___alpha )) {
HXLINE( 414)				this->_hx___currentShader->_hx___alpha->_hx___useArray = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OpenGLRenderer_obj,useAlphaArray,(void))

void OpenGLRenderer_obj::useColorTransformArray(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_424_useColorTransformArray)
HXDLIN( 424)		if (::hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 426)			if (::hx::IsNotNull( this->_hx___currentShader->_hx___colorMultiplier )) {
HXLINE( 426)				this->_hx___currentShader->_hx___colorMultiplier->_hx___useArray = true;
            			}
HXLINE( 427)			if (::hx::IsNotNull( this->_hx___currentShader->_hx___colorOffset )) {
HXLINE( 427)				this->_hx___currentShader->_hx___colorOffset->_hx___useArray = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OpenGLRenderer_obj,useColorTransformArray,(void))

void OpenGLRenderer_obj::_hx___clear(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_448___clear)
HXLINE( 449)		bool _hx_tmp;
HXDLIN( 449)		if (::hx::IsNotNull( this->_hx___stage )) {
HXLINE( 449)			_hx_tmp = this->_hx___stage->_hx___transparent;
            		}
            		else {
HXLINE( 449)			_hx_tmp = true;
            		}
HXDLIN( 449)		if (_hx_tmp) {
HXLINE( 451)			this->_hx___context3D->clear(0,0,0,0,0,0,1);
            		}
            		else {
HXLINE( 455)			this->_hx___context3D->clear(this->_hx___stage->_hx___colorSplit->__get(0),this->_hx___stage->_hx___colorSplit->__get(1),this->_hx___stage->_hx___colorSplit->__get(2),1,0,0,1);
            		}
HXLINE( 458)		this->_hx___cleared = true;
            	}


void OpenGLRenderer_obj::_hx___clearShader(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_463___clearShader)
HXDLIN( 463)		if (::hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 465)			if (::hx::IsNull( this->_hx___currentShaderBuffer )) {
HXLINE( 467)				if (::hx::IsNotNull( this->_hx___currentShader->_hx___bitmap )) {
HXLINE( 467)					this->_hx___currentShader->_hx___bitmap->input = null();
            				}
            			}
            			else {
HXLINE( 471)				this->_hx___currentShaderBuffer->clearOverride();
            			}
HXLINE( 474)			if (::hx::IsNotNull( this->_hx___currentShader->_hx___texture )) {
HXLINE( 474)				this->_hx___currentShader->_hx___texture->input = null();
            			}
HXLINE( 475)			if (::hx::IsNotNull( this->_hx___currentShader->_hx___textureSize )) {
HXLINE( 475)				this->_hx___currentShader->_hx___textureSize->value = null();
            			}
HXLINE( 476)			if (::hx::IsNotNull( this->_hx___currentShader->_hx___hasColorTransform )) {
HXLINE( 476)				this->_hx___currentShader->_hx___hasColorTransform->value = null();
            			}
HXLINE( 477)			if (::hx::IsNotNull( this->_hx___currentShader->_hx___position )) {
HXLINE( 477)				this->_hx___currentShader->_hx___position->value = null();
            			}
HXLINE( 478)			if (::hx::IsNotNull( this->_hx___currentShader->_hx___matrix )) {
HXLINE( 478)				this->_hx___currentShader->_hx___matrix->value = null();
            			}
HXLINE( 479)			this->_hx___currentShader->_hx___clearUseArray();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OpenGLRenderer_obj,_hx___clearShader,(void))

void OpenGLRenderer_obj::_hx___copyShader( ::openfl::display::OpenGLRenderer other){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_484___copyShader)
HXLINE( 485)		this->_hx___currentShader = other->_hx___currentShader;
HXLINE( 486)		this->_hx___currentShaderBuffer = other->_hx___currentShaderBuffer;
HXLINE( 487)		this->_hx___currentDisplayShader = other->_hx___currentDisplayShader;
HXLINE( 488)		this->_hx___currentGraphicsShader = other->_hx___currentGraphicsShader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___copyShader,(void))

::Array< Float > OpenGLRenderer_obj::_hx___getMatrix( ::openfl::geom::Matrix transform, ::Dynamic pixelSnapping){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_494___getMatrix)
HXLINE( 495)		 ::openfl::geom::Matrix _matrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 496)		_matrix->copyFrom(transform);
HXLINE( 497)		_matrix->concat(this->_hx___worldTransform);
HXLINE( 499)		bool _hx_tmp;
HXDLIN( 499)		if (::hx::IsNotEq( pixelSnapping,0 )) {
HXLINE( 500)			bool _hx_tmp1;
HXDLIN( 500)			bool _hx_tmp2;
HXDLIN( 500)			bool _hx_tmp3;
HXDLIN( 500)			if (::hx::IsEq( pixelSnapping,1 )) {
HXLINE( 500)				_hx_tmp3 = (_matrix->b == 0);
            			}
            			else {
HXLINE( 500)				_hx_tmp3 = false;
            			}
HXDLIN( 500)			if (_hx_tmp3) {
HXLINE( 500)				_hx_tmp2 = (_matrix->c == 0);
            			}
            			else {
HXLINE( 500)				_hx_tmp2 = false;
            			}
HXDLIN( 500)			if (_hx_tmp2) {
HXLINE( 503)				if ((_matrix->a < ((Float)1.001))) {
HXLINE( 500)					_hx_tmp1 = (_matrix->a > ((Float)0.999));
            				}
            				else {
HXLINE( 500)					_hx_tmp1 = false;
            				}
            			}
            			else {
HXLINE( 500)				_hx_tmp1 = false;
            			}
HXDLIN( 500)			if (_hx_tmp1) {
HXLINE( 504)				if ((_matrix->d < ((Float)1.001))) {
HXLINE( 499)					_hx_tmp = (_matrix->d > ((Float)0.999));
            				}
            				else {
HXLINE( 499)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 499)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 499)			_hx_tmp = true;
            		}
HXDLIN( 499)		if (_hx_tmp) {
HXLINE( 506)			_matrix->tx = ( (Float)(::Math_obj::round(_matrix->tx)) );
HXLINE( 507)			_matrix->ty = ( (Float)(::Math_obj::round(_matrix->ty)) );
            		}
HXLINE( 510)		::lime::math::_Matrix4::Matrix4_Impl__obj::identity(this->_hx___matrix);
HXLINE( 511)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,0,_matrix->a);
HXLINE( 512)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,1,_matrix->b);
HXLINE( 513)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,4,_matrix->c);
HXLINE( 514)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,5,_matrix->d);
HXLINE( 515)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,12,_matrix->tx);
HXLINE( 516)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,13,_matrix->ty);
HXLINE( 517)		 ::lime::utils::ArrayBufferView _hx_tmp1;
HXDLIN( 517)		if (this->_hx___flipped) {
HXLINE( 517)			_hx_tmp1 = this->_hx___projectionFlipped;
            		}
            		else {
HXLINE( 517)			_hx_tmp1 = this->_hx___projection;
            		}
HXDLIN( 517)		::lime::math::_Matrix4::Matrix4_Impl__obj::append(this->_hx___matrix,_hx_tmp1);
HXLINE( 519)		{
HXLINE( 521)			this->_hx___values[0] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,0);
HXDLIN( 521)			this->_hx___values[1] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,1);
HXDLIN( 521)			this->_hx___values[2] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,2);
HXDLIN( 521)			this->_hx___values[3] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,3);
HXDLIN( 521)			this->_hx___values[4] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,4);
HXDLIN( 521)			this->_hx___values[5] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,5);
HXDLIN( 521)			this->_hx___values[6] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,6);
HXDLIN( 521)			this->_hx___values[7] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,7);
HXDLIN( 521)			this->_hx___values[8] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,8);
HXDLIN( 521)			this->_hx___values[9] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,9);
HXDLIN( 521)			this->_hx___values[10] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,10);
HXDLIN( 521)			this->_hx___values[11] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,11);
HXDLIN( 521)			this->_hx___values[12] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,12);
HXDLIN( 521)			this->_hx___values[13] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,13);
HXDLIN( 521)			this->_hx___values[14] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,14);
HXDLIN( 521)			this->_hx___values[15] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,15);
            		}
HXLINE( 524)		::openfl::geom::Matrix_obj::_hx___pool->release(_matrix);
HXLINE( 526)		return this->_hx___values;
            	}


HX_DEFINE_DYNAMIC_FUNC2(OpenGLRenderer_obj,_hx___getMatrix,return )

 ::openfl::display::Shader OpenGLRenderer_obj::_hx___initShader( ::openfl::display::Shader shader){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_530___initShader)
HXLINE( 531)		if (::hx::IsNotNull( shader )) {
HXLINE( 535)			if (::hx::IsNull( shader->_hx___context )) {
HXLINE( 537)				shader->_hx___context = this->_hx___context3D;
HXLINE( 538)				shader->_hx___init();
            			}
HXLINE( 542)			return shader;
            		}
HXLINE( 545)		return this->_hx___defaultShader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___initShader,return )

 ::openfl::display::Shader OpenGLRenderer_obj::_hx___initDisplayShader( ::openfl::display::Shader shader){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_549___initDisplayShader)
HXLINE( 550)		if (::hx::IsNotNull( shader )) {
HXLINE( 554)			if (::hx::IsNull( shader->_hx___context )) {
HXLINE( 556)				shader->_hx___context = this->_hx___context3D;
HXLINE( 557)				shader->_hx___init();
            			}
HXLINE( 561)			return shader;
            		}
HXLINE( 564)		return this->_hx___defaultDisplayShader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___initDisplayShader,return )

 ::openfl::display::Shader OpenGLRenderer_obj::_hx___initGraphicsShader( ::openfl::display::Shader shader){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_568___initGraphicsShader)
HXLINE( 569)		if (::hx::IsNotNull( shader )) {
HXLINE( 573)			if (::hx::IsNull( shader->_hx___context )) {
HXLINE( 575)				shader->_hx___context = this->_hx___context3D;
HXLINE( 576)				shader->_hx___init();
            			}
HXLINE( 580)			return shader;
            		}
HXLINE( 583)		return this->_hx___defaultGraphicsShader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___initGraphicsShader,return )

 ::openfl::display::Shader OpenGLRenderer_obj::_hx___initShaderBuffer( ::openfl::display::_internal::ShaderBuffer shaderBuffer){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_587___initShaderBuffer)
HXLINE( 588)		if (::hx::IsNotNull( shaderBuffer )) {
HXLINE( 590)			return this->_hx___initGraphicsShader(shaderBuffer->shader);
            		}
HXLINE( 593)		return this->_hx___defaultGraphicsShader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___initShaderBuffer,return )

void OpenGLRenderer_obj::_hx___popMask(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_597___popMask)
HXLINE( 598)		if ((this->_hx___stencilReference == 0)) {
HXLINE( 598)			return;
            		}
HXLINE( 600)		 ::openfl::display::DisplayObject mask = this->_hx___maskObjects->pop().StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 602)		if ((this->_hx___stencilReference > 1)) {
HXLINE( 604)			this->_hx___context3D->setStencilActions(2,1,0,0,5);
HXLINE( 605)			this->_hx___context3D->setStencilReferenceValue(this->_hx___stencilReference,255,255);
HXLINE( 606)			this->_hx___context3D->setColorMask(false,false,false,false);
HXLINE( 608)			this->_hx___renderDrawableMask(mask);
HXLINE( 609)			this->_hx___stencilReference--;
HXLINE( 611)			this->_hx___context3D->setStencilActions(2,1,5,5,5);
HXLINE( 612)			this->_hx___context3D->setStencilReferenceValue(this->_hx___stencilReference,255,0);
HXLINE( 613)			this->_hx___context3D->setColorMask(true,true,true,true);
            		}
            		else {
HXLINE( 617)			this->_hx___stencilReference = 0;
HXLINE( 618)			this->_hx___context3D->setStencilActions(null(),null(),null(),null(),null());
HXLINE( 619)			this->_hx___context3D->setStencilReferenceValue(0,0,0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OpenGLRenderer_obj,_hx___popMask,(void))

void OpenGLRenderer_obj::_hx___popMaskObject( ::openfl::display::DisplayObject object,::hx::Null< bool >  __o_handleScrollRect){
            		bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_624___popMaskObject)
HXLINE( 625)		if (::hx::IsNotNull( object->_hx___mask )) {
HXLINE( 627)			this->_hx___popMask();
            		}
HXLINE( 630)		bool _hx_tmp;
HXDLIN( 630)		if (handleScrollRect) {
HXLINE( 630)			_hx_tmp = ::hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE( 630)			_hx_tmp = false;
            		}
HXDLIN( 630)		if (_hx_tmp) {
HXLINE( 632)			bool _hx_tmp;
HXDLIN( 632)			if ((object->_hx___renderTransform->b == 0)) {
HXLINE( 632)				_hx_tmp = (object->_hx___renderTransform->c != 0);
            			}
            			else {
HXLINE( 632)				_hx_tmp = true;
            			}
HXDLIN( 632)			if (_hx_tmp) {
HXLINE( 634)				this->_hx___scrollRectMasks->release(( ( ::openfl::display::Shape)(this->_hx___maskObjects->__get((this->_hx___maskObjects->length - 1)).StaticCast<  ::openfl::display::DisplayObject >()) ));
HXLINE( 635)				this->_hx___popMask();
            			}
            			else {
HXLINE( 639)				this->_hx___popMaskRect();
            			}
            		}
            	}


void OpenGLRenderer_obj::_hx___popMaskRect(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_646___popMaskRect)
HXDLIN( 646)		if ((this->_hx___numClipRects > 0)) {
HXLINE( 648)			this->_hx___numClipRects--;
HXLINE( 650)			if ((this->_hx___numClipRects > 0)) {
HXLINE( 652)				this->_hx___scissorRect(this->_hx___clipRects->__get((this->_hx___numClipRects - 1)).StaticCast<  ::openfl::geom::Rectangle >());
            			}
            			else {
HXLINE( 656)				this->_hx___scissorRect(null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OpenGLRenderer_obj,_hx___popMaskRect,(void))

void OpenGLRenderer_obj::_hx___pushMask( ::openfl::display::DisplayObject mask){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_662___pushMask)
HXLINE( 663)		if ((this->_hx___stencilReference == 0)) {
HXLINE( 665)			this->_hx___context3D->clear(0,0,0,0,0,0,4);
HXLINE( 666)			this->_hx___updatedStencil = true;
            		}
HXLINE( 669)		this->_hx___context3D->setStencilActions(2,1,2,5,5);
HXLINE( 670)		this->_hx___context3D->setStencilReferenceValue(this->_hx___stencilReference,255,255);
HXLINE( 671)		this->_hx___context3D->setColorMask(false,false,false,false);
HXLINE( 673)		this->_hx___renderDrawableMask(mask);
HXLINE( 674)		this->_hx___maskObjects->push(mask);
HXLINE( 675)		this->_hx___stencilReference++;
HXLINE( 677)		this->_hx___context3D->setStencilActions(2,1,5,5,5);
HXLINE( 678)		this->_hx___context3D->setStencilReferenceValue(this->_hx___stencilReference,255,0);
HXLINE( 679)		this->_hx___context3D->setColorMask(true,true,true,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___pushMask,(void))

void OpenGLRenderer_obj::_hx___pushMaskObject( ::openfl::display::DisplayObject object,::hx::Null< bool >  __o_handleScrollRect){
            		bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_683___pushMaskObject)
HXLINE( 684)		bool _hx_tmp;
HXDLIN( 684)		if (handleScrollRect) {
HXLINE( 684)			_hx_tmp = ::hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE( 684)			_hx_tmp = false;
            		}
HXDLIN( 684)		if (_hx_tmp) {
HXLINE( 686)			bool _hx_tmp;
HXDLIN( 686)			if ((object->_hx___renderTransform->b == 0)) {
HXLINE( 686)				_hx_tmp = (object->_hx___renderTransform->c != 0);
            			}
            			else {
HXLINE( 686)				_hx_tmp = true;
            			}
HXDLIN( 686)			if (_hx_tmp) {
HXLINE( 688)				 ::openfl::display::Shape shape = this->_hx___scrollRectMasks->get().StaticCast<  ::openfl::display::Shape >();
HXLINE( 689)				shape->get_graphics()->clear();
HXLINE( 690)				shape->get_graphics()->beginFill(65280,null());
HXLINE( 691)				shape->get_graphics()->drawRect(object->_hx___scrollRect->x,object->_hx___scrollRect->y,object->_hx___scrollRect->width,object->_hx___scrollRect->height);
HXLINE( 692)				shape->_hx___renderTransform->copyFrom(object->_hx___renderTransform);
HXLINE( 693)				this->_hx___pushMask(shape);
            			}
            			else {
HXLINE( 697)				this->_hx___pushMaskRect(object->_hx___scrollRect,object->_hx___renderTransform);
            			}
            		}
HXLINE( 701)		if (::hx::IsNotNull( object->_hx___mask )) {
HXLINE( 703)			this->_hx___pushMask(object->_hx___mask);
            		}
            	}


void OpenGLRenderer_obj::_hx___pushMaskRect( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix transform){
            	HX_GC_STACKFRAME(&_hx_pos_2f59d7e567bca573_708___pushMaskRect)
HXLINE( 711)		if ((this->_hx___numClipRects == this->_hx___clipRects->length)) {
HXLINE( 713)			this->_hx___clipRects[this->_hx___numClipRects] =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 716)		 ::openfl::geom::Matrix _matrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 717)		_matrix->copyFrom(transform);
HXLINE( 718)		_matrix->concat(this->_hx___worldTransform);
HXLINE( 720)		 ::openfl::geom::Rectangle clipRect = this->_hx___clipRects->__get(this->_hx___numClipRects).StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 721)		rect->_hx___transform(clipRect,_matrix);
HXLINE( 723)		if ((this->_hx___numClipRects > 0)) {
HXLINE( 725)			 ::openfl::geom::Rectangle parentClipRect = this->_hx___clipRects->__get((this->_hx___numClipRects - 1)).StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 726)			clipRect->_hx___contract(parentClipRect->x,parentClipRect->y,parentClipRect->width,parentClipRect->height);
            		}
HXLINE( 729)		if ((clipRect->height < 0)) {
HXLINE( 731)			clipRect->height = ( (Float)(0) );
            		}
HXLINE( 734)		if ((clipRect->width < 0)) {
HXLINE( 736)			clipRect->width = ( (Float)(0) );
            		}
HXLINE( 739)		::openfl::geom::Matrix_obj::_hx___pool->release(_matrix);
HXLINE( 741)		this->_hx___scissorRect(clipRect);
HXLINE( 742)		this->_hx___numClipRects++;
            	}


HX_DEFINE_DYNAMIC_FUNC2(OpenGLRenderer_obj,_hx___pushMaskRect,(void))

void OpenGLRenderer_obj::_hx___render(::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_746___render)
HXLINE( 747)		this->_hx___context3D->setColorMask(true,true,true,true);
HXLINE( 748)		this->_hx___context3D->setCulling(3);
HXLINE( 749)		this->_hx___context3D->setDepthTest(false,0);
HXLINE( 750)		this->_hx___context3D->setStencilActions(null(),null(),null(),null(),null());
HXLINE( 751)		this->_hx___context3D->setStencilReferenceValue(0,0,0);
HXLINE( 752)		this->_hx___context3D->setScissorRectangle(null());
HXLINE( 754)		this->_hx___blendMode = null();
HXLINE( 755)		this->_hx___setBlendMode(10);
HXLINE( 757)		if (::hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 759)			::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle->setTo(( (Float)(this->_hx___offsetX) ),( (Float)(this->_hx___offsetY) ),( (Float)(this->_hx___displayWidth) ),( (Float)(this->_hx___displayHeight) ));
HXLINE( 760)			this->_hx___context3D->setScissorRectangle(::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle);
HXLINE( 762)			bool _hx_tmp;
HXDLIN( 762)			if ((this->_hx___worldTransform->a == 1)) {
HXLINE( 762)				_hx_tmp = (this->_hx___worldTransform->d != 1);
            			}
            			else {
HXLINE( 762)				_hx_tmp = true;
            			}
HXDLIN( 762)			this->_hx___upscaled = _hx_tmp;
HXLINE( 764)			this->_hx___renderDrawable(object);
HXLINE( 768)			bool _hx_tmp1;
HXDLIN( 768)			if ((this->_hx___offsetX <= 0)) {
HXLINE( 768)				_hx_tmp1 = (this->_hx___offsetY > 0);
            			}
            			else {
HXLINE( 768)				_hx_tmp1 = true;
            			}
HXDLIN( 768)			if (_hx_tmp1) {
HXLINE( 772)				if ((this->_hx___offsetX > 0)) {
HXLINE( 775)					::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(this->_hx___offsetX) ),( (Float)(this->_hx___height) ));
HXLINE( 776)					this->_hx___context3D->setScissorRectangle(::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle);
HXLINE( 778)					this->_hx___context3D->_hx___flushGL();
HXLINE( 779)					this->_hx___gl->clearColor(( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(1) ));
HXLINE( 780)					this->_hx___gl->clear(this->_hx___gl->COLOR_BUFFER_BIT);
HXLINE( 784)					::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle->setTo(( (Float)((this->_hx___offsetX + this->_hx___displayWidth)) ),( (Float)(0) ),( (Float)(this->_hx___width) ),( (Float)(this->_hx___height) ));
HXLINE( 785)					this->_hx___context3D->setScissorRectangle(::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle);
HXLINE( 787)					this->_hx___context3D->_hx___flushGL();
HXLINE( 788)					this->_hx___gl->clearColor(( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(1) ));
HXLINE( 789)					this->_hx___gl->clear(this->_hx___gl->COLOR_BUFFER_BIT);
            				}
HXLINE( 793)				if ((this->_hx___offsetY > 0)) {
HXLINE( 796)					::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(this->_hx___width) ),( (Float)(this->_hx___offsetY) ));
HXLINE( 797)					this->_hx___context3D->setScissorRectangle(::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle);
HXLINE( 799)					this->_hx___context3D->_hx___flushGL();
HXLINE( 800)					this->_hx___gl->clearColor(( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(1) ));
HXLINE( 801)					this->_hx___gl->clear(this->_hx___gl->COLOR_BUFFER_BIT);
HXLINE( 805)					::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle->setTo(( (Float)(0) ),( (Float)((this->_hx___offsetY + this->_hx___displayHeight)) ),( (Float)(this->_hx___width) ),( (Float)(this->_hx___height) ));
HXLINE( 806)					this->_hx___context3D->setScissorRectangle(::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle);
HXLINE( 808)					this->_hx___context3D->_hx___flushGL();
HXLINE( 809)					this->_hx___gl->clearColor(( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(1) ));
HXLINE( 810)					this->_hx___gl->clear(this->_hx___gl->COLOR_BUFFER_BIT);
            				}
HXLINE( 814)				this->_hx___context3D->setScissorRectangle(null());
            			}
            		}
            		else {
HXLINE( 819)			::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle->setTo(( (Float)(this->_hx___offsetX) ),( (Float)(this->_hx___offsetY) ),( (Float)(this->_hx___displayWidth) ),( (Float)(this->_hx___displayHeight) ));
HXLINE( 820)			this->_hx___context3D->setScissorRectangle(::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle);
HXLINE( 827)			 ::openfl::display::DisplayObject cacheMask = ( ( ::openfl::display::DisplayObject)(object->__Field(HX_("__mask",0c,a4,4e,f7),::hx::paccDynamic)) );
HXLINE( 828)			 ::openfl::geom::Rectangle cacheScrollRect = ( ( ::openfl::geom::Rectangle)(object->__Field(HX_("__scrollRect",f1,56,fa,41),::hx::paccDynamic)) );
HXLINE( 829)			object->__SetField(HX_("__mask",0c,a4,4e,f7),null(),::hx::paccDynamic);
HXLINE( 830)			object->__SetField(HX_("__scrollRect",f1,56,fa,41),null(),::hx::paccDynamic);
HXLINE( 832)			this->_hx___renderDrawable(object);
HXLINE( 834)			object->__SetField(HX_("__mask",0c,a4,4e,f7),cacheMask,::hx::paccDynamic);
HXLINE( 835)			object->__SetField(HX_("__scrollRect",f1,56,fa,41),cacheScrollRect,::hx::paccDynamic);
            		}
HXLINE( 838)		this->_hx___context3D->present();
            	}


void OpenGLRenderer_obj::_hx___renderDrawable(::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_842___renderDrawable)
HXLINE( 843)		if (::hx::IsNull( object )) {
HXLINE( 843)			return;
            		}
HXLINE( 845)		switch((int)(( (int)(object->__Field(HX_("__drawableType",98,b4,3c,42),::hx::paccDynamic)) ))){
            			case (int)0: {
HXLINE( 848)				::openfl::display::_internal::Context3DBitmapData_obj::renderDrawable(( ( ::openfl::display::BitmapData)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			case (int)2: {
HXLINE( 852)				::openfl::display::_internal::Context3DBitmap_obj::renderDrawable(( ( ::openfl::display::Bitmap)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			case (int)3: {
HXLINE( 854)				::openfl::display::_internal::Context3DDisplayObject_obj::renderDrawable(( ( ::openfl::display::DisplayObject)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			case (int)4: case (int)5: {
HXLINE( 850)				::openfl::display::_internal::Context3DDisplayObjectContainer_obj::renderDrawable(( ( ::openfl::display::DisplayObjectContainer)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			case (int)6: {
HXLINE( 856)				::openfl::display::_internal::Context3DSimpleButton_obj::renderDrawable(( ( ::openfl::display::SimpleButton)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			case (int)7: {
HXLINE( 858)				::openfl::display::_internal::Context3DTextField_obj::renderDrawable(( ( ::openfl::text::TextField)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			case (int)8: {
HXLINE( 860)				::openfl::display::_internal::Context3DVideo_obj::renderDrawable(( ( ::openfl::media::Video)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			case (int)9: {
HXLINE( 862)				::openfl::display::_internal::Context3DTilemap_obj::renderDrawable(( ( ::openfl::display::Tilemap)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___renderDrawable,(void))

void OpenGLRenderer_obj::_hx___renderDrawableMask(::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_868___renderDrawableMask)
HXLINE( 869)		if (::hx::IsNull( object )) {
HXLINE( 869)			return;
            		}
HXLINE( 871)		switch((int)(( (int)(object->__Field(HX_("__drawableType",98,b4,3c,42),::hx::paccDynamic)) ))){
            			case (int)0: {
HXLINE( 874)				::openfl::display::_internal::Context3DBitmapData_obj::renderDrawableMask(( ( ::openfl::display::BitmapData)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			case (int)2: {
HXLINE( 878)				::openfl::display::_internal::Context3DBitmap_obj::renderDrawableMask(( ( ::openfl::display::Bitmap)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			case (int)3: {
HXLINE( 880)				::openfl::display::_internal::Context3DDisplayObject_obj::renderDrawableMask(( ( ::openfl::display::DisplayObject)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			case (int)4: case (int)5: {
HXLINE( 876)				::openfl::display::_internal::Context3DDisplayObjectContainer_obj::renderDrawableMask(( ( ::openfl::display::DisplayObjectContainer)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			case (int)6: {
HXLINE( 882)				::openfl::display::_internal::Context3DSimpleButton_obj::renderDrawableMask(( ( ::openfl::display::SimpleButton)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			case (int)7: {
HXLINE( 884)				::openfl::display::_internal::Context3DTextField_obj::renderDrawableMask(( ( ::openfl::text::TextField)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			case (int)8: {
HXLINE( 886)				::openfl::display::_internal::Context3DVideo_obj::renderDrawableMask(( ( ::openfl::media::Video)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			case (int)9: {
HXLINE( 888)				::openfl::display::_internal::Context3DTilemap_obj::renderDrawableMask(( ( ::openfl::display::Tilemap)(object) ),::hx::ObjectPtr<OBJ_>(this));
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___renderDrawableMask,(void))

void OpenGLRenderer_obj::_hx___renderFilterPass( ::openfl::display::BitmapData source, ::openfl::display::Shader shader,bool smooth,::hx::Null< bool >  __o_clear){
            		bool clear = __o_clear.Default(true);
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_894___renderFilterPass)
HXLINE( 895)		bool _hx_tmp;
HXDLIN( 895)		if (::hx::IsNotNull( source )) {
HXLINE( 895)			_hx_tmp = ::hx::IsNull( shader );
            		}
            		else {
HXLINE( 895)			_hx_tmp = true;
            		}
HXDLIN( 895)		if (_hx_tmp) {
HXLINE( 895)			return;
            		}
HXLINE( 896)		if (::hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 896)			return;
            		}
HXLINE( 898)		 ::openfl::display3D::textures::TextureBase cacheRTT = this->_hx___context3D->_hx___state->renderToTexture;
HXLINE( 899)		bool cacheRTTDepthStencil = this->_hx___context3D->_hx___state->renderToTextureDepthStencil;
HXLINE( 900)		int cacheRTTAntiAlias = this->_hx___context3D->_hx___state->renderToTextureAntiAlias;
HXLINE( 901)		int cacheRTTSurfaceSelector = this->_hx___context3D->_hx___state->renderToTextureSurfaceSelector;
HXLINE( 903)		 ::openfl::display3D::Context3D _hx_tmp1 = this->_hx___context3D;
HXDLIN( 903)		_hx_tmp1->setRenderToTexture(this->_hx___defaultRenderTarget->getTexture(this->_hx___context3D),false,null(),null());
HXLINE( 905)		if (clear) {
HXLINE( 907)			this->_hx___context3D->clear(0,0,0,0,0,0,1);
            		}
HXLINE( 910)		 ::openfl::display::Shader shader1 = this->_hx___initShader(shader);
HXLINE( 911)		this->setShader(shader1);
HXLINE( 912)		this->applyAlpha(( (Float)(1) ));
HXLINE( 913)		this->applyBitmapData(source,smooth,null());
HXLINE( 914)		this->applyColorTransform(null());
HXLINE( 915)		this->applyMatrix(this->_hx___getMatrix(source->_hx___renderTransform,1));
HXLINE( 916)		this->updateShader();
HXLINE( 918)		 ::openfl::display3D::VertexBuffer3D vertexBuffer = source->getVertexBuffer(this->_hx___context3D,null(),null());
HXLINE( 919)		if (::hx::IsNotNull( shader1->_hx___position )) {
HXLINE( 919)			this->_hx___context3D->setVertexBufferAt(( (int)(shader1->_hx___position->index) ),vertexBuffer,0,3);
            		}
HXLINE( 920)		if (::hx::IsNotNull( shader1->_hx___textureCoord )) {
HXLINE( 920)			this->_hx___context3D->setVertexBufferAt(( (int)(shader1->_hx___textureCoord->index) ),vertexBuffer,3,2);
            		}
HXLINE( 921)		 ::openfl::display3D::IndexBuffer3D indexBuffer = source->getIndexBuffer(this->_hx___context3D,null());
HXLINE( 922)		this->_hx___context3D->drawTriangles(indexBuffer,null(),null());
HXLINE( 924)		if (::hx::IsNotNull( cacheRTT )) {
HXLINE( 926)			this->_hx___context3D->setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
            		}
            		else {
HXLINE( 930)			this->_hx___context3D->setRenderToBackBuffer();
            		}
HXLINE( 933)		this->_hx___clearShader();
            	}


HX_DEFINE_DYNAMIC_FUNC4(OpenGLRenderer_obj,_hx___renderFilterPass,(void))

void OpenGLRenderer_obj::_hx___resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_937___resize)
HXLINE( 938)		this->_hx___width = width;
HXLINE( 939)		this->_hx___height = height;
HXLINE( 941)		int w;
HXDLIN( 941)		if (::hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 941)			w = this->_hx___stage->stageWidth;
            		}
            		else {
HXLINE( 941)			w = this->_hx___defaultRenderTarget->width;
            		}
HXLINE( 942)		int h;
HXDLIN( 942)		if (::hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 942)			h = this->_hx___stage->stageHeight;
            		}
            		else {
HXLINE( 942)			h = this->_hx___defaultRenderTarget->height;
            		}
HXLINE( 944)		int _hx_tmp;
HXDLIN( 944)		if (::hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 944)			 ::openfl::geom::Matrix _this = this->_hx___worldTransform;
HXDLIN( 944)			_hx_tmp = ::Math_obj::round((((( (Float)(0) ) * _this->a) + (( (Float)(0) ) * _this->c)) + _this->tx));
            		}
            		else {
HXLINE( 944)			_hx_tmp = 0;
            		}
HXDLIN( 944)		this->_hx___offsetX = _hx_tmp;
HXLINE( 945)		int _hx_tmp1;
HXDLIN( 945)		if (::hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 945)			 ::openfl::geom::Matrix _this = this->_hx___worldTransform;
HXDLIN( 945)			_hx_tmp1 = ::Math_obj::round((((( (Float)(0) ) * _this->b) + (( (Float)(0) ) * _this->d)) + _this->ty));
            		}
            		else {
HXLINE( 945)			_hx_tmp1 = 0;
            		}
HXDLIN( 945)		this->_hx___offsetY = _hx_tmp1;
HXLINE( 946)		int _hx_tmp2;
HXDLIN( 946)		if (::hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 946)			 ::openfl::geom::Matrix _this = this->_hx___worldTransform;
HXDLIN( 946)			_hx_tmp2 = ::Math_obj::round(((((( (Float)(w) ) * _this->a) + (( (Float)(0) ) * _this->c)) + _this->tx) - ( (Float)(this->_hx___offsetX) )));
            		}
            		else {
HXLINE( 946)			_hx_tmp2 = w;
            		}
HXDLIN( 946)		this->_hx___displayWidth = _hx_tmp2;
HXLINE( 947)		int _hx_tmp3;
HXDLIN( 947)		if (::hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 947)			 ::openfl::geom::Matrix _this = this->_hx___worldTransform;
HXDLIN( 947)			_hx_tmp3 = ::Math_obj::round(((((( (Float)(0) ) * _this->b) + (( (Float)(h) ) * _this->d)) + _this->ty) - ( (Float)(this->_hx___offsetY) )));
            		}
            		else {
HXLINE( 947)			_hx_tmp3 = h;
            		}
HXDLIN( 947)		this->_hx___displayHeight = _hx_tmp3;
HXLINE( 949)		::lime::math::_Matrix4::Matrix4_Impl__obj::createOrtho(this->_hx___projection,( (Float)(0) ),( (Float)((this->_hx___displayWidth + (this->_hx___offsetX * 2))) ),( (Float)(0) ),( (Float)((this->_hx___displayHeight + (this->_hx___offsetY * 2))) ),( (Float)(-1000) ),( (Float)(1000) ));
HXLINE( 950)		::lime::math::_Matrix4::Matrix4_Impl__obj::createOrtho(this->_hx___projectionFlipped,( (Float)(0) ),( (Float)((this->_hx___displayWidth + (this->_hx___offsetX * 2))) ),( (Float)((this->_hx___displayHeight + (this->_hx___offsetY * 2))) ),( (Float)(0) ),( (Float)(-1000) ),( (Float)(1000) ));
            	}


void OpenGLRenderer_obj::_hx___resumeClipAndMask( ::openfl::display::OpenGLRenderer childRenderer){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_954___resumeClipAndMask)
HXLINE( 955)		if ((this->_hx___stencilReference > 0)) {
HXLINE( 957)			this->_hx___context3D->setStencilActions(2,1,5,5,5);
HXLINE( 958)			this->_hx___context3D->setStencilReferenceValue(this->_hx___stencilReference,255,0);
            		}
            		else {
HXLINE( 962)			this->_hx___context3D->setStencilActions(null(),null(),null(),null(),null());
HXLINE( 963)			this->_hx___context3D->setStencilReferenceValue(0,0,0);
            		}
HXLINE( 966)		if ((this->_hx___numClipRects > 0)) {
HXLINE( 968)			this->_hx___scissorRect(this->_hx___clipRects->__get((this->_hx___numClipRects - 1)).StaticCast<  ::openfl::geom::Rectangle >());
            		}
            		else {
HXLINE( 972)			this->_hx___scissorRect(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___resumeClipAndMask,(void))

void OpenGLRenderer_obj::_hx___scissorRect( ::openfl::geom::Rectangle clipRect){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_978___scissorRect)
HXDLIN( 978)		if (::hx::IsNotNull( clipRect )) {
HXLINE( 980)			int x = ::Math_obj::floor(clipRect->x);
HXLINE( 981)			int y = ::Math_obj::floor(clipRect->y);
HXLINE( 982)			int width;
HXDLIN( 982)			if ((clipRect->width > 0)) {
HXLINE( 982)				width = (::Math_obj::ceil(clipRect->get_right()) - x);
            			}
            			else {
HXLINE( 982)				width = 0;
            			}
HXLINE( 983)			int height;
HXDLIN( 983)			if ((clipRect->height > 0)) {
HXLINE( 983)				height = (::Math_obj::ceil(clipRect->get_bottom()) - y);
            			}
            			else {
HXLINE( 983)				height = 0;
            			}
HXLINE( 985)			if ((width < 0)) {
HXLINE( 985)				width = 0;
            			}
HXLINE( 986)			if ((height < 0)) {
HXLINE( 986)				height = 0;
            			}
HXLINE( 989)			::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle->setTo(( (Float)(x) ),( (Float)(y) ),( (Float)(width) ),( (Float)(height) ));
HXLINE( 990)			this->_hx___context3D->setScissorRectangle(::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle);
            		}
            		else {
HXLINE( 994)			this->_hx___context3D->setScissorRectangle(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___scissorRect,(void))

void OpenGLRenderer_obj::_hx___setBlendMode( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_999___setBlendMode)
HXLINE(1000)		if (::hx::IsNotNull( this->_hx___overrideBlendMode )) {
HXLINE(1000)			value = this->_hx___overrideBlendMode;
            		}
HXLINE(1001)		if (::hx::IsEq( this->_hx___blendMode,value )) {
HXLINE(1001)			return;
            		}
HXLINE(1003)		this->_hx___blendMode = value;
HXLINE(1005)		 ::Dynamic _hx_switch_0 = value;
            		if (  (_hx_switch_0==0) ){
HXLINE(1008)			this->_hx___context3D->setBlendFactors(2,2);
HXDLIN(1008)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE(1022)			this->_hx___context3D->setBlendFactors(2,2);
HXLINE(1023)			this->_hx___context3D->_hx___setGLBlendEquation(32775);
HXLINE(1021)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==8) ){
HXLINE(1026)			this->_hx___context3D->setBlendFactors(2,2);
HXLINE(1027)			this->_hx___context3D->_hx___setGLBlendEquation(32776);
HXLINE(1025)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==9) ){
HXLINE(1011)			this->_hx___context3D->setBlendFactors(1,5);
HXDLIN(1011)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==12) ){
HXLINE(1014)			this->_hx___context3D->setBlendFactors(2,6);
HXDLIN(1014)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==14) ){
HXLINE(1017)			this->_hx___context3D->setBlendFactors(2,2);
HXLINE(1018)			this->_hx___context3D->_hx___setGLBlendEquation(this->_hx___gl->FUNC_REVERSE_SUBTRACT);
HXLINE(1016)			goto _hx_goto_33;
            		}
            		/* default */{
HXLINE(1031)			this->_hx___context3D->setBlendFactors(2,5);
            		}
            		_hx_goto_33:;
            	}


void OpenGLRenderer_obj::_hx___setRenderTarget( ::openfl::display::BitmapData renderTarget){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_1036___setRenderTarget)
HXLINE(1037)		this->_hx___defaultRenderTarget = renderTarget;
HXLINE(1038)		this->_hx___flipped = ::hx::IsNull( renderTarget );
HXLINE(1040)		if (::hx::IsNotNull( renderTarget )) {
HXLINE(1042)			this->_hx___resize(renderTarget->width,renderTarget->height);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___setRenderTarget,(void))

void OpenGLRenderer_obj::_hx___setShaderBuffer( ::openfl::display::_internal::ShaderBuffer shaderBuffer){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_1047___setShaderBuffer)
HXLINE(1048)		this->setShader(shaderBuffer->shader);
HXLINE(1049)		this->_hx___currentShaderBuffer = shaderBuffer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___setShaderBuffer,(void))

void OpenGLRenderer_obj::_hx___suspendClipAndMask(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_1053___suspendClipAndMask)
HXLINE(1054)		if ((this->_hx___stencilReference > 0)) {
HXLINE(1056)			this->_hx___context3D->setStencilActions(null(),null(),null(),null(),null());
HXLINE(1057)			this->_hx___context3D->setStencilReferenceValue(0,0,0);
            		}
HXLINE(1060)		if ((this->_hx___numClipRects > 0)) {
HXLINE(1062)			this->_hx___scissorRect(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OpenGLRenderer_obj,_hx___suspendClipAndMask,(void))

void OpenGLRenderer_obj::_hx___updateShaderBuffer(int bufferOffset){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_1068___updateShaderBuffer)
HXDLIN(1068)		bool _hx_tmp;
HXDLIN(1068)		if (::hx::IsNotNull( this->_hx___currentShader )) {
HXDLIN(1068)			_hx_tmp = ::hx::IsNotNull( this->_hx___currentShaderBuffer );
            		}
            		else {
HXDLIN(1068)			_hx_tmp = false;
            		}
HXDLIN(1068)		if (_hx_tmp) {
HXLINE(1070)			this->_hx___currentShader->_hx___updateFromBuffer(this->_hx___currentShaderBuffer,bufferOffset);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___updateShaderBuffer,(void))

::Array< Float > OpenGLRenderer_obj::_hx___alphaValue;

::Array< Float > OpenGLRenderer_obj::_hx___colorMultipliersValue;

::Array< Float > OpenGLRenderer_obj::_hx___colorOffsetsValue;

::Array< Float > OpenGLRenderer_obj::_hx___emptyColorValue;

::Array< bool > OpenGLRenderer_obj::_hx___hasColorTransformValue;

 ::openfl::geom::Rectangle OpenGLRenderer_obj::_hx___scissorRectangle;

::Array< Float > OpenGLRenderer_obj::_hx___textureSizeValue;


::hx::ObjectPtr< OpenGLRenderer_obj > OpenGLRenderer_obj::__new( ::openfl::display3D::Context3D context, ::openfl::display::BitmapData defaultRenderTarget) {
	::hx::ObjectPtr< OpenGLRenderer_obj > __this = new OpenGLRenderer_obj();
	__this->__construct(context,defaultRenderTarget);
	return __this;
}

::hx::ObjectPtr< OpenGLRenderer_obj > OpenGLRenderer_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::display3D::Context3D context, ::openfl::display::BitmapData defaultRenderTarget) {
	OpenGLRenderer_obj *__this = (OpenGLRenderer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OpenGLRenderer_obj), true, "openfl.display.OpenGLRenderer"));
	*(void **)__this = OpenGLRenderer_obj::_hx_vtable;
	__this->__construct(context,defaultRenderTarget);
	return __this;
}

OpenGLRenderer_obj::OpenGLRenderer_obj()
{
}

void OpenGLRenderer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OpenGLRenderer);
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(_hx___context3D,"__context3D");
	HX_MARK_MEMBER_NAME(_hx___clipRects,"__clipRects");
	HX_MARK_MEMBER_NAME(_hx___currentDisplayShader,"__currentDisplayShader");
	HX_MARK_MEMBER_NAME(_hx___currentGraphicsShader,"__currentGraphicsShader");
	HX_MARK_MEMBER_NAME(_hx___currentShader,"__currentShader");
	HX_MARK_MEMBER_NAME(_hx___currentShaderBuffer,"__currentShaderBuffer");
	HX_MARK_MEMBER_NAME(_hx___defaultDisplayShader,"__defaultDisplayShader");
	HX_MARK_MEMBER_NAME(_hx___defaultGraphicsShader,"__defaultGraphicsShader");
	HX_MARK_MEMBER_NAME(_hx___defaultRenderTarget,"__defaultRenderTarget");
	HX_MARK_MEMBER_NAME(_hx___defaultShader,"__defaultShader");
	HX_MARK_MEMBER_NAME(_hx___displayHeight,"__displayHeight");
	HX_MARK_MEMBER_NAME(_hx___displayWidth,"__displayWidth");
	HX_MARK_MEMBER_NAME(_hx___flipped,"__flipped");
	HX_MARK_MEMBER_NAME(_hx___gl,"__gl");
	HX_MARK_MEMBER_NAME(_hx___height,"__height");
	HX_MARK_MEMBER_NAME(_hx___maskShader,"__maskShader");
	HX_MARK_MEMBER_NAME(_hx___matrix,"__matrix");
	HX_MARK_MEMBER_NAME(_hx___maskObjects,"__maskObjects");
	HX_MARK_MEMBER_NAME(_hx___numClipRects,"__numClipRects");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___projection,"__projection");
	HX_MARK_MEMBER_NAME(_hx___projectionFlipped,"__projectionFlipped");
	HX_MARK_MEMBER_NAME(_hx___scrollRectMasks,"__scrollRectMasks");
	HX_MARK_MEMBER_NAME(_hx___softwareRenderer,"__softwareRenderer");
	HX_MARK_MEMBER_NAME(_hx___stencilReference,"__stencilReference");
	HX_MARK_MEMBER_NAME(_hx___tempRect,"__tempRect");
	HX_MARK_MEMBER_NAME(_hx___updatedStencil,"__updatedStencil");
	HX_MARK_MEMBER_NAME(_hx___upscaled,"__upscaled");
	HX_MARK_MEMBER_NAME(_hx___values,"__values");
	HX_MARK_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::display::DisplayObjectRenderer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OpenGLRenderer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(_hx___context3D,"__context3D");
	HX_VISIT_MEMBER_NAME(_hx___clipRects,"__clipRects");
	HX_VISIT_MEMBER_NAME(_hx___currentDisplayShader,"__currentDisplayShader");
	HX_VISIT_MEMBER_NAME(_hx___currentGraphicsShader,"__currentGraphicsShader");
	HX_VISIT_MEMBER_NAME(_hx___currentShader,"__currentShader");
	HX_VISIT_MEMBER_NAME(_hx___currentShaderBuffer,"__currentShaderBuffer");
	HX_VISIT_MEMBER_NAME(_hx___defaultDisplayShader,"__defaultDisplayShader");
	HX_VISIT_MEMBER_NAME(_hx___defaultGraphicsShader,"__defaultGraphicsShader");
	HX_VISIT_MEMBER_NAME(_hx___defaultRenderTarget,"__defaultRenderTarget");
	HX_VISIT_MEMBER_NAME(_hx___defaultShader,"__defaultShader");
	HX_VISIT_MEMBER_NAME(_hx___displayHeight,"__displayHeight");
	HX_VISIT_MEMBER_NAME(_hx___displayWidth,"__displayWidth");
	HX_VISIT_MEMBER_NAME(_hx___flipped,"__flipped");
	HX_VISIT_MEMBER_NAME(_hx___gl,"__gl");
	HX_VISIT_MEMBER_NAME(_hx___height,"__height");
	HX_VISIT_MEMBER_NAME(_hx___maskShader,"__maskShader");
	HX_VISIT_MEMBER_NAME(_hx___matrix,"__matrix");
	HX_VISIT_MEMBER_NAME(_hx___maskObjects,"__maskObjects");
	HX_VISIT_MEMBER_NAME(_hx___numClipRects,"__numClipRects");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___projection,"__projection");
	HX_VISIT_MEMBER_NAME(_hx___projectionFlipped,"__projectionFlipped");
	HX_VISIT_MEMBER_NAME(_hx___scrollRectMasks,"__scrollRectMasks");
	HX_VISIT_MEMBER_NAME(_hx___softwareRenderer,"__softwareRenderer");
	HX_VISIT_MEMBER_NAME(_hx___stencilReference,"__stencilReference");
	HX_VISIT_MEMBER_NAME(_hx___tempRect,"__tempRect");
	HX_VISIT_MEMBER_NAME(_hx___updatedStencil,"__updatedStencil");
	HX_VISIT_MEMBER_NAME(_hx___upscaled,"__upscaled");
	HX_VISIT_MEMBER_NAME(_hx___values,"__values");
	HX_VISIT_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::display::DisplayObjectRenderer_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val OpenGLRenderer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return ::hx::Val( gl ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"__gl") ) { return ::hx::Val( _hx___gl ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__width") ) { return ::hx::Val( _hx___width ); }
		if (HX_FIELD_EQ(inName,"__clear") ) { return ::hx::Val( _hx___clear_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__height") ) { return ::hx::Val( _hx___height ); }
		if (HX_FIELD_EQ(inName,"__matrix") ) { return ::hx::Val( _hx___matrix ); }
		if (HX_FIELD_EQ(inName,"__values") ) { return ::hx::Val( _hx___values ); }
		if (HX_FIELD_EQ(inName,"__render") ) { return ::hx::Val( _hx___render_dyn() ); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return ::hx::Val( _hx___resize_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__flipped") ) { return ::hx::Val( _hx___flipped ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return ::hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return ::hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"setShader") ) { return ::hx::Val( setShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__popMask") ) { return ::hx::Val( _hx___popMask_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__tempRect") ) { return ::hx::Val( _hx___tempRect ); }
		if (HX_FIELD_EQ(inName,"__upscaled") ) { return ::hx::Val( _hx___upscaled ); }
		if (HX_FIELD_EQ(inName,"applyAlpha") ) { return ::hx::Val( applyAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"__pushMask") ) { return ::hx::Val( _hx___pushMask_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__context3D") ) { return ::hx::Val( _hx___context3D ); }
		if (HX_FIELD_EQ(inName,"__clipRects") ) { return ::hx::Val( _hx___clipRects ); }
		if (HX_FIELD_EQ(inName,"applyMatrix") ) { return ::hx::Val( applyMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"setViewport") ) { return ::hx::Val( setViewport_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getMatrix") ) { return ::hx::Val( _hx___getMatrix_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__maskShader") ) { return ::hx::Val( _hx___maskShader ); }
		if (HX_FIELD_EQ(inName,"__projection") ) { return ::hx::Val( _hx___projection ); }
		if (HX_FIELD_EQ(inName,"updateShader") ) { return ::hx::Val( updateShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__copyShader") ) { return ::hx::Val( _hx___copyShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__initShader") ) { return ::hx::Val( _hx___initShader_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__maskObjects") ) { return ::hx::Val( _hx___maskObjects ); }
		if (HX_FIELD_EQ(inName,"useAlphaArray") ) { return ::hx::Val( useAlphaArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"__clearShader") ) { return ::hx::Val( _hx___clearShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__popMaskRect") ) { return ::hx::Val( _hx___popMaskRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__scissorRect") ) { return ::hx::Val( _hx___scissorRect_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__displayWidth") ) { return ::hx::Val( _hx___displayWidth ); }
		if (HX_FIELD_EQ(inName,"__numClipRects") ) { return ::hx::Val( _hx___numClipRects ); }
		if (HX_FIELD_EQ(inName,"__pushMaskRect") ) { return ::hx::Val( _hx___pushMaskRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setBlendMode") ) { return ::hx::Val( _hx___setBlendMode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentShader") ) { return ::hx::Val( _hx___currentShader ); }
		if (HX_FIELD_EQ(inName,"__defaultShader") ) { return ::hx::Val( _hx___defaultShader ); }
		if (HX_FIELD_EQ(inName,"__displayHeight") ) { return ::hx::Val( _hx___displayHeight ); }
		if (HX_FIELD_EQ(inName,"applyBitmapData") ) { return ::hx::Val( applyBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__popMaskObject") ) { return ::hx::Val( _hx___popMaskObject_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__updatedStencil") ) { return ::hx::Val( _hx___updatedStencil ); }
		if (HX_FIELD_EQ(inName,"__pushMaskObject") ) { return ::hx::Val( _hx___pushMaskObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDrawable") ) { return ::hx::Val( _hx___renderDrawable_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__scrollRectMasks") ) { return ::hx::Val( _hx___scrollRectMasks ); }
		if (HX_FIELD_EQ(inName,"__setRenderTarget") ) { return ::hx::Val( _hx___setRenderTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setShaderBuffer") ) { return ::hx::Val( _hx___setShaderBuffer_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__softwareRenderer") ) { return ::hx::Val( _hx___softwareRenderer ); }
		if (HX_FIELD_EQ(inName,"__stencilReference") ) { return ::hx::Val( _hx___stencilReference ); }
		if (HX_FIELD_EQ(inName,"__initShaderBuffer") ) { return ::hx::Val( _hx___initShaderBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderFilterPass") ) { return ::hx::Val( _hx___renderFilterPass_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__projectionFlipped") ) { return ::hx::Val( _hx___projectionFlipped ); }
		if (HX_FIELD_EQ(inName,"applyColorTransform") ) { return ::hx::Val( applyColorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"__initDisplayShader") ) { return ::hx::Val( _hx___initDisplayShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__resumeClipAndMask") ) { return ::hx::Val( _hx___resumeClipAndMask_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__initGraphicsShader") ) { return ::hx::Val( _hx___initGraphicsShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDrawableMask") ) { return ::hx::Val( _hx___renderDrawableMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__suspendClipAndMask") ) { return ::hx::Val( _hx___suspendClipAndMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateShaderBuffer") ) { return ::hx::Val( _hx___updateShaderBuffer_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__currentShaderBuffer") ) { return ::hx::Val( _hx___currentShaderBuffer ); }
		if (HX_FIELD_EQ(inName,"__defaultRenderTarget") ) { return ::hx::Val( _hx___defaultRenderTarget ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__currentDisplayShader") ) { return ::hx::Val( _hx___currentDisplayShader ); }
		if (HX_FIELD_EQ(inName,"__defaultDisplayShader") ) { return ::hx::Val( _hx___defaultDisplayShader ); }
		if (HX_FIELD_EQ(inName,"applyHasColorTransform") ) { return ::hx::Val( applyHasColorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"useColorTransformArray") ) { return ::hx::Val( useColorTransformArray_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__currentGraphicsShader") ) { return ::hx::Val( _hx___currentGraphicsShader ); }
		if (HX_FIELD_EQ(inName,"__defaultGraphicsShader") ) { return ::hx::Val( _hx___defaultGraphicsShader ); }
	}
	return super::__Field(inName,inCallProp);
}

bool OpenGLRenderer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__alphaValue") ) { outValue = ( _hx___alphaValue ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__emptyColorValue") ) { outValue = ( _hx___emptyColorValue ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__scissorRectangle") ) { outValue = ( _hx___scissorRectangle ); return true; }
		if (HX_FIELD_EQ(inName,"__textureSizeValue") ) { outValue = ( _hx___textureSizeValue ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__colorOffsetsValue") ) { outValue = ( _hx___colorOffsetsValue ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__colorMultipliersValue") ) { outValue = ( _hx___colorMultipliersValue ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__hasColorTransformValue") ) { outValue = ( _hx___hasColorTransformValue ); return true; }
	}
	return false;
}

::hx::Val OpenGLRenderer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::_internal::backend::native::NativeOpenGLRenderContext >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"__gl") ) { _hx___gl=inValue.Cast<  ::lime::_internal::backend::native::NativeOpenGLRenderContext >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__width") ) { _hx___width=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__height") ) { _hx___height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__matrix") ) { _hx___matrix=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__values") ) { _hx___values=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__flipped") ) { _hx___flipped=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__tempRect") ) { _hx___tempRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__upscaled") ) { _hx___upscaled=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__context3D") ) { _hx___context3D=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__clipRects") ) { _hx___clipRects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__maskShader") ) { _hx___maskShader=inValue.Cast<  ::openfl::display::_internal::Context3DMaskShader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__projection") ) { _hx___projection=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__maskObjects") ) { _hx___maskObjects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__displayWidth") ) { _hx___displayWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__numClipRects") ) { _hx___numClipRects=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentShader") ) { _hx___currentShader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__defaultShader") ) { _hx___defaultShader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__displayHeight") ) { _hx___displayHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__updatedStencil") ) { _hx___updatedStencil=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__scrollRectMasks") ) { _hx___scrollRectMasks=inValue.Cast<  ::lime::utils::ObjectPool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__softwareRenderer") ) { _hx___softwareRenderer=inValue.Cast<  ::openfl::display::DisplayObjectRenderer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilReference") ) { _hx___stencilReference=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__projectionFlipped") ) { _hx___projectionFlipped=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__currentShaderBuffer") ) { _hx___currentShaderBuffer=inValue.Cast<  ::openfl::display::_internal::ShaderBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__defaultRenderTarget") ) { _hx___defaultRenderTarget=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__currentDisplayShader") ) { _hx___currentDisplayShader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__defaultDisplayShader") ) { _hx___defaultDisplayShader=inValue.Cast<  ::openfl::display::DisplayObjectShader >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__currentGraphicsShader") ) { _hx___currentGraphicsShader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__defaultGraphicsShader") ) { _hx___defaultGraphicsShader=inValue.Cast<  ::openfl::display::GraphicsShader >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool OpenGLRenderer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__alphaValue") ) { _hx___alphaValue=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__emptyColorValue") ) { _hx___emptyColorValue=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__scissorRectangle") ) { _hx___scissorRectangle=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		if (HX_FIELD_EQ(inName,"__textureSizeValue") ) { _hx___textureSizeValue=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__colorOffsetsValue") ) { _hx___colorOffsetsValue=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__colorMultipliersValue") ) { _hx___colorMultipliersValue=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__hasColorTransformValue") ) { _hx___hasColorTransformValue=ioValue.Cast< ::Array< bool > >(); return true; }
	}
	return false;
}

void OpenGLRenderer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("gl",25,5a,00,00));
	outFields->push(HX_("__context3D",40,a5,28,45));
	outFields->push(HX_("__clipRects",bf,ca,ff,32));
	outFields->push(HX_("__currentDisplayShader",2e,e2,be,27));
	outFields->push(HX_("__currentGraphicsShader",49,31,ab,3a));
	outFields->push(HX_("__currentShader",1e,79,2f,88));
	outFields->push(HX_("__currentShaderBuffer",be,54,3d,df));
	outFields->push(HX_("__defaultDisplayShader",a6,70,7d,f7));
	outFields->push(HX_("__defaultGraphicsShader",d1,4b,a9,31));
	outFields->push(HX_("__defaultRenderTarget",88,da,8f,e0));
	outFields->push(HX_("__defaultShader",a6,cb,4b,9f));
	outFields->push(HX_("__displayHeight",a9,fc,60,4b));
	outFields->push(HX_("__displayWidth",84,0f,7c,f7));
	outFields->push(HX_("__flipped",22,bd,d6,00));
	outFields->push(HX_("__gl",45,b5,13,3f));
	outFields->push(HX_("__height",07,73,7b,aa));
	outFields->push(HX_("__maskShader",51,68,98,6a));
	outFields->push(HX_("__matrix",61,a1,f7,63));
	outFields->push(HX_("__maskObjects",28,c6,8b,fd));
	outFields->push(HX_("__numClipRects",d9,0d,04,cd));
	outFields->push(HX_("__offsetX",45,5a,b3,58));
	outFields->push(HX_("__offsetY",46,5a,b3,58));
	outFields->push(HX_("__projection",af,03,1f,fd));
	outFields->push(HX_("__projectionFlipped",53,f4,6c,72));
	outFields->push(HX_("__scrollRectMasks",56,dd,1f,f7));
	outFields->push(HX_("__softwareRenderer",aa,4f,cd,76));
	outFields->push(HX_("__stencilReference",4f,1d,93,93));
	outFields->push(HX_("__tempRect",78,c9,53,3e));
	outFields->push(HX_("__updatedStencil",21,3c,c1,34));
	outFields->push(HX_("__upscaled",55,7a,d0,34));
	outFields->push(HX_("__values",02,6f,e6,f7));
	outFields->push(HX_("__width",e6,0e,c1,34));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo OpenGLRenderer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::lime::_internal::backend::native::NativeOpenGLRenderContext */ ,(int)offsetof(OpenGLRenderer_obj,gl),HX_("gl",25,5a,00,00)},
	{::hx::fsObject /*  ::openfl::display3D::Context3D */ ,(int)offsetof(OpenGLRenderer_obj,_hx___context3D),HX_("__context3D",40,a5,28,45)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(OpenGLRenderer_obj,_hx___clipRects),HX_("__clipRects",bf,ca,ff,32)},
	{::hx::fsObject /*  ::openfl::display::Shader */ ,(int)offsetof(OpenGLRenderer_obj,_hx___currentDisplayShader),HX_("__currentDisplayShader",2e,e2,be,27)},
	{::hx::fsObject /*  ::openfl::display::Shader */ ,(int)offsetof(OpenGLRenderer_obj,_hx___currentGraphicsShader),HX_("__currentGraphicsShader",49,31,ab,3a)},
	{::hx::fsObject /*  ::openfl::display::Shader */ ,(int)offsetof(OpenGLRenderer_obj,_hx___currentShader),HX_("__currentShader",1e,79,2f,88)},
	{::hx::fsObject /*  ::openfl::display::_internal::ShaderBuffer */ ,(int)offsetof(OpenGLRenderer_obj,_hx___currentShaderBuffer),HX_("__currentShaderBuffer",be,54,3d,df)},
	{::hx::fsObject /*  ::openfl::display::DisplayObjectShader */ ,(int)offsetof(OpenGLRenderer_obj,_hx___defaultDisplayShader),HX_("__defaultDisplayShader",a6,70,7d,f7)},
	{::hx::fsObject /*  ::openfl::display::GraphicsShader */ ,(int)offsetof(OpenGLRenderer_obj,_hx___defaultGraphicsShader),HX_("__defaultGraphicsShader",d1,4b,a9,31)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(OpenGLRenderer_obj,_hx___defaultRenderTarget),HX_("__defaultRenderTarget",88,da,8f,e0)},
	{::hx::fsObject /*  ::openfl::display::Shader */ ,(int)offsetof(OpenGLRenderer_obj,_hx___defaultShader),HX_("__defaultShader",a6,cb,4b,9f)},
	{::hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___displayHeight),HX_("__displayHeight",a9,fc,60,4b)},
	{::hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___displayWidth),HX_("__displayWidth",84,0f,7c,f7)},
	{::hx::fsBool,(int)offsetof(OpenGLRenderer_obj,_hx___flipped),HX_("__flipped",22,bd,d6,00)},
	{::hx::fsObject /*  ::lime::_internal::backend::native::NativeOpenGLRenderContext */ ,(int)offsetof(OpenGLRenderer_obj,_hx___gl),HX_("__gl",45,b5,13,3f)},
	{::hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___height),HX_("__height",07,73,7b,aa)},
	{::hx::fsObject /*  ::openfl::display::_internal::Context3DMaskShader */ ,(int)offsetof(OpenGLRenderer_obj,_hx___maskShader),HX_("__maskShader",51,68,98,6a)},
	{::hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(OpenGLRenderer_obj,_hx___matrix),HX_("__matrix",61,a1,f7,63)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(OpenGLRenderer_obj,_hx___maskObjects),HX_("__maskObjects",28,c6,8b,fd)},
	{::hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___numClipRects),HX_("__numClipRects",d9,0d,04,cd)},
	{::hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___offsetX),HX_("__offsetX",45,5a,b3,58)},
	{::hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___offsetY),HX_("__offsetY",46,5a,b3,58)},
	{::hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(OpenGLRenderer_obj,_hx___projection),HX_("__projection",af,03,1f,fd)},
	{::hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(OpenGLRenderer_obj,_hx___projectionFlipped),HX_("__projectionFlipped",53,f4,6c,72)},
	{::hx::fsObject /*  ::lime::utils::ObjectPool */ ,(int)offsetof(OpenGLRenderer_obj,_hx___scrollRectMasks),HX_("__scrollRectMasks",56,dd,1f,f7)},
	{::hx::fsObject /*  ::openfl::display::DisplayObjectRenderer */ ,(int)offsetof(OpenGLRenderer_obj,_hx___softwareRenderer),HX_("__softwareRenderer",aa,4f,cd,76)},
	{::hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___stencilReference),HX_("__stencilReference",4f,1d,93,93)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(OpenGLRenderer_obj,_hx___tempRect),HX_("__tempRect",78,c9,53,3e)},
	{::hx::fsBool,(int)offsetof(OpenGLRenderer_obj,_hx___updatedStencil),HX_("__updatedStencil",21,3c,c1,34)},
	{::hx::fsBool,(int)offsetof(OpenGLRenderer_obj,_hx___upscaled),HX_("__upscaled",55,7a,d0,34)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(OpenGLRenderer_obj,_hx___values),HX_("__values",02,6f,e6,f7)},
	{::hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___width),HX_("__width",e6,0e,c1,34)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo OpenGLRenderer_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(void *) &OpenGLRenderer_obj::_hx___alphaValue,HX_("__alphaValue",53,4e,f1,8a)},
	{::hx::fsObject /* ::Array< Float > */ ,(void *) &OpenGLRenderer_obj::_hx___colorMultipliersValue,HX_("__colorMultipliersValue",a2,08,bb,81)},
	{::hx::fsObject /* ::Array< Float > */ ,(void *) &OpenGLRenderer_obj::_hx___colorOffsetsValue,HX_("__colorOffsetsValue",b4,64,83,33)},
	{::hx::fsObject /* ::Array< Float > */ ,(void *) &OpenGLRenderer_obj::_hx___emptyColorValue,HX_("__emptyColorValue",db,98,57,b3)},
	{::hx::fsObject /* ::Array< bool > */ ,(void *) &OpenGLRenderer_obj::_hx___hasColorTransformValue,HX_("__hasColorTransformValue",0e,4b,82,a1)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(void *) &OpenGLRenderer_obj::_hx___scissorRectangle,HX_("__scissorRectangle",93,3b,f9,77)},
	{::hx::fsObject /* ::Array< Float > */ ,(void *) &OpenGLRenderer_obj::_hx___textureSizeValue,HX_("__textureSizeValue",b5,29,2d,70)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String OpenGLRenderer_obj_sMemberFields[] = {
	HX_("gl",25,5a,00,00),
	HX_("__context3D",40,a5,28,45),
	HX_("__clipRects",bf,ca,ff,32),
	HX_("__currentDisplayShader",2e,e2,be,27),
	HX_("__currentGraphicsShader",49,31,ab,3a),
	HX_("__currentShader",1e,79,2f,88),
	HX_("__currentShaderBuffer",be,54,3d,df),
	HX_("__defaultDisplayShader",a6,70,7d,f7),
	HX_("__defaultGraphicsShader",d1,4b,a9,31),
	HX_("__defaultRenderTarget",88,da,8f,e0),
	HX_("__defaultShader",a6,cb,4b,9f),
	HX_("__displayHeight",a9,fc,60,4b),
	HX_("__displayWidth",84,0f,7c,f7),
	HX_("__flipped",22,bd,d6,00),
	HX_("__gl",45,b5,13,3f),
	HX_("__height",07,73,7b,aa),
	HX_("__maskShader",51,68,98,6a),
	HX_("__matrix",61,a1,f7,63),
	HX_("__maskObjects",28,c6,8b,fd),
	HX_("__numClipRects",d9,0d,04,cd),
	HX_("__offsetX",45,5a,b3,58),
	HX_("__offsetY",46,5a,b3,58),
	HX_("__projection",af,03,1f,fd),
	HX_("__projectionFlipped",53,f4,6c,72),
	HX_("__scrollRectMasks",56,dd,1f,f7),
	HX_("__softwareRenderer",aa,4f,cd,76),
	HX_("__stencilReference",4f,1d,93,93),
	HX_("__tempRect",78,c9,53,3e),
	HX_("__updatedStencil",21,3c,c1,34),
	HX_("__upscaled",55,7a,d0,34),
	HX_("__values",02,6f,e6,f7),
	HX_("__width",e6,0e,c1,34),
	HX_("applyAlpha",10,23,e8,cc),
	HX_("applyBitmapData",c7,94,b7,f3),
	HX_("applyColorTransform",97,55,2e,0b),
	HX_("applyHasColorTransform",35,53,e0,cd),
	HX_("applyMatrix",4f,f6,c2,f7),
	HX_("setShader",67,34,c8,7c),
	HX_("setViewport",28,16,06,cd),
	HX_("updateShader",0e,66,e4,1c),
	HX_("useAlphaArray",82,b0,9d,7e),
	HX_("useColorTransformArray",49,89,6f,74),
	HX_("__clear",6d,ca,b9,b2),
	HX_("__clearShader",72,0d,86,f9),
	HX_("__copyShader",da,9f,78,0b),
	HX_("__getMatrix",57,08,4b,66),
	HX_("__initShader",75,95,f9,59),
	HX_("__initDisplayShader",b7,0e,d5,77),
	HX_("__initGraphicsShader",a0,fc,fb,fd),
	HX_("__initShaderBuffer",55,cc,4f,9f),
	HX_("__popMask",fd,b7,5f,c4),
	HX_("__popMaskObject",9c,46,0d,10),
	HX_("__popMaskRect",c1,73,e8,16),
	HX_("__pushMask",06,e7,7f,ba),
	HX_("__pushMaskObject",65,e2,3b,45),
	HX_("__pushMaskRect",4a,5b,e7,a0),
	HX_("__render",76,d6,58,ad),
	HX_("__renderDrawable",34,e4,0f,12),
	HX_("__renderDrawableMask",40,7b,d7,45),
	HX_("__renderFilterPass",bf,36,cd,6c),
	HX_("__resize",14,c5,aa,b0),
	HX_("__resumeClipAndMask",a6,5e,6c,d9),
	HX_("__scissorRect",40,20,cc,a9),
	HX_("__setBlendMode",72,27,48,51),
	HX_("__setRenderTarget",e9,fa,52,98),
	HX_("__setShaderBuffer",a7,5d,8d,e2),
	HX_("__suspendClipAndMask",77,cf,4a,d0),
	HX_("__updateShaderBuffer",ce,30,be,97),
	::String(null()) };

static void OpenGLRenderer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___alphaValue,"__alphaValue");
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___colorMultipliersValue,"__colorMultipliersValue");
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___colorOffsetsValue,"__colorOffsetsValue");
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___emptyColorValue,"__emptyColorValue");
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___hasColorTransformValue,"__hasColorTransformValue");
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___scissorRectangle,"__scissorRectangle");
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___textureSizeValue,"__textureSizeValue");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OpenGLRenderer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___alphaValue,"__alphaValue");
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___colorMultipliersValue,"__colorMultipliersValue");
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___colorOffsetsValue,"__colorOffsetsValue");
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___emptyColorValue,"__emptyColorValue");
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___hasColorTransformValue,"__hasColorTransformValue");
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___scissorRectangle,"__scissorRectangle");
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___textureSizeValue,"__textureSizeValue");
};

#endif

::hx::Class OpenGLRenderer_obj::__mClass;

static ::String OpenGLRenderer_obj_sStaticFields[] = {
	HX_("__alphaValue",53,4e,f1,8a),
	HX_("__colorMultipliersValue",a2,08,bb,81),
	HX_("__colorOffsetsValue",b4,64,83,33),
	HX_("__emptyColorValue",db,98,57,b3),
	HX_("__hasColorTransformValue",0e,4b,82,a1),
	HX_("__scissorRectangle",93,3b,f9,77),
	HX_("__textureSizeValue",b5,29,2d,70),
	::String(null())
};

void OpenGLRenderer_obj::__register()
{
	OpenGLRenderer_obj _hx_dummy;
	OpenGLRenderer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.display.OpenGLRenderer",bc,6a,f8,fd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &OpenGLRenderer_obj::__GetStatic;
	__mClass->mSetStaticField = &OpenGLRenderer_obj::__SetStatic;
	__mClass->mMarkFunc = OpenGLRenderer_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(OpenGLRenderer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(OpenGLRenderer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< OpenGLRenderer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OpenGLRenderer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OpenGLRenderer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OpenGLRenderer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void OpenGLRenderer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_55_boot)
HXDLIN(  55)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("__projection",af,03,1f,fd), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(1,HX_("gl",25,5a,00,00), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(2,HX_("__gl",45,b5,13,3f), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(3,HX_("__matrix",61,a1,f7,63), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(4,HX_("__projectionFlipped",53,f4,6c,72), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c))))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_57_boot)
HXDLIN(  57)		_hx___alphaValue = ::Array_obj< Float >::fromData( _hx_array_data_fdf86abc_41,1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_58_boot)
HXDLIN(  58)		_hx___colorMultipliersValue = ::Array_obj< Float >::fromData( _hx_array_data_fdf86abc_43,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_59_boot)
HXDLIN(  59)		_hx___colorOffsetsValue = ::Array_obj< Float >::fromData( _hx_array_data_fdf86abc_45,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_61_boot)
HXDLIN(  61)		_hx___emptyColorValue = ::Array_obj< Float >::fromData( _hx_array_data_fdf86abc_47,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_63_boot)
HXDLIN(  63)		_hx___hasColorTransformValue = ::Array_obj< bool >::fromData( _hx_array_data_fdf86abc_49,1);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_2f59d7e567bca573_64_boot)
HXDLIN(  64)		_hx___scissorRectangle =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_65_boot)
HXDLIN(  65)		_hx___textureSizeValue = ::Array_obj< Float >::fromData( _hx_array_data_fdf86abc_52,2);
            	}
}

} // end namespace openfl
} // end namespace display
