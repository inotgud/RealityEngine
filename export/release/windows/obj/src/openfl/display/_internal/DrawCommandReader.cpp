// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display__internal_DrawCommandBuffer
#include <openfl/display/_internal/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl_display__internal_DrawCommandReader
#include <openfl/display/_internal/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl_display__internal_DrawCommandType
#include <openfl/display/_internal/DrawCommandType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b557290fba582da0_36_new,"openfl.display._internal.DrawCommandReader","new",0x2371abc0,"openfl.display._internal.DrawCommandReader.new","openfl/display/_internal/DrawCommandReader.hx",36,0x29f77eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_b557290fba582da0_135_destroy,"openfl.display._internal.DrawCommandReader","destroy",0xa1a5385a,"openfl.display._internal.DrawCommandReader.destroy","openfl/display/_internal/DrawCommandReader.hx",135,0x29f77eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_b557290fba582da0_323_reset,"openfl.display._internal.DrawCommandReader","reset",0x719bbd2f,"openfl.display._internal.DrawCommandReader.reset","openfl/display/_internal/DrawCommandReader.hx",323,0x29f77eb3)
HX_LOCAL_STACK_FRAME(_hx_pos_b557290fba582da0_22_boot,"openfl.display._internal.DrawCommandReader","boot",0xd81d9cd2,"openfl.display._internal.DrawCommandReader.boot","openfl/display/_internal/DrawCommandReader.hx",22,0x29f77eb3)
namespace openfl{
namespace display{
namespace _internal{

void DrawCommandReader_obj::__construct( ::openfl::display::_internal::DrawCommandBuffer buffer){
            	HX_STACKFRAME(&_hx_pos_b557290fba582da0_36_new)
HXLINE(  37)		this->buffer = buffer;
HXLINE(  39)		this->bPos = (this->iPos = (this->fPos = (this->oPos = (this->ffPos = (this->iiPos = (this->tsPos = 0))))));
HXLINE(  40)		this->prev = ::openfl::display::_internal::DrawCommandType_obj::UNKNOWN_dyn();
            	}

Dynamic DrawCommandReader_obj::__CreateEmpty() { return new DrawCommandReader_obj; }

void *DrawCommandReader_obj::_hx_vtable = 0;

Dynamic DrawCommandReader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DrawCommandReader_obj > _hx_result = new DrawCommandReader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool DrawCommandReader_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x30a4d7c0;
}

void DrawCommandReader_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_b557290fba582da0_135_destroy)
HXLINE( 136)		this->buffer = null();
HXLINE( 137)		this->reset();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,destroy,(void))

void DrawCommandReader_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_b557290fba582da0_323_reset)
HXDLIN( 323)		this->bPos = (this->iPos = (this->fPos = (this->oPos = (this->ffPos = (this->iiPos = (this->tsPos = 0))))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,reset,(void))


::hx::ObjectPtr< DrawCommandReader_obj > DrawCommandReader_obj::__new( ::openfl::display::_internal::DrawCommandBuffer buffer) {
	::hx::ObjectPtr< DrawCommandReader_obj > __this = new DrawCommandReader_obj();
	__this->__construct(buffer);
	return __this;
}

::hx::ObjectPtr< DrawCommandReader_obj > DrawCommandReader_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::display::_internal::DrawCommandBuffer buffer) {
	DrawCommandReader_obj *__this = (DrawCommandReader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DrawCommandReader_obj), true, "openfl.display._internal.DrawCommandReader"));
	*(void **)__this = DrawCommandReader_obj::_hx_vtable;
	__this->__construct(buffer);
	return __this;
}

DrawCommandReader_obj::DrawCommandReader_obj()
{
}

void DrawCommandReader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DrawCommandReader);
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(bPos,"bPos");
	HX_MARK_MEMBER_NAME(iiPos,"iiPos");
	HX_MARK_MEMBER_NAME(iPos,"iPos");
	HX_MARK_MEMBER_NAME(ffPos,"ffPos");
	HX_MARK_MEMBER_NAME(fPos,"fPos");
	HX_MARK_MEMBER_NAME(oPos,"oPos");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(tsPos,"tsPos");
	HX_MARK_END_CLASS();
}

void DrawCommandReader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(bPos,"bPos");
	HX_VISIT_MEMBER_NAME(iiPos,"iiPos");
	HX_VISIT_MEMBER_NAME(iPos,"iPos");
	HX_VISIT_MEMBER_NAME(ffPos,"ffPos");
	HX_VISIT_MEMBER_NAME(fPos,"fPos");
	HX_VISIT_MEMBER_NAME(oPos,"oPos");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(tsPos,"tsPos");
}

::hx::Val DrawCommandReader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"bPos") ) { return ::hx::Val( bPos ); }
		if (HX_FIELD_EQ(inName,"iPos") ) { return ::hx::Val( iPos ); }
		if (HX_FIELD_EQ(inName,"fPos") ) { return ::hx::Val( fPos ); }
		if (HX_FIELD_EQ(inName,"oPos") ) { return ::hx::Val( oPos ); }
		if (HX_FIELD_EQ(inName,"prev") ) { return ::hx::Val( prev ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"iiPos") ) { return ::hx::Val( iiPos ); }
		if (HX_FIELD_EQ(inName,"ffPos") ) { return ::hx::Val( ffPos ); }
		if (HX_FIELD_EQ(inName,"tsPos") ) { return ::hx::Val( tsPos ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return ::hx::Val( buffer ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DrawCommandReader_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"bPos") ) { bPos=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iPos") ) { iPos=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fPos") ) { fPos=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"oPos") ) { oPos=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast<  ::openfl::display::_internal::DrawCommandType >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"iiPos") ) { iiPos=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ffPos") ) { ffPos=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tsPos") ) { tsPos=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::openfl::display::_internal::DrawCommandBuffer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DrawCommandReader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("buffer",00,bd,94,d0));
	outFields->push(HX_("bPos",52,fe,03,41));
	outFields->push(HX_("iiPos",94,65,b7,ba));
	outFields->push(HX_("iPos",ab,7c,a4,45));
	outFields->push(HX_("ffPos",34,04,88,fe));
	outFields->push(HX_("fPos",ce,d8,a8,43));
	outFields->push(HX_("oPos",65,c4,9b,49));
	outFields->push(HX_("prev",f3,be,5e,4a));
	outFields->push(HX_("tsPos",55,e9,bb,16));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DrawCommandReader_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::_internal::DrawCommandBuffer */ ,(int)offsetof(DrawCommandReader_obj,buffer),HX_("buffer",00,bd,94,d0)},
	{::hx::fsInt,(int)offsetof(DrawCommandReader_obj,bPos),HX_("bPos",52,fe,03,41)},
	{::hx::fsInt,(int)offsetof(DrawCommandReader_obj,iiPos),HX_("iiPos",94,65,b7,ba)},
	{::hx::fsInt,(int)offsetof(DrawCommandReader_obj,iPos),HX_("iPos",ab,7c,a4,45)},
	{::hx::fsInt,(int)offsetof(DrawCommandReader_obj,ffPos),HX_("ffPos",34,04,88,fe)},
	{::hx::fsInt,(int)offsetof(DrawCommandReader_obj,fPos),HX_("fPos",ce,d8,a8,43)},
	{::hx::fsInt,(int)offsetof(DrawCommandReader_obj,oPos),HX_("oPos",65,c4,9b,49)},
	{::hx::fsObject /*  ::openfl::display::_internal::DrawCommandType */ ,(int)offsetof(DrawCommandReader_obj,prev),HX_("prev",f3,be,5e,4a)},
	{::hx::fsInt,(int)offsetof(DrawCommandReader_obj,tsPos),HX_("tsPos",55,e9,bb,16)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DrawCommandReader_obj_sStaticStorageInfo = 0;
#endif

static ::String DrawCommandReader_obj_sMemberFields[] = {
	HX_("buffer",00,bd,94,d0),
	HX_("bPos",52,fe,03,41),
	HX_("iiPos",94,65,b7,ba),
	HX_("iPos",ab,7c,a4,45),
	HX_("ffPos",34,04,88,fe),
	HX_("fPos",ce,d8,a8,43),
	HX_("oPos",65,c4,9b,49),
	HX_("prev",f3,be,5e,4a),
	HX_("tsPos",55,e9,bb,16),
	HX_("destroy",fa,2c,86,24),
	HX_("reset",cf,49,c8,e6),
	::String(null()) };

::hx::Class DrawCommandReader_obj::__mClass;

void DrawCommandReader_obj::__register()
{
	DrawCommandReader_obj _hx_dummy;
	DrawCommandReader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.display._internal.DrawCommandReader",ce,0b,49,27);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DrawCommandReader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DrawCommandReader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DrawCommandReader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DrawCommandReader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DrawCommandReader_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b557290fba582da0_22_boot)
HXDLIN(  22)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
}

} // end namespace openfl
} // end namespace display
} // end namespace _internal
