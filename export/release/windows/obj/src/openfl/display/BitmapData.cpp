// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoSurface_CairoSurface_Impl_
#include <lime/graphics/cairo/_CairoSurface/CairoSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__internal_Context3DState
#include <openfl/display3D/_internal/Context3DState.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_openfl_utils__Endian_Endian_Impl_
#include <openfl/utils/_Endian/Endian_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e7567b6ca69cedca_240_new,"openfl.display.BitmapData","new",0x7e3e4115,"openfl.display.BitmapData.new","openfl/display/BitmapData.hx",240,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_398_clone,"openfl.display.BitmapData","clone",0xea52db52,"openfl.display.BitmapData.clone","openfl/display/BitmapData.hx",398,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_444_colorTransform,"openfl.display.BitmapData","colorTransform",0xbfe3e8f4,"openfl.display.BitmapData.colorTransform","openfl/display/BitmapData.hx",444,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_630_copyChannel,"openfl.display.BitmapData","copyChannel",0x5d702b43,"openfl.display.BitmapData.copyChannel","openfl/display/BitmapData.hx",630,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_697_copyPixels,"openfl.display.BitmapData","copyPixels",0x385c94ad,"openfl.display.BitmapData.copyPixels","openfl/display/BitmapData.hx",697,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_734_dispose,"openfl.display.BitmapData","dispose",0x8eb5efd4,"openfl.display.BitmapData.dispose","openfl/display/BitmapData.hx",734,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_866_draw,"openfl.display.BitmapData","draw",0xf1a859af,"openfl.display.BitmapData.draw","openfl/display/BitmapData.hx",866,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1163_fillRect,"openfl.display.BitmapData","fillRect",0x95912472,"openfl.display.BitmapData.fillRect","openfl/display/BitmapData.hx",1163,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1369_getIndexBuffer,"openfl.display.BitmapData","getIndexBuffer",0x8fe8ca27,"openfl.display.BitmapData.getIndexBuffer","openfl/display/BitmapData.hx",1369,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1583_getVertexBuffer,"openfl.display.BitmapData","getVertexBuffer",0xd07f316f,"openfl.display.BitmapData.getVertexBuffer","openfl/display/BitmapData.hx",1583,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2108_getPixel32,"openfl.display.BitmapData","getPixel32",0xcd56e69a,"openfl.display.BitmapData.getPixel32","openfl/display/BitmapData.hx",2108,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2150_getSurface,"openfl.display.BitmapData","getSurface",0xa2992c22,"openfl.display.BitmapData.getSurface","openfl/display/BitmapData.hx",2150,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2174_getTexture,"openfl.display.BitmapData","getTexture",0xe4308ed0,"openfl.display.BitmapData.getTexture","openfl/display/BitmapData.hx",2174,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2528_lock,"openfl.display.BitmapData","lock",0xf6efc996,"openfl.display.BitmapData.lock","openfl/display/BitmapData.hx",2528,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2840_setPixel,"openfl.display.BitmapData","setPixel",0xf9b00eaf,"openfl.display.BitmapData.setPixel","openfl/display/BitmapData.hx",2840,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2879_setPixel32,"openfl.display.BitmapData","setPixel32",0xd0d4850e,"openfl.display.BitmapData.setPixel32","openfl/display/BitmapData.hx",2879,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2906_setPixels,"openfl.display.BitmapData","setPixels",0x805ccae4,"openfl.display.BitmapData.setPixels","openfl/display/BitmapData.hx",2906,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3022_unlock,"openfl.display.BitmapData","unlock",0x756bd12f,"openfl.display.BitmapData.unlock","openfl/display/BitmapData.hx",3022,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3025___applyAlpha,"openfl.display.BitmapData","__applyAlpha",0x0369eedb,"openfl.display.BitmapData.__applyAlpha","openfl/display/BitmapData.hx",3025,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3042___drawCairo,"openfl.display.BitmapData","__drawCairo",0x71da5c79,"openfl.display.BitmapData.__drawCairo","openfl/display/BitmapData.hx",3042,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3083___drawGL,"openfl.display.BitmapData","__drawGL",0xb0ddbd74,"openfl.display.BitmapData.__drawGL","openfl/display/BitmapData.hx",3083,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3106___fillRect,"openfl.display.BitmapData","__fillRect",0x05dff852,"openfl.display.BitmapData.__fillRect","openfl/display/BitmapData.hx",3106,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3182___fromFile,"openfl.display.BitmapData","__fromFile",0x3aae5011,"openfl.display.BitmapData.__fromFile","openfl/display/BitmapData.hx",3182,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3193___fromImage,"openfl.display.BitmapData","__fromImage",0xdaa80026,"openfl.display.BitmapData.__fromImage","openfl/display/BitmapData.hx",3193,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3216___getBounds,"openfl.display.BitmapData","__getBounds",0x4b2a0640,"openfl.display.BitmapData.__getBounds","openfl/display/BitmapData.hx",3216,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3307___setUVRect,"openfl.display.BitmapData","__setUVRect",0x4b14ffdc,"openfl.display.BitmapData.__setUVRect","openfl/display/BitmapData.hx",3307,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3348___update,"openfl.display.BitmapData","__update",0x580cd054,"openfl.display.BitmapData.__update","openfl/display/BitmapData.hx",3348,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3352___updateTransforms,"openfl.display.BitmapData","__updateTransforms",0xf11196fb,"openfl.display.BitmapData.__updateTransforms","openfl/display/BitmapData.hx",3352,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1274_fromFile,"openfl.display.BitmapData","fromFile",0xca5f7c31,"openfl.display.BitmapData.fromFile","openfl/display/BitmapData.hx",1274,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1296_fromImage,"openfl.display.BitmapData","fromImage",0x05fd7006,"openfl.display.BitmapData.fromImage","openfl/display/BitmapData.hx",1296,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_124_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",124,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_131_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",131,0xdd12d5b9)
namespace openfl{
namespace display{

void BitmapData_obj::__construct(int width,int height,::hx::Null< bool >  __o_transparent,::hx::Null< int >  __o_fillColor){
            		bool transparent = __o_transparent.Default(true);
            		int fillColor = __o_fillColor.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_240_new)
HXLINE( 241)		this->_hx___drawableType = 0;
HXLINE( 243)		this->transparent = transparent;
HXLINE( 250)		if ((width < 0)) {
HXLINE( 250)			width = 0;
            		}
HXLINE( 251)		if ((height < 0)) {
HXLINE( 251)			height = 0;
            		}
HXLINE( 253)		this->width = width;
HXLINE( 254)		this->height = height;
HXLINE( 255)		this->rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,width,height);
HXLINE( 257)		this->_hx___textureWidth = width;
HXLINE( 258)		this->_hx___textureHeight = height;
HXLINE( 260)		bool _hx_tmp;
HXDLIN( 260)		if ((width > 0)) {
HXLINE( 260)			_hx_tmp = (height > 0);
            		}
            		else {
HXLINE( 260)			_hx_tmp = false;
            		}
HXDLIN( 260)		if (_hx_tmp) {
HXLINE( 262)			if (transparent) {
HXLINE( 264)				if (((fillColor & -16777216) == 0)) {
HXLINE( 266)					fillColor = 0;
            				}
            			}
            			else {
HXLINE( 271)				fillColor = (-16777216 | (fillColor & 16777215));
            			}
HXLINE( 274)			fillColor = ((fillColor << 8) | (::hx::UShr(fillColor,24) & 255));
HXLINE( 278)			 ::Dynamic elements = ((width * height) * 4);
HXDLIN( 278)			 ::haxe::io::Bytes buffer = null();
HXDLIN( 278)			::cpp::VirtualArray array = null();
HXDLIN( 278)			 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 278)			 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 278)			 ::Dynamic len = null();
HXDLIN( 278)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 278)			if (::hx::IsNotNull( elements )) {
HXLINE( 278)				this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,4);
            			}
            			else {
HXLINE( 278)				if (::hx::IsNotNull( array )) {
HXLINE( 278)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 278)					_this->byteOffset = 0;
HXDLIN( 278)					_this->length = array->get_length();
HXDLIN( 278)					_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 278)					 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 278)					_this->buffer = this2;
HXDLIN( 278)					_this->copyFromArray(array,null());
HXDLIN( 278)					this1 = _this;
            				}
            				else {
HXLINE( 278)					if (::hx::IsNotNull( vector )) {
HXLINE( 278)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 278)						::cpp::VirtualArray array = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 278)						_this->byteOffset = 0;
HXDLIN( 278)						_this->length = array->get_length();
HXDLIN( 278)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 278)						 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 278)						_this->buffer = this2;
HXDLIN( 278)						_this->copyFromArray(array,null());
HXDLIN( 278)						this1 = _this;
            					}
            					else {
HXLINE( 278)						if (::hx::IsNotNull( view )) {
HXLINE( 278)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 278)							 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 278)							int srcLength = view->length;
HXDLIN( 278)							int srcByteOffset = view->byteOffset;
HXDLIN( 278)							int srcElementSize = view->bytesPerElement;
HXDLIN( 278)							int elementSize = _this->bytesPerElement;
HXDLIN( 278)							if ((view->type == _this->type)) {
HXLINE( 278)								int srcLength = srcData->length;
HXDLIN( 278)								int cloneLength = (srcLength - srcByteOffset);
HXDLIN( 278)								 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 278)								_this->buffer = this1;
HXDLIN( 278)								_this->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            							}
            							else {
HXLINE( 278)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("unimplemented",09,2f,74,b4)));
            							}
HXDLIN( 278)							_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 278)							_this->byteOffset = 0;
HXDLIN( 278)							_this->length = srcLength;
HXDLIN( 278)							this1 = _this;
            						}
            						else {
HXLINE( 278)							if (::hx::IsNotNull( buffer )) {
HXLINE( 278)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 278)								int in_byteOffset = 0;
HXDLIN( 278)								if ((in_byteOffset < 0)) {
HXLINE( 278)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
HXDLIN( 278)								if ((::hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 278)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            								}
HXDLIN( 278)								int bufferByteLength = buffer->length;
HXDLIN( 278)								int elementSize = _this->bytesPerElement;
HXDLIN( 278)								int newByteLength = bufferByteLength;
HXDLIN( 278)								if (::hx::IsNull( len )) {
HXLINE( 278)									newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 278)									if ((::hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 278)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
HXDLIN( 278)									if ((newByteLength < 0)) {
HXLINE( 278)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
            								}
            								else {
HXLINE( 278)									newByteLength = (( (int)(len) ) * _this->bytesPerElement);
HXDLIN( 278)									int newRange = (in_byteOffset + newByteLength);
HXDLIN( 278)									if ((newRange > bufferByteLength)) {
HXLINE( 278)										HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::lime::utils::TAError_obj::RangeError_dyn()));
            									}
            								}
HXDLIN( 278)								_this->buffer = buffer;
HXDLIN( 278)								_this->byteOffset = in_byteOffset;
HXDLIN( 278)								_this->byteLength = newByteLength;
HXDLIN( 278)								_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 278)								this1 = _this;
            							}
            							else {
HXLINE( 278)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85)));
            							}
            						}
            					}
            				}
            			}
HXDLIN( 278)			 ::lime::graphics::ImageBuffer buffer1 =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,width,height,null(),null());
HXLINE( 279)			buffer1->format = 2;
HXLINE( 280)			buffer1->premultiplied = true;
HXLINE( 282)			this->image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,buffer1,0,0,width,height,null(),null());
HXLINE( 284)			if ((fillColor != 0)) {
HXLINE( 286)				 ::lime::graphics::Image _hx_tmp = this->image;
HXDLIN( 286)				_hx_tmp->fillRect(this->image->get_rect(),fillColor,null());
            			}
HXLINE( 306)			this->image->set_transparent(transparent);
HXLINE( 309)			this->_hx___isValid = true;
HXLINE( 310)			this->readable = true;
            		}
HXLINE( 313)		this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 314)		this->_hx___worldAlpha = ( (Float)(1) );
HXLINE( 315)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 316)		this->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 317)		this->_hx___renderable = true;
            	}

Dynamic BitmapData_obj::__CreateEmpty() { return new BitmapData_obj; }

void *BitmapData_obj::_hx_vtable = 0;

Dynamic BitmapData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BitmapData_obj > _hx_result = new BitmapData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool BitmapData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x073e5103;
}

static ::openfl::display::IBitmapDrawable_obj _hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable= {
	( void (::hx::Object::*)( ::openfl::geom::Rectangle, ::openfl::geom::Matrix))&::openfl::display::BitmapData_obj::_hx___getBounds,
	( void (::hx::Object::*)(bool,bool))&::openfl::display::BitmapData_obj::_hx___update,
};

void *BitmapData_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc1c6fbe4: return &_hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::openfl::display::BitmapData BitmapData_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_398_clone)
HXLINE( 400)		 ::openfl::display::BitmapData bitmapData;
HXLINE( 402)		if (!(this->_hx___isValid)) {
HXLINE( 404)			bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,this->transparent,0);
            		}
            		else {
HXLINE( 406)			bool _hx_tmp;
HXDLIN( 406)			if (!(this->readable)) {
HXLINE( 406)				_hx_tmp = ::hx::IsNull( this->image );
            			}
            			else {
HXLINE( 406)				_hx_tmp = false;
            			}
HXDLIN( 406)			if (_hx_tmp) {
HXLINE( 408)				bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,0,0,this->transparent,0);
HXLINE( 410)				bitmapData->width = this->width;
HXLINE( 411)				bitmapData->height = this->height;
HXLINE( 412)				bitmapData->_hx___textureWidth = this->_hx___textureWidth;
HXLINE( 413)				bitmapData->_hx___textureHeight = this->_hx___textureHeight;
HXLINE( 414)				bitmapData->rect->copyFrom(this->rect);
HXLINE( 416)				bitmapData->_hx___framebuffer = this->_hx___framebuffer;
HXLINE( 417)				bitmapData->_hx___framebufferContext = this->_hx___framebufferContext;
HXLINE( 418)				bitmapData->_hx___texture = this->_hx___texture;
HXLINE( 419)				bitmapData->_hx___textureContext = this->_hx___textureContext;
HXLINE( 420)				bitmapData->_hx___isValid = true;
            			}
            			else {
HXLINE( 424)				 ::lime::graphics::Image bitmapData1 = this->image->clone();
HXDLIN( 424)				bitmapData = ::openfl::display::BitmapData_obj::fromImage(bitmapData1,this->transparent);
            			}
            		}
HXLINE( 427)		bitmapData->_hx___worldTransform->copyFrom(this->_hx___worldTransform);
HXLINE( 428)		bitmapData->_hx___renderTransform->copyFrom(this->_hx___renderTransform);
HXLINE( 430)		return bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,clone,return )

void BitmapData_obj::colorTransform( ::openfl::geom::Rectangle rect, ::openfl::geom::ColorTransform colorTransform){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_444_colorTransform)
HXLINE( 445)		if (!(this->readable)) {
HXLINE( 445)			return;
            		}
HXLINE( 448)		 ::lime::graphics::Image _hx_tmp = this->image;
HXDLIN( 448)		 ::lime::math::Rectangle _hx_tmp1 = rect->_hx___toLimeRectangle();
HXDLIN( 448)		_hx_tmp->colorTransform(_hx_tmp1,colorTransform->_hx___toLimeColorMatrix());
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,colorTransform,(void))

void BitmapData_obj::copyChannel( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,int sourceChannel,int destChannel){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_630_copyChannel)
HXLINE( 631)		if (!(this->readable)) {
HXLINE( 631)			return;
            		}
HXLINE( 634)		 ::lime::graphics::ImageChannel sourceChannel1;
HXDLIN( 634)		switch((int)(sourceChannel)){
            			case (int)1: {
HXLINE( 634)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 634)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 634)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 634)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 640)				return;
            			}
            		}
HXLINE( 643)		 ::lime::graphics::ImageChannel destChannel1;
HXDLIN( 643)		switch((int)(destChannel)){
            			case (int)1: {
HXLINE( 643)				destChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 643)				destChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 643)				destChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 643)				destChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 649)				return;
            			}
            		}
HXLINE( 652)		 ::lime::graphics::Image _hx_tmp = this->image;
HXDLIN( 652)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN( 652)		 ::lime::math::Rectangle _hx_tmp1 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 652)		_hx_tmp->copyChannel(sourceBitmapData1,_hx_tmp1,destPoint->_hx___toLimeVector2(),sourceChannel1,destChannel1);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,copyChannel,(void))

void BitmapData_obj::copyPixels( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::display::BitmapData alphaBitmapData, ::openfl::geom::Point alphaPoint,::hx::Null< bool >  __o_mergeAlpha){
            		bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_697_copyPixels)
HXLINE( 698)		bool _hx_tmp;
HXDLIN( 698)		if (this->readable) {
HXLINE( 698)			_hx_tmp = ::hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 698)			_hx_tmp = true;
            		}
HXDLIN( 698)		if (_hx_tmp) {
HXLINE( 698)			return;
            		}
HXLINE( 701)		if (::hx::IsNotNull( alphaPoint )) {
HXLINE( 703)			::openfl::display::BitmapData_obj::_hx___tempVector->x = alphaPoint->x;
HXLINE( 704)			::openfl::display::BitmapData_obj::_hx___tempVector->y = alphaPoint->y;
            		}
HXLINE( 707)		 ::lime::graphics::Image _hx_tmp1 = this->image;
HXDLIN( 707)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN( 707)		 ::lime::math::Rectangle _hx_tmp2 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 707)		 ::lime::math::Vector2 _hx_tmp3 = destPoint->_hx___toLimeVector2();
HXLINE( 708)		 ::lime::graphics::Image _hx_tmp4;
HXDLIN( 708)		if (::hx::IsNotNull( alphaBitmapData )) {
HXLINE( 708)			_hx_tmp4 = alphaBitmapData->image;
            		}
            		else {
HXLINE( 708)			_hx_tmp4 = null();
            		}
HXDLIN( 708)		 ::lime::math::Vector2 _hx_tmp5;
HXDLIN( 708)		if (::hx::IsNotNull( alphaPoint )) {
HXLINE( 708)			_hx_tmp5 = ::openfl::display::BitmapData_obj::_hx___tempVector;
            		}
            		else {
HXLINE( 708)			_hx_tmp5 = null();
            		}
HXLINE( 707)		_hx_tmp1->copyPixels(sourceBitmapData1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,mergeAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,copyPixels,(void))

void BitmapData_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_734_dispose)
HXLINE( 735)		this->image = null();
HXLINE( 737)		this->width = 0;
HXLINE( 738)		this->height = 0;
HXLINE( 739)		this->rect = null();
HXLINE( 741)		this->_hx___isValid = false;
HXLINE( 742)		this->readable = false;
HXLINE( 744)		this->_hx___surface = null();
HXLINE( 746)		this->_hx___vertexBuffer = null();
HXLINE( 747)		this->_hx___framebuffer = null();
HXLINE( 748)		this->_hx___framebufferContext = null();
HXLINE( 749)		this->_hx___texture = null();
HXLINE( 750)		this->_hx___textureContext = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,dispose,(void))

void BitmapData_obj::draw(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,::hx::Null< bool >  __o_smoothing){
            		bool smoothing = __o_smoothing.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_866_draw)
HXLINE( 867)		if (::hx::IsNull( source )) {
HXLINE( 867)			return;
            		}
HXLINE( 869)		::openfl::display::IBitmapDrawable_obj::_hx___update(source,false,true);
HXLINE( 871)		 ::openfl::geom::Matrix transform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 873)		transform->copyFrom(( ( ::openfl::geom::Matrix)(source->__Field(HX_("__renderTransform",16,b8,95,b1),::hx::paccDynamic)) ));
HXLINE( 874)		transform->invert();
HXLINE( 876)		if (::hx::IsNotNull( matrix )) {
HXLINE( 878)			transform->concat(matrix);
            		}
HXLINE( 881)		 ::openfl::geom::Matrix clipMatrix = null();
HXLINE( 883)		if (::hx::IsNotNull( clipRect )) {
HXLINE( 885)			clipMatrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 886)			clipMatrix->copyFrom(transform);
HXLINE( 887)			clipMatrix->invert();
            		}
HXLINE( 890)		 ::openfl::geom::ColorTransform _colorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 891)		_colorTransform->_hx___copyFrom(( ( ::openfl::geom::ColorTransform)(source->__Field(HX_("__worldColorTransform",5b,ce,21,a3),::hx::paccDynamic)) ));
HXLINE( 892)		_colorTransform->_hx___invert();
HXLINE( 894)		bool _hx_tmp;
HXDLIN( 894)		if (!(this->readable)) {
HXLINE( 894)			_hx_tmp = ::hx::IsNotNull( ::openfl::Lib_obj::get_current()->stage->context3D );
            		}
            		else {
HXLINE( 894)			_hx_tmp = false;
            		}
HXDLIN( 894)		if (_hx_tmp) {
HXLINE( 896)			if (::hx::IsNull( this->_hx___textureContext )) {
HXLINE( 899)				this->_hx___textureContext = ::lime::app::Application_obj::current->_hx___window->context;
            			}
HXLINE( 902)			if (::hx::IsNotNull( colorTransform )) {
HXLINE( 904)				_colorTransform->_hx___combine(colorTransform);
            			}
HXLINE( 907)			 ::openfl::display::OpenGLRenderer renderer =  ::openfl::display::OpenGLRenderer_obj::__alloc( HX_CTX ,::openfl::Lib_obj::get_current()->stage->context3D,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 908)			renderer->_hx___allowSmoothing = smoothing;
HXLINE( 909)			renderer->_hx___overrideBlendMode = blendMode;
HXLINE( 911)			renderer->_hx___worldTransform = transform;
HXLINE( 912)			renderer->_hx___worldAlpha = (( (Float)(1) ) / ( (Float)(source->__Field(HX_("__worldAlpha",cc,d2,d6,c5),::hx::paccDynamic)) ));
HXLINE( 913)			renderer->_hx___worldColorTransform = _colorTransform;
HXLINE( 915)			renderer->_hx___resize(this->width,this->height);
HXLINE( 917)			if (::hx::IsNotNull( clipRect )) {
HXLINE( 919)				renderer->_hx___pushMaskRect(clipRect,clipMatrix);
            			}
HXLINE( 922)			this->_hx___drawGL(source,renderer);
HXLINE( 924)			if (::hx::IsNotNull( clipRect )) {
HXLINE( 926)				renderer->_hx___popMaskRect();
HXLINE( 927)				::openfl::geom::Matrix_obj::_hx___pool->release(clipMatrix);
            			}
            		}
            		else {
HXLINE( 933)			if (::hx::IsNotNull( colorTransform )) {
HXLINE( 935)				 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 936)				 ::openfl::geom::Matrix boundsMatrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 938)				::openfl::display::IBitmapDrawable_obj::_hx___getBounds(source,bounds,boundsMatrix);
HXLINE( 940)				int width = ::Math_obj::ceil(bounds->width);
HXLINE( 941)				int height = ::Math_obj::ceil(bounds->height);
HXLINE( 943)				boundsMatrix->tx = -(bounds->x);
HXLINE( 944)				boundsMatrix->ty = -(bounds->y);
HXLINE( 946)				 ::openfl::display::BitmapData copy =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,true,0);
HXLINE( 947)				copy->draw(source,boundsMatrix,null(),null(),null(),null());
HXLINE( 949)				copy->colorTransform(copy->rect,colorTransform);
HXLINE( 950)				copy->_hx___renderTransform->identity();
HXLINE( 951)				copy->_hx___renderTransform->tx = bounds->x;
HXLINE( 952)				copy->_hx___renderTransform->ty = bounds->y;
HXLINE( 953)				copy->_hx___renderTransform->concat(( ( ::openfl::geom::Matrix)(source->__Field(HX_("__renderTransform",16,b8,95,b1),::hx::paccDynamic)) ));
HXLINE( 954)				copy->_hx___worldAlpha = ( (Float)(source->__Field(HX_("__worldAlpha",cc,d2,d6,c5),::hx::paccDynamic)) );
HXLINE( 955)				copy->_hx___worldColorTransform->_hx___copyFrom(( ( ::openfl::geom::ColorTransform)(source->__Field(HX_("__worldColorTransform",5b,ce,21,a3),::hx::paccDynamic)) ));
HXLINE( 956)				source = copy;
HXLINE( 958)				::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
HXLINE( 959)				::openfl::geom::Matrix_obj::_hx___pool->release(boundsMatrix);
            			}
HXLINE( 966)			 ::openfl::display::CairoRenderer renderer =  ::openfl::display::CairoRenderer_obj::__alloc( HX_CTX , ::lime::graphics::cairo::Cairo_obj::__alloc( HX_CTX ,this->getSurface()));
HXLINE( 969)			renderer->_hx___allowSmoothing = smoothing;
HXLINE( 970)			renderer->_hx___overrideBlendMode = blendMode;
HXLINE( 972)			renderer->_hx___worldTransform = transform;
HXLINE( 973)			renderer->_hx___worldAlpha = (( (Float)(1) ) / ( (Float)(source->__Field(HX_("__worldAlpha",cc,d2,d6,c5),::hx::paccDynamic)) ));
HXLINE( 974)			renderer->_hx___worldColorTransform = _colorTransform;
HXLINE( 976)			if (::hx::IsNotNull( clipRect )) {
HXLINE( 978)				renderer->_hx___pushMaskRect(clipRect,clipMatrix);
            			}
HXLINE( 984)			this->_hx___drawCairo(source,renderer);
HXLINE( 987)			if (::hx::IsNotNull( clipRect )) {
HXLINE( 989)				renderer->_hx___popMaskRect();
HXLINE( 990)				::openfl::geom::Matrix_obj::_hx___pool->release(clipMatrix);
            			}
            		}
HXLINE( 995)		::openfl::geom::Matrix_obj::_hx___pool->release(transform);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,draw,(void))

void BitmapData_obj::fillRect( ::openfl::geom::Rectangle rect,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1163_fillRect)
HXDLIN(1163)		this->_hx___fillRect(rect,color,true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fillRect,(void))

 ::openfl::display3D::IndexBuffer3D BitmapData_obj::getIndexBuffer( ::openfl::display3D::Context3D context, ::openfl::geom::Rectangle scale9Grid){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1369_getIndexBuffer)
HXLINE(1370)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(1372)		bool _hx_tmp;
HXDLIN(1372)		bool _hx_tmp1;
HXDLIN(1372)		bool _hx_tmp2;
HXDLIN(1372)		if (::hx::IsNotNull( this->_hx___indexBuffer )) {
HXLINE(1372)			_hx_tmp2 = ::hx::IsNotEq( this->_hx___indexBufferContext,context->_hx___context );
            		}
            		else {
HXLINE(1372)			_hx_tmp2 = true;
            		}
HXDLIN(1372)		if (!(_hx_tmp2)) {
HXLINE(1374)			if (::hx::IsNotNull( scale9Grid )) {
HXLINE(1372)				_hx_tmp1 = ::hx::IsNull( this->_hx___indexBufferGrid );
            			}
            			else {
HXLINE(1372)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE(1372)			_hx_tmp1 = true;
            		}
HXDLIN(1372)		if (!(_hx_tmp1)) {
HXLINE(1375)			if (::hx::IsNotNull( this->_hx___indexBufferGrid )) {
HXLINE(1372)				_hx_tmp = !(this->_hx___indexBufferGrid->equals(scale9Grid));
            			}
            			else {
HXLINE(1372)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1372)			_hx_tmp = true;
            		}
HXDLIN(1372)		if (_hx_tmp) {
HXLINE(1381)			this->_hx___indexBufferContext = context->_hx___context;
HXLINE(1382)			this->_hx___indexBuffer = null();
HXLINE(1384)			if (::hx::IsNotNull( scale9Grid )) {
HXLINE(1386)				if (::hx::IsNull( this->_hx___indexBufferGrid )) {
HXLINE(1386)					this->_hx___indexBufferGrid =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            				}
HXLINE(1387)				this->_hx___indexBufferGrid->copyFrom(scale9Grid);
HXLINE(1389)				Float centerX = scale9Grid->width;
HXLINE(1390)				Float centerY = scale9Grid->height;
HXLINE(1391)				bool _hx_tmp;
HXDLIN(1391)				if ((centerX != 0)) {
HXLINE(1391)					_hx_tmp = (centerY != 0);
            				}
            				else {
HXLINE(1391)					_hx_tmp = false;
            				}
HXDLIN(1391)				if (_hx_tmp) {
HXLINE(1393)					 ::haxe::io::Bytes buffer = null();
HXDLIN(1393)					::cpp::VirtualArray array = null();
HXDLIN(1393)					 ::openfl::_Vector::IntVector vector = null();
HXDLIN(1393)					 ::lime::utils::ArrayBufferView view = null();
HXDLIN(1393)					 ::Dynamic len = null();
HXDLIN(1393)					 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,54,6);
HXDLIN(1393)					this->_hx___indexBufferData = this1;
HXLINE(1404)					{
HXLINE(1404)						 ::lime::utils::ArrayBufferView this2 = this->_hx___indexBufferData;
HXDLIN(1404)						 ::__hxcpp_memory_set_ui16(this2->buffer->b,this2->byteOffset,0);
            					}
HXLINE(1405)					{
HXLINE(1405)						 ::lime::utils::ArrayBufferView this3 = this->_hx___indexBufferData;
HXDLIN(1405)						 ::__hxcpp_memory_set_ui16(this3->buffer->b,(this3->byteOffset + 2),1);
            					}
HXLINE(1406)					{
HXLINE(1406)						 ::lime::utils::ArrayBufferView this4 = this->_hx___indexBufferData;
HXDLIN(1406)						 ::__hxcpp_memory_set_ui16(this4->buffer->b,(this4->byteOffset + 4),2);
            					}
HXLINE(1407)					{
HXLINE(1407)						 ::lime::utils::ArrayBufferView this5 = this->_hx___indexBufferData;
HXDLIN(1407)						 ::__hxcpp_memory_set_ui16(this5->buffer->b,(this5->byteOffset + 6),2);
            					}
HXLINE(1408)					{
HXLINE(1408)						 ::lime::utils::ArrayBufferView this6 = this->_hx___indexBufferData;
HXDLIN(1408)						 ::__hxcpp_memory_set_ui16(this6->buffer->b,(this6->byteOffset + 8),1);
            					}
HXLINE(1409)					{
HXLINE(1409)						 ::lime::utils::ArrayBufferView this7 = this->_hx___indexBufferData;
HXDLIN(1409)						 ::__hxcpp_memory_set_ui16(this7->buffer->b,(this7->byteOffset + 10),3);
            					}
HXLINE(1412)					{
HXLINE(1412)						 ::lime::utils::ArrayBufferView this8 = this->_hx___indexBufferData;
HXDLIN(1412)						 ::__hxcpp_memory_set_ui16(this8->buffer->b,(this8->byteOffset + 12),4);
            					}
HXLINE(1413)					{
HXLINE(1413)						 ::lime::utils::ArrayBufferView this9 = this->_hx___indexBufferData;
HXDLIN(1413)						 ::__hxcpp_memory_set_ui16(this9->buffer->b,(this9->byteOffset + 14),0);
            					}
HXLINE(1414)					{
HXLINE(1414)						 ::lime::utils::ArrayBufferView this10 = this->_hx___indexBufferData;
HXDLIN(1414)						 ::__hxcpp_memory_set_ui16(this10->buffer->b,(this10->byteOffset + 16),5);
            					}
HXLINE(1415)					{
HXLINE(1415)						 ::lime::utils::ArrayBufferView this11 = this->_hx___indexBufferData;
HXDLIN(1415)						 ::__hxcpp_memory_set_ui16(this11->buffer->b,(this11->byteOffset + 18),5);
            					}
HXLINE(1416)					{
HXLINE(1416)						 ::lime::utils::ArrayBufferView this12 = this->_hx___indexBufferData;
HXDLIN(1416)						 ::__hxcpp_memory_set_ui16(this12->buffer->b,(this12->byteOffset + 20),0);
            					}
HXLINE(1417)					{
HXLINE(1417)						 ::lime::utils::ArrayBufferView this13 = this->_hx___indexBufferData;
HXDLIN(1417)						 ::__hxcpp_memory_set_ui16(this13->buffer->b,(this13->byteOffset + 22),2);
            					}
HXLINE(1420)					{
HXLINE(1420)						 ::lime::utils::ArrayBufferView this14 = this->_hx___indexBufferData;
HXDLIN(1420)						 ::__hxcpp_memory_set_ui16(this14->buffer->b,(this14->byteOffset + 24),6);
            					}
HXLINE(1421)					{
HXLINE(1421)						 ::lime::utils::ArrayBufferView this15 = this->_hx___indexBufferData;
HXDLIN(1421)						 ::__hxcpp_memory_set_ui16(this15->buffer->b,(this15->byteOffset + 26),4);
            					}
HXLINE(1422)					{
HXLINE(1422)						 ::lime::utils::ArrayBufferView this16 = this->_hx___indexBufferData;
HXDLIN(1422)						 ::__hxcpp_memory_set_ui16(this16->buffer->b,(this16->byteOffset + 28),7);
            					}
HXLINE(1423)					{
HXLINE(1423)						 ::lime::utils::ArrayBufferView this17 = this->_hx___indexBufferData;
HXDLIN(1423)						 ::__hxcpp_memory_set_ui16(this17->buffer->b,(this17->byteOffset + 30),7);
            					}
HXLINE(1424)					{
HXLINE(1424)						 ::lime::utils::ArrayBufferView this18 = this->_hx___indexBufferData;
HXDLIN(1424)						 ::__hxcpp_memory_set_ui16(this18->buffer->b,(this18->byteOffset + 32),4);
            					}
HXLINE(1425)					{
HXLINE(1425)						 ::lime::utils::ArrayBufferView this19 = this->_hx___indexBufferData;
HXDLIN(1425)						 ::__hxcpp_memory_set_ui16(this19->buffer->b,(this19->byteOffset + 34),5);
            					}
HXLINE(1428)					{
HXLINE(1428)						 ::lime::utils::ArrayBufferView this20 = this->_hx___indexBufferData;
HXDLIN(1428)						 ::__hxcpp_memory_set_ui16(this20->buffer->b,(this20->byteOffset + 36),8);
            					}
HXLINE(1429)					{
HXLINE(1429)						 ::lime::utils::ArrayBufferView this21 = this->_hx___indexBufferData;
HXDLIN(1429)						 ::__hxcpp_memory_set_ui16(this21->buffer->b,(this21->byteOffset + 38),9);
            					}
HXLINE(1430)					{
HXLINE(1430)						 ::lime::utils::ArrayBufferView this22 = this->_hx___indexBufferData;
HXDLIN(1430)						 ::__hxcpp_memory_set_ui16(this22->buffer->b,(this22->byteOffset + 40),0);
            					}
HXLINE(1431)					{
HXLINE(1431)						 ::lime::utils::ArrayBufferView this23 = this->_hx___indexBufferData;
HXDLIN(1431)						 ::__hxcpp_memory_set_ui16(this23->buffer->b,(this23->byteOffset + 42),0);
            					}
HXLINE(1432)					{
HXLINE(1432)						 ::lime::utils::ArrayBufferView this24 = this->_hx___indexBufferData;
HXDLIN(1432)						 ::__hxcpp_memory_set_ui16(this24->buffer->b,(this24->byteOffset + 44),9);
            					}
HXLINE(1433)					{
HXLINE(1433)						 ::lime::utils::ArrayBufferView this25 = this->_hx___indexBufferData;
HXDLIN(1433)						 ::__hxcpp_memory_set_ui16(this25->buffer->b,(this25->byteOffset + 46),1);
            					}
HXLINE(1436)					{
HXLINE(1436)						 ::lime::utils::ArrayBufferView this26 = this->_hx___indexBufferData;
HXDLIN(1436)						 ::__hxcpp_memory_set_ui16(this26->buffer->b,(this26->byteOffset + 48),10);
            					}
HXLINE(1437)					{
HXLINE(1437)						 ::lime::utils::ArrayBufferView this27 = this->_hx___indexBufferData;
HXDLIN(1437)						 ::__hxcpp_memory_set_ui16(this27->buffer->b,(this27->byteOffset + 50),8);
            					}
HXLINE(1438)					{
HXLINE(1438)						 ::lime::utils::ArrayBufferView this28 = this->_hx___indexBufferData;
HXDLIN(1438)						 ::__hxcpp_memory_set_ui16(this28->buffer->b,(this28->byteOffset + 52),4);
            					}
HXLINE(1439)					{
HXLINE(1439)						 ::lime::utils::ArrayBufferView this29 = this->_hx___indexBufferData;
HXDLIN(1439)						 ::__hxcpp_memory_set_ui16(this29->buffer->b,(this29->byteOffset + 54),4);
            					}
HXLINE(1440)					{
HXLINE(1440)						 ::lime::utils::ArrayBufferView this30 = this->_hx___indexBufferData;
HXDLIN(1440)						 ::__hxcpp_memory_set_ui16(this30->buffer->b,(this30->byteOffset + 56),8);
            					}
HXLINE(1441)					{
HXLINE(1441)						 ::lime::utils::ArrayBufferView this31 = this->_hx___indexBufferData;
HXDLIN(1441)						 ::__hxcpp_memory_set_ui16(this31->buffer->b,(this31->byteOffset + 58),0);
            					}
HXLINE(1444)					{
HXLINE(1444)						 ::lime::utils::ArrayBufferView this32 = this->_hx___indexBufferData;
HXDLIN(1444)						 ::__hxcpp_memory_set_ui16(this32->buffer->b,(this32->byteOffset + 60),11);
            					}
HXLINE(1445)					{
HXLINE(1445)						 ::lime::utils::ArrayBufferView this33 = this->_hx___indexBufferData;
HXDLIN(1445)						 ::__hxcpp_memory_set_ui16(this33->buffer->b,(this33->byteOffset + 62),10);
            					}
HXLINE(1446)					{
HXLINE(1446)						 ::lime::utils::ArrayBufferView this34 = this->_hx___indexBufferData;
HXDLIN(1446)						 ::__hxcpp_memory_set_ui16(this34->buffer->b,(this34->byteOffset + 64),6);
            					}
HXLINE(1447)					{
HXLINE(1447)						 ::lime::utils::ArrayBufferView this35 = this->_hx___indexBufferData;
HXDLIN(1447)						 ::__hxcpp_memory_set_ui16(this35->buffer->b,(this35->byteOffset + 66),6);
            					}
HXLINE(1448)					{
HXLINE(1448)						 ::lime::utils::ArrayBufferView this36 = this->_hx___indexBufferData;
HXDLIN(1448)						 ::__hxcpp_memory_set_ui16(this36->buffer->b,(this36->byteOffset + 68),10);
            					}
HXLINE(1449)					{
HXLINE(1449)						 ::lime::utils::ArrayBufferView this37 = this->_hx___indexBufferData;
HXDLIN(1449)						 ::__hxcpp_memory_set_ui16(this37->buffer->b,(this37->byteOffset + 70),4);
            					}
HXLINE(1452)					{
HXLINE(1452)						 ::lime::utils::ArrayBufferView this38 = this->_hx___indexBufferData;
HXDLIN(1452)						 ::__hxcpp_memory_set_ui16(this38->buffer->b,(this38->byteOffset + 72),12);
            					}
HXLINE(1453)					{
HXLINE(1453)						 ::lime::utils::ArrayBufferView this39 = this->_hx___indexBufferData;
HXDLIN(1453)						 ::__hxcpp_memory_set_ui16(this39->buffer->b,(this39->byteOffset + 74),13);
            					}
HXLINE(1454)					{
HXLINE(1454)						 ::lime::utils::ArrayBufferView this40 = this->_hx___indexBufferData;
HXDLIN(1454)						 ::__hxcpp_memory_set_ui16(this40->buffer->b,(this40->byteOffset + 76),8);
            					}
HXLINE(1455)					{
HXLINE(1455)						 ::lime::utils::ArrayBufferView this41 = this->_hx___indexBufferData;
HXDLIN(1455)						 ::__hxcpp_memory_set_ui16(this41->buffer->b,(this41->byteOffset + 78),8);
            					}
HXLINE(1456)					{
HXLINE(1456)						 ::lime::utils::ArrayBufferView this42 = this->_hx___indexBufferData;
HXDLIN(1456)						 ::__hxcpp_memory_set_ui16(this42->buffer->b,(this42->byteOffset + 80),13);
            					}
HXLINE(1457)					{
HXLINE(1457)						 ::lime::utils::ArrayBufferView this43 = this->_hx___indexBufferData;
HXDLIN(1457)						 ::__hxcpp_memory_set_ui16(this43->buffer->b,(this43->byteOffset + 82),9);
            					}
HXLINE(1460)					{
HXLINE(1460)						 ::lime::utils::ArrayBufferView this44 = this->_hx___indexBufferData;
HXDLIN(1460)						 ::__hxcpp_memory_set_ui16(this44->buffer->b,(this44->byteOffset + 84),14);
            					}
HXLINE(1461)					{
HXLINE(1461)						 ::lime::utils::ArrayBufferView this45 = this->_hx___indexBufferData;
HXDLIN(1461)						 ::__hxcpp_memory_set_ui16(this45->buffer->b,(this45->byteOffset + 86),12);
            					}
HXLINE(1462)					{
HXLINE(1462)						 ::lime::utils::ArrayBufferView this46 = this->_hx___indexBufferData;
HXDLIN(1462)						 ::__hxcpp_memory_set_ui16(this46->buffer->b,(this46->byteOffset + 88),10);
            					}
HXLINE(1463)					{
HXLINE(1463)						 ::lime::utils::ArrayBufferView this47 = this->_hx___indexBufferData;
HXDLIN(1463)						 ::__hxcpp_memory_set_ui16(this47->buffer->b,(this47->byteOffset + 90),10);
            					}
HXLINE(1464)					{
HXLINE(1464)						 ::lime::utils::ArrayBufferView this48 = this->_hx___indexBufferData;
HXDLIN(1464)						 ::__hxcpp_memory_set_ui16(this48->buffer->b,(this48->byteOffset + 92),12);
            					}
HXLINE(1465)					{
HXLINE(1465)						 ::lime::utils::ArrayBufferView this49 = this->_hx___indexBufferData;
HXDLIN(1465)						 ::__hxcpp_memory_set_ui16(this49->buffer->b,(this49->byteOffset + 94),8);
            					}
HXLINE(1468)					{
HXLINE(1468)						 ::lime::utils::ArrayBufferView this50 = this->_hx___indexBufferData;
HXDLIN(1468)						 ::__hxcpp_memory_set_ui16(this50->buffer->b,(this50->byteOffset + 96),15);
            					}
HXLINE(1469)					{
HXLINE(1469)						 ::lime::utils::ArrayBufferView this51 = this->_hx___indexBufferData;
HXDLIN(1469)						 ::__hxcpp_memory_set_ui16(this51->buffer->b,(this51->byteOffset + 98),14);
            					}
HXLINE(1470)					{
HXLINE(1470)						 ::lime::utils::ArrayBufferView this52 = this->_hx___indexBufferData;
HXDLIN(1470)						 ::__hxcpp_memory_set_ui16(this52->buffer->b,(this52->byteOffset + 100),11);
            					}
HXLINE(1471)					{
HXLINE(1471)						 ::lime::utils::ArrayBufferView this53 = this->_hx___indexBufferData;
HXDLIN(1471)						 ::__hxcpp_memory_set_ui16(this53->buffer->b,(this53->byteOffset + 102),11);
            					}
HXLINE(1472)					{
HXLINE(1472)						 ::lime::utils::ArrayBufferView this54 = this->_hx___indexBufferData;
HXDLIN(1472)						 ::__hxcpp_memory_set_ui16(this54->buffer->b,(this54->byteOffset + 104),14);
            					}
HXLINE(1473)					{
HXLINE(1473)						 ::lime::utils::ArrayBufferView this55 = this->_hx___indexBufferData;
HXDLIN(1473)						 ::__hxcpp_memory_set_ui16(this55->buffer->b,(this55->byteOffset + 106),10);
            					}
HXLINE(1475)					this->_hx___indexBuffer = context->createIndexBuffer(54,null());
            				}
            				else {
HXLINE(1477)					bool _hx_tmp;
HXDLIN(1477)					if ((centerX == 0)) {
HXLINE(1477)						_hx_tmp = (centerY != 0);
            					}
            					else {
HXLINE(1477)						_hx_tmp = false;
            					}
HXDLIN(1477)					if (_hx_tmp) {
HXLINE(1479)						 ::haxe::io::Bytes buffer = null();
HXDLIN(1479)						::cpp::VirtualArray array = null();
HXDLIN(1479)						 ::openfl::_Vector::IntVector vector = null();
HXDLIN(1479)						 ::lime::utils::ArrayBufferView view = null();
HXDLIN(1479)						 ::Dynamic len = null();
HXDLIN(1479)						 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,18,6);
HXDLIN(1479)						this->_hx___indexBufferData = this1;
HXLINE(1490)						{
HXLINE(1490)							 ::lime::utils::ArrayBufferView this2 = this->_hx___indexBufferData;
HXDLIN(1490)							 ::__hxcpp_memory_set_ui16(this2->buffer->b,this2->byteOffset,0);
            						}
HXLINE(1491)						{
HXLINE(1491)							 ::lime::utils::ArrayBufferView this3 = this->_hx___indexBufferData;
HXDLIN(1491)							 ::__hxcpp_memory_set_ui16(this3->buffer->b,(this3->byteOffset + 2),1);
            						}
HXLINE(1492)						{
HXLINE(1492)							 ::lime::utils::ArrayBufferView this4 = this->_hx___indexBufferData;
HXDLIN(1492)							 ::__hxcpp_memory_set_ui16(this4->buffer->b,(this4->byteOffset + 4),2);
            						}
HXLINE(1493)						{
HXLINE(1493)							 ::lime::utils::ArrayBufferView this5 = this->_hx___indexBufferData;
HXDLIN(1493)							 ::__hxcpp_memory_set_ui16(this5->buffer->b,(this5->byteOffset + 6),2);
            						}
HXLINE(1494)						{
HXLINE(1494)							 ::lime::utils::ArrayBufferView this6 = this->_hx___indexBufferData;
HXDLIN(1494)							 ::__hxcpp_memory_set_ui16(this6->buffer->b,(this6->byteOffset + 8),1);
            						}
HXLINE(1495)						{
HXLINE(1495)							 ::lime::utils::ArrayBufferView this7 = this->_hx___indexBufferData;
HXDLIN(1495)							 ::__hxcpp_memory_set_ui16(this7->buffer->b,(this7->byteOffset + 10),3);
            						}
HXLINE(1498)						{
HXLINE(1498)							 ::lime::utils::ArrayBufferView this8 = this->_hx___indexBufferData;
HXDLIN(1498)							 ::__hxcpp_memory_set_ui16(this8->buffer->b,(this8->byteOffset + 12),4);
            						}
HXLINE(1499)						{
HXLINE(1499)							 ::lime::utils::ArrayBufferView this9 = this->_hx___indexBufferData;
HXDLIN(1499)							 ::__hxcpp_memory_set_ui16(this9->buffer->b,(this9->byteOffset + 14),5);
            						}
HXLINE(1500)						{
HXLINE(1500)							 ::lime::utils::ArrayBufferView this10 = this->_hx___indexBufferData;
HXDLIN(1500)							 ::__hxcpp_memory_set_ui16(this10->buffer->b,(this10->byteOffset + 16),0);
            						}
HXLINE(1501)						{
HXLINE(1501)							 ::lime::utils::ArrayBufferView this11 = this->_hx___indexBufferData;
HXDLIN(1501)							 ::__hxcpp_memory_set_ui16(this11->buffer->b,(this11->byteOffset + 18),0);
            						}
HXLINE(1502)						{
HXLINE(1502)							 ::lime::utils::ArrayBufferView this12 = this->_hx___indexBufferData;
HXDLIN(1502)							 ::__hxcpp_memory_set_ui16(this12->buffer->b,(this12->byteOffset + 20),5);
            						}
HXLINE(1503)						{
HXLINE(1503)							 ::lime::utils::ArrayBufferView this13 = this->_hx___indexBufferData;
HXDLIN(1503)							 ::__hxcpp_memory_set_ui16(this13->buffer->b,(this13->byteOffset + 22),1);
            						}
HXLINE(1506)						{
HXLINE(1506)							 ::lime::utils::ArrayBufferView this14 = this->_hx___indexBufferData;
HXDLIN(1506)							 ::__hxcpp_memory_set_ui16(this14->buffer->b,(this14->byteOffset + 24),6);
            						}
HXLINE(1507)						{
HXLINE(1507)							 ::lime::utils::ArrayBufferView this15 = this->_hx___indexBufferData;
HXDLIN(1507)							 ::__hxcpp_memory_set_ui16(this15->buffer->b,(this15->byteOffset + 26),7);
            						}
HXLINE(1508)						{
HXLINE(1508)							 ::lime::utils::ArrayBufferView this16 = this->_hx___indexBufferData;
HXDLIN(1508)							 ::__hxcpp_memory_set_ui16(this16->buffer->b,(this16->byteOffset + 28),4);
            						}
HXLINE(1509)						{
HXLINE(1509)							 ::lime::utils::ArrayBufferView this17 = this->_hx___indexBufferData;
HXDLIN(1509)							 ::__hxcpp_memory_set_ui16(this17->buffer->b,(this17->byteOffset + 30),4);
            						}
HXLINE(1510)						{
HXLINE(1510)							 ::lime::utils::ArrayBufferView this18 = this->_hx___indexBufferData;
HXDLIN(1510)							 ::__hxcpp_memory_set_ui16(this18->buffer->b,(this18->byteOffset + 32),7);
            						}
HXLINE(1511)						{
HXLINE(1511)							 ::lime::utils::ArrayBufferView this19 = this->_hx___indexBufferData;
HXDLIN(1511)							 ::__hxcpp_memory_set_ui16(this19->buffer->b,(this19->byteOffset + 34),5);
            						}
HXLINE(1513)						this->_hx___indexBuffer = context->createIndexBuffer(18,null());
            					}
            					else {
HXLINE(1515)						bool _hx_tmp;
HXDLIN(1515)						if ((centerX != 0)) {
HXLINE(1515)							_hx_tmp = (centerY == 0);
            						}
            						else {
HXLINE(1515)							_hx_tmp = false;
            						}
HXDLIN(1515)						if (_hx_tmp) {
HXLINE(1517)							 ::haxe::io::Bytes buffer = null();
HXDLIN(1517)							::cpp::VirtualArray array = null();
HXDLIN(1517)							 ::openfl::_Vector::IntVector vector = null();
HXDLIN(1517)							 ::lime::utils::ArrayBufferView view = null();
HXDLIN(1517)							 ::Dynamic len = null();
HXDLIN(1517)							 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,18,6);
HXDLIN(1517)							this->_hx___indexBufferData = this1;
HXLINE(1524)							{
HXLINE(1524)								 ::lime::utils::ArrayBufferView this2 = this->_hx___indexBufferData;
HXDLIN(1524)								 ::__hxcpp_memory_set_ui16(this2->buffer->b,this2->byteOffset,0);
            							}
HXLINE(1525)							{
HXLINE(1525)								 ::lime::utils::ArrayBufferView this3 = this->_hx___indexBufferData;
HXDLIN(1525)								 ::__hxcpp_memory_set_ui16(this3->buffer->b,(this3->byteOffset + 2),1);
            							}
HXLINE(1526)							{
HXLINE(1526)								 ::lime::utils::ArrayBufferView this4 = this->_hx___indexBufferData;
HXDLIN(1526)								 ::__hxcpp_memory_set_ui16(this4->buffer->b,(this4->byteOffset + 4),2);
            							}
HXLINE(1527)							{
HXLINE(1527)								 ::lime::utils::ArrayBufferView this5 = this->_hx___indexBufferData;
HXDLIN(1527)								 ::__hxcpp_memory_set_ui16(this5->buffer->b,(this5->byteOffset + 6),2);
            							}
HXLINE(1528)							{
HXLINE(1528)								 ::lime::utils::ArrayBufferView this6 = this->_hx___indexBufferData;
HXDLIN(1528)								 ::__hxcpp_memory_set_ui16(this6->buffer->b,(this6->byteOffset + 8),1);
            							}
HXLINE(1529)							{
HXLINE(1529)								 ::lime::utils::ArrayBufferView this7 = this->_hx___indexBufferData;
HXDLIN(1529)								 ::__hxcpp_memory_set_ui16(this7->buffer->b,(this7->byteOffset + 10),3);
            							}
HXLINE(1532)							{
HXLINE(1532)								 ::lime::utils::ArrayBufferView this8 = this->_hx___indexBufferData;
HXDLIN(1532)								 ::__hxcpp_memory_set_ui16(this8->buffer->b,(this8->byteOffset + 12),4);
            							}
HXLINE(1533)							{
HXLINE(1533)								 ::lime::utils::ArrayBufferView this9 = this->_hx___indexBufferData;
HXDLIN(1533)								 ::__hxcpp_memory_set_ui16(this9->buffer->b,(this9->byteOffset + 14),0);
            							}
HXLINE(1534)							{
HXLINE(1534)								 ::lime::utils::ArrayBufferView this10 = this->_hx___indexBufferData;
HXDLIN(1534)								 ::__hxcpp_memory_set_ui16(this10->buffer->b,(this10->byteOffset + 16),5);
            							}
HXLINE(1535)							{
HXLINE(1535)								 ::lime::utils::ArrayBufferView this11 = this->_hx___indexBufferData;
HXDLIN(1535)								 ::__hxcpp_memory_set_ui16(this11->buffer->b,(this11->byteOffset + 18),5);
            							}
HXLINE(1536)							{
HXLINE(1536)								 ::lime::utils::ArrayBufferView this12 = this->_hx___indexBufferData;
HXDLIN(1536)								 ::__hxcpp_memory_set_ui16(this12->buffer->b,(this12->byteOffset + 20),0);
            							}
HXLINE(1537)							{
HXLINE(1537)								 ::lime::utils::ArrayBufferView this13 = this->_hx___indexBufferData;
HXDLIN(1537)								 ::__hxcpp_memory_set_ui16(this13->buffer->b,(this13->byteOffset + 22),2);
            							}
HXLINE(1540)							{
HXLINE(1540)								 ::lime::utils::ArrayBufferView this14 = this->_hx___indexBufferData;
HXDLIN(1540)								 ::__hxcpp_memory_set_ui16(this14->buffer->b,(this14->byteOffset + 24),6);
            							}
HXLINE(1541)							{
HXLINE(1541)								 ::lime::utils::ArrayBufferView this15 = this->_hx___indexBufferData;
HXDLIN(1541)								 ::__hxcpp_memory_set_ui16(this15->buffer->b,(this15->byteOffset + 26),4);
            							}
HXLINE(1542)							{
HXLINE(1542)								 ::lime::utils::ArrayBufferView this16 = this->_hx___indexBufferData;
HXDLIN(1542)								 ::__hxcpp_memory_set_ui16(this16->buffer->b,(this16->byteOffset + 28),7);
            							}
HXLINE(1543)							{
HXLINE(1543)								 ::lime::utils::ArrayBufferView this17 = this->_hx___indexBufferData;
HXDLIN(1543)								 ::__hxcpp_memory_set_ui16(this17->buffer->b,(this17->byteOffset + 30),7);
            							}
HXLINE(1544)							{
HXLINE(1544)								 ::lime::utils::ArrayBufferView this18 = this->_hx___indexBufferData;
HXDLIN(1544)								 ::__hxcpp_memory_set_ui16(this18->buffer->b,(this18->byteOffset + 32),4);
            							}
HXLINE(1545)							{
HXLINE(1545)								 ::lime::utils::ArrayBufferView this19 = this->_hx___indexBufferData;
HXDLIN(1545)								 ::__hxcpp_memory_set_ui16(this19->buffer->b,(this19->byteOffset + 34),5);
            							}
HXLINE(1547)							this->_hx___indexBuffer = context->createIndexBuffer(18,null());
            						}
            					}
            				}
            			}
            			else {
HXLINE(1552)				this->_hx___indexBufferGrid = null();
            			}
HXLINE(1555)			if (::hx::IsNull( this->_hx___indexBuffer )) {
HXLINE(1557)				 ::haxe::io::Bytes buffer = null();
HXDLIN(1557)				::cpp::VirtualArray array = null();
HXDLIN(1557)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(1557)				 ::lime::utils::ArrayBufferView view = null();
HXDLIN(1557)				 ::Dynamic len = null();
HXDLIN(1557)				 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,6,6);
HXDLIN(1557)				this->_hx___indexBufferData = this1;
HXLINE(1558)				{
HXLINE(1558)					 ::lime::utils::ArrayBufferView this2 = this->_hx___indexBufferData;
HXDLIN(1558)					 ::__hxcpp_memory_set_ui16(this2->buffer->b,this2->byteOffset,0);
            				}
HXLINE(1559)				{
HXLINE(1559)					 ::lime::utils::ArrayBufferView this3 = this->_hx___indexBufferData;
HXDLIN(1559)					 ::__hxcpp_memory_set_ui16(this3->buffer->b,(this3->byteOffset + 2),1);
            				}
HXLINE(1560)				{
HXLINE(1560)					 ::lime::utils::ArrayBufferView this4 = this->_hx___indexBufferData;
HXDLIN(1560)					 ::__hxcpp_memory_set_ui16(this4->buffer->b,(this4->byteOffset + 4),2);
            				}
HXLINE(1561)				{
HXLINE(1561)					 ::lime::utils::ArrayBufferView this5 = this->_hx___indexBufferData;
HXDLIN(1561)					 ::__hxcpp_memory_set_ui16(this5->buffer->b,(this5->byteOffset + 6),2);
            				}
HXLINE(1562)				{
HXLINE(1562)					 ::lime::utils::ArrayBufferView this6 = this->_hx___indexBufferData;
HXDLIN(1562)					 ::__hxcpp_memory_set_ui16(this6->buffer->b,(this6->byteOffset + 8),1);
            				}
HXLINE(1563)				{
HXLINE(1563)					 ::lime::utils::ArrayBufferView this7 = this->_hx___indexBufferData;
HXDLIN(1563)					 ::__hxcpp_memory_set_ui16(this7->buffer->b,(this7->byteOffset + 10),3);
            				}
HXLINE(1564)				this->_hx___indexBuffer = context->createIndexBuffer(6,null());
            			}
HXLINE(1567)			this->_hx___indexBuffer->uploadFromTypedArray(this->_hx___indexBufferData,null());
            		}
HXLINE(1571)		return this->_hx___indexBuffer;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getIndexBuffer,return )

 ::openfl::display3D::VertexBuffer3D BitmapData_obj::getVertexBuffer( ::openfl::display3D::Context3D context, ::openfl::geom::Rectangle scale9Grid, ::openfl::display::DisplayObject targetObject){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1583_getVertexBuffer)
HXLINE(1584)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(1589)		bool _hx_tmp;
HXDLIN(1589)		bool _hx_tmp1;
HXDLIN(1589)		bool _hx_tmp2;
HXDLIN(1589)		bool _hx_tmp3;
HXDLIN(1589)		if (::hx::IsNotNull( this->_hx___vertexBuffer )) {
HXLINE(1589)			_hx_tmp3 = ::hx::IsNotEq( this->_hx___vertexBufferContext,context->_hx___context );
            		}
            		else {
HXLINE(1589)			_hx_tmp3 = true;
            		}
HXDLIN(1589)		if (!(_hx_tmp3)) {
HXLINE(1591)			if (::hx::IsNotNull( scale9Grid )) {
HXLINE(1589)				_hx_tmp2 = ::hx::IsNull( this->_hx___vertexBufferGrid );
            			}
            			else {
HXLINE(1589)				_hx_tmp2 = false;
            			}
            		}
            		else {
HXLINE(1589)			_hx_tmp2 = true;
            		}
HXDLIN(1589)		if (!(_hx_tmp2)) {
HXLINE(1592)			if (::hx::IsNotNull( this->_hx___vertexBufferGrid )) {
HXLINE(1589)				_hx_tmp1 = !(this->_hx___vertexBufferGrid->equals(scale9Grid));
            			}
            			else {
HXLINE(1589)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE(1589)			_hx_tmp1 = true;
            		}
HXDLIN(1589)		if (!(_hx_tmp1)) {
HXLINE(1593)			if (::hx::IsNotNull( targetObject )) {
HXLINE(1594)				bool _hx_tmp1;
HXDLIN(1594)				bool _hx_tmp2;
HXDLIN(1594)				Float _hx_tmp3 = this->_hx___vertexBufferWidth;
HXDLIN(1594)				if ((_hx_tmp3 == targetObject->get_width())) {
HXLINE(1595)					Float _hx_tmp = this->_hx___vertexBufferHeight;
HXLINE(1594)					_hx_tmp2 = (_hx_tmp != targetObject->get_height());
            				}
            				else {
HXLINE(1594)					_hx_tmp2 = true;
            				}
HXDLIN(1594)				if (!(_hx_tmp2)) {
HXLINE(1596)					Float _hx_tmp = this->_hx___vertexBufferScaleX;
HXLINE(1594)					_hx_tmp1 = (_hx_tmp != targetObject->get_scaleX());
            				}
            				else {
HXLINE(1594)					_hx_tmp1 = true;
            				}
HXDLIN(1594)				if (!(_hx_tmp1)) {
HXLINE(1597)					Float _hx_tmp1 = this->_hx___vertexBufferScaleY;
HXLINE(1589)					_hx_tmp = (_hx_tmp1 != targetObject->get_scaleY());
            				}
            				else {
HXLINE(1589)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(1589)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1589)			_hx_tmp = true;
            		}
HXDLIN(1589)		if (_hx_tmp) {
HXLINE(1621)			this->_hx___uvRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,this->width,this->height);
HXLINE(1623)			int uvWidth = 1;
HXLINE(1624)			int uvHeight = 1;
HXLINE(1641)			this->_hx___vertexBufferContext = context->_hx___context;
HXLINE(1642)			this->_hx___vertexBuffer = null();
HXLINE(1644)			if (::hx::IsNotNull( targetObject )) {
HXLINE(1646)				this->_hx___vertexBufferWidth = targetObject->get_width();
HXLINE(1647)				this->_hx___vertexBufferHeight = targetObject->get_height();
HXLINE(1648)				this->_hx___vertexBufferScaleX = targetObject->get_scaleX();
HXLINE(1649)				this->_hx___vertexBufferScaleY = targetObject->get_scaleY();
            			}
HXLINE(1652)			bool _hx_tmp;
HXDLIN(1652)			if (::hx::IsNotNull( scale9Grid )) {
HXLINE(1652)				_hx_tmp = ::hx::IsNotNull( targetObject );
            			}
            			else {
HXLINE(1652)				_hx_tmp = false;
            			}
HXDLIN(1652)			if (_hx_tmp) {
HXLINE(1654)				if (::hx::IsNull( this->_hx___vertexBufferGrid )) {
HXLINE(1654)					this->_hx___vertexBufferGrid =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            				}
HXLINE(1655)				this->_hx___vertexBufferGrid->copyFrom(scale9Grid);
HXLINE(1657)				this->_hx___vertexBufferWidth = targetObject->get_width();
HXLINE(1658)				this->_hx___vertexBufferHeight = targetObject->get_height();
HXLINE(1659)				this->_hx___vertexBufferScaleX = targetObject->get_scaleX();
HXLINE(1660)				this->_hx___vertexBufferScaleY = targetObject->get_scaleY();
HXLINE(1662)				Float centerX = scale9Grid->width;
HXLINE(1663)				Float centerY = scale9Grid->height;
HXLINE(1664)				bool _hx_tmp;
HXDLIN(1664)				if ((centerX != 0)) {
HXLINE(1664)					_hx_tmp = (centerY != 0);
            				}
            				else {
HXLINE(1664)					_hx_tmp = false;
            				}
HXDLIN(1664)				if (_hx_tmp) {
HXLINE(1666)					 ::haxe::io::Bytes buffer = null();
HXDLIN(1666)					::cpp::VirtualArray array = null();
HXDLIN(1666)					 ::openfl::_Vector::FloatVector vector = null();
HXDLIN(1666)					 ::lime::utils::ArrayBufferView view = null();
HXDLIN(1666)					 ::Dynamic len = null();
HXDLIN(1666)					 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,224,8);
HXDLIN(1666)					this->_hx___vertexBufferData = this1;
HXLINE(1668)					Float left = scale9Grid->x;
HXLINE(1669)					Float top = scale9Grid->y;
HXLINE(1670)					Float right = ((( (Float)(this->width) ) - centerX) - left);
HXLINE(1671)					Float bottom = ((( (Float)(this->height) ) - centerY) - top);
HXLINE(1673)					Float uvLeft = (left / ( (Float)(this->width) ));
HXLINE(1674)					Float uvTop = (top / ( (Float)(this->height) ));
HXLINE(1675)					Float uvCenterX = (centerX / ( (Float)(this->width) ));
HXLINE(1676)					Float uvCenterY = (centerY / ( (Float)(this->height) ));
HXLINE(1677)					Float uvRight = (right / ( (Float)(this->width) ));
HXLINE(1678)					Float uvBottom = (bottom / ( (Float)(this->height) ));
HXLINE(1680)					Float renderedLeft = (left / targetObject->get_scaleX());
HXLINE(1681)					Float renderedTop = (top / targetObject->get_scaleY());
HXLINE(1682)					Float renderedRight = (right / targetObject->get_scaleX());
HXLINE(1683)					Float renderedBottom = (bottom / targetObject->get_scaleY());
HXLINE(1684)					Float renderedCenterX = targetObject->get_width();
HXDLIN(1684)					Float renderedCenterX1 = (((renderedCenterX / targetObject->get_scaleX()) - renderedLeft) - renderedRight);
HXLINE(1685)					Float renderedCenterY = targetObject->get_height();
HXDLIN(1685)					Float renderedCenterY1 = (((renderedCenterY / targetObject->get_scaleY()) - renderedTop) - renderedBottom);
HXLINE(1696)					{
HXLINE(1696)						 ::lime::utils::ArrayBufferView this2 = this->_hx___vertexBufferData;
HXDLIN(1696)						 ::__hxcpp_memory_set_float(this2->buffer->b,this2->byteOffset,renderedLeft);
            					}
HXLINE(1697)					{
HXLINE(1697)						 ::lime::utils::ArrayBufferView this3 = this->_hx___vertexBufferData;
HXDLIN(1697)						 ::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + 4),renderedTop);
            					}
HXLINE(1698)					{
HXLINE(1698)						 ::lime::utils::ArrayBufferView this4 = this->_hx___vertexBufferData;
HXDLIN(1698)						Float val = (( (Float)(uvWidth) ) * uvLeft);
HXDLIN(1698)						 ::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + 12),val);
            					}
HXLINE(1699)					{
HXLINE(1699)						 ::lime::utils::ArrayBufferView this5 = this->_hx___vertexBufferData;
HXDLIN(1699)						Float val1 = (( (Float)(uvHeight) ) * uvTop);
HXDLIN(1699)						 ::__hxcpp_memory_set_float(this5->buffer->b,(this5->byteOffset + 16),val1);
            					}
HXLINE(1701)					{
HXLINE(1701)						 ::lime::utils::ArrayBufferView this6 = this->_hx___vertexBufferData;
HXDLIN(1701)						 ::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + 60),renderedTop);
            					}
HXLINE(1702)					{
HXLINE(1702)						 ::lime::utils::ArrayBufferView this7 = this->_hx___vertexBufferData;
HXDLIN(1702)						Float val2 = (( (Float)(uvHeight) ) * uvTop);
HXDLIN(1702)						 ::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + 72),val2);
            					}
HXLINE(1704)					{
HXLINE(1704)						 ::lime::utils::ArrayBufferView this8 = this->_hx___vertexBufferData;
HXDLIN(1704)						 ::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + 112),renderedLeft);
            					}
HXLINE(1705)					{
HXLINE(1705)						 ::lime::utils::ArrayBufferView this9 = this->_hx___vertexBufferData;
HXDLIN(1705)						Float val3 = (( (Float)(uvWidth) ) * uvLeft);
HXDLIN(1705)						 ::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + 124),val3);
            					}
HXLINE(1708)					{
HXLINE(1708)						 ::lime::utils::ArrayBufferView this10 = this->_hx___vertexBufferData;
HXDLIN(1708)						Float val4 = (renderedLeft + renderedCenterX1);
HXDLIN(1708)						 ::__hxcpp_memory_set_float(this10->buffer->b,(this10->byteOffset + 224),val4);
            					}
HXLINE(1709)					{
HXLINE(1709)						 ::lime::utils::ArrayBufferView this11 = this->_hx___vertexBufferData;
HXDLIN(1709)						 ::__hxcpp_memory_set_float(this11->buffer->b,(this11->byteOffset + 228),renderedTop);
            					}
HXLINE(1710)					{
HXLINE(1710)						 ::lime::utils::ArrayBufferView this12 = this->_hx___vertexBufferData;
HXDLIN(1710)						Float val5 = (( (Float)(uvWidth) ) * (uvLeft + uvCenterX));
HXDLIN(1710)						 ::__hxcpp_memory_set_float(this12->buffer->b,(this12->byteOffset + 236),val5);
            					}
HXLINE(1711)					{
HXLINE(1711)						 ::lime::utils::ArrayBufferView this13 = this->_hx___vertexBufferData;
HXDLIN(1711)						Float val6 = (( (Float)(uvHeight) ) * uvTop);
HXDLIN(1711)						 ::__hxcpp_memory_set_float(this13->buffer->b,(this13->byteOffset + 240),val6);
            					}
HXLINE(1713)					{
HXLINE(1713)						 ::lime::utils::ArrayBufferView this14 = this->_hx___vertexBufferData;
HXDLIN(1713)						Float val7 = (renderedLeft + renderedCenterX1);
HXDLIN(1713)						 ::__hxcpp_memory_set_float(this14->buffer->b,(this14->byteOffset + 280),val7);
            					}
HXLINE(1714)					{
HXLINE(1714)						 ::lime::utils::ArrayBufferView this15 = this->_hx___vertexBufferData;
HXDLIN(1714)						Float val8 = (( (Float)(uvWidth) ) * (uvLeft + uvCenterX));
HXDLIN(1714)						 ::__hxcpp_memory_set_float(this15->buffer->b,(this15->byteOffset + 292),val8);
            					}
HXLINE(1717)					{
HXLINE(1717)						 ::lime::utils::ArrayBufferView this16 = this->_hx___vertexBufferData;
HXDLIN(1717)						Float val9 = ( (Float)(this->width) );
HXDLIN(1717)						 ::__hxcpp_memory_set_float(this16->buffer->b,(this16->byteOffset + 336),val9);
            					}
HXLINE(1718)					{
HXLINE(1718)						 ::lime::utils::ArrayBufferView this17 = this->_hx___vertexBufferData;
HXDLIN(1718)						 ::__hxcpp_memory_set_float(this17->buffer->b,(this17->byteOffset + 340),renderedTop);
            					}
HXLINE(1719)					{
HXLINE(1719)						 ::lime::utils::ArrayBufferView this18 = this->_hx___vertexBufferData;
HXDLIN(1719)						 ::__hxcpp_memory_set_float(this18->buffer->b,(this18->byteOffset + 348),uvWidth);
            					}
HXLINE(1720)					{
HXLINE(1720)						 ::lime::utils::ArrayBufferView this19 = this->_hx___vertexBufferData;
HXDLIN(1720)						Float val10 = (( (Float)(uvHeight) ) * uvTop);
HXDLIN(1720)						 ::__hxcpp_memory_set_float(this19->buffer->b,(this19->byteOffset + 352),val10);
            					}
HXLINE(1722)					{
HXLINE(1722)						 ::lime::utils::ArrayBufferView this20 = this->_hx___vertexBufferData;
HXDLIN(1722)						Float val11 = ( (Float)(this->width) );
HXDLIN(1722)						 ::__hxcpp_memory_set_float(this20->buffer->b,(this20->byteOffset + 392),val11);
            					}
HXLINE(1723)					{
HXLINE(1723)						 ::lime::utils::ArrayBufferView this21 = this->_hx___vertexBufferData;
HXDLIN(1723)						 ::__hxcpp_memory_set_float(this21->buffer->b,(this21->byteOffset + 404),uvWidth);
            					}
HXLINE(1726)					{
HXLINE(1726)						 ::lime::utils::ArrayBufferView this22 = this->_hx___vertexBufferData;
HXDLIN(1726)						 ::__hxcpp_memory_set_float(this22->buffer->b,(this22->byteOffset + 448),renderedLeft);
            					}
HXLINE(1727)					{
HXLINE(1727)						 ::lime::utils::ArrayBufferView this23 = this->_hx___vertexBufferData;
HXDLIN(1727)						Float val12 = (renderedTop + renderedCenterY1);
HXDLIN(1727)						 ::__hxcpp_memory_set_float(this23->buffer->b,(this23->byteOffset + 452),val12);
            					}
HXLINE(1728)					{
HXLINE(1728)						 ::lime::utils::ArrayBufferView this24 = this->_hx___vertexBufferData;
HXDLIN(1728)						Float val13 = (( (Float)(uvWidth) ) * uvLeft);
HXDLIN(1728)						 ::__hxcpp_memory_set_float(this24->buffer->b,(this24->byteOffset + 460),val13);
            					}
HXLINE(1729)					{
HXLINE(1729)						 ::lime::utils::ArrayBufferView this25 = this->_hx___vertexBufferData;
HXDLIN(1729)						Float val14 = (( (Float)(uvHeight) ) * (uvTop + uvCenterY));
HXDLIN(1729)						 ::__hxcpp_memory_set_float(this25->buffer->b,(this25->byteOffset + 464),val14);
            					}
HXLINE(1731)					{
HXLINE(1731)						 ::lime::utils::ArrayBufferView this26 = this->_hx___vertexBufferData;
HXDLIN(1731)						Float val15 = (renderedTop + renderedCenterY1);
HXDLIN(1731)						 ::__hxcpp_memory_set_float(this26->buffer->b,(this26->byteOffset + 508),val15);
            					}
HXLINE(1732)					{
HXLINE(1732)						 ::lime::utils::ArrayBufferView this27 = this->_hx___vertexBufferData;
HXDLIN(1732)						Float val16 = (( (Float)(uvHeight) ) * (uvTop + uvCenterY));
HXDLIN(1732)						 ::__hxcpp_memory_set_float(this27->buffer->b,(this27->byteOffset + 520),val16);
            					}
HXLINE(1735)					{
HXLINE(1735)						 ::lime::utils::ArrayBufferView this28 = this->_hx___vertexBufferData;
HXDLIN(1735)						Float val17 = (renderedLeft + renderedCenterX1);
HXDLIN(1735)						 ::__hxcpp_memory_set_float(this28->buffer->b,(this28->byteOffset + 560),val17);
            					}
HXLINE(1736)					{
HXLINE(1736)						 ::lime::utils::ArrayBufferView this29 = this->_hx___vertexBufferData;
HXDLIN(1736)						Float val18 = (renderedTop + renderedCenterY1);
HXDLIN(1736)						 ::__hxcpp_memory_set_float(this29->buffer->b,(this29->byteOffset + 564),val18);
            					}
HXLINE(1737)					{
HXLINE(1737)						 ::lime::utils::ArrayBufferView this30 = this->_hx___vertexBufferData;
HXDLIN(1737)						Float val19 = (( (Float)(uvWidth) ) * (uvLeft + uvCenterX));
HXDLIN(1737)						 ::__hxcpp_memory_set_float(this30->buffer->b,(this30->byteOffset + 572),val19);
            					}
HXLINE(1738)					{
HXLINE(1738)						 ::lime::utils::ArrayBufferView this31 = this->_hx___vertexBufferData;
HXDLIN(1738)						Float val20 = (( (Float)(uvHeight) ) * (uvTop + uvCenterY));
HXDLIN(1738)						 ::__hxcpp_memory_set_float(this31->buffer->b,(this31->byteOffset + 576),val20);
            					}
HXLINE(1741)					{
HXLINE(1741)						 ::lime::utils::ArrayBufferView this32 = this->_hx___vertexBufferData;
HXDLIN(1741)						Float val21 = ( (Float)(this->width) );
HXDLIN(1741)						 ::__hxcpp_memory_set_float(this32->buffer->b,(this32->byteOffset + 616),val21);
            					}
HXLINE(1742)					{
HXLINE(1742)						 ::lime::utils::ArrayBufferView this33 = this->_hx___vertexBufferData;
HXDLIN(1742)						Float val22 = (renderedTop + renderedCenterY1);
HXDLIN(1742)						 ::__hxcpp_memory_set_float(this33->buffer->b,(this33->byteOffset + 620),val22);
            					}
HXLINE(1743)					{
HXLINE(1743)						 ::lime::utils::ArrayBufferView this34 = this->_hx___vertexBufferData;
HXDLIN(1743)						 ::__hxcpp_memory_set_float(this34->buffer->b,(this34->byteOffset + 628),uvWidth);
            					}
HXLINE(1744)					{
HXLINE(1744)						 ::lime::utils::ArrayBufferView this35 = this->_hx___vertexBufferData;
HXDLIN(1744)						Float val23 = (( (Float)(uvHeight) ) * (uvTop + uvCenterY));
HXDLIN(1744)						 ::__hxcpp_memory_set_float(this35->buffer->b,(this35->byteOffset + 632),val23);
            					}
HXLINE(1747)					{
HXLINE(1747)						 ::lime::utils::ArrayBufferView this36 = this->_hx___vertexBufferData;
HXDLIN(1747)						 ::__hxcpp_memory_set_float(this36->buffer->b,(this36->byteOffset + 672),renderedLeft);
            					}
HXLINE(1748)					{
HXLINE(1748)						 ::lime::utils::ArrayBufferView this37 = this->_hx___vertexBufferData;
HXDLIN(1748)						Float val24 = ( (Float)(this->height) );
HXDLIN(1748)						 ::__hxcpp_memory_set_float(this37->buffer->b,(this37->byteOffset + 676),val24);
            					}
HXLINE(1749)					{
HXLINE(1749)						 ::lime::utils::ArrayBufferView this38 = this->_hx___vertexBufferData;
HXDLIN(1749)						Float val25 = (( (Float)(uvWidth) ) * uvLeft);
HXDLIN(1749)						 ::__hxcpp_memory_set_float(this38->buffer->b,(this38->byteOffset + 684),val25);
            					}
HXLINE(1750)					{
HXLINE(1750)						 ::lime::utils::ArrayBufferView this39 = this->_hx___vertexBufferData;
HXDLIN(1750)						 ::__hxcpp_memory_set_float(this39->buffer->b,(this39->byteOffset + 688),uvHeight);
            					}
HXLINE(1752)					{
HXLINE(1752)						 ::lime::utils::ArrayBufferView this40 = this->_hx___vertexBufferData;
HXDLIN(1752)						Float val26 = ( (Float)(this->height) );
HXDLIN(1752)						 ::__hxcpp_memory_set_float(this40->buffer->b,(this40->byteOffset + 732),val26);
            					}
HXLINE(1753)					{
HXLINE(1753)						 ::lime::utils::ArrayBufferView this41 = this->_hx___vertexBufferData;
HXDLIN(1753)						 ::__hxcpp_memory_set_float(this41->buffer->b,(this41->byteOffset + 744),uvHeight);
            					}
HXLINE(1756)					{
HXLINE(1756)						 ::lime::utils::ArrayBufferView this42 = this->_hx___vertexBufferData;
HXDLIN(1756)						Float val27 = (renderedLeft + renderedCenterX1);
HXDLIN(1756)						 ::__hxcpp_memory_set_float(this42->buffer->b,(this42->byteOffset + 784),val27);
            					}
HXLINE(1757)					{
HXLINE(1757)						 ::lime::utils::ArrayBufferView this43 = this->_hx___vertexBufferData;
HXDLIN(1757)						Float val28 = ( (Float)(this->height) );
HXDLIN(1757)						 ::__hxcpp_memory_set_float(this43->buffer->b,(this43->byteOffset + 788),val28);
            					}
HXLINE(1758)					{
HXLINE(1758)						 ::lime::utils::ArrayBufferView this44 = this->_hx___vertexBufferData;
HXDLIN(1758)						Float val29 = (( (Float)(uvWidth) ) * (uvLeft + uvCenterX));
HXDLIN(1758)						 ::__hxcpp_memory_set_float(this44->buffer->b,(this44->byteOffset + 796),val29);
            					}
HXLINE(1759)					{
HXLINE(1759)						 ::lime::utils::ArrayBufferView this45 = this->_hx___vertexBufferData;
HXDLIN(1759)						 ::__hxcpp_memory_set_float(this45->buffer->b,(this45->byteOffset + 800),uvHeight);
            					}
HXLINE(1762)					{
HXLINE(1762)						 ::lime::utils::ArrayBufferView this46 = this->_hx___vertexBufferData;
HXDLIN(1762)						Float val30 = ( (Float)(this->width) );
HXDLIN(1762)						 ::__hxcpp_memory_set_float(this46->buffer->b,(this46->byteOffset + 840),val30);
            					}
HXLINE(1763)					{
HXLINE(1763)						 ::lime::utils::ArrayBufferView this47 = this->_hx___vertexBufferData;
HXDLIN(1763)						Float val31 = ( (Float)(this->height) );
HXDLIN(1763)						 ::__hxcpp_memory_set_float(this47->buffer->b,(this47->byteOffset + 844),val31);
            					}
HXLINE(1764)					{
HXLINE(1764)						 ::lime::utils::ArrayBufferView this48 = this->_hx___vertexBufferData;
HXDLIN(1764)						 ::__hxcpp_memory_set_float(this48->buffer->b,(this48->byteOffset + 852),uvWidth);
            					}
HXLINE(1765)					{
HXLINE(1765)						 ::lime::utils::ArrayBufferView this49 = this->_hx___vertexBufferData;
HXDLIN(1765)						 ::__hxcpp_memory_set_float(this49->buffer->b,(this49->byteOffset + 856),uvHeight);
            					}
HXLINE(1767)					this->_hx___vertexBuffer = context->createVertexBuffer(16,14,null());
            				}
            				else {
HXLINE(1769)					bool _hx_tmp;
HXDLIN(1769)					if ((centerX == 0)) {
HXLINE(1769)						_hx_tmp = (centerY != 0);
            					}
            					else {
HXLINE(1769)						_hx_tmp = false;
            					}
HXDLIN(1769)					if (_hx_tmp) {
HXLINE(1771)						 ::haxe::io::Bytes buffer = null();
HXDLIN(1771)						::cpp::VirtualArray array = null();
HXDLIN(1771)						 ::openfl::_Vector::FloatVector vector = null();
HXDLIN(1771)						 ::lime::utils::ArrayBufferView view = null();
HXDLIN(1771)						 ::Dynamic len = null();
HXDLIN(1771)						 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,112,8);
HXDLIN(1771)						this->_hx___vertexBufferData = this1;
HXLINE(1773)						Float top = scale9Grid->y;
HXLINE(1774)						Float bottom = ((( (Float)(this->height) ) - centerY) - top);
HXLINE(1776)						Float uvTop = (top / ( (Float)(this->height) ));
HXLINE(1777)						Float uvCenterY = (centerY / ( (Float)(this->height) ));
HXLINE(1778)						Float uvBottom = (bottom / ( (Float)(this->height) ));
HXLINE(1780)						Float renderedTop = (top / targetObject->get_scaleY());
HXLINE(1781)						Float renderedBottom = (bottom / targetObject->get_scaleY());
HXLINE(1782)						Float renderedCenterY = targetObject->get_height();
HXDLIN(1782)						Float renderedCenterY1 = (((renderedCenterY / targetObject->get_scaleY()) - renderedTop) - renderedBottom);
HXLINE(1784)						Float renderedWidth = targetObject->get_width();
HXDLIN(1784)						Float renderedWidth1 = (renderedWidth / targetObject->get_scaleX());
HXLINE(1795)						{
HXLINE(1795)							 ::lime::utils::ArrayBufferView this2 = this->_hx___vertexBufferData;
HXDLIN(1795)							 ::__hxcpp_memory_set_float(this2->buffer->b,this2->byteOffset,renderedWidth1);
            						}
HXLINE(1796)						{
HXLINE(1796)							 ::lime::utils::ArrayBufferView this3 = this->_hx___vertexBufferData;
HXDLIN(1796)							 ::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + 4),renderedTop);
            						}
HXLINE(1797)						{
HXLINE(1797)							 ::lime::utils::ArrayBufferView this4 = this->_hx___vertexBufferData;
HXDLIN(1797)							 ::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + 12),uvWidth);
            						}
HXLINE(1798)						{
HXLINE(1798)							 ::lime::utils::ArrayBufferView this5 = this->_hx___vertexBufferData;
HXDLIN(1798)							Float val = (( (Float)(uvHeight) ) * uvTop);
HXDLIN(1798)							 ::__hxcpp_memory_set_float(this5->buffer->b,(this5->byteOffset + 16),val);
            						}
HXLINE(1800)						{
HXLINE(1800)							 ::lime::utils::ArrayBufferView this6 = this->_hx___vertexBufferData;
HXDLIN(1800)							 ::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + 60),renderedTop);
            						}
HXLINE(1801)						{
HXLINE(1801)							 ::lime::utils::ArrayBufferView this7 = this->_hx___vertexBufferData;
HXDLIN(1801)							Float val1 = (( (Float)(uvHeight) ) * uvTop);
HXDLIN(1801)							 ::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + 72),val1);
            						}
HXLINE(1803)						{
HXLINE(1803)							 ::lime::utils::ArrayBufferView this8 = this->_hx___vertexBufferData;
HXDLIN(1803)							 ::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + 112),renderedWidth1);
            						}
HXLINE(1804)						{
HXLINE(1804)							 ::lime::utils::ArrayBufferView this9 = this->_hx___vertexBufferData;
HXDLIN(1804)							 ::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + 124),uvWidth);
            						}
HXLINE(1807)						{
HXLINE(1807)							 ::lime::utils::ArrayBufferView this10 = this->_hx___vertexBufferData;
HXDLIN(1807)							 ::__hxcpp_memory_set_float(this10->buffer->b,(this10->byteOffset + 224),renderedWidth1);
            						}
HXLINE(1808)						{
HXLINE(1808)							 ::lime::utils::ArrayBufferView this11 = this->_hx___vertexBufferData;
HXDLIN(1808)							Float val2 = (renderedTop + renderedCenterY1);
HXDLIN(1808)							 ::__hxcpp_memory_set_float(this11->buffer->b,(this11->byteOffset + 228),val2);
            						}
HXLINE(1809)						{
HXLINE(1809)							 ::lime::utils::ArrayBufferView this12 = this->_hx___vertexBufferData;
HXDLIN(1809)							 ::__hxcpp_memory_set_float(this12->buffer->b,(this12->byteOffset + 236),uvWidth);
            						}
HXLINE(1810)						{
HXLINE(1810)							 ::lime::utils::ArrayBufferView this13 = this->_hx___vertexBufferData;
HXDLIN(1810)							Float val3 = (( (Float)(uvHeight) ) * (uvTop + uvCenterY));
HXDLIN(1810)							 ::__hxcpp_memory_set_float(this13->buffer->b,(this13->byteOffset + 240),val3);
            						}
HXLINE(1812)						{
HXLINE(1812)							 ::lime::utils::ArrayBufferView this14 = this->_hx___vertexBufferData;
HXDLIN(1812)							Float val4 = (renderedTop + renderedCenterY1);
HXDLIN(1812)							 ::__hxcpp_memory_set_float(this14->buffer->b,(this14->byteOffset + 284),val4);
            						}
HXLINE(1813)						{
HXLINE(1813)							 ::lime::utils::ArrayBufferView this15 = this->_hx___vertexBufferData;
HXDLIN(1813)							Float val5 = (( (Float)(uvHeight) ) * (uvTop + uvCenterY));
HXDLIN(1813)							 ::__hxcpp_memory_set_float(this15->buffer->b,(this15->byteOffset + 296),val5);
            						}
HXLINE(1816)						{
HXLINE(1816)							 ::lime::utils::ArrayBufferView this16 = this->_hx___vertexBufferData;
HXDLIN(1816)							 ::__hxcpp_memory_set_float(this16->buffer->b,(this16->byteOffset + 336),renderedWidth1);
            						}
HXLINE(1817)						{
HXLINE(1817)							 ::lime::utils::ArrayBufferView this17 = this->_hx___vertexBufferData;
HXDLIN(1817)							Float val6 = ( (Float)(this->height) );
HXDLIN(1817)							 ::__hxcpp_memory_set_float(this17->buffer->b,(this17->byteOffset + 340),val6);
            						}
HXLINE(1818)						{
HXLINE(1818)							 ::lime::utils::ArrayBufferView this18 = this->_hx___vertexBufferData;
HXDLIN(1818)							 ::__hxcpp_memory_set_float(this18->buffer->b,(this18->byteOffset + 348),uvWidth);
            						}
HXLINE(1819)						{
HXLINE(1819)							 ::lime::utils::ArrayBufferView this19 = this->_hx___vertexBufferData;
HXDLIN(1819)							 ::__hxcpp_memory_set_float(this19->buffer->b,(this19->byteOffset + 352),uvHeight);
            						}
HXLINE(1821)						{
HXLINE(1821)							 ::lime::utils::ArrayBufferView this20 = this->_hx___vertexBufferData;
HXDLIN(1821)							Float val7 = ( (Float)(this->height) );
HXDLIN(1821)							 ::__hxcpp_memory_set_float(this20->buffer->b,(this20->byteOffset + 396),val7);
            						}
HXLINE(1822)						{
HXLINE(1822)							 ::lime::utils::ArrayBufferView this21 = this->_hx___vertexBufferData;
HXDLIN(1822)							 ::__hxcpp_memory_set_float(this21->buffer->b,(this21->byteOffset + 408),uvHeight);
            						}
HXLINE(1824)						this->_hx___vertexBuffer = context->createVertexBuffer(8,14,null());
            					}
            					else {
HXLINE(1826)						bool _hx_tmp;
HXDLIN(1826)						if ((centerY == 0)) {
HXLINE(1826)							_hx_tmp = (centerX != 0);
            						}
            						else {
HXLINE(1826)							_hx_tmp = false;
            						}
HXDLIN(1826)						if (_hx_tmp) {
HXLINE(1828)							 ::haxe::io::Bytes buffer = null();
HXDLIN(1828)							::cpp::VirtualArray array = null();
HXDLIN(1828)							 ::openfl::_Vector::FloatVector vector = null();
HXDLIN(1828)							 ::lime::utils::ArrayBufferView view = null();
HXDLIN(1828)							 ::Dynamic len = null();
HXDLIN(1828)							 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,112,8);
HXDLIN(1828)							this->_hx___vertexBufferData = this1;
HXLINE(1830)							Float left = scale9Grid->x;
HXLINE(1831)							Float right = ((( (Float)(this->width) ) - centerX) - left);
HXLINE(1833)							Float uvLeft = (left / ( (Float)(this->width) ));
HXLINE(1834)							Float uvCenterX = (centerX / ( (Float)(this->width) ));
HXLINE(1835)							Float uvRight = (right / ( (Float)(this->width) ));
HXLINE(1837)							Float renderedLeft = (left / targetObject->get_scaleX());
HXLINE(1838)							Float renderedRight = (right / targetObject->get_scaleX());
HXLINE(1839)							Float renderedCenterX = targetObject->get_width();
HXDLIN(1839)							Float renderedCenterX1 = (((renderedCenterX / targetObject->get_scaleX()) - renderedLeft) - renderedRight);
HXLINE(1841)							Float renderedHeight = targetObject->get_height();
HXDLIN(1841)							Float renderedHeight1 = (renderedHeight / targetObject->get_scaleY());
HXLINE(1848)							{
HXLINE(1848)								 ::lime::utils::ArrayBufferView this2 = this->_hx___vertexBufferData;
HXDLIN(1848)								 ::__hxcpp_memory_set_float(this2->buffer->b,this2->byteOffset,renderedLeft);
            							}
HXLINE(1849)							{
HXLINE(1849)								 ::lime::utils::ArrayBufferView this3 = this->_hx___vertexBufferData;
HXDLIN(1849)								 ::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + 4),renderedHeight1);
            							}
HXLINE(1850)							{
HXLINE(1850)								 ::lime::utils::ArrayBufferView this4 = this->_hx___vertexBufferData;
HXDLIN(1850)								Float val = (( (Float)(uvWidth) ) * uvLeft);
HXDLIN(1850)								 ::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + 12),val);
            							}
HXLINE(1851)							{
HXLINE(1851)								 ::lime::utils::ArrayBufferView this5 = this->_hx___vertexBufferData;
HXDLIN(1851)								 ::__hxcpp_memory_set_float(this5->buffer->b,(this5->byteOffset + 16),uvHeight);
            							}
HXLINE(1853)							{
HXLINE(1853)								 ::lime::utils::ArrayBufferView this6 = this->_hx___vertexBufferData;
HXDLIN(1853)								 ::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + 60),renderedHeight1);
            							}
HXLINE(1854)							{
HXLINE(1854)								 ::lime::utils::ArrayBufferView this7 = this->_hx___vertexBufferData;
HXDLIN(1854)								 ::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + 72),uvHeight);
            							}
HXLINE(1856)							{
HXLINE(1856)								 ::lime::utils::ArrayBufferView this8 = this->_hx___vertexBufferData;
HXDLIN(1856)								 ::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + 112),renderedLeft);
            							}
HXLINE(1857)							{
HXLINE(1857)								 ::lime::utils::ArrayBufferView this9 = this->_hx___vertexBufferData;
HXDLIN(1857)								Float val1 = (( (Float)(uvWidth) ) * uvLeft);
HXDLIN(1857)								 ::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + 124),val1);
            							}
HXLINE(1860)							{
HXLINE(1860)								 ::lime::utils::ArrayBufferView this10 = this->_hx___vertexBufferData;
HXDLIN(1860)								Float val2 = (renderedLeft + renderedCenterX1);
HXDLIN(1860)								 ::__hxcpp_memory_set_float(this10->buffer->b,(this10->byteOffset + 224),val2);
            							}
HXLINE(1861)							{
HXLINE(1861)								 ::lime::utils::ArrayBufferView this11 = this->_hx___vertexBufferData;
HXDLIN(1861)								 ::__hxcpp_memory_set_float(this11->buffer->b,(this11->byteOffset + 228),renderedHeight1);
            							}
HXLINE(1862)							{
HXLINE(1862)								 ::lime::utils::ArrayBufferView this12 = this->_hx___vertexBufferData;
HXDLIN(1862)								Float val3 = (( (Float)(uvWidth) ) * (uvLeft + uvCenterX));
HXDLIN(1862)								 ::__hxcpp_memory_set_float(this12->buffer->b,(this12->byteOffset + 236),val3);
            							}
HXLINE(1863)							{
HXLINE(1863)								 ::lime::utils::ArrayBufferView this13 = this->_hx___vertexBufferData;
HXDLIN(1863)								 ::__hxcpp_memory_set_float(this13->buffer->b,(this13->byteOffset + 240),uvHeight);
            							}
HXLINE(1865)							{
HXLINE(1865)								 ::lime::utils::ArrayBufferView this14 = this->_hx___vertexBufferData;
HXDLIN(1865)								Float val4 = (renderedLeft + renderedCenterX1);
HXDLIN(1865)								 ::__hxcpp_memory_set_float(this14->buffer->b,(this14->byteOffset + 280),val4);
            							}
HXLINE(1866)							{
HXLINE(1866)								 ::lime::utils::ArrayBufferView this15 = this->_hx___vertexBufferData;
HXDLIN(1866)								Float val5 = (( (Float)(uvWidth) ) * (uvLeft + uvCenterX));
HXDLIN(1866)								 ::__hxcpp_memory_set_float(this15->buffer->b,(this15->byteOffset + 292),val5);
            							}
HXLINE(1869)							{
HXLINE(1869)								 ::lime::utils::ArrayBufferView this16 = this->_hx___vertexBufferData;
HXDLIN(1869)								Float val6 = ( (Float)(this->width) );
HXDLIN(1869)								 ::__hxcpp_memory_set_float(this16->buffer->b,(this16->byteOffset + 336),val6);
            							}
HXLINE(1870)							{
HXLINE(1870)								 ::lime::utils::ArrayBufferView this17 = this->_hx___vertexBufferData;
HXDLIN(1870)								 ::__hxcpp_memory_set_float(this17->buffer->b,(this17->byteOffset + 340),renderedHeight1);
            							}
HXLINE(1871)							{
HXLINE(1871)								 ::lime::utils::ArrayBufferView this18 = this->_hx___vertexBufferData;
HXDLIN(1871)								 ::__hxcpp_memory_set_float(this18->buffer->b,(this18->byteOffset + 348),uvWidth);
            							}
HXLINE(1872)							{
HXLINE(1872)								 ::lime::utils::ArrayBufferView this19 = this->_hx___vertexBufferData;
HXDLIN(1872)								 ::__hxcpp_memory_set_float(this19->buffer->b,(this19->byteOffset + 352),uvHeight);
            							}
HXLINE(1874)							{
HXLINE(1874)								 ::lime::utils::ArrayBufferView this20 = this->_hx___vertexBufferData;
HXDLIN(1874)								Float val7 = ( (Float)(this->width) );
HXDLIN(1874)								 ::__hxcpp_memory_set_float(this20->buffer->b,(this20->byteOffset + 392),val7);
            							}
HXLINE(1875)							{
HXLINE(1875)								 ::lime::utils::ArrayBufferView this21 = this->_hx___vertexBufferData;
HXDLIN(1875)								 ::__hxcpp_memory_set_float(this21->buffer->b,(this21->byteOffset + 404),uvWidth);
            							}
HXLINE(1877)							this->_hx___vertexBuffer = context->createVertexBuffer(8,14,null());
            						}
            					}
            				}
            			}
            			else {
HXLINE(1882)				this->_hx___vertexBufferGrid = null();
            			}
HXLINE(1885)			if (::hx::IsNull( this->_hx___vertexBuffer )) {
HXLINE(1887)				 ::haxe::io::Bytes buffer = null();
HXDLIN(1887)				::cpp::VirtualArray array = null();
HXDLIN(1887)				 ::openfl::_Vector::FloatVector vector = null();
HXDLIN(1887)				 ::lime::utils::ArrayBufferView view = null();
HXDLIN(1887)				 ::Dynamic len = null();
HXDLIN(1887)				 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,56,8);
HXDLIN(1887)				this->_hx___vertexBufferData = this1;
HXLINE(1889)				{
HXLINE(1889)					 ::lime::utils::ArrayBufferView this2 = this->_hx___vertexBufferData;
HXDLIN(1889)					Float val = ( (Float)(this->width) );
HXDLIN(1889)					 ::__hxcpp_memory_set_float(this2->buffer->b,this2->byteOffset,val);
            				}
HXLINE(1890)				{
HXLINE(1890)					 ::lime::utils::ArrayBufferView this3 = this->_hx___vertexBufferData;
HXDLIN(1890)					Float val1 = ( (Float)(this->height) );
HXDLIN(1890)					 ::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + 4),val1);
            				}
HXLINE(1891)				{
HXLINE(1891)					 ::lime::utils::ArrayBufferView this4 = this->_hx___vertexBufferData;
HXDLIN(1891)					 ::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + 12),uvWidth);
            				}
HXLINE(1892)				{
HXLINE(1892)					 ::lime::utils::ArrayBufferView this5 = this->_hx___vertexBufferData;
HXDLIN(1892)					 ::__hxcpp_memory_set_float(this5->buffer->b,(this5->byteOffset + 16),uvHeight);
            				}
HXLINE(1893)				{
HXLINE(1893)					 ::lime::utils::ArrayBufferView this6 = this->_hx___vertexBufferData;
HXDLIN(1893)					Float val2 = ( (Float)(this->height) );
HXDLIN(1893)					 ::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + 60),val2);
            				}
HXLINE(1894)				{
HXLINE(1894)					 ::lime::utils::ArrayBufferView this7 = this->_hx___vertexBufferData;
HXDLIN(1894)					 ::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + 72),uvHeight);
            				}
HXLINE(1895)				{
HXLINE(1895)					 ::lime::utils::ArrayBufferView this8 = this->_hx___vertexBufferData;
HXDLIN(1895)					Float val3 = ( (Float)(this->width) );
HXDLIN(1895)					 ::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + 112),val3);
            				}
HXLINE(1896)				{
HXLINE(1896)					 ::lime::utils::ArrayBufferView this9 = this->_hx___vertexBufferData;
HXDLIN(1896)					 ::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + 124),uvWidth);
            				}
HXLINE(1898)				this->_hx___vertexBuffer = context->createVertexBuffer(3,14,null());
            			}
HXLINE(1923)			this->_hx___vertexBuffer->uploadFromTypedArray(this->_hx___vertexBufferData,null());
            		}
HXLINE(1997)		return this->_hx___vertexBuffer;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,getVertexBuffer,return )

int BitmapData_obj::getPixel32(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2108_getPixel32)
HXLINE(2109)		if (!(this->readable)) {
HXLINE(2109)			return 0;
            		}
HXLINE(2111)		return this->image->getPixel32(x,y,1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel32,return )

 ::Dynamic BitmapData_obj::getSurface(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2150_getSurface)
HXLINE(2152)		if (!(this->readable)) {
HXLINE(2152)			return null();
            		}
HXLINE(2154)		if (::hx::IsNull( this->_hx___surface )) {
HXLINE(2156)			this->_hx___surface = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::fromImage(this->image);
            		}
HXLINE(2159)		return this->_hx___surface;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,getSurface,return )

 ::openfl::display3D::textures::TextureBase BitmapData_obj::getTexture( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2174_getTexture)
HXLINE(2175)		if (!(this->_hx___isValid)) {
HXLINE(2175)			return null();
            		}
HXLINE(2177)		bool _hx_tmp;
HXDLIN(2177)		if (::hx::IsNotNull( this->_hx___texture )) {
HXLINE(2177)			_hx_tmp = ::hx::IsNotEq( this->_hx___textureContext,context->_hx___context );
            		}
            		else {
HXLINE(2177)			_hx_tmp = true;
            		}
HXDLIN(2177)		if (_hx_tmp) {
HXLINE(2179)			this->_hx___textureContext = context->_hx___context;
HXLINE(2180)			this->_hx___texture = context->createRectangleTexture(this->width,this->height,1,false);
HXLINE(2187)			this->_hx___textureVersion = -1;
            		}
HXLINE(2195)		bool _hx_tmp1;
HXDLIN(2195)		if (::hx::IsNotNull( this->image )) {
HXLINE(2195)			_hx_tmp1 = (this->image->version > this->_hx___textureVersion);
            		}
            		else {
HXLINE(2195)			_hx_tmp1 = false;
            		}
HXDLIN(2195)		if (_hx_tmp1) {
HXLINE(2197)			if (::hx::IsNotNull( this->_hx___surface )) {
HXLINE(2199)				::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(this->_hx___surface);
            			}
HXLINE(2202)			 ::lime::graphics::Image textureImage = this->image;
HXLINE(2215)			bool _hx_tmp;
HXDLIN(2215)			if (!(textureImage->get_premultiplied())) {
HXLINE(2215)				_hx_tmp = textureImage->get_transparent();
            			}
            			else {
HXLINE(2215)				_hx_tmp = false;
            			}
HXDLIN(2215)			if (_hx_tmp) {
HXLINE(2217)				textureImage = textureImage->clone();
HXLINE(2218)				textureImage->set_premultiplied(true);
            			}
HXLINE(2225)			this->_hx___texture->_hx___uploadFromImage(textureImage);
HXLINE(2227)			this->_hx___textureVersion = this->image->version;
HXLINE(2229)			this->_hx___textureWidth = textureImage->buffer->width;
HXLINE(2230)			this->_hx___textureHeight = textureImage->buffer->height;
            		}
HXLINE(2233)		bool _hx_tmp2;
HXDLIN(2233)		if (!(this->readable)) {
HXLINE(2233)			_hx_tmp2 = ::hx::IsNotNull( this->image );
            		}
            		else {
HXLINE(2233)			_hx_tmp2 = false;
            		}
HXDLIN(2233)		if (_hx_tmp2) {
HXLINE(2235)			this->_hx___surface = null();
HXLINE(2236)			this->image = null();
            		}
HXLINE(2240)		return this->_hx___texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getTexture,return )

void BitmapData_obj::lock(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2528_lock)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,lock,(void))

void BitmapData_obj::setPixel(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2840_setPixel)
HXLINE(2841)		if (!(this->readable)) {
HXLINE(2841)			return;
            		}
HXLINE(2843)		this->image->setPixel(x,y,color,1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel,(void))

void BitmapData_obj::setPixel32(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2879_setPixel32)
HXLINE(2880)		if (!(this->readable)) {
HXLINE(2880)			return;
            		}
HXLINE(2882)		this->image->setPixel32(x,y,color,1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel32,(void))

void BitmapData_obj::setPixels( ::openfl::geom::Rectangle rect, ::openfl::utils::ByteArrayData byteArray){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2906_setPixels)
HXLINE(2907)		bool _hx_tmp;
HXDLIN(2907)		if (this->readable) {
HXLINE(2907)			_hx_tmp = ::hx::IsNull( rect );
            		}
            		else {
HXLINE(2907)			_hx_tmp = true;
            		}
HXDLIN(2907)		if (_hx_tmp) {
HXLINE(2907)			return;
            		}
HXLINE(2909)		Float length = ((rect->width * rect->height) * ( (Float)(4) ));
HXLINE(2910)		int _hx_int = (byteArray->length - byteArray->position);
HXDLIN(2910)		Float _hx_tmp1;
HXDLIN(2910)		if ((_hx_int < 0)) {
HXLINE(2910)			_hx_tmp1 = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(2910)			_hx_tmp1 = (_hx_int + ((Float)0.0));
            		}
HXDLIN(2910)		if ((_hx_tmp1 < length)) {
HXLINE(2910)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("End of file was encountered.",d3,7b,d9,4f),2030)));
            		}
HXLINE(2913)		 ::lime::graphics::Image _hx_tmp2 = this->image;
HXDLIN(2913)		 ::lime::math::Rectangle _hx_tmp3 = rect->_hx___toLimeRectangle();
HXDLIN(2913)		 ::lime::utils::BytePointerData _hx_tmp4 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toBytePointer(byteArray);
HXDLIN(2913)		_hx_tmp2->setPixels(_hx_tmp3,_hx_tmp4,1,::openfl::utils::_Endian::Endian_Impl__obj::toLimeEndian(byteArray->_hx___endian));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setPixels,(void))

void BitmapData_obj::unlock( ::openfl::geom::Rectangle changeRect){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3022_unlock)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,unlock,(void))

void BitmapData_obj::_hx___applyAlpha( ::openfl::utils::ByteArrayData alpha){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3025___applyAlpha)
HXLINE(3031)		 ::lime::utils::ArrayBufferView data = this->image->buffer->data;
HXLINE(3033)		{
HXLINE(3033)			int _g = 0;
HXDLIN(3033)			int _g1 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(alpha);
HXDLIN(3033)			while((_g < _g1)){
HXLINE(3033)				_g = (_g + 1);
HXDLIN(3033)				int i = (_g - 1);
HXLINE(3035)				{
HXLINE(3035)					int val = alpha->readUnsignedByte();
HXDLIN(3035)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + ((i * 4) + 3)),val);
            				}
            			}
            		}
HXLINE(3038)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___applyAlpha,(void))

void BitmapData_obj::_hx___drawCairo(::Dynamic source, ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3042___drawCairo)
HXLINE(3044)		 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXLINE(3046)		if (::hx::IsEq( source,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(3048)			source = this->clone();
            		}
HXLINE(3051)		if (!(renderer->_hx___allowSmoothing)) {
HXLINE(3051)			cairo->set_antialias(1);
            		}
HXLINE(3053)		renderer->_hx___render(source);
HXLINE(3055)		if (!(renderer->_hx___allowSmoothing)) {
HXLINE(3055)			cairo->set_antialias(5);
            		}
HXLINE(3057)		::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(cairo->get_target());
HXLINE(3059)		this->image->dirty = true;
HXLINE(3060)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___drawCairo,(void))

void BitmapData_obj::_hx___drawGL(::Dynamic source, ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3083___drawGL)
HXLINE(3084)		 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE(3086)		 ::openfl::display3D::textures::TextureBase cacheRTT = context->_hx___state->renderToTexture;
HXLINE(3087)		bool cacheRTTDepthStencil = context->_hx___state->renderToTextureDepthStencil;
HXLINE(3088)		int cacheRTTAntiAlias = context->_hx___state->renderToTextureAntiAlias;
HXLINE(3089)		int cacheRTTSurfaceSelector = context->_hx___state->renderToTextureSurfaceSelector;
HXLINE(3091)		context->setRenderToTexture(this->getTexture(context),true,null(),null());
HXLINE(3093)		renderer->_hx___render(source);
HXLINE(3095)		if (::hx::IsNotNull( cacheRTT )) {
HXLINE(3097)			context->setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
            		}
            		else {
HXLINE(3101)			context->setRenderToBackBuffer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___drawGL,(void))

void BitmapData_obj::_hx___fillRect( ::openfl::geom::Rectangle rect,int color,bool allowFramebuffer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3106___fillRect)
HXLINE(3108)		if (::hx::IsNull( rect )) {
HXLINE(3108)			return;
            		}
HXLINE(3110)		bool _hx_tmp;
HXDLIN(3110)		if (this->transparent) {
HXLINE(3110)			_hx_tmp = ((color & -16777216) == 0);
            		}
            		else {
HXLINE(3110)			_hx_tmp = false;
            		}
HXDLIN(3110)		if (_hx_tmp) {
HXLINE(3112)			color = 0;
            		}
HXLINE(3115)		bool _hx_tmp1;
HXDLIN(3115)		bool _hx_tmp2;
HXDLIN(3115)		bool _hx_tmp3;
HXDLIN(3115)		if (allowFramebuffer) {
HXLINE(3115)			_hx_tmp3 = ::hx::IsNotNull( this->_hx___texture );
            		}
            		else {
HXLINE(3115)			_hx_tmp3 = false;
            		}
HXDLIN(3115)		if (_hx_tmp3) {
HXLINE(3115)			_hx_tmp2 = ::hx::IsNotNull( this->_hx___texture->_hx___glFramebuffer );
            		}
            		else {
HXLINE(3115)			_hx_tmp2 = false;
            		}
HXDLIN(3115)		if (_hx_tmp2) {
HXLINE(3115)			_hx_tmp1 = (::openfl::Lib_obj::get_current()->stage->_hx___renderer->_hx___type == HX_("opengl",6f,64,94,21));
            		}
            		else {
HXLINE(3115)			_hx_tmp1 = false;
            		}
HXDLIN(3115)		if (_hx_tmp1) {
HXLINE(3120)			 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(::openfl::Lib_obj::get_current()->stage->_hx___renderer) );
HXLINE(3121)			 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE(3122)			int color1 = color;
HXLINE(3123)			bool useScissor = !(this->rect->equals(rect));
HXLINE(3125)			 ::openfl::display3D::textures::TextureBase cacheRTT = context->_hx___state->renderToTexture;
HXLINE(3126)			bool cacheRTTDepthStencil = context->_hx___state->renderToTextureDepthStencil;
HXLINE(3127)			int cacheRTTAntiAlias = context->_hx___state->renderToTextureAntiAlias;
HXLINE(3128)			int cacheRTTSurfaceSelector = context->_hx___state->renderToTextureSurfaceSelector;
HXLINE(3130)			context->setRenderToTexture(this->_hx___texture,null(),null(),null());
HXLINE(3132)			if (useScissor) {
HXLINE(3134)				context->setScissorRectangle(rect);
            			}
HXLINE(3137)			Float _hx_tmp;
HXDLIN(3137)			if (this->transparent) {
HXLINE(3137)				_hx_tmp = (( (Float)((::hx::UShr(color1,24) & 255)) ) / ( (Float)(255) ));
            			}
            			else {
HXLINE(3137)				_hx_tmp = ( (Float)(1) );
            			}
HXDLIN(3137)			context->clear((( (Float)((::hx::UShr(color1,16) & 255)) ) / ( (Float)(255) )),(( (Float)((::hx::UShr(color1,8) & 255)) ) / ( (Float)(255) )),(( (Float)((color1 & 255)) ) / ( (Float)(255) )),_hx_tmp,0,0,1);
HXLINE(3139)			if (useScissor) {
HXLINE(3141)				context->setScissorRectangle(null());
            			}
HXLINE(3144)			if (::hx::IsNotNull( cacheRTT )) {
HXLINE(3146)				context->setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
            			}
            			else {
HXLINE(3150)				context->setRenderToBackBuffer();
            			}
            		}
            		else {
HXLINE(3153)			if (this->readable) {
HXLINE(3155)				 ::lime::graphics::Image _hx_tmp = this->image;
HXDLIN(3155)				_hx_tmp->fillRect(rect->_hx___toLimeRectangle(),color,1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,_hx___fillRect,(void))

void BitmapData_obj::_hx___fromFile(::String path){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3182___fromFile)
HXLINE(3184)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromFile(path);
HXLINE(3185)		this->_hx___fromImage(image);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___fromFile,(void))

void BitmapData_obj::_hx___fromImage( ::lime::graphics::Image image){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3193___fromImage)
HXDLIN(3193)		bool _hx_tmp;
HXDLIN(3193)		if (::hx::IsNotNull( image )) {
HXDLIN(3193)			_hx_tmp = ::hx::IsNotNull( image->buffer );
            		}
            		else {
HXDLIN(3193)			_hx_tmp = false;
            		}
HXDLIN(3193)		if (_hx_tmp) {
HXLINE(3195)			this->image = image;
HXLINE(3197)			this->width = image->width;
HXLINE(3198)			this->height = image->height;
HXLINE(3199)			this->rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,image->width,image->height);
HXLINE(3201)			this->_hx___textureWidth = this->width;
HXLINE(3202)			this->_hx___textureHeight = this->height;
HXLINE(3205)			image->set_format(2);
HXLINE(3206)			image->set_premultiplied(true);
HXLINE(3209)			this->readable = true;
HXLINE(3210)			this->_hx___isValid = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___fromImage,(void))

void BitmapData_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3216___getBounds)
HXLINE(3217)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(3218)		this->rect->_hx___transform(bounds,matrix);
HXLINE(3219)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(3220)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___getBounds,(void))

void BitmapData_obj::_hx___setUVRect( ::openfl::display3D::Context3D context,Float x,Float y,Float width,Float height){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3307___setUVRect)
HXLINE(3308)		 ::openfl::display3D::VertexBuffer3D buffer = this->getVertexBuffer(context,null(),null());
HXLINE(3310)		bool _hx_tmp;
HXDLIN(3310)		if (::hx::IsNotNull( buffer )) {
HXLINE(3310)			bool _hx_tmp1;
HXDLIN(3310)			bool _hx_tmp2;
HXDLIN(3310)			if ((width == this->_hx___uvRect->width)) {
HXLINE(3310)				_hx_tmp2 = (height != this->_hx___uvRect->height);
            			}
            			else {
HXLINE(3310)				_hx_tmp2 = true;
            			}
HXDLIN(3310)			if (!(_hx_tmp2)) {
HXLINE(3310)				_hx_tmp1 = (x != this->_hx___uvRect->x);
            			}
            			else {
HXLINE(3310)				_hx_tmp1 = true;
            			}
HXDLIN(3310)			if (!(_hx_tmp1)) {
HXLINE(3310)				_hx_tmp = (y != this->_hx___uvRect->y);
            			}
            			else {
HXLINE(3310)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(3310)			_hx_tmp = false;
            		}
HXDLIN(3310)		if (_hx_tmp) {
HXLINE(3312)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(3314)			if (::hx::IsNull( this->_hx___uvRect )) {
HXLINE(3314)				this->_hx___uvRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXLINE(3315)			this->_hx___uvRect->setTo(x,y,width,height);
HXLINE(3317)			Float uvX;
HXDLIN(3317)			if ((this->_hx___textureWidth > 0)) {
HXLINE(3317)				uvX = (x / ( (Float)(this->_hx___textureWidth) ));
            			}
            			else {
HXLINE(3317)				uvX = ( (Float)(0) );
            			}
HXLINE(3318)			Float uvY;
HXDLIN(3318)			if ((this->_hx___textureHeight > 0)) {
HXLINE(3318)				uvY = (y / ( (Float)(this->_hx___textureHeight) ));
            			}
            			else {
HXLINE(3318)				uvY = ( (Float)(0) );
            			}
HXLINE(3319)			Float uvWidth;
HXDLIN(3319)			if ((this->_hx___textureWidth > 0)) {
HXLINE(3319)				uvWidth = (width / ( (Float)(this->_hx___textureWidth) ));
            			}
            			else {
HXLINE(3319)				uvWidth = ( (Float)(0) );
            			}
HXLINE(3320)			Float uvHeight;
HXDLIN(3320)			if ((this->_hx___textureHeight > 0)) {
HXLINE(3320)				uvHeight = (height / ( (Float)(this->_hx___textureHeight) ));
            			}
            			else {
HXLINE(3320)				uvHeight = ( (Float)(0) );
            			}
HXLINE(3322)			{
HXLINE(3322)				 ::lime::utils::ArrayBufferView this1 = this->_hx___vertexBufferData;
HXDLIN(3322)				 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,width);
            			}
HXLINE(3323)			{
HXLINE(3323)				 ::lime::utils::ArrayBufferView this2 = this->_hx___vertexBufferData;
HXDLIN(3323)				 ::__hxcpp_memory_set_float(this2->buffer->b,(this2->byteOffset + 4),height);
            			}
HXLINE(3324)			{
HXLINE(3324)				 ::lime::utils::ArrayBufferView this3 = this->_hx___vertexBufferData;
HXDLIN(3324)				Float val = (uvX + uvWidth);
HXDLIN(3324)				 ::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + 12),val);
            			}
HXLINE(3325)			{
HXLINE(3325)				 ::lime::utils::ArrayBufferView this4 = this->_hx___vertexBufferData;
HXDLIN(3325)				Float val1 = (uvY + uvHeight);
HXDLIN(3325)				 ::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + 16),val1);
            			}
HXLINE(3326)			{
HXLINE(3326)				 ::lime::utils::ArrayBufferView this5 = this->_hx___vertexBufferData;
HXDLIN(3326)				 ::__hxcpp_memory_set_float(this5->buffer->b,(this5->byteOffset + 60),height);
            			}
HXLINE(3327)			{
HXLINE(3327)				 ::lime::utils::ArrayBufferView this6 = this->_hx___vertexBufferData;
HXDLIN(3327)				 ::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + 68),uvX);
            			}
HXLINE(3328)			{
HXLINE(3328)				 ::lime::utils::ArrayBufferView this7 = this->_hx___vertexBufferData;
HXDLIN(3328)				Float val2 = (uvY + uvHeight);
HXDLIN(3328)				 ::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + 72),val2);
            			}
HXLINE(3329)			{
HXLINE(3329)				 ::lime::utils::ArrayBufferView this8 = this->_hx___vertexBufferData;
HXDLIN(3329)				 ::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + 112),width);
            			}
HXLINE(3330)			{
HXLINE(3330)				 ::lime::utils::ArrayBufferView this9 = this->_hx___vertexBufferData;
HXDLIN(3330)				Float val3 = (uvX + uvWidth);
HXDLIN(3330)				 ::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + 124),val3);
            			}
HXLINE(3331)			{
HXLINE(3331)				 ::lime::utils::ArrayBufferView this10 = this->_hx___vertexBufferData;
HXDLIN(3331)				 ::__hxcpp_memory_set_float(this10->buffer->b,(this10->byteOffset + 128),uvY);
            			}
HXLINE(3332)			{
HXLINE(3332)				 ::lime::utils::ArrayBufferView this11 = this->_hx___vertexBufferData;
HXDLIN(3332)				 ::__hxcpp_memory_set_float(this11->buffer->b,(this11->byteOffset + 180),uvX);
            			}
HXLINE(3333)			{
HXLINE(3333)				 ::lime::utils::ArrayBufferView this12 = this->_hx___vertexBufferData;
HXDLIN(3333)				 ::__hxcpp_memory_set_float(this12->buffer->b,(this12->byteOffset + 184),uvY);
            			}
HXLINE(3335)			this->_hx___vertexBuffer->uploadFromTypedArray(this->_hx___vertexBufferData,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,_hx___setUVRect,(void))

void BitmapData_obj::_hx___update(bool transformOnly,bool updateChildren){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3348___update)
HXDLIN(3348)		this->_hx___updateTransforms(null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___update,(void))

void BitmapData_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3352___updateTransforms)
HXLINE(3353)		if (::hx::IsNull( overrideTransform )) {
HXLINE(3355)			this->_hx___worldTransform->identity();
            		}
            		else {
HXLINE(3359)			this->_hx___worldTransform->copyFrom(overrideTransform);
            		}
HXLINE(3362)		this->_hx___renderTransform->copyFrom(this->_hx___worldTransform);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateTransforms,(void))

 ::lime::math::Vector2 BitmapData_obj::_hx___tempVector;

 ::openfl::display::BitmapData BitmapData_obj::fromFile(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1274_fromFile)
HXLINE(1278)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,0,0,true,0);
HXLINE(1279)		bitmapData->_hx___fromFile(path);
HXLINE(1280)		if (::hx::IsNotNull( bitmapData->image )) {
HXLINE(1280)			return bitmapData;
            		}
            		else {
HXLINE(1280)			return null();
            		}
HXDLIN(1280)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,fromFile,return )

 ::openfl::display::BitmapData BitmapData_obj::fromImage( ::lime::graphics::Image image,::hx::Null< bool >  __o_transparent){
            		bool transparent = __o_transparent.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1296_fromImage)
HXLINE(1297)		bool _hx_tmp;
HXDLIN(1297)		if (::hx::IsNotNull( image )) {
HXLINE(1297)			_hx_tmp = ::hx::IsNull( image->buffer );
            		}
            		else {
HXLINE(1297)			_hx_tmp = true;
            		}
HXDLIN(1297)		if (_hx_tmp) {
HXLINE(1297)			return null();
            		}
HXLINE(1299)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,0,0,transparent,0);
HXLINE(1300)		bitmapData->_hx___fromImage(image);
HXLINE(1301)		bitmapData->image->set_transparent(transparent);
HXLINE(1302)		if (::hx::IsNotNull( bitmapData->image )) {
HXLINE(1302)			return bitmapData;
            		}
            		else {
HXLINE(1302)			return null();
            		}
HXDLIN(1302)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromImage,return )


::hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__new(int width,int height,::hx::Null< bool >  __o_transparent,::hx::Null< int >  __o_fillColor) {
	::hx::ObjectPtr< BitmapData_obj > __this = new BitmapData_obj();
	__this->__construct(width,height,__o_transparent,__o_fillColor);
	return __this;
}

::hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__alloc(::hx::Ctx *_hx_ctx,int width,int height,::hx::Null< bool >  __o_transparent,::hx::Null< int >  __o_fillColor) {
	BitmapData_obj *__this = (BitmapData_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BitmapData_obj), true, "openfl.display.BitmapData"));
	*(void **)__this = BitmapData_obj::_hx_vtable;
	__this->__construct(width,height,__o_transparent,__o_fillColor);
	return __this;
}

BitmapData_obj::BitmapData_obj()
{
}

void BitmapData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapData);
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(readable,"readable");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(transparent,"transparent");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(_hx___drawableType,"__drawableType");
	HX_MARK_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_MARK_MEMBER_NAME(_hx___framebufferContext,"__framebufferContext");
	HX_MARK_MEMBER_NAME(_hx___indexBuffer,"__indexBuffer");
	HX_MARK_MEMBER_NAME(_hx___indexBufferContext,"__indexBufferContext");
	HX_MARK_MEMBER_NAME(_hx___indexBufferData,"__indexBufferData");
	HX_MARK_MEMBER_NAME(_hx___indexBufferGrid,"__indexBufferGrid");
	HX_MARK_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_MARK_MEMBER_NAME(_hx___mask,"__mask");
	HX_MARK_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_MARK_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_MARK_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_MARK_MEMBER_NAME(_hx___surface,"__surface");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___textureContext,"__textureContext");
	HX_MARK_MEMBER_NAME(_hx___textureHeight,"__textureHeight");
	HX_MARK_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
	HX_MARK_MEMBER_NAME(_hx___textureWidth,"__textureWidth");
	HX_MARK_MEMBER_NAME(_hx___uvRect,"__uvRect");
	HX_MARK_MEMBER_NAME(_hx___vertexBuffer,"__vertexBuffer");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferContext,"__vertexBufferContext");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferData,"__vertexBufferData");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferGrid,"__vertexBufferGrid");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferHeight,"__vertexBufferHeight");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferScaleX,"__vertexBufferScaleX");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferScaleY,"__vertexBufferScaleY");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferWidth,"__vertexBufferWidth");
	HX_MARK_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_MARK_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_END_CLASS();
}

void BitmapData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(readable,"readable");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(transparent,"transparent");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(_hx___drawableType,"__drawableType");
	HX_VISIT_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_VISIT_MEMBER_NAME(_hx___framebufferContext,"__framebufferContext");
	HX_VISIT_MEMBER_NAME(_hx___indexBuffer,"__indexBuffer");
	HX_VISIT_MEMBER_NAME(_hx___indexBufferContext,"__indexBufferContext");
	HX_VISIT_MEMBER_NAME(_hx___indexBufferData,"__indexBufferData");
	HX_VISIT_MEMBER_NAME(_hx___indexBufferGrid,"__indexBufferGrid");
	HX_VISIT_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_VISIT_MEMBER_NAME(_hx___mask,"__mask");
	HX_VISIT_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_VISIT_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_VISIT_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_VISIT_MEMBER_NAME(_hx___surface,"__surface");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___textureContext,"__textureContext");
	HX_VISIT_MEMBER_NAME(_hx___textureHeight,"__textureHeight");
	HX_VISIT_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
	HX_VISIT_MEMBER_NAME(_hx___textureWidth,"__textureWidth");
	HX_VISIT_MEMBER_NAME(_hx___uvRect,"__uvRect");
	HX_VISIT_MEMBER_NAME(_hx___vertexBuffer,"__vertexBuffer");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferContext,"__vertexBufferContext");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferData,"__vertexBufferData");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferGrid,"__vertexBufferGrid");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferHeight,"__vertexBufferHeight");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferScaleX,"__vertexBufferScaleX");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferScaleY,"__vertexBufferScaleY");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferWidth,"__vertexBufferWidth");
	HX_VISIT_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_VISIT_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
}

::hx::Val BitmapData_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return ::hx::Val( rect ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		if (HX_FIELD_EQ(inName,"lock") ) { return ::hx::Val( lock_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { return ::hx::Val( image ); }
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__mask") ) { return ::hx::Val( _hx___mask ); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return ::hx::Val( unlock_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return ::hx::Val( dispose_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { return ::hx::Val( readable ); }
		if (HX_FIELD_EQ(inName,"__uvRect") ) { return ::hx::Val( _hx___uvRect ); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return ::hx::Val( fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel") ) { return ::hx::Val( setPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drawGL") ) { return ::hx::Val( _hx___drawGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return ::hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { return ::hx::Val( _hx___isValid ); }
		if (HX_FIELD_EQ(inName,"__surface") ) { return ::hx::Val( _hx___surface ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return ::hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"setPixels") ) { return ::hx::Val( setPixels_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return ::hx::Val( copyPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { return ::hx::Val( getPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSurface") ) { return ::hx::Val( getSurface_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTexture") ) { return ::hx::Val( getTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { return ::hx::Val( setPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fillRect") ) { return ::hx::Val( _hx___fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return ::hx::Val( _hx___fromFile_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { return ::hx::Val( transparent ); }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { return ::hx::Val( copyChannel_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drawCairo") ) { return ::hx::Val( _hx___drawCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromImage") ) { return ::hx::Val( _hx___fromImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return ::hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setUVRect") ) { return ::hx::Val( _hx___setUVRect_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__renderable") ) { return ::hx::Val( _hx___renderable ); }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { return ::hx::Val( _hx___scrollRect ); }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { return ::hx::Val( _hx___worldAlpha ); }
		if (HX_FIELD_EQ(inName,"__applyAlpha") ) { return ::hx::Val( _hx___applyAlpha_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { return ::hx::Val( _hx___framebuffer ); }
		if (HX_FIELD_EQ(inName,"__indexBuffer") ) { return ::hx::Val( _hx___indexBuffer ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__drawableType") ) { return ::hx::Val( _hx___drawableType ); }
		if (HX_FIELD_EQ(inName,"__textureWidth") ) { return ::hx::Val( _hx___textureWidth ); }
		if (HX_FIELD_EQ(inName,"__vertexBuffer") ) { return ::hx::Val( _hx___vertexBuffer ); }
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return ::hx::Val( colorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"getIndexBuffer") ) { return ::hx::Val( getIndexBuffer_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureHeight") ) { return ::hx::Val( _hx___textureHeight ); }
		if (HX_FIELD_EQ(inName,"getVertexBuffer") ) { return ::hx::Val( getVertexBuffer_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__textureContext") ) { return ::hx::Val( _hx___textureContext ); }
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { return ::hx::Val( _hx___textureVersion ); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return ::hx::Val( _hx___worldTransform ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__indexBufferData") ) { return ::hx::Val( _hx___indexBufferData ); }
		if (HX_FIELD_EQ(inName,"__indexBufferGrid") ) { return ::hx::Val( _hx___indexBufferGrid ); }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { return ::hx::Val( _hx___renderTransform ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__vertexBufferData") ) { return ::hx::Val( _hx___vertexBufferData ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferGrid") ) { return ::hx::Val( _hx___vertexBufferGrid ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return ::hx::Val( _hx___updateTransforms_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__vertexBufferWidth") ) { return ::hx::Val( _hx___vertexBufferWidth ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__framebufferContext") ) { return ::hx::Val( _hx___framebufferContext ); }
		if (HX_FIELD_EQ(inName,"__indexBufferContext") ) { return ::hx::Val( _hx___indexBufferContext ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferHeight") ) { return ::hx::Val( _hx___vertexBufferHeight ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferScaleX") ) { return ::hx::Val( _hx___vertexBufferScaleX ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferScaleY") ) { return ::hx::Val( _hx___vertexBufferScaleY ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__vertexBufferContext") ) { return ::hx::Val( _hx___vertexBufferContext ); }
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { return ::hx::Val( _hx___worldColorTransform ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BitmapData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromImage") ) { outValue = fromImage_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__tempVector") ) { outValue = ( _hx___tempVector ); return true; }
	}
	return false;
}

::hx::Val BitmapData_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::lime::graphics::Image >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mask") ) { _hx___mask=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { readable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uvRect") ) { _hx___uvRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { _hx___isValid=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__surface") ) { _hx___surface=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::openfl::display3D::textures::TextureBase >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { transparent=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__renderable") ) { _hx___renderable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { _hx___scrollRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { _hx___worldAlpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { _hx___framebuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__indexBuffer") ) { _hx___indexBuffer=inValue.Cast<  ::openfl::display3D::IndexBuffer3D >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__drawableType") ) { _hx___drawableType=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textureWidth") ) { _hx___textureWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBuffer") ) { _hx___vertexBuffer=inValue.Cast<  ::openfl::display3D::VertexBuffer3D >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureHeight") ) { _hx___textureHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__textureContext") ) { _hx___textureContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { _hx___textureVersion=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__indexBufferData") ) { _hx___indexBufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__indexBufferGrid") ) { _hx___indexBufferGrid=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { _hx___renderTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__vertexBufferData") ) { _hx___vertexBufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferGrid") ) { _hx___vertexBufferGrid=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__vertexBufferWidth") ) { _hx___vertexBufferWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__framebufferContext") ) { _hx___framebufferContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__indexBufferContext") ) { _hx___indexBufferContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferHeight") ) { _hx___vertexBufferHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferScaleX") ) { _hx___vertexBufferScaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferScaleY") ) { _hx___vertexBufferScaleY=inValue.Cast< Float >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__vertexBufferContext") ) { _hx___vertexBufferContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { _hx___worldColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BitmapData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__tempVector") ) { _hx___tempVector=ioValue.Cast<  ::lime::math::Vector2 >(); return true; }
	}
	return false;
}

void BitmapData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("image",5b,1f,69,bd));
	outFields->push(HX_("readable",f0,1b,87,7d));
	outFields->push(HX_("rect",24,4d,a7,4b));
	outFields->push(HX_("transparent",52,2b,ba,22));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("__drawableType",98,b4,3c,42));
	outFields->push(HX_("__framebuffer",cd,55,c0,c2));
	outFields->push(HX_("__framebufferContext",a2,6b,52,89));
	outFields->push(HX_("__indexBuffer",92,a6,1e,3e));
	outFields->push(HX_("__indexBufferContext",7d,ed,2f,1d));
	outFields->push(HX_("__indexBufferData",dc,d9,26,67));
	outFields->push(HX_("__indexBufferGrid",78,5a,2f,69));
	outFields->push(HX_("__isValid",92,69,8c,4f));
	outFields->push(HX_("__mask",0c,a4,4e,f7));
	outFields->push(HX_("__renderable",10,b7,2c,2b));
	outFields->push(HX_("__renderTransform",16,b8,95,b1));
	outFields->push(HX_("__scrollRect",f1,56,fa,41));
	outFields->push(HX_("__surface",0d,b7,97,de));
	outFields->push(HX_("__texture",bb,19,2f,20));
	outFields->push(HX_("__textureContext",74,21,78,6f));
	outFields->push(HX_("__textureHeight",02,14,16,1d));
	outFields->push(HX_("__textureVersion",9d,72,f2,d2));
	outFields->push(HX_("__textureWidth",4b,e6,c2,e3));
	outFields->push(HX_("__uvRect",45,8f,b9,97));
	outFields->push(HX_("__vertexBuffer",a4,32,6a,91));
	outFields->push(HX_("__vertexBufferContext",ab,e7,39,35));
	outFields->push(HX_("__vertexBufferData",ee,d6,5e,32));
	outFields->push(HX_("__vertexBufferGrid",8a,57,67,34));
	outFields->push(HX_("__vertexBufferHeight",ab,41,bc,88));
	outFields->push(HX_("__vertexBufferScaleX",52,24,96,c2));
	outFields->push(HX_("__vertexBufferScaleY",53,24,96,c2));
	outFields->push(HX_("__vertexBufferWidth",c2,e0,77,d6));
	outFields->push(HX_("__worldAlpha",cc,d2,d6,c5));
	outFields->push(HX_("__worldColorTransform",5b,ce,21,a3));
	outFields->push(HX_("__worldTransform",da,a7,d8,9a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BitmapData_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(BitmapData_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsObject /*  ::lime::graphics::Image */ ,(int)offsetof(BitmapData_obj,image),HX_("image",5b,1f,69,bd)},
	{::hx::fsBool,(int)offsetof(BitmapData_obj,readable),HX_("readable",f0,1b,87,7d)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,rect),HX_("rect",24,4d,a7,4b)},
	{::hx::fsBool,(int)offsetof(BitmapData_obj,transparent),HX_("transparent",52,2b,ba,22)},
	{::hx::fsInt,(int)offsetof(BitmapData_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(BitmapData_obj,_hx___drawableType),HX_("__drawableType",98,b4,3c,42)},
	{::hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(BitmapData_obj,_hx___framebuffer),HX_("__framebuffer",cd,55,c0,c2)},
	{::hx::fsObject /*  ::lime::graphics::RenderContext */ ,(int)offsetof(BitmapData_obj,_hx___framebufferContext),HX_("__framebufferContext",a2,6b,52,89)},
	{::hx::fsObject /*  ::openfl::display3D::IndexBuffer3D */ ,(int)offsetof(BitmapData_obj,_hx___indexBuffer),HX_("__indexBuffer",92,a6,1e,3e)},
	{::hx::fsObject /*  ::lime::graphics::RenderContext */ ,(int)offsetof(BitmapData_obj,_hx___indexBufferContext),HX_("__indexBufferContext",7d,ed,2f,1d)},
	{::hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(BitmapData_obj,_hx___indexBufferData),HX_("__indexBufferData",dc,d9,26,67)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,_hx___indexBufferGrid),HX_("__indexBufferGrid",78,5a,2f,69)},
	{::hx::fsBool,(int)offsetof(BitmapData_obj,_hx___isValid),HX_("__isValid",92,69,8c,4f)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(BitmapData_obj,_hx___mask),HX_("__mask",0c,a4,4e,f7)},
	{::hx::fsBool,(int)offsetof(BitmapData_obj,_hx___renderable),HX_("__renderable",10,b7,2c,2b)},
	{::hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(BitmapData_obj,_hx___renderTransform),HX_("__renderTransform",16,b8,95,b1)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,_hx___scrollRect),HX_("__scrollRect",f1,56,fa,41)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BitmapData_obj,_hx___surface),HX_("__surface",0d,b7,97,de)},
	{::hx::fsObject /*  ::openfl::display3D::textures::TextureBase */ ,(int)offsetof(BitmapData_obj,_hx___texture),HX_("__texture",bb,19,2f,20)},
	{::hx::fsObject /*  ::lime::graphics::RenderContext */ ,(int)offsetof(BitmapData_obj,_hx___textureContext),HX_("__textureContext",74,21,78,6f)},
	{::hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureHeight),HX_("__textureHeight",02,14,16,1d)},
	{::hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureVersion),HX_("__textureVersion",9d,72,f2,d2)},
	{::hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureWidth),HX_("__textureWidth",4b,e6,c2,e3)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,_hx___uvRect),HX_("__uvRect",45,8f,b9,97)},
	{::hx::fsObject /*  ::openfl::display3D::VertexBuffer3D */ ,(int)offsetof(BitmapData_obj,_hx___vertexBuffer),HX_("__vertexBuffer",a4,32,6a,91)},
	{::hx::fsObject /*  ::lime::graphics::RenderContext */ ,(int)offsetof(BitmapData_obj,_hx___vertexBufferContext),HX_("__vertexBufferContext",ab,e7,39,35)},
	{::hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(BitmapData_obj,_hx___vertexBufferData),HX_("__vertexBufferData",ee,d6,5e,32)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,_hx___vertexBufferGrid),HX_("__vertexBufferGrid",8a,57,67,34)},
	{::hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___vertexBufferHeight),HX_("__vertexBufferHeight",ab,41,bc,88)},
	{::hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___vertexBufferScaleX),HX_("__vertexBufferScaleX",52,24,96,c2)},
	{::hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___vertexBufferScaleY),HX_("__vertexBufferScaleY",53,24,96,c2)},
	{::hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___vertexBufferWidth),HX_("__vertexBufferWidth",c2,e0,77,d6)},
	{::hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___worldAlpha),HX_("__worldAlpha",cc,d2,d6,c5)},
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(BitmapData_obj,_hx___worldColorTransform),HX_("__worldColorTransform",5b,ce,21,a3)},
	{::hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(BitmapData_obj,_hx___worldTransform),HX_("__worldTransform",da,a7,d8,9a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo BitmapData_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::lime::math::Vector2 */ ,(void *) &BitmapData_obj::_hx___tempVector,HX_("__tempVector",17,ea,60,eb)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String BitmapData_obj_sMemberFields[] = {
	HX_("height",e7,07,4c,02),
	HX_("image",5b,1f,69,bd),
	HX_("readable",f0,1b,87,7d),
	HX_("rect",24,4d,a7,4b),
	HX_("transparent",52,2b,ba,22),
	HX_("width",06,b6,62,ca),
	HX_("__drawableType",98,b4,3c,42),
	HX_("__framebuffer",cd,55,c0,c2),
	HX_("__framebufferContext",a2,6b,52,89),
	HX_("__indexBuffer",92,a6,1e,3e),
	HX_("__indexBufferContext",7d,ed,2f,1d),
	HX_("__indexBufferData",dc,d9,26,67),
	HX_("__indexBufferGrid",78,5a,2f,69),
	HX_("__isValid",92,69,8c,4f),
	HX_("__mask",0c,a4,4e,f7),
	HX_("__renderable",10,b7,2c,2b),
	HX_("__renderTransform",16,b8,95,b1),
	HX_("__scrollRect",f1,56,fa,41),
	HX_("__surface",0d,b7,97,de),
	HX_("__texture",bb,19,2f,20),
	HX_("__textureContext",74,21,78,6f),
	HX_("__textureHeight",02,14,16,1d),
	HX_("__textureVersion",9d,72,f2,d2),
	HX_("__textureWidth",4b,e6,c2,e3),
	HX_("__uvRect",45,8f,b9,97),
	HX_("__vertexBuffer",a4,32,6a,91),
	HX_("__vertexBufferContext",ab,e7,39,35),
	HX_("__vertexBufferData",ee,d6,5e,32),
	HX_("__vertexBufferGrid",8a,57,67,34),
	HX_("__vertexBufferHeight",ab,41,bc,88),
	HX_("__vertexBufferScaleX",52,24,96,c2),
	HX_("__vertexBufferScaleY",53,24,96,c2),
	HX_("__vertexBufferWidth",c2,e0,77,d6),
	HX_("__worldAlpha",cc,d2,d6,c5),
	HX_("__worldColorTransform",5b,ce,21,a3),
	HX_("__worldTransform",da,a7,d8,9a),
	HX_("clone",5d,13,63,48),
	HX_("colorTransform",89,d7,3f,ad),
	HX_("copyChannel",8e,7d,e6,22),
	HX_("copyPixels",c2,54,6e,42),
	HX_("dispose",9f,80,4c,bb),
	HX_("draw",04,2c,70,42),
	HX_("fillRect",47,45,b9,6c),
	HX_("getIndexBuffer",bc,b8,44,7d),
	HX_("getVertexBuffer",3a,05,94,93),
	HX_("getPixel32",af,a6,68,d7),
	HX_("getSurface",37,ec,aa,ac),
	HX_("getTexture",e5,4e,42,ee),
	HX_("lock",eb,9b,b7,47),
	HX_("setPixel",84,2f,d8,d0),
	HX_("setPixel32",23,45,e6,da),
	HX_("setPixels",6f,64,51,ec),
	HX_("unlock",c4,a2,8c,65),
	HX_("__applyAlpha",30,9e,7b,05),
	HX_("__drawCairo",c4,ae,50,37),
	HX_("__drawGL",49,de,05,88),
	HX_("__fillRect",67,b8,f1,0f),
	HX_("__fromFile",26,10,c0,44),
	HX_("__fromImage",71,52,1e,a0),
	HX_("__getBounds",8b,58,a0,10),
	HX_("__setUVRect",27,52,8b,10),
	HX_("__update",29,f1,34,2f),
	HX_("__updateTransforms",10,f4,b0,50),
	::String(null()) };

static void BitmapData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___tempVector,"__tempVector");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___tempVector,"__tempVector");
};

#endif

::hx::Class BitmapData_obj::__mClass;

static ::String BitmapData_obj_sStaticFields[] = {
	HX_("__tempVector",17,ea,60,eb),
	HX_("fromFile",06,9d,87,a1),
	HX_("fromImage",91,09,f2,71),
	::String(null())
};

void BitmapData_obj::__register()
{
	BitmapData_obj _hx_dummy;
	BitmapData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.display.BitmapData",a3,12,41,9a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapData_obj::__GetStatic;
	__mClass->mSetStaticField = &BitmapData_obj::__SetStatic;
	__mClass->mMarkFunc = BitmapData_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BitmapData_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BitmapData_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BitmapData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BitmapData_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_124_boot)
HXDLIN( 124)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(::hx::Anon_obj::Create(8)
            				->setFixed(0,HX_("__framebufferContext",a2,6b,52,89), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(1,HX_("__fromImage",71,52,1e,a0), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(2,HX_("getSurface",37,ec,aa,ac), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(3,HX_("image",5b,1f,69,bd), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(4,HX_("__surface",0d,b7,97,de), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(5,HX_("__indexBufferContext",7d,ed,2f,1d), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(6,HX_("__vertexBufferContext",ab,e7,39,35), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(7,HX_("__textureContext",74,21,78,6f), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c))))))));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_131_boot)
HXDLIN( 131)		_hx___tempVector =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            	}
}

} // end namespace openfl
} // end namespace display
