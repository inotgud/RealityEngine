// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ds_ArraySort
#include <haxe/ds/ArraySort.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeWindow
#include <lime/_internal/backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_Int_Void
#include <lime/app/_Event_Float_Float_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_Void
#include <lime/app/_Event_Float_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_lime_ui_MouseButton_Void
#include <lime/app/_Event_Float_Float_lime_ui_MouseButton_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_lime_ui_MouseWheelMode_Void
#include <lime/app/_Event_Float_Float_lime_ui_MouseWheelMode_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Int_Void
#include <lime/app/_Event_Int_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Int_Int_Void
#include <lime/app/_Event_String_Int_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_graphics_RenderContext_Void
#include <lime/app/_Event_lime_graphics_RenderContext_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_GamepadAxis_Float_Void
#include <lime/app/_Event_lime_ui_GamepadAxis_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_GamepadButton_Void
#include <lime/app/_Event_lime_ui_GamepadButton_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_Gamepad_Void
#include <lime/app/_Event_lime_ui_Gamepad_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_Touch_Void
#include <lime/app/_Event_lime_ui_Touch_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_Window_Void
#include <lime/app/_Event_lime_ui_Window_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_ui_Gamepad
#include <lime/ui/Gamepad.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_ui_MouseWheelMode
#include <lime/ui/MouseWheelMode.h>
#endif
#ifndef INCLUDED_lime_ui_Touch
#include <lime/ui/Touch.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__internal_Context3DState
#include <openfl/display3D/_internal/Context3DState.h>
#endif
#ifndef INCLUDED_openfl_events_ActivityEvent
#include <openfl/events/ActivityEvent.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_FullScreenEvent
#include <openfl/events/FullScreenEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvent
#include <openfl/events/UncaughtErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvents
#include <openfl/events/UncaughtErrorEvents.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_openfl_ui_GameInput
#include <openfl/ui/GameInput.h>
#endif
#ifndef INCLUDED_openfl_ui_Keyboard
#include <openfl/ui/Keyboard.h>
#endif
#ifndef INCLUDED_openfl_ui_Mouse
#include <openfl/ui/Mouse.h>
#endif
#ifndef INCLUDED_openfl_ui__MouseCursor_MouseCursor_Impl_
#include <openfl/ui/_MouseCursor/MouseCursor_Impl_.h>
#endif
#ifndef INCLUDED_openfl_utils__internal_TouchData
#include <openfl/utils/_internal/TouchData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e171466d8d112c10_948_new,"openfl.display.Stage","new",0x908e7106,"openfl.display.Stage.new","openfl/display/Stage.hx",948,0xadca4c2c)
static const Float _hx_array_data_5c7c3614_1[] = {
	(Float)255,(Float)255,(Float)255,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1145___broadcastEvent,"openfl.display.Stage","__broadcastEvent",0x79aa0c13,"openfl.display.Stage.__broadcastEvent","openfl/display/Stage.hx",1145,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1174___createRenderer,"openfl.display.Stage","__createRenderer",0x1d5b3f19,"openfl.display.Stage.__createRenderer","openfl/display/Stage.hx",1174,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1234___dispatchEvent,"openfl.display.Stage","__dispatchEvent",0xd6930186,"openfl.display.Stage.__dispatchEvent","openfl/display/Stage.hx",1234,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1252___dispatchPendingMouseEvent,"openfl.display.Stage","__dispatchPendingMouseEvent",0xd7687658,"openfl.display.Stage.__dispatchPendingMouseEvent","openfl/display/Stage.hx",1252,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1263___dispatchStack,"openfl.display.Stage","__dispatchStack",0xe4d9a0b4,"openfl.display.Stage.__dispatchStack","openfl/display/Stage.hx",1263,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1332___dispatchTarget,"openfl.display.Stage","__dispatchTarget",0xda90f865,"openfl.display.Stage.__dispatchTarget","openfl/display/Stage.hx",1332,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1347___drag,"openfl.display.Stage","__drag",0xf14b5a2e,"openfl.display.Stage.__drag","openfl/display/Stage.hx",1347,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1383___getInteractive,"openfl.display.Stage","__getInteractive",0xdc3c8ba6,"openfl.display.Stage.__getInteractive","openfl/display/Stage.hx",1383,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1393___globalToLocal,"openfl.display.Stage","__globalToLocal",0x7bdc8953,"openfl.display.Stage.__globalToLocal","openfl/display/Stage.hx",1393,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1404___handleError,"openfl.display.Stage","__handleError",0xdde7e406,"openfl.display.Stage.__handleError","openfl/display/Stage.hx",1404,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1458___onKey,"openfl.display.Stage","__onKey",0x83566246,"openfl.display.Stage.__onKey","openfl/display/Stage.hx",1458,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1546___onKey,"openfl.display.Stage","__onKey",0x83566246,"openfl.display.Stage.__onKey","openfl/display/Stage.hx",1546,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1693___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1693,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1694___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1694,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1695___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1695,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1696___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1696,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1697___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1697,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1698___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1698,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1699___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1699,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1700___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1700,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1701___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1701,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1702___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1702,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1703___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1703,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1704___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1704,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1705___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1705,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1706___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1706,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1707___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1707,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1708___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1708,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1709___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1709,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1710___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1710,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1711___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1711,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1715___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1715,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1716___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1716,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1717___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1717,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1718___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1718,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1690___onLimeCreateWindow,"openfl.display.Stage","__onLimeCreateWindow",0xf11d8dba,"openfl.display.Stage.__onLimeCreateWindow","openfl/display/Stage.hx",1690,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1726___onLimeGamepadAxisMove,"openfl.display.Stage","__onLimeGamepadAxisMove",0xbc003d25,"openfl.display.Stage.__onLimeGamepadAxisMove","openfl/display/Stage.hx",1726,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1742___onLimeGamepadButtonDown,"openfl.display.Stage","__onLimeGamepadButtonDown",0xb4532f07,"openfl.display.Stage.__onLimeGamepadButtonDown","openfl/display/Stage.hx",1742,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1758___onLimeGamepadButtonUp,"openfl.display.Stage","__onLimeGamepadButtonUp",0x883e39c0,"openfl.display.Stage.__onLimeGamepadButtonUp","openfl/display/Stage.hx",1758,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1786___onLimeGamepadConnect,"openfl.display.Stage","__onLimeGamepadConnect",0xae614a77,"openfl.display.Stage.__onLimeGamepadConnect","openfl/display/Stage.hx",1786,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1787___onLimeGamepadConnect,"openfl.display.Stage","__onLimeGamepadConnect",0xae614a77,"openfl.display.Stage.__onLimeGamepadConnect","openfl/display/Stage.hx",1787,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1788___onLimeGamepadConnect,"openfl.display.Stage","__onLimeGamepadConnect",0xae614a77,"openfl.display.Stage.__onLimeGamepadConnect","openfl/display/Stage.hx",1788,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1789___onLimeGamepadConnect,"openfl.display.Stage","__onLimeGamepadConnect",0xae614a77,"openfl.display.Stage.__onLimeGamepadConnect","openfl/display/Stage.hx",1789,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1772___onLimeGamepadConnect,"openfl.display.Stage","__onLimeGamepadConnect",0xae614a77,"openfl.display.Stage.__onLimeGamepadConnect","openfl/display/Stage.hx",1772,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1795___onLimeGamepadDisconnect,"openfl.display.Stage","__onLimeGamepadDisconnect",0x71332bef,"openfl.display.Stage.__onLimeGamepadDisconnect","openfl/display/Stage.hx",1795,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1809___onLimeKeyDown,"openfl.display.Stage","__onLimeKeyDown",0x7ac20eb3,"openfl.display.Stage.__onLimeKeyDown","openfl/display/Stage.hx",1809,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1816___onLimeKeyUp,"openfl.display.Stage","__onLimeKeyUp",0xd71b966c,"openfl.display.Stage.__onLimeKeyUp","openfl/display/Stage.hx",1816,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1824___onLimeModuleExit,"openfl.display.Stage","__onLimeModuleExit",0x39407018,"openfl.display.Stage.__onLimeModuleExit","openfl/display/Stage.hx",1824,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1843___onLimeMouseDown,"openfl.display.Stage","__onLimeMouseDown",0x5cfe3eb9,"openfl.display.Stage.__onLimeMouseDown","openfl/display/Stage.hx",1843,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1864___onLimeMouseMove,"openfl.display.Stage","__onLimeMouseMove",0x62f12968,"openfl.display.Stage.__onLimeMouseMove","openfl/display/Stage.hx",1864,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1877___onLimeMouseMoveRelative,"openfl.display.Stage","__onLimeMouseMoveRelative",0xa75b4a54,"openfl.display.Stage.__onLimeMouseMoveRelative","openfl/display/Stage.hx",1877,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1882___onLimeMouseUp,"openfl.display.Stage","__onLimeMouseUp",0x9eed98f2,"openfl.display.Stage.__onLimeMouseUp","openfl/display/Stage.hx",1882,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1903___onLimeMouseWheel,"openfl.display.Stage","__onLimeMouseWheel",0xed677a64,"openfl.display.Stage.__onLimeMouseWheel","openfl/display/Stage.hx",1903,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1919___onLimeRender,"openfl.display.Stage","__onLimeRender",0x264d8e84,"openfl.display.Stage.__onLimeRender","openfl/display/Stage.hx",1919,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2052___onLimeRenderContextLost,"openfl.display.Stage","__onLimeRenderContextLost",0xb143df4f,"openfl.display.Stage.__onLimeRenderContextLost","openfl/display/Stage.hx",2052,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2063___onLimeRenderContextRestored,"openfl.display.Stage","__onLimeRenderContextRestored",0xe7d4c441,"openfl.display.Stage.__onLimeRenderContextRestored","openfl/display/Stage.hx",2063,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2073___onLimeTextEdit,"openfl.display.Stage","__onLimeTextEdit",0x12dfe805,"openfl.display.Stage.__onLimeTextEdit","openfl/display/Stage.hx",2073,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2078___onLimeTextInput,"openfl.display.Stage","__onLimeTextInput",0xc546e1af,"openfl.display.Stage.__onLimeTextInput","openfl/display/Stage.hx",2078,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2110___onLimeTouchCancel,"openfl.display.Stage","__onLimeTouchCancel",0x3bd1e8ab,"openfl.display.Stage.__onLimeTouchCancel","openfl/display/Stage.hx",2110,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2123___onLimeTouchMove,"openfl.display.Stage","__onLimeTouchMove",0x7c090002,"openfl.display.Stage.__onLimeTouchMove","openfl/display/Stage.hx",2123,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2127___onLimeTouchEnd,"openfl.display.Stage","__onLimeTouchEnd",0xccdf900a,"openfl.display.Stage.__onLimeTouchEnd","openfl/display/Stage.hx",2127,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2138___onLimeTouchStart,"openfl.display.Stage","__onLimeTouchStart",0x837caa51,"openfl.display.Stage.__onLimeTouchStart","openfl/display/Stage.hx",2138,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2148___onLimeUpdate,"openfl.display.Stage","__onLimeUpdate",0xa829a937,"openfl.display.Stage.__onLimeUpdate","openfl/display/Stage.hx",2148,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2156___onLimeWindowActivate,"openfl.display.Stage","__onLimeWindowActivate",0xad67dcf1,"openfl.display.Stage.__onLimeWindowActivate","openfl/display/Stage.hx",2156,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2162___onLimeWindowClose,"openfl.display.Stage","__onLimeWindowClose",0x579d43ba,"openfl.display.Stage.__onLimeWindowClose","openfl/display/Stage.hx",2162,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2186___onLimeWindowCreate,"openfl.display.Stage","__onLimeWindowCreate",0xbfbbbcba,"openfl.display.Stage.__onLimeWindowCreate","openfl/display/Stage.hx",2186,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2197___onLimeWindowDeactivate,"openfl.display.Stage","__onLimeWindowDeactivate",0x3b1e68f2,"openfl.display.Stage.__onLimeWindowDeactivate","openfl/display/Stage.hx",2197,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2203___onLimeWindowDropFile,"openfl.display.Stage","__onLimeWindowDropFile",0xb1123789,"openfl.display.Stage.__onLimeWindowDropFile","openfl/display/Stage.hx",2203,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2206___onLimeWindowEnter,"openfl.display.Stage","__onLimeWindowEnter",0x7fc0991a,"openfl.display.Stage.__onLimeWindowEnter","openfl/display/Stage.hx",2206,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2211___onLimeWindowExpose,"openfl.display.Stage","__onLimeWindowExpose",0x0829e802,"openfl.display.Stage.__onLimeWindowExpose","openfl/display/Stage.hx",2211,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2218___onLimeWindowFocusIn,"openfl.display.Stage","__onLimeWindowFocusIn",0x34a1f65f,"openfl.display.Stage.__onLimeWindowFocusIn","openfl/display/Stage.hx",2218,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2246___onLimeWindowFocusOut,"openfl.display.Stage","__onLimeWindowFocusOut",0xd91a30d4,"openfl.display.Stage.__onLimeWindowFocusOut","openfl/display/Stage.hx",2246,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2276___onLimeWindowFullscreen,"openfl.display.Stage","__onLimeWindowFullscreen",0xf8d146f9,"openfl.display.Stage.__onLimeWindowFullscreen","openfl/display/Stage.hx",2276,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2290___onLimeWindowLeave,"openfl.display.Stage","__onLimeWindowLeave",0x818d60f9,"openfl.display.Stage.__onLimeWindowLeave","openfl/display/Stage.hx",2290,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2312___onLimeWindowMinimize,"openfl.display.Stage","__onLimeWindowMinimize",0xe935005c,"openfl.display.Stage.__onLimeWindowMinimize","openfl/display/Stage.hx",2312,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2319___onLimeWindowMove,"openfl.display.Stage","__onLimeWindowMove",0xd917ad4f,"openfl.display.Stage.__onLimeWindowMove","openfl/display/Stage.hx",2319,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2324___onLimeWindowResize,"openfl.display.Stage","__onLimeWindowResize",0x4c27afb2,"openfl.display.Stage.__onLimeWindowResize","openfl/display/Stage.hx",2324,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2347___onLimeWindowRestore,"openfl.display.Stage","__onLimeWindowRestore",0x5dcf17d0,"openfl.display.Stage.__onLimeWindowRestore","openfl/display/Stage.hx",2347,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2360___onMouse,"openfl.display.Stage","__onMouse",0xfccea68c,"openfl.display.Stage.__onMouse","openfl/display/Stage.hx",2360,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2691___onMouseWheel,"openfl.display.Stage","__onMouseWheel",0x6d35c26f,"openfl.display.Stage.__onMouseWheel","openfl/display/Stage.hx",2691,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2725___onTouch,"openfl.display.Stage","__onTouch",0x049ca826,"openfl.display.Stage.__onTouch","openfl/display/Stage.hx",2725,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2891___registerLimeModule,"openfl.display.Stage","__registerLimeModule",0x9fba419e,"openfl.display.Stage.__registerLimeModule","openfl/display/Stage.hx",2891,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2910___resize,"openfl.display.Stage","__resize",0x872a0aae,"openfl.display.Stage.__resize","openfl/display/Stage.hx",2910,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3000___setLogicalSize,"openfl.display.Stage","__setLogicalSize",0x16d2dd62,"openfl.display.Stage.__setLogicalSize","openfl/display/Stage.hx",3000,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3075___update,"openfl.display.Stage","__update",0x05b436c3,"openfl.display.Stage.__update","openfl/display/Stage.hx",3075,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3135_set_color,"openfl.display.Stage","set_color",0x4a345aec,"openfl.display.Stage.set_color","openfl/display/Stage.hx",3135,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3170_get_displayState,"openfl.display.Stage","get_displayState",0x7908a892,"openfl.display.Stage.get_displayState","openfl/display/Stage.hx",3170,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3174_set_displayState,"openfl.display.Stage","set_displayState",0xcf4a9606,"openfl.display.Stage.set_displayState","openfl/display/Stage.hx",3174,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3200_get_focus,"openfl.display.Stage","get_focus",0x21105d55,"openfl.display.Stage.get_focus","openfl/display/Stage.hx",3200,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3204_set_focus,"openfl.display.Stage","set_focus",0x04614961,"openfl.display.Stage.set_focus","openfl/display/Stage.hx",3204,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3234_get_frameRate,"openfl.display.Stage","get_frameRate",0x6a8511aa,"openfl.display.Stage.get_frameRate","openfl/display/Stage.hx",3234,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3244_set_frameRate,"openfl.display.Stage","set_frameRate",0xaf8af3b6,"openfl.display.Stage.set_frameRate","openfl/display/Stage.hx",3244,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3260_get_fullScreenSourceRect,"openfl.display.Stage","get_fullScreenSourceRect",0x045c3cfd,"openfl.display.Stage.get_fullScreenSourceRect","openfl/display/Stage.hx",3260,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3289_set_height,"openfl.display.Stage","set_height",0xdf60763e,"openfl.display.Stage.set_height","openfl/display/Stage.hx",3289,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3294_get_mouseX,"openfl.display.Stage","get_mouseX",0xa5a51a76,"openfl.display.Stage.get_mouseX","openfl/display/Stage.hx",3294,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3299_get_mouseY,"openfl.display.Stage","get_mouseY",0xa5a51a77,"openfl.display.Stage.get_mouseY","openfl/display/Stage.hx",3299,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3304_get_quality,"openfl.display.Stage","get_quality",0xceab1b7c,"openfl.display.Stage.get_quality","openfl/display/Stage.hx",3304,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3321_set_rotation,"openfl.display.Stage","set_rotation",0xa6542f55,"openfl.display.Stage.set_rotation","openfl/display/Stage.hx",3321,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3333_set_scaleMode,"openfl.display.Stage","set_scaleMode",0xa239bd16,"openfl.display.Stage.set_scaleMode","openfl/display/Stage.hx",3333,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3338_set_scaleX,"openfl.display.Stage","set_scaleX",0x193a58e5,"openfl.display.Stage.set_scaleX","openfl/display/Stage.hx",3338,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3343_set_scaleY,"openfl.display.Stage","set_scaleY",0x193a58e6,"openfl.display.Stage.set_scaleY","openfl/display/Stage.hx",3343,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3348_get_tabEnabled,"openfl.display.Stage","get_tabEnabled",0x42a8f40f,"openfl.display.Stage.get_tabEnabled","openfl/display/Stage.hx",3348,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3358_get_tabIndex,"openfl.display.Stage","get_tabIndex",0xb58deb20,"openfl.display.Stage.get_tabIndex","openfl/display/Stage.hx",3358,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3368_set_transform,"openfl.display.Stage","set_transform",0xbbf90f75,"openfl.display.Stage.set_transform","openfl/display/Stage.hx",3368,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3373_set_width,"openfl.display.Stage","set_width",0xca3a9f8f,"openfl.display.Stage.set_width","openfl/display/Stage.hx",3373,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3378_set_x,"openfl.display.Stage","set_x",0x86d03181,"openfl.display.Stage.set_x","openfl/display/Stage.hx",3378,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3383_set_y,"openfl.display.Stage","set_y",0x86d03182,"openfl.display.Stage.set_y","openfl/display/Stage.hx",3383,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_188_boot,"openfl.display.Stage","boot",0xe42d74cc,"openfl.display.Stage.boot","openfl/display/Stage.hx",188,0xadca4c2c)
namespace openfl{
namespace display{

void Stage_obj::__construct( ::lime::ui::Window window, ::Dynamic color){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_948_new)
HXLINE( 953)		super::__construct();
HXLINE( 955)		this->_hx___drawableType = 5;
HXLINE( 956)		this->set_name(null());
HXLINE( 958)		this->_hx___color = -1;
HXLINE( 959)		this->_hx___colorSplit = ::Array_obj< Float >::fromData( _hx_array_data_5c7c3614_1,3);
HXLINE( 960)		this->_hx___colorString = HX_("#FFFFFF",23,64,f1,28);
HXLINE( 961)		this->_hx___contentsScaleFactor = ( (Float)(1) );
HXLINE( 962)		this->_hx___currentTabOrderIndex = 0;
HXLINE( 963)		this->_hx___deltaTime = 0;
HXLINE( 964)		this->_hx___displayState = 2;
HXLINE( 965)		this->_hx___mouseX = ( (Float)(0) );
HXLINE( 966)		this->_hx___mouseY = ( (Float)(0) );
HXLINE( 967)		this->_hx___lastClickTime = 0;
HXLINE( 968)		this->_hx___logicalWidth = 0;
HXLINE( 969)		this->_hx___logicalHeight = 0;
HXLINE( 970)		this->_hx___displayMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 971)		this->_hx___displayRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 972)		this->_hx___renderDirty = true;
HXLINE( 974)		int length = null();
HXDLIN( 974)		bool fixed = null();
HXDLIN( 974)		::Array< ::Dynamic> array = null();
HXDLIN( 974)		this->stage3Ds =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,array,true);
HXLINE( 975)		{
HXLINE( 977)			{
HXLINE( 977)				::Dynamic this1 = this->stage3Ds;
HXDLIN( 977)				( ( ::openfl::_Vector::ObjectVector)(this1) )->push( ::openfl::display::Stage3D_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this)));
            			}
HXDLIN( 977)			{
HXLINE( 977)				::Dynamic this2 = this->stage3Ds;
HXDLIN( 977)				( ( ::openfl::_Vector::ObjectVector)(this2) )->push( ::openfl::display::Stage3D_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this)));
            			}
HXDLIN( 977)			{
HXLINE( 977)				::Dynamic this3 = this->stage3Ds;
HXDLIN( 977)				( ( ::openfl::_Vector::ObjectVector)(this3) )->push( ::openfl::display::Stage3D_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this)));
            			}
HXDLIN( 977)			{
HXLINE( 977)				::Dynamic this4 = this->stage3Ds;
HXDLIN( 977)				( ( ::openfl::_Vector::ObjectVector)(this4) )->push( ::openfl::display::Stage3D_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this)));
            			}
            		}
HXLINE( 980)		this->stage = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 982)		this->align = 6;
HXLINE( 983)		this->allowsFullScreen = true;
HXLINE( 984)		this->allowsFullScreenInteractive = true;
HXLINE( 985)		this->_hx___quality = 1;
HXLINE( 986)		this->_hx___scaleMode = 2;
HXLINE( 987)		this->showDefaultContextMenu = true;
HXLINE( 988)		this->softKeyboardRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 989)		this->stageFocusRect = true;
HXLINE( 997)		this->_hx___clearBeforeRender = true;
HXLINE( 998)		this->_hx___forceRender = false;
HXLINE( 999)		this->_hx___stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1000)		this->_hx___rollOutStack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1001)		this->_hx___mouseOutStack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1002)		this->_hx___touchData =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(1074)		this->application = window->application;
HXLINE(1075)		this->window = window;
HXLINE(1076)		this->set_color(color);
HXLINE(1079)		this->_hx___contentsScaleFactor = window->_hx___scale;
HXLINE(1080)		this->_hx___wasFullscreen = window->_hx___fullscreen;
HXLINE(1082)		this->_hx___resize();
HXLINE(1084)		if (::hx::IsNull( ::openfl::Lib_obj::get_current()->stage )) {
HXLINE(1086)			 ::openfl::display::Stage _hx_tmp = this->stage;
HXDLIN(1086)			_hx_tmp->addChild(::openfl::Lib_obj::get_current());
            		}
            	}

Dynamic Stage_obj::__CreateEmpty() { return new Stage_obj; }

void *Stage_obj::_hx_vtable = 0;

Dynamic Stage_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Stage_obj > _hx_result = new Stage_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Stage_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4af7dd8e) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x4af7dd8e;
		}
	} else {
		return inClassId==(int)0x52748750 || inClassId==(int)0x6b353933;
	}
}

static ::lime::app::IModule_obj _hx_openfl_display_Stage__hx_lime_app_IModule= {
	( void (::hx::Object::*)( ::lime::app::Application))&::openfl::display::Stage_obj::_hx___registerLimeModule,
};

void *Stage_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xf464d6e9: return &_hx_openfl_display_Stage__hx_lime_app_IModule;
	}
	return super::_hx_getInterface(inHash);
}

void Stage_obj::_hx___broadcastEvent( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1145___broadcastEvent)
HXDLIN(1145)		if (::openfl::display::DisplayObject_obj::_hx___broadcastEvents->exists(event->type)) {
HXLINE(1147)			::Array< ::Dynamic> dispatchers = ( (::Array< ::Dynamic>)(::openfl::display::DisplayObject_obj::_hx___broadcastEvents->get(event->type)) );
HXLINE(1149)			{
HXLINE(1149)				int _g = 0;
HXDLIN(1149)				while((_g < dispatchers->length)){
HXLINE(1149)					 ::openfl::display::DisplayObject dispatcher = dispatchers->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1149)					_g = (_g + 1);
HXLINE(1154)					bool _hx_tmp;
HXDLIN(1154)					if (::hx::IsNotEq( dispatcher->stage,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1154)						_hx_tmp = ::hx::IsNull( dispatcher->stage );
            					}
            					else {
HXLINE(1154)						_hx_tmp = true;
            					}
HXDLIN(1154)					if (_hx_tmp) {
HXLINE(1157)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1159)							dispatcher->_hx___dispatch(event);
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g = _hx_e;
HXLINE(   1)								{
HXLINE(   1)									null();
            								}
HXDLIN(   1)								 ::Dynamic e = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE(1163)								this->_hx___handleError(e);
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___broadcastEvent,(void))

void Stage_obj::_hx___createRenderer(){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1174___createRenderer)
HXLINE(1186)		int windowWidth = ::Std_obj::_hx_int((( (Float)(this->window->_hx___width) ) * this->window->_hx___scale));
HXLINE(1187)		int windowHeight = ::Std_obj::_hx_int((( (Float)(this->window->_hx___height) ) * this->window->_hx___scale));
HXLINE(1189)		::String _hx_switch_0 = this->window->context->type;
            		if (  (_hx_switch_0==HX_("cairo",88,30,19,41)) ){
HXLINE(1213)			this->_hx___renderer =  ::openfl::display::CairoRenderer_obj::__alloc( HX_CTX ,this->window->context->cairo);
HXDLIN(1213)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("canvas",d8,54,42,b8)) ){
HXLINE(1199)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("dom",82,42,4c,00)) ){
HXLINE(1205)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("opengl",6f,64,94,21)) ||  (_hx_switch_0==HX_("opengles",9d,f6,c9,fa)) ||  (_hx_switch_0==HX_("webgl",b9,4b,bc,c7)) ){
HXLINE(1193)			this->context3D =  ::openfl::display3D::Context3D_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),null(),null());
HXLINE(1194)			this->context3D->configureBackBuffer(windowWidth,windowHeight,0,true,true,true);
HXLINE(1195)			this->context3D->present();
HXLINE(1196)			this->_hx___renderer =  ::openfl::display::OpenGLRenderer_obj::__alloc( HX_CTX ,this->context3D,null());
HXLINE(1191)			goto _hx_goto_4;
            		}
            		/* default */{
            		}
            		_hx_goto_4:;
HXLINE(1219)		if (::hx::IsNotNull( this->_hx___renderer )) {
HXLINE(1221)			 ::Dynamic _hx_tmp = this->get_quality();
HXDLIN(1221)			this->_hx___renderer->_hx___allowSmoothing = ::hx::IsNotEq( _hx_tmp,2 );
HXLINE(1222)			this->_hx___renderer->_hx___worldTransform = this->_hx___displayMatrix;
HXLINE(1223)			this->_hx___renderer->_hx___stage = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1225)			this->_hx___renderer->_hx___resize(windowWidth,windowHeight);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,_hx___createRenderer,(void))

bool Stage_obj::_hx___dispatchEvent( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1234___dispatchEvent)
HXDLIN(1234)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1238)			return this->super::_hx___dispatchEvent(event);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
HXDLIN(   1)				 ::Dynamic e = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE(1244)				this->_hx___handleError(e);
HXLINE(1245)				return false;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1234)		return false;
            	}


void Stage_obj::_hx___dispatchPendingMouseEvent(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1252___dispatchPendingMouseEvent)
HXDLIN(1252)		if (this->_hx___pendingMouseEvent) {
HXLINE(1254)			this->_hx___onMouse(HX_("mouseMove",d6,9b,b5,f4),( (Float)(this->_hx___pendingMouseX) ),( (Float)(this->_hx___pendingMouseY) ),0);
HXLINE(1255)			this->_hx___pendingMouseEvent = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,_hx___dispatchPendingMouseEvent,(void))

void Stage_obj::_hx___dispatchStack( ::openfl::events::Event event,::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1263___dispatchStack)
HXDLIN(1263)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1267)			 ::openfl::display::DisplayObject target;
HXLINE(1268)			int length = stack->length;
HXLINE(1270)			if ((length == 0)) {
HXLINE(1272)				event->eventPhase = 2;
HXLINE(1273)				target = ( ( ::openfl::display::DisplayObject)(event->target) );
HXLINE(1274)				target->_hx___dispatch(event);
            			}
            			else {
HXLINE(1278)				event->eventPhase = 1;
HXLINE(1279)				event->target = stack->__get((stack->length - 1)).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE(1281)				{
HXLINE(1281)					int _g = 0;
HXDLIN(1281)					int _g1 = (length - 1);
HXDLIN(1281)					while((_g < _g1)){
HXLINE(1281)						_g = (_g + 1);
HXDLIN(1281)						int i = (_g - 1);
HXLINE(1283)						stack->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___dispatch(event);
HXLINE(1285)						if (event->_hx___isCanceled) {
HXLINE(1287)							return;
            						}
            					}
            				}
HXLINE(1291)				event->eventPhase = 2;
HXLINE(1292)				target = ( ( ::openfl::display::DisplayObject)(event->target) );
HXLINE(1293)				target->_hx___dispatch(event);
HXLINE(1295)				if (event->_hx___isCanceled) {
HXLINE(1297)					return;
            				}
HXLINE(1300)				if (event->bubbles) {
HXLINE(1302)					event->eventPhase = 3;
HXLINE(1303)					int i = (length - 2);
HXLINE(1305)					while((i >= 0)){
HXLINE(1307)						stack->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___dispatch(event);
HXLINE(1309)						if (event->_hx___isCanceled) {
HXLINE(1311)							return;
            						}
HXLINE(1314)						i = (i - 1);
            					}
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
HXDLIN(   1)				 ::Dynamic e = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE(1323)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___dispatchStack,(void))

bool Stage_obj::_hx___dispatchTarget( ::openfl::events::EventDispatcher target, ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1332___dispatchTarget)
HXDLIN(1332)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1334)			return target->_hx___dispatchEvent(event);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
HXDLIN(   1)				 ::Dynamic e = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE(1338)				this->_hx___handleError(e);
HXLINE(1339)				return false;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1332)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___dispatchTarget,return )

void Stage_obj::_hx___drag( ::openfl::geom::Point mouse){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1347___drag)
HXLINE(1348)		 ::openfl::display::DisplayObjectContainer parent = this->_hx___dragObject->parent;
HXLINE(1349)		if (::hx::IsNotNull( parent )) {
HXLINE(1351)			 ::openfl::geom::Matrix _this = parent->_hx___getWorldTransform();
HXDLIN(1351)			Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(1351)			if ((norm == 0)) {
HXLINE(1351)				mouse->x = -(_this->tx);
HXDLIN(1351)				mouse->y = -(_this->ty);
            			}
            			else {
HXLINE(1351)				Float px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - mouse->y)) + (_this->d * (mouse->x - _this->tx))));
HXDLIN(1351)				mouse->y = ((((Float)1.0) / norm) * ((_this->a * (mouse->y - _this->ty)) + (_this->b * (_this->tx - mouse->x))));
HXDLIN(1351)				mouse->x = px;
            			}
            		}
HXLINE(1354)		Float x = (mouse->x + this->_hx___dragOffsetX);
HXLINE(1355)		Float y = (mouse->y + this->_hx___dragOffsetY);
HXLINE(1357)		if (::hx::IsNotNull( this->_hx___dragBounds )) {
HXLINE(1359)			if ((x < this->_hx___dragBounds->x)) {
HXLINE(1361)				x = this->_hx___dragBounds->x;
            			}
            			else {
HXLINE(1363)				if ((x > this->_hx___dragBounds->get_right())) {
HXLINE(1365)					x = this->_hx___dragBounds->get_right();
            				}
            			}
HXLINE(1368)			if ((y < this->_hx___dragBounds->y)) {
HXLINE(1370)				y = this->_hx___dragBounds->y;
            			}
            			else {
HXLINE(1372)				if ((y > this->_hx___dragBounds->get_bottom())) {
HXLINE(1374)					y = this->_hx___dragBounds->get_bottom();
            				}
            			}
            		}
HXLINE(1378)		this->_hx___dragObject->set_x(x);
HXLINE(1379)		this->_hx___dragObject->set_y(y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___drag,(void))

bool Stage_obj::_hx___getInteractive(::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1383___getInteractive)
HXLINE(1384)		if (::hx::IsNotNull( stack )) {
HXLINE(1386)			stack->push(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1389)		return true;
            	}


 ::openfl::geom::Point Stage_obj::_hx___globalToLocal( ::openfl::geom::Point global, ::openfl::geom::Point local){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1393___globalToLocal)
HXLINE(1394)		if (::hx::IsNotEq( global,local )) {
HXLINE(1396)			local->copyFrom(global);
            		}
HXLINE(1399)		return local;
            	}


void Stage_obj::_hx___handleError( ::Dynamic e){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1404___handleError)
HXLINE(1405)		 ::openfl::events::UncaughtErrorEvent event =  ::openfl::events::UncaughtErrorEvent_obj::__alloc( HX_CTX ,HX_("uncaughtError",f3,98,8b,8b),true,true,e);
HXLINE(1407)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1409)			::openfl::Lib_obj::get_current()->_hx___loaderInfo->uncaughtErrorEvents->dispatchEvent(event);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1413)		if (!(event->_hx___preventDefault)) {
HXLINE(1416)			::Sys_obj::println(::Std_obj::string(::haxe::_CallStack::CallStack_Impl__obj::toString(::haxe::_CallStack::CallStack_Impl__obj::exceptionStack(null()))));
HXLINE(1417)			::Sys_obj::println(::Std_obj::string(::Std_obj::string(e)));
HXLINE(1421)			throw e;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___handleError,(void))

void Stage_obj::_hx___onKey(::String type,int keyCode,int modifier){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1458___onKey)
HXLINE(1459)		this->_hx___dispatchPendingMouseEvent();
HXLINE(1461)		::openfl::events::MouseEvent_obj::_hx___altKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier);
HXLINE(1462)		::openfl::events::MouseEvent_obj::_hx___commandKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier);
HXLINE(1463)		::openfl::events::MouseEvent_obj::_hx___ctrlKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier);
HXLINE(1464)		::openfl::events::MouseEvent_obj::_hx___shiftKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier);
HXLINE(1466)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE(1468)		if (::hx::IsNull( this->_hx___focus )) {
HXLINE(1470)			this->_hx___getInteractive(stack);
            		}
            		else {
HXLINE(1474)			this->_hx___focus->_hx___getInteractive(stack);
            		}
HXLINE(1477)		if ((stack->length > 0)) {
HXLINE(1479)			int keyLocation;
HXDLIN(1479)			switch((int)(keyCode)){
            				case (int)1073741908: case (int)1073741909: case (int)1073741910: case (int)1073741911: case (int)1073741912: case (int)1073741913: case (int)1073741914: case (int)1073741915: case (int)1073741916: case (int)1073741917: case (int)1073741918: case (int)1073741919: case (int)1073741920: case (int)1073741921: case (int)1073741922: case (int)1073741923: case (int)1073742044: {
HXLINE(1479)					keyLocation = 3;
            				}
            				break;
            				case (int)1073742048: case (int)1073742049: case (int)1073742050: case (int)1073742051: {
HXLINE(1479)					keyLocation = 1;
            				}
            				break;
            				case (int)1073742052: case (int)1073742053: case (int)1073742054: case (int)1073742055: {
HXLINE(1479)					keyLocation = 2;
            				}
            				break;
            				default:{
HXLINE(1479)					keyLocation = 0;
            				}
            			}
HXLINE(1480)			int keyCode1;
HXDLIN(1480)			switch((int)(keyCode)){
            				case (int)8: {
HXLINE(1480)					keyCode1 = 8;
            				}
            				break;
            				case (int)9: {
HXLINE(1480)					keyCode1 = 9;
            				}
            				break;
            				case (int)13: {
HXLINE(1480)					keyCode1 = 13;
            				}
            				break;
            				case (int)27: {
HXLINE(1480)					keyCode1 = 27;
            				}
            				break;
            				case (int)32: {
HXLINE(1480)					keyCode1 = 32;
            				}
            				break;
            				case (int)33: {
HXLINE(1480)					keyCode1 = 49;
            				}
            				break;
            				case (int)34: {
HXLINE(1480)					keyCode1 = 222;
            				}
            				break;
            				case (int)35: {
HXLINE(1480)					keyCode1 = 51;
            				}
            				break;
            				case (int)36: {
HXLINE(1480)					keyCode1 = 52;
            				}
            				break;
            				case (int)37: {
HXLINE(1480)					keyCode1 = 53;
            				}
            				break;
            				case (int)38: {
HXLINE(1480)					keyCode1 = 55;
            				}
            				break;
            				case (int)39: {
HXLINE(1480)					keyCode1 = 222;
            				}
            				break;
            				case (int)40: {
HXLINE(1480)					keyCode1 = 57;
            				}
            				break;
            				case (int)41: {
HXLINE(1480)					keyCode1 = 48;
            				}
            				break;
            				case (int)42: {
HXLINE(1480)					keyCode1 = 56;
            				}
            				break;
            				case (int)44: {
HXLINE(1480)					keyCode1 = 188;
            				}
            				break;
            				case (int)45: {
HXLINE(1480)					keyCode1 = 189;
            				}
            				break;
            				case (int)46: {
HXLINE(1480)					keyCode1 = 190;
            				}
            				break;
            				case (int)47: {
HXLINE(1480)					keyCode1 = 191;
            				}
            				break;
            				case (int)48: {
HXLINE(1480)					keyCode1 = 48;
            				}
            				break;
            				case (int)49: {
HXLINE(1480)					keyCode1 = 49;
            				}
            				break;
            				case (int)50: {
HXLINE(1480)					keyCode1 = 50;
            				}
            				break;
            				case (int)51: {
HXLINE(1480)					keyCode1 = 51;
            				}
            				break;
            				case (int)52: {
HXLINE(1480)					keyCode1 = 52;
            				}
            				break;
            				case (int)53: {
HXLINE(1480)					keyCode1 = 53;
            				}
            				break;
            				case (int)54: {
HXLINE(1480)					keyCode1 = 54;
            				}
            				break;
            				case (int)55: {
HXLINE(1480)					keyCode1 = 55;
            				}
            				break;
            				case (int)56: {
HXLINE(1480)					keyCode1 = 56;
            				}
            				break;
            				case (int)57: {
HXLINE(1480)					keyCode1 = 57;
            				}
            				break;
            				case (int)58: {
HXLINE(1480)					keyCode1 = 186;
            				}
            				break;
            				case (int)59: {
HXLINE(1480)					keyCode1 = 186;
            				}
            				break;
            				case (int)60: {
HXLINE(1480)					keyCode1 = 60;
            				}
            				break;
            				case (int)61: {
HXLINE(1480)					keyCode1 = 187;
            				}
            				break;
            				case (int)62: {
HXLINE(1480)					keyCode1 = 190;
            				}
            				break;
            				case (int)63: {
HXLINE(1480)					keyCode1 = 191;
            				}
            				break;
            				case (int)64: {
HXLINE(1480)					keyCode1 = 50;
            				}
            				break;
            				case (int)91: {
HXLINE(1480)					keyCode1 = 219;
            				}
            				break;
            				case (int)92: {
HXLINE(1480)					keyCode1 = 220;
            				}
            				break;
            				case (int)93: {
HXLINE(1480)					keyCode1 = 221;
            				}
            				break;
            				case (int)94: {
HXLINE(1480)					keyCode1 = 54;
            				}
            				break;
            				case (int)95: {
HXLINE(1480)					keyCode1 = 189;
            				}
            				break;
            				case (int)96: {
HXLINE(1480)					keyCode1 = 192;
            				}
            				break;
            				case (int)97: {
HXLINE(1480)					keyCode1 = 65;
            				}
            				break;
            				case (int)98: {
HXLINE(1480)					keyCode1 = 66;
            				}
            				break;
            				case (int)99: {
HXLINE(1480)					keyCode1 = 67;
            				}
            				break;
            				case (int)100: {
HXLINE(1480)					keyCode1 = 68;
            				}
            				break;
            				case (int)101: {
HXLINE(1480)					keyCode1 = 69;
            				}
            				break;
            				case (int)102: {
HXLINE(1480)					keyCode1 = 70;
            				}
            				break;
            				case (int)103: {
HXLINE(1480)					keyCode1 = 71;
            				}
            				break;
            				case (int)104: {
HXLINE(1480)					keyCode1 = 72;
            				}
            				break;
            				case (int)105: {
HXLINE(1480)					keyCode1 = 73;
            				}
            				break;
            				case (int)106: {
HXLINE(1480)					keyCode1 = 74;
            				}
            				break;
            				case (int)107: {
HXLINE(1480)					keyCode1 = 75;
            				}
            				break;
            				case (int)108: {
HXLINE(1480)					keyCode1 = 76;
            				}
            				break;
            				case (int)109: {
HXLINE(1480)					keyCode1 = 77;
            				}
            				break;
            				case (int)110: {
HXLINE(1480)					keyCode1 = 78;
            				}
            				break;
            				case (int)111: {
HXLINE(1480)					keyCode1 = 79;
            				}
            				break;
            				case (int)112: {
HXLINE(1480)					keyCode1 = 80;
            				}
            				break;
            				case (int)113: {
HXLINE(1480)					keyCode1 = 81;
            				}
            				break;
            				case (int)114: {
HXLINE(1480)					keyCode1 = 82;
            				}
            				break;
            				case (int)115: {
HXLINE(1480)					keyCode1 = 83;
            				}
            				break;
            				case (int)116: {
HXLINE(1480)					keyCode1 = 84;
            				}
            				break;
            				case (int)117: {
HXLINE(1480)					keyCode1 = 85;
            				}
            				break;
            				case (int)118: {
HXLINE(1480)					keyCode1 = 86;
            				}
            				break;
            				case (int)119: {
HXLINE(1480)					keyCode1 = 87;
            				}
            				break;
            				case (int)120: {
HXLINE(1480)					keyCode1 = 88;
            				}
            				break;
            				case (int)121: {
HXLINE(1480)					keyCode1 = 89;
            				}
            				break;
            				case (int)122: {
HXLINE(1480)					keyCode1 = 90;
            				}
            				break;
            				case (int)127: {
HXLINE(1480)					keyCode1 = 46;
            				}
            				break;
            				case (int)1073741881: {
HXLINE(1480)					keyCode1 = 20;
            				}
            				break;
            				case (int)1073741882: {
HXLINE(1480)					keyCode1 = 112;
            				}
            				break;
            				case (int)1073741883: {
HXLINE(1480)					keyCode1 = 113;
            				}
            				break;
            				case (int)1073741884: {
HXLINE(1480)					keyCode1 = 114;
            				}
            				break;
            				case (int)1073741885: {
HXLINE(1480)					keyCode1 = 115;
            				}
            				break;
            				case (int)1073741886: {
HXLINE(1480)					keyCode1 = 116;
            				}
            				break;
            				case (int)1073741887: {
HXLINE(1480)					keyCode1 = 117;
            				}
            				break;
            				case (int)1073741888: {
HXLINE(1480)					keyCode1 = 118;
            				}
            				break;
            				case (int)1073741889: {
HXLINE(1480)					keyCode1 = 119;
            				}
            				break;
            				case (int)1073741890: {
HXLINE(1480)					keyCode1 = 120;
            				}
            				break;
            				case (int)1073741891: {
HXLINE(1480)					keyCode1 = 121;
            				}
            				break;
            				case (int)1073741892: {
HXLINE(1480)					keyCode1 = 122;
            				}
            				break;
            				case (int)1073741893: {
HXLINE(1480)					keyCode1 = 123;
            				}
            				break;
            				case (int)1073741894: {
HXLINE(1480)					keyCode1 = 301;
            				}
            				break;
            				case (int)1073741895: {
HXLINE(1480)					keyCode1 = 145;
            				}
            				break;
            				case (int)1073741896: {
HXLINE(1480)					keyCode1 = 19;
            				}
            				break;
            				case (int)1073741897: {
HXLINE(1480)					keyCode1 = 45;
            				}
            				break;
            				case (int)1073741898: {
HXLINE(1480)					keyCode1 = 36;
            				}
            				break;
            				case (int)1073741899: {
HXLINE(1480)					keyCode1 = 33;
            				}
            				break;
            				case (int)1073741901: {
HXLINE(1480)					keyCode1 = 35;
            				}
            				break;
            				case (int)1073741902: {
HXLINE(1480)					keyCode1 = 34;
            				}
            				break;
            				case (int)1073741903: {
HXLINE(1480)					keyCode1 = 39;
            				}
            				break;
            				case (int)1073741904: {
HXLINE(1480)					keyCode1 = 37;
            				}
            				break;
            				case (int)1073741905: {
HXLINE(1480)					keyCode1 = 40;
            				}
            				break;
            				case (int)1073741906: {
HXLINE(1480)					keyCode1 = 38;
            				}
            				break;
            				case (int)1073741907: {
HXLINE(1480)					keyCode1 = 144;
            				}
            				break;
            				case (int)1073741908: {
HXLINE(1480)					keyCode1 = 111;
            				}
            				break;
            				case (int)1073741909: {
HXLINE(1480)					keyCode1 = 106;
            				}
            				break;
            				case (int)1073741910: {
HXLINE(1480)					keyCode1 = 109;
            				}
            				break;
            				case (int)1073741911: {
HXLINE(1480)					keyCode1 = 107;
            				}
            				break;
            				case (int)1073741912: {
HXLINE(1480)					keyCode1 = 13;
            				}
            				break;
            				case (int)1073741913: {
HXLINE(1480)					keyCode1 = 97;
            				}
            				break;
            				case (int)1073741914: {
HXLINE(1480)					keyCode1 = 98;
            				}
            				break;
            				case (int)1073741915: {
HXLINE(1480)					keyCode1 = 99;
            				}
            				break;
            				case (int)1073741916: {
HXLINE(1480)					keyCode1 = 100;
            				}
            				break;
            				case (int)1073741917: {
HXLINE(1480)					keyCode1 = 101;
            				}
            				break;
            				case (int)1073741918: {
HXLINE(1480)					keyCode1 = 102;
            				}
            				break;
            				case (int)1073741919: {
HXLINE(1480)					keyCode1 = 103;
            				}
            				break;
            				case (int)1073741920: {
HXLINE(1480)					keyCode1 = 104;
            				}
            				break;
            				case (int)1073741921: {
HXLINE(1480)					keyCode1 = 105;
            				}
            				break;
            				case (int)1073741922: {
HXLINE(1480)					keyCode1 = 96;
            				}
            				break;
            				case (int)1073741923: {
HXLINE(1480)					keyCode1 = 110;
            				}
            				break;
            				case (int)1073741925: {
HXLINE(1480)					keyCode1 = 302;
            				}
            				break;
            				case (int)1073741928: {
HXLINE(1480)					keyCode1 = 124;
            				}
            				break;
            				case (int)1073741929: {
HXLINE(1480)					keyCode1 = 125;
            				}
            				break;
            				case (int)1073741930: {
HXLINE(1480)					keyCode1 = 126;
            				}
            				break;
            				case (int)1073741982: {
HXLINE(1480)					keyCode1 = 13;
            				}
            				break;
            				case (int)1073742044: {
HXLINE(1480)					keyCode1 = 110;
            				}
            				break;
            				case (int)1073742048: {
HXLINE(1480)					keyCode1 = 17;
            				}
            				break;
            				case (int)1073742049: {
HXLINE(1480)					keyCode1 = 16;
            				}
            				break;
            				case (int)1073742050: {
HXLINE(1480)					keyCode1 = 18;
            				}
            				break;
            				case (int)1073742051: {
HXLINE(1480)					keyCode1 = 15;
            				}
            				break;
            				case (int)1073742052: {
HXLINE(1480)					keyCode1 = 17;
            				}
            				break;
            				case (int)1073742053: {
HXLINE(1480)					keyCode1 = 16;
            				}
            				break;
            				case (int)1073742054: {
HXLINE(1480)					keyCode1 = 18;
            				}
            				break;
            				case (int)1073742055: {
HXLINE(1480)					keyCode1 = 15;
            				}
            				break;
            				default:{
HXLINE(1480)					keyCode1 = keyCode;
            				}
            			}
HXLINE(1481)			int charCode = ::openfl::ui::Keyboard_obj::_hx___getCharCode(keyCode1,::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier));
HXLINE(1483)			bool _hx_tmp;
HXDLIN(1483)			bool _hx_tmp1;
HXDLIN(1483)			if ((type == HX_("keyUp",da,b9,fe,de))) {
HXLINE(1483)				if ((keyCode1 != 32)) {
HXLINE(1483)					_hx_tmp1 = (keyCode1 == 13);
            				}
            				else {
HXLINE(1483)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE(1483)				_hx_tmp1 = false;
            			}
HXDLIN(1483)			if (_hx_tmp1) {
HXLINE(1483)				_hx_tmp = ::Std_obj::isOfType(this->_hx___focus,::hx::ClassOf< ::openfl::display::Sprite >());
            			}
            			else {
HXLINE(1483)				_hx_tmp = false;
            			}
HXDLIN(1483)			if (_hx_tmp) {
HXLINE(1485)				 ::openfl::display::Sprite sprite = ::hx::TCast<  ::openfl::display::Sprite >::cast(this->_hx___focus);
HXLINE(1486)				bool _hx_tmp;
HXDLIN(1486)				if (sprite->get_buttonMode()) {
HXLINE(1486)					_hx_tmp = ::hx::IsEq( sprite->focusRect,true );
            				}
            				else {
HXLINE(1486)					_hx_tmp = false;
            				}
HXDLIN(1486)				if (_hx_tmp) {
HXLINE(1488)					 ::openfl::geom::Point localPoint = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE(1489)					 ::openfl::geom::Point targetPoint = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE(1490)					targetPoint->x = this->_hx___mouseX;
HXLINE(1491)					targetPoint->y = this->_hx___mouseY;
HXLINE(1496)					Float clickEvent = this->_hx___mouseX;
HXDLIN(1496)					Float clickEvent1 = this->_hx___mouseY;
HXDLIN(1496)					 ::openfl::events::MouseEvent clickEvent2 = ::openfl::events::MouseEvent_obj::_hx___create(HX_("click",48,7c,5e,48),0,clickEvent,clickEvent1,sprite->_hx___globalToLocal(targetPoint,localPoint),sprite,null());
HXLINE(1499)					this->_hx___dispatchStack(clickEvent2,stack);
HXLINE(1505)					::openfl::geom::Point_obj::_hx___pool->release(targetPoint);
HXLINE(1506)					::openfl::geom::Point_obj::_hx___pool->release(localPoint);
            				}
            			}
HXLINE(1513)			bool event;
HXDLIN(1513)			if (this->_hx___macKeyboard) {
HXLINE(1513)				if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier))) {
HXLINE(1513)					event = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier);
            				}
            				else {
HXLINE(1513)					event = true;
            				}
            			}
            			else {
HXLINE(1513)				event = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier);
            			}
HXDLIN(1513)			bool event1 = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier);
HXDLIN(1513)			bool event2 = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier);
HXDLIN(1513)			bool event3 = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier);
HXLINE(1512)			 ::openfl::events::KeyboardEvent event4 =  ::openfl::events::KeyboardEvent_obj::__alloc( HX_CTX ,type,true,true,charCode,keyCode1,keyLocation,event,event1,event2,event3,::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier));
HXLINE(1516)			stack->reverse();
HXLINE(1517)			this->_hx___dispatchStack(event4,stack);
HXLINE(1519)			if (event4->_hx___preventDefault) {
HXLINE(1521)				if ((type == HX_("keyDown",a1,69,47,9c))) {
HXLINE(1523)					this->window->onKeyDown->cancel();
            				}
            				else {
HXLINE(1527)					this->window->onKeyUp->cancel();
            				}
            			}
            			else {
HXLINE(1532)				bool _hx_tmp;
HXDLIN(1532)				if ((type == HX_("keyDown",a1,69,47,9c))) {
HXLINE(1532)					_hx_tmp = (keyCode1 == 9);
            				}
            				else {
HXLINE(1532)					_hx_tmp = false;
            				}
HXDLIN(1532)				if (_hx_tmp) {
HXLINE(1534)					::Array< ::Dynamic> tabStack = ::Array_obj< ::Dynamic>::__new();
HXLINE(1536)					this->_hx___tabTest(tabStack);
HXLINE(1538)					int nextIndex = -1;
HXLINE(1539)					 ::openfl::display::InteractiveObject nextObject = null();
HXLINE(1540)					int nextOffset;
HXDLIN(1540)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(1540)						nextOffset = -1;
            					}
            					else {
HXLINE(1540)						nextOffset = 1;
            					}
HXLINE(1542)					if ((tabStack->length > 1)) {
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            						int _hx_run( ::openfl::display::InteractiveObject a, ::openfl::display::InteractiveObject b){
            							HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1546___onKey)
HXLINE(1546)							int _hx_tmp = a->get_tabIndex();
HXDLIN(1546)							return (_hx_tmp - b->get_tabIndex());
            						}
            						HX_END_LOCAL_FUNC2(return)

HXLINE(1544)						::haxe::ds::ArraySort_obj::sort(tabStack, ::Dynamic(new _hx_Closure_0()));
HXLINE(1549)						if ((tabStack->__get((tabStack->length - 1)).StaticCast<  ::openfl::display::InteractiveObject >()->get_tabIndex() != -1)) {
HXLINE(1553)							int i = 0;
HXLINE(1554)							while((i < tabStack->length)){
HXLINE(1556)								if ((tabStack->__get(i).StaticCast<  ::openfl::display::InteractiveObject >()->get_tabIndex() > -1)) {
HXLINE(1558)									if ((i > 0)) {
HXLINE(1558)										tabStack->removeRange(0,i);
            									}
HXLINE(1559)									goto _hx_goto_16;
            								}
HXLINE(1562)								i = (i + 1);
            							}
            							_hx_goto_16:;
            						}
HXLINE(1566)						if (::hx::IsNotNull( this->get_focus() )) {
HXLINE(1568)							 ::openfl::display::InteractiveObject current = this->get_focus();
HXLINE(1569)							int index = tabStack->indexOf(current,null());
HXLINE(1570)							while(true){
HXLINE(1570)								bool _hx_tmp;
HXDLIN(1570)								if ((index == -1)) {
HXLINE(1570)									_hx_tmp = ::hx::IsNotNull( current );
            								}
            								else {
HXLINE(1570)									_hx_tmp = false;
            								}
HXDLIN(1570)								if (!(_hx_tmp)) {
HXLINE(1570)									goto _hx_goto_17;
            								}
HXLINE(1575)								 ::openfl::display::DisplayObjectContainer currentParent = current->parent;
HXLINE(1576)								bool _hx_tmp1;
HXDLIN(1576)								if (::hx::IsNotNull( currentParent )) {
HXLINE(1576)									_hx_tmp1 = currentParent->get_tabChildren();
            								}
            								else {
HXLINE(1576)									_hx_tmp1 = false;
            								}
HXDLIN(1576)								if (_hx_tmp1) {
HXLINE(1578)									int currentIndex = currentParent->getChildIndex(current);
HXLINE(1579)									if ((currentIndex == -1)) {
HXLINE(1581)										current = currentParent;
HXLINE(1582)										continue;
            									}
HXLINE(1584)									int i = (currentIndex + nextOffset);
HXLINE(1585)									while(true){
HXLINE(1585)										bool _hx_tmp;
HXDLIN(1585)										if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(1585)											_hx_tmp = (i >= 0);
            										}
            										else {
HXLINE(1585)											_hx_tmp = (i < currentParent->get_numChildren());
            										}
HXDLIN(1585)										if (!(_hx_tmp)) {
HXLINE(1585)											goto _hx_goto_18;
            										}
HXLINE(1587)										 ::openfl::display::DisplayObject sibling = currentParent->getChildAt(i);
HXLINE(1588)										if (::Std_obj::isOfType(sibling,::hx::ClassOf< ::openfl::display::InteractiveObject >())) {
HXLINE(1590)											 ::openfl::display::InteractiveObject interactiveSibling = ::hx::TCast<  ::openfl::display::InteractiveObject >::cast(sibling);
HXLINE(1591)											index = tabStack->indexOf(interactiveSibling,null());
HXLINE(1592)											if ((index != -1)) {
HXLINE(1594)												nextOffset = 0;
HXLINE(1595)												goto _hx_goto_18;
            											}
            										}
HXLINE(1598)										i = (i + nextOffset);
            									}
            									_hx_goto_18:;
            								}
            								else {
HXLINE(1601)									if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(1603)										index = tabStack->indexOf(currentParent,null());
HXLINE(1604)										if ((index != -1)) {
HXLINE(1604)											nextOffset = 0;
            										}
            									}
            								}
HXLINE(1606)								current = currentParent;
            							}
            							_hx_goto_17:;
HXLINE(1609)							if ((index < 0)) {
HXLINE(1609)								nextIndex = 0;
            							}
            							else {
HXLINE(1611)								nextIndex = (index + nextOffset);
            							}
            						}
            						else {
HXLINE(1615)							nextIndex = this->_hx___currentTabOrderIndex;
            						}
            					}
            					else {
HXLINE(1618)						if ((tabStack->length == 1)) {
HXLINE(1620)							nextObject = tabStack->__get(0).StaticCast<  ::openfl::display::InteractiveObject >();
HXLINE(1622)							if (::hx::IsEq( this->get_focus(),nextObject )) {
HXLINE(1622)								nextObject = null();
            							}
            						}
            					}
HXLINE(1625)					bool cancelTab;
HXDLIN(1625)					if ((nextIndex >= 0)) {
HXLINE(1625)						cancelTab = (nextIndex < tabStack->length);
            					}
            					else {
HXLINE(1625)						cancelTab = false;
            					}
HXLINE(1626)					bool _hx_tmp;
HXDLIN(1626)					if ((tabStack->length != 1)) {
HXLINE(1626)						if ((tabStack->length == 0)) {
HXLINE(1626)							_hx_tmp = ::hx::IsNotNull( this->get_focus() );
            						}
            						else {
HXLINE(1626)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE(1626)						_hx_tmp = true;
            					}
HXDLIN(1626)					if (_hx_tmp) {
HXLINE(1628)						nextIndex = 0;
            					}
            					else {
HXLINE(1630)						if ((tabStack->length > 1)) {
HXLINE(1632)							if ((nextIndex < 0)) {
HXLINE(1632)								nextIndex = (nextIndex + tabStack->length);
            							}
HXLINE(1634)							nextIndex = ::hx::Mod(nextIndex,tabStack->length);
HXLINE(1635)							nextObject = tabStack->__get(nextIndex).StaticCast<  ::openfl::display::InteractiveObject >();
HXLINE(1637)							if (::hx::IsEq( nextObject,this->get_focus() )) {
HXLINE(1639)								nextIndex = (nextIndex + nextOffset);
HXLINE(1641)								if ((nextIndex < 0)) {
HXLINE(1641)									nextIndex = (nextIndex + tabStack->length);
            								}
HXLINE(1643)								nextIndex = ::hx::Mod(nextIndex,tabStack->length);
HXLINE(1644)								nextObject = tabStack->__get(nextIndex).StaticCast<  ::openfl::display::InteractiveObject >();
            							}
            						}
            					}
HXLINE(1648)					 ::openfl::events::FocusEvent focusEvent = null();
HXLINE(1650)					if (::hx::IsNotNull( this->get_focus() )) {
HXLINE(1652)						focusEvent =  ::openfl::events::FocusEvent_obj::__alloc( HX_CTX ,HX_("keyFocusChange",09,9c,8e,e5),true,true,nextObject,::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier),0);
HXLINE(1654)						stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1656)						this->get_focus()->_hx___getInteractive(stack);
HXLINE(1657)						stack->reverse();
HXLINE(1659)						this->_hx___dispatchStack(focusEvent,stack);
HXLINE(1661)						if (focusEvent->isDefaultPrevented()) {
HXLINE(1663)							this->window->onKeyDown->cancel();
            						}
            					}
HXLINE(1667)					bool _hx_tmp1;
HXDLIN(1667)					if (::hx::IsNotNull( focusEvent )) {
HXLINE(1667)						_hx_tmp1 = !(focusEvent->isDefaultPrevented());
            					}
            					else {
HXLINE(1667)						_hx_tmp1 = true;
            					}
HXDLIN(1667)					if (_hx_tmp1) {
HXLINE(1669)						this->_hx___currentTabOrderIndex = nextIndex;
HXLINE(1670)						if (::hx::IsNotNull( nextObject )) {
HXLINE(1670)							this->set_focus(nextObject);
            						}
HXLINE(1671)						if (cancelTab) {
HXLINE(1675)							this->window->onKeyDown->cancel();
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onKey,(void))

void Stage_obj::_hx___onLimeCreateWindow( ::lime::ui::Window window){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::lime::ui::Window,window1, ::Dynamic,_g) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1693___onLimeCreateWindow)
HXLINE(1693)			_g(window1);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,_g1, ::lime::ui::Window,window2) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1694___onLimeCreateWindow)
HXLINE(1694)			_g1(window2);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::Dynamic,_g2, ::lime::ui::Window,window3) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1695___onLimeCreateWindow)
HXLINE(1695)			_g2(window3);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::Dynamic,_g3, ::lime::ui::Window,window4) HXARGC(1)
            		void _hx_run(::String file){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1696___onLimeCreateWindow)
HXLINE(1696)			_g3(window4,file);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4, ::Dynamic,_g4, ::lime::ui::Window,window5) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1697___onLimeCreateWindow)
HXLINE(1697)			_g4(window5);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::Dynamic,_g5, ::lime::ui::Window,window6) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1698___onLimeCreateWindow)
HXLINE(1698)			_g5(window6);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_6, ::lime::ui::Window,window7, ::Dynamic,_g6) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1699___onLimeCreateWindow)
HXLINE(1699)			_g6(window7);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_7, ::lime::ui::Window,window8, ::Dynamic,_g7) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1700___onLimeCreateWindow)
HXLINE(1700)			_g7(window8);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_8, ::Dynamic,_g8, ::lime::ui::Window,window9) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1701___onLimeCreateWindow)
HXLINE(1701)			_g8(window9);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_9, ::lime::ui::Window,window10, ::Dynamic,_g9) HXARGC(2)
            		void _hx_run(int keyCode,int modifier){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1702___onLimeCreateWindow)
HXLINE(1702)			_g9(window10,keyCode,modifier);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_10, ::lime::ui::Window,window11, ::Dynamic,_g10) HXARGC(2)
            		void _hx_run(int keyCode,int modifier){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1703___onLimeCreateWindow)
HXLINE(1703)			_g10(window11,keyCode,modifier);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_11, ::lime::ui::Window,window12, ::Dynamic,_g11) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1704___onLimeCreateWindow)
HXLINE(1704)			_g11(window12);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_12, ::lime::ui::Window,window13, ::Dynamic,_g12) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1705___onLimeCreateWindow)
HXLINE(1705)			_g12(window13);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_13, ::Dynamic,_g13, ::lime::ui::Window,window14) HXARGC(3)
            		void _hx_run(Float x,Float y,int button){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1706___onLimeCreateWindow)
HXLINE(1706)			_g13(window14,x,y,button);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_14, ::Dynamic,_g14, ::lime::ui::Window,window15) HXARGC(2)
            		void _hx_run(Float x,Float y){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1707___onLimeCreateWindow)
HXLINE(1707)			_g14(window15,x,y);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_15, ::lime::ui::Window,window16, ::Dynamic,_g15) HXARGC(2)
            		void _hx_run(Float x,Float y){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1708___onLimeCreateWindow)
HXLINE(1708)			_g15(window16,x,y);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_16, ::lime::ui::Window,window17, ::Dynamic,_g16) HXARGC(3)
            		void _hx_run(Float x,Float y,int button){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1709___onLimeCreateWindow)
HXLINE(1709)			_g16(window17,x,y,button);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_17, ::lime::ui::Window,window18, ::Dynamic,_g17) HXARGC(3)
            		void _hx_run(Float deltaX,Float deltaY, ::lime::ui::MouseWheelMode deltaMode){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1710___onLimeCreateWindow)
HXLINE(1710)			_g17(window18,deltaX,deltaY,deltaMode);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_18, ::lime::ui::Window,window19, ::Dynamic,_g18) HXARGC(2)
            		void _hx_run(Float x,Float y){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1711___onLimeCreateWindow)
HXLINE(1711)			_g18(window19,x,y);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_19, ::lime::ui::Window,window20, ::Dynamic,_g19) HXARGC(2)
            		void _hx_run(int width,int height){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1715___onLimeCreateWindow)
HXLINE(1715)			_g19(window20,width,height);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_20, ::Dynamic,_g20, ::lime::ui::Window,window21) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1716___onLimeCreateWindow)
HXLINE(1716)			_g20(window21);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_21, ::lime::ui::Window,window22, ::Dynamic,_g21) HXARGC(3)
            		void _hx_run(::String text,int start,int length){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1717___onLimeCreateWindow)
HXLINE(1717)			_g21(window22,text,start,length);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_22, ::Dynamic,_g22, ::lime::ui::Window,window23) HXARGC(1)
            		void _hx_run(::String text){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1718___onLimeCreateWindow)
HXLINE(1718)			_g22(window23,text);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1690___onLimeCreateWindow)
HXLINE(1691)		if (::hx::IsNotEq( this->window,window )) {
HXLINE(1691)			return;
            		}
HXLINE(1693)		 ::Dynamic _g = this->_hx___onLimeWindowActivate_dyn();
HXDLIN(1693)		 ::lime::ui::Window window1 = window;
HXDLIN(1693)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(window1,_g));
HXDLIN(1693)		window->onActivate->add(_hx_tmp,null(),null());
HXLINE(1694)		 ::Dynamic _g1 = this->_hx___onLimeWindowClose_dyn();
HXDLIN(1694)		 ::lime::ui::Window window2 = window;
HXDLIN(1694)		 ::Dynamic _hx_tmp1 =  ::Dynamic(new _hx_Closure_1(_g1,window2));
HXDLIN(1694)		window->onClose->add(_hx_tmp1,false,-9000);
HXLINE(1695)		 ::Dynamic _g2 = this->_hx___onLimeWindowDeactivate_dyn();
HXDLIN(1695)		 ::lime::ui::Window window3 = window;
HXDLIN(1695)		 ::Dynamic _hx_tmp2 =  ::Dynamic(new _hx_Closure_2(_g2,window3));
HXDLIN(1695)		window->onDeactivate->add(_hx_tmp2,null(),null());
HXLINE(1696)		 ::Dynamic _g3 = this->_hx___onLimeWindowDropFile_dyn();
HXDLIN(1696)		 ::lime::ui::Window window4 = window;
HXDLIN(1696)		 ::Dynamic _hx_tmp3 =  ::Dynamic(new _hx_Closure_3(_g3,window4));
HXDLIN(1696)		window->onDropFile->add(_hx_tmp3,null(),null());
HXLINE(1697)		 ::Dynamic _g4 = this->_hx___onLimeWindowEnter_dyn();
HXDLIN(1697)		 ::lime::ui::Window window5 = window;
HXDLIN(1697)		 ::Dynamic _hx_tmp4 =  ::Dynamic(new _hx_Closure_4(_g4,window5));
HXDLIN(1697)		window->onEnter->add(_hx_tmp4,null(),null());
HXLINE(1698)		 ::Dynamic _g5 = this->_hx___onLimeWindowExpose_dyn();
HXDLIN(1698)		 ::lime::ui::Window window6 = window;
HXDLIN(1698)		 ::Dynamic _hx_tmp5 =  ::Dynamic(new _hx_Closure_5(_g5,window6));
HXDLIN(1698)		window->onExpose->add(_hx_tmp5,null(),null());
HXLINE(1699)		 ::Dynamic _g6 = this->_hx___onLimeWindowFocusIn_dyn();
HXDLIN(1699)		 ::lime::ui::Window window7 = window;
HXDLIN(1699)		 ::Dynamic _hx_tmp6 =  ::Dynamic(new _hx_Closure_6(window7,_g6));
HXDLIN(1699)		window->onFocusIn->add(_hx_tmp6,null(),null());
HXLINE(1700)		 ::Dynamic _g7 = this->_hx___onLimeWindowFocusOut_dyn();
HXDLIN(1700)		 ::lime::ui::Window window8 = window;
HXDLIN(1700)		 ::Dynamic _hx_tmp7 =  ::Dynamic(new _hx_Closure_7(window8,_g7));
HXDLIN(1700)		window->onFocusOut->add(_hx_tmp7,null(),null());
HXLINE(1701)		 ::Dynamic _g8 = this->_hx___onLimeWindowFullscreen_dyn();
HXDLIN(1701)		 ::lime::ui::Window window9 = window;
HXDLIN(1701)		 ::Dynamic _hx_tmp8 =  ::Dynamic(new _hx_Closure_8(_g8,window9));
HXDLIN(1701)		window->onFullscreen->add(_hx_tmp8,null(),null());
HXLINE(1702)		 ::Dynamic _g9 = this->_hx___onLimeKeyDown_dyn();
HXDLIN(1702)		 ::lime::ui::Window window10 = window;
HXDLIN(1702)		 ::Dynamic _hx_tmp9 =  ::Dynamic(new _hx_Closure_9(window10,_g9));
HXDLIN(1702)		window->onKeyDown->add(_hx_tmp9,null(),null());
HXLINE(1703)		 ::Dynamic _g10 = this->_hx___onLimeKeyUp_dyn();
HXDLIN(1703)		 ::lime::ui::Window window11 = window;
HXDLIN(1703)		 ::Dynamic _hx_tmp10 =  ::Dynamic(new _hx_Closure_10(window11,_g10));
HXDLIN(1703)		window->onKeyUp->add(_hx_tmp10,null(),null());
HXLINE(1704)		 ::Dynamic _g11 = this->_hx___onLimeWindowLeave_dyn();
HXDLIN(1704)		 ::lime::ui::Window window12 = window;
HXDLIN(1704)		 ::Dynamic _hx_tmp11 =  ::Dynamic(new _hx_Closure_11(window12,_g11));
HXDLIN(1704)		window->onLeave->add(_hx_tmp11,null(),null());
HXLINE(1705)		 ::Dynamic _g12 = this->_hx___onLimeWindowMinimize_dyn();
HXDLIN(1705)		 ::lime::ui::Window window13 = window;
HXDLIN(1705)		 ::Dynamic _hx_tmp12 =  ::Dynamic(new _hx_Closure_12(window13,_g12));
HXDLIN(1705)		window->onMinimize->add(_hx_tmp12,null(),null());
HXLINE(1706)		 ::Dynamic _g13 = this->_hx___onLimeMouseDown_dyn();
HXDLIN(1706)		 ::lime::ui::Window window14 = window;
HXDLIN(1706)		 ::Dynamic _hx_tmp13 =  ::Dynamic(new _hx_Closure_13(_g13,window14));
HXDLIN(1706)		window->onMouseDown->add(_hx_tmp13,null(),null());
HXLINE(1707)		 ::Dynamic _g14 = this->_hx___onLimeMouseMove_dyn();
HXDLIN(1707)		 ::lime::ui::Window window15 = window;
HXDLIN(1707)		 ::Dynamic _hx_tmp14 =  ::Dynamic(new _hx_Closure_14(_g14,window15));
HXDLIN(1707)		window->onMouseMove->add(_hx_tmp14,null(),null());
HXLINE(1708)		 ::Dynamic _g15 = this->_hx___onLimeMouseMoveRelative_dyn();
HXDLIN(1708)		 ::lime::ui::Window window16 = window;
HXDLIN(1708)		 ::Dynamic _hx_tmp15 =  ::Dynamic(new _hx_Closure_15(window16,_g15));
HXDLIN(1708)		window->onMouseMoveRelative->add(_hx_tmp15,null(),null());
HXLINE(1709)		 ::Dynamic _g16 = this->_hx___onLimeMouseUp_dyn();
HXDLIN(1709)		 ::lime::ui::Window window17 = window;
HXDLIN(1709)		 ::Dynamic _hx_tmp16 =  ::Dynamic(new _hx_Closure_16(window17,_g16));
HXDLIN(1709)		window->onMouseUp->add(_hx_tmp16,null(),null());
HXLINE(1710)		 ::Dynamic _g17 = this->_hx___onLimeMouseWheel_dyn();
HXDLIN(1710)		 ::lime::ui::Window window18 = window;
HXDLIN(1710)		 ::Dynamic _hx_tmp17 =  ::Dynamic(new _hx_Closure_17(window18,_g17));
HXDLIN(1710)		window->onMouseWheel->add(_hx_tmp17,null(),null());
HXLINE(1711)		 ::Dynamic _g18 = this->_hx___onLimeWindowMove_dyn();
HXDLIN(1711)		 ::lime::ui::Window window19 = window;
HXDLIN(1711)		 ::Dynamic _hx_tmp18 =  ::Dynamic(new _hx_Closure_18(window19,_g18));
HXDLIN(1711)		window->onMove->add(_hx_tmp18,null(),null());
HXLINE(1712)		window->onRender->add(this->_hx___onLimeRender_dyn(),null(),null());
HXLINE(1713)		window->onRenderContextLost->add(this->_hx___onLimeRenderContextLost_dyn(),null(),null());
HXLINE(1714)		window->onRenderContextRestored->add(this->_hx___onLimeRenderContextRestored_dyn(),null(),null());
HXLINE(1715)		 ::Dynamic _g19 = this->_hx___onLimeWindowResize_dyn();
HXDLIN(1715)		 ::lime::ui::Window window20 = window;
HXDLIN(1715)		 ::Dynamic _hx_tmp19 =  ::Dynamic(new _hx_Closure_19(window20,_g19));
HXDLIN(1715)		window->onResize->add(_hx_tmp19,null(),null());
HXLINE(1716)		 ::Dynamic _g20 = this->_hx___onLimeWindowRestore_dyn();
HXDLIN(1716)		 ::lime::ui::Window window21 = window;
HXDLIN(1716)		 ::Dynamic _hx_tmp20 =  ::Dynamic(new _hx_Closure_20(_g20,window21));
HXDLIN(1716)		window->onRestore->add(_hx_tmp20,null(),null());
HXLINE(1717)		 ::Dynamic _g21 = this->_hx___onLimeTextEdit_dyn();
HXDLIN(1717)		 ::lime::ui::Window window22 = window;
HXDLIN(1717)		 ::Dynamic _hx_tmp21 =  ::Dynamic(new _hx_Closure_21(window22,_g21));
HXDLIN(1717)		window->onTextEdit->add(_hx_tmp21,null(),null());
HXLINE(1718)		 ::Dynamic _g22 = this->_hx___onLimeTextInput_dyn();
HXDLIN(1718)		 ::lime::ui::Window window23 = window;
HXDLIN(1718)		 ::Dynamic _hx_tmp22 =  ::Dynamic(new _hx_Closure_22(_g22,window23));
HXDLIN(1718)		window->onTextInput->add(_hx_tmp22,null(),null());
HXLINE(1720)		this->_hx___onLimeWindowCreate(window);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeCreateWindow,(void))

void Stage_obj::_hx___onLimeGamepadAxisMove( ::lime::ui::Gamepad gamepad,int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1726___onLimeGamepadAxisMove)
HXDLIN(1726)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1728)			::openfl::ui::GameInput_obj::_hx___onGamepadAxisMove(gamepad,axis,value);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
HXDLIN(   1)				 ::Dynamic e = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE(1732)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onLimeGamepadAxisMove,(void))

void Stage_obj::_hx___onLimeGamepadButtonDown( ::lime::ui::Gamepad gamepad,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1742___onLimeGamepadButtonDown)
HXDLIN(1742)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1744)			::openfl::ui::GameInput_obj::_hx___onGamepadButtonDown(gamepad,button);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
HXDLIN(   1)				 ::Dynamic e = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE(1748)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___onLimeGamepadButtonDown,(void))

void Stage_obj::_hx___onLimeGamepadButtonUp( ::lime::ui::Gamepad gamepad,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1758___onLimeGamepadButtonUp)
HXDLIN(1758)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1760)			::openfl::ui::GameInput_obj::_hx___onGamepadButtonUp(gamepad,button);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
HXDLIN(   1)				 ::Dynamic e = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE(1764)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___onLimeGamepadButtonUp,(void))

void Stage_obj::_hx___onLimeGamepadConnect( ::lime::ui::Gamepad gamepad){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::lime::ui::Gamepad,gamepad1, ::Dynamic,_g) HXARGC(2)
            		void _hx_run(int axis,Float value){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1786___onLimeGamepadConnect)
HXLINE(1786)			_g(gamepad1,axis,value);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::lime::ui::Gamepad,gamepad2, ::Dynamic,_g1) HXARGC(1)
            		void _hx_run(int button){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1787___onLimeGamepadConnect)
HXLINE(1787)			_g1(gamepad2,button);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::Dynamic,_g2, ::lime::ui::Gamepad,gamepad3) HXARGC(1)
            		void _hx_run(int button){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1788___onLimeGamepadConnect)
HXLINE(1788)			_g2(gamepad3,button);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::Dynamic,_g3, ::lime::ui::Gamepad,gamepad4) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1789___onLimeGamepadConnect)
HXLINE(1789)			_g3(gamepad4);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1772___onLimeGamepadConnect)
HXLINE(1774)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1776)			::openfl::ui::GameInput_obj::_hx___onGamepadConnect(gamepad);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
HXDLIN(   1)				 ::Dynamic e = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE(1780)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1786)		 ::Dynamic _g = this->_hx___onLimeGamepadAxisMove_dyn();
HXDLIN(1786)		 ::lime::ui::Gamepad gamepad1 = gamepad;
HXDLIN(1786)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(gamepad1,_g));
HXDLIN(1786)		gamepad->onAxisMove->add(_hx_tmp,null(),null());
HXLINE(1787)		 ::Dynamic _g1 = this->_hx___onLimeGamepadButtonDown_dyn();
HXDLIN(1787)		 ::lime::ui::Gamepad gamepad2 = gamepad;
HXDLIN(1787)		 ::Dynamic _hx_tmp1 =  ::Dynamic(new _hx_Closure_1(gamepad2,_g1));
HXDLIN(1787)		gamepad->onButtonDown->add(_hx_tmp1,null(),null());
HXLINE(1788)		 ::Dynamic _g2 = this->_hx___onLimeGamepadButtonUp_dyn();
HXDLIN(1788)		 ::lime::ui::Gamepad gamepad3 = gamepad;
HXDLIN(1788)		 ::Dynamic _hx_tmp2 =  ::Dynamic(new _hx_Closure_2(_g2,gamepad3));
HXDLIN(1788)		gamepad->onButtonUp->add(_hx_tmp2,null(),null());
HXLINE(1789)		 ::Dynamic _g3 = this->_hx___onLimeGamepadDisconnect_dyn();
HXDLIN(1789)		 ::lime::ui::Gamepad gamepad4 = gamepad;
HXDLIN(1789)		 ::Dynamic _hx_tmp3 =  ::Dynamic(new _hx_Closure_3(_g3,gamepad4));
HXDLIN(1789)		gamepad->onDisconnect->add(_hx_tmp3,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeGamepadConnect,(void))

void Stage_obj::_hx___onLimeGamepadDisconnect( ::lime::ui::Gamepad gamepad){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1795___onLimeGamepadDisconnect)
HXDLIN(1795)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1797)			::openfl::ui::GameInput_obj::_hx___onGamepadDisconnect(gamepad);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
HXDLIN(   1)				 ::Dynamic e = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE(1801)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeGamepadDisconnect,(void))

void Stage_obj::_hx___onLimeKeyDown( ::lime::ui::Window window,int keyCode,int modifier){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1809___onLimeKeyDown)
HXLINE(1810)		bool _hx_tmp;
HXDLIN(1810)		if (::hx::IsNotNull( this->window )) {
HXLINE(1810)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1810)			_hx_tmp = true;
            		}
HXDLIN(1810)		if (_hx_tmp) {
HXLINE(1810)			return;
            		}
HXLINE(1812)		this->_hx___onKey(HX_("keyDown",a1,69,47,9c),keyCode,modifier);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onLimeKeyDown,(void))

void Stage_obj::_hx___onLimeKeyUp( ::lime::ui::Window window,int keyCode,int modifier){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1816___onLimeKeyUp)
HXLINE(1817)		bool _hx_tmp;
HXDLIN(1817)		if (::hx::IsNotNull( this->window )) {
HXLINE(1817)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1817)			_hx_tmp = true;
            		}
HXDLIN(1817)		if (_hx_tmp) {
HXLINE(1817)			return;
            		}
HXLINE(1819)		this->_hx___onKey(HX_("keyUp",da,b9,fe,de),keyCode,modifier);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onLimeKeyUp,(void))

void Stage_obj::_hx___onLimeModuleExit(int code){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1824___onLimeModuleExit)
HXDLIN(1824)		if (::hx::IsNotNull( this->window )) {
HXLINE(1826)			 ::openfl::events::Event event = null();
HXLINE(1831)			event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("deactivate",34,5c,01,3c),null(),null());
HXLINE(1834)			this->_hx___broadcastEvent(event);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeModuleExit,(void))

void Stage_obj::_hx___onLimeMouseDown( ::lime::ui::Window window,Float x,Float y,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1843___onLimeMouseDown)
HXLINE(1844)		bool _hx_tmp;
HXDLIN(1844)		if (::hx::IsNotNull( this->window )) {
HXLINE(1844)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1844)			_hx_tmp = true;
            		}
HXDLIN(1844)		if (_hx_tmp) {
HXLINE(1844)			return;
            		}
HXLINE(1846)		this->_hx___dispatchPendingMouseEvent();
HXLINE(1848)		::String type;
HXDLIN(1848)		switch((int)(button)){
            			case (int)1: {
HXLINE(1848)				type = HX_("middleMouseDown",12,2b,fe,01);
            			}
            			break;
            			case (int)2: {
HXLINE(1848)				type = HX_("rightMouseDown",ab,29,d7,cd);
            			}
            			break;
            			default:{
HXLINE(1848)				type = HX_("mouseDown",27,b1,c2,ee);
            			}
            		}
HXLINE(1855)		int _hx_tmp1 = ::Std_obj::_hx_int((x * window->_hx___scale));
HXDLIN(1855)		this->_hx___onMouse(type,( (Float)(_hx_tmp1) ),( (Float)(::Std_obj::_hx_int((y * window->_hx___scale))) ),button);
HXLINE(1857)		bool _hx_tmp2;
HXDLIN(1857)		if (!(this->showDefaultContextMenu)) {
HXLINE(1857)			_hx_tmp2 = (button == 2);
            		}
            		else {
HXLINE(1857)			_hx_tmp2 = false;
            		}
HXDLIN(1857)		if (_hx_tmp2) {
HXLINE(1859)			window->onMouseDown->cancel();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,_hx___onLimeMouseDown,(void))

void Stage_obj::_hx___onLimeMouseMove( ::lime::ui::Window window,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1864___onLimeMouseMove)
HXLINE(1865)		bool _hx_tmp;
HXDLIN(1865)		if (::hx::IsNotNull( this->window )) {
HXLINE(1865)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1865)			_hx_tmp = true;
            		}
HXDLIN(1865)		if (_hx_tmp) {
HXLINE(1865)			return;
            		}
HXLINE(1870)		this->_hx___pendingMouseEvent = true;
HXLINE(1871)		this->_hx___pendingMouseX = ::Std_obj::_hx_int((x * window->_hx___scale));
HXLINE(1872)		this->_hx___pendingMouseY = ::Std_obj::_hx_int((y * window->_hx___scale));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onLimeMouseMove,(void))

void Stage_obj::_hx___onLimeMouseMoveRelative( ::lime::ui::Window window,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1877___onLimeMouseMoveRelative)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onLimeMouseMoveRelative,(void))

void Stage_obj::_hx___onLimeMouseUp( ::lime::ui::Window window,Float x,Float y,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1882___onLimeMouseUp)
HXLINE(1883)		bool _hx_tmp;
HXDLIN(1883)		if (::hx::IsNotNull( this->window )) {
HXLINE(1883)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1883)			_hx_tmp = true;
            		}
HXDLIN(1883)		if (_hx_tmp) {
HXLINE(1883)			return;
            		}
HXLINE(1885)		this->_hx___dispatchPendingMouseEvent();
HXLINE(1887)		::String type;
HXDLIN(1887)		switch((int)(button)){
            			case (int)1: {
HXLINE(1887)				type = HX_("middleMouseUp",0b,8d,f5,3a);
            			}
            			break;
            			case (int)2: {
HXLINE(1887)				type = HX_("rightMouseUp",64,83,21,ab);
            			}
            			break;
            			default:{
HXLINE(1887)				type = HX_("mouseUp",e0,f3,72,c0);
            			}
            		}
HXLINE(1894)		int _hx_tmp1 = ::Std_obj::_hx_int((x * window->_hx___scale));
HXDLIN(1894)		this->_hx___onMouse(type,( (Float)(_hx_tmp1) ),( (Float)(::Std_obj::_hx_int((y * window->_hx___scale))) ),button);
HXLINE(1896)		bool _hx_tmp2;
HXDLIN(1896)		if (!(this->showDefaultContextMenu)) {
HXLINE(1896)			_hx_tmp2 = (button == 2);
            		}
            		else {
HXLINE(1896)			_hx_tmp2 = false;
            		}
HXDLIN(1896)		if (_hx_tmp2) {
HXLINE(1898)			window->onMouseUp->cancel();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,_hx___onLimeMouseUp,(void))

void Stage_obj::_hx___onLimeMouseWheel( ::lime::ui::Window window,Float deltaX,Float deltaY, ::lime::ui::MouseWheelMode deltaMode){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1903___onLimeMouseWheel)
HXLINE(1904)		bool _hx_tmp;
HXDLIN(1904)		if (::hx::IsNotNull( this->window )) {
HXLINE(1904)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1904)			_hx_tmp = true;
            		}
HXDLIN(1904)		if (_hx_tmp) {
HXLINE(1904)			return;
            		}
HXLINE(1906)		this->_hx___dispatchPendingMouseEvent();
HXLINE(1908)		if (::hx::IsEq( deltaMode,::lime::ui::MouseWheelMode_obj::PIXELS_dyn() )) {
HXLINE(1910)			int _hx_tmp = ::Std_obj::_hx_int((deltaX * window->_hx___scale));
HXDLIN(1910)			this->_hx___onMouseWheel(( (Float)(_hx_tmp) ),( (Float)(::Std_obj::_hx_int((deltaY * window->_hx___scale))) ),deltaMode);
            		}
            		else {
HXLINE(1914)			int _hx_tmp = ::Std_obj::_hx_int(deltaX);
HXDLIN(1914)			this->_hx___onMouseWheel(( (Float)(_hx_tmp) ),( (Float)(::Std_obj::_hx_int(deltaY)) ),deltaMode);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,_hx___onLimeMouseWheel,(void))

void Stage_obj::_hx___onLimeRender( ::lime::graphics::RenderContext context){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1919___onLimeRender)
HXLINE(1920)		if (this->_hx___rendering) {
HXLINE(1920)			return;
            		}
HXLINE(1921)		this->_hx___rendering = true;
HXLINE(1931)		 ::openfl::events::Event event = null();
HXLINE(1950)		this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("enterFrame",f5,03,50,02),null(),null()));
HXLINE(1951)		this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("frameConstructed",09,89,5d,98),null(),null()));
HXLINE(1952)		this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("exitFrame",2f,64,48,12),null(),null()));
HXLINE(1955)		this->_hx___renderable = true;
HXLINE(1956)		this->_hx___enterFrame(this->_hx___deltaTime);
HXLINE(1957)		this->_hx___deltaTime = 0;
HXLINE(1959)		bool shouldRender;
HXDLIN(1959)		if (::hx::IsNotNull( this->_hx___renderer )) {
HXLINE(1959)			if (!(this->_hx___renderDirty)) {
HXLINE(1959)				shouldRender = this->_hx___forceRender;
            			}
            			else {
HXLINE(1959)				shouldRender = true;
            			}
            		}
            		else {
HXLINE(1959)			shouldRender = false;
            		}
HXLINE(1961)		bool _hx_tmp;
HXDLIN(1961)		if (this->_hx___invalidated) {
HXLINE(1961)			_hx_tmp = shouldRender;
            		}
            		else {
HXLINE(1961)			_hx_tmp = false;
            		}
HXDLIN(1961)		if (_hx_tmp) {
HXLINE(1963)			this->_hx___invalidated = false;
HXLINE(1968)			event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("render",56,6b,29,05),null(),null());
HXLINE(1971)			this->_hx___broadcastEvent(event);
            		}
HXLINE(1983)		this->_hx___update(false,true);
HXLINE(1986)		if (::hx::IsNotNull( this->_hx___renderer )) {
HXLINE(1988)			if (::hx::IsNotNull( this->context3D )) {
HXLINE(1990)				{
HXLINE(1990)					 ::Dynamic stage3D = this->stage3Ds->iterator();
HXDLIN(1990)					while(( (bool)(stage3D->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1990)						 ::openfl::display::Stage3D stage3D1 = ( ( ::openfl::display::Stage3D)(stage3D->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1992)						this->context3D->_hx___renderStage3D(stage3D1);
            					}
            				}
HXLINE(1996)				if (this->context3D->_hx___present) {
HXLINE(1996)					shouldRender = true;
            				}
            			}
HXLINE(2000)			if (shouldRender) {
HXLINE(2002)				if ((this->_hx___renderer->_hx___type == HX_("cairo",88,30,19,41))) {
HXLINE(2005)					::hx::TCast<  ::openfl::display::CairoRenderer >::cast(this->_hx___renderer)->cairo = context->cairo;
            				}
HXLINE(2009)				if (::hx::IsNull( this->context3D )) {
HXLINE(2011)					this->_hx___renderer->_hx___clear();
            				}
HXLINE(2014)				this->_hx___renderer->_hx___render(::hx::ObjectPtr<OBJ_>(this));
            			}
            			else {
HXLINE(2016)				if (::hx::IsNull( this->context3D )) {
HXLINE(2018)					this->window->onRender->cancel();
            				}
            			}
HXLINE(2021)			if (::hx::IsNotNull( this->context3D )) {
HXLINE(2023)				if (!(this->context3D->_hx___present)) {
HXLINE(2025)					this->window->onRender->cancel();
            				}
            				else {
HXLINE(2029)					if (!(this->_hx___renderer->_hx___cleared)) {
HXLINE(2031)						this->_hx___renderer->_hx___clear();
            					}
HXLINE(2034)					this->context3D->_hx___present = false;
HXLINE(2035)					this->context3D->_hx___cleared = false;
            				}
            			}
HXLINE(2039)			this->_hx___renderer->_hx___cleared = false;
            		}
HXLINE(2048)		this->_hx___rendering = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeRender,(void))

void Stage_obj::_hx___onLimeRenderContextLost(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2052___onLimeRenderContextLost)
HXLINE(2053)		this->_hx___renderer = null();
HXLINE(2054)		this->context3D = null();
HXLINE(2056)		{
HXLINE(2056)			 ::Dynamic stage3D = this->stage3Ds->iterator();
HXDLIN(2056)			while(( (bool)(stage3D->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2056)				 ::openfl::display::Stage3D stage3D1 = ( ( ::openfl::display::Stage3D)(stage3D->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2058)				stage3D1->_hx___lostContext();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,_hx___onLimeRenderContextLost,(void))

void Stage_obj::_hx___onLimeRenderContextRestored( ::lime::graphics::RenderContext context){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2063___onLimeRenderContextRestored)
HXLINE(2064)		this->_hx___createRenderer();
HXLINE(2066)		{
HXLINE(2066)			 ::Dynamic stage3D = this->stage3Ds->iterator();
HXDLIN(2066)			while(( (bool)(stage3D->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2066)				 ::openfl::display::Stage3D stage3D1 = ( ( ::openfl::display::Stage3D)(stage3D->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2068)				stage3D1->_hx___restoreContext();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeRenderContextRestored,(void))

void Stage_obj::_hx___onLimeTextEdit( ::lime::ui::Window window,::String text,int start,int length){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2073___onLimeTextEdit)
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,_hx___onLimeTextEdit,(void))

void Stage_obj::_hx___onLimeTextInput( ::lime::ui::Window window,::String text){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_2078___onLimeTextInput)
HXLINE(2079)		bool _hx_tmp;
HXDLIN(2079)		if (::hx::IsNotNull( this->window )) {
HXLINE(2079)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(2079)			_hx_tmp = true;
            		}
HXDLIN(2079)		if (_hx_tmp) {
HXLINE(2079)			return;
            		}
HXLINE(2081)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE(2083)		if (::hx::IsNull( this->_hx___focus )) {
HXLINE(2085)			this->_hx___getInteractive(stack);
            		}
            		else {
HXLINE(2089)			this->_hx___focus->_hx___getInteractive(stack);
            		}
HXLINE(2092)		 ::openfl::events::TextEvent event =  ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("textInput",1d,54,0b,57),true,true,text);
HXLINE(2093)		if ((stack->length > 0)) {
HXLINE(2095)			stack->reverse();
HXLINE(2096)			this->_hx___dispatchStack(event,stack);
            		}
            		else {
HXLINE(2100)			this->_hx___dispatchEvent(event);
            		}
HXLINE(2103)		if (event->isDefaultPrevented()) {
HXLINE(2105)			window->onTextInput->cancel();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___onLimeTextInput,(void))

void Stage_obj::_hx___onLimeTouchCancel( ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2110___onLimeTouchCancel)
HXLINE(2112)		bool isPrimaryTouchPoint = ::hx::IsEq( this->_hx___primaryTouch,touch );
HXLINE(2113)		if (isPrimaryTouchPoint) {
HXLINE(2115)			this->_hx___primaryTouch = null();
            		}
HXLINE(2118)		this->_hx___onTouch(HX_("touchEnd",5c,c5,09,00),touch,isPrimaryTouchPoint);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeTouchCancel,(void))

void Stage_obj::_hx___onLimeTouchMove( ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2123___onLimeTouchMove)
HXDLIN(2123)		this->_hx___onTouch(HX_("touchMove",70,72,cd,0d),touch,::hx::IsEq( this->_hx___primaryTouch,touch ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeTouchMove,(void))

void Stage_obj::_hx___onLimeTouchEnd( ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2127___onLimeTouchEnd)
HXLINE(2128)		bool isPrimaryTouchPoint = ::hx::IsEq( this->_hx___primaryTouch,touch );
HXLINE(2129)		if (isPrimaryTouchPoint) {
HXLINE(2131)			this->_hx___primaryTouch = null();
            		}
HXLINE(2134)		this->_hx___onTouch(HX_("touchEnd",5c,c5,09,00),touch,isPrimaryTouchPoint);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeTouchEnd,(void))

void Stage_obj::_hx___onLimeTouchStart( ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2138___onLimeTouchStart)
HXLINE(2139)		if (::hx::IsNull( this->_hx___primaryTouch )) {
HXLINE(2141)			this->_hx___primaryTouch = touch;
            		}
HXLINE(2144)		this->_hx___onTouch(HX_("touchBegin",ea,cd,e6,a9),touch,::hx::IsEq( this->_hx___primaryTouch,touch ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeTouchStart,(void))

void Stage_obj::_hx___onLimeUpdate(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2148___onLimeUpdate)
HXLINE(2149)		this->_hx___deltaTime = deltaTime;
HXLINE(2151)		this->_hx___dispatchPendingMouseEvent();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeUpdate,(void))

void Stage_obj::_hx___onLimeWindowActivate( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2156___onLimeWindowActivate)
HXDLIN(2156)		bool _hx_tmp;
HXDLIN(2156)		if (::hx::IsNotNull( this->window )) {
HXDLIN(2156)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXDLIN(2156)			_hx_tmp = true;
            		}
HXDLIN(2156)		if (_hx_tmp) {
HXDLIN(2156)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeWindowActivate,(void))

void Stage_obj::_hx___onLimeWindowClose( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_2162___onLimeWindowClose)
HXLINE(2163)		if (::hx::IsEq( this->window,window )) {
HXLINE(2165)			this->window = null();
            		}
HXLINE(2168)		this->_hx___primaryTouch = null();
HXLINE(2170)		 ::openfl::events::Event event = null();
HXLINE(2175)		event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("deactivate",34,5c,01,3c),null(),null());
HXLINE(2178)		this->_hx___broadcastEvent(event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeWindowClose,(void))

void Stage_obj::_hx___onLimeWindowCreate( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2186___onLimeWindowCreate)
HXLINE(2187)		bool _hx_tmp;
HXDLIN(2187)		if (::hx::IsNotNull( this->window )) {
HXLINE(2187)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(2187)			_hx_tmp = true;
            		}
HXDLIN(2187)		if (_hx_tmp) {
HXLINE(2187)			return;
            		}
HXLINE(2189)		if (::hx::IsNotNull( window->context )) {
HXLINE(2191)			this->_hx___createRenderer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeWindowCreate,(void))

void Stage_obj::_hx___onLimeWindowDeactivate( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2197___onLimeWindowDeactivate)
HXDLIN(2197)		bool _hx_tmp;
HXDLIN(2197)		if (::hx::IsNotNull( this->window )) {
HXDLIN(2197)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXDLIN(2197)			_hx_tmp = true;
            		}
HXDLIN(2197)		if (_hx_tmp) {
HXDLIN(2197)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeWindowDeactivate,(void))

void Stage_obj::_hx___onLimeWindowDropFile( ::lime::ui::Window window,::String file){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2203___onLimeWindowDropFile)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___onLimeWindowDropFile,(void))

void Stage_obj::_hx___onLimeWindowEnter( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2206___onLimeWindowEnter)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeWindowEnter,(void))

void Stage_obj::_hx___onLimeWindowExpose( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2211___onLimeWindowExpose)
HXLINE(2212)		bool _hx_tmp;
HXDLIN(2212)		if (::hx::IsNotNull( this->window )) {
HXLINE(2212)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(2212)			_hx_tmp = true;
            		}
HXDLIN(2212)		if (_hx_tmp) {
HXLINE(2212)			return;
            		}
HXLINE(2214)		this->_hx___renderDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeWindowExpose,(void))

void Stage_obj::_hx___onLimeWindowFocusIn( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_2218___onLimeWindowFocusIn)
HXLINE(2219)		bool _hx_tmp;
HXDLIN(2219)		if (::hx::IsNotNull( this->window )) {
HXLINE(2219)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(2219)			_hx_tmp = true;
            		}
HXDLIN(2219)		if (_hx_tmp) {
HXLINE(2219)			return;
            		}
HXLINE(2226)		 ::openfl::events::Event event = null();
HXLINE(2231)		event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("activate",b3,1b,ac,e5),null(),null());
HXLINE(2234)		this->_hx___broadcastEvent(event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeWindowFocusIn,(void))

void Stage_obj::_hx___onLimeWindowFocusOut( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_2246___onLimeWindowFocusOut)
HXLINE(2247)		bool _hx_tmp;
HXDLIN(2247)		if (::hx::IsNotNull( this->window )) {
HXLINE(2247)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(2247)			_hx_tmp = true;
            		}
HXDLIN(2247)		if (_hx_tmp) {
HXLINE(2247)			return;
            		}
HXLINE(2249)		this->_hx___primaryTouch = null();
HXLINE(2251)		 ::openfl::events::Event event = null();
HXLINE(2256)		event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("deactivate",34,5c,01,3c),null(),null());
HXLINE(2259)		this->_hx___broadcastEvent(event);
HXLINE(2265)		 ::openfl::display::InteractiveObject currentFocus = this->get_focus();
HXLINE(2266)		this->set_focus(null());
HXLINE(2267)		this->_hx___cacheFocus = currentFocus;
HXLINE(2269)		::openfl::events::MouseEvent_obj::_hx___altKey = false;
HXLINE(2270)		::openfl::events::MouseEvent_obj::_hx___commandKey = false;
HXLINE(2271)		::openfl::events::MouseEvent_obj::_hx___ctrlKey = false;
HXLINE(2272)		::openfl::events::MouseEvent_obj::_hx___shiftKey = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeWindowFocusOut,(void))

void Stage_obj::_hx___onLimeWindowFullscreen( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_2276___onLimeWindowFullscreen)
HXLINE(2277)		bool _hx_tmp;
HXDLIN(2277)		if (::hx::IsNotNull( this->window )) {
HXLINE(2277)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(2277)			_hx_tmp = true;
            		}
HXDLIN(2277)		if (_hx_tmp) {
HXLINE(2277)			return;
            		}
HXLINE(2279)		this->_hx___resize();
HXLINE(2281)		if (!(this->_hx___wasFullscreen)) {
HXLINE(2283)			this->_hx___wasFullscreen = true;
HXLINE(2284)			if (::hx::IsEq( this->_hx___displayState,2 )) {
HXLINE(2284)				this->_hx___displayState = 1;
            			}
HXLINE(2285)			this->_hx___dispatchEvent( ::openfl::events::FullScreenEvent_obj::__alloc( HX_CTX ,HX_("fullScreen",5b,ae,48,2e),false,false,true,true));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeWindowFullscreen,(void))

void Stage_obj::_hx___onLimeWindowLeave( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_2290___onLimeWindowLeave)
HXLINE(2291)		bool _hx_tmp;
HXDLIN(2291)		bool _hx_tmp1;
HXDLIN(2291)		if (::hx::IsNotNull( this->window )) {
HXLINE(2291)			_hx_tmp1 = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(2291)			_hx_tmp1 = true;
            		}
HXDLIN(2291)		if (!(_hx_tmp1)) {
HXLINE(2291)			_hx_tmp = ::openfl::events::MouseEvent_obj::_hx___buttonDown;
            		}
            		else {
HXLINE(2291)			_hx_tmp = true;
            		}
HXDLIN(2291)		if (_hx_tmp) {
HXLINE(2291)			return;
            		}
HXLINE(2293)		this->_hx___dispatchPendingMouseEvent();
HXLINE(2295)		 ::openfl::events::Event event = null();
HXLINE(2300)		event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("mouseLeave",92,28,20,90),null(),null());
HXLINE(2303)		this->_hx___dispatchEvent(event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeWindowLeave,(void))

void Stage_obj::_hx___onLimeWindowMinimize( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2312___onLimeWindowMinimize)
HXDLIN(2312)		bool _hx_tmp;
HXDLIN(2312)		if (::hx::IsNotNull( this->window )) {
HXDLIN(2312)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXDLIN(2312)			_hx_tmp = true;
            		}
HXDLIN(2312)		if (_hx_tmp) {
HXDLIN(2312)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeWindowMinimize,(void))

void Stage_obj::_hx___onLimeWindowMove( ::lime::ui::Window window,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2319___onLimeWindowMove)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onLimeWindowMove,(void))

void Stage_obj::_hx___onLimeWindowResize( ::lime::ui::Window window,int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_2324___onLimeWindowResize)
HXLINE(2325)		bool _hx_tmp;
HXDLIN(2325)		if (::hx::IsNotNull( this->window )) {
HXLINE(2325)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(2325)			_hx_tmp = true;
            		}
HXDLIN(2325)		if (_hx_tmp) {
HXLINE(2325)			return;
            		}
HXLINE(2327)		this->_hx___resize();
HXLINE(2338)		bool _hx_tmp1;
HXDLIN(2338)		if (this->_hx___wasFullscreen) {
HXLINE(2338)			_hx_tmp1 = !(window->_hx___fullscreen);
            		}
            		else {
HXLINE(2338)			_hx_tmp1 = false;
            		}
HXDLIN(2338)		if (_hx_tmp1) {
HXLINE(2340)			this->_hx___wasFullscreen = false;
HXLINE(2341)			this->_hx___displayState = 2;
HXLINE(2342)			this->_hx___dispatchEvent( ::openfl::events::FullScreenEvent_obj::__alloc( HX_CTX ,HX_("fullScreen",5b,ae,48,2e),false,false,false,true));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onLimeWindowResize,(void))

void Stage_obj::_hx___onLimeWindowRestore( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_2347___onLimeWindowRestore)
HXLINE(2348)		bool _hx_tmp;
HXDLIN(2348)		if (::hx::IsNotNull( this->window )) {
HXLINE(2348)			_hx_tmp = ::hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(2348)			_hx_tmp = true;
            		}
HXDLIN(2348)		if (_hx_tmp) {
HXLINE(2348)			return;
            		}
HXLINE(2350)		bool _hx_tmp1;
HXDLIN(2350)		if (this->_hx___wasFullscreen) {
HXLINE(2350)			_hx_tmp1 = !(window->_hx___fullscreen);
            		}
            		else {
HXLINE(2350)			_hx_tmp1 = false;
            		}
HXDLIN(2350)		if (_hx_tmp1) {
HXLINE(2352)			this->_hx___wasFullscreen = false;
HXLINE(2353)			this->_hx___displayState = 2;
HXLINE(2354)			this->_hx___dispatchEvent( ::openfl::events::FullScreenEvent_obj::__alloc( HX_CTX ,HX_("fullScreen",5b,ae,48,2e),false,false,false,true));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onLimeWindowRestore,(void))

void Stage_obj::_hx___onMouse(::String type,Float x,Float y,int button){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_2360___onMouse)
HXLINE(2361)		if ((button > 2)) {
HXLINE(2361)			return;
            		}
HXLINE(2363)		 ::openfl::geom::Point targetPoint = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE(2364)		targetPoint->setTo(x,y);
HXLINE(2365)		{
HXLINE(2365)			 ::openfl::geom::Matrix _this = this->_hx___displayMatrix;
HXDLIN(2365)			Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(2365)			if ((norm == 0)) {
HXLINE(2365)				targetPoint->x = -(_this->tx);
HXDLIN(2365)				targetPoint->y = -(_this->ty);
            			}
            			else {
HXLINE(2365)				Float px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - targetPoint->y)) + (_this->d * (targetPoint->x - _this->tx))));
HXDLIN(2365)				targetPoint->y = ((((Float)1.0) / norm) * ((_this->a * (targetPoint->y - _this->ty)) + (_this->b * (_this->tx - targetPoint->x))));
HXDLIN(2365)				targetPoint->x = px;
            			}
            		}
HXLINE(2367)		this->_hx___mouseX = targetPoint->x;
HXLINE(2368)		this->_hx___mouseY = targetPoint->y;
HXLINE(2370)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2371)		 ::openfl::display::InteractiveObject target = null();
HXLINE(2373)		if (this->_hx___hitTest(this->_hx___mouseX,this->_hx___mouseY,true,stack,true,::hx::ObjectPtr<OBJ_>(this))) {
HXLINE(2375)			target = ( ( ::openfl::display::InteractiveObject)(stack->__get((stack->length - 1)).StaticCast<  ::openfl::display::DisplayObject >()) );
            		}
            		else {
HXLINE(2379)			target = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2380)			stack = ::Array_obj< ::Dynamic>::__new(1)->init(0,::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(2383)		if (::hx::IsNull( target )) {
HXLINE(2383)			target = ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(2385)		::String clickType = null();
HXLINE(2387)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("middleMouseDown",12,2b,fe,01)) ){
HXLINE(2417)			this->_hx___mouseDownMiddle = target;
HXDLIN(2417)			goto _hx_goto_90;
            		}
            		if (  (_hx_switch_0==HX_("middleMouseUp",0b,8d,f5,3a)) ){
HXLINE(2452)			if (::hx::IsEq( this->_hx___mouseDownMiddle,target )) {
HXLINE(2454)				clickType = HX_("middleClick",b3,e4,e5,43);
            			}
HXLINE(2457)			this->_hx___mouseDownMiddle = null();
HXLINE(2451)			goto _hx_goto_90;
            		}
            		if (  (_hx_switch_0==HX_("mouseDown",27,b1,c2,ee)) ){
HXLINE(2390)			if (target->_hx___allowMouseFocus()) {
HXLINE(2392)				if (::hx::IsNotNull( this->get_focus() )) {
HXLINE(2394)					 ::openfl::events::FocusEvent focusEvent =  ::openfl::events::FocusEvent_obj::__alloc( HX_CTX ,HX_("mouseFocusChange",43,f1,81,96),true,true,target,false,0);
HXLINE(2396)					this->_hx___dispatchStack(focusEvent,stack);
HXLINE(2398)					if (!(focusEvent->isDefaultPrevented())) {
HXLINE(2400)						this->set_focus(target);
            					}
            				}
            				else {
HXLINE(2405)					this->set_focus(target);
            				}
            			}
            			else {
HXLINE(2410)				this->set_focus(null());
            			}
HXLINE(2413)			this->_hx___mouseDownLeft = target;
HXLINE(2414)			::openfl::events::MouseEvent_obj::_hx___buttonDown = true;
HXLINE(2389)			goto _hx_goto_90;
            		}
            		if (  (_hx_switch_0==HX_("mouseUp",e0,f3,72,c0)) ){
HXLINE(2423)			if (::hx::IsNotNull( this->_hx___mouseDownLeft )) {
HXLINE(2425)				::openfl::events::MouseEvent_obj::_hx___buttonDown = false;
HXLINE(2427)				if (::hx::IsEq( this->_hx___mouseDownLeft,target )) {
HXLINE(2429)					clickType = HX_("click",48,7c,5e,48);
            				}
            				else {
HXLINE(2433)					 ::openfl::events::MouseEvent event = null();
HXLINE(2438)					Float event1 = this->_hx___mouseX;
HXDLIN(2438)					Float event2 = this->_hx___mouseY;
HXDLIN(2438)					event = ::openfl::events::MouseEvent_obj::_hx___create(HX_("releaseOutside",1e,86,e3,ad),1,event1,event2, ::openfl::geom::Point_obj::__alloc( HX_CTX ,this->_hx___mouseX,this->_hx___mouseY),::hx::ObjectPtr<OBJ_>(this),null());
HXLINE(2441)					this->_hx___mouseDownLeft->dispatchEvent(event);
            				}
HXLINE(2448)				this->_hx___mouseDownLeft = null();
            			}
HXLINE(2423)			goto _hx_goto_90;
            		}
            		if (  (_hx_switch_0==HX_("rightMouseDown",ab,29,d7,cd)) ){
HXLINE(2420)			this->_hx___mouseDownRight = target;
HXDLIN(2420)			goto _hx_goto_90;
            		}
            		if (  (_hx_switch_0==HX_("rightMouseUp",64,83,21,ab)) ){
HXLINE(2460)			if (::hx::IsEq( this->_hx___mouseDownRight,target )) {
HXLINE(2462)				clickType = HX_("rightClick",cc,62,23,4b);
            			}
HXLINE(2465)			this->_hx___mouseDownRight = null();
HXLINE(2459)			goto _hx_goto_90;
            		}
            		/* default */{
            		}
            		_hx_goto_90:;
HXLINE(2470)		 ::openfl::geom::Point localPoint = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE(2471)		 ::openfl::events::MouseEvent event = null();
HXLINE(2476)		Float event1 = this->_hx___mouseX;
HXDLIN(2476)		Float event2 = this->_hx___mouseY;
HXDLIN(2476)		event = ::openfl::events::MouseEvent_obj::_hx___create(type,button,event1,event2,target->_hx___globalToLocal(targetPoint,localPoint),target,null());
HXLINE(2479)		this->_hx___dispatchStack(event,stack);
HXLINE(2485)		if (::hx::IsNotNull( clickType )) {
HXLINE(2490)			Float event1 = this->_hx___mouseX;
HXDLIN(2490)			Float event2 = this->_hx___mouseY;
HXDLIN(2490)			event = ::openfl::events::MouseEvent_obj::_hx___create(clickType,button,event1,event2,target->_hx___globalToLocal(targetPoint,localPoint),target,null());
HXLINE(2493)			this->_hx___dispatchStack(event,stack);
HXLINE(2499)			bool _hx_tmp;
HXDLIN(2499)			if ((type == HX_("mouseUp",e0,f3,72,c0))) {
HXLINE(2499)				_hx_tmp = target->doubleClickEnabled;
            			}
            			else {
HXLINE(2499)				_hx_tmp = false;
            			}
HXDLIN(2499)			if (_hx_tmp) {
HXLINE(2501)				int currentTime = ::openfl::Lib_obj::getTimer();
HXLINE(2502)				if (((currentTime - this->_hx___lastClickTime) < 500)) {
HXLINE(2507)					Float event1 = this->_hx___mouseX;
HXDLIN(2507)					Float event2 = this->_hx___mouseY;
HXDLIN(2507)					event = ::openfl::events::MouseEvent_obj::_hx___create(HX_("doubleClick",77,03,76,cd),button,event1,event2,target->_hx___globalToLocal(targetPoint,localPoint),target,null());
HXLINE(2510)					this->_hx___dispatchStack(event,stack);
HXLINE(2516)					this->_hx___lastClickTime = 0;
            				}
            				else {
HXLINE(2520)					this->_hx___lastClickTime = currentTime;
            				}
            			}
            		}
HXLINE(2525)		bool _hx_tmp;
HXDLIN(2525)		if ((::openfl::ui::Mouse_obj::_hx___cursor == HX_("auto",6f,df,76,40))) {
HXLINE(2525)			_hx_tmp = !(::openfl::ui::Mouse_obj::_hx___hidden);
            		}
            		else {
HXLINE(2525)			_hx_tmp = false;
            		}
HXDLIN(2525)		if (_hx_tmp) {
HXLINE(2527)			::String cursor = null();
HXLINE(2529)			if (::hx::IsNotNull( this->_hx___mouseDownLeft )) {
HXLINE(2531)				cursor = this->_hx___mouseDownLeft->_hx___getCursor();
            			}
            			else {
HXLINE(2535)				int _g = 0;
HXDLIN(2535)				while((_g < stack->length)){
HXLINE(2535)					 ::openfl::display::DisplayObject target = stack->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(2535)					_g = (_g + 1);
HXLINE(2537)					cursor = target->_hx___getCursor();
HXLINE(2539)					if (::hx::IsNotNull( cursor )) {
HXLINE(2541)						 ::lime::ui::Window _hx_tmp = this->window;
HXDLIN(2541)						_hx_tmp->set_cursor(::openfl::ui::_MouseCursor::MouseCursor_Impl__obj::toLimeCursor(cursor));
HXLINE(2542)						goto _hx_goto_91;
            					}
            				}
            				_hx_goto_91:;
            			}
HXLINE(2547)			if (::hx::IsNull( cursor )) {
HXLINE(2549)				this->window->set_cursor(::lime::ui::MouseCursor_obj::ARROW_dyn());
            			}
            		}
HXLINE(2553)		 ::openfl::events::MouseEvent event3;
HXLINE(2555)		if (::hx::IsNotEq( target,this->_hx___mouseOverTarget )) {
HXLINE(2557)			if (::hx::IsNotNull( this->_hx___mouseOverTarget )) {
HXLINE(2563)				Float event = this->_hx___mouseX;
HXDLIN(2563)				Float event1 = this->_hx___mouseY;
HXDLIN(2563)				 ::openfl::geom::Point event2 = this->_hx___mouseOverTarget->_hx___globalToLocal(targetPoint,localPoint);
HXDLIN(2563)				event3 = ::openfl::events::MouseEvent_obj::_hx___create(HX_("mouseOut",69,e7,1d,a4),button,event,event1,event2,this->_hx___mouseOverTarget,null());
HXLINE(2567)				this->_hx___dispatchStack(event3,this->_hx___mouseOutStack);
            			}
            		}
HXLINE(2575)		 ::openfl::display::DisplayObject item;
HXDLIN(2575)		int i = 0;
HXLINE(2576)		while((i < this->_hx___rollOutStack->length)){
HXLINE(2578)			item = this->_hx___rollOutStack->__get(i).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE(2579)			if ((stack->indexOf(item,null()) == -1)) {
HXLINE(2581)				this->_hx___rollOutStack->remove(item);
HXLINE(2586)				Float event = this->_hx___mouseX;
HXDLIN(2586)				Float event1 = this->_hx___mouseY;
HXDLIN(2586)				event3 = ::openfl::events::MouseEvent_obj::_hx___create(HX_("rollOut",11,f9,11,5d),button,event,event1,this->_hx___mouseOverTarget->_hx___globalToLocal(targetPoint,localPoint),( ( ::openfl::display::InteractiveObject)(item) ),null());
HXLINE(2589)				event3->bubbles = false;
HXLINE(2591)				this->_hx___dispatchTarget(item,event3);
            			}
            			else {
HXLINE(2599)				i = (i + 1);
            			}
            		}
HXLINE(2603)		{
HXLINE(2603)			int _g = 0;
HXDLIN(2603)			while((_g < stack->length)){
HXLINE(2603)				 ::openfl::display::DisplayObject item = stack->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(2603)				_g = (_g + 1);
HXLINE(2605)				bool _hx_tmp;
HXDLIN(2605)				if ((this->_hx___rollOutStack->indexOf(item,null()) == -1)) {
HXLINE(2605)					_hx_tmp = ::hx::IsNotNull( this->_hx___mouseOverTarget );
            				}
            				else {
HXLINE(2605)					_hx_tmp = false;
            				}
HXDLIN(2605)				if (_hx_tmp) {
HXLINE(2607)					if (item->hasEventListener(HX_("rollOver",71,ab,a8,12))) {
HXLINE(2613)						Float event = this->_hx___mouseX;
HXDLIN(2613)						Float event1 = this->_hx___mouseY;
HXDLIN(2613)						event3 = ::openfl::events::MouseEvent_obj::_hx___create(HX_("rollOver",71,ab,a8,12),button,event,event1,this->_hx___mouseOverTarget->_hx___globalToLocal(targetPoint,localPoint),( ( ::openfl::display::InteractiveObject)(item) ),null());
HXLINE(2616)						event3->bubbles = false;
HXLINE(2618)						this->_hx___dispatchTarget(item,event3);
            					}
HXLINE(2625)					bool _hx_tmp;
HXDLIN(2625)					if (!(item->hasEventListener(HX_("rollOut",11,f9,11,5d)))) {
HXLINE(2625)						_hx_tmp = item->hasEventListener(HX_("rollOver",71,ab,a8,12));
            					}
            					else {
HXLINE(2625)						_hx_tmp = true;
            					}
HXDLIN(2625)					if (_hx_tmp) {
HXLINE(2627)						this->_hx___rollOutStack->push(item);
            					}
            				}
            			}
            		}
HXLINE(2632)		if (::hx::IsNotEq( target,this->_hx___mouseOverTarget )) {
HXLINE(2634)			if (::hx::IsNotNull( target )) {
HXLINE(2639)				Float event = this->_hx___mouseX;
HXDLIN(2639)				Float event1 = this->_hx___mouseY;
HXDLIN(2639)				event3 = ::openfl::events::MouseEvent_obj::_hx___create(HX_("mouseOver",19,4a,0d,f6),button,event,event1,target->_hx___globalToLocal(targetPoint,localPoint),target,null());
HXLINE(2642)				this->_hx___dispatchStack(event3,stack);
            			}
HXLINE(2649)			this->_hx___mouseOverTarget = target;
HXLINE(2650)			this->_hx___mouseOutStack = stack;
            		}
HXLINE(2653)		if (::hx::IsNotNull( this->_hx___dragObject )) {
HXLINE(2655)			this->_hx___drag(targetPoint);
HXLINE(2657)			 ::openfl::display::DisplayObject dropTarget = null();
HXLINE(2659)			if (::hx::IsEq( this->_hx___mouseOverTarget,this->_hx___dragObject )) {
HXLINE(2661)				bool cacheMouseEnabled = this->_hx___dragObject->mouseEnabled;
HXLINE(2662)				bool cacheMouseChildren = this->_hx___dragObject->mouseChildren;
HXLINE(2664)				this->_hx___dragObject->mouseEnabled = false;
HXLINE(2665)				this->_hx___dragObject->mouseChildren = false;
HXLINE(2667)				::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2669)				if (this->_hx___hitTest(this->_hx___mouseX,this->_hx___mouseY,true,stack,true,::hx::ObjectPtr<OBJ_>(this))) {
HXLINE(2671)					dropTarget = stack->__get((stack->length - 1)).StaticCast<  ::openfl::display::DisplayObject >();
            				}
HXLINE(2674)				this->_hx___dragObject->mouseEnabled = cacheMouseEnabled;
HXLINE(2675)				this->_hx___dragObject->mouseChildren = cacheMouseChildren;
            			}
            			else {
HXLINE(2677)				if (::hx::IsNotEq( this->_hx___mouseOverTarget,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(2679)					dropTarget = this->_hx___mouseOverTarget;
            				}
            			}
HXLINE(2682)			this->_hx___dragObject->dropTarget = dropTarget;
            		}
HXLINE(2685)		::openfl::geom::Point_obj::_hx___pool->release(targetPoint);
HXLINE(2686)		::openfl::geom::Point_obj::_hx___pool->release(localPoint);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,_hx___onMouse,(void))

void Stage_obj::_hx___onMouseWheel(Float deltaX,Float deltaY, ::lime::ui::MouseWheelMode deltaMode){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2691___onMouseWheel)
HXLINE(2692)		Float x = this->_hx___mouseX;
HXLINE(2693)		Float y = this->_hx___mouseY;
HXLINE(2695)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2696)		 ::openfl::display::InteractiveObject target = null();
HXLINE(2698)		if (this->_hx___hitTest(this->_hx___mouseX,this->_hx___mouseY,true,stack,true,::hx::ObjectPtr<OBJ_>(this))) {
HXLINE(2700)			target = ( ( ::openfl::display::InteractiveObject)(stack->__get((stack->length - 1)).StaticCast<  ::openfl::display::DisplayObject >()) );
            		}
            		else {
HXLINE(2704)			target = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2705)			stack = ::Array_obj< ::Dynamic>::__new(1)->init(0,::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(2708)		if (::hx::IsNull( target )) {
HXLINE(2708)			target = ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(2709)		 ::openfl::geom::Point targetPoint = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE(2710)		targetPoint->setTo(x,y);
HXLINE(2711)		{
HXLINE(2711)			 ::openfl::geom::Matrix _this = this->_hx___displayMatrix;
HXDLIN(2711)			Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(2711)			if ((norm == 0)) {
HXLINE(2711)				targetPoint->x = -(_this->tx);
HXDLIN(2711)				targetPoint->y = -(_this->ty);
            			}
            			else {
HXLINE(2711)				Float px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - targetPoint->y)) + (_this->d * (targetPoint->x - _this->tx))));
HXDLIN(2711)				targetPoint->y = ((((Float)1.0) / norm) * ((_this->a * (targetPoint->y - _this->ty)) + (_this->b * (_this->tx - targetPoint->x))));
HXDLIN(2711)				targetPoint->x = px;
            			}
            		}
HXLINE(2712)		int delta = ::Std_obj::_hx_int(deltaY);
HXLINE(2714)		Float event = this->_hx___mouseX;
HXDLIN(2714)		Float event1 = this->_hx___mouseY;
HXDLIN(2714)		 ::openfl::events::MouseEvent event2 = ::openfl::events::MouseEvent_obj::_hx___create(HX_("mouseWheel",36,28,87,e7),0,event,event1,target->_hx___globalToLocal(targetPoint,targetPoint),target,delta);
HXLINE(2715)		event2->cancelable = true;
HXLINE(2716)		this->_hx___dispatchStack(event2,stack);
HXLINE(2717)		if (event2->isDefaultPrevented()) {
HXLINE(2717)			this->window->onMouseWheel->cancel();
            		}
HXLINE(2719)		::openfl::geom::Point_obj::_hx___pool->release(targetPoint);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onMouseWheel,(void))

void Stage_obj::_hx___onTouch(::String type, ::lime::ui::Touch touch,bool isPrimaryTouchPoint){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2725___onTouch)
HXLINE(2726)		 ::openfl::geom::Point targetPoint = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE(2727)		targetPoint->setTo(( (Float)(::Math_obj::round(((touch->x * ( (Float)(this->window->_hx___width) )) * this->window->_hx___scale))) ),( (Float)(::Math_obj::round(((touch->y * ( (Float)(this->window->_hx___height) )) * this->window->_hx___scale))) ));
HXLINE(2728)		{
HXLINE(2728)			 ::openfl::geom::Matrix _this = this->_hx___displayMatrix;
HXDLIN(2728)			Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(2728)			if ((norm == 0)) {
HXLINE(2728)				targetPoint->x = -(_this->tx);
HXDLIN(2728)				targetPoint->y = -(_this->ty);
            			}
            			else {
HXLINE(2728)				Float px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - targetPoint->y)) + (_this->d * (targetPoint->x - _this->tx))));
HXDLIN(2728)				targetPoint->y = ((((Float)1.0) / norm) * ((_this->a * (targetPoint->y - _this->ty)) + (_this->b * (_this->tx - targetPoint->x))));
HXDLIN(2728)				targetPoint->x = px;
            			}
            		}
HXLINE(2730)		Float touchX = targetPoint->x;
HXLINE(2731)		Float touchY = targetPoint->y;
HXLINE(2733)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2734)		 ::openfl::display::InteractiveObject target = null();
HXLINE(2736)		if (this->_hx___hitTest(touchX,touchY,false,stack,true,::hx::ObjectPtr<OBJ_>(this))) {
HXLINE(2738)			target = ( ( ::openfl::display::InteractiveObject)(stack->__get((stack->length - 1)).StaticCast<  ::openfl::display::DisplayObject >()) );
            		}
            		else {
HXLINE(2742)			target = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2743)			stack = ::Array_obj< ::Dynamic>::__new(1)->init(0,::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(2746)		if (::hx::IsNull( target )) {
HXLINE(2746)			target = ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(2748)		int touchId = touch->id;
HXLINE(2749)		 ::openfl::utils::_internal::TouchData touchData = null();
HXLINE(2751)		if (this->_hx___touchData->exists(touchId)) {
HXLINE(2753)			touchData = ( ( ::openfl::utils::_internal::TouchData)(this->_hx___touchData->get(touchId)) );
            		}
            		else {
HXLINE(2757)			touchData = ::openfl::utils::_internal::TouchData_obj::_hx___pool->get().StaticCast<  ::openfl::utils::_internal::TouchData >();
HXLINE(2758)			touchData->reset();
HXLINE(2759)			touchData->touch = touch;
HXLINE(2760)			this->_hx___touchData->set(touchId,touchData);
            		}
HXLINE(2763)		::String touchType = null();
HXLINE(2764)		bool releaseTouchData = false;
HXLINE(2766)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("touchBegin",ea,cd,e6,a9)) ){
HXLINE(2769)			touchData->touchDownTarget = target;
HXDLIN(2769)			goto _hx_goto_96;
            		}
            		if (  (_hx_switch_0==HX_("touchEnd",5c,c5,09,00)) ){
HXLINE(2772)			if (::hx::IsEq( touchData->touchDownTarget,target )) {
HXLINE(2774)				touchType = HX_("touchTap",e4,1b,15,00);
            			}
HXLINE(2777)			touchData->touchDownTarget = null();
HXLINE(2778)			releaseTouchData = true;
HXLINE(2771)			goto _hx_goto_96;
            		}
            		/* default */{
            		}
            		_hx_goto_96:;
HXLINE(2783)		 ::openfl::geom::Point localPoint = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE(2784)		 ::openfl::events::TouchEvent touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(type,null(),touchX,touchY,target->_hx___globalToLocal(targetPoint,localPoint),target);
HXLINE(2785)		touchEvent->touchPointID = touchId;
HXLINE(2786)		touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(2787)		touchEvent->pressure = touch->pressure;
HXLINE(2789)		this->_hx___dispatchStack(touchEvent,stack);
HXLINE(2791)		if (::hx::IsNotNull( touchType )) {
HXLINE(2793)			touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(touchType,null(),touchX,touchY,target->_hx___globalToLocal(targetPoint,localPoint),target);
HXLINE(2794)			touchEvent->touchPointID = touchId;
HXLINE(2795)			touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(2796)			touchEvent->pressure = touch->pressure;
HXLINE(2798)			this->_hx___dispatchStack(touchEvent,stack);
            		}
HXLINE(2801)		 ::openfl::display::InteractiveObject touchOverTarget = touchData->touchOverTarget;
HXLINE(2803)		bool _hx_tmp;
HXDLIN(2803)		if (::hx::IsNotEq( target,touchOverTarget )) {
HXLINE(2803)			_hx_tmp = ::hx::IsNotNull( touchOverTarget );
            		}
            		else {
HXLINE(2803)			_hx_tmp = false;
            		}
HXDLIN(2803)		if (_hx_tmp) {
HXLINE(2805)			touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(HX_("touchOut",0f,62,11,00),null(),touchX,touchY,touchOverTarget->_hx___globalToLocal(targetPoint,localPoint),touchOverTarget);
HXLINE(2807)			touchEvent->touchPointID = touchId;
HXLINE(2808)			touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(2809)			touchEvent->pressure = touch->pressure;
HXLINE(2811)			this->_hx___dispatchTarget(touchOverTarget,touchEvent);
            		}
HXLINE(2814)		::Array< ::Dynamic> touchOutStack = touchData->rollOutStack;
HXLINE(2815)		 ::openfl::display::DisplayObject item;
HXDLIN(2815)		int i = 0;
HXLINE(2816)		while((i < touchOutStack->length)){
HXLINE(2818)			item = touchOutStack->__get(i).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE(2819)			if ((stack->indexOf(item,null()) == -1)) {
HXLINE(2821)				touchOutStack->remove(item);
HXLINE(2823)				touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(HX_("touchRollOut",12,0f,74,87),null(),touchX,touchY,touchOverTarget->_hx___globalToLocal(targetPoint,localPoint),touchOverTarget);
HXLINE(2825)				touchEvent->touchPointID = touchId;
HXLINE(2826)				touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(2827)				touchEvent->bubbles = false;
HXLINE(2828)				touchEvent->pressure = touch->pressure;
HXLINE(2830)				this->_hx___dispatchTarget(item,touchEvent);
            			}
            			else {
HXLINE(2834)				i = (i + 1);
            			}
            		}
HXLINE(2838)		{
HXLINE(2838)			int _g = 0;
HXDLIN(2838)			while((_g < stack->length)){
HXLINE(2838)				 ::openfl::display::DisplayObject item = stack->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(2838)				_g = (_g + 1);
HXLINE(2840)				if ((touchOutStack->indexOf(item,null()) == -1)) {
HXLINE(2842)					if (item->hasEventListener(HX_("touchRollOver",50,d6,19,fe))) {
HXLINE(2844)						touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(HX_("touchRollOver",50,d6,19,fe),null(),touchX,touchY,touchOverTarget->_hx___globalToLocal(targetPoint,localPoint),( ( ::openfl::display::InteractiveObject)(item) ));
HXLINE(2846)						touchEvent->touchPointID = touchId;
HXLINE(2847)						touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(2848)						touchEvent->bubbles = false;
HXLINE(2849)						touchEvent->pressure = touch->pressure;
HXLINE(2851)						this->_hx___dispatchTarget(item,touchEvent);
            					}
HXLINE(2854)					if (item->hasEventListener(HX_("touchRollOut",12,0f,74,87))) {
HXLINE(2856)						touchOutStack->push(item);
            					}
            				}
            			}
            		}
HXLINE(2861)		if (::hx::IsNotEq( target,touchOverTarget )) {
HXLINE(2863)			if (::hx::IsNotNull( target )) {
HXLINE(2865)				touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(HX_("touchOver",b3,20,25,0f),null(),touchX,touchY,target->_hx___globalToLocal(targetPoint,localPoint),target);
HXLINE(2866)				touchEvent->touchPointID = touchId;
HXLINE(2867)				touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(2868)				touchEvent->bubbles = true;
HXLINE(2869)				touchEvent->pressure = touch->pressure;
HXLINE(2871)				this->_hx___dispatchTarget(target,touchEvent);
            			}
HXLINE(2874)			touchData->touchOverTarget = target;
            		}
HXLINE(2877)		::openfl::geom::Point_obj::_hx___pool->release(targetPoint);
HXLINE(2878)		::openfl::geom::Point_obj::_hx___pool->release(localPoint);
HXLINE(2880)		if (releaseTouchData) {
HXLINE(2882)			this->_hx___touchData->remove(touchId);
HXLINE(2883)			touchData->reset();
HXLINE(2884)			::openfl::utils::_internal::TouchData_obj::_hx___pool->release(touchData);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onTouch,(void))

void Stage_obj::_hx___registerLimeModule( ::lime::app::Application application){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2891___registerLimeModule)
HXLINE(2892)		application->onCreateWindow->add(this->_hx___onLimeCreateWindow_dyn(),null(),null());
HXLINE(2893)		application->onUpdate->add(this->_hx___onLimeUpdate_dyn(),null(),null());
HXLINE(2894)		application->onExit->add(this->_hx___onLimeModuleExit_dyn(),false,0);
HXLINE(2896)		{
HXLINE(2896)			 ::Dynamic gamepad = ::lime::ui::Gamepad_obj::devices->iterator();
HXDLIN(2896)			while(( (bool)(gamepad->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2896)				 ::lime::ui::Gamepad gamepad1 = ( ( ::lime::ui::Gamepad)(gamepad->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2898)				this->_hx___onLimeGamepadConnect(gamepad1);
            			}
            		}
HXLINE(2901)		::lime::ui::Gamepad_obj::onConnect->add(this->_hx___onLimeGamepadConnect_dyn(),null(),null());
HXLINE(2902)		::lime::ui::Touch_obj::onStart->add(this->_hx___onLimeTouchStart_dyn(),null(),null());
HXLINE(2903)		::lime::ui::Touch_obj::onMove->add(this->_hx___onLimeTouchMove_dyn(),null(),null());
HXLINE(2904)		::lime::ui::Touch_obj::onEnd->add(this->_hx___onLimeTouchEnd_dyn(),null(),null());
HXLINE(2905)		::lime::ui::Touch_obj::onCancel->add(this->_hx___onLimeTouchCancel_dyn(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___registerLimeModule,(void))

void Stage_obj::_hx___resize(){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_2910___resize)
HXLINE(2911)		int cacheWidth = this->stageWidth;
HXLINE(2912)		int cacheHeight = this->stageHeight;
HXLINE(2914)		int windowWidth = ::Std_obj::_hx_int((( (Float)(this->window->_hx___width) ) * this->window->_hx___scale));
HXLINE(2915)		int windowHeight = ::Std_obj::_hx_int((( (Float)(this->window->_hx___height) ) * this->window->_hx___scale));
HXLINE(2922)		this->_hx___displayMatrix->identity();
HXLINE(2924)		bool _hx_tmp;
HXDLIN(2924)		if (::hx::IsNotNull( this->get_fullScreenSourceRect() )) {
HXLINE(2924)			_hx_tmp = this->window->_hx___fullscreen;
            		}
            		else {
HXLINE(2924)			_hx_tmp = false;
            		}
HXDLIN(2924)		if (_hx_tmp) {
HXLINE(2926)			this->stageWidth = ::Std_obj::_hx_int(this->get_fullScreenSourceRect()->width);
HXLINE(2927)			this->stageHeight = ::Std_obj::_hx_int(this->get_fullScreenSourceRect()->height);
HXLINE(2929)			Float displayScaleX = (( (Float)(windowWidth) ) / ( (Float)(this->stageWidth) ));
HXLINE(2930)			Float displayScaleY = (( (Float)(windowHeight) ) / ( (Float)(this->stageHeight) ));
HXLINE(2932)			 ::openfl::geom::Matrix _hx_tmp = this->_hx___displayMatrix;
HXDLIN(2932)			Float _hx_tmp1 = -(this->get_fullScreenSourceRect()->x);
HXDLIN(2932)			_hx_tmp->translate(_hx_tmp1,-(this->get_fullScreenSourceRect()->y));
HXLINE(2933)			this->_hx___displayMatrix->scale(displayScaleX,displayScaleY);
HXLINE(2935)			 ::openfl::geom::Rectangle _hx_tmp2 = this->_hx___displayRect;
HXDLIN(2935)			Float _hx_tmp3 = this->get_fullScreenSourceRect()->get_left();
HXDLIN(2935)			Float _hx_tmp4 = this->get_fullScreenSourceRect()->get_right();
HXDLIN(2935)			Float _hx_tmp5 = this->get_fullScreenSourceRect()->get_top();
HXDLIN(2935)			_hx_tmp2->setTo(_hx_tmp3,_hx_tmp4,_hx_tmp5,this->get_fullScreenSourceRect()->get_bottom());
            		}
            		else {
HXLINE(2939)			bool _hx_tmp;
HXDLIN(2939)			if ((this->_hx___logicalWidth == 0)) {
HXLINE(2939)				_hx_tmp = (this->_hx___logicalHeight == 0);
            			}
            			else {
HXLINE(2939)				_hx_tmp = false;
            			}
HXDLIN(2939)			if (_hx_tmp) {
HXLINE(2941)				this->stageWidth = windowWidth;
HXLINE(2942)				this->stageHeight = windowHeight;
            			}
            			else {
HXLINE(2946)				this->stageWidth = this->_hx___logicalWidth;
HXLINE(2947)				this->stageHeight = this->_hx___logicalHeight;
HXLINE(2949)				Float scaleX = (( (Float)(windowWidth) ) / ( (Float)(this->stageWidth) ));
HXLINE(2950)				Float scaleY = (( (Float)(windowHeight) ) / ( (Float)(this->stageHeight) ));
HXLINE(2951)				Float targetScale = ::Math_obj::min(scaleX,scaleY);
HXLINE(2953)				int offsetX = ::Math_obj::round(((( (Float)(windowWidth) ) - (( (Float)(this->stageWidth) ) * targetScale)) / ( (Float)(2) )));
HXLINE(2954)				int offsetY = ::Math_obj::round(((( (Float)(windowHeight) ) - (( (Float)(this->stageHeight) ) * targetScale)) / ( (Float)(2) )));
HXLINE(2956)				this->_hx___displayMatrix->scale(targetScale,targetScale);
HXLINE(2957)				this->_hx___displayMatrix->translate(( (Float)(offsetX) ),( (Float)(offsetY) ));
            			}
HXLINE(2960)			this->_hx___displayRect->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(this->stageWidth) ),( (Float)(this->stageHeight) ));
            		}
HXLINE(2963)		if (::hx::IsNotNull( this->context3D )) {
HXLINE(2965)			this->context3D->configureBackBuffer(windowWidth,windowHeight,0,true,true,true);
            		}
HXLINE(2968)		{
HXLINE(2968)			 ::Dynamic stage3D = this->stage3Ds->iterator();
HXDLIN(2968)			while(( (bool)(stage3D->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2968)				 ::openfl::display::Stage3D stage3D1 = ( ( ::openfl::display::Stage3D)(stage3D->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2970)				stage3D1->_hx___resize(windowWidth,windowHeight);
            			}
            		}
HXLINE(2973)		if (::hx::IsNotNull( this->_hx___renderer )) {
HXLINE(2975)			this->_hx___renderer->_hx___resize(windowWidth,windowHeight);
            		}
HXLINE(2978)		bool _hx_tmp1;
HXDLIN(2978)		if ((this->stageWidth == cacheWidth)) {
HXLINE(2978)			_hx_tmp1 = (this->stageHeight != cacheHeight);
            		}
            		else {
HXLINE(2978)			_hx_tmp1 = true;
            		}
HXDLIN(2978)		if (_hx_tmp1) {
HXLINE(2980)			this->_hx___renderDirty = true;
HXLINE(2981)			this->_hx___setTransformDirty();
HXLINE(2983)			 ::openfl::events::Event event = null();
HXLINE(2988)			event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("resize",f4,59,7b,08),null(),null());
HXLINE(2991)			this->_hx___dispatchEvent(event);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,_hx___resize,(void))

void Stage_obj::_hx___setLogicalSize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3000___setLogicalSize)
HXLINE(3001)		this->_hx___logicalWidth = width;
HXLINE(3002)		this->_hx___logicalHeight = height;
HXLINE(3004)		this->_hx___resize();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___setLogicalSize,(void))

void Stage_obj::_hx___update(bool transformOnly,bool updateChildren){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3075___update)
HXDLIN(3075)		if (transformOnly) {
HXLINE(3077)			if (this->_hx___transformDirty) {
HXLINE(3079)				this->super::_hx___update(true,updateChildren);
HXLINE(3081)				if (updateChildren) {
HXLINE(3083)					this->_hx___transformDirty = false;
            				}
            			}
            		}
            		else {
HXLINE(3090)			bool _hx_tmp;
HXDLIN(3090)			if (!(this->_hx___transformDirty)) {
HXLINE(3090)				_hx_tmp = this->_hx___renderDirty;
            			}
            			else {
HXLINE(3090)				_hx_tmp = true;
            			}
HXDLIN(3090)			if (_hx_tmp) {
HXLINE(3092)				this->super::_hx___update(false,updateChildren);
HXLINE(3094)				bool updateChildren1 = updateChildren;
            			}
            			else {
HXLINE(3110)				bool _hx_tmp;
HXDLIN(3110)				if (!(this->_hx___renderDirty)) {
HXLINE(3110)					_hx_tmp = this->_hx___wasDirty;
            				}
            				else {
HXLINE(3110)					_hx_tmp = false;
            				}
HXDLIN(3110)				if (_hx_tmp) {
HXLINE(3115)					this->super::_hx___update(false,updateChildren);
HXLINE(3117)					if (updateChildren) {
HXLINE(3119)						this->_hx___wasDirty = false;
            					}
            				}
            			}
            		}
            	}


 ::Dynamic Stage_obj::set_color( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3135_set_color)
HXLINE(3136)		if (::hx::IsNull( value )) {
HXLINE(3138)			this->_hx___transparent = true;
HXLINE(3139)			value = 0;
            		}
            		else {
HXLINE(3143)			this->_hx___transparent = false;
            		}
HXLINE(3146)		if (::hx::IsNotEq( this->_hx___color,value )) {
HXLINE(3148)			int r = ::hx::UShr((( (int)(value) ) & 16711680),16);
HXLINE(3149)			int g = ::hx::UShr((( (int)(value) ) & 65280),8);
HXLINE(3150)			int b = (( (int)(value) ) & 255);
HXLINE(3152)			this->_hx___colorSplit[0] = (( (Float)(r) ) / ( (Float)(255) ));
HXLINE(3153)			this->_hx___colorSplit[1] = (( (Float)(g) ) / ( (Float)(255) ));
HXLINE(3154)			this->_hx___colorSplit[2] = (( (Float)(b) ) / ( (Float)(255) ));
HXLINE(3155)			this->_hx___colorString = (HX_("#",23,00,00,00) + ::StringTools_obj::hex((( (int)(value) ) & 16777215),6));
HXLINE(3156)			this->_hx___renderDirty = true;
HXLINE(3157)			this->_hx___color = (-16777216 | (( (int)(value) ) & 16777215));
            		}
HXLINE(3160)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_color,return )

 ::Dynamic Stage_obj::get_displayState(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3170_get_displayState)
HXDLIN(3170)		return this->_hx___displayState;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_displayState,return )

 ::Dynamic Stage_obj::set_displayState( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3174_set_displayState)
HXLINE(3175)		if (::hx::IsNotNull( this->window )) {
HXLINE(3177)			if (::hx::IsEq( value,2 )) {
HXLINE(3180)				if (this->window->_hx___fullscreen) {
HXLINE(3183)					this->window->set_fullscreen(false);
            				}
            			}
            			else {
HXLINE(3187)				if (!(this->window->_hx___fullscreen)) {
HXLINE(3190)					this->window->set_fullscreen(true);
            				}
            			}
            		}
HXLINE(3195)		return (this->_hx___displayState = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_displayState,return )

 ::openfl::display::InteractiveObject Stage_obj::get_focus(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3200_get_focus)
HXDLIN(3200)		return this->_hx___focus;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_focus,return )

 ::openfl::display::InteractiveObject Stage_obj::set_focus( ::openfl::display::InteractiveObject value){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_3204_set_focus)
HXLINE(3205)		if (::hx::IsNotEq( value,this->_hx___focus )) {
HXLINE(3207)			 ::openfl::display::InteractiveObject oldFocus = this->_hx___focus;
HXLINE(3208)			this->_hx___focus = value;
HXLINE(3209)			this->_hx___cacheFocus = value;
HXLINE(3211)			if (::hx::IsNotNull( oldFocus )) {
HXLINE(3213)				 ::openfl::events::FocusEvent event =  ::openfl::events::FocusEvent_obj::__alloc( HX_CTX ,HX_("focusOut",96,6f,5e,11),true,false,value,false,0);
HXLINE(3214)				::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE(3215)				oldFocus->_hx___getInteractive(stack);
HXLINE(3216)				stack->reverse();
HXLINE(3217)				this->_hx___dispatchStack(event,stack);
            			}
HXLINE(3220)			if (::hx::IsNotNull( value )) {
HXLINE(3222)				 ::openfl::events::FocusEvent event =  ::openfl::events::FocusEvent_obj::__alloc( HX_CTX ,HX_("focusIn",dd,45,83,41),true,false,oldFocus,false,0);
HXLINE(3223)				::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE(3224)				value->_hx___getInteractive(stack);
HXLINE(3225)				stack->reverse();
HXLINE(3226)				this->_hx___dispatchStack(event,stack);
            			}
            		}
HXLINE(3230)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_focus,return )

Float Stage_obj::get_frameRate(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3234_get_frameRate)
HXLINE(3235)		if (::hx::IsNotNull( this->window )) {
HXLINE(3237)			return this->window->_hx___backend->getFrameRate();
            		}
HXLINE(3240)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_frameRate,return )

Float Stage_obj::set_frameRate(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3244_set_frameRate)
HXLINE(3245)		if (::hx::IsNotNull( this->window )) {
HXLINE(3247)			return this->window->_hx___backend->setFrameRate(value);
            		}
HXLINE(3250)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_frameRate,return )

 ::openfl::geom::Rectangle Stage_obj::get_fullScreenSourceRect(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3260_get_fullScreenSourceRect)
HXDLIN(3260)		if (::hx::IsNull( this->_hx___fullScreenSourceRect )) {
HXDLIN(3260)			return null();
            		}
            		else {
HXDLIN(3260)			return this->_hx___fullScreenSourceRect->clone();
            		}
HXDLIN(3260)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_fullScreenSourceRect,return )

Float Stage_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3289_set_height)
HXDLIN(3289)		return this->get_height();
            	}


Float Stage_obj::get_mouseX(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3294_get_mouseX)
HXDLIN(3294)		return this->_hx___mouseX;
            	}


Float Stage_obj::get_mouseY(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3299_get_mouseY)
HXDLIN(3299)		return this->_hx___mouseY;
            	}


 ::Dynamic Stage_obj::get_quality(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3304_get_quality)
HXDLIN(3304)		return this->_hx___quality;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_quality,return )

Float Stage_obj::set_rotation(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3321_set_rotation)
HXDLIN(3321)		return ( (Float)(0) );
            	}


 ::Dynamic Stage_obj::set_scaleMode( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3333_set_scaleMode)
HXDLIN(3333)		return (this->_hx___scaleMode = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_scaleMode,return )

Float Stage_obj::set_scaleX(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3338_set_scaleX)
HXDLIN(3338)		return ( (Float)(0) );
            	}


Float Stage_obj::set_scaleY(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3343_set_scaleY)
HXDLIN(3343)		return ( (Float)(0) );
            	}


bool Stage_obj::get_tabEnabled(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3348_get_tabEnabled)
HXDLIN(3348)		return false;
            	}


int Stage_obj::get_tabIndex(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3358_get_tabIndex)
HXDLIN(3358)		return -1;
            	}


 ::openfl::geom::Transform Stage_obj::set_transform( ::openfl::geom::Transform value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3368_set_transform)
HXDLIN(3368)		return this->get_transform();
            	}


Float Stage_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3373_set_width)
HXDLIN(3373)		return this->get_width();
            	}


Float Stage_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3378_set_x)
HXDLIN(3378)		return ( (Float)(0) );
            	}


Float Stage_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3383_set_y)
HXDLIN(3383)		return ( (Float)(0) );
            	}



::hx::ObjectPtr< Stage_obj > Stage_obj::__new( ::lime::ui::Window window, ::Dynamic color) {
	::hx::ObjectPtr< Stage_obj > __this = new Stage_obj();
	__this->__construct(window,color);
	return __this;
}

::hx::ObjectPtr< Stage_obj > Stage_obj::__alloc(::hx::Ctx *_hx_ctx, ::lime::ui::Window window, ::Dynamic color) {
	Stage_obj *__this = (Stage_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Stage_obj), true, "openfl.display.Stage"));
	*(void **)__this = Stage_obj::_hx_vtable;
	__this->__construct(window,color);
	return __this;
}

Stage_obj::Stage_obj()
{
}

void Stage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Stage);
	HX_MARK_MEMBER_NAME(align,"align");
	HX_MARK_MEMBER_NAME(allowsFullScreen,"allowsFullScreen");
	HX_MARK_MEMBER_NAME(allowsFullScreenInteractive,"allowsFullScreenInteractive");
	HX_MARK_MEMBER_NAME(application,"application");
	HX_MARK_MEMBER_NAME(context3D,"context3D");
	HX_MARK_MEMBER_NAME(showDefaultContextMenu,"showDefaultContextMenu");
	HX_MARK_MEMBER_NAME(softKeyboardRect,"softKeyboardRect");
	HX_MARK_MEMBER_NAME(stage3Ds,"stage3Ds");
	HX_MARK_MEMBER_NAME(stageFocusRect,"stageFocusRect");
	HX_MARK_MEMBER_NAME(stageHeight,"stageHeight");
	HX_MARK_MEMBER_NAME(stageWidth,"stageWidth");
	HX_MARK_MEMBER_NAME(window,"window");
	HX_MARK_MEMBER_NAME(_hx___cacheFocus,"__cacheFocus");
	HX_MARK_MEMBER_NAME(_hx___clearBeforeRender,"__clearBeforeRender");
	HX_MARK_MEMBER_NAME(_hx___color,"__color");
	HX_MARK_MEMBER_NAME(_hx___colorSplit,"__colorSplit");
	HX_MARK_MEMBER_NAME(_hx___colorString,"__colorString");
	HX_MARK_MEMBER_NAME(_hx___contentsScaleFactor,"__contentsScaleFactor");
	HX_MARK_MEMBER_NAME(_hx___currentTabOrderIndex,"__currentTabOrderIndex");
	HX_MARK_MEMBER_NAME(_hx___deltaTime,"__deltaTime");
	HX_MARK_MEMBER_NAME(_hx___displayMatrix,"__displayMatrix");
	HX_MARK_MEMBER_NAME(_hx___displayRect,"__displayRect");
	HX_MARK_MEMBER_NAME(_hx___displayState,"__displayState");
	HX_MARK_MEMBER_NAME(_hx___dragBounds,"__dragBounds");
	HX_MARK_MEMBER_NAME(_hx___dragObject,"__dragObject");
	HX_MARK_MEMBER_NAME(_hx___dragOffsetX,"__dragOffsetX");
	HX_MARK_MEMBER_NAME(_hx___dragOffsetY,"__dragOffsetY");
	HX_MARK_MEMBER_NAME(_hx___focus,"__focus");
	HX_MARK_MEMBER_NAME(_hx___forceRender,"__forceRender");
	HX_MARK_MEMBER_NAME(_hx___fullScreenSourceRect,"__fullScreenSourceRect");
	HX_MARK_MEMBER_NAME(_hx___invalidated,"__invalidated");
	HX_MARK_MEMBER_NAME(_hx___lastClickTime,"__lastClickTime");
	HX_MARK_MEMBER_NAME(_hx___logicalWidth,"__logicalWidth");
	HX_MARK_MEMBER_NAME(_hx___logicalHeight,"__logicalHeight");
	HX_MARK_MEMBER_NAME(_hx___macKeyboard,"__macKeyboard");
	HX_MARK_MEMBER_NAME(_hx___mouseDownLeft,"__mouseDownLeft");
	HX_MARK_MEMBER_NAME(_hx___mouseDownMiddle,"__mouseDownMiddle");
	HX_MARK_MEMBER_NAME(_hx___mouseDownRight,"__mouseDownRight");
	HX_MARK_MEMBER_NAME(_hx___mouseOutStack,"__mouseOutStack");
	HX_MARK_MEMBER_NAME(_hx___mouseOverTarget,"__mouseOverTarget");
	HX_MARK_MEMBER_NAME(_hx___mouseX,"__mouseX");
	HX_MARK_MEMBER_NAME(_hx___mouseY,"__mouseY");
	HX_MARK_MEMBER_NAME(_hx___pendingMouseEvent,"__pendingMouseEvent");
	HX_MARK_MEMBER_NAME(_hx___pendingMouseX,"__pendingMouseX");
	HX_MARK_MEMBER_NAME(_hx___pendingMouseY,"__pendingMouseY");
	HX_MARK_MEMBER_NAME(_hx___quality,"__quality");
	HX_MARK_MEMBER_NAME(_hx___renderer,"__renderer");
	HX_MARK_MEMBER_NAME(_hx___rendering,"__rendering");
	HX_MARK_MEMBER_NAME(_hx___rollOutStack,"__rollOutStack");
	HX_MARK_MEMBER_NAME(_hx___scaleMode,"__scaleMode");
	HX_MARK_MEMBER_NAME(_hx___stack,"__stack");
	HX_MARK_MEMBER_NAME(_hx___touchData,"__touchData");
	HX_MARK_MEMBER_NAME(_hx___transparent,"__transparent");
	HX_MARK_MEMBER_NAME(_hx___wasDirty,"__wasDirty");
	HX_MARK_MEMBER_NAME(_hx___wasFullscreen,"__wasFullscreen");
	HX_MARK_MEMBER_NAME(_hx___primaryTouch,"__primaryTouch");
	 ::openfl::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Stage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(align,"align");
	HX_VISIT_MEMBER_NAME(allowsFullScreen,"allowsFullScreen");
	HX_VISIT_MEMBER_NAME(allowsFullScreenInteractive,"allowsFullScreenInteractive");
	HX_VISIT_MEMBER_NAME(application,"application");
	HX_VISIT_MEMBER_NAME(context3D,"context3D");
	HX_VISIT_MEMBER_NAME(showDefaultContextMenu,"showDefaultContextMenu");
	HX_VISIT_MEMBER_NAME(softKeyboardRect,"softKeyboardRect");
	HX_VISIT_MEMBER_NAME(stage3Ds,"stage3Ds");
	HX_VISIT_MEMBER_NAME(stageFocusRect,"stageFocusRect");
	HX_VISIT_MEMBER_NAME(stageHeight,"stageHeight");
	HX_VISIT_MEMBER_NAME(stageWidth,"stageWidth");
	HX_VISIT_MEMBER_NAME(window,"window");
	HX_VISIT_MEMBER_NAME(_hx___cacheFocus,"__cacheFocus");
	HX_VISIT_MEMBER_NAME(_hx___clearBeforeRender,"__clearBeforeRender");
	HX_VISIT_MEMBER_NAME(_hx___color,"__color");
	HX_VISIT_MEMBER_NAME(_hx___colorSplit,"__colorSplit");
	HX_VISIT_MEMBER_NAME(_hx___colorString,"__colorString");
	HX_VISIT_MEMBER_NAME(_hx___contentsScaleFactor,"__contentsScaleFactor");
	HX_VISIT_MEMBER_NAME(_hx___currentTabOrderIndex,"__currentTabOrderIndex");
	HX_VISIT_MEMBER_NAME(_hx___deltaTime,"__deltaTime");
	HX_VISIT_MEMBER_NAME(_hx___displayMatrix,"__displayMatrix");
	HX_VISIT_MEMBER_NAME(_hx___displayRect,"__displayRect");
	HX_VISIT_MEMBER_NAME(_hx___displayState,"__displayState");
	HX_VISIT_MEMBER_NAME(_hx___dragBounds,"__dragBounds");
	HX_VISIT_MEMBER_NAME(_hx___dragObject,"__dragObject");
	HX_VISIT_MEMBER_NAME(_hx___dragOffsetX,"__dragOffsetX");
	HX_VISIT_MEMBER_NAME(_hx___dragOffsetY,"__dragOffsetY");
	HX_VISIT_MEMBER_NAME(_hx___focus,"__focus");
	HX_VISIT_MEMBER_NAME(_hx___forceRender,"__forceRender");
	HX_VISIT_MEMBER_NAME(_hx___fullScreenSourceRect,"__fullScreenSourceRect");
	HX_VISIT_MEMBER_NAME(_hx___invalidated,"__invalidated");
	HX_VISIT_MEMBER_NAME(_hx___lastClickTime,"__lastClickTime");
	HX_VISIT_MEMBER_NAME(_hx___logicalWidth,"__logicalWidth");
	HX_VISIT_MEMBER_NAME(_hx___logicalHeight,"__logicalHeight");
	HX_VISIT_MEMBER_NAME(_hx___macKeyboard,"__macKeyboard");
	HX_VISIT_MEMBER_NAME(_hx___mouseDownLeft,"__mouseDownLeft");
	HX_VISIT_MEMBER_NAME(_hx___mouseDownMiddle,"__mouseDownMiddle");
	HX_VISIT_MEMBER_NAME(_hx___mouseDownRight,"__mouseDownRight");
	HX_VISIT_MEMBER_NAME(_hx___mouseOutStack,"__mouseOutStack");
	HX_VISIT_MEMBER_NAME(_hx___mouseOverTarget,"__mouseOverTarget");
	HX_VISIT_MEMBER_NAME(_hx___mouseX,"__mouseX");
	HX_VISIT_MEMBER_NAME(_hx___mouseY,"__mouseY");
	HX_VISIT_MEMBER_NAME(_hx___pendingMouseEvent,"__pendingMouseEvent");
	HX_VISIT_MEMBER_NAME(_hx___pendingMouseX,"__pendingMouseX");
	HX_VISIT_MEMBER_NAME(_hx___pendingMouseY,"__pendingMouseY");
	HX_VISIT_MEMBER_NAME(_hx___quality,"__quality");
	HX_VISIT_MEMBER_NAME(_hx___renderer,"__renderer");
	HX_VISIT_MEMBER_NAME(_hx___rendering,"__rendering");
	HX_VISIT_MEMBER_NAME(_hx___rollOutStack,"__rollOutStack");
	HX_VISIT_MEMBER_NAME(_hx___scaleMode,"__scaleMode");
	HX_VISIT_MEMBER_NAME(_hx___stack,"__stack");
	HX_VISIT_MEMBER_NAME(_hx___touchData,"__touchData");
	HX_VISIT_MEMBER_NAME(_hx___transparent,"__transparent");
	HX_VISIT_MEMBER_NAME(_hx___wasDirty,"__wasDirty");
	HX_VISIT_MEMBER_NAME(_hx___wasFullscreen,"__wasFullscreen");
	HX_VISIT_MEMBER_NAME(_hx___primaryTouch,"__primaryTouch");
	 ::openfl::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Stage_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { return ::hx::Val( align ); }
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_focus() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return ::hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return ::hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { return ::hx::Val( window ); }
		if (HX_FIELD_EQ(inName,"__drag") ) { return ::hx::Val( _hx___drag_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_quality() ); }
		if (HX_FIELD_EQ(inName,"__color") ) { return ::hx::Val( _hx___color ); }
		if (HX_FIELD_EQ(inName,"__focus") ) { return ::hx::Val( _hx___focus ); }
		if (HX_FIELD_EQ(inName,"__stack") ) { return ::hx::Val( _hx___stack ); }
		if (HX_FIELD_EQ(inName,"__onKey") ) { return ::hx::Val( _hx___onKey_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"stage3Ds") ) { return ::hx::Val( stage3Ds ); }
		if (HX_FIELD_EQ(inName,"__mouseX") ) { return ::hx::Val( _hx___mouseX ); }
		if (HX_FIELD_EQ(inName,"__mouseY") ) { return ::hx::Val( _hx___mouseY ); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return ::hx::Val( _hx___resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return ::hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"context3D") ) { return ::hx::Val( context3D ); }
		if (HX_FIELD_EQ(inName,"frameRate") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_frameRate() ); }
		if (HX_FIELD_EQ(inName,"__quality") ) { return ::hx::Val( _hx___quality ); }
		if (HX_FIELD_EQ(inName,"__onMouse") ) { return ::hx::Val( _hx___onMouse_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onTouch") ) { return ::hx::Val( _hx___onTouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return ::hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_focus") ) { return ::hx::Val( get_focus_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_focus") ) { return ::hx::Val( set_focus_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return ::hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stageWidth") ) { return ::hx::Val( stageWidth ); }
		if (HX_FIELD_EQ(inName,"__renderer") ) { return ::hx::Val( _hx___renderer ); }
		if (HX_FIELD_EQ(inName,"__wasDirty") ) { return ::hx::Val( _hx___wasDirty ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return ::hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseX") ) { return ::hx::Val( get_mouseX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseY") ) { return ::hx::Val( get_mouseY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleX") ) { return ::hx::Val( set_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleY") ) { return ::hx::Val( set_scaleY_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"application") ) { return ::hx::Val( application ); }
		if (HX_FIELD_EQ(inName,"stageHeight") ) { return ::hx::Val( stageHeight ); }
		if (HX_FIELD_EQ(inName,"__deltaTime") ) { return ::hx::Val( _hx___deltaTime ); }
		if (HX_FIELD_EQ(inName,"__rendering") ) { return ::hx::Val( _hx___rendering ); }
		if (HX_FIELD_EQ(inName,"__scaleMode") ) { return ::hx::Val( _hx___scaleMode ); }
		if (HX_FIELD_EQ(inName,"__touchData") ) { return ::hx::Val( _hx___touchData ); }
		if (HX_FIELD_EQ(inName,"get_quality") ) { return ::hx::Val( get_quality_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"displayState") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_displayState() ); }
		if (HX_FIELD_EQ(inName,"__cacheFocus") ) { return ::hx::Val( _hx___cacheFocus ); }
		if (HX_FIELD_EQ(inName,"__colorSplit") ) { return ::hx::Val( _hx___colorSplit ); }
		if (HX_FIELD_EQ(inName,"__dragBounds") ) { return ::hx::Val( _hx___dragBounds ); }
		if (HX_FIELD_EQ(inName,"__dragObject") ) { return ::hx::Val( _hx___dragObject ); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return ::hx::Val( set_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabIndex") ) { return ::hx::Val( get_tabIndex_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__colorString") ) { return ::hx::Val( _hx___colorString ); }
		if (HX_FIELD_EQ(inName,"__displayRect") ) { return ::hx::Val( _hx___displayRect ); }
		if (HX_FIELD_EQ(inName,"__dragOffsetX") ) { return ::hx::Val( _hx___dragOffsetX ); }
		if (HX_FIELD_EQ(inName,"__dragOffsetY") ) { return ::hx::Val( _hx___dragOffsetY ); }
		if (HX_FIELD_EQ(inName,"__forceRender") ) { return ::hx::Val( _hx___forceRender ); }
		if (HX_FIELD_EQ(inName,"__invalidated") ) { return ::hx::Val( _hx___invalidated ); }
		if (HX_FIELD_EQ(inName,"__macKeyboard") ) { return ::hx::Val( _hx___macKeyboard ); }
		if (HX_FIELD_EQ(inName,"__transparent") ) { return ::hx::Val( _hx___transparent ); }
		if (HX_FIELD_EQ(inName,"__handleError") ) { return ::hx::Val( _hx___handleError_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeKeyUp") ) { return ::hx::Val( _hx___onLimeKeyUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_frameRate") ) { return ::hx::Val( get_frameRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_frameRate") ) { return ::hx::Val( set_frameRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleMode") ) { return ::hx::Val( set_scaleMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_transform") ) { return ::hx::Val( set_transform_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"stageFocusRect") ) { return ::hx::Val( stageFocusRect ); }
		if (HX_FIELD_EQ(inName,"__displayState") ) { return ::hx::Val( _hx___displayState ); }
		if (HX_FIELD_EQ(inName,"__logicalWidth") ) { return ::hx::Val( _hx___logicalWidth ); }
		if (HX_FIELD_EQ(inName,"__rollOutStack") ) { return ::hx::Val( _hx___rollOutStack ); }
		if (HX_FIELD_EQ(inName,"__primaryTouch") ) { return ::hx::Val( _hx___primaryTouch ); }
		if (HX_FIELD_EQ(inName,"__onLimeRender") ) { return ::hx::Val( _hx___onLimeRender_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeUpdate") ) { return ::hx::Val( _hx___onLimeUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onMouseWheel") ) { return ::hx::Val( _hx___onMouseWheel_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabEnabled") ) { return ::hx::Val( get_tabEnabled_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__displayMatrix") ) { return ::hx::Val( _hx___displayMatrix ); }
		if (HX_FIELD_EQ(inName,"__lastClickTime") ) { return ::hx::Val( _hx___lastClickTime ); }
		if (HX_FIELD_EQ(inName,"__logicalHeight") ) { return ::hx::Val( _hx___logicalHeight ); }
		if (HX_FIELD_EQ(inName,"__mouseDownLeft") ) { return ::hx::Val( _hx___mouseDownLeft ); }
		if (HX_FIELD_EQ(inName,"__mouseOutStack") ) { return ::hx::Val( _hx___mouseOutStack ); }
		if (HX_FIELD_EQ(inName,"__pendingMouseX") ) { return ::hx::Val( _hx___pendingMouseX ); }
		if (HX_FIELD_EQ(inName,"__pendingMouseY") ) { return ::hx::Val( _hx___pendingMouseY ); }
		if (HX_FIELD_EQ(inName,"__wasFullscreen") ) { return ::hx::Val( _hx___wasFullscreen ); }
		if (HX_FIELD_EQ(inName,"__dispatchEvent") ) { return ::hx::Val( _hx___dispatchEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatchStack") ) { return ::hx::Val( _hx___dispatchStack_dyn() ); }
		if (HX_FIELD_EQ(inName,"__globalToLocal") ) { return ::hx::Val( _hx___globalToLocal_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeKeyDown") ) { return ::hx::Val( _hx___onLimeKeyDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeMouseUp") ) { return ::hx::Val( _hx___onLimeMouseUp_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"allowsFullScreen") ) { return ::hx::Val( allowsFullScreen ); }
		if (HX_FIELD_EQ(inName,"softKeyboardRect") ) { return ::hx::Val( softKeyboardRect ); }
		if (HX_FIELD_EQ(inName,"__mouseDownRight") ) { return ::hx::Val( _hx___mouseDownRight ); }
		if (HX_FIELD_EQ(inName,"__broadcastEvent") ) { return ::hx::Val( _hx___broadcastEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"__createRenderer") ) { return ::hx::Val( _hx___createRenderer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatchTarget") ) { return ::hx::Val( _hx___dispatchTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getInteractive") ) { return ::hx::Val( _hx___getInteractive_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeTextEdit") ) { return ::hx::Val( _hx___onLimeTextEdit_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeTouchEnd") ) { return ::hx::Val( _hx___onLimeTouchEnd_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setLogicalSize") ) { return ::hx::Val( _hx___setLogicalSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_displayState") ) { return ::hx::Val( get_displayState_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayState") ) { return ::hx::Val( set_displayState_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__mouseDownMiddle") ) { return ::hx::Val( _hx___mouseDownMiddle ); }
		if (HX_FIELD_EQ(inName,"__mouseOverTarget") ) { return ::hx::Val( _hx___mouseOverTarget ); }
		if (HX_FIELD_EQ(inName,"__onLimeMouseDown") ) { return ::hx::Val( _hx___onLimeMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeMouseMove") ) { return ::hx::Val( _hx___onLimeMouseMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeTextInput") ) { return ::hx::Val( _hx___onLimeTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeTouchMove") ) { return ::hx::Val( _hx___onLimeTouchMove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__onLimeModuleExit") ) { return ::hx::Val( _hx___onLimeModuleExit_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeMouseWheel") ) { return ::hx::Val( _hx___onLimeMouseWheel_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeTouchStart") ) { return ::hx::Val( _hx___onLimeTouchStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeWindowMove") ) { return ::hx::Val( _hx___onLimeWindowMove_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__clearBeforeRender") ) { return ::hx::Val( _hx___clearBeforeRender ); }
		if (HX_FIELD_EQ(inName,"__pendingMouseEvent") ) { return ::hx::Val( _hx___pendingMouseEvent ); }
		if (HX_FIELD_EQ(inName,"__onLimeTouchCancel") ) { return ::hx::Val( _hx___onLimeTouchCancel_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeWindowClose") ) { return ::hx::Val( _hx___onLimeWindowClose_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeWindowEnter") ) { return ::hx::Val( _hx___onLimeWindowEnter_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeWindowLeave") ) { return ::hx::Val( _hx___onLimeWindowLeave_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"fullScreenSourceRect") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_fullScreenSourceRect() ); }
		if (HX_FIELD_EQ(inName,"__onLimeCreateWindow") ) { return ::hx::Val( _hx___onLimeCreateWindow_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeWindowCreate") ) { return ::hx::Val( _hx___onLimeWindowCreate_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeWindowExpose") ) { return ::hx::Val( _hx___onLimeWindowExpose_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeWindowResize") ) { return ::hx::Val( _hx___onLimeWindowResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__registerLimeModule") ) { return ::hx::Val( _hx___registerLimeModule_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__contentsScaleFactor") ) { return ::hx::Val( _hx___contentsScaleFactor ); }
		if (HX_FIELD_EQ(inName,"__onLimeWindowFocusIn") ) { return ::hx::Val( _hx___onLimeWindowFocusIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeWindowRestore") ) { return ::hx::Val( _hx___onLimeWindowRestore_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"showDefaultContextMenu") ) { return ::hx::Val( showDefaultContextMenu ); }
		if (HX_FIELD_EQ(inName,"__currentTabOrderIndex") ) { return ::hx::Val( _hx___currentTabOrderIndex ); }
		if (HX_FIELD_EQ(inName,"__fullScreenSourceRect") ) { return ::hx::Val( _hx___fullScreenSourceRect ); }
		if (HX_FIELD_EQ(inName,"__onLimeGamepadConnect") ) { return ::hx::Val( _hx___onLimeGamepadConnect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeWindowActivate") ) { return ::hx::Val( _hx___onLimeWindowActivate_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeWindowDropFile") ) { return ::hx::Val( _hx___onLimeWindowDropFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeWindowFocusOut") ) { return ::hx::Val( _hx___onLimeWindowFocusOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeWindowMinimize") ) { return ::hx::Val( _hx___onLimeWindowMinimize_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__onLimeGamepadAxisMove") ) { return ::hx::Val( _hx___onLimeGamepadAxisMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeGamepadButtonUp") ) { return ::hx::Val( _hx___onLimeGamepadButtonUp_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__onLimeWindowDeactivate") ) { return ::hx::Val( _hx___onLimeWindowDeactivate_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeWindowFullscreen") ) { return ::hx::Val( _hx___onLimeWindowFullscreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_fullScreenSourceRect") ) { return ::hx::Val( get_fullScreenSourceRect_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__onLimeGamepadButtonDown") ) { return ::hx::Val( _hx___onLimeGamepadButtonDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeGamepadDisconnect") ) { return ::hx::Val( _hx___onLimeGamepadDisconnect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeMouseMoveRelative") ) { return ::hx::Val( _hx___onLimeMouseMoveRelative_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onLimeRenderContextLost") ) { return ::hx::Val( _hx___onLimeRenderContextLost_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"allowsFullScreenInteractive") ) { return ::hx::Val( allowsFullScreenInteractive ); }
		if (HX_FIELD_EQ(inName,"__dispatchPendingMouseEvent") ) { return ::hx::Val( _hx___dispatchPendingMouseEvent_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__onLimeRenderContextRestored") ) { return ::hx::Val( _hx___onLimeRenderContextRestored_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Stage_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { align=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_focus(inValue.Cast<  ::openfl::display::InteractiveObject >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { window=inValue.Cast<  ::lime::ui::Window >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__color") ) { _hx___color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__focus") ) { _hx___focus=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stack") ) { _hx___stack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"stage3Ds") ) { stage3Ds=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseX") ) { _hx___mouseX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseY") ) { _hx___mouseY=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"context3D") ) { context3D=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameRate") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_frameRate(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__quality") ) { _hx___quality=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stageWidth") ) { stageWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderer") ) { _hx___renderer=inValue.Cast<  ::openfl::display::DisplayObjectRenderer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__wasDirty") ) { _hx___wasDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"application") ) { application=inValue.Cast<  ::lime::app::Application >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageHeight") ) { stageHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__deltaTime") ) { _hx___deltaTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rendering") ) { _hx___rendering=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scaleMode") ) { _hx___scaleMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__touchData") ) { _hx___touchData=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"displayState") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_displayState(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__cacheFocus") ) { _hx___cacheFocus=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__colorSplit") ) { _hx___colorSplit=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragBounds") ) { _hx___dragBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragObject") ) { _hx___dragObject=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__colorString") ) { _hx___colorString=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__displayRect") ) { _hx___displayRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragOffsetX") ) { _hx___dragOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragOffsetY") ) { _hx___dragOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__forceRender") ) { _hx___forceRender=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__invalidated") ) { _hx___invalidated=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__macKeyboard") ) { _hx___macKeyboard=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transparent") ) { _hx___transparent=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"stageFocusRect") ) { stageFocusRect=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__displayState") ) { _hx___displayState=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__logicalWidth") ) { _hx___logicalWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rollOutStack") ) { _hx___rollOutStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__primaryTouch") ) { _hx___primaryTouch=inValue.Cast<  ::lime::ui::Touch >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__displayMatrix") ) { _hx___displayMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__lastClickTime") ) { _hx___lastClickTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__logicalHeight") ) { _hx___logicalHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseDownLeft") ) { _hx___mouseDownLeft=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseOutStack") ) { _hx___mouseOutStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__pendingMouseX") ) { _hx___pendingMouseX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__pendingMouseY") ) { _hx___pendingMouseY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__wasFullscreen") ) { _hx___wasFullscreen=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"allowsFullScreen") ) { allowsFullScreen=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"softKeyboardRect") ) { softKeyboardRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseDownRight") ) { _hx___mouseDownRight=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__mouseDownMiddle") ) { _hx___mouseDownMiddle=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseOverTarget") ) { _hx___mouseOverTarget=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__clearBeforeRender") ) { _hx___clearBeforeRender=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__pendingMouseEvent") ) { _hx___pendingMouseEvent=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__contentsScaleFactor") ) { _hx___contentsScaleFactor=inValue.Cast< Float >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"showDefaultContextMenu") ) { showDefaultContextMenu=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__currentTabOrderIndex") ) { _hx___currentTabOrderIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fullScreenSourceRect") ) { _hx___fullScreenSourceRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"allowsFullScreenInteractive") ) { allowsFullScreenInteractive=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Stage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("align",c5,56,91,21));
	outFields->push(HX_("allowsFullScreen",c5,66,dc,4b));
	outFields->push(HX_("allowsFullScreenInteractive",1d,8b,2c,c8));
	outFields->push(HX_("application",50,ab,3e,2a));
	outFields->push(HX_("context3D",60,5c,fc,16));
	outFields->push(HX_("displayState",6f,4c,64,90));
	outFields->push(HX_("focus",d8,5f,89,04));
	outFields->push(HX_("frameRate",ad,11,25,39));
	outFields->push(HX_("fullScreenSourceRect",da,85,fa,3e));
	outFields->push(HX_("quality",bf,04,4c,44));
	outFields->push(HX_("showDefaultContextMenu",4a,8c,83,33));
	outFields->push(HX_("softKeyboardRect",75,35,3a,ec));
	outFields->push(HX_("stage3Ds",a4,4e,30,e3));
	outFields->push(HX_("stageFocusRect",7e,d2,81,74));
	outFields->push(HX_("stageHeight",45,89,45,95));
	outFields->push(HX_("stageWidth",68,0a,b3,1d));
	outFields->push(HX_("window",f0,93,8c,52));
	outFields->push(HX_("__cacheFocus",56,41,d5,7f));
	outFields->push(HX_("__clearBeforeRender",42,a3,d5,f3));
	outFields->push(HX_("__color",43,ca,ba,b4));
	outFields->push(HX_("__colorSplit",97,7d,6e,de));
	outFields->push(HX_("__colorString",74,fb,d0,13));
	outFields->push(HX_("__contentsScaleFactor",df,54,29,28));
	outFields->push(HX_("__currentTabOrderIndex",80,39,3b,0f));
	outFields->push(HX_("__deltaTime",05,85,88,23));
	outFields->push(HX_("__displayMatrix",03,2b,dd,04));
	outFields->push(HX_("__displayRect",66,2d,12,7c));
	outFields->push(HX_("__displayState",8f,cf,24,b1));
	outFields->push(HX_("__dragBounds",a9,10,1d,47));
	outFields->push(HX_("__dragObject",f3,08,3f,f6));
	outFields->push(HX_("__dragOffsetX",b1,6c,fe,d5));
	outFields->push(HX_("__dragOffsetY",b2,6c,fe,d5));
	outFields->push(HX_("__focus",b8,b8,e7,6e));
	outFields->push(HX_("__forceRender",81,94,19,b1));
	outFields->push(HX_("__fullScreenSourceRect",fa,28,a3,06));
	outFields->push(HX_("__invalidated",69,73,24,06));
	outFields->push(HX_("__lastClickTime",1f,4c,e7,b1));
	outFields->push(HX_("__logicalWidth",9d,ce,2c,0d));
	outFields->push(HX_("__logicalHeight",70,73,57,30));
	outFields->push(HX_("__macKeyboard",36,6b,9a,d8));
	outFields->push(HX_("__mouseDownLeft",ae,3d,4b,93));
	outFields->push(HX_("__mouseDownMiddle",bc,00,70,1d));
	outFields->push(HX_("__mouseDownRight",55,c8,97,c5));
	outFields->push(HX_("__mouseOutStack",ff,ab,80,5d));
	outFields->push(HX_("__mouseOverTarget",2a,fb,94,00));
	outFields->push(HX_("__mouseX",b3,b5,3d,74));
	outFields->push(HX_("__mouseY",b4,b5,3d,74));
	outFields->push(HX_("__pendingMouseEvent",cc,f3,63,e3));
	outFields->push(HX_("__pendingMouseX",2a,eb,8e,4d));
	outFields->push(HX_("__pendingMouseY",2b,eb,8e,4d));
	outFields->push(HX_("__quality",9f,55,9a,c5));
	outFields->push(HX_("__renderer",63,38,14,56));
	outFields->push(HX_("__rendering",2c,24,a0,fb));
	outFields->push(HX_("__rollOutStack",97,e3,31,86));
	outFields->push(HX_("__scaleMode",ed,23,00,5a));
	outFields->push(HX_("__stack",28,c0,69,ee));
	outFields->push(HX_("__touchData",69,2e,fc,35));
	outFields->push(HX_("__transparent",32,6c,32,6b));
	outFields->push(HX_("__wasDirty",49,bd,55,63));
	outFields->push(HX_("__wasFullscreen",a4,85,04,b2));
	outFields->push(HX_("__primaryTouch",bd,6b,1c,30));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Stage_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Stage_obj,align),HX_("align",c5,56,91,21)},
	{::hx::fsBool,(int)offsetof(Stage_obj,allowsFullScreen),HX_("allowsFullScreen",c5,66,dc,4b)},
	{::hx::fsBool,(int)offsetof(Stage_obj,allowsFullScreenInteractive),HX_("allowsFullScreenInteractive",1d,8b,2c,c8)},
	{::hx::fsObject /*  ::lime::app::Application */ ,(int)offsetof(Stage_obj,application),HX_("application",50,ab,3e,2a)},
	{::hx::fsObject /*  ::openfl::display3D::Context3D */ ,(int)offsetof(Stage_obj,context3D),HX_("context3D",60,5c,fc,16)},
	{::hx::fsBool,(int)offsetof(Stage_obj,showDefaultContextMenu),HX_("showDefaultContextMenu",4a,8c,83,33)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(Stage_obj,softKeyboardRect),HX_("softKeyboardRect",75,35,3a,ec)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(Stage_obj,stage3Ds),HX_("stage3Ds",a4,4e,30,e3)},
	{::hx::fsBool,(int)offsetof(Stage_obj,stageFocusRect),HX_("stageFocusRect",7e,d2,81,74)},
	{::hx::fsInt,(int)offsetof(Stage_obj,stageHeight),HX_("stageHeight",45,89,45,95)},
	{::hx::fsInt,(int)offsetof(Stage_obj,stageWidth),HX_("stageWidth",68,0a,b3,1d)},
	{::hx::fsObject /*  ::lime::ui::Window */ ,(int)offsetof(Stage_obj,window),HX_("window",f0,93,8c,52)},
	{::hx::fsObject /*  ::openfl::display::InteractiveObject */ ,(int)offsetof(Stage_obj,_hx___cacheFocus),HX_("__cacheFocus",56,41,d5,7f)},
	{::hx::fsBool,(int)offsetof(Stage_obj,_hx___clearBeforeRender),HX_("__clearBeforeRender",42,a3,d5,f3)},
	{::hx::fsInt,(int)offsetof(Stage_obj,_hx___color),HX_("__color",43,ca,ba,b4)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Stage_obj,_hx___colorSplit),HX_("__colorSplit",97,7d,6e,de)},
	{::hx::fsString,(int)offsetof(Stage_obj,_hx___colorString),HX_("__colorString",74,fb,d0,13)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,_hx___contentsScaleFactor),HX_("__contentsScaleFactor",df,54,29,28)},
	{::hx::fsInt,(int)offsetof(Stage_obj,_hx___currentTabOrderIndex),HX_("__currentTabOrderIndex",80,39,3b,0f)},
	{::hx::fsInt,(int)offsetof(Stage_obj,_hx___deltaTime),HX_("__deltaTime",05,85,88,23)},
	{::hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(Stage_obj,_hx___displayMatrix),HX_("__displayMatrix",03,2b,dd,04)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(Stage_obj,_hx___displayRect),HX_("__displayRect",66,2d,12,7c)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Stage_obj,_hx___displayState),HX_("__displayState",8f,cf,24,b1)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(Stage_obj,_hx___dragBounds),HX_("__dragBounds",a9,10,1d,47)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Stage_obj,_hx___dragObject),HX_("__dragObject",f3,08,3f,f6)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,_hx___dragOffsetX),HX_("__dragOffsetX",b1,6c,fe,d5)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,_hx___dragOffsetY),HX_("__dragOffsetY",b2,6c,fe,d5)},
	{::hx::fsObject /*  ::openfl::display::InteractiveObject */ ,(int)offsetof(Stage_obj,_hx___focus),HX_("__focus",b8,b8,e7,6e)},
	{::hx::fsBool,(int)offsetof(Stage_obj,_hx___forceRender),HX_("__forceRender",81,94,19,b1)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(Stage_obj,_hx___fullScreenSourceRect),HX_("__fullScreenSourceRect",fa,28,a3,06)},
	{::hx::fsBool,(int)offsetof(Stage_obj,_hx___invalidated),HX_("__invalidated",69,73,24,06)},
	{::hx::fsInt,(int)offsetof(Stage_obj,_hx___lastClickTime),HX_("__lastClickTime",1f,4c,e7,b1)},
	{::hx::fsInt,(int)offsetof(Stage_obj,_hx___logicalWidth),HX_("__logicalWidth",9d,ce,2c,0d)},
	{::hx::fsInt,(int)offsetof(Stage_obj,_hx___logicalHeight),HX_("__logicalHeight",70,73,57,30)},
	{::hx::fsBool,(int)offsetof(Stage_obj,_hx___macKeyboard),HX_("__macKeyboard",36,6b,9a,d8)},
	{::hx::fsObject /*  ::openfl::display::InteractiveObject */ ,(int)offsetof(Stage_obj,_hx___mouseDownLeft),HX_("__mouseDownLeft",ae,3d,4b,93)},
	{::hx::fsObject /*  ::openfl::display::InteractiveObject */ ,(int)offsetof(Stage_obj,_hx___mouseDownMiddle),HX_("__mouseDownMiddle",bc,00,70,1d)},
	{::hx::fsObject /*  ::openfl::display::InteractiveObject */ ,(int)offsetof(Stage_obj,_hx___mouseDownRight),HX_("__mouseDownRight",55,c8,97,c5)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stage_obj,_hx___mouseOutStack),HX_("__mouseOutStack",ff,ab,80,5d)},
	{::hx::fsObject /*  ::openfl::display::InteractiveObject */ ,(int)offsetof(Stage_obj,_hx___mouseOverTarget),HX_("__mouseOverTarget",2a,fb,94,00)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,_hx___mouseX),HX_("__mouseX",b3,b5,3d,74)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,_hx___mouseY),HX_("__mouseY",b4,b5,3d,74)},
	{::hx::fsBool,(int)offsetof(Stage_obj,_hx___pendingMouseEvent),HX_("__pendingMouseEvent",cc,f3,63,e3)},
	{::hx::fsInt,(int)offsetof(Stage_obj,_hx___pendingMouseX),HX_("__pendingMouseX",2a,eb,8e,4d)},
	{::hx::fsInt,(int)offsetof(Stage_obj,_hx___pendingMouseY),HX_("__pendingMouseY",2b,eb,8e,4d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Stage_obj,_hx___quality),HX_("__quality",9f,55,9a,c5)},
	{::hx::fsObject /*  ::openfl::display::DisplayObjectRenderer */ ,(int)offsetof(Stage_obj,_hx___renderer),HX_("__renderer",63,38,14,56)},
	{::hx::fsBool,(int)offsetof(Stage_obj,_hx___rendering),HX_("__rendering",2c,24,a0,fb)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stage_obj,_hx___rollOutStack),HX_("__rollOutStack",97,e3,31,86)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Stage_obj,_hx___scaleMode),HX_("__scaleMode",ed,23,00,5a)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stage_obj,_hx___stack),HX_("__stack",28,c0,69,ee)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(Stage_obj,_hx___touchData),HX_("__touchData",69,2e,fc,35)},
	{::hx::fsBool,(int)offsetof(Stage_obj,_hx___transparent),HX_("__transparent",32,6c,32,6b)},
	{::hx::fsBool,(int)offsetof(Stage_obj,_hx___wasDirty),HX_("__wasDirty",49,bd,55,63)},
	{::hx::fsBool,(int)offsetof(Stage_obj,_hx___wasFullscreen),HX_("__wasFullscreen",a4,85,04,b2)},
	{::hx::fsObject /*  ::lime::ui::Touch */ ,(int)offsetof(Stage_obj,_hx___primaryTouch),HX_("__primaryTouch",bd,6b,1c,30)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Stage_obj_sStaticStorageInfo = 0;
#endif

static ::String Stage_obj_sMemberFields[] = {
	HX_("align",c5,56,91,21),
	HX_("allowsFullScreen",c5,66,dc,4b),
	HX_("allowsFullScreenInteractive",1d,8b,2c,c8),
	HX_("application",50,ab,3e,2a),
	HX_("context3D",60,5c,fc,16),
	HX_("showDefaultContextMenu",4a,8c,83,33),
	HX_("softKeyboardRect",75,35,3a,ec),
	HX_("stage3Ds",a4,4e,30,e3),
	HX_("stageFocusRect",7e,d2,81,74),
	HX_("stageHeight",45,89,45,95),
	HX_("stageWidth",68,0a,b3,1d),
	HX_("window",f0,93,8c,52),
	HX_("__cacheFocus",56,41,d5,7f),
	HX_("__clearBeforeRender",42,a3,d5,f3),
	HX_("__color",43,ca,ba,b4),
	HX_("__colorSplit",97,7d,6e,de),
	HX_("__colorString",74,fb,d0,13),
	HX_("__contentsScaleFactor",df,54,29,28),
	HX_("__currentTabOrderIndex",80,39,3b,0f),
	HX_("__deltaTime",05,85,88,23),
	HX_("__displayMatrix",03,2b,dd,04),
	HX_("__displayRect",66,2d,12,7c),
	HX_("__displayState",8f,cf,24,b1),
	HX_("__dragBounds",a9,10,1d,47),
	HX_("__dragObject",f3,08,3f,f6),
	HX_("__dragOffsetX",b1,6c,fe,d5),
	HX_("__dragOffsetY",b2,6c,fe,d5),
	HX_("__focus",b8,b8,e7,6e),
	HX_("__forceRender",81,94,19,b1),
	HX_("__fullScreenSourceRect",fa,28,a3,06),
	HX_("__invalidated",69,73,24,06),
	HX_("__lastClickTime",1f,4c,e7,b1),
	HX_("__logicalWidth",9d,ce,2c,0d),
	HX_("__logicalHeight",70,73,57,30),
	HX_("__macKeyboard",36,6b,9a,d8),
	HX_("__mouseDownLeft",ae,3d,4b,93),
	HX_("__mouseDownMiddle",bc,00,70,1d),
	HX_("__mouseDownRight",55,c8,97,c5),
	HX_("__mouseOutStack",ff,ab,80,5d),
	HX_("__mouseOverTarget",2a,fb,94,00),
	HX_("__mouseX",b3,b5,3d,74),
	HX_("__mouseY",b4,b5,3d,74),
	HX_("__pendingMouseEvent",cc,f3,63,e3),
	HX_("__pendingMouseX",2a,eb,8e,4d),
	HX_("__pendingMouseY",2b,eb,8e,4d),
	HX_("__quality",9f,55,9a,c5),
	HX_("__renderer",63,38,14,56),
	HX_("__rendering",2c,24,a0,fb),
	HX_("__rollOutStack",97,e3,31,86),
	HX_("__scaleMode",ed,23,00,5a),
	HX_("__stack",28,c0,69,ee),
	HX_("__touchData",69,2e,fc,35),
	HX_("__transparent",32,6c,32,6b),
	HX_("__wasDirty",49,bd,55,63),
	HX_("__wasFullscreen",a4,85,04,b2),
	HX_("__primaryTouch",bd,6b,1c,30),
	HX_("__broadcastEvent",79,9c,a4,95),
	HX_("__createRenderer",7f,cf,55,39),
	HX_("__dispatchEvent",e0,ff,16,4e),
	HX_("__dispatchPendingMouseEvent",b2,93,9d,89),
	HX_("__dispatchStack",0e,9f,5d,5c),
	HX_("__dispatchTarget",cb,88,8b,f6),
	HX_("__drag",14,8f,68,f1),
	HX_("__getInteractive",0c,1c,37,f8),
	HX_("__globalToLocal",ad,87,60,f3),
	HX_("__handleError",e0,b7,eb,6d),
	HX_("__onKey",a0,76,c7,9c),
	HX_("__onLimeCreateWindow",20,49,7f,00),
	HX_("__onLimeGamepadAxisMove",7f,25,91,9d),
	HX_("__onLimeGamepadButtonDown",e1,61,32,ca),
	HX_("__onLimeGamepadButtonUp",1a,22,cf,69),
	HX_("__onLimeGamepadConnect",5d,2b,35,a6),
	HX_("__onLimeGamepadDisconnect",c9,5e,12,87),
	HX_("__onLimeKeyDown",0d,0d,46,f2),
	HX_("__onLimeKeyUp",46,6a,1f,67),
	HX_("__onLimeModuleExit",fe,65,4c,35),
	HX_("__onLimeMouseDown",93,07,42,bc),
	HX_("__onLimeMouseMove",42,f2,34,c2),
	HX_("__onLimeMouseMoveRelative",2e,7d,3a,bd),
	HX_("__onLimeMouseUp",4c,97,71,16),
	HX_("__onLimeMouseWheel",4a,70,73,e9),
	HX_("__onLimeRender",6a,19,a3,99),
	HX_("__onLimeRenderContextLost",29,12,23,c7),
	HX_("__onLimeRenderContextRestored",1b,6c,8f,67),
	HX_("__onLimeTextEdit",6b,78,da,2e),
	HX_("__onLimeTextInput",89,aa,8a,24),
	HX_("__onLimeTouchCancel",05,1c,3d,ca),
	HX_("__onLimeTouchMove",dc,c8,4c,db),
	HX_("__onLimeTouchEnd",70,20,da,e8),
	HX_("__onLimeTouchStart",37,a0,88,7f),
	HX_("__onLimeUpdate",1d,34,7f,1b),
	HX_("__onLimeWindowActivate",d7,bd,3b,a5),
	HX_("__onLimeWindowClose",14,77,08,e6),
	HX_("__onLimeWindowCreate",20,78,1d,cf),
	HX_("__onLimeWindowDeactivate",58,cf,58,b8),
	HX_("__onLimeWindowDropFile",6f,18,e6,a8),
	HX_("__onLimeWindowEnter",74,cc,2b,0e),
	HX_("__onLimeWindowExpose",68,a3,8b,17),
	HX_("__onLimeWindowFocusIn",39,34,c4,9a),
	HX_("__onLimeWindowFocusOut",ba,11,ee,d0),
	HX_("__onLimeWindowFullscreen",5f,ad,0b,76),
	HX_("__onLimeWindowLeave",53,94,f8,0f),
	HX_("__onLimeWindowMinimize",42,e1,08,e1),
	HX_("__onLimeWindowMove",35,a3,23,d5),
	HX_("__onLimeWindowResize",18,6b,89,5b),
	HX_("__onLimeWindowRestore",aa,55,f1,c3),
	HX_("__onMouse",66,05,f1,23),
	HX_("__onMouseWheel",55,4d,8b,e0),
	HX_("__onTouch",00,07,bf,2b),
	HX_("__registerLimeModule",04,fd,1b,af),
	HX_("__resize",14,c5,aa,b0),
	HX_("__setLogicalSize",c8,6d,cd,32),
	HX_("__update",29,f1,34,2f),
	HX_("set_color",c6,b9,56,71),
	HX_("get_displayState",f8,38,03,95),
	HX_("set_displayState",6c,26,45,eb),
	HX_("get_focus",2f,bc,32,48),
	HX_("set_focus",3b,a8,83,2b),
	HX_("get_frameRate",84,e5,88,fa),
	HX_("set_frameRate",90,c7,8e,3f),
	HX_("get_fullScreenSourceRect",63,a3,96,81),
	HX_("set_height",24,16,51,f6),
	HX_("get_mouseX",5c,ba,95,bc),
	HX_("get_mouseY",5d,ba,95,bc),
	HX_("get_quality",d6,64,46,ca),
	HX_("set_rotation",bb,14,99,d2),
	HX_("set_scaleMode",f0,90,3d,32),
	HX_("set_scaleX",cb,f8,2a,30),
	HX_("set_scaleY",cc,f8,2a,30),
	HX_("get_tabEnabled",f5,7e,fe,b5),
	HX_("get_tabIndex",86,d0,d2,e1),
	HX_("set_transform",4f,e3,fc,4b),
	HX_("set_width",69,fe,5c,f1),
	HX_("set_x",5b,9b,2f,7a),
	HX_("set_y",5c,9b,2f,7a),
	::String(null()) };

::hx::Class Stage_obj::__mClass;

void Stage_obj::__register()
{
	Stage_obj _hx_dummy;
	Stage_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.display.Stage",14,36,7c,5c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Stage_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Stage_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stage_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Stage_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_188_boot)
HXDLIN( 188)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("__broadcastEvent",79,9c,a4,95), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(1,HX_("__dispatchTarget",cb,88,8b,f6), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(2,HX_("__dispatchEvent",e0,ff,16,4e), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c))->init(1,HX_("checkstyle:LeftCurly",95,2f,0f,13))))))
            				->setFixed(3,HX_("__dispatchStack",0e,9f,5d,5c), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c))->init(1,HX_("checkstyle:LeftCurly",95,2f,0f,13))))))
            				->setFixed(4,HX_("__handleError",e0,b7,eb,6d), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c))))))));
            	}
}

} // end namespace openfl
} // end namespace display
