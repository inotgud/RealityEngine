// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_display_ITileContainer
#include <openfl/display/ITileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_TileContainer
#include <openfl/display/TileContainer.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3aeffccbe166a6d0_37_new,"openfl.display.TileContainer","new",0x2eee5efb,"openfl.display.TileContainer.new","openfl/display/TileContainer.hx",37,0x026ee5d7)
HX_LOCAL_STACK_FRAME(_hx_pos_3aeffccbe166a6d0_159_getBounds,"openfl.display.TileContainer","getBounds",0x15ec0486,"openfl.display.TileContainer.getBounds","openfl/display/TileContainer.hx",159,0x026ee5d7)
HX_LOCAL_STACK_FRAME(_hx_pos_3aeffccbe166a6d0_380_get_height,"openfl.display.TileContainer","get_height",0xc851c275,"openfl.display.TileContainer.get_height","openfl/display/TileContainer.hx",380,0x026ee5d7)
HX_LOCAL_STACK_FRAME(_hx_pos_3aeffccbe166a6d0_407_set_height,"openfl.display.TileContainer","set_height",0xcbcf60e9,"openfl.display.TileContainer.set_height","openfl/display/TileContainer.hx",407,0x026ee5d7)
HX_LOCAL_STACK_FRAME(_hx_pos_3aeffccbe166a6d0_436_get_width,"openfl.display.TileContainer","get_width",0x41840738,"openfl.display.TileContainer.get_width","openfl/display/TileContainer.hx",436,0x026ee5d7)
HX_LOCAL_STACK_FRAME(_hx_pos_3aeffccbe166a6d0_463_set_width,"openfl.display.TileContainer","set_width",0x24d4f344,"openfl.display.TileContainer.set_width","openfl/display/TileContainer.hx",463,0x026ee5d7)
namespace openfl{
namespace display{

void TileContainer_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_scaleX,::hx::Null< Float >  __o_scaleY,::hx::Null< Float >  __o_rotation,::hx::Null< Float >  __o_originX,::hx::Null< Float >  __o_originY){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		Float scaleX = __o_scaleX.Default(1);
            		Float scaleY = __o_scaleY.Default(1);
            		Float rotation = __o_rotation.Default(0);
            		Float originX = __o_originX.Default(0);
            		Float originY = __o_originY.Default(0);
            	HX_STACKFRAME(&_hx_pos_3aeffccbe166a6d0_37_new)
HXLINE(  38)		super::__construct(-1,x,y,scaleX,scaleY,rotation,originX,originY);
HXLINE(  40)		this->_hx___tiles = ::Array_obj< ::Dynamic>::__new();
HXLINE(  41)		this->__length = 0;
            	}

Dynamic TileContainer_obj::__CreateEmpty() { return new TileContainer_obj; }

void *TileContainer_obj::_hx_vtable = 0;

Dynamic TileContainer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TileContainer_obj > _hx_result = new TileContainer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool TileContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c045ac0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2c045ac0;
	} else {
		return inClassId==(int)0x55e4d38d;
	}
}

static ::openfl::display::ITileContainer_obj _hx_openfl_display_TileContainer__hx_openfl_display_ITileContainer= {
};

void *TileContainer_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xcad54adc: return &_hx_openfl_display_TileContainer__hx_openfl_display_ITileContainer;
	}
	return super::_hx_getInterface(inHash);
}

 ::openfl::geom::Rectangle TileContainer_obj::getBounds( ::openfl::display::Tile targetCoordinateSpace){
            	HX_GC_STACKFRAME(&_hx_pos_3aeffccbe166a6d0_159_getBounds)
HXLINE( 160)		 ::openfl::geom::Rectangle result =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 161)		 ::openfl::geom::Rectangle rect = null();
HXLINE( 163)		{
HXLINE( 163)			int _g = 0;
HXDLIN( 163)			::Array< ::Dynamic> _g1 = this->_hx___tiles;
HXDLIN( 163)			while((_g < _g1->length)){
HXLINE( 163)				 ::openfl::display::Tile tile = _g1->__get(_g).StaticCast<  ::openfl::display::Tile >();
HXDLIN( 163)				_g = (_g + 1);
HXLINE( 166)				rect = tile->getBounds(targetCoordinateSpace);
HXLINE( 171)				result->_hx___expand(rect->x,rect->y,rect->width,rect->height);
            			}
            		}
HXLINE( 175)		return result;
            	}


Float TileContainer_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_3aeffccbe166a6d0_380_get_height)
HXLINE( 381)		 ::openfl::geom::Rectangle result = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 382)		 ::openfl::geom::Rectangle rect = null();
HXLINE( 384)		{
HXLINE( 384)			int _g = 0;
HXDLIN( 384)			::Array< ::Dynamic> _g1 = this->_hx___tiles;
HXDLIN( 384)			while((_g < _g1->length)){
HXLINE( 384)				 ::openfl::display::Tile tile = _g1->__get(_g).StaticCast<  ::openfl::display::Tile >();
HXDLIN( 384)				_g = (_g + 1);
HXLINE( 387)				rect = tile->getBounds(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 392)				result->_hx___expand(rect->x,rect->y,rect->width,rect->height);
            			}
            		}
HXLINE( 396)		this->_hx___getBounds(result,this->get_matrix());
HXLINE( 398)		Float h = result->height;
HXLINE( 400)		::openfl::geom::Rectangle_obj::_hx___pool->release(result);
HXLINE( 403)		return h;
            	}


Float TileContainer_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_3aeffccbe166a6d0_407_set_height)
HXLINE( 408)		 ::openfl::geom::Rectangle result = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 409)		 ::openfl::geom::Rectangle rect = null();
HXLINE( 411)		{
HXLINE( 411)			int _g = 0;
HXDLIN( 411)			::Array< ::Dynamic> _g1 = this->_hx___tiles;
HXDLIN( 411)			while((_g < _g1->length)){
HXLINE( 411)				 ::openfl::display::Tile tile = _g1->__get(_g).StaticCast<  ::openfl::display::Tile >();
HXDLIN( 411)				_g = (_g + 1);
HXLINE( 414)				rect = tile->getBounds(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 419)				result->_hx___expand(rect->x,rect->y,rect->width,rect->height);
            			}
            		}
HXLINE( 423)		if ((result->height != 0)) {
HXLINE( 425)			this->set_scaleY((value / result->height));
            		}
HXLINE( 429)		::openfl::geom::Rectangle_obj::_hx___pool->release(result);
HXLINE( 432)		return value;
            	}


Float TileContainer_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_3aeffccbe166a6d0_436_get_width)
HXLINE( 437)		 ::openfl::geom::Rectangle result = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 438)		 ::openfl::geom::Rectangle rect = null();
HXLINE( 440)		{
HXLINE( 440)			int _g = 0;
HXDLIN( 440)			::Array< ::Dynamic> _g1 = this->_hx___tiles;
HXDLIN( 440)			while((_g < _g1->length)){
HXLINE( 440)				 ::openfl::display::Tile tile = _g1->__get(_g).StaticCast<  ::openfl::display::Tile >();
HXDLIN( 440)				_g = (_g + 1);
HXLINE( 443)				rect = tile->getBounds(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 448)				result->_hx___expand(rect->x,rect->y,rect->width,rect->height);
            			}
            		}
HXLINE( 452)		this->_hx___getBounds(result,this->get_matrix());
HXLINE( 454)		Float w = result->width;
HXLINE( 456)		::openfl::geom::Rectangle_obj::_hx___pool->release(result);
HXLINE( 459)		return w;
            	}


Float TileContainer_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_3aeffccbe166a6d0_463_set_width)
HXLINE( 464)		 ::openfl::geom::Rectangle result = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 465)		 ::openfl::geom::Rectangle rect = null();
HXLINE( 467)		{
HXLINE( 467)			int _g = 0;
HXDLIN( 467)			::Array< ::Dynamic> _g1 = this->_hx___tiles;
HXDLIN( 467)			while((_g < _g1->length)){
HXLINE( 467)				 ::openfl::display::Tile tile = _g1->__get(_g).StaticCast<  ::openfl::display::Tile >();
HXDLIN( 467)				_g = (_g + 1);
HXLINE( 470)				rect = tile->getBounds(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 475)				result->_hx___expand(rect->x,rect->y,rect->width,rect->height);
            			}
            		}
HXLINE( 479)		if ((result->width != 0)) {
HXLINE( 481)			this->set_scaleX((value / result->width));
            		}
HXLINE( 485)		::openfl::geom::Rectangle_obj::_hx___pool->release(result);
HXLINE( 488)		return value;
            	}



::hx::ObjectPtr< TileContainer_obj > TileContainer_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_scaleX,::hx::Null< Float >  __o_scaleY,::hx::Null< Float >  __o_rotation,::hx::Null< Float >  __o_originX,::hx::Null< Float >  __o_originY) {
	::hx::ObjectPtr< TileContainer_obj > __this = new TileContainer_obj();
	__this->__construct(__o_x,__o_y,__o_scaleX,__o_scaleY,__o_rotation,__o_originX,__o_originY);
	return __this;
}

::hx::ObjectPtr< TileContainer_obj > TileContainer_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_scaleX,::hx::Null< Float >  __o_scaleY,::hx::Null< Float >  __o_rotation,::hx::Null< Float >  __o_originX,::hx::Null< Float >  __o_originY) {
	TileContainer_obj *__this = (TileContainer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TileContainer_obj), true, "openfl.display.TileContainer"));
	*(void **)__this = TileContainer_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_scaleX,__o_scaleY,__o_rotation,__o_originX,__o_originY);
	return __this;
}

TileContainer_obj::TileContainer_obj()
{
}

void TileContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TileContainer);
	HX_MARK_MEMBER_NAME(_hx___tiles,"__tiles");
	 ::openfl::display::Tile_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TileContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___tiles,"__tiles");
	 ::openfl::display::Tile_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TileContainer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__tiles") ) { return ::hx::Val( _hx___tiles ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getBounds") ) { return ::hx::Val( getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return ::hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return ::hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_height") ) { return ::hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return ::hx::Val( set_height_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TileContainer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__tiles") ) { _hx___tiles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TileContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("__tiles",65,56,93,7a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TileContainer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(TileContainer_obj,_hx___tiles),HX_("__tiles",65,56,93,7a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TileContainer_obj_sStaticStorageInfo = 0;
#endif

static ::String TileContainer_obj_sMemberFields[] = {
	HX_("__tiles",65,56,93,7a),
	HX_("getBounds",ab,0f,74,e2),
	HX_("get_height",b0,77,d3,f2),
	HX_("set_height",24,16,51,f6),
	HX_("get_width",5d,12,0c,0e),
	HX_("set_width",69,fe,5c,f1),
	::String(null()) };

::hx::Class TileContainer_obj::__mClass;

void TileContainer_obj::__register()
{
	TileContainer_obj _hx_dummy;
	TileContainer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.display.TileContainer",89,c5,06,43);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TileContainer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TileContainer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TileContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TileContainer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
