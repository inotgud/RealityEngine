// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif
#ifndef INCLUDED_openfl_net_NetConnection
#include <openfl/net/NetConnection.h>
#endif
#ifndef INCLUDED_openfl_net_NetStream
#include <openfl/net/NetStream.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2d6908cd6c18c638_1208_new,"openfl.net.NetStream","new",0xb09a57e0,"openfl.net.NetStream.new","openfl/net/NetStream.hx",1208,0x9cb99312)
namespace openfl{
namespace net{

void NetStream_obj::__construct( ::openfl::net::NetConnection connection,::String peerID){
            	HX_GC_STACKFRAME(&_hx_pos_2d6908cd6c18c638_1208_new)
HXLINE(1209)		super::__construct(null());
HXLINE(1211)		this->_hx___connection = connection;
HXLINE(1212)		this->_hx___soundTransform =  ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,null(),null());
            	}

Dynamic NetStream_obj::__CreateEmpty() { return new NetStream_obj; }

void *NetStream_obj::_hx_vtable = 0;

Dynamic NetStream_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NetStream_obj > _hx_result = new NetStream_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool NetStream_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
	} else {
		return inClassId==(int)0x1d851db0;
	}
}


::hx::ObjectPtr< NetStream_obj > NetStream_obj::__new( ::openfl::net::NetConnection connection,::String peerID) {
	::hx::ObjectPtr< NetStream_obj > __this = new NetStream_obj();
	__this->__construct(connection,peerID);
	return __this;
}

::hx::ObjectPtr< NetStream_obj > NetStream_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::net::NetConnection connection,::String peerID) {
	NetStream_obj *__this = (NetStream_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NetStream_obj), true, "openfl.net.NetStream"));
	*(void **)__this = NetStream_obj::_hx_vtable;
	__this->__construct(connection,peerID);
	return __this;
}

NetStream_obj::NetStream_obj()
{
}

void NetStream_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NetStream);
	HX_MARK_MEMBER_NAME(_hx___connection,"__connection");
	HX_MARK_MEMBER_NAME(_hx___soundTransform,"__soundTransform");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NetStream_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___connection,"__connection");
	HX_VISIT_MEMBER_NAME(_hx___soundTransform,"__soundTransform");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val NetStream_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__connection") ) { return ::hx::Val( _hx___connection ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__soundTransform") ) { return ::hx::Val( _hx___soundTransform ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val NetStream_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__connection") ) { _hx___connection=inValue.Cast<  ::openfl::net::NetConnection >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__soundTransform") ) { _hx___soundTransform=inValue.Cast<  ::openfl::media::SoundTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NetStream_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("__connection",3e,1b,a6,2d));
	outFields->push(HX_("__soundTransform",bd,79,1e,57));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NetStream_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::net::NetConnection */ ,(int)offsetof(NetStream_obj,_hx___connection),HX_("__connection",3e,1b,a6,2d)},
	{::hx::fsObject /*  ::openfl::media::SoundTransform */ ,(int)offsetof(NetStream_obj,_hx___soundTransform),HX_("__soundTransform",bd,79,1e,57)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *NetStream_obj_sStaticStorageInfo = 0;
#endif

static ::String NetStream_obj_sMemberFields[] = {
	HX_("__connection",3e,1b,a6,2d),
	HX_("__soundTransform",bd,79,1e,57),
	::String(null()) };

::hx::Class NetStream_obj::__mClass;

void NetStream_obj::__register()
{
	NetStream_obj _hx_dummy;
	NetStream_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.net.NetStream",ee,27,61,23);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NetStream_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NetStream_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NetStream_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NetStream_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace net
