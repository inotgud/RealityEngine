// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_net_NetConnection
#include <openfl/net/NetConnection.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cbeb021ed190252c_325_new,"openfl.net.NetConnection","new",0x5c5dd97e,"openfl.net.NetConnection.new","openfl/net/NetConnection.hx",325,0x3b599834)
namespace openfl{
namespace net{

void NetConnection_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_cbeb021ed190252c_325_new)
HXDLIN( 325)		super::__construct(null());
            	}

Dynamic NetConnection_obj::__CreateEmpty() { return new NetConnection_obj; }

void *NetConnection_obj::_hx_vtable = 0;

Dynamic NetConnection_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NetConnection_obj > _hx_result = new NetConnection_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool NetConnection_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
	} else {
		return inClassId==(int)0x4bdf014e;
	}
}


::hx::ObjectPtr< NetConnection_obj > NetConnection_obj::__new() {
	::hx::ObjectPtr< NetConnection_obj > __this = new NetConnection_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< NetConnection_obj > NetConnection_obj::__alloc(::hx::Ctx *_hx_ctx) {
	NetConnection_obj *__this = (NetConnection_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NetConnection_obj), true, "openfl.net.NetConnection"));
	*(void **)__this = NetConnection_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

NetConnection_obj::NetConnection_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *NetConnection_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *NetConnection_obj_sStaticStorageInfo = 0;
#endif

::hx::Class NetConnection_obj::__mClass;

void NetConnection_obj::__register()
{
	NetConnection_obj _hx_dummy;
	NetConnection_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.net.NetConnection",8c,02,60,24);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< NetConnection_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NetConnection_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NetConnection_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace net
