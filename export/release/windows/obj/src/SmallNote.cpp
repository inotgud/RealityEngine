// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_SmallNote
#include <SmallNote.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_558a21bda009c56d_11_new,"SmallNote","new",0xaa3b35ab,"SmallNote.new","DiffCalc.hx",11,0x0b7f13a4)

void SmallNote_obj::__construct(Float strum,int data){
            	HX_STACKFRAME(&_hx_pos_558a21bda009c56d_11_new)
HXLINE(  12)		this->strumTime = strum;
HXLINE(  13)		this->noteData = data;
            	}

Dynamic SmallNote_obj::__CreateEmpty() { return new SmallNote_obj; }

void *SmallNote_obj::_hx_vtable = 0;

Dynamic SmallNote_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SmallNote_obj > _hx_result = new SmallNote_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool SmallNote_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x32e79db1;
}


SmallNote_obj::SmallNote_obj()
{
}

::hx::Val SmallNote_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"noteData") ) { return ::hx::Val( noteData ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumTime") ) { return ::hx::Val( strumTime ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SmallNote_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"noteData") ) { noteData=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumTime") ) { strumTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SmallNote_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("strumTime",f6,2d,21,f4));
	outFields->push(HX_("noteData",3c,7b,96,51));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SmallNote_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(SmallNote_obj,strumTime),HX_("strumTime",f6,2d,21,f4)},
	{::hx::fsInt,(int)offsetof(SmallNote_obj,noteData),HX_("noteData",3c,7b,96,51)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SmallNote_obj_sStaticStorageInfo = 0;
#endif

static ::String SmallNote_obj_sMemberFields[] = {
	HX_("strumTime",f6,2d,21,f4),
	HX_("noteData",3c,7b,96,51),
	::String(null()) };

::hx::Class SmallNote_obj::__mClass;

void SmallNote_obj::__register()
{
	SmallNote_obj _hx_dummy;
	SmallNote_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("SmallNote",39,84,16,12);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SmallNote_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SmallNote_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SmallNote_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SmallNote_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

