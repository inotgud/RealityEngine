// Generated by Haxe 4.1.5
#ifndef INCLUDED_Controls
#define INCLUDED_Controls

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
HX_DECLARE_CLASS0(Controls)
HX_DECLARE_CLASS0(KeyboardScheme)
HX_DECLARE_CLASS3(flixel,input,actions,FlxAction)
HX_DECLARE_CLASS3(flixel,input,actions,FlxActionDigital)
HX_DECLARE_CLASS3(flixel,input,actions,FlxActionSet)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)



class HXCPP_CLASS_ATTRIBUTES Controls_obj : public  ::flixel::input::actions::FlxActionSet_obj
{
	public:
		typedef  ::flixel::input::actions::FlxActionSet_obj super;
		typedef Controls_obj OBJ_;
		Controls_obj();

	public:
		enum { _hx_ClassId = 0x6cff3556 };

		void __construct(::String name, ::KeyboardScheme __o_scheme);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Controls")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"Controls"); }
		static ::hx::ObjectPtr< Controls_obj > __new(::String name, ::KeyboardScheme __o_scheme);
		static ::hx::ObjectPtr< Controls_obj > __alloc(::hx::Ctx *_hx_ctx,::String name, ::KeyboardScheme __o_scheme);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Controls_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Controls",96,42,6e,11); }

		 ::flixel::input::actions::FlxActionDigital _up;
		 ::flixel::input::actions::FlxActionDigital _left;
		 ::flixel::input::actions::FlxActionDigital _right;
		 ::flixel::input::actions::FlxActionDigital _down;
		 ::flixel::input::actions::FlxActionDigital _upP;
		 ::flixel::input::actions::FlxActionDigital _leftP;
		 ::flixel::input::actions::FlxActionDigital _rightP;
		 ::flixel::input::actions::FlxActionDigital _downP;
		 ::flixel::input::actions::FlxActionDigital _upR;
		 ::flixel::input::actions::FlxActionDigital _leftR;
		 ::flixel::input::actions::FlxActionDigital _rightR;
		 ::flixel::input::actions::FlxActionDigital _downR;
		 ::flixel::input::actions::FlxActionDigital _accept;
		 ::flixel::input::actions::FlxActionDigital _back;
		 ::flixel::input::actions::FlxActionDigital _pause;
		 ::flixel::input::actions::FlxActionDigital _reset;
		 ::flixel::input::actions::FlxActionDigital _cheat;
		 ::haxe::ds::StringMap byName;
		::Array< int > gamepadsAdded;
		void setKeyboardScheme( ::KeyboardScheme scheme,::hx::Null< bool >  reset);
		::Dynamic setKeyboardScheme_dyn();

		void loadKeyBinds();
		::Dynamic loadKeyBinds_dyn();

		void removeKeyboard();
		::Dynamic removeKeyboard_dyn();

		void addGamepad(int id, ::haxe::ds::EnumValueMap buttonMap);
		::Dynamic addGamepad_dyn();

		void removeGamepad(::hx::Null< int >  deviceID);
		::Dynamic removeGamepad_dyn();

		void addDefaultGamepad(int id);
		::Dynamic addDefaultGamepad_dyn();

};


#endif /* INCLUDED_Controls */ 
