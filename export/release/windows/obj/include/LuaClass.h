// Generated by Haxe 4.1.5
#ifndef INCLUDED_LuaClass
#define INCLUDED_LuaClass

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
HX_DECLARE_CLASS0(LuaClass)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)



class HXCPP_CLASS_ATTRIBUTES LuaClass_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef LuaClass_obj OBJ_;
		LuaClass_obj();

	public:
		enum { _hx_ClassId = 0x52dfe7a4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="LuaClass")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"LuaClass"); }
		static ::hx::ObjectPtr< LuaClass_obj > __new();
		static ::hx::ObjectPtr< LuaClass_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~LuaClass_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("LuaClass",80,0f,6d,a0); }

		static  cpp::Reference<lua_State> state;
		static int index( lua_State* l);

		static int newindex( lua_State* l);

		static void DefaultSetter( cpp::Reference<lua_State> l);
		static ::Dynamic DefaultSetter_dyn();

		 ::haxe::ds::StringMap properties;
		 ::haxe::ds::StringMap methods;
		::String className;
		bool addToGlobal;
		virtual void Register( cpp::Reference<lua_State> l);
		::Dynamic Register_dyn();

};


#endif /* INCLUDED_LuaClass */ 
