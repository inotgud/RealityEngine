// Generated by Haxe 4.1.5
#ifndef INCLUDED_DiffCalc
#define INCLUDED_DiffCalc

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(DiffCalc)
HX_DECLARE_CLASS0(SmallNote)



class HXCPP_CLASS_ATTRIBUTES DiffCalc_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef DiffCalc_obj OBJ_;
		DiffCalc_obj();

	public:
		enum { _hx_ClassId = 0x4b1e361a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="DiffCalc")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"DiffCalc"); }

		inline static ::hx::ObjectPtr< DiffCalc_obj > __new() {
			::hx::ObjectPtr< DiffCalc_obj > __this = new DiffCalc_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< DiffCalc_obj > __alloc(::hx::Ctx *_hx_ctx) {
			DiffCalc_obj *__this = (DiffCalc_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DiffCalc_obj), false, "DiffCalc"));
			*(void **)__this = DiffCalc_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~DiffCalc_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("DiffCalc",5a,43,8d,ef); }

		static void __boot();
		static Float scale;
		static ::Array< Float > lastDiffHandOne;
		static ::Array< Float > lastDiffHandTwo;
		static Float CalculateDiff( ::Dynamic song, ::Dynamic accuracy);
		static ::Dynamic CalculateDiff_dyn();

		static Float chisel(Float scoreGoal,::Array< Float > diffOne,::Array< Float > diffTwo,::Array< Float > pointsOne,::Array< Float > pointsTwo,Float maxPoints);
		static ::Dynamic chisel_dyn();

		static Float calcuate(Float midPoint,::Array< Float > diff,::Array< Float > points);
		static ::Dynamic calcuate_dyn();

		static int findStupid(Float strumTime,::Array< Float > array);
		static ::Dynamic findStupid_dyn();

		static Float fingieCalc(::Array< ::Dynamic> floats,::Array< Float > columArray);
		static ::Dynamic fingieCalc_dyn();

		static void smoothBrain(::Array< Float > npsVector,Float weirdchamp);
		static ::Dynamic smoothBrain_dyn();

		static void smoothBrainTwo(::Array< Float > diffVector);
		static ::Dynamic smoothBrainTwo_dyn();

};


#endif /* INCLUDED_DiffCalc */ 
