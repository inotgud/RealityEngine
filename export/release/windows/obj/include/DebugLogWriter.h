// Generated by Haxe 4.1.5
#ifndef INCLUDED_DebugLogWriter
#define INCLUDED_DebugLogWriter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(DebugLogWriter)
HX_DECLARE_CLASS2(haxe,io,Output)
HX_DECLARE_CLASS2(sys,io,FileOutput)



class HXCPP_CLASS_ATTRIBUTES DebugLogWriter_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef DebugLogWriter_obj OBJ_;
		DebugLogWriter_obj();

	public:
		enum { _hx_ClassId = 0x65f41c64 };

		void __construct(::String logLevelParam);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="DebugLogWriter")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"DebugLogWriter"); }
		static ::hx::ObjectPtr< DebugLogWriter_obj > __new(::String logLevelParam);
		static ::hx::ObjectPtr< DebugLogWriter_obj > __alloc(::hx::Ctx *_hx_ctx,::String logLevelParam);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~DebugLogWriter_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("DebugLogWriter",a4,99,08,84); }

		static void __boot();
		static ::String LOG_FOLDER;
		static ::Array< ::String > LOG_LEVELS;
		Float startTime;
		int logLevel;
		bool active;
		 ::sys::io::FileOutput file;
		bool isActive();
		::Dynamic isActive_dyn();

		bool shouldLog(::String input);
		::Dynamic shouldLog_dyn();

		void setLogLevel(::String input);
		::Dynamic setLogLevel_dyn();

		void write(::cpp::VirtualArray input,::String logLevel);
		::Dynamic write_dyn();

		void printDebug(::String msg);
		::Dynamic printDebug_dyn();

};


#endif /* INCLUDED_DebugLogWriter */ 
