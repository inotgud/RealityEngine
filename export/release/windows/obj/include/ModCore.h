// Generated by Haxe 4.1.5
#ifndef INCLUDED_ModCore
#define INCLUDED_ModCore

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(ModCore)
HX_DECLARE_CLASS1(polymod,PolymodError)
HX_DECLARE_CLASS2(polymod,format,ParseRules)



class HXCPP_CLASS_ATTRIBUTES ModCore_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ModCore_obj OBJ_;
		ModCore_obj();

	public:
		enum { _hx_ClassId = 0x64615661 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="ModCore")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"ModCore"); }

		inline static ::hx::ObjectPtr< ModCore_obj > __new() {
			::hx::ObjectPtr< ModCore_obj > __this = new ModCore_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< ModCore_obj > __alloc(::hx::Ctx *_hx_ctx) {
			ModCore_obj *__this = (ModCore_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ModCore_obj), false, "ModCore"));
			*(void **)__this = ModCore_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ModCore_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ModCore",21,b1,41,a4); }

		static void __boot();
		static ::String API_VERSION;
		static ::String MOD_DIRECTORY;
		static void initialize();
		static ::Dynamic initialize_dyn();

		static void loadModsById(::Array< ::String > ids);
		static ::Dynamic loadModsById_dyn();

		static ::Array< ::String > getModIds();
		static ::Dynamic getModIds_dyn();

		static  ::polymod::format::ParseRules buildParseRules();
		static ::Dynamic buildParseRules_dyn();

		static void onPolymodError( ::polymod::PolymodError error);
		static ::Dynamic onPolymodError_dyn();

};


#endif /* INCLUDED_ModCore */ 
