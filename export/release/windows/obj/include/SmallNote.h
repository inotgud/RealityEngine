// Generated by Haxe 4.1.5
#ifndef INCLUDED_SmallNote
#define INCLUDED_SmallNote

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_558a21bda009c56d_11_new)
HX_DECLARE_CLASS0(SmallNote)



class HXCPP_CLASS_ATTRIBUTES SmallNote_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef SmallNote_obj OBJ_;
		SmallNote_obj();

	public:
		enum { _hx_ClassId = 0x32e79db1 };

		void __construct(Float strum,int data);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="SmallNote")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"SmallNote"); }

		inline static ::hx::ObjectPtr< SmallNote_obj > __new(Float strum,int data) {
			::hx::ObjectPtr< SmallNote_obj > __this = new SmallNote_obj();
			__this->__construct(strum,data);
			return __this;
		}

		inline static ::hx::ObjectPtr< SmallNote_obj > __alloc(::hx::Ctx *_hx_ctx,Float strum,int data) {
			SmallNote_obj *__this = (SmallNote_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SmallNote_obj), false, "SmallNote"));
			*(void **)__this = SmallNote_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_558a21bda009c56d_11_new)
HXLINE(  12)		( ( ::SmallNote)(__this) )->strumTime = strum;
HXLINE(  13)		( ( ::SmallNote)(__this) )->noteData = data;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SmallNote_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SmallNote",39,84,16,12); }

		Float strumTime;
		int noteData;
};


#endif /* INCLUDED_SmallNote */ 
