// Generated by Haxe 4.1.5
#ifndef INCLUDED_haxe_ds_GenericStack_hscript_Token
#define INCLUDED_haxe_ds_GenericStack_hscript_Token

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_7be483caf7e3e5a8_107_new)
HX_DECLARE_CLASS2(haxe,ds,GenericCell_hscript_Token)
HX_DECLARE_CLASS2(haxe,ds,GenericStack_hscript_Token)

namespace haxe{
namespace ds{


class HXCPP_CLASS_ATTRIBUTES GenericStack_hscript_Token_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef GenericStack_hscript_Token_obj OBJ_;
		GenericStack_hscript_Token_obj();

	public:
		enum { _hx_ClassId = 0x76b7fd14 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxe.ds.GenericStack_hscript_Token")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"haxe.ds.GenericStack_hscript_Token"); }

		inline static ::hx::ObjectPtr< GenericStack_hscript_Token_obj > __new() {
			::hx::ObjectPtr< GenericStack_hscript_Token_obj > __this = new GenericStack_hscript_Token_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< GenericStack_hscript_Token_obj > __alloc(::hx::Ctx *_hx_ctx) {
			GenericStack_hscript_Token_obj *__this = (GenericStack_hscript_Token_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GenericStack_hscript_Token_obj), true, "haxe.ds.GenericStack_hscript_Token"));
			*(void **)__this = GenericStack_hscript_Token_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_7be483caf7e3e5a8_107_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GenericStack_hscript_Token_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GenericStack_hscript_Token",9f,f8,c5,67); }

		 ::haxe::ds::GenericCell_hscript_Token head;
};

} // end namespace haxe
} // end namespace ds

#endif /* INCLUDED_haxe_ds_GenericStack_hscript_Token */ 
