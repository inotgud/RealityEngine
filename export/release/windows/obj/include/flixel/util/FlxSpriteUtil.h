// Generated by Haxe 4.1.5
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#define INCLUDED_flixel_util_FlxSpriteUtil

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,FlxSpriteUtil)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,Graphics)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace flixel{
namespace util{


class HXCPP_CLASS_ATTRIBUTES FlxSpriteUtil_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxSpriteUtil_obj OBJ_;
		FlxSpriteUtil_obj();

	public:
		enum { _hx_ClassId = 0x0a1ec5f3 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.util.FlxSpriteUtil")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"flixel.util.FlxSpriteUtil"); }

		inline static ::hx::ObjectPtr< FlxSpriteUtil_obj > __new() {
			::hx::ObjectPtr< FlxSpriteUtil_obj > __this = new FlxSpriteUtil_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< FlxSpriteUtil_obj > __alloc(::hx::Ctx *_hx_ctx) {
			FlxSpriteUtil_obj *__this = (FlxSpriteUtil_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxSpriteUtil_obj), false, "flixel.util.FlxSpriteUtil"));
			*(void **)__this = FlxSpriteUtil_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxSpriteUtil_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxSpriteUtil",99,21,94,21); }

		static void __boot();
		static  ::openfl::display::Sprite flashGfxSprite;
		static  ::openfl::display::Graphics flashGfx;
		static  ::flixel::FlxSprite drawRect( ::flixel::FlxSprite sprite,Float X,Float Y,Float Width,Float Height,::hx::Null< int >  FillColor, ::Dynamic lineStyle, ::Dynamic drawStyle);
		static ::Dynamic drawRect_dyn();

		static  ::flixel::FlxSprite updateSpriteGraphic( ::flixel::FlxSprite sprite, ::Dynamic drawStyle);
		static ::Dynamic updateSpriteGraphic_dyn();

};

} // end namespace flixel
} // end namespace util

#endif /* INCLUDED_flixel_util_FlxSpriteUtil */ 
