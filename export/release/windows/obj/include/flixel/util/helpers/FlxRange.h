// Generated by Haxe 4.1.5
#ifndef INCLUDED_flixel_util_helpers_FlxRange
#define INCLUDED_flixel_util_helpers_FlxRange

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_05e7652c5709bfbb_32_new)
HX_DECLARE_CLASS3(flixel,util,helpers,FlxRange)

namespace flixel{
namespace util{
namespace helpers{


class HXCPP_CLASS_ATTRIBUTES FlxRange_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxRange_obj OBJ_;
		FlxRange_obj();

	public:
		enum { _hx_ClassId = 0x1bedaec6 };

		void __construct( ::Dynamic start, ::Dynamic end);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.util.helpers.FlxRange")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.util.helpers.FlxRange"); }

		inline static ::hx::ObjectPtr< FlxRange_obj > __new( ::Dynamic start, ::Dynamic end) {
			::hx::ObjectPtr< FlxRange_obj > __this = new FlxRange_obj();
			__this->__construct(start,end);
			return __this;
		}

		inline static ::hx::ObjectPtr< FlxRange_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic start, ::Dynamic end) {
			FlxRange_obj *__this = (FlxRange_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxRange_obj), true, "flixel.util.helpers.FlxRange"));
			*(void **)__this = FlxRange_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_05e7652c5709bfbb_32_new)
HXLINE(  33)		( ( ::flixel::util::helpers::FlxRange)(__this) )->start = start;
HXLINE(  34)		 ::Dynamic _hx_tmp;
HXDLIN(  34)		if (::hx::IsNull( end )) {
HXLINE(  34)			_hx_tmp = start;
            		}
            		else {
HXLINE(  34)			_hx_tmp = end;
            		}
HXDLIN(  34)		( ( ::flixel::util::helpers::FlxRange)(__this) )->end = _hx_tmp;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxRange_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxRange",0b,b0,f9,a0); }

		 ::Dynamic start;
		 ::Dynamic end;
};

} // end namespace flixel
} // end namespace util
} // end namespace helpers

#endif /* INCLUDED_flixel_util_helpers_FlxRange */ 
