// Generated by Haxe 4.1.5
#ifndef INCLUDED_flixel_util_FlxPath
#define INCLUDED_flixel_util_FlxPath

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,util,FlxPath)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)

namespace flixel{
namespace util{


class HXCPP_CLASS_ATTRIBUTES FlxPath_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxPath_obj OBJ_;
		FlxPath_obj();

	public:
		enum { _hx_ClassId = 0x03238bb9 };

		void __construct(::Array< ::Dynamic> Nodes);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.util.FlxPath")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.util.FlxPath"); }
		static ::hx::ObjectPtr< FlxPath_obj > __new(::Array< ::Dynamic> Nodes);
		static ::hx::ObjectPtr< FlxPath_obj > __alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> Nodes);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxPath_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("FlxPath",17,1f,aa,da); }

		static void __boot();
		static  ::flixel::math::FlxPoint _point;
		::Array< ::Dynamic> _nodes;
		Float speed;
		Float angle;
		bool autoCenter;
		bool active;
		 ::Dynamic onComplete;
		Dynamic onComplete_dyn() { return onComplete;}
		int nodeIndex;
		bool finished;
		int _mode;
		int _inc;
		bool _autoRotate;
		 ::Dynamic _wasObjectImmovable;
		bool _firstUpdate;
		 ::flixel::FlxObject object;
		void update(Float elapsed);
		::Dynamic update_dyn();

		void calculateVelocity( ::flixel::math::FlxPoint node,bool horizontalOnly,bool verticalOnly);
		::Dynamic calculateVelocity_dyn();

		 ::flixel::math::FlxPoint advancePath(::hx::Null< bool >  Snap);
		::Dynamic advancePath_dyn();

		 ::flixel::util::FlxPath cancel();
		::Dynamic cancel_dyn();

		void onEnd();
		::Dynamic onEnd_dyn();

		void destroy();
		::Dynamic destroy_dyn();

};

} // end namespace flixel
} // end namespace util

#endif /* INCLUDED_flixel_util_FlxPath */ 
