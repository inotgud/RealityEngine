// Generated by Haxe 4.1.5
#ifndef INCLUDED_flixel_tweens_FlxEase
#define INCLUDED_flixel_tweens_FlxEase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(flixel,tweens,FlxEase)

namespace flixel{
namespace tweens{


class HXCPP_CLASS_ATTRIBUTES FlxEase_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxEase_obj OBJ_;
		FlxEase_obj();

	public:
		enum { _hx_ClassId = 0x1e146db8 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.tweens.FlxEase")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"flixel.tweens.FlxEase"); }

		inline static ::hx::ObjectPtr< FlxEase_obj > __new() {
			::hx::ObjectPtr< FlxEase_obj > __this = new FlxEase_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< FlxEase_obj > __alloc(::hx::Ctx *_hx_ctx) {
			FlxEase_obj *__this = (FlxEase_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxEase_obj), false, "flixel.tweens.FlxEase"));
			*(void **)__this = FlxEase_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxEase_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxEase",60,c5,64,d3); }

		static void __boot();
		static Float ELASTIC_PERIOD;
		static Float linear(Float t);
		static ::Dynamic linear_dyn();

		static Float quadOut(Float t);
		static ::Dynamic quadOut_dyn();

		static Float quadInOut(Float t);
		static ::Dynamic quadInOut_dyn();

		static Float cubeInOut(Float t);
		static ::Dynamic cubeInOut_dyn();

		static Float quartInOut(Float t);
		static ::Dynamic quartInOut_dyn();

		static Float circOut(Float t);
		static ::Dynamic circOut_dyn();

		static Float expoInOut(Float t);
		static ::Dynamic expoInOut_dyn();

		static Float backOut(Float t);
		static ::Dynamic backOut_dyn();

		static Float backInOut(Float t);
		static ::Dynamic backInOut_dyn();

		static Float elasticInOut(Float t);
		static ::Dynamic elasticInOut_dyn();

};

} // end namespace flixel
} // end namespace tweens

#endif /* INCLUDED_flixel_tweens_FlxEase */ 
