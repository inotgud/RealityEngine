// Generated by Haxe 4.1.5
#ifndef INCLUDED_flixel_FlxObject
#define INCLUDED_flixel_FlxObject

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,math,FlxRect)
HX_DECLARE_CLASS2(flixel,util,FlxPath)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)

namespace flixel{


class HXCPP_CLASS_ATTRIBUTES FlxObject_obj : public  ::flixel::FlxBasic_obj
{
	public:
		typedef  ::flixel::FlxBasic_obj super;
		typedef FlxObject_obj OBJ_;
		FlxObject_obj();

	public:
		enum { _hx_ClassId = 0x7dab0655 };

		void __construct(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_Width,::hx::Null< Float >  __o_Height);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.FlxObject")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.FlxObject"); }
		static ::hx::ObjectPtr< FlxObject_obj > __new(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_Width,::hx::Null< Float >  __o_Height);
		static ::hx::ObjectPtr< FlxObject_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_Width,::hx::Null< Float >  __o_Height);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxObject_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxObject",b1,78,2e,97); }

		static void __boot();
		static bool defaultPixelPerfectPosition;
		Float x;
		Float y;
		Float width;
		Float height;
		 ::Dynamic pixelPerfectRender;
		bool pixelPerfectPosition;
		Float angle;
		bool moves;
		bool immovable;
		 ::flixel::math::FlxPoint scrollFactor;
		 ::flixel::math::FlxPoint velocity;
		 ::flixel::math::FlxPoint acceleration;
		 ::flixel::math::FlxPoint drag;
		 ::flixel::math::FlxPoint maxVelocity;
		 ::flixel::math::FlxPoint last;
		Float angularVelocity;
		Float angularAcceleration;
		Float angularDrag;
		Float maxAngular;
		int touching;
		int wasTouching;
		int allowCollisions;
		 ::flixel::util::FlxPath path;
		 ::flixel::math::FlxPoint _point;
		 ::flixel::math::FlxRect _rect;
		virtual void initVars();
		::Dynamic initVars_dyn();

		virtual void destroy();

		virtual void update(Float elapsed);

		void updateMotion(Float elapsed);
		::Dynamic updateMotion_dyn();

		virtual void draw();

		virtual bool overlaps( ::flixel::FlxBasic ObjectOrGroup,::hx::Null< bool >  InScreenSpace, ::flixel::FlxCamera Camera);
		::Dynamic overlaps_dyn();

		bool overlapsCallback( ::flixel::FlxBasic ObjectOrGroup,Float X,Float Y,bool InScreenSpace, ::flixel::FlxCamera Camera);
		::Dynamic overlapsCallback_dyn();

		virtual bool overlapsPoint( ::flixel::math::FlxPoint point,::hx::Null< bool >  InScreenSpace, ::flixel::FlxCamera Camera);
		::Dynamic overlapsPoint_dyn();

		virtual  ::flixel::math::FlxPoint getScreenPosition( ::flixel::math::FlxPoint point, ::flixel::FlxCamera Camera);
		::Dynamic getScreenPosition_dyn();

		 ::flixel::math::FlxPoint getPosition( ::flixel::math::FlxPoint point);
		::Dynamic getPosition_dyn();

		 ::flixel::math::FlxPoint getMidpoint( ::flixel::math::FlxPoint point);
		::Dynamic getMidpoint_dyn();

		virtual bool isOnScreen( ::flixel::FlxCamera Camera);
		::Dynamic isOnScreen_dyn();

		bool isPixelPerfectRender( ::flixel::FlxCamera Camera);
		::Dynamic isPixelPerfectRender_dyn();

		virtual void setPosition(::hx::Null< Float >  X,::hx::Null< Float >  Y);
		::Dynamic setPosition_dyn();

		virtual void setSize(Float Width,Float Height);
		::Dynamic setSize_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		virtual Float set_x(Float NewX);
		::Dynamic set_x_dyn();

		virtual Float set_y(Float NewY);
		::Dynamic set_y_dyn();

		virtual Float set_width(Float Width);
		::Dynamic set_width_dyn();

		virtual Float set_height(Float Height);
		::Dynamic set_height_dyn();

		virtual Float get_width();
		::Dynamic get_width_dyn();

		virtual Float get_height();
		::Dynamic get_height_dyn();

		virtual bool set_solid(bool Solid);
		::Dynamic set_solid_dyn();

		virtual Float set_angle(Float Value);
		::Dynamic set_angle_dyn();

		virtual bool set_moves(bool Value);
		::Dynamic set_moves_dyn();

		virtual bool set_immovable(bool Value);
		::Dynamic set_immovable_dyn();

		int set_allowCollisions(int Value);
		::Dynamic set_allowCollisions_dyn();

};

} // end namespace flixel

#endif /* INCLUDED_flixel_FlxObject */ 
