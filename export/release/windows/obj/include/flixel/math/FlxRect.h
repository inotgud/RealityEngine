// Generated by Haxe 4.1.5
#ifndef INCLUDED_flixel_math_FlxRect
#define INCLUDED_flixel_math_FlxRect

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,math,FlxRect)
HX_DECLARE_CLASS2(flixel,util,FlxPool_flixel_math_FlxRect)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPool)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)

namespace flixel{
namespace math{


class HXCPP_CLASS_ATTRIBUTES FlxRect_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxRect_obj OBJ_;
		FlxRect_obj();

	public:
		enum { _hx_ClassId = 0x7da4a0b2 };

		void __construct(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_Width,::hx::Null< Float >  __o_Height);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.math.FlxRect")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"flixel.math.FlxRect"); }
		static ::hx::ObjectPtr< FlxRect_obj > __new(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_Width,::hx::Null< Float >  __o_Height);
		static ::hx::ObjectPtr< FlxRect_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_Width,::hx::Null< Float >  __o_Height);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxRect_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("FlxRect",96,86,ff,db); }

		static void __boot();
		static  ::flixel::util::FlxPool_flixel_math_FlxRect _pool;
		Float x;
		Float y;
		Float width;
		Float height;
		bool _weak;
		bool _inPool;
		void put();
		::Dynamic put_dyn();

		 ::flixel::math::FlxRect getRotatedBounds(Float degrees, ::flixel::math::FlxPoint origin, ::flixel::math::FlxRect newRect);
		::Dynamic getRotatedBounds_dyn();

		virtual void destroy();
		::Dynamic destroy_dyn();

		 ::flixel::math::FlxRect intersection( ::flixel::math::FlxRect rect, ::flixel::math::FlxRect result);
		::Dynamic intersection_dyn();

};

} // end namespace flixel
} // end namespace math

#endif /* INCLUDED_flixel_math_FlxRect */ 
