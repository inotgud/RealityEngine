// Generated by Haxe 4.1.5
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#define INCLUDED_flixel_animation_FlxAnimationController

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,animation,FlxAnimation)
HX_DECLARE_CLASS2(flixel,animation,FlxAnimationController)
HX_DECLARE_CLASS2(flixel,animation,FlxBaseAnimation)
HX_DECLARE_CLASS2(flixel,animation,FlxPrerotatedAnimation)
HX_DECLARE_CLASS3(flixel,graphics,frames,FlxFrame)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)

namespace flixel{
namespace animation{


class HXCPP_CLASS_ATTRIBUTES FlxAnimationController_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxAnimationController_obj OBJ_;
		FlxAnimationController_obj();

	public:
		enum { _hx_ClassId = 0x33fb2b2e };

		void __construct( ::flixel::FlxSprite Sprite);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.animation.FlxAnimationController")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.animation.FlxAnimationController"); }
		static ::hx::ObjectPtr< FlxAnimationController_obj > __new( ::flixel::FlxSprite Sprite);
		static ::hx::ObjectPtr< FlxAnimationController_obj > __alloc(::hx::Ctx *_hx_ctx, ::flixel::FlxSprite Sprite);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxAnimationController_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("FlxAnimationController",8e,2f,81,78); }

		int frameIndex;
		 ::Dynamic callback;
		Dynamic callback_dyn() { return callback;}
		 ::Dynamic finishCallback;
		Dynamic finishCallback_dyn() { return finishCallback;}
		 ::flixel::FlxSprite _sprite;
		 ::flixel::animation::FlxAnimation _curAnim;
		 ::haxe::ds::StringMap _animations;
		 ::flixel::animation::FlxPrerotatedAnimation _prerotated;
		void update(Float elapsed);
		::Dynamic update_dyn();

		 ::flixel::animation::FlxAnimationController copyFrom( ::flixel::animation::FlxAnimationController controller);
		::Dynamic copyFrom_dyn();

		void createPrerotated( ::flixel::animation::FlxAnimationController Controller);
		::Dynamic createPrerotated_dyn();

		void destroyAnimations();
		::Dynamic destroyAnimations_dyn();

		void destroy();
		::Dynamic destroy_dyn();

		void clearPrerotated();
		::Dynamic clearPrerotated_dyn();

		void clearAnimations();
		::Dynamic clearAnimations_dyn();

		void add(::String Name,::Array< int > Frames,::hx::Null< Float >  FrameRate,::hx::Null< bool >  Looped,::hx::Null< bool >  FlipX,::hx::Null< bool >  FlipY);
		::Dynamic add_dyn();

		void addByIndices(::String Name,::String Prefix,::Array< int > Indices,::String Postfix,::hx::Null< int >  FrameRate,::hx::Null< bool >  Looped,::hx::Null< bool >  FlipX,::hx::Null< bool >  FlipY);
		::Dynamic addByIndices_dyn();

		int findSpriteFrame(::String Prefix,int Index,::String Postfix);
		::Dynamic findSpriteFrame_dyn();

		void addByPrefix(::String Name,::String Prefix,::hx::Null< int >  FrameRate,::hx::Null< bool >  Looped,::hx::Null< bool >  FlipX,::hx::Null< bool >  FlipY);
		::Dynamic addByPrefix_dyn();

		void appendByPrefix(::String Name,::String Prefix);
		::Dynamic appendByPrefix_dyn();

		void play(::String AnimName,::hx::Null< bool >  Force,::hx::Null< bool >  Reversed,::hx::Null< int >  Frame);
		::Dynamic play_dyn();

		void finish();
		::Dynamic finish_dyn();

		void byIndicesHelper(::Array< int > AddTo,::String Prefix,::Array< int > Indices,::String Postfix);
		::Dynamic byIndicesHelper_dyn();

		void byPrefixHelper(::Array< int > AddTo,::Array< ::Dynamic> AnimFrames,::String Prefix);
		::Dynamic byPrefixHelper_dyn();

		void findByPrefix(::Array< ::Dynamic> AnimFrames,::String Prefix);
		::Dynamic findByPrefix_dyn();

		int set_frameIndex(int Frame);
		::Dynamic set_frameIndex_dyn();

		::String get_name();
		::Dynamic get_name_dyn();

		::String set_name(::String AnimName);
		::Dynamic set_name_dyn();

		bool get_finished();
		::Dynamic get_finished_dyn();

};

} // end namespace flixel
} // end namespace animation

#endif /* INCLUDED_flixel_animation_FlxAnimationController */ 
