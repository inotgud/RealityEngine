// Generated by Haxe 4.1.5
#ifndef INCLUDED_Stage
#define INCLUDED_Stage

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
HX_DECLARE_CLASS0(MusicBeatState)
HX_DECLARE_CLASS0(Stage)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS3(flixel,addons,transition,FlxTransitionableState)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIState)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IEventGetter)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,_hx_system,FlxSound)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(hscript,Interp)



class HXCPP_CLASS_ATTRIBUTES Stage_obj : public  ::MusicBeatState_obj
{
	public:
		typedef  ::MusicBeatState_obj super;
		typedef Stage_obj OBJ_;
		Stage_obj();

	public:
		enum { _hx_ClassId = 0x0b7d43fa };

		void __construct(::String daStage);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Stage")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"Stage"); }
		static ::hx::ObjectPtr< Stage_obj > __new(::String daStage);
		static ::hx::ObjectPtr< Stage_obj > __alloc(::hx::Ctx *_hx_ctx,::String daStage);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Stage_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Stage",9e,da,38,17); }

		static  ::hscript::Interp interp;
		::String curStage;
		Float camZoom;
		bool hideLastBG;
		Float tweenDuration;
		::cpp::VirtualArray toAdd;
		 ::haxe::ds::StringMap swagBacks;
		 ::haxe::ds::StringMap swagGroup;
		::Array< ::Dynamic> animatedBacks;
		::Array< ::Dynamic> layInFront;
		 ::haxe::ds::IntMap slowBacks;
		 ::haxe::ds::StringMap positions;
		void update(Float elapsed);

		void stepHit();

		void beatHit();

		int lightningStrikeBeat;
		int lightningOffset;
		int curLight;
		void lightningStrikeShit();
		::Dynamic lightningStrikeShit_dyn();

		bool trainMoving;
		Float trainFrameTiming;
		int trainCars;
		bool trainFinishing;
		int trainCooldown;
		 ::flixel::_hx_system::FlxSound trainSound;
		void trainStart();
		::Dynamic trainStart_dyn();

		bool startedMoving;
		void updateTrainPos();
		::Dynamic updateTrainPos_dyn();

		void trainReset();
		::Dynamic trainReset_dyn();

		bool fastCarCanDrive;
		void resetFastCar();
		::Dynamic resetFastCar_dyn();

		 ::Dynamic callOnHscript(::String functionToCall,::cpp::VirtualArray params);
		::Dynamic callOnHscript_dyn();

		void fastCarDrive();
		::Dynamic fastCarDrive_dyn();

};


#endif /* INCLUDED_Stage */ 
