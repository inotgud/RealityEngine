// Generated by Haxe 4.1.5
#ifndef INCLUDED_lime_graphics_opengl_GL
#define INCLUDED_lime_graphics_opengl_GL

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(lime,_internal,backend,native,NativeOpenGLRenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GL)

namespace lime{
namespace graphics{
namespace opengl{


class HXCPP_CLASS_ATTRIBUTES GL_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef GL_obj OBJ_;
		GL_obj();

	public:
		enum { _hx_ClassId = 0x6ab38d34 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.graphics.opengl.GL")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"lime.graphics.opengl.GL"); }

		inline static ::hx::ObjectPtr< GL_obj > __new() {
			::hx::ObjectPtr< GL_obj > __this = new GL_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< GL_obj > __alloc(::hx::Ctx *_hx_ctx) {
			GL_obj *__this = (GL_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GL_obj), false, "lime.graphics.opengl.GL"));
			*(void **)__this = GL_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GL_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GL",25,3e,00,00); }

		static  ::lime::_internal::backend::native::NativeOpenGLRenderContext context;
};

} // end namespace lime
} // end namespace graphics
} // end namespace opengl

#endif /* INCLUDED_lime_graphics_opengl_GL */ 
