// Generated by Haxe 4.1.5
#ifndef INCLUDED_lime_utils_ArrayBufferView
#define INCLUDED_lime_utils_ArrayBufferView

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)

namespace lime{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES ArrayBufferView_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ArrayBufferView_obj OBJ_;
		ArrayBufferView_obj();

	public:
		enum { _hx_ClassId = 0x24c8740e };

		void __construct( ::Dynamic elements,int in_type);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime.utils.ArrayBufferView")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"lime.utils.ArrayBufferView"); }
		static ::hx::ObjectPtr< ArrayBufferView_obj > __new( ::Dynamic elements,int in_type);
		static ::hx::ObjectPtr< ArrayBufferView_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic elements,int in_type);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ArrayBufferView_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ArrayBufferView",5e,6e,84,fd); }

		int type;
		 ::haxe::io::Bytes buffer;
		int byteOffset;
		int byteLength;
		int length;
		int bytesPerElement;
		void copyFromArray(::Array< Float > array,::hx::Null< int >  offset);
		::Dynamic copyFromArray_dyn();

};

} // end namespace lime
} // end namespace utils

#endif /* INCLUDED_lime_utils_ArrayBufferView */ 
