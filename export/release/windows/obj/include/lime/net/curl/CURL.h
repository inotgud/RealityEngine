// Generated by Haxe 4.1.5
#ifndef INCLUDED_lime_net_curl_CURL
#define INCLUDED_lime_net_curl_CURL

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,net,curl,CURL)

namespace lime{
namespace net{
namespace curl{


class HXCPP_CLASS_ATTRIBUTES CURL_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef CURL_obj OBJ_;
		CURL_obj();

	public:
		enum { _hx_ClassId = 0x055fdc1c };

		void __construct( ::Dynamic handle);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime.net.curl.CURL")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"lime.net.curl.CURL"); }
		static ::hx::ObjectPtr< CURL_obj > __new( ::Dynamic handle);
		static ::hx::ObjectPtr< CURL_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic handle);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CURL_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CURL",ec,12,8a,2c); }

		static int globalInit(int flags);
		static ::Dynamic globalInit_dyn();

		static ::String strerror(int code);
		static ::Dynamic strerror_dyn();

		 ::Dynamic handle;
		void cleanup();
		::Dynamic cleanup_dyn();

		 ::Dynamic getInfo(int info);
		::Dynamic getInfo_dyn();

		void reset();
		::Dynamic reset_dyn();

		int setOption(int option, ::Dynamic parameter);
		::Dynamic setOption_dyn();

};

} // end namespace lime
} // end namespace net
} // end namespace curl

#endif /* INCLUDED_lime_net_curl_CURL */ 
