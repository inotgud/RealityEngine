// Generated by Haxe 4.1.5
#ifndef INCLUDED_lime_math_Vector2
#define INCLUDED_lime_math_Vector2

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_c8980fb157cd0afb_47_new)
HX_DECLARE_CLASS2(lime,math,Vector2)

namespace lime{
namespace math{


class HXCPP_CLASS_ATTRIBUTES Vector2_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Vector2_obj OBJ_;
		Vector2_obj();

	public:
		enum { _hx_ClassId = 0x38fae9aa };

		void __construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.math.Vector2")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"lime.math.Vector2"); }

		inline static ::hx::ObjectPtr< Vector2_obj > __new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
			::hx::ObjectPtr< Vector2_obj > __this = new Vector2_obj();
			__this->__construct(__o_x,__o_y);
			return __this;
		}

		inline static ::hx::ObjectPtr< Vector2_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
			Vector2_obj *__this = (Vector2_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Vector2_obj), false, "lime.math.Vector2"));
			*(void **)__this = Vector2_obj::_hx_vtable;
{
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_c8980fb157cd0afb_47_new)
HXLINE(  48)		( ( ::lime::math::Vector2)(__this) )->x = x;
HXLINE(  49)		( ( ::lime::math::Vector2)(__this) )->y = y;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Vector2_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Vector2",ef,21,ee,a7); }

		Float x;
		Float y;
		void offset(Float dx,Float dy);
		::Dynamic offset_dyn();

		 ::Dynamic _hx___toFlashPoint();
		::Dynamic _hx___toFlashPoint_dyn();

};

} // end namespace lime
} // end namespace math

#endif /* INCLUDED_lime_math_Vector2 */ 
