// Generated by Haxe 4.1.5
#ifndef INCLUDED_lime_math__Matrix4_Matrix4_Impl_
#define INCLUDED_lime_math__Matrix4_Matrix4_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,math,_Matrix4,Matrix4_Impl_)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)

namespace lime{
namespace math{
namespace _Matrix4{


class HXCPP_CLASS_ATTRIBUTES Matrix4_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Matrix4_Impl__obj OBJ_;
		Matrix4_Impl__obj();

	public:
		enum { _hx_ClassId = 0x329b7ea2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.math._Matrix4.Matrix4_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"lime.math._Matrix4.Matrix4_Impl_"); }

		inline static ::hx::ObjectPtr< Matrix4_Impl__obj > __new() {
			::hx::ObjectPtr< Matrix4_Impl__obj > __this = new Matrix4_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Matrix4_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			Matrix4_Impl__obj *__this = (Matrix4_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Matrix4_Impl__obj), false, "lime.math._Matrix4.Matrix4_Impl_"));
			*(void **)__this = Matrix4_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Matrix4_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Matrix4_Impl_",93,2f,ef,fd); }

		static void __boot();
		static ::Array< Float > _hx___identity;
		static  ::lime::utils::ArrayBufferView _new( ::lime::utils::ArrayBufferView data);
		static ::Dynamic _new_dyn();

		static void append( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView lhs);
		static ::Dynamic append_dyn();

		static void createOrtho( ::lime::utils::ArrayBufferView this1,Float left,Float right,Float bottom,Float top,Float zNear,Float zFar);
		static ::Dynamic createOrtho_dyn();

		static void identity( ::lime::utils::ArrayBufferView this1);
		static ::Dynamic identity_dyn();

		static Float get( ::lime::utils::ArrayBufferView this1,int index);
		static ::Dynamic get_dyn();

		static Float set( ::lime::utils::ArrayBufferView this1,int index,Float value);
		static ::Dynamic set_dyn();

};

} // end namespace lime
} // end namespace math
} // end namespace _Matrix4

#endif /* INCLUDED_lime_math__Matrix4_Matrix4_Impl_ */ 
