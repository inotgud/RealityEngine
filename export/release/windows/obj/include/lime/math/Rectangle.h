// Generated by Haxe 4.1.5
#ifndef INCLUDED_lime_math_Rectangle
#define INCLUDED_lime_math_Rectangle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_83_new)
HX_DECLARE_CLASS2(lime,math,Rectangle)

namespace lime{
namespace math{


class HXCPP_CLASS_ATTRIBUTES Rectangle_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Rectangle_obj OBJ_;
		Rectangle_obj();

	public:
		enum { _hx_ClassId = 0x3eea208a };

		void __construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.math.Rectangle")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"lime.math.Rectangle"); }

		inline static ::hx::ObjectPtr< Rectangle_obj > __new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height) {
			::hx::ObjectPtr< Rectangle_obj > __this = new Rectangle_obj();
			__this->__construct(__o_x,__o_y,__o_width,__o_height);
			return __this;
		}

		inline static ::hx::ObjectPtr< Rectangle_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height) {
			Rectangle_obj *__this = (Rectangle_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Rectangle_obj), false, "lime.math.Rectangle"));
			*(void **)__this = Rectangle_obj::_hx_vtable;
{
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		Float width = __o_width.Default(0);
            		Float height = __o_height.Default(0);
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_83_new)
HXLINE(  84)		( ( ::lime::math::Rectangle)(__this) )->x = x;
HXLINE(  85)		( ( ::lime::math::Rectangle)(__this) )->y = y;
HXLINE(  86)		( ( ::lime::math::Rectangle)(__this) )->width = width;
HXLINE(  87)		( ( ::lime::math::Rectangle)(__this) )->height = height;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Rectangle_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Rectangle",0f,b4,4f,bb); }

		Float height;
		Float width;
		Float x;
		Float y;
		 ::lime::math::Rectangle intersection( ::lime::math::Rectangle toIntersect, ::lime::math::Rectangle result);
		::Dynamic intersection_dyn();

		void offset(Float dx,Float dy);
		::Dynamic offset_dyn();

		void setEmpty();
		::Dynamic setEmpty_dyn();

		void setTo(Float xa,Float ya,Float widtha,Float heighta);
		::Dynamic setTo_dyn();

		 ::Dynamic _hx___toFlashRectangle();
		::Dynamic _hx___toFlashRectangle_dyn();

		Float get_bottom();
		::Dynamic get_bottom_dyn();

		Float get_right();
		::Dynamic get_right_dyn();

};

} // end namespace lime
} // end namespace math

#endif /* INCLUDED_lime_math_Rectangle */ 
