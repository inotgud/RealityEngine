// Generated by Haxe 4.1.5
#ifndef INCLUDED_lime_media_openal_AL
#define INCLUDED_lime_media_openal_AL

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,media,openal,AL)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)

namespace lime{
namespace media{
namespace openal{


class HXCPP_CLASS_ATTRIBUTES AL_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef AL_obj OBJ_;
		AL_obj();

	public:
		enum { _hx_ClassId = 0x2695cb8f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.media.openal.AL")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"lime.media.openal.AL"); }

		inline static ::hx::ObjectPtr< AL_obj > __new() {
			::hx::ObjectPtr< AL_obj > __this = new AL_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< AL_obj > __alloc(::hx::Ctx *_hx_ctx) {
			AL_obj *__this = (AL_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AL_obj), false, "lime.media.openal.AL"));
			*(void **)__this = AL_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AL_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AL",eb,38,00,00); }

		static void bufferData( ::Dynamic buffer,int format, ::lime::utils::ArrayBufferView data,int size,int freq);
		static ::Dynamic bufferData_dyn();

		static  ::Dynamic createBuffer();
		static ::Dynamic createBuffer_dyn();

		static  ::Dynamic createSource();
		static ::Dynamic createSource_dyn();

		static void deleteBuffer( ::Dynamic buffer);
		static ::Dynamic deleteBuffer_dyn();

		static void deleteSource( ::Dynamic source);
		static ::Dynamic deleteSource_dyn();

		static void distanceModel(int distanceModel);
		static ::Dynamic distanceModel_dyn();

		static ::Array< Float > getSource3f( ::Dynamic source,int param);
		static ::Dynamic getSource3f_dyn();

		static Float getSourcef( ::Dynamic source,int param);
		static ::Dynamic getSourcef_dyn();

		static  ::Dynamic getSourcei( ::Dynamic source,int param);
		static ::Dynamic getSourcei_dyn();

		static void source3f( ::Dynamic source,int param,Float value1,Float value2,Float value3);
		static ::Dynamic source3f_dyn();

		static void sourcef( ::Dynamic source,int param,Float value);
		static ::Dynamic sourcef_dyn();

		static void sourcei( ::Dynamic source,int param, ::Dynamic value);
		static ::Dynamic sourcei_dyn();

		static void sourcePlay( ::Dynamic source);
		static ::Dynamic sourcePlay_dyn();

		static void sourceStop( ::Dynamic source);
		static ::Dynamic sourceStop_dyn();

		static void sourceRewind( ::Dynamic source);
		static ::Dynamic sourceRewind_dyn();

		static void sourceQueueBuffers( ::Dynamic source,int nb,::cpp::VirtualArray buffers);
		static ::Dynamic sourceQueueBuffers_dyn();

		static ::cpp::VirtualArray sourceUnqueueBuffers( ::Dynamic source,int nb);
		static ::Dynamic sourceUnqueueBuffers_dyn();

};

} // end namespace lime
} // end namespace media
} // end namespace openal

#endif /* INCLUDED_lime_media_openal_AL */ 
