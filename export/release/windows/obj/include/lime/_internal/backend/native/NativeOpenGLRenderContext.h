// Generated by Haxe 4.1.5
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#define INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS4(lime,_internal,backend,native,NativeOpenGLRenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)

namespace lime{
namespace _internal{
namespace backend{
namespace native{


class HXCPP_CLASS_ATTRIBUTES NativeOpenGLRenderContext_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef NativeOpenGLRenderContext_obj OBJ_;
		NativeOpenGLRenderContext_obj();

	public:
		enum { _hx_ClassId = 0x693d41ef };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime._internal.backend.native.NativeOpenGLRenderContext")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"lime._internal.backend.native.NativeOpenGLRenderContext"); }
		static ::hx::ObjectPtr< NativeOpenGLRenderContext_obj > __new();
		static ::hx::ObjectPtr< NativeOpenGLRenderContext_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~NativeOpenGLRenderContext_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("NativeOpenGLRenderContext",d3,3f,53,bf); }

		static void __boot();
		static  ::haxe::ds::StringMap _hx___extensionObjects;
		static  ::haxe::ds::StringMap _hx___extensionObjectConstructors;
		static int _hx___lastContextID;
		static ::Array< ::String > _hx___supportedExtensions;
		int DEPTH_BUFFER_BIT;
		int STENCIL_BUFFER_BIT;
		int COLOR_BUFFER_BIT;
		int TRIANGLES;
		int ZERO;
		int ONE;
		int SRC_COLOR;
		int ONE_MINUS_SRC_COLOR;
		int SRC_ALPHA;
		int ONE_MINUS_SRC_ALPHA;
		int DST_ALPHA;
		int ONE_MINUS_DST_ALPHA;
		int DST_COLOR;
		int ONE_MINUS_DST_COLOR;
		int FUNC_ADD;
		int FUNC_REVERSE_SUBTRACT;
		int ARRAY_BUFFER;
		int ELEMENT_ARRAY_BUFFER;
		int STATIC_DRAW;
		int DYNAMIC_DRAW;
		int FRONT;
		int BACK;
		int FRONT_AND_BACK;
		int TEXTURE_2D;
		int CULL_FACE;
		int BLEND;
		int STENCIL_TEST;
		int DEPTH_TEST;
		int SCISSOR_TEST;
		int CW;
		int CCW;
		int MAX_TEXTURE_SIZE;
		int UNSIGNED_BYTE;
		int UNSIGNED_SHORT;
		int INT;
		int FLOAT;
		int ALPHA;
		int RGBA;
		int FRAGMENT_SHADER;
		int VERTEX_SHADER;
		int LINK_STATUS;
		int ACTIVE_UNIFORMS;
		int SHADING_LANGUAGE_VERSION;
		int NEVER;
		int LESS;
		int EQUAL;
		int LEQUAL;
		int GREATER;
		int NOTEQUAL;
		int GEQUAL;
		int ALWAYS;
		int KEEP;
		int REPLACE;
		int INCR;
		int DECR;
		int INVERT;
		int INCR_WRAP;
		int DECR_WRAP;
		int VENDOR;
		int RENDERER;
		int VERSION;
		int NEAREST;
		int LINEAR;
		int NEAREST_MIPMAP_NEAREST;
		int LINEAR_MIPMAP_NEAREST;
		int NEAREST_MIPMAP_LINEAR;
		int LINEAR_MIPMAP_LINEAR;
		int TEXTURE_MAG_FILTER;
		int TEXTURE_MIN_FILTER;
		int TEXTURE_WRAP_S;
		int TEXTURE_WRAP_T;
		int TEXTURE_CUBE_MAP;
		int TEXTURE_CUBE_MAP_POSITIVE_X;
		int TEXTURE0;
		int REPEAT;
		int CLAMP_TO_EDGE;
		int COMPILE_STATUS;
		int FRAMEBUFFER;
		int RENDERBUFFER;
		int DEPTH_COMPONENT16;
		int STENCIL_INDEX8;
		int COLOR_ATTACHMENT0;
		int DEPTH_ATTACHMENT;
		int STENCIL_ATTACHMENT;
		int DEPTH_STENCIL_ATTACHMENT;
		int NONE;
		int FRAMEBUFFER_COMPLETE;
		int DEPTH24_STENCIL8;
		::String type;
		Float version;
		 ::lime::graphics::opengl::GLObject _hx___arrayBufferBinding;
		 ::lime::graphics::opengl::GLObject _hx___elementBufferBinding;
		int _hx___contextID;
		 ::lime::graphics::opengl::GLObject _hx___currentProgram;
		 ::lime::graphics::opengl::GLObject _hx___framebufferBinding;
		bool _hx___initialized;
		bool _hx___isContextLost;
		 ::lime::graphics::opengl::GLObject _hx___renderbufferBinding;
		 ::lime::graphics::opengl::GLObject _hx___texture2DBinding;
		 ::lime::graphics::opengl::GLObject _hx___textureCubeMapBinding;
		void activeTexture(int texture);
		::Dynamic activeTexture_dyn();

		void attachShader( ::lime::graphics::opengl::GLObject program, ::lime::graphics::opengl::GLObject shader);
		::Dynamic attachShader_dyn();

		void bindAttribLocation( ::lime::graphics::opengl::GLObject program,int index,::String name);
		::Dynamic bindAttribLocation_dyn();

		void bindBuffer(int target, ::lime::graphics::opengl::GLObject buffer);
		::Dynamic bindBuffer_dyn();

		void bindFramebuffer(int target, ::lime::graphics::opengl::GLObject framebuffer);
		::Dynamic bindFramebuffer_dyn();

		void bindRenderbuffer(int target, ::lime::graphics::opengl::GLObject renderbuffer);
		::Dynamic bindRenderbuffer_dyn();

		void bindTexture(int target, ::lime::graphics::opengl::GLObject texture);
		::Dynamic bindTexture_dyn();

		void blendEquation(int mode);
		::Dynamic blendEquation_dyn();

		void blendFunc(int sfactor,int dfactor);
		::Dynamic blendFunc_dyn();

		void blendFuncSeparate(int srcRGB,int dstRGB,int srcAlpha,int dstAlpha);
		::Dynamic blendFuncSeparate_dyn();

		void bufferData(int target,int size,Float srcData,int usage);
		::Dynamic bufferData_dyn();

		int checkFramebufferStatus(int target);
		::Dynamic checkFramebufferStatus_dyn();

		void clear(int mask);
		::Dynamic clear_dyn();

		void clearColor(Float red,Float green,Float blue,Float alpha);
		::Dynamic clearColor_dyn();

		void clearDepthf(Float depth);
		::Dynamic clearDepthf_dyn();

		void clearStencil(int s);
		::Dynamic clearStencil_dyn();

		void colorMask(bool red,bool green,bool blue,bool alpha);
		::Dynamic colorMask_dyn();

		void compileShader( ::lime::graphics::opengl::GLObject shader);
		::Dynamic compileShader_dyn();

		 ::lime::graphics::opengl::GLObject createBuffer();
		::Dynamic createBuffer_dyn();

		 ::lime::graphics::opengl::GLObject createFramebuffer();
		::Dynamic createFramebuffer_dyn();

		 ::lime::graphics::opengl::GLObject createProgram();
		::Dynamic createProgram_dyn();

		 ::lime::graphics::opengl::GLObject createRenderbuffer();
		::Dynamic createRenderbuffer_dyn();

		 ::lime::graphics::opengl::GLObject createShader(int type);
		::Dynamic createShader_dyn();

		 ::lime::graphics::opengl::GLObject createTexture();
		::Dynamic createTexture_dyn();

		void cullFace(int mode);
		::Dynamic cullFace_dyn();

		void deleteFramebuffer( ::lime::graphics::opengl::GLObject framebuffer);
		::Dynamic deleteFramebuffer_dyn();

		void deleteRenderbuffer( ::lime::graphics::opengl::GLObject renderbuffer);
		::Dynamic deleteRenderbuffer_dyn();

		void deleteShader( ::lime::graphics::opengl::GLObject shader);
		::Dynamic deleteShader_dyn();

		void deleteTexture( ::lime::graphics::opengl::GLObject texture);
		::Dynamic deleteTexture_dyn();

		void depthFunc(int func);
		::Dynamic depthFunc_dyn();

		void depthMask(bool flag);
		::Dynamic depthMask_dyn();

		void disable(int cap);
		::Dynamic disable_dyn();

		void disableVertexAttribArray(int index);
		::Dynamic disableVertexAttribArray_dyn();

		void drawArrays(int mode,int first,int count);
		::Dynamic drawArrays_dyn();

		void drawElements(int mode,int count,int type,Float offset);
		::Dynamic drawElements_dyn();

		void enable(int cap);
		::Dynamic enable_dyn();

		void enableVertexAttribArray(int index);
		::Dynamic enableVertexAttribArray_dyn();

		void framebufferRenderbuffer(int target,int attachment,int renderbuffertarget, ::lime::graphics::opengl::GLObject renderbuffer);
		::Dynamic framebufferRenderbuffer_dyn();

		void framebufferTexture2D(int target,int attachment,int textarget, ::lime::graphics::opengl::GLObject texture,int level);
		::Dynamic framebufferTexture2D_dyn();

		void frontFace(int mode);
		::Dynamic frontFace_dyn();

		void generateMipmap(int target);
		::Dynamic generateMipmap_dyn();

		 ::Dynamic getActiveUniform( ::lime::graphics::opengl::GLObject program,int index);
		::Dynamic getActiveUniform_dyn();

		int getAttribLocation( ::lime::graphics::opengl::GLObject program,::String name);
		::Dynamic getAttribLocation_dyn();

		bool getBoolean(int pname);
		::Dynamic getBoolean_dyn();

		void getBooleanv(int pname,Float params);
		::Dynamic getBooleanv_dyn();

		 ::Dynamic getExtension(::String name);
		::Dynamic getExtension_dyn();

		Float getFloat(int pname);
		::Dynamic getFloat_dyn();

		void getFloatv(int pname,Float params);
		::Dynamic getFloatv_dyn();

		int getInteger(int pname);
		::Dynamic getInteger_dyn();

		void getIntegerv(int pname,Float params);
		::Dynamic getIntegerv_dyn();

		 ::Dynamic getParameter(int pname);
		::Dynamic getParameter_dyn();

		int getProgrami( ::lime::graphics::opengl::GLObject program,int pname);
		::Dynamic getProgrami_dyn();

		::String getProgramInfoLog( ::lime::graphics::opengl::GLObject program);
		::Dynamic getProgramInfoLog_dyn();

		 ::Dynamic getProgramParameter( ::lime::graphics::opengl::GLObject program,int pname);
		::Dynamic getProgramParameter_dyn();

		int getShaderi( ::lime::graphics::opengl::GLObject shader,int pname);
		::Dynamic getShaderi_dyn();

		::String getShaderInfoLog( ::lime::graphics::opengl::GLObject shader);
		::Dynamic getShaderInfoLog_dyn();

		 ::Dynamic getShaderParameter( ::lime::graphics::opengl::GLObject shader,int pname);
		::Dynamic getShaderParameter_dyn();

		::String getString(int name);
		::Dynamic getString_dyn();

		::Array< ::String > getSupportedExtensions();
		::Dynamic getSupportedExtensions_dyn();

		int getUniformLocation( ::lime::graphics::opengl::GLObject program,::String name);
		::Dynamic getUniformLocation_dyn();

		void linkProgram( ::lime::graphics::opengl::GLObject program);
		::Dynamic linkProgram_dyn();

		void renderbufferStorage(int target,int internalformat,int width,int height);
		::Dynamic renderbufferStorage_dyn();

		void scissor(int x,int y,int width,int height);
		::Dynamic scissor_dyn();

		void shaderSource( ::lime::graphics::opengl::GLObject shader,::String source);
		::Dynamic shaderSource_dyn();

		void stencilFunc(int func,int ref,int mask);
		::Dynamic stencilFunc_dyn();

		void stencilMask(int mask);
		::Dynamic stencilMask_dyn();

		void stencilOpSeparate(int face,int fail,int zfail,int zpass);
		::Dynamic stencilOpSeparate_dyn();

		void texImage2D(int target,int level,int internalformat,int width,int height,int border,int format,int type,Float data);
		::Dynamic texImage2D_dyn();

		void texParameterf(int target,int pname,Float param);
		::Dynamic texParameterf_dyn();

		void texParameteri(int target,int pname,int param);
		::Dynamic texParameteri_dyn();

		void uniform1f(int location,Float v0);
		::Dynamic uniform1f_dyn();

		void uniform1i(int location,int v0);
		::Dynamic uniform1i_dyn();

		void uniform2f(int location,Float v0,Float v1);
		::Dynamic uniform2f_dyn();

		void uniform2fv(int location,int count,Float v);
		::Dynamic uniform2fv_dyn();

		void uniform2i(int location,int v0,int v1);
		::Dynamic uniform2i_dyn();

		void uniform3f(int location,Float v0,Float v1,Float v2);
		::Dynamic uniform3f_dyn();

		void uniform3fv(int location,int count,Float v);
		::Dynamic uniform3fv_dyn();

		void uniform3i(int location,int v0,int v1,int v2);
		::Dynamic uniform3i_dyn();

		void uniform4f(int location,Float v0,Float v1,Float v2,Float v3);
		::Dynamic uniform4f_dyn();

		void uniform4fv(int location,int count,Float v);
		::Dynamic uniform4fv_dyn();

		void uniform4i(int location,int v0,int v1,int v2,int v3);
		::Dynamic uniform4i_dyn();

		void uniformMatrix2fv(int location,int count,bool transpose,Float v);
		::Dynamic uniformMatrix2fv_dyn();

		void uniformMatrix3fv(int location,int count,bool transpose,Float v);
		::Dynamic uniformMatrix3fv_dyn();

		void uniformMatrix4fv(int location,int count,bool transpose,Float v);
		::Dynamic uniformMatrix4fv_dyn();

		void useProgram( ::lime::graphics::opengl::GLObject program);
		::Dynamic useProgram_dyn();

		void vertexAttrib1f(int index,Float v0);
		::Dynamic vertexAttrib1f_dyn();

		void vertexAttrib2f(int index,Float v0,Float y);
		::Dynamic vertexAttrib2f_dyn();

		void vertexAttrib3f(int index,Float v0,Float v1,Float v2);
		::Dynamic vertexAttrib3f_dyn();

		void vertexAttrib4f(int index,Float v0,Float v1,Float v2,Float v3);
		::Dynamic vertexAttrib4f_dyn();

		void vertexAttribPointer(int index,int size,int type,bool normalized,int stride,Float offset);
		::Dynamic vertexAttribPointer_dyn();

		void viewport(int x,int y,int width,int height);
		::Dynamic viewport_dyn();

		void _hx___contextLost();
		::Dynamic _hx___contextLost_dyn();

		int _hx___getObjectID( ::lime::graphics::opengl::GLObject object);
		::Dynamic _hx___getObjectID_dyn();

		void _hx___initialize();
		::Dynamic _hx___initialize_dyn();

};

} // end namespace lime
} // end namespace _internal
} // end namespace backend
} // end namespace native

#endif /* INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext */ 
