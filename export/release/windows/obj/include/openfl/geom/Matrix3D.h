// Generated by Haxe 4.1.5
#ifndef INCLUDED_openfl_geom_Matrix3D
#define INCLUDED_openfl_geom_Matrix3D

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,_Vector,FloatVector)
HX_DECLARE_CLASS2(openfl,_Vector,IVector)
HX_DECLARE_CLASS2(openfl,geom,Matrix3D)

namespace openfl{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES Matrix3D_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Matrix3D_obj OBJ_;
		Matrix3D_obj();

	public:
		enum { _hx_ClassId = 0x45c06ede };

		void __construct( ::openfl::_Vector::FloatVector v);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.geom.Matrix3D")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"openfl.geom.Matrix3D"); }
		static ::hx::ObjectPtr< Matrix3D_obj > __new( ::openfl::_Vector::FloatVector v);
		static ::hx::ObjectPtr< Matrix3D_obj > __alloc(::hx::Ctx *_hx_ctx, ::openfl::_Vector::FloatVector v);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Matrix3D_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Matrix3D",52,f1,a4,40); }

		 ::openfl::_Vector::FloatVector rawData;
		void append( ::openfl::geom::Matrix3D lhs);
		::Dynamic append_dyn();

		void appendTranslation(Float x,Float y,Float z);
		::Dynamic appendTranslation_dyn();

		void copyRawDataFrom( ::openfl::_Vector::FloatVector vector,::hx::Null< int >  index,::hx::Null< bool >  transpose);
		::Dynamic copyRawDataFrom_dyn();

		void identity();
		::Dynamic identity_dyn();

		void transpose();
		::Dynamic transpose_dyn();

};

} // end namespace openfl
} // end namespace geom

#endif /* INCLUDED_openfl_geom_Matrix3D */ 
