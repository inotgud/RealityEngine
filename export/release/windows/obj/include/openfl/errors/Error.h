// Generated by Haxe 4.1.5
#ifndef INCLUDED_openfl_errors_Error
#define INCLUDED_openfl_errors_Error

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_7c7ee06d9b3544d2_54_new)
HX_DECLARE_CLASS2(openfl,errors,Error)

namespace openfl{
namespace errors{


class HXCPP_CLASS_ATTRIBUTES Error_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Error_obj OBJ_;
		Error_obj();

	public:
		enum { _hx_ClassId = 0x3495c9c5 };

		void __construct(::String __o_message,::hx::Null< int >  __o_id);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.errors.Error")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"openfl.errors.Error"); }

		inline static ::hx::ObjectPtr< Error_obj > __new(::String __o_message,::hx::Null< int >  __o_id) {
			::hx::ObjectPtr< Error_obj > __this = new Error_obj();
			__this->__construct(__o_message,__o_id);
			return __this;
		}

		inline static ::hx::ObjectPtr< Error_obj > __alloc(::hx::Ctx *_hx_ctx,::String __o_message,::hx::Null< int >  __o_id) {
			Error_obj *__this = (Error_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Error_obj), true, "openfl.errors.Error"));
			*(void **)__this = Error_obj::_hx_vtable;
{
            		::String message = __o_message;
            		if (::hx::IsNull(__o_message)) message = HX_("",00,00,00,00);
            		int id = __o_id.Default(0);
            	HX_STACKFRAME(&_hx_pos_7c7ee06d9b3544d2_54_new)
HXLINE(  55)		( ( ::openfl::errors::Error)(__this) )->message = message;
HXLINE(  56)		( ( ::openfl::errors::Error)(__this) )->errorID = id;
HXLINE(  57)		( ( ::openfl::errors::Error)(__this) )->name = HX_("Error",a8,3b,57,06);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Error_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Error",a8,3b,57,06); }

		int errorID;
		::String message;
		::String name;
		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace openfl
} // end namespace errors

#endif /* INCLUDED_openfl_errors_Error */ 
