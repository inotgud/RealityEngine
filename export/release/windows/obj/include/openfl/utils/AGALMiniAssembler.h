// Generated by Haxe 4.1.5
#ifndef INCLUDED_openfl_utils_AGALMiniAssembler
#define INCLUDED_openfl_utils_AGALMiniAssembler

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(openfl,utils,AGALMiniAssembler)
HX_DECLARE_CLASS2(openfl,utils,ByteArrayData)
HX_DECLARE_CLASS2(openfl,utils,IDataInput)
HX_DECLARE_CLASS2(openfl,utils,IDataOutput)

namespace openfl{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES AGALMiniAssembler_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef AGALMiniAssembler_obj OBJ_;
		AGALMiniAssembler_obj();

	public:
		enum { _hx_ClassId = 0x65c43237 };

		void __construct(::hx::Null< bool >  __o_debugging);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.utils.AGALMiniAssembler")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"openfl.utils.AGALMiniAssembler"); }
		static ::hx::ObjectPtr< AGALMiniAssembler_obj > __new(::hx::Null< bool >  __o_debugging);
		static ::hx::ObjectPtr< AGALMiniAssembler_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< bool >  __o_debugging);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AGALMiniAssembler_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AGALMiniAssembler",78,27,0e,a3); }

		static void __boot();
		static  ::Dynamic __meta__;
		static  ::haxe::ds::StringMap OPMAP;
		static  ::haxe::ds::StringMap REGMAP;
		static  ::haxe::ds::StringMap SAMPLEMAP;
		static bool initialized;
		static void init();
		static ::Dynamic init_dyn();

		 ::openfl::utils::ByteArrayData agalcode;
		::String error;
		bool verbose;
		bool debugEnabled;
		 ::openfl::utils::ByteArrayData assemble(::String mode,::String source,::hx::Null< int >  version,::hx::Null< bool >  ignoreLimits);
		::Dynamic assemble_dyn();

		void initregmap(int version,bool ignorelimits);
		::Dynamic initregmap_dyn();

		::Array< ::String > match(::String value, ::EReg reg);
		::Dynamic match_dyn();

};

} // end namespace openfl
} // end namespace utils

#endif /* INCLUDED_openfl_utils_AGALMiniAssembler */ 
