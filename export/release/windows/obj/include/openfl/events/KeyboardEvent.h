// Generated by Haxe 4.1.5
#ifndef INCLUDED_openfl_events_KeyboardEvent
#define INCLUDED_openfl_events_KeyboardEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
HX_DECLARE_STACK_FRAME(_hx_pos_c70c2341539e31f3_169_new)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)

namespace openfl{
namespace events{


class HXCPP_CLASS_ATTRIBUTES KeyboardEvent_obj : public  ::openfl::events::Event_obj
{
	public:
		typedef  ::openfl::events::Event_obj super;
		typedef KeyboardEvent_obj OBJ_;
		KeyboardEvent_obj();

	public:
		enum { _hx_ClassId = 0x4994310a };

		void __construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_charCodeValue,::hx::Null< int >  __o_keyCodeValue, ::Dynamic keyLocationValue,::hx::Null< bool >  __o_ctrlKeyValue,::hx::Null< bool >  __o_altKeyValue,::hx::Null< bool >  __o_shiftKeyValue,::hx::Null< bool >  __o_controlKeyValue,::hx::Null< bool >  __o_commandKeyValue);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.events.KeyboardEvent")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"openfl.events.KeyboardEvent"); }

		inline static ::hx::ObjectPtr< KeyboardEvent_obj > __new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_charCodeValue,::hx::Null< int >  __o_keyCodeValue, ::Dynamic keyLocationValue,::hx::Null< bool >  __o_ctrlKeyValue,::hx::Null< bool >  __o_altKeyValue,::hx::Null< bool >  __o_shiftKeyValue,::hx::Null< bool >  __o_controlKeyValue,::hx::Null< bool >  __o_commandKeyValue) {
			::hx::ObjectPtr< KeyboardEvent_obj > __this = new KeyboardEvent_obj();
			__this->__construct(type,__o_bubbles,__o_cancelable,__o_charCodeValue,__o_keyCodeValue,keyLocationValue,__o_ctrlKeyValue,__o_altKeyValue,__o_shiftKeyValue,__o_controlKeyValue,__o_commandKeyValue);
			return __this;
		}

		inline static ::hx::ObjectPtr< KeyboardEvent_obj > __alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_charCodeValue,::hx::Null< int >  __o_keyCodeValue, ::Dynamic keyLocationValue,::hx::Null< bool >  __o_ctrlKeyValue,::hx::Null< bool >  __o_altKeyValue,::hx::Null< bool >  __o_shiftKeyValue,::hx::Null< bool >  __o_controlKeyValue,::hx::Null< bool >  __o_commandKeyValue) {
			KeyboardEvent_obj *__this = (KeyboardEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(KeyboardEvent_obj), true, "openfl.events.KeyboardEvent"));
			*(void **)__this = KeyboardEvent_obj::_hx_vtable;
{
            		bool bubbles = __o_bubbles.Default(false);
            		bool cancelable = __o_cancelable.Default(false);
            		int charCodeValue = __o_charCodeValue.Default(0);
            		int keyCodeValue = __o_keyCodeValue.Default(0);
            		bool ctrlKeyValue = __o_ctrlKeyValue.Default(false);
            		bool altKeyValue = __o_altKeyValue.Default(false);
            		bool shiftKeyValue = __o_shiftKeyValue.Default(false);
            		bool controlKeyValue = __o_controlKeyValue.Default(false);
            		bool commandKeyValue = __o_commandKeyValue.Default(false);
            	HX_STACKFRAME(&_hx_pos_c70c2341539e31f3_169_new)
HXLINE( 170)		__this->super::__construct(type,bubbles,cancelable);
HXLINE( 172)		( ( ::openfl::events::KeyboardEvent)(__this) )->charCode = charCodeValue;
HXLINE( 173)		( ( ::openfl::events::KeyboardEvent)(__this) )->keyCode = keyCodeValue;
HXLINE( 174)		int _hx_tmp;
HXDLIN( 174)		if (::hx::IsNotNull( keyLocationValue )) {
HXLINE( 174)			_hx_tmp = ( (int)(keyLocationValue) );
            		}
            		else {
HXLINE( 174)			_hx_tmp = 0;
            		}
HXDLIN( 174)		( ( ::openfl::events::KeyboardEvent)(__this) )->keyLocation = _hx_tmp;
HXLINE( 175)		( ( ::openfl::events::KeyboardEvent)(__this) )->ctrlKey = ctrlKeyValue;
HXLINE( 176)		( ( ::openfl::events::KeyboardEvent)(__this) )->altKey = altKeyValue;
HXLINE( 177)		( ( ::openfl::events::KeyboardEvent)(__this) )->shiftKey = shiftKeyValue;
HXLINE( 180)		( ( ::openfl::events::KeyboardEvent)(__this) )->controlKey = controlKeyValue;
HXLINE( 181)		( ( ::openfl::events::KeyboardEvent)(__this) )->commandKey = commandKeyValue;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~KeyboardEvent_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("KeyboardEvent",d3,8d,88,91); }

		bool altKey;
		int charCode;
		bool commandKey;
		bool controlKey;
		bool ctrlKey;
		int keyCode;
		int keyLocation;
		bool shiftKey;
};

} // end namespace openfl
} // end namespace events

#endif /* INCLUDED_openfl_events_KeyboardEvent */ 
