// Generated by Haxe 4.1.5
#ifndef INCLUDED_openfl_events_Event
#define INCLUDED_openfl_events_Event

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_460ec5366bb20ab2_728_new)
HX_DECLARE_CLASS2(openfl,events,Event)

namespace openfl{
namespace events{


class HXCPP_CLASS_ATTRIBUTES Event_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Event_obj OBJ_;
		Event_obj();

	public:
		enum { _hx_ClassId = 0x08ec4c31 };

		void __construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.events.Event")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"openfl.events.Event"); }

		inline static ::hx::ObjectPtr< Event_obj > __new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable) {
			::hx::ObjectPtr< Event_obj > __this = new Event_obj();
			__this->__construct(type,__o_bubbles,__o_cancelable);
			return __this;
		}

		inline static ::hx::ObjectPtr< Event_obj > __alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable) {
			Event_obj *__this = (Event_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Event_obj), true, "openfl.events.Event"));
			*(void **)__this = Event_obj::_hx_vtable;
{
            		bool bubbles = __o_bubbles.Default(false);
            		bool cancelable = __o_cancelable.Default(false);
            	HX_STACKFRAME(&_hx_pos_460ec5366bb20ab2_728_new)
HXLINE( 729)		( ( ::openfl::events::Event)(__this) )->type = type;
HXLINE( 730)		( ( ::openfl::events::Event)(__this) )->bubbles = bubbles;
HXLINE( 731)		( ( ::openfl::events::Event)(__this) )->cancelable = cancelable;
HXLINE( 732)		( ( ::openfl::events::Event)(__this) )->eventPhase = 2;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Event_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Event",fa,37,f2,08); }

		bool bubbles;
		bool cancelable;
		 ::Dynamic currentTarget;
		int eventPhase;
		 ::Dynamic target;
		::String type;
		bool _hx___isCanceled;
		bool _hx___isCanceledNow;
		bool _hx___preventDefault;
		bool isDefaultPrevented();
		::Dynamic isDefaultPrevented_dyn();

		void preventDefault();
		::Dynamic preventDefault_dyn();

		void stopImmediatePropagation();
		::Dynamic stopImmediatePropagation_dyn();

		void stopPropagation();
		::Dynamic stopPropagation_dyn();

};

} // end namespace openfl
} // end namespace events

#endif /* INCLUDED_openfl_events_Event */ 
