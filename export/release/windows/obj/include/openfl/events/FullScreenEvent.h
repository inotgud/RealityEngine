// Generated by Haxe 4.1.5
#ifndef INCLUDED_openfl_events_FullScreenEvent
#define INCLUDED_openfl_events_FullScreenEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_events_ActivityEvent
#include <openfl/events/ActivityEvent.h>
#endif
HX_DECLARE_STACK_FRAME(_hx_pos_9acd580c71eb88b0_85_new)
HX_DECLARE_CLASS2(openfl,events,ActivityEvent)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,FullScreenEvent)

namespace openfl{
namespace events{


class HXCPP_CLASS_ATTRIBUTES FullScreenEvent_obj : public  ::openfl::events::ActivityEvent_obj
{
	public:
		typedef  ::openfl::events::ActivityEvent_obj super;
		typedef FullScreenEvent_obj OBJ_;
		FullScreenEvent_obj();

	public:
		enum { _hx_ClassId = 0x7e1cc696 };

		void __construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< bool >  __o_fullScreen,::hx::Null< bool >  __o_interactive);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.events.FullScreenEvent")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"openfl.events.FullScreenEvent"); }

		inline static ::hx::ObjectPtr< FullScreenEvent_obj > __new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< bool >  __o_fullScreen,::hx::Null< bool >  __o_interactive) {
			::hx::ObjectPtr< FullScreenEvent_obj > __this = new FullScreenEvent_obj();
			__this->__construct(type,__o_bubbles,__o_cancelable,__o_fullScreen,__o_interactive);
			return __this;
		}

		inline static ::hx::ObjectPtr< FullScreenEvent_obj > __alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< bool >  __o_fullScreen,::hx::Null< bool >  __o_interactive) {
			FullScreenEvent_obj *__this = (FullScreenEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FullScreenEvent_obj), true, "openfl.events.FullScreenEvent"));
			*(void **)__this = FullScreenEvent_obj::_hx_vtable;
{
            		bool bubbles = __o_bubbles.Default(false);
            		bool cancelable = __o_cancelable.Default(false);
            		bool fullScreen = __o_fullScreen.Default(false);
            		bool interactive = __o_interactive.Default(false);
            	HX_STACKFRAME(&_hx_pos_9acd580c71eb88b0_85_new)
HXLINE(  88)		__this->super::__construct(type,bubbles,cancelable,null());
HXLINE(  90)		( ( ::openfl::events::FullScreenEvent)(__this) )->fullScreen = fullScreen;
HXLINE(  91)		( ( ::openfl::events::FullScreenEvent)(__this) )->interactive = interactive;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FullScreenEvent_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FullScreenEvent",9f,a7,78,f1); }

		bool fullScreen;
		bool interactive;
};

} // end namespace openfl
} // end namespace events

#endif /* INCLUDED_openfl_events_FullScreenEvent */ 
