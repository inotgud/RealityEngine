// Generated by Haxe 4.1.5
#ifndef INCLUDED_openfl_events_TextEvent
#define INCLUDED_openfl_events_TextEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
HX_DECLARE_STACK_FRAME(_hx_pos_a9542994cee360f6_82_new)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,TextEvent)

namespace openfl{
namespace events{


class HXCPP_CLASS_ATTRIBUTES TextEvent_obj : public  ::openfl::events::Event_obj
{
	public:
		typedef  ::openfl::events::Event_obj super;
		typedef TextEvent_obj OBJ_;
		TextEvent_obj();

	public:
		enum { _hx_ClassId = 0x53d8fde0 };

		void __construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::String __o_text);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.events.TextEvent")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"openfl.events.TextEvent"); }

		inline static ::hx::ObjectPtr< TextEvent_obj > __new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::String __o_text) {
			::hx::ObjectPtr< TextEvent_obj > __this = new TextEvent_obj();
			__this->__construct(type,__o_bubbles,__o_cancelable,__o_text);
			return __this;
		}

		inline static ::hx::ObjectPtr< TextEvent_obj > __alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::String __o_text) {
			TextEvent_obj *__this = (TextEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextEvent_obj), true, "openfl.events.TextEvent"));
			*(void **)__this = TextEvent_obj::_hx_vtable;
{
            		bool bubbles = __o_bubbles.Default(false);
            		bool cancelable = __o_cancelable.Default(false);
            		::String text = __o_text;
            		if (::hx::IsNull(__o_text)) text = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_a9542994cee360f6_82_new)
HXLINE(  83)		__this->super::__construct(type,bubbles,cancelable);
HXLINE(  85)		( ( ::openfl::events::TextEvent)(__this) )->text = text;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TextEvent_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TextEvent",0d,38,85,b0); }

		::String text;
};

} // end namespace openfl
} // end namespace events

#endif /* INCLUDED_openfl_events_TextEvent */ 
