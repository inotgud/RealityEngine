// Generated by Haxe 4.1.5
#ifndef INCLUDED_openfl_events_IOErrorEvent
#define INCLUDED_openfl_events_IOErrorEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
HX_DECLARE_STACK_FRAME(_hx_pos_c1a0d6ee9eb05388_68_new)
HX_DECLARE_CLASS2(openfl,events,ErrorEvent)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,IOErrorEvent)
HX_DECLARE_CLASS2(openfl,events,TextEvent)

namespace openfl{
namespace events{


class HXCPP_CLASS_ATTRIBUTES IOErrorEvent_obj : public  ::openfl::events::ErrorEvent_obj
{
	public:
		typedef  ::openfl::events::ErrorEvent_obj super;
		typedef IOErrorEvent_obj OBJ_;
		IOErrorEvent_obj();

	public:
		enum { _hx_ClassId = 0x1ac076c5 };

		void __construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::String __o_text,::hx::Null< int >  __o_id);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.events.IOErrorEvent")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"openfl.events.IOErrorEvent"); }

		inline static ::hx::ObjectPtr< IOErrorEvent_obj > __new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::String __o_text,::hx::Null< int >  __o_id) {
			::hx::ObjectPtr< IOErrorEvent_obj > __this = new IOErrorEvent_obj();
			__this->__construct(type,__o_bubbles,__o_cancelable,__o_text,__o_id);
			return __this;
		}

		inline static ::hx::ObjectPtr< IOErrorEvent_obj > __alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::String __o_text,::hx::Null< int >  __o_id) {
			IOErrorEvent_obj *__this = (IOErrorEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(IOErrorEvent_obj), true, "openfl.events.IOErrorEvent"));
			*(void **)__this = IOErrorEvent_obj::_hx_vtable;
{
            		bool bubbles = __o_bubbles.Default(true);
            		bool cancelable = __o_cancelable.Default(false);
            		::String text = __o_text;
            		if (::hx::IsNull(__o_text)) text = HX_("",00,00,00,00);
            		int id = __o_id.Default(0);
            	HX_STACKFRAME(&_hx_pos_c1a0d6ee9eb05388_68_new)
HXDLIN(  68)		__this->super::__construct(type,bubbles,cancelable,text,id);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~IOErrorEvent_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("IOErrorEvent",b8,16,b3,65); }

};

} // end namespace openfl
} // end namespace events

#endif /* INCLUDED_openfl_events_IOErrorEvent */ 
