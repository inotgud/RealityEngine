// Generated by Haxe 4.1.5
#ifndef INCLUDED_openfl_events_HTTPStatusEvent
#define INCLUDED_openfl_events_HTTPStatusEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
HX_DECLARE_STACK_FRAME(_hx_pos_3e9f49414be9df9e_126_new)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,HTTPStatusEvent)
HX_DECLARE_CLASS2(openfl,net,URLRequestHeader)

namespace openfl{
namespace events{


class HXCPP_CLASS_ATTRIBUTES HTTPStatusEvent_obj : public  ::openfl::events::Event_obj
{
	public:
		typedef  ::openfl::events::Event_obj super;
		typedef HTTPStatusEvent_obj OBJ_;
		HTTPStatusEvent_obj();

	public:
		enum { _hx_ClassId = 0x10c88847 };

		void __construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_status,::hx::Null< bool >  __o_redirected);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.events.HTTPStatusEvent")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"openfl.events.HTTPStatusEvent"); }

		inline static ::hx::ObjectPtr< HTTPStatusEvent_obj > __new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_status,::hx::Null< bool >  __o_redirected) {
			::hx::ObjectPtr< HTTPStatusEvent_obj > __this = new HTTPStatusEvent_obj();
			__this->__construct(type,__o_bubbles,__o_cancelable,__o_status,__o_redirected);
			return __this;
		}

		inline static ::hx::ObjectPtr< HTTPStatusEvent_obj > __alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_status,::hx::Null< bool >  __o_redirected) {
			HTTPStatusEvent_obj *__this = (HTTPStatusEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HTTPStatusEvent_obj), true, "openfl.events.HTTPStatusEvent"));
			*(void **)__this = HTTPStatusEvent_obj::_hx_vtable;
{
            		bool bubbles = __o_bubbles.Default(false);
            		bool cancelable = __o_cancelable.Default(false);
            		int status = __o_status.Default(0);
            		bool redirected = __o_redirected.Default(false);
            	HX_STACKFRAME(&_hx_pos_3e9f49414be9df9e_126_new)
HXLINE( 127)		( ( ::openfl::events::HTTPStatusEvent)(__this) )->status = status;
HXLINE( 128)		( ( ::openfl::events::HTTPStatusEvent)(__this) )->redirected = redirected;
HXLINE( 130)		__this->super::__construct(type,bubbles,cancelable);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~HTTPStatusEvent_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("HTTPStatusEvent",e0,4c,1b,fe); }

		bool redirected;
		::Array< ::Dynamic> responseHeaders;
		::String responseURL;
		int status;
};

} // end namespace openfl
} // end namespace events

#endif /* INCLUDED_openfl_events_HTTPStatusEvent */ 
