// Generated by Haxe 4.1.5
#ifndef INCLUDED_openfl_events_UncaughtErrorEvent
#define INCLUDED_openfl_events_UncaughtErrorEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
HX_DECLARE_STACK_FRAME(_hx_pos_c2f85669dc13e38b_179_new)
HX_DECLARE_CLASS2(openfl,events,ErrorEvent)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,TextEvent)
HX_DECLARE_CLASS2(openfl,events,UncaughtErrorEvent)

namespace openfl{
namespace events{


class HXCPP_CLASS_ATTRIBUTES UncaughtErrorEvent_obj : public  ::openfl::events::ErrorEvent_obj
{
	public:
		typedef  ::openfl::events::ErrorEvent_obj super;
		typedef UncaughtErrorEvent_obj OBJ_;
		UncaughtErrorEvent_obj();

	public:
		enum { _hx_ClassId = 0x4a20c7b0 };

		void __construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable, ::Dynamic error);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.events.UncaughtErrorEvent")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"openfl.events.UncaughtErrorEvent"); }

		inline static ::hx::ObjectPtr< UncaughtErrorEvent_obj > __new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable, ::Dynamic error) {
			::hx::ObjectPtr< UncaughtErrorEvent_obj > __this = new UncaughtErrorEvent_obj();
			__this->__construct(type,__o_bubbles,__o_cancelable,error);
			return __this;
		}

		inline static ::hx::ObjectPtr< UncaughtErrorEvent_obj > __alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable, ::Dynamic error) {
			UncaughtErrorEvent_obj *__this = (UncaughtErrorEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(UncaughtErrorEvent_obj), true, "openfl.events.UncaughtErrorEvent"));
			*(void **)__this = UncaughtErrorEvent_obj::_hx_vtable;
{
            		bool bubbles = __o_bubbles.Default(true);
            		bool cancelable = __o_cancelable.Default(true);
            	HX_STACKFRAME(&_hx_pos_c2f85669dc13e38b_179_new)
HXLINE( 180)		__this->super::__construct(type,bubbles,cancelable,null(),null());
HXLINE( 182)		( ( ::openfl::events::UncaughtErrorEvent)(__this) )->error = error;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~UncaughtErrorEvent_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("UncaughtErrorEvent",47,72,9a,e0); }

		 ::Dynamic error;
};

} // end namespace openfl
} // end namespace events

#endif /* INCLUDED_openfl_events_UncaughtErrorEvent */ 
