// Generated by Haxe 4.1.5
#ifndef INCLUDED_Event
#define INCLUDED_Event

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_cee7d4ca3e3c4fc7_18_new)
HX_DECLARE_CLASS0(Event)



class HXCPP_CLASS_ATTRIBUTES Event_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Event_obj OBJ_;
		Event_obj();

	public:
		enum { _hx_ClassId = 0x54eb3572 };

		void __construct(::String name,Float pos,Float value,::String type);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Event")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"Event"); }

		inline static ::hx::ObjectPtr< Event_obj > __new(::String name,Float pos,Float value,::String type) {
			::hx::ObjectPtr< Event_obj > __this = new Event_obj();
			__this->__construct(name,pos,value,type);
			return __this;
		}

		inline static ::hx::ObjectPtr< Event_obj > __alloc(::hx::Ctx *_hx_ctx,::String name,Float pos,Float value,::String type) {
			Event_obj *__this = (Event_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Event_obj), true, "Event"));
			*(void **)__this = Event_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_cee7d4ca3e3c4fc7_18_new)
HXLINE(  19)		( ( ::Event)(__this) )->name = name;
HXLINE(  20)		( ( ::Event)(__this) )->position = pos;
HXLINE(  21)		( ( ::Event)(__this) )->value = value;
HXLINE(  22)		( ( ::Event)(__this) )->type = type;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Event_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Event",fa,37,f2,08); }

		::String name;
		Float position;
		Float value;
		::String type;
};


#endif /* INCLUDED_Event */ 
